function M3(t,a){for(var i=0;i<a.length;i++){const r=a[i];if(typeof r!="string"&&!Array.isArray(r)){for(const c in r)if(c!=="default"&&!(c in t)){const l=Object.getOwnPropertyDescriptor(r,c);l&&Object.defineProperty(t,c,l.get?l:{enumerable:!0,get:()=>r[c]})}}}return Object.freeze(Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}))}(function(){const a=document.createElement("link").relList;if(a&&a.supports&&a.supports("modulepreload"))return;for(const c of document.querySelectorAll('link[rel="modulepreload"]'))r(c);new MutationObserver(c=>{for(const l of c)if(l.type==="childList")for(const u of l.addedNodes)u.tagName==="LINK"&&u.rel==="modulepreload"&&r(u)}).observe(document,{childList:!0,subtree:!0});function i(c){const l={};return c.integrity&&(l.integrity=c.integrity),c.referrerPolicy&&(l.referrerPolicy=c.referrerPolicy),c.crossOrigin==="use-credentials"?l.credentials="include":c.crossOrigin==="anonymous"?l.credentials="omit":l.credentials="same-origin",l}function r(c){if(c.ep)return;c.ep=!0;const l=i(c);fetch(c.href,l)}})();function bs(t){return t&&t.__esModule&&Object.prototype.hasOwnProperty.call(t,"default")?t.default:t}var Kl={exports:{}},Vn={};/**
 * @license React
 * react-jsx-runtime.production.js
 *
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */var qp;function lC(){if(qp)return Vn;qp=1;var t=Symbol.for("react.transitional.element"),a=Symbol.for("react.fragment");function i(r,c,l){var u=null;if(l!==void 0&&(u=""+l),c.key!==void 0&&(u=""+c.key),"key"in c){l={};for(var F in c)F!=="key"&&(l[F]=c[F])}else l=c;return c=l.ref,{$$typeof:t,type:r,key:u,ref:c!==void 0?c:null,props:l}}return Vn.Fragment=a,Vn.jsx=i,Vn.jsxs=i,Vn}var Wp;function hC(){return Wp||(Wp=1,Kl.exports=lC()),Kl.exports}var g=hC();const uC=bs(g),FC=M3({__proto__:null,default:uC},[g]);var Zl={exports:{}},Un={},Yl={exports:{}},Xl={};/**
 * @license React
 * scheduler.production.js
 *
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */var Kp;function dC(){return Kp||(Kp=1,function(t){function a(I,q){var J=I.length;I.push(q);e:for(;0<J;){var Y=J-1>>>1,T=I[Y];if(0<c(T,q))I[Y]=q,I[J]=T,J=Y;else break e}}function i(I){return I.length===0?null:I[0]}function r(I){if(I.length===0)return null;var q=I[0],J=I.pop();if(J!==q){I[0]=J;e:for(var Y=0,T=I.length,$=T>>>1;Y<$;){var Q=2*(Y+1)-1,a2=I[Q],d2=Q+1,k2=I[d2];if(0>c(a2,J))d2<T&&0>c(k2,a2)?(I[Y]=k2,I[d2]=J,Y=d2):(I[Y]=a2,I[Q]=J,Y=Q);else if(d2<T&&0>c(k2,J))I[Y]=k2,I[d2]=J,Y=d2;else break e}}return q}function c(I,q){var J=I.sortIndex-q.sortIndex;return J!==0?J:I.id-q.id}if(t.unstable_now=void 0,typeof performance=="object"&&typeof performance.now=="function"){var l=performance;t.unstable_now=function(){return l.now()}}else{var u=Date,F=u.now();t.unstable_now=function(){return u.now()-F}}var p=[],A=[],b=1,m=null,y=3,C=!1,B=!1,v=!1,D=!1,w=typeof setTimeout=="function"?setTimeout:null,x=typeof clearTimeout=="function"?clearTimeout:null,_=typeof setImmediate<"u"?setImmediate:null;function R(I){for(var q=i(A);q!==null;){if(q.callback===null)r(A);else if(q.startTime<=I)r(A),q.sortIndex=q.expirationTime,a(p,q);else break;q=i(A)}}function P(I){if(v=!1,R(I),!B)if(i(p)!==null)B=!0,S||(S=!0,s2());else{var q=i(A);q!==null&&F2(P,q.startTime-I)}}var S=!1,N=-1,O=5,U=-1;function n2(){return D?!0:!(t.unstable_now()-U<O)}function u2(){if(D=!1,S){var I=t.unstable_now();U=I;var q=!0;try{e:{B=!1,v&&(v=!1,x(N),N=-1),C=!0;var J=y;try{t:{for(R(I),m=i(p);m!==null&&!(m.expirationTime>I&&n2());){var Y=m.callback;if(typeof Y=="function"){m.callback=null,y=m.priorityLevel;var T=Y(m.expirationTime<=I);if(I=t.unstable_now(),typeof T=="function"){m.callback=T,R(I),q=!0;break t}m===i(p)&&r(p),R(I)}else r(p);m=i(p)}if(m!==null)q=!0;else{var $=i(A);$!==null&&F2(P,$.startTime-I),q=!1}}break e}finally{m=null,y=J,C=!1}q=void 0}}finally{q?s2():S=!1}}}var s2;if(typeof _=="function")s2=function(){_(u2)};else if(typeof MessageChannel<"u"){var c2=new MessageChannel,W=c2.port2;c2.port1.onmessage=u2,s2=function(){W.postMessage(null)}}else s2=function(){w(u2,0)};function F2(I,q){N=w(function(){I(t.unstable_now())},q)}t.unstable_IdlePriority=5,t.unstable_ImmediatePriority=1,t.unstable_LowPriority=4,t.unstable_NormalPriority=3,t.unstable_Profiling=null,t.unstable_UserBlockingPriority=2,t.unstable_cancelCallback=function(I){I.callback=null},t.unstable_forceFrameRate=function(I){0>I||125<I?console.error("forceFrameRate takes a positive int between 0 and 125, forcing frame rates higher than 125 fps is not supported"):O=0<I?Math.floor(1e3/I):5},t.unstable_getCurrentPriorityLevel=function(){return y},t.unstable_next=function(I){switch(y){case 1:case 2:case 3:var q=3;break;default:q=y}var J=y;y=q;try{return I()}finally{y=J}},t.unstable_requestPaint=function(){D=!0},t.unstable_runWithPriority=function(I,q){switch(I){case 1:case 2:case 3:case 4:case 5:break;default:I=3}var J=y;y=I;try{return q()}finally{y=J}},t.unstable_scheduleCallback=function(I,q,J){var Y=t.unstable_now();switch(typeof J=="object"&&J!==null?(J=J.delay,J=typeof J=="number"&&0<J?Y+J:Y):J=Y,I){case 1:var T=-1;break;case 2:T=250;break;case 5:T=1073741823;break;case 4:T=1e4;break;default:T=5e3}return T=J+T,I={id:b++,callback:q,priorityLevel:I,startTime:J,expirationTime:T,sortIndex:-1},J>Y?(I.sortIndex=J,a(A,I),i(p)===null&&I===i(A)&&(v?(x(N),N=-1):v=!0,F2(P,J-Y))):(I.sortIndex=T,a(p,I),B||C||(B=!0,S||(S=!0,s2()))),I},t.unstable_shouldYield=n2,t.unstable_wrapCallback=function(I){var q=y;return function(){var J=y;y=q;try{return I.apply(this,arguments)}finally{y=J}}}}(Xl)),Xl}var Zp;function AC(){return Zp||(Zp=1,Yl.exports=dC()),Yl.exports}var Jl={exports:{}},P2={};/**
 * @license React
 * react.production.js
 *
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */var Yp;function pC(){if(Yp)return P2;Yp=1;var t=Symbol.for("react.transitional.element"),a=Symbol.for("react.portal"),i=Symbol.for("react.fragment"),r=Symbol.for("react.strict_mode"),c=Symbol.for("react.profiler"),l=Symbol.for("react.consumer"),u=Symbol.for("react.context"),F=Symbol.for("react.forward_ref"),p=Symbol.for("react.suspense"),A=Symbol.for("react.memo"),b=Symbol.for("react.lazy"),m=Symbol.iterator;function y(T){return T===null||typeof T!="object"?null:(T=m&&T[m]||T["@@iterator"],typeof T=="function"?T:null)}var C={isMounted:function(){return!1},enqueueForceUpdate:function(){},enqueueReplaceState:function(){},enqueueSetState:function(){}},B=Object.assign,v={};function D(T,$,Q){this.props=T,this.context=$,this.refs=v,this.updater=Q||C}D.prototype.isReactComponent={},D.prototype.setState=function(T,$){if(typeof T!="object"&&typeof T!="function"&&T!=null)throw Error("takes an object of state variables to update or a function which returns an object of state variables.");this.updater.enqueueSetState(this,T,$,"setState")},D.prototype.forceUpdate=function(T){this.updater.enqueueForceUpdate(this,T,"forceUpdate")};function w(){}w.prototype=D.prototype;function x(T,$,Q){this.props=T,this.context=$,this.refs=v,this.updater=Q||C}var _=x.prototype=new w;_.constructor=x,B(_,D.prototype),_.isPureReactComponent=!0;var R=Array.isArray,P={H:null,A:null,T:null,S:null,V:null},S=Object.prototype.hasOwnProperty;function N(T,$,Q,a2,d2,k2){return Q=k2.ref,{$$typeof:t,type:T,key:$,ref:Q!==void 0?Q:null,props:k2}}function O(T,$){return N(T.type,$,void 0,void 0,void 0,T.props)}function U(T){return typeof T=="object"&&T!==null&&T.$$typeof===t}function n2(T){var $={"=":"=0",":":"=2"};return"$"+T.replace(/[=:]/g,function(Q){return $[Q]})}var u2=/\/+/g;function s2(T,$){return typeof T=="object"&&T!==null&&T.key!=null?n2(""+T.key):$.toString(36)}function c2(){}function W(T){switch(T.status){case"fulfilled":return T.value;case"rejected":throw T.reason;default:switch(typeof T.status=="string"?T.then(c2,c2):(T.status="pending",T.then(function($){T.status==="pending"&&(T.status="fulfilled",T.value=$)},function($){T.status==="pending"&&(T.status="rejected",T.reason=$)})),T.status){case"fulfilled":return T.value;case"rejected":throw T.reason}}throw T}function F2(T,$,Q,a2,d2){var k2=typeof T;(k2==="undefined"||k2==="boolean")&&(T=null);var g2=!1;if(T===null)g2=!0;else switch(k2){case"bigint":case"string":case"number":g2=!0;break;case"object":switch(T.$$typeof){case t:case a:g2=!0;break;case b:return g2=T._init,F2(g2(T._payload),$,Q,a2,d2)}}if(g2)return d2=d2(T),g2=a2===""?"."+s2(T,0):a2,R(d2)?(Q="",g2!=null&&(Q=g2.replace(u2,"$&/")+"/"),F2(d2,$,Q,"",function(L2){return L2})):d2!=null&&(U(d2)&&(d2=O(d2,Q+(d2.key==null||T&&T.key===d2.key?"":(""+d2.key).replace(u2,"$&/")+"/")+g2)),$.push(d2)),1;g2=0;var K2=a2===""?".":a2+":";if(R(T))for(var _2=0;_2<T.length;_2++)a2=T[_2],k2=K2+s2(a2,_2),g2+=F2(a2,$,Q,k2,d2);else if(_2=y(T),typeof _2=="function")for(T=_2.call(T),_2=0;!(a2=T.next()).done;)a2=a2.value,k2=K2+s2(a2,_2++),g2+=F2(a2,$,Q,k2,d2);else if(k2==="object"){if(typeof T.then=="function")return F2(W(T),$,Q,a2,d2);throw $=String(T),Error("Objects are not valid as a React child (found: "+($==="[object Object]"?"object with keys {"+Object.keys(T).join(", ")+"}":$)+"). If you meant to render a collection of children, use an array instead.")}return g2}function I(T,$,Q){if(T==null)return T;var a2=[],d2=0;return F2(T,a2,"","",function(k2){return $.call(Q,k2,d2++)}),a2}function q(T){if(T._status===-1){var $=T._result;$=$(),$.then(function(Q){(T._status===0||T._status===-1)&&(T._status=1,T._result=Q)},function(Q){(T._status===0||T._status===-1)&&(T._status=2,T._result=Q)}),T._status===-1&&(T._status=0,T._result=$)}if(T._status===1)return T._result.default;throw T._result}var J=typeof reportError=="function"?reportError:function(T){if(typeof window=="object"&&typeof window.ErrorEvent=="function"){var $=new window.ErrorEvent("error",{bubbles:!0,cancelable:!0,message:typeof T=="object"&&T!==null&&typeof T.message=="string"?String(T.message):String(T),error:T});if(!window.dispatchEvent($))return}else if(typeof process=="object"&&typeof process.emit=="function"){process.emit("uncaughtException",T);return}console.error(T)};function Y(){}return P2.Children={map:I,forEach:function(T,$,Q){I(T,function(){$.apply(this,arguments)},Q)},count:function(T){var $=0;return I(T,function(){$++}),$},toArray:function(T){return I(T,function($){return $})||[]},only:function(T){if(!U(T))throw Error("React.Children.only expected to receive a single React element child.");return T}},P2.Component=D,P2.Fragment=i,P2.Profiler=c,P2.PureComponent=x,P2.StrictMode=r,P2.Suspense=p,P2.__CLIENT_INTERNALS_DO_NOT_USE_OR_WARN_USERS_THEY_CANNOT_UPGRADE=P,P2.__COMPILER_RUNTIME={__proto__:null,c:function(T){return P.H.useMemoCache(T)}},P2.cache=function(T){return function(){return T.apply(null,arguments)}},P2.cloneElement=function(T,$,Q){if(T==null)throw Error("The argument must be a React element, but you passed "+T+".");var a2=B({},T.props),d2=T.key,k2=void 0;if($!=null)for(g2 in $.ref!==void 0&&(k2=void 0),$.key!==void 0&&(d2=""+$.key),$)!S.call($,g2)||g2==="key"||g2==="__self"||g2==="__source"||g2==="ref"&&$.ref===void 0||(a2[g2]=$[g2]);var g2=arguments.length-2;if(g2===1)a2.children=Q;else if(1<g2){for(var K2=Array(g2),_2=0;_2<g2;_2++)K2[_2]=arguments[_2+2];a2.children=K2}return N(T.type,d2,void 0,void 0,k2,a2)},P2.createContext=function(T){return T={$$typeof:u,_currentValue:T,_currentValue2:T,_threadCount:0,Provider:null,Consumer:null},T.Provider=T,T.Consumer={$$typeof:l,_context:T},T},P2.createElement=function(T,$,Q){var a2,d2={},k2=null;if($!=null)for(a2 in $.key!==void 0&&(k2=""+$.key),$)S.call($,a2)&&a2!=="key"&&a2!=="__self"&&a2!=="__source"&&(d2[a2]=$[a2]);var g2=arguments.length-2;if(g2===1)d2.children=Q;else if(1<g2){for(var K2=Array(g2),_2=0;_2<g2;_2++)K2[_2]=arguments[_2+2];d2.children=K2}if(T&&T.defaultProps)for(a2 in g2=T.defaultProps,g2)d2[a2]===void 0&&(d2[a2]=g2[a2]);return N(T,k2,void 0,void 0,null,d2)},P2.createRef=function(){return{current:null}},P2.forwardRef=function(T){return{$$typeof:F,render:T}},P2.isValidElement=U,P2.lazy=function(T){return{$$typeof:b,_payload:{_status:-1,_result:T},_init:q}},P2.memo=function(T,$){return{$$typeof:A,type:T,compare:$===void 0?null:$}},P2.startTransition=function(T){var $=P.T,Q={};P.T=Q;try{var a2=T(),d2=P.S;d2!==null&&d2(Q,a2),typeof a2=="object"&&a2!==null&&typeof a2.then=="function"&&a2.then(Y,J)}catch(k2){J(k2)}finally{P.T=$}},P2.unstable_useCacheRefresh=function(){return P.H.useCacheRefresh()},P2.use=function(T){return P.H.use(T)},P2.useActionState=function(T,$,Q){return P.H.useActionState(T,$,Q)},P2.useCallback=function(T,$){return P.H.useCallback(T,$)},P2.useContext=function(T){return P.H.useContext(T)},P2.useDebugValue=function(){},P2.useDeferredValue=function(T,$){return P.H.useDeferredValue(T,$)},P2.useEffect=function(T,$,Q){var a2=P.H;if(typeof Q=="function")throw Error("useEffect CRUD overload is not enabled in this build of React.");return a2.useEffect(T,$)},P2.useId=function(){return P.H.useId()},P2.useImperativeHandle=function(T,$,Q){return P.H.useImperativeHandle(T,$,Q)},P2.useInsertionEffect=function(T,$){return P.H.useInsertionEffect(T,$)},P2.useLayoutEffect=function(T,$){return P.H.useLayoutEffect(T,$)},P2.useMemo=function(T,$){return P.H.useMemo(T,$)},P2.useOptimistic=function(T,$){return P.H.useOptimistic(T,$)},P2.useReducer=function(T,$,Q){return P.H.useReducer(T,$,Q)},P2.useRef=function(T){return P.H.useRef(T)},P2.useState=function(T){return P.H.useState(T)},P2.useSyncExternalStore=function(T,$,Q){return P.H.useSyncExternalStore(T,$,Q)},P2.useTransition=function(){return P.H.useTransition()},P2.version="19.1.0",P2}var Xp;function hu(){return Xp||(Xp=1,Jl.exports=pC()),Jl.exports}var $l={exports:{}},N0={};/**
 * @license React
 * react-dom.production.js
 *
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */var Jp;function mC(){if(Jp)return N0;Jp=1;var t=hu();function a(p){var A="https://react.dev/errors/"+p;if(1<arguments.length){A+="?args[]="+encodeURIComponent(arguments[1]);for(var b=2;b<arguments.length;b++)A+="&args[]="+encodeURIComponent(arguments[b])}return"Minified React error #"+p+"; visit "+A+" for the full message or use the non-minified dev environment for full errors and additional helpful warnings."}function i(){}var r={d:{f:i,r:function(){throw Error(a(522))},D:i,C:i,L:i,m:i,X:i,S:i,M:i},p:0,findDOMNode:null},c=Symbol.for("react.portal");function l(p,A,b){var m=3<arguments.length&&arguments[3]!==void 0?arguments[3]:null;return{$$typeof:c,key:m==null?null:""+m,children:p,containerInfo:A,implementation:b}}var u=t.__CLIENT_INTERNALS_DO_NOT_USE_OR_WARN_USERS_THEY_CANNOT_UPGRADE;function F(p,A){if(p==="font")return"";if(typeof A=="string")return A==="use-credentials"?A:""}return N0.__DOM_INTERNALS_DO_NOT_USE_OR_WARN_USERS_THEY_CANNOT_UPGRADE=r,N0.createPortal=function(p,A){var b=2<arguments.length&&arguments[2]!==void 0?arguments[2]:null;if(!A||A.nodeType!==1&&A.nodeType!==9&&A.nodeType!==11)throw Error(a(299));return l(p,A,null,b)},N0.flushSync=function(p){var A=u.T,b=r.p;try{if(u.T=null,r.p=2,p)return p()}finally{u.T=A,r.p=b,r.d.f()}},N0.preconnect=function(p,A){typeof p=="string"&&(A?(A=A.crossOrigin,A=typeof A=="string"?A==="use-credentials"?A:"":void 0):A=null,r.d.C(p,A))},N0.prefetchDNS=function(p){typeof p=="string"&&r.d.D(p)},N0.preinit=function(p,A){if(typeof p=="string"&&A&&typeof A.as=="string"){var b=A.as,m=F(b,A.crossOrigin),y=typeof A.integrity=="string"?A.integrity:void 0,C=typeof A.fetchPriority=="string"?A.fetchPriority:void 0;b==="style"?r.d.S(p,typeof A.precedence=="string"?A.precedence:void 0,{crossOrigin:m,integrity:y,fetchPriority:C}):b==="script"&&r.d.X(p,{crossOrigin:m,integrity:y,fetchPriority:C,nonce:typeof A.nonce=="string"?A.nonce:void 0})}},N0.preinitModule=function(p,A){if(typeof p=="string")if(typeof A=="object"&&A!==null){if(A.as==null||A.as==="script"){var b=F(A.as,A.crossOrigin);r.d.M(p,{crossOrigin:b,integrity:typeof A.integrity=="string"?A.integrity:void 0,nonce:typeof A.nonce=="string"?A.nonce:void 0})}}else A==null&&r.d.M(p)},N0.preload=function(p,A){if(typeof p=="string"&&typeof A=="object"&&A!==null&&typeof A.as=="string"){var b=A.as,m=F(b,A.crossOrigin);r.d.L(p,b,{crossOrigin:m,integrity:typeof A.integrity=="string"?A.integrity:void 0,nonce:typeof A.nonce=="string"?A.nonce:void 0,type:typeof A.type=="string"?A.type:void 0,fetchPriority:typeof A.fetchPriority=="string"?A.fetchPriority:void 0,referrerPolicy:typeof A.referrerPolicy=="string"?A.referrerPolicy:void 0,imageSrcSet:typeof A.imageSrcSet=="string"?A.imageSrcSet:void 0,imageSizes:typeof A.imageSizes=="string"?A.imageSizes:void 0,media:typeof A.media=="string"?A.media:void 0})}},N0.preloadModule=function(p,A){if(typeof p=="string")if(A){var b=F(A.as,A.crossOrigin);r.d.m(p,{as:typeof A.as=="string"&&A.as!=="script"?A.as:void 0,crossOrigin:b,integrity:typeof A.integrity=="string"?A.integrity:void 0})}else r.d.m(p)},N0.requestFormReset=function(p){r.d.r(p)},N0.unstable_batchedUpdates=function(p,A){return p(A)},N0.useFormState=function(p,A,b){return u.H.useFormState(p,A,b)},N0.useFormStatus=function(){return u.H.useHostTransitionStatus()},N0.version="19.1.0",N0}var $p;function N3(){if($p)return $l.exports;$p=1;function t(){if(!(typeof __REACT_DEVTOOLS_GLOBAL_HOOK__>"u"||typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE!="function"))try{__REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE(t)}catch(a){console.error(a)}}return t(),$l.exports=mC(),$l.exports}/**
 * @license React
 * react-dom-client.production.js
 *
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */var Qp;function gC(){if(Qp)return Un;Qp=1;var t=AC(),a=hu(),i=N3();function r(e){var o="https://react.dev/errors/"+e;if(1<arguments.length){o+="?args[]="+encodeURIComponent(arguments[1]);for(var n=2;n<arguments.length;n++)o+="&args[]="+encodeURIComponent(arguments[n])}return"Minified React error #"+e+"; visit "+o+" for the full message or use the non-minified dev environment for full errors and additional helpful warnings."}function c(e){return!(!e||e.nodeType!==1&&e.nodeType!==9&&e.nodeType!==11)}function l(e){var o=e,n=e;if(e.alternate)for(;o.return;)o=o.return;else{e=o;do o=e,(o.flags&4098)!==0&&(n=o.return),e=o.return;while(e)}return o.tag===3?n:null}function u(e){if(e.tag===13){var o=e.memoizedState;if(o===null&&(e=e.alternate,e!==null&&(o=e.memoizedState)),o!==null)return o.dehydrated}return null}function F(e){if(l(e)!==e)throw Error(r(188))}function p(e){var o=e.alternate;if(!o){if(o=l(e),o===null)throw Error(r(188));return o!==e?null:e}for(var n=e,s=o;;){var h=n.return;if(h===null)break;var d=h.alternate;if(d===null){if(s=h.return,s!==null){n=s;continue}break}if(h.child===d.child){for(d=h.child;d;){if(d===n)return F(h),e;if(d===s)return F(h),o;d=d.sibling}throw Error(r(188))}if(n.return!==s.return)n=h,s=d;else{for(var k=!1,E=h.child;E;){if(E===n){k=!0,n=h,s=d;break}if(E===s){k=!0,s=h,n=d;break}E=E.sibling}if(!k){for(E=d.child;E;){if(E===n){k=!0,n=d,s=h;break}if(E===s){k=!0,s=d,n=h;break}E=E.sibling}if(!k)throw Error(r(189))}}if(n.alternate!==s)throw Error(r(190))}if(n.tag!==3)throw Error(r(188));return n.stateNode.current===n?e:o}function A(e){var o=e.tag;if(o===5||o===26||o===27||o===6)return e;for(e=e.child;e!==null;){if(o=A(e),o!==null)return o;e=e.sibling}return null}var b=Object.assign,m=Symbol.for("react.element"),y=Symbol.for("react.transitional.element"),C=Symbol.for("react.portal"),B=Symbol.for("react.fragment"),v=Symbol.for("react.strict_mode"),D=Symbol.for("react.profiler"),w=Symbol.for("react.provider"),x=Symbol.for("react.consumer"),_=Symbol.for("react.context"),R=Symbol.for("react.forward_ref"),P=Symbol.for("react.suspense"),S=Symbol.for("react.suspense_list"),N=Symbol.for("react.memo"),O=Symbol.for("react.lazy"),U=Symbol.for("react.activity"),n2=Symbol.for("react.memo_cache_sentinel"),u2=Symbol.iterator;function s2(e){return e===null||typeof e!="object"?null:(e=u2&&e[u2]||e["@@iterator"],typeof e=="function"?e:null)}var c2=Symbol.for("react.client.reference");function W(e){if(e==null)return null;if(typeof e=="function")return e.$$typeof===c2?null:e.displayName||e.name||null;if(typeof e=="string")return e;switch(e){case B:return"Fragment";case D:return"Profiler";case v:return"StrictMode";case P:return"Suspense";case S:return"SuspenseList";case U:return"Activity"}if(typeof e=="object")switch(e.$$typeof){case C:return"Portal";case _:return(e.displayName||"Context")+".Provider";case x:return(e._context.displayName||"Context")+".Consumer";case R:var o=e.render;return e=e.displayName,e||(e=o.displayName||o.name||"",e=e!==""?"ForwardRef("+e+")":"ForwardRef"),e;case N:return o=e.displayName||null,o!==null?o:W(e.type)||"Memo";case O:o=e._payload,e=e._init;try{return W(e(o))}catch{}}return null}var F2=Array.isArray,I=a.__CLIENT_INTERNALS_DO_NOT_USE_OR_WARN_USERS_THEY_CANNOT_UPGRADE,q=i.__DOM_INTERNALS_DO_NOT_USE_OR_WARN_USERS_THEY_CANNOT_UPGRADE,J={pending:!1,data:null,method:null,action:null},Y=[],T=-1;function $(e){return{current:e}}function Q(e){0>T||(e.current=Y[T],Y[T]=null,T--)}function a2(e,o){T++,Y[T]=e.current,e.current=o}var d2=$(null),k2=$(null),g2=$(null),K2=$(null);function _2(e,o){switch(a2(g2,o),a2(k2,e),a2(d2,null),o.nodeType){case 9:case 11:e=(e=o.documentElement)&&(e=e.namespaceURI)?fp(e):0;break;default:if(e=o.tagName,o=o.namespaceURI)o=fp(o),e=yp(o,e);else switch(e){case"svg":e=1;break;case"math":e=2;break;default:e=0}}Q(d2),a2(d2,e)}function L2(){Q(d2),Q(k2),Q(g2)}function V2(e){e.memoizedState!==null&&a2(K2,e);var o=d2.current,n=yp(o,e.type);o!==n&&(a2(k2,e),a2(d2,n))}function h0(e){k2.current===e&&(Q(d2),Q(k2)),K2.current===e&&(Q(K2),In._currentValue=J)}var L0=Object.prototype.hasOwnProperty,xe=t.unstable_scheduleCallback,G0=t.unstable_cancelCallback,Ua=t.unstable_shouldYield,Ga=t.unstable_requestPaint,z0=t.unstable_now,qa=t.unstable_getCurrentPriorityLevel,et=t.unstable_ImmediatePriority,gi=t.unstable_UserBlockingPriority,Oo=t.unstable_NormalPriority,tt=t.unstable_LowPriority,kt=t.unstable_IdlePriority,bi=t.log,Wa=t.unstable_setDisableYieldValue,q0=null,s0=null;function Se(e){if(typeof bi=="function"&&Wa(e),s0&&typeof s0.setStrictMode=="function")try{s0.setStrictMode(q0,e)}catch{}}var x0=Math.clz32?Math.clz32:fi,Us=Math.log,ze=Math.LN2;function fi(e){return e>>>=0,e===0?32:31-(Us(e)/ze|0)|0}var no=256,io=4194304;function ot(e){var o=e&42;if(o!==0)return o;switch(e&-e){case 1:return 1;case 2:return 2;case 4:return 4;case 8:return 8;case 16:return 16;case 32:return 32;case 64:return 64;case 128:return 128;case 256:case 512:case 1024:case 2048:case 4096:case 8192:case 16384:case 32768:case 65536:case 131072:case 262144:case 524288:case 1048576:case 2097152:return e&4194048;case 4194304:case 8388608:case 16777216:case 33554432:return e&62914560;case 67108864:return 67108864;case 134217728:return 134217728;case 268435456:return 268435456;case 536870912:return 536870912;case 1073741824:return 0;default:return e}}function ro(e,o,n){var s=e.pendingLanes;if(s===0)return 0;var h=0,d=e.suspendedLanes,k=e.pingedLanes;e=e.warmLanes;var E=s&134217727;return E!==0?(s=E&~d,s!==0?h=ot(s):(k&=E,k!==0?h=ot(k):n||(n=E&~e,n!==0&&(h=ot(n))))):(E=s&~d,E!==0?h=ot(E):k!==0?h=ot(k):n||(n=s&~e,n!==0&&(h=ot(n)))),h===0?0:o!==0&&o!==h&&(o&d)===0&&(d=h&-h,n=o&-o,d>=n||d===32&&(n&4194048)!==0)?o:h}function Oe(e,o){return(e.pendingLanes&~(e.suspendedLanes&~e.pingedLanes)&o)===0}function yi(e,o){switch(e){case 1:case 2:case 4:case 8:case 64:return o+250;case 16:case 32:case 128:case 256:case 512:case 1024:case 2048:case 4096:case 8192:case 16384:case 32768:case 65536:case 131072:case 262144:case 524288:case 1048576:case 2097152:return o+5e3;case 4194304:case 8388608:case 16777216:case 33554432:return-1;case 67108864:case 134217728:case 268435456:case 536870912:case 1073741824:return-1;default:return-1}}function jo(){var e=no;return no<<=1,(no&4194048)===0&&(no=256),e}function Ci(){var e=io;return io<<=1,(io&62914560)===0&&(io=4194304),e}function Vo(e){for(var o=[],n=0;31>n;n++)o.push(e);return o}function so(e,o){e.pendingLanes|=o,o!==268435456&&(e.suspendedLanes=0,e.pingedLanes=0,e.warmLanes=0)}function vi(e,o,n,s,h,d){var k=e.pendingLanes;e.pendingLanes=n,e.suspendedLanes=0,e.pingedLanes=0,e.warmLanes=0,e.expiredLanes&=n,e.entangledLanes&=n,e.errorRecoveryDisabledLanes&=n,e.shellSuspendCounter=0;var E=e.entanglements,L=e.expirationTimes,G=e.hiddenUpdates;for(n=k&~n;0<n;){var e2=31-x0(n),i2=1<<e2;E[e2]=0,L[e2]=-1;var K=G[e2];if(K!==null)for(G[e2]=null,e2=0;e2<K.length;e2++){var Z=K[e2];Z!==null&&(Z.lane&=-536870913)}n&=~i2}s!==0&&co(e,s,0),d!==0&&h===0&&e.tag!==0&&(e.suspendedLanes|=d&~(k&~o))}function co(e,o,n){e.pendingLanes|=o,e.suspendedLanes&=~o;var s=31-x0(o);e.entangledLanes|=o,e.entanglements[s]=e.entanglements[s]|1073741824|n&4194090}function lo(e,o){var n=e.entangledLanes|=o;for(e=e.entanglements;n;){var s=31-x0(n),h=1<<s;h&o|e[s]&o&&(e[s]|=o),n&=~h}}function Ka(e){switch(e){case 2:e=1;break;case 8:e=4;break;case 32:e=16;break;case 256:case 512:case 1024:case 2048:case 4096:case 8192:case 16384:case 32768:case 65536:case 131072:case 262144:case 524288:case 1048576:case 2097152:case 4194304:case 8388608:case 16777216:case 33554432:e=128;break;case 268435456:e=134217728;break;default:e=0}return e}function Za(e){return e&=-e,2<e?8<e?(e&134217727)!==0?32:268435456:8:2}function M(){var e=q.p;return e!==0?e:(e=window.event,e===void 0?32:zp(e.type))}function j(e,o){var n=q.p;try{return q.p=e,o()}finally{q.p=n}}var X=Math.random().toString(36).slice(2),r2="__reactFiber$"+X,h2="__reactProps$"+X,m2="__reactContainer$"+X,f2="__reactEvents$"+X,b2="__reactListeners$"+X,v2="__reactHandles$"+X,D2="__reactResources$"+X,B2="__reactMarker$"+X;function y2(e){delete e[r2],delete e[h2],delete e[f2],delete e[b2],delete e[v2]}function x2(e){var o=e[r2];if(o)return o;for(var n=e.parentNode;n;){if(o=n[m2]||n[r2]){if(n=o.alternate,o.child!==null||n!==null&&n.child!==null)for(e=kp(e);e!==null;){if(n=e[r2])return n;e=kp(e)}return o}e=n,n=e.parentNode}return null}function q2(e){if(e=e[r2]||e[m2]){var o=e.tag;if(o===5||o===6||o===13||o===26||o===27||o===3)return e}return null}function u0(e){var o=e.tag;if(o===5||o===26||o===27||o===6)return e.stateNode;throw Error(r(33))}function F0(e){var o=e[D2];return o||(o=e[D2]={hoistableStyles:new Map,hoistableScripts:new Map}),o}function T2(e){e[B2]=!0}var X2=new Set,je={};function J0(e,o){O0(e,o),O0(e+"Capture",o)}function O0(e,o){for(je[e]=o,e=0;e<o.length;e++)X2.add(o[e])}var he=RegExp("^[:A-Z_a-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD][:A-Z_a-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD\\-.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040]*$"),Uo={},Dt={};function at(e){return L0.call(Dt,e)?!0:L0.call(Uo,e)?!1:he.test(e)?Dt[e]=!0:(Uo[e]=!0,!1)}function nt(e,o,n){if(at(o))if(n===null)e.removeAttribute(o);else{switch(typeof n){case"undefined":case"function":case"symbol":e.removeAttribute(o);return;case"boolean":var s=o.toLowerCase().slice(0,5);if(s!=="data-"&&s!=="aria-"){e.removeAttribute(o);return}}e.setAttribute(o,""+n)}}function it(e,o,n){if(n===null)e.removeAttribute(o);else{switch(typeof n){case"undefined":case"function":case"symbol":case"boolean":e.removeAttribute(o);return}e.setAttribute(o,""+n)}}function H2(e,o,n,s){if(s===null)e.removeAttribute(n);else{switch(typeof s){case"undefined":case"function":case"symbol":case"boolean":e.removeAttribute(n);return}e.setAttributeNS(o,n,""+s)}}var y0,ho;function ue(e){if(y0===void 0)try{throw Error()}catch(n){var o=n.stack.trim().match(/\n( *(at )?)/);y0=o&&o[1]||"",ho=-1<n.stack.indexOf(`
    at`)?" (<anonymous>)":-1<n.stack.indexOf("@")?"@unknown:0:0":""}return`
`+y0+e+ho}var c0=!1;function wt(e,o){if(!e||c0)return"";c0=!0;var n=Error.prepareStackTrace;Error.prepareStackTrace=void 0;try{var s={DetermineComponentFrameRoot:function(){try{if(o){var i2=function(){throw Error()};if(Object.defineProperty(i2.prototype,"props",{set:function(){throw Error()}}),typeof Reflect=="object"&&Reflect.construct){try{Reflect.construct(i2,[])}catch(Z){var K=Z}Reflect.construct(e,[],i2)}else{try{i2.call()}catch(Z){K=Z}e.call(i2.prototype)}}else{try{throw Error()}catch(Z){K=Z}(i2=e())&&typeof i2.catch=="function"&&i2.catch(function(){})}}catch(Z){if(Z&&K&&typeof Z.stack=="string")return[Z.stack,K.stack]}return[null,null]}};s.DetermineComponentFrameRoot.displayName="DetermineComponentFrameRoot";var h=Object.getOwnPropertyDescriptor(s.DetermineComponentFrameRoot,"name");h&&h.configurable&&Object.defineProperty(s.DetermineComponentFrameRoot,"name",{value:"DetermineComponentFrameRoot"});var d=s.DetermineComponentFrameRoot(),k=d[0],E=d[1];if(k&&E){var L=k.split(`
`),G=E.split(`
`);for(h=s=0;s<L.length&&!L[s].includes("DetermineComponentFrameRoot");)s++;for(;h<G.length&&!G[h].includes("DetermineComponentFrameRoot");)h++;if(s===L.length||h===G.length)for(s=L.length-1,h=G.length-1;1<=s&&0<=h&&L[s]!==G[h];)h--;for(;1<=s&&0<=h;s--,h--)if(L[s]!==G[h]){if(s!==1||h!==1)do if(s--,h--,0>h||L[s]!==G[h]){var e2=`
`+L[s].replace(" at new "," at ");return e.displayName&&e2.includes("<anonymous>")&&(e2=e2.replace("<anonymous>",e.displayName)),e2}while(1<=s&&0<=h);break}}}finally{c0=!1,Error.prepareStackTrace=n}return(n=e?e.displayName||e.name:"")?ue(n):""}function Bi(e){switch(e.tag){case 26:case 27:case 5:return ue(e.type);case 16:return ue("Lazy");case 13:return ue("Suspense");case 19:return ue("SuspenseList");case 0:case 15:return wt(e.type,!1);case 11:return wt(e.type.render,!1);case 1:return wt(e.type,!0);case 31:return ue("Activity");default:return""}}function ki(e){try{var o="";do o+=Bi(e),e=e.return;while(e);return o}catch(n){return`
Error generating stack: `+n.message+`
`+n.stack}}function Fe(e){switch(typeof e){case"bigint":case"boolean":case"number":case"string":case"undefined":return e;case"object":return e;default:return""}}function AF(e){var o=e.type;return(e=e.nodeName)&&e.toLowerCase()==="input"&&(o==="checkbox"||o==="radio")}function n6(e){var o=AF(e)?"checked":"value",n=Object.getOwnPropertyDescriptor(e.constructor.prototype,o),s=""+e[o];if(!e.hasOwnProperty(o)&&typeof n<"u"&&typeof n.get=="function"&&typeof n.set=="function"){var h=n.get,d=n.set;return Object.defineProperty(e,o,{configurable:!0,get:function(){return h.call(this)},set:function(k){s=""+k,d.call(this,k)}}),Object.defineProperty(e,o,{enumerable:n.enumerable}),{getValue:function(){return s},setValue:function(k){s=""+k},stopTracking:function(){e._valueTracker=null,delete e[o]}}}}function Di(e){e._valueTracker||(e._valueTracker=n6(e))}function pF(e){if(!e)return!1;var o=e._valueTracker;if(!o)return!0;var n=o.getValue(),s="";return e&&(s=AF(e)?e.checked?"true":"false":e.value),e=s,e!==n?(o.setValue(e),!0):!1}function wi(e){if(e=e||(typeof document<"u"?document:void 0),typeof e>"u")return null;try{return e.activeElement||e.body}catch{return e.body}}var i6=/[\n"\\]/g;function de(e){return e.replace(i6,function(o){return"\\"+o.charCodeAt(0).toString(16)+" "})}function Gs(e,o,n,s,h,d,k,E){e.name="",k!=null&&typeof k!="function"&&typeof k!="symbol"&&typeof k!="boolean"?e.type=k:e.removeAttribute("type"),o!=null?k==="number"?(o===0&&e.value===""||e.value!=o)&&(e.value=""+Fe(o)):e.value!==""+Fe(o)&&(e.value=""+Fe(o)):k!=="submit"&&k!=="reset"||e.removeAttribute("value"),o!=null?qs(e,k,Fe(o)):n!=null?qs(e,k,Fe(n)):s!=null&&e.removeAttribute("value"),h==null&&d!=null&&(e.defaultChecked=!!d),h!=null&&(e.checked=h&&typeof h!="function"&&typeof h!="symbol"),E!=null&&typeof E!="function"&&typeof E!="symbol"&&typeof E!="boolean"?e.name=""+Fe(E):e.removeAttribute("name")}function mF(e,o,n,s,h,d,k,E){if(d!=null&&typeof d!="function"&&typeof d!="symbol"&&typeof d!="boolean"&&(e.type=d),o!=null||n!=null){if(!(d!=="submit"&&d!=="reset"||o!=null))return;n=n!=null?""+Fe(n):"",o=o!=null?""+Fe(o):n,E||o===e.value||(e.value=o),e.defaultValue=o}s=s??h,s=typeof s!="function"&&typeof s!="symbol"&&!!s,e.checked=E?e.checked:!!s,e.defaultChecked=!!s,k!=null&&typeof k!="function"&&typeof k!="symbol"&&typeof k!="boolean"&&(e.name=k)}function qs(e,o,n){o==="number"&&wi(e.ownerDocument)===e||e.defaultValue===""+n||(e.defaultValue=""+n)}function Go(e,o,n,s){if(e=e.options,o){o={};for(var h=0;h<n.length;h++)o["$"+n[h]]=!0;for(n=0;n<e.length;n++)h=o.hasOwnProperty("$"+e[n].value),e[n].selected!==h&&(e[n].selected=h),h&&s&&(e[n].defaultSelected=!0)}else{for(n=""+Fe(n),o=null,h=0;h<e.length;h++){if(e[h].value===n){e[h].selected=!0,s&&(e[h].defaultSelected=!0);return}o!==null||e[h].disabled||(o=e[h])}o!==null&&(o.selected=!0)}}function gF(e,o,n){if(o!=null&&(o=""+Fe(o),o!==e.value&&(e.value=o),n==null)){e.defaultValue!==o&&(e.defaultValue=o);return}e.defaultValue=n!=null?""+Fe(n):""}function bF(e,o,n,s){if(o==null){if(s!=null){if(n!=null)throw Error(r(92));if(F2(s)){if(1<s.length)throw Error(r(93));s=s[0]}n=s}n==null&&(n=""),o=n}n=Fe(o),e.defaultValue=n,s=e.textContent,s===n&&s!==""&&s!==null&&(e.value=s)}function qo(e,o){if(o){var n=e.firstChild;if(n&&n===e.lastChild&&n.nodeType===3){n.nodeValue=o;return}}e.textContent=o}var r6=new Set("animationIterationCount aspectRatio borderImageOutset borderImageSlice borderImageWidth boxFlex boxFlexGroup boxOrdinalGroup columnCount columns flex flexGrow flexPositive flexShrink flexNegative flexOrder gridArea gridRow gridRowEnd gridRowSpan gridRowStart gridColumn gridColumnEnd gridColumnSpan gridColumnStart fontWeight lineClamp lineHeight opacity order orphans scale tabSize widows zIndex zoom fillOpacity floodOpacity stopOpacity strokeDasharray strokeDashoffset strokeMiterlimit strokeOpacity strokeWidth MozAnimationIterationCount MozBoxFlex MozBoxFlexGroup MozLineClamp msAnimationIterationCount msFlex msZoom msFlexGrow msFlexNegative msFlexOrder msFlexPositive msFlexShrink msGridColumn msGridColumnSpan msGridRow msGridRowSpan WebkitAnimationIterationCount WebkitBoxFlex WebKitBoxFlexGroup WebkitBoxOrdinalGroup WebkitColumnCount WebkitColumns WebkitFlex WebkitFlexGrow WebkitFlexPositive WebkitFlexShrink WebkitLineClamp".split(" "));function fF(e,o,n){var s=o.indexOf("--")===0;n==null||typeof n=="boolean"||n===""?s?e.setProperty(o,""):o==="float"?e.cssFloat="":e[o]="":s?e.setProperty(o,n):typeof n!="number"||n===0||r6.has(o)?o==="float"?e.cssFloat=n:e[o]=(""+n).trim():e[o]=n+"px"}function yF(e,o,n){if(o!=null&&typeof o!="object")throw Error(r(62));if(e=e.style,n!=null){for(var s in n)!n.hasOwnProperty(s)||o!=null&&o.hasOwnProperty(s)||(s.indexOf("--")===0?e.setProperty(s,""):s==="float"?e.cssFloat="":e[s]="");for(var h in o)s=o[h],o.hasOwnProperty(h)&&n[h]!==s&&fF(e,h,s)}else for(var d in o)o.hasOwnProperty(d)&&fF(e,d,o[d])}function Ws(e){if(e.indexOf("-")===-1)return!1;switch(e){case"annotation-xml":case"color-profile":case"font-face":case"font-face-src":case"font-face-uri":case"font-face-format":case"font-face-name":case"missing-glyph":return!1;default:return!0}}var s6=new Map([["acceptCharset","accept-charset"],["htmlFor","for"],["httpEquiv","http-equiv"],["crossOrigin","crossorigin"],["accentHeight","accent-height"],["alignmentBaseline","alignment-baseline"],["arabicForm","arabic-form"],["baselineShift","baseline-shift"],["capHeight","cap-height"],["clipPath","clip-path"],["clipRule","clip-rule"],["colorInterpolation","color-interpolation"],["colorInterpolationFilters","color-interpolation-filters"],["colorProfile","color-profile"],["colorRendering","color-rendering"],["dominantBaseline","dominant-baseline"],["enableBackground","enable-background"],["fillOpacity","fill-opacity"],["fillRule","fill-rule"],["floodColor","flood-color"],["floodOpacity","flood-opacity"],["fontFamily","font-family"],["fontSize","font-size"],["fontSizeAdjust","font-size-adjust"],["fontStretch","font-stretch"],["fontStyle","font-style"],["fontVariant","font-variant"],["fontWeight","font-weight"],["glyphName","glyph-name"],["glyphOrientationHorizontal","glyph-orientation-horizontal"],["glyphOrientationVertical","glyph-orientation-vertical"],["horizAdvX","horiz-adv-x"],["horizOriginX","horiz-origin-x"],["imageRendering","image-rendering"],["letterSpacing","letter-spacing"],["lightingColor","lighting-color"],["markerEnd","marker-end"],["markerMid","marker-mid"],["markerStart","marker-start"],["overlinePosition","overline-position"],["overlineThickness","overline-thickness"],["paintOrder","paint-order"],["panose-1","panose-1"],["pointerEvents","pointer-events"],["renderingIntent","rendering-intent"],["shapeRendering","shape-rendering"],["stopColor","stop-color"],["stopOpacity","stop-opacity"],["strikethroughPosition","strikethrough-position"],["strikethroughThickness","strikethrough-thickness"],["strokeDasharray","stroke-dasharray"],["strokeDashoffset","stroke-dashoffset"],["strokeLinecap","stroke-linecap"],["strokeLinejoin","stroke-linejoin"],["strokeMiterlimit","stroke-miterlimit"],["strokeOpacity","stroke-opacity"],["strokeWidth","stroke-width"],["textAnchor","text-anchor"],["textDecoration","text-decoration"],["textRendering","text-rendering"],["transformOrigin","transform-origin"],["underlinePosition","underline-position"],["underlineThickness","underline-thickness"],["unicodeBidi","unicode-bidi"],["unicodeRange","unicode-range"],["unitsPerEm","units-per-em"],["vAlphabetic","v-alphabetic"],["vHanging","v-hanging"],["vIdeographic","v-ideographic"],["vMathematical","v-mathematical"],["vectorEffect","vector-effect"],["vertAdvY","vert-adv-y"],["vertOriginX","vert-origin-x"],["vertOriginY","vert-origin-y"],["wordSpacing","word-spacing"],["writingMode","writing-mode"],["xmlnsXlink","xmlns:xlink"],["xHeight","x-height"]]),c6=/^[\u0000-\u001F ]*j[\r\n\t]*a[\r\n\t]*v[\r\n\t]*a[\r\n\t]*s[\r\n\t]*c[\r\n\t]*r[\r\n\t]*i[\r\n\t]*p[\r\n\t]*t[\r\n\t]*:/i;function _i(e){return c6.test(""+e)?"javascript:throw new Error('React has blocked a javascript: URL as a security precaution.')":e}var Ks=null;function Zs(e){return e=e.target||e.srcElement||window,e.correspondingUseElement&&(e=e.correspondingUseElement),e.nodeType===3?e.parentNode:e}var Wo=null,Ko=null;function CF(e){var o=q2(e);if(o&&(e=o.stateNode)){var n=e[h2]||null;e:switch(e=o.stateNode,o.type){case"input":if(Gs(e,n.value,n.defaultValue,n.defaultValue,n.checked,n.defaultChecked,n.type,n.name),o=n.name,n.type==="radio"&&o!=null){for(n=e;n.parentNode;)n=n.parentNode;for(n=n.querySelectorAll('input[name="'+de(""+o)+'"][type="radio"]'),o=0;o<n.length;o++){var s=n[o];if(s!==e&&s.form===e.form){var h=s[h2]||null;if(!h)throw Error(r(90));Gs(s,h.value,h.defaultValue,h.defaultValue,h.checked,h.defaultChecked,h.type,h.name)}}for(o=0;o<n.length;o++)s=n[o],s.form===e.form&&pF(s)}break e;case"textarea":gF(e,n.value,n.defaultValue);break e;case"select":o=n.value,o!=null&&Go(e,!!n.multiple,o,!1)}}}var Ys=!1;function vF(e,o,n){if(Ys)return e(o,n);Ys=!0;try{var s=e(o);return s}finally{if(Ys=!1,(Wo!==null||Ko!==null)&&(Fr(),Wo&&(o=Wo,e=Ko,Ko=Wo=null,CF(o),e)))for(o=0;o<e.length;o++)CF(e[o])}}function Ya(e,o){var n=e.stateNode;if(n===null)return null;var s=n[h2]||null;if(s===null)return null;n=s[o];e:switch(o){case"onClick":case"onClickCapture":case"onDoubleClick":case"onDoubleClickCapture":case"onMouseDown":case"onMouseDownCapture":case"onMouseMove":case"onMouseMoveCapture":case"onMouseUp":case"onMouseUpCapture":case"onMouseEnter":(s=!s.disabled)||(e=e.type,s=!(e==="button"||e==="input"||e==="select"||e==="textarea")),e=!s;break e;default:e=!1}if(e)return null;if(n&&typeof n!="function")throw Error(r(231,o,typeof n));return n}var rt=!(typeof window>"u"||typeof window.document>"u"||typeof window.document.createElement>"u"),Xs=!1;if(rt)try{var Xa={};Object.defineProperty(Xa,"passive",{get:function(){Xs=!0}}),window.addEventListener("test",Xa,Xa),window.removeEventListener("test",Xa,Xa)}catch{Xs=!1}var _t=null,Js=null,Ei=null;function BF(){if(Ei)return Ei;var e,o=Js,n=o.length,s,h="value"in _t?_t.value:_t.textContent,d=h.length;for(e=0;e<n&&o[e]===h[e];e++);var k=n-e;for(s=1;s<=k&&o[n-s]===h[d-s];s++);return Ei=h.slice(e,1<s?1-s:void 0)}function xi(e){var o=e.keyCode;return"charCode"in e?(e=e.charCode,e===0&&o===13&&(e=13)):e=o,e===10&&(e=13),32<=e||e===13?e:0}function Si(){return!0}function kF(){return!1}function W0(e){function o(n,s,h,d,k){this._reactName=n,this._targetInst=h,this.type=s,this.nativeEvent=d,this.target=k,this.currentTarget=null;for(var E in e)e.hasOwnProperty(E)&&(n=e[E],this[E]=n?n(d):d[E]);return this.isDefaultPrevented=(d.defaultPrevented!=null?d.defaultPrevented:d.returnValue===!1)?Si:kF,this.isPropagationStopped=kF,this}return b(o.prototype,{preventDefault:function(){this.defaultPrevented=!0;var n=this.nativeEvent;n&&(n.preventDefault?n.preventDefault():typeof n.returnValue!="unknown"&&(n.returnValue=!1),this.isDefaultPrevented=Si)},stopPropagation:function(){var n=this.nativeEvent;n&&(n.stopPropagation?n.stopPropagation():typeof n.cancelBubble!="unknown"&&(n.cancelBubble=!0),this.isPropagationStopped=Si)},persist:function(){},isPersistent:Si}),o}var uo={eventPhase:0,bubbles:0,cancelable:0,timeStamp:function(e){return e.timeStamp||Date.now()},defaultPrevented:0,isTrusted:0},Ri=W0(uo),Ja=b({},uo,{view:0,detail:0}),l6=W0(Ja),$s,Qs,$a,Ti=b({},Ja,{screenX:0,screenY:0,clientX:0,clientY:0,pageX:0,pageY:0,ctrlKey:0,shiftKey:0,altKey:0,metaKey:0,getModifierState:tc,button:0,buttons:0,relatedTarget:function(e){return e.relatedTarget===void 0?e.fromElement===e.srcElement?e.toElement:e.fromElement:e.relatedTarget},movementX:function(e){return"movementX"in e?e.movementX:(e!==$a&&($a&&e.type==="mousemove"?($s=e.screenX-$a.screenX,Qs=e.screenY-$a.screenY):Qs=$s=0,$a=e),$s)},movementY:function(e){return"movementY"in e?e.movementY:Qs}}),DF=W0(Ti),h6=b({},Ti,{dataTransfer:0}),u6=W0(h6),F6=b({},Ja,{relatedTarget:0}),ec=W0(F6),d6=b({},uo,{animationName:0,elapsedTime:0,pseudoElement:0}),A6=W0(d6),p6=b({},uo,{clipboardData:function(e){return"clipboardData"in e?e.clipboardData:window.clipboardData}}),m6=W0(p6),g6=b({},uo,{data:0}),wF=W0(g6),b6={Esc:"Escape",Spacebar:" ",Left:"ArrowLeft",Up:"ArrowUp",Right:"ArrowRight",Down:"ArrowDown",Del:"Delete",Win:"OS",Menu:"ContextMenu",Apps:"ContextMenu",Scroll:"ScrollLock",MozPrintableKey:"Unidentified"},f6={8:"Backspace",9:"Tab",12:"Clear",13:"Enter",16:"Shift",17:"Control",18:"Alt",19:"Pause",20:"CapsLock",27:"Escape",32:" ",33:"PageUp",34:"PageDown",35:"End",36:"Home",37:"ArrowLeft",38:"ArrowUp",39:"ArrowRight",40:"ArrowDown",45:"Insert",46:"Delete",112:"F1",113:"F2",114:"F3",115:"F4",116:"F5",117:"F6",118:"F7",119:"F8",120:"F9",121:"F10",122:"F11",123:"F12",144:"NumLock",145:"ScrollLock",224:"Meta"},y6={Alt:"altKey",Control:"ctrlKey",Meta:"metaKey",Shift:"shiftKey"};function C6(e){var o=this.nativeEvent;return o.getModifierState?o.getModifierState(e):(e=y6[e])?!!o[e]:!1}function tc(){return C6}var v6=b({},Ja,{key:function(e){if(e.key){var o=b6[e.key]||e.key;if(o!=="Unidentified")return o}return e.type==="keypress"?(e=xi(e),e===13?"Enter":String.fromCharCode(e)):e.type==="keydown"||e.type==="keyup"?f6[e.keyCode]||"Unidentified":""},code:0,location:0,ctrlKey:0,shiftKey:0,altKey:0,metaKey:0,repeat:0,locale:0,getModifierState:tc,charCode:function(e){return e.type==="keypress"?xi(e):0},keyCode:function(e){return e.type==="keydown"||e.type==="keyup"?e.keyCode:0},which:function(e){return e.type==="keypress"?xi(e):e.type==="keydown"||e.type==="keyup"?e.keyCode:0}}),B6=W0(v6),k6=b({},Ti,{pointerId:0,width:0,height:0,pressure:0,tangentialPressure:0,tiltX:0,tiltY:0,twist:0,pointerType:0,isPrimary:0}),_F=W0(k6),D6=b({},Ja,{touches:0,targetTouches:0,changedTouches:0,altKey:0,metaKey:0,ctrlKey:0,shiftKey:0,getModifierState:tc}),w6=W0(D6),_6=b({},uo,{propertyName:0,elapsedTime:0,pseudoElement:0}),E6=W0(_6),x6=b({},Ti,{deltaX:function(e){return"deltaX"in e?e.deltaX:"wheelDeltaX"in e?-e.wheelDeltaX:0},deltaY:function(e){return"deltaY"in e?e.deltaY:"wheelDeltaY"in e?-e.wheelDeltaY:"wheelDelta"in e?-e.wheelDelta:0},deltaZ:0,deltaMode:0}),S6=W0(x6),R6=b({},uo,{newState:0,oldState:0}),T6=W0(R6),P6=[9,13,27,32],oc=rt&&"CompositionEvent"in window,Qa=null;rt&&"documentMode"in document&&(Qa=document.documentMode);var L6=rt&&"TextEvent"in window&&!Qa,EF=rt&&(!oc||Qa&&8<Qa&&11>=Qa),xF=" ",SF=!1;function RF(e,o){switch(e){case"keyup":return P6.indexOf(o.keyCode)!==-1;case"keydown":return o.keyCode!==229;case"keypress":case"mousedown":case"focusout":return!0;default:return!1}}function TF(e){return e=e.detail,typeof e=="object"&&"data"in e?e.data:null}var Zo=!1;function M6(e,o){switch(e){case"compositionend":return TF(o);case"keypress":return o.which!==32?null:(SF=!0,xF);case"textInput":return e=o.data,e===xF&&SF?null:e;default:return null}}function N6(e,o){if(Zo)return e==="compositionend"||!oc&&RF(e,o)?(e=BF(),Ei=Js=_t=null,Zo=!1,e):null;switch(e){case"paste":return null;case"keypress":if(!(o.ctrlKey||o.altKey||o.metaKey)||o.ctrlKey&&o.altKey){if(o.char&&1<o.char.length)return o.char;if(o.which)return String.fromCharCode(o.which)}return null;case"compositionend":return EF&&o.locale!=="ko"?null:o.data;default:return null}}var I6={color:!0,date:!0,datetime:!0,"datetime-local":!0,email:!0,month:!0,number:!0,password:!0,range:!0,search:!0,tel:!0,text:!0,time:!0,url:!0,week:!0};function PF(e){var o=e&&e.nodeName&&e.nodeName.toLowerCase();return o==="input"?!!I6[e.type]:o==="textarea"}function LF(e,o,n,s){Wo?Ko?Ko.push(s):Ko=[s]:Wo=s,o=br(o,"onChange"),0<o.length&&(n=new Ri("onChange","change",null,n,s),e.push({event:n,listeners:o}))}var en=null,tn=null;function H6(e){Ap(e,0)}function Pi(e){var o=u0(e);if(pF(o))return e}function MF(e,o){if(e==="change")return o}var NF=!1;if(rt){var ac;if(rt){var nc="oninput"in document;if(!nc){var IF=document.createElement("div");IF.setAttribute("oninput","return;"),nc=typeof IF.oninput=="function"}ac=nc}else ac=!1;NF=ac&&(!document.documentMode||9<document.documentMode)}function HF(){en&&(en.detachEvent("onpropertychange",zF),tn=en=null)}function zF(e){if(e.propertyName==="value"&&Pi(tn)){var o=[];LF(o,tn,e,Zs(e)),vF(H6,o)}}function z6(e,o,n){e==="focusin"?(HF(),en=o,tn=n,en.attachEvent("onpropertychange",zF)):e==="focusout"&&HF()}function O6(e){if(e==="selectionchange"||e==="keyup"||e==="keydown")return Pi(tn)}function j6(e,o){if(e==="click")return Pi(o)}function V6(e,o){if(e==="input"||e==="change")return Pi(o)}function U6(e,o){return e===o&&(e!==0||1/e===1/o)||e!==e&&o!==o}var $0=typeof Object.is=="function"?Object.is:U6;function on(e,o){if($0(e,o))return!0;if(typeof e!="object"||e===null||typeof o!="object"||o===null)return!1;var n=Object.keys(e),s=Object.keys(o);if(n.length!==s.length)return!1;for(s=0;s<n.length;s++){var h=n[s];if(!L0.call(o,h)||!$0(e[h],o[h]))return!1}return!0}function OF(e){for(;e&&e.firstChild;)e=e.firstChild;return e}function jF(e,o){var n=OF(e);e=0;for(var s;n;){if(n.nodeType===3){if(s=e+n.textContent.length,e<=o&&s>=o)return{node:n,offset:o-e};e=s}e:{for(;n;){if(n.nextSibling){n=n.nextSibling;break e}n=n.parentNode}n=void 0}n=OF(n)}}function VF(e,o){return e&&o?e===o?!0:e&&e.nodeType===3?!1:o&&o.nodeType===3?VF(e,o.parentNode):"contains"in e?e.contains(o):e.compareDocumentPosition?!!(e.compareDocumentPosition(o)&16):!1:!1}function UF(e){e=e!=null&&e.ownerDocument!=null&&e.ownerDocument.defaultView!=null?e.ownerDocument.defaultView:window;for(var o=wi(e.document);o instanceof e.HTMLIFrameElement;){try{var n=typeof o.contentWindow.location.href=="string"}catch{n=!1}if(n)e=o.contentWindow;else break;o=wi(e.document)}return o}function ic(e){var o=e&&e.nodeName&&e.nodeName.toLowerCase();return o&&(o==="input"&&(e.type==="text"||e.type==="search"||e.type==="tel"||e.type==="url"||e.type==="password")||o==="textarea"||e.contentEditable==="true")}var G6=rt&&"documentMode"in document&&11>=document.documentMode,Yo=null,rc=null,an=null,sc=!1;function GF(e,o,n){var s=n.window===n?n.document:n.nodeType===9?n:n.ownerDocument;sc||Yo==null||Yo!==wi(s)||(s=Yo,"selectionStart"in s&&ic(s)?s={start:s.selectionStart,end:s.selectionEnd}:(s=(s.ownerDocument&&s.ownerDocument.defaultView||window).getSelection(),s={anchorNode:s.anchorNode,anchorOffset:s.anchorOffset,focusNode:s.focusNode,focusOffset:s.focusOffset}),an&&on(an,s)||(an=s,s=br(rc,"onSelect"),0<s.length&&(o=new Ri("onSelect","select",null,o,n),e.push({event:o,listeners:s}),o.target=Yo)))}function Fo(e,o){var n={};return n[e.toLowerCase()]=o.toLowerCase(),n["Webkit"+e]="webkit"+o,n["Moz"+e]="moz"+o,n}var Xo={animationend:Fo("Animation","AnimationEnd"),animationiteration:Fo("Animation","AnimationIteration"),animationstart:Fo("Animation","AnimationStart"),transitionrun:Fo("Transition","TransitionRun"),transitionstart:Fo("Transition","TransitionStart"),transitioncancel:Fo("Transition","TransitionCancel"),transitionend:Fo("Transition","TransitionEnd")},cc={},qF={};rt&&(qF=document.createElement("div").style,"AnimationEvent"in window||(delete Xo.animationend.animation,delete Xo.animationiteration.animation,delete Xo.animationstart.animation),"TransitionEvent"in window||delete Xo.transitionend.transition);function Ao(e){if(cc[e])return cc[e];if(!Xo[e])return e;var o=Xo[e],n;for(n in o)if(o.hasOwnProperty(n)&&n in qF)return cc[e]=o[n];return e}var WF=Ao("animationend"),KF=Ao("animationiteration"),ZF=Ao("animationstart"),q6=Ao("transitionrun"),W6=Ao("transitionstart"),K6=Ao("transitioncancel"),YF=Ao("transitionend"),XF=new Map,lc="abort auxClick beforeToggle cancel canPlay canPlayThrough click close contextMenu copy cut drag dragEnd dragEnter dragExit dragLeave dragOver dragStart drop durationChange emptied encrypted ended error gotPointerCapture input invalid keyDown keyPress keyUp load loadedData loadedMetadata loadStart lostPointerCapture mouseDown mouseMove mouseOut mouseOver mouseUp paste pause play playing pointerCancel pointerDown pointerMove pointerOut pointerOver pointerUp progress rateChange reset resize seeked seeking stalled submit suspend timeUpdate touchCancel touchEnd touchStart volumeChange scroll toggle touchMove waiting wheel".split(" ");lc.push("scrollEnd");function Re(e,o){XF.set(e,o),J0(o,[e])}var JF=new WeakMap;function Ae(e,o){if(typeof e=="object"&&e!==null){var n=JF.get(e);return n!==void 0?n:(o={value:e,source:o,stack:ki(o)},JF.set(e,o),o)}return{value:e,source:o,stack:ki(o)}}var pe=[],Jo=0,hc=0;function Li(){for(var e=Jo,o=hc=Jo=0;o<e;){var n=pe[o];pe[o++]=null;var s=pe[o];pe[o++]=null;var h=pe[o];pe[o++]=null;var d=pe[o];if(pe[o++]=null,s!==null&&h!==null){var k=s.pending;k===null?h.next=h:(h.next=k.next,k.next=h),s.pending=h}d!==0&&$F(n,h,d)}}function Mi(e,o,n,s){pe[Jo++]=e,pe[Jo++]=o,pe[Jo++]=n,pe[Jo++]=s,hc|=s,e.lanes|=s,e=e.alternate,e!==null&&(e.lanes|=s)}function uc(e,o,n,s){return Mi(e,o,n,s),Ni(e)}function $o(e,o){return Mi(e,null,null,o),Ni(e)}function $F(e,o,n){e.lanes|=n;var s=e.alternate;s!==null&&(s.lanes|=n);for(var h=!1,d=e.return;d!==null;)d.childLanes|=n,s=d.alternate,s!==null&&(s.childLanes|=n),d.tag===22&&(e=d.stateNode,e===null||e._visibility&1||(h=!0)),e=d,d=d.return;return e.tag===3?(d=e.stateNode,h&&o!==null&&(h=31-x0(n),e=d.hiddenUpdates,s=e[h],s===null?e[h]=[o]:s.push(o),o.lane=n|536870912),d):null}function Ni(e){if(50<xn)throw xn=0,gl=null,Error(r(185));for(var o=e.return;o!==null;)e=o,o=e.return;return e.tag===3?e.stateNode:null}var Qo={};function Z6(e,o,n,s){this.tag=e,this.key=n,this.sibling=this.child=this.return=this.stateNode=this.type=this.elementType=null,this.index=0,this.refCleanup=this.ref=null,this.pendingProps=o,this.dependencies=this.memoizedState=this.updateQueue=this.memoizedProps=null,this.mode=s,this.subtreeFlags=this.flags=0,this.deletions=null,this.childLanes=this.lanes=0,this.alternate=null}function Q0(e,o,n,s){return new Z6(e,o,n,s)}function Fc(e){return e=e.prototype,!(!e||!e.isReactComponent)}function st(e,o){var n=e.alternate;return n===null?(n=Q0(e.tag,o,e.key,e.mode),n.elementType=e.elementType,n.type=e.type,n.stateNode=e.stateNode,n.alternate=e,e.alternate=n):(n.pendingProps=o,n.type=e.type,n.flags=0,n.subtreeFlags=0,n.deletions=null),n.flags=e.flags&65011712,n.childLanes=e.childLanes,n.lanes=e.lanes,n.child=e.child,n.memoizedProps=e.memoizedProps,n.memoizedState=e.memoizedState,n.updateQueue=e.updateQueue,o=e.dependencies,n.dependencies=o===null?null:{lanes:o.lanes,firstContext:o.firstContext},n.sibling=e.sibling,n.index=e.index,n.ref=e.ref,n.refCleanup=e.refCleanup,n}function QF(e,o){e.flags&=65011714;var n=e.alternate;return n===null?(e.childLanes=0,e.lanes=o,e.child=null,e.subtreeFlags=0,e.memoizedProps=null,e.memoizedState=null,e.updateQueue=null,e.dependencies=null,e.stateNode=null):(e.childLanes=n.childLanes,e.lanes=n.lanes,e.child=n.child,e.subtreeFlags=0,e.deletions=null,e.memoizedProps=n.memoizedProps,e.memoizedState=n.memoizedState,e.updateQueue=n.updateQueue,e.type=n.type,o=n.dependencies,e.dependencies=o===null?null:{lanes:o.lanes,firstContext:o.firstContext}),e}function Ii(e,o,n,s,h,d){var k=0;if(s=e,typeof e=="function")Fc(e)&&(k=1);else if(typeof e=="string")k=Xy(e,n,d2.current)?26:e==="html"||e==="head"||e==="body"?27:5;else e:switch(e){case U:return e=Q0(31,n,o,h),e.elementType=U,e.lanes=d,e;case B:return po(n.children,h,d,o);case v:k=8,h|=24;break;case D:return e=Q0(12,n,o,h|2),e.elementType=D,e.lanes=d,e;case P:return e=Q0(13,n,o,h),e.elementType=P,e.lanes=d,e;case S:return e=Q0(19,n,o,h),e.elementType=S,e.lanes=d,e;default:if(typeof e=="object"&&e!==null)switch(e.$$typeof){case w:case _:k=10;break e;case x:k=9;break e;case R:k=11;break e;case N:k=14;break e;case O:k=16,s=null;break e}k=29,n=Error(r(130,e===null?"null":typeof e,"")),s=null}return o=Q0(k,n,o,h),o.elementType=e,o.type=s,o.lanes=d,o}function po(e,o,n,s){return e=Q0(7,e,s,o),e.lanes=n,e}function dc(e,o,n){return e=Q0(6,e,null,o),e.lanes=n,e}function Ac(e,o,n){return o=Q0(4,e.children!==null?e.children:[],e.key,o),o.lanes=n,o.stateNode={containerInfo:e.containerInfo,pendingChildren:null,implementation:e.implementation},o}var ea=[],ta=0,Hi=null,zi=0,me=[],ge=0,mo=null,ct=1,lt="";function go(e,o){ea[ta++]=zi,ea[ta++]=Hi,Hi=e,zi=o}function ed(e,o,n){me[ge++]=ct,me[ge++]=lt,me[ge++]=mo,mo=e;var s=ct;e=lt;var h=32-x0(s)-1;s&=~(1<<h),n+=1;var d=32-x0(o)+h;if(30<d){var k=h-h%5;d=(s&(1<<k)-1).toString(32),s>>=k,h-=k,ct=1<<32-x0(o)+h|n<<h|s,lt=d+e}else ct=1<<d|n<<h|s,lt=e}function pc(e){e.return!==null&&(go(e,1),ed(e,1,0))}function mc(e){for(;e===Hi;)Hi=ea[--ta],ea[ta]=null,zi=ea[--ta],ea[ta]=null;for(;e===mo;)mo=me[--ge],me[ge]=null,lt=me[--ge],me[ge]=null,ct=me[--ge],me[ge]=null}var j0=null,d0=null,W2=!1,bo=null,Ve=!1,gc=Error(r(519));function fo(e){var o=Error(r(418,""));throw sn(Ae(o,e)),gc}function td(e){var o=e.stateNode,n=e.type,s=e.memoizedProps;switch(o[r2]=e,o[h2]=s,n){case"dialog":j2("cancel",o),j2("close",o);break;case"iframe":case"object":case"embed":j2("load",o);break;case"video":case"audio":for(n=0;n<Rn.length;n++)j2(Rn[n],o);break;case"source":j2("error",o);break;case"img":case"image":case"link":j2("error",o),j2("load",o);break;case"details":j2("toggle",o);break;case"input":j2("invalid",o),mF(o,s.value,s.defaultValue,s.checked,s.defaultChecked,s.type,s.name,!0),Di(o);break;case"select":j2("invalid",o);break;case"textarea":j2("invalid",o),bF(o,s.value,s.defaultValue,s.children),Di(o)}n=s.children,typeof n!="string"&&typeof n!="number"&&typeof n!="bigint"||o.textContent===""+n||s.suppressHydrationWarning===!0||bp(o.textContent,n)?(s.popover!=null&&(j2("beforetoggle",o),j2("toggle",o)),s.onScroll!=null&&j2("scroll",o),s.onScrollEnd!=null&&j2("scrollend",o),s.onClick!=null&&(o.onclick=fr),o=!0):o=!1,o||fo(e)}function od(e){for(j0=e.return;j0;)switch(j0.tag){case 5:case 13:Ve=!1;return;case 27:case 3:Ve=!0;return;default:j0=j0.return}}function nn(e){if(e!==j0)return!1;if(!W2)return od(e),W2=!0,!1;var o=e.tag,n;if((n=o!==3&&o!==27)&&((n=o===5)&&(n=e.type,n=!(n!=="form"&&n!=="button")||Pl(e.type,e.memoizedProps)),n=!n),n&&d0&&fo(e),od(e),o===13){if(e=e.memoizedState,e=e!==null?e.dehydrated:null,!e)throw Error(r(317));e:{for(e=e.nextSibling,o=0;e;){if(e.nodeType===8)if(n=e.data,n==="/$"){if(o===0){d0=Pe(e.nextSibling);break e}o--}else n!=="$"&&n!=="$!"&&n!=="$?"||o++;e=e.nextSibling}d0=null}}else o===27?(o=d0,Ut(e.type)?(e=Il,Il=null,d0=e):d0=o):d0=j0?Pe(e.stateNode.nextSibling):null;return!0}function rn(){d0=j0=null,W2=!1}function ad(){var e=bo;return e!==null&&(Y0===null?Y0=e:Y0.push.apply(Y0,e),bo=null),e}function sn(e){bo===null?bo=[e]:bo.push(e)}var bc=$(null),yo=null,ht=null;function Et(e,o,n){a2(bc,o._currentValue),o._currentValue=n}function ut(e){e._currentValue=bc.current,Q(bc)}function fc(e,o,n){for(;e!==null;){var s=e.alternate;if((e.childLanes&o)!==o?(e.childLanes|=o,s!==null&&(s.childLanes|=o)):s!==null&&(s.childLanes&o)!==o&&(s.childLanes|=o),e===n)break;e=e.return}}function yc(e,o,n,s){var h=e.child;for(h!==null&&(h.return=e);h!==null;){var d=h.dependencies;if(d!==null){var k=h.child;d=d.firstContext;e:for(;d!==null;){var E=d;d=h;for(var L=0;L<o.length;L++)if(E.context===o[L]){d.lanes|=n,E=d.alternate,E!==null&&(E.lanes|=n),fc(d.return,n,e),s||(k=null);break e}d=E.next}}else if(h.tag===18){if(k=h.return,k===null)throw Error(r(341));k.lanes|=n,d=k.alternate,d!==null&&(d.lanes|=n),fc(k,n,e),k=null}else k=h.child;if(k!==null)k.return=h;else for(k=h;k!==null;){if(k===e){k=null;break}if(h=k.sibling,h!==null){h.return=k.return,k=h;break}k=k.return}h=k}}function cn(e,o,n,s){e=null;for(var h=o,d=!1;h!==null;){if(!d){if((h.flags&524288)!==0)d=!0;else if((h.flags&262144)!==0)break}if(h.tag===10){var k=h.alternate;if(k===null)throw Error(r(387));if(k=k.memoizedProps,k!==null){var E=h.type;$0(h.pendingProps.value,k.value)||(e!==null?e.push(E):e=[E])}}else if(h===K2.current){if(k=h.alternate,k===null)throw Error(r(387));k.memoizedState.memoizedState!==h.memoizedState.memoizedState&&(e!==null?e.push(In):e=[In])}h=h.return}e!==null&&yc(o,e,n,s),o.flags|=262144}function Oi(e){for(e=e.firstContext;e!==null;){if(!$0(e.context._currentValue,e.memoizedValue))return!0;e=e.next}return!1}function Co(e){yo=e,ht=null,e=e.dependencies,e!==null&&(e.firstContext=null)}function M0(e){return nd(yo,e)}function ji(e,o){return yo===null&&Co(e),nd(e,o)}function nd(e,o){var n=o._currentValue;if(o={context:o,memoizedValue:n,next:null},ht===null){if(e===null)throw Error(r(308));ht=o,e.dependencies={lanes:0,firstContext:o},e.flags|=524288}else ht=ht.next=o;return n}var Y6=typeof AbortController<"u"?AbortController:function(){var e=[],o=this.signal={aborted:!1,addEventListener:function(n,s){e.push(s)}};this.abort=function(){o.aborted=!0,e.forEach(function(n){return n()})}},X6=t.unstable_scheduleCallback,J6=t.unstable_NormalPriority,B0={$$typeof:_,Consumer:null,Provider:null,_currentValue:null,_currentValue2:null,_threadCount:0};function Cc(){return{controller:new Y6,data:new Map,refCount:0}}function ln(e){e.refCount--,e.refCount===0&&X6(J6,function(){e.controller.abort()})}var hn=null,vc=0,oa=0,aa=null;function $6(e,o){if(hn===null){var n=hn=[];vc=0,oa=kl(),aa={status:"pending",value:void 0,then:function(s){n.push(s)}}}return vc++,o.then(id,id),o}function id(){if(--vc===0&&hn!==null){aa!==null&&(aa.status="fulfilled");var e=hn;hn=null,oa=0,aa=null;for(var o=0;o<e.length;o++)(0,e[o])()}}function Q6(e,o){var n=[],s={status:"pending",value:null,reason:null,then:function(h){n.push(h)}};return e.then(function(){s.status="fulfilled",s.value=o;for(var h=0;h<n.length;h++)(0,n[h])(o)},function(h){for(s.status="rejected",s.reason=h,h=0;h<n.length;h++)(0,n[h])(void 0)}),s}var rd=I.S;I.S=function(e,o){typeof o=="object"&&o!==null&&typeof o.then=="function"&&$6(e,o),rd!==null&&rd(e,o)};var vo=$(null);function Bc(){var e=vo.current;return e!==null?e:t0.pooledCache}function Vi(e,o){o===null?a2(vo,vo.current):a2(vo,o.pool)}function sd(){var e=Bc();return e===null?null:{parent:B0._currentValue,pool:e}}var un=Error(r(460)),cd=Error(r(474)),Ui=Error(r(542)),kc={then:function(){}};function ld(e){return e=e.status,e==="fulfilled"||e==="rejected"}function Gi(){}function hd(e,o,n){switch(n=e[n],n===void 0?e.push(o):n!==o&&(o.then(Gi,Gi),o=n),o.status){case"fulfilled":return o.value;case"rejected":throw e=o.reason,Fd(e),e;default:if(typeof o.status=="string")o.then(Gi,Gi);else{if(e=t0,e!==null&&100<e.shellSuspendCounter)throw Error(r(482));e=o,e.status="pending",e.then(function(s){if(o.status==="pending"){var h=o;h.status="fulfilled",h.value=s}},function(s){if(o.status==="pending"){var h=o;h.status="rejected",h.reason=s}})}switch(o.status){case"fulfilled":return o.value;case"rejected":throw e=o.reason,Fd(e),e}throw Fn=o,un}}var Fn=null;function ud(){if(Fn===null)throw Error(r(459));var e=Fn;return Fn=null,e}function Fd(e){if(e===un||e===Ui)throw Error(r(483))}var xt=!1;function Dc(e){e.updateQueue={baseState:e.memoizedState,firstBaseUpdate:null,lastBaseUpdate:null,shared:{pending:null,lanes:0,hiddenCallbacks:null},callbacks:null}}function wc(e,o){e=e.updateQueue,o.updateQueue===e&&(o.updateQueue={baseState:e.baseState,firstBaseUpdate:e.firstBaseUpdate,lastBaseUpdate:e.lastBaseUpdate,shared:e.shared,callbacks:null})}function St(e){return{lane:e,tag:0,payload:null,callback:null,next:null}}function Rt(e,o,n){var s=e.updateQueue;if(s===null)return null;if(s=s.shared,(Z2&2)!==0){var h=s.pending;return h===null?o.next=o:(o.next=h.next,h.next=o),s.pending=o,o=Ni(e),$F(e,null,n),o}return Mi(e,s,o,n),Ni(e)}function dn(e,o,n){if(o=o.updateQueue,o!==null&&(o=o.shared,(n&4194048)!==0)){var s=o.lanes;s&=e.pendingLanes,n|=s,o.lanes=n,lo(e,n)}}function _c(e,o){var n=e.updateQueue,s=e.alternate;if(s!==null&&(s=s.updateQueue,n===s)){var h=null,d=null;if(n=n.firstBaseUpdate,n!==null){do{var k={lane:n.lane,tag:n.tag,payload:n.payload,callback:null,next:null};d===null?h=d=k:d=d.next=k,n=n.next}while(n!==null);d===null?h=d=o:d=d.next=o}else h=d=o;n={baseState:s.baseState,firstBaseUpdate:h,lastBaseUpdate:d,shared:s.shared,callbacks:s.callbacks},e.updateQueue=n;return}e=n.lastBaseUpdate,e===null?n.firstBaseUpdate=o:e.next=o,n.lastBaseUpdate=o}var Ec=!1;function An(){if(Ec){var e=aa;if(e!==null)throw e}}function pn(e,o,n,s){Ec=!1;var h=e.updateQueue;xt=!1;var d=h.firstBaseUpdate,k=h.lastBaseUpdate,E=h.shared.pending;if(E!==null){h.shared.pending=null;var L=E,G=L.next;L.next=null,k===null?d=G:k.next=G,k=L;var e2=e.alternate;e2!==null&&(e2=e2.updateQueue,E=e2.lastBaseUpdate,E!==k&&(E===null?e2.firstBaseUpdate=G:E.next=G,e2.lastBaseUpdate=L))}if(d!==null){var i2=h.baseState;k=0,e2=G=L=null,E=d;do{var K=E.lane&-536870913,Z=K!==E.lane;if(Z?(U2&K)===K:(s&K)===K){K!==0&&K===oa&&(Ec=!0),e2!==null&&(e2=e2.next={lane:0,tag:E.tag,payload:E.payload,callback:null,next:null});e:{var S2=e,w2=E;K=o;var Q2=n;switch(w2.tag){case 1:if(S2=w2.payload,typeof S2=="function"){i2=S2.call(Q2,i2,K);break e}i2=S2;break e;case 3:S2.flags=S2.flags&-65537|128;case 0:if(S2=w2.payload,K=typeof S2=="function"?S2.call(Q2,i2,K):S2,K==null)break e;i2=b({},i2,K);break e;case 2:xt=!0}}K=E.callback,K!==null&&(e.flags|=64,Z&&(e.flags|=8192),Z=h.callbacks,Z===null?h.callbacks=[K]:Z.push(K))}else Z={lane:K,tag:E.tag,payload:E.payload,callback:E.callback,next:null},e2===null?(G=e2=Z,L=i2):e2=e2.next=Z,k|=K;if(E=E.next,E===null){if(E=h.shared.pending,E===null)break;Z=E,E=Z.next,Z.next=null,h.lastBaseUpdate=Z,h.shared.pending=null}}while(!0);e2===null&&(L=i2),h.baseState=L,h.firstBaseUpdate=G,h.lastBaseUpdate=e2,d===null&&(h.shared.lanes=0),zt|=k,e.lanes=k,e.memoizedState=i2}}function dd(e,o){if(typeof e!="function")throw Error(r(191,e));e.call(o)}function Ad(e,o){var n=e.callbacks;if(n!==null)for(e.callbacks=null,e=0;e<n.length;e++)dd(n[e],o)}var na=$(null),qi=$(0);function pd(e,o){e=bt,a2(qi,e),a2(na,o),bt=e|o.baseLanes}function xc(){a2(qi,bt),a2(na,na.current)}function Sc(){bt=qi.current,Q(na),Q(qi)}var Tt=0,M2=null,J2=null,C0=null,Wi=!1,ia=!1,Bo=!1,Ki=0,mn=0,ra=null,ey=0;function g0(){throw Error(r(321))}function Rc(e,o){if(o===null)return!1;for(var n=0;n<o.length&&n<e.length;n++)if(!$0(e[n],o[n]))return!1;return!0}function Tc(e,o,n,s,h,d){return Tt=d,M2=o,o.memoizedState=null,o.updateQueue=null,o.lanes=0,I.H=e===null||e.memoizedState===null?$d:Qd,Bo=!1,d=n(s,h),Bo=!1,ia&&(d=gd(o,n,s,h)),md(e),d}function md(e){I.H=Qi;var o=J2!==null&&J2.next!==null;if(Tt=0,C0=J2=M2=null,Wi=!1,mn=0,ra=null,o)throw Error(r(300));e===null||D0||(e=e.dependencies,e!==null&&Oi(e)&&(D0=!0))}function gd(e,o,n,s){M2=e;var h=0;do{if(ia&&(ra=null),mn=0,ia=!1,25<=h)throw Error(r(301));if(h+=1,C0=J2=null,e.updateQueue!=null){var d=e.updateQueue;d.lastEffect=null,d.events=null,d.stores=null,d.memoCache!=null&&(d.memoCache.index=0)}I.H=sy,d=o(n,s)}while(ia);return d}function ty(){var e=I.H,o=e.useState()[0];return o=typeof o.then=="function"?gn(o):o,e=e.useState()[0],(J2!==null?J2.memoizedState:null)!==e&&(M2.flags|=1024),o}function Pc(){var e=Ki!==0;return Ki=0,e}function Lc(e,o,n){o.updateQueue=e.updateQueue,o.flags&=-2053,e.lanes&=~n}function Mc(e){if(Wi){for(e=e.memoizedState;e!==null;){var o=e.queue;o!==null&&(o.pending=null),e=e.next}Wi=!1}Tt=0,C0=J2=M2=null,ia=!1,mn=Ki=0,ra=null}function K0(){var e={memoizedState:null,baseState:null,baseQueue:null,queue:null,next:null};return C0===null?M2.memoizedState=C0=e:C0=C0.next=e,C0}function v0(){if(J2===null){var e=M2.alternate;e=e!==null?e.memoizedState:null}else e=J2.next;var o=C0===null?M2.memoizedState:C0.next;if(o!==null)C0=o,J2=e;else{if(e===null)throw M2.alternate===null?Error(r(467)):Error(r(310));J2=e,e={memoizedState:J2.memoizedState,baseState:J2.baseState,baseQueue:J2.baseQueue,queue:J2.queue,next:null},C0===null?M2.memoizedState=C0=e:C0=C0.next=e}return C0}function Nc(){return{lastEffect:null,events:null,stores:null,memoCache:null}}function gn(e){var o=mn;return mn+=1,ra===null&&(ra=[]),e=hd(ra,e,o),o=M2,(C0===null?o.memoizedState:C0.next)===null&&(o=o.alternate,I.H=o===null||o.memoizedState===null?$d:Qd),e}function Zi(e){if(e!==null&&typeof e=="object"){if(typeof e.then=="function")return gn(e);if(e.$$typeof===_)return M0(e)}throw Error(r(438,String(e)))}function Ic(e){var o=null,n=M2.updateQueue;if(n!==null&&(o=n.memoCache),o==null){var s=M2.alternate;s!==null&&(s=s.updateQueue,s!==null&&(s=s.memoCache,s!=null&&(o={data:s.data.map(function(h){return h.slice()}),index:0})))}if(o==null&&(o={data:[],index:0}),n===null&&(n=Nc(),M2.updateQueue=n),n.memoCache=o,n=o.data[o.index],n===void 0)for(n=o.data[o.index]=Array(e),s=0;s<e;s++)n[s]=n2;return o.index++,n}function Ft(e,o){return typeof o=="function"?o(e):o}function Yi(e){var o=v0();return Hc(o,J2,e)}function Hc(e,o,n){var s=e.queue;if(s===null)throw Error(r(311));s.lastRenderedReducer=n;var h=e.baseQueue,d=s.pending;if(d!==null){if(h!==null){var k=h.next;h.next=d.next,d.next=k}o.baseQueue=h=d,s.pending=null}if(d=e.baseState,h===null)e.memoizedState=d;else{o=h.next;var E=k=null,L=null,G=o,e2=!1;do{var i2=G.lane&-536870913;if(i2!==G.lane?(U2&i2)===i2:(Tt&i2)===i2){var K=G.revertLane;if(K===0)L!==null&&(L=L.next={lane:0,revertLane:0,action:G.action,hasEagerState:G.hasEagerState,eagerState:G.eagerState,next:null}),i2===oa&&(e2=!0);else if((Tt&K)===K){G=G.next,K===oa&&(e2=!0);continue}else i2={lane:0,revertLane:G.revertLane,action:G.action,hasEagerState:G.hasEagerState,eagerState:G.eagerState,next:null},L===null?(E=L=i2,k=d):L=L.next=i2,M2.lanes|=K,zt|=K;i2=G.action,Bo&&n(d,i2),d=G.hasEagerState?G.eagerState:n(d,i2)}else K={lane:i2,revertLane:G.revertLane,action:G.action,hasEagerState:G.hasEagerState,eagerState:G.eagerState,next:null},L===null?(E=L=K,k=d):L=L.next=K,M2.lanes|=i2,zt|=i2;G=G.next}while(G!==null&&G!==o);if(L===null?k=d:L.next=E,!$0(d,e.memoizedState)&&(D0=!0,e2&&(n=aa,n!==null)))throw n;e.memoizedState=d,e.baseState=k,e.baseQueue=L,s.lastRenderedState=d}return h===null&&(s.lanes=0),[e.memoizedState,s.dispatch]}function zc(e){var o=v0(),n=o.queue;if(n===null)throw Error(r(311));n.lastRenderedReducer=e;var s=n.dispatch,h=n.pending,d=o.memoizedState;if(h!==null){n.pending=null;var k=h=h.next;do d=e(d,k.action),k=k.next;while(k!==h);$0(d,o.memoizedState)||(D0=!0),o.memoizedState=d,o.baseQueue===null&&(o.baseState=d),n.lastRenderedState=d}return[d,s]}function bd(e,o,n){var s=M2,h=v0(),d=W2;if(d){if(n===void 0)throw Error(r(407));n=n()}else n=o();var k=!$0((J2||h).memoizedState,n);k&&(h.memoizedState=n,D0=!0),h=h.queue;var E=Cd.bind(null,s,h,e);if(bn(2048,8,E,[e]),h.getSnapshot!==o||k||C0!==null&&C0.memoizedState.tag&1){if(s.flags|=2048,sa(9,Xi(),yd.bind(null,s,h,n,o),null),t0===null)throw Error(r(349));d||(Tt&124)!==0||fd(s,o,n)}return n}function fd(e,o,n){e.flags|=16384,e={getSnapshot:o,value:n},o=M2.updateQueue,o===null?(o=Nc(),M2.updateQueue=o,o.stores=[e]):(n=o.stores,n===null?o.stores=[e]:n.push(e))}function yd(e,o,n,s){o.value=n,o.getSnapshot=s,vd(o)&&Bd(e)}function Cd(e,o,n){return n(function(){vd(o)&&Bd(e)})}function vd(e){var o=e.getSnapshot;e=e.value;try{var n=o();return!$0(e,n)}catch{return!0}}function Bd(e){var o=$o(e,2);o!==null&&ne(o,e,2)}function Oc(e){var o=K0();if(typeof e=="function"){var n=e;if(e=n(),Bo){Se(!0);try{n()}finally{Se(!1)}}}return o.memoizedState=o.baseState=e,o.queue={pending:null,lanes:0,dispatch:null,lastRenderedReducer:Ft,lastRenderedState:e},o}function kd(e,o,n,s){return e.baseState=n,Hc(e,J2,typeof s=="function"?s:Ft)}function oy(e,o,n,s,h){if($i(e))throw Error(r(485));if(e=o.action,e!==null){var d={payload:h,action:e,next:null,isTransition:!0,status:"pending",value:null,reason:null,listeners:[],then:function(k){d.listeners.push(k)}};I.T!==null?n(!0):d.isTransition=!1,s(d),n=o.pending,n===null?(d.next=o.pending=d,Dd(o,d)):(d.next=n.next,o.pending=n.next=d)}}function Dd(e,o){var n=o.action,s=o.payload,h=e.state;if(o.isTransition){var d=I.T,k={};I.T=k;try{var E=n(h,s),L=I.S;L!==null&&L(k,E),wd(e,o,E)}catch(G){jc(e,o,G)}finally{I.T=d}}else try{d=n(h,s),wd(e,o,d)}catch(G){jc(e,o,G)}}function wd(e,o,n){n!==null&&typeof n=="object"&&typeof n.then=="function"?n.then(function(s){_d(e,o,s)},function(s){return jc(e,o,s)}):_d(e,o,n)}function _d(e,o,n){o.status="fulfilled",o.value=n,Ed(o),e.state=n,o=e.pending,o!==null&&(n=o.next,n===o?e.pending=null:(n=n.next,o.next=n,Dd(e,n)))}function jc(e,o,n){var s=e.pending;if(e.pending=null,s!==null){s=s.next;do o.status="rejected",o.reason=n,Ed(o),o=o.next;while(o!==s)}e.action=null}function Ed(e){e=e.listeners;for(var o=0;o<e.length;o++)(0,e[o])()}function xd(e,o){return o}function Sd(e,o){if(W2){var n=t0.formState;if(n!==null){e:{var s=M2;if(W2){if(d0){t:{for(var h=d0,d=Ve;h.nodeType!==8;){if(!d){h=null;break t}if(h=Pe(h.nextSibling),h===null){h=null;break t}}d=h.data,h=d==="F!"||d==="F"?h:null}if(h){d0=Pe(h.nextSibling),s=h.data==="F!";break e}}fo(s)}s=!1}s&&(o=n[0])}}return n=K0(),n.memoizedState=n.baseState=o,s={pending:null,lanes:0,dispatch:null,lastRenderedReducer:xd,lastRenderedState:o},n.queue=s,n=Yd.bind(null,M2,s),s.dispatch=n,s=Oc(!1),d=Wc.bind(null,M2,!1,s.queue),s=K0(),h={state:o,dispatch:null,action:e,pending:null},s.queue=h,n=oy.bind(null,M2,h,d,n),h.dispatch=n,s.memoizedState=e,[o,n,!1]}function Rd(e){var o=v0();return Td(o,J2,e)}function Td(e,o,n){if(o=Hc(e,o,xd)[0],e=Yi(Ft)[0],typeof o=="object"&&o!==null&&typeof o.then=="function")try{var s=gn(o)}catch(k){throw k===un?Ui:k}else s=o;o=v0();var h=o.queue,d=h.dispatch;return n!==o.memoizedState&&(M2.flags|=2048,sa(9,Xi(),ay.bind(null,h,n),null)),[s,d,e]}function ay(e,o){e.action=o}function Pd(e){var o=v0(),n=J2;if(n!==null)return Td(o,n,e);v0(),o=o.memoizedState,n=v0();var s=n.queue.dispatch;return n.memoizedState=e,[o,s,!1]}function sa(e,o,n,s){return e={tag:e,create:n,deps:s,inst:o,next:null},o=M2.updateQueue,o===null&&(o=Nc(),M2.updateQueue=o),n=o.lastEffect,n===null?o.lastEffect=e.next=e:(s=n.next,n.next=e,e.next=s,o.lastEffect=e),e}function Xi(){return{destroy:void 0,resource:void 0}}function Ld(){return v0().memoizedState}function Ji(e,o,n,s){var h=K0();s=s===void 0?null:s,M2.flags|=e,h.memoizedState=sa(1|o,Xi(),n,s)}function bn(e,o,n,s){var h=v0();s=s===void 0?null:s;var d=h.memoizedState.inst;J2!==null&&s!==null&&Rc(s,J2.memoizedState.deps)?h.memoizedState=sa(o,d,n,s):(M2.flags|=e,h.memoizedState=sa(1|o,d,n,s))}function Md(e,o){Ji(8390656,8,e,o)}function Nd(e,o){bn(2048,8,e,o)}function Id(e,o){return bn(4,2,e,o)}function Hd(e,o){return bn(4,4,e,o)}function zd(e,o){if(typeof o=="function"){e=e();var n=o(e);return function(){typeof n=="function"?n():o(null)}}if(o!=null)return e=e(),o.current=e,function(){o.current=null}}function Od(e,o,n){n=n!=null?n.concat([e]):null,bn(4,4,zd.bind(null,o,e),n)}function Vc(){}function jd(e,o){var n=v0();o=o===void 0?null:o;var s=n.memoizedState;return o!==null&&Rc(o,s[1])?s[0]:(n.memoizedState=[e,o],e)}function Vd(e,o){var n=v0();o=o===void 0?null:o;var s=n.memoizedState;if(o!==null&&Rc(o,s[1]))return s[0];if(s=e(),Bo){Se(!0);try{e()}finally{Se(!1)}}return n.memoizedState=[s,o],s}function Uc(e,o,n){return n===void 0||(Tt&1073741824)!==0?e.memoizedState=o:(e.memoizedState=n,e=qA(),M2.lanes|=e,zt|=e,n)}function Ud(e,o,n,s){return $0(n,o)?n:na.current!==null?(e=Uc(e,n,s),$0(e,o)||(D0=!0),e):(Tt&42)===0?(D0=!0,e.memoizedState=n):(e=qA(),M2.lanes|=e,zt|=e,o)}function Gd(e,o,n,s,h){var d=q.p;q.p=d!==0&&8>d?d:8;var k=I.T,E={};I.T=E,Wc(e,!1,o,n);try{var L=h(),G=I.S;if(G!==null&&G(E,L),L!==null&&typeof L=="object"&&typeof L.then=="function"){var e2=Q6(L,s);fn(e,o,e2,ae(e))}else fn(e,o,s,ae(e))}catch(i2){fn(e,o,{then:function(){},status:"rejected",reason:i2},ae())}finally{q.p=d,I.T=k}}function ny(){}function Gc(e,o,n,s){if(e.tag!==5)throw Error(r(476));var h=qd(e).queue;Gd(e,h,o,J,n===null?ny:function(){return Wd(e),n(s)})}function qd(e){var o=e.memoizedState;if(o!==null)return o;o={memoizedState:J,baseState:J,baseQueue:null,queue:{pending:null,lanes:0,dispatch:null,lastRenderedReducer:Ft,lastRenderedState:J},next:null};var n={};return o.next={memoizedState:n,baseState:n,baseQueue:null,queue:{pending:null,lanes:0,dispatch:null,lastRenderedReducer:Ft,lastRenderedState:n},next:null},e.memoizedState=o,e=e.alternate,e!==null&&(e.memoizedState=o),o}function Wd(e){var o=qd(e).next.queue;fn(e,o,{},ae())}function qc(){return M0(In)}function Kd(){return v0().memoizedState}function Zd(){return v0().memoizedState}function iy(e){for(var o=e.return;o!==null;){switch(o.tag){case 24:case 3:var n=ae();e=St(n);var s=Rt(o,e,n);s!==null&&(ne(s,o,n),dn(s,o,n)),o={cache:Cc()},e.payload=o;return}o=o.return}}function ry(e,o,n){var s=ae();n={lane:s,revertLane:0,action:n,hasEagerState:!1,eagerState:null,next:null},$i(e)?Xd(o,n):(n=uc(e,o,n,s),n!==null&&(ne(n,e,s),Jd(n,o,s)))}function Yd(e,o,n){var s=ae();fn(e,o,n,s)}function fn(e,o,n,s){var h={lane:s,revertLane:0,action:n,hasEagerState:!1,eagerState:null,next:null};if($i(e))Xd(o,h);else{var d=e.alternate;if(e.lanes===0&&(d===null||d.lanes===0)&&(d=o.lastRenderedReducer,d!==null))try{var k=o.lastRenderedState,E=d(k,n);if(h.hasEagerState=!0,h.eagerState=E,$0(E,k))return Mi(e,o,h,0),t0===null&&Li(),!1}catch{}finally{}if(n=uc(e,o,h,s),n!==null)return ne(n,e,s),Jd(n,o,s),!0}return!1}function Wc(e,o,n,s){if(s={lane:2,revertLane:kl(),action:s,hasEagerState:!1,eagerState:null,next:null},$i(e)){if(o)throw Error(r(479))}else o=uc(e,n,s,2),o!==null&&ne(o,e,2)}function $i(e){var o=e.alternate;return e===M2||o!==null&&o===M2}function Xd(e,o){ia=Wi=!0;var n=e.pending;n===null?o.next=o:(o.next=n.next,n.next=o),e.pending=o}function Jd(e,o,n){if((n&4194048)!==0){var s=o.lanes;s&=e.pendingLanes,n|=s,o.lanes=n,lo(e,n)}}var Qi={readContext:M0,use:Zi,useCallback:g0,useContext:g0,useEffect:g0,useImperativeHandle:g0,useLayoutEffect:g0,useInsertionEffect:g0,useMemo:g0,useReducer:g0,useRef:g0,useState:g0,useDebugValue:g0,useDeferredValue:g0,useTransition:g0,useSyncExternalStore:g0,useId:g0,useHostTransitionStatus:g0,useFormState:g0,useActionState:g0,useOptimistic:g0,useMemoCache:g0,useCacheRefresh:g0},$d={readContext:M0,use:Zi,useCallback:function(e,o){return K0().memoizedState=[e,o===void 0?null:o],e},useContext:M0,useEffect:Md,useImperativeHandle:function(e,o,n){n=n!=null?n.concat([e]):null,Ji(4194308,4,zd.bind(null,o,e),n)},useLayoutEffect:function(e,o){return Ji(4194308,4,e,o)},useInsertionEffect:function(e,o){Ji(4,2,e,o)},useMemo:function(e,o){var n=K0();o=o===void 0?null:o;var s=e();if(Bo){Se(!0);try{e()}finally{Se(!1)}}return n.memoizedState=[s,o],s},useReducer:function(e,o,n){var s=K0();if(n!==void 0){var h=n(o);if(Bo){Se(!0);try{n(o)}finally{Se(!1)}}}else h=o;return s.memoizedState=s.baseState=h,e={pending:null,lanes:0,dispatch:null,lastRenderedReducer:e,lastRenderedState:h},s.queue=e,e=e.dispatch=ry.bind(null,M2,e),[s.memoizedState,e]},useRef:function(e){var o=K0();return e={current:e},o.memoizedState=e},useState:function(e){e=Oc(e);var o=e.queue,n=Yd.bind(null,M2,o);return o.dispatch=n,[e.memoizedState,n]},useDebugValue:Vc,useDeferredValue:function(e,o){var n=K0();return Uc(n,e,o)},useTransition:function(){var e=Oc(!1);return e=Gd.bind(null,M2,e.queue,!0,!1),K0().memoizedState=e,[!1,e]},useSyncExternalStore:function(e,o,n){var s=M2,h=K0();if(W2){if(n===void 0)throw Error(r(407));n=n()}else{if(n=o(),t0===null)throw Error(r(349));(U2&124)!==0||fd(s,o,n)}h.memoizedState=n;var d={value:n,getSnapshot:o};return h.queue=d,Md(Cd.bind(null,s,d,e),[e]),s.flags|=2048,sa(9,Xi(),yd.bind(null,s,d,n,o),null),n},useId:function(){var e=K0(),o=t0.identifierPrefix;if(W2){var n=lt,s=ct;n=(s&~(1<<32-x0(s)-1)).toString(32)+n,o="«"+o+"R"+n,n=Ki++,0<n&&(o+="H"+n.toString(32)),o+="»"}else n=ey++,o="«"+o+"r"+n.toString(32)+"»";return e.memoizedState=o},useHostTransitionStatus:qc,useFormState:Sd,useActionState:Sd,useOptimistic:function(e){var o=K0();o.memoizedState=o.baseState=e;var n={pending:null,lanes:0,dispatch:null,lastRenderedReducer:null,lastRenderedState:null};return o.queue=n,o=Wc.bind(null,M2,!0,n),n.dispatch=o,[e,o]},useMemoCache:Ic,useCacheRefresh:function(){return K0().memoizedState=iy.bind(null,M2)}},Qd={readContext:M0,use:Zi,useCallback:jd,useContext:M0,useEffect:Nd,useImperativeHandle:Od,useInsertionEffect:Id,useLayoutEffect:Hd,useMemo:Vd,useReducer:Yi,useRef:Ld,useState:function(){return Yi(Ft)},useDebugValue:Vc,useDeferredValue:function(e,o){var n=v0();return Ud(n,J2.memoizedState,e,o)},useTransition:function(){var e=Yi(Ft)[0],o=v0().memoizedState;return[typeof e=="boolean"?e:gn(e),o]},useSyncExternalStore:bd,useId:Kd,useHostTransitionStatus:qc,useFormState:Rd,useActionState:Rd,useOptimistic:function(e,o){var n=v0();return kd(n,J2,e,o)},useMemoCache:Ic,useCacheRefresh:Zd},sy={readContext:M0,use:Zi,useCallback:jd,useContext:M0,useEffect:Nd,useImperativeHandle:Od,useInsertionEffect:Id,useLayoutEffect:Hd,useMemo:Vd,useReducer:zc,useRef:Ld,useState:function(){return zc(Ft)},useDebugValue:Vc,useDeferredValue:function(e,o){var n=v0();return J2===null?Uc(n,e,o):Ud(n,J2.memoizedState,e,o)},useTransition:function(){var e=zc(Ft)[0],o=v0().memoizedState;return[typeof e=="boolean"?e:gn(e),o]},useSyncExternalStore:bd,useId:Kd,useHostTransitionStatus:qc,useFormState:Pd,useActionState:Pd,useOptimistic:function(e,o){var n=v0();return J2!==null?kd(n,J2,e,o):(n.baseState=e,[e,n.queue.dispatch])},useMemoCache:Ic,useCacheRefresh:Zd},ca=null,yn=0;function er(e){var o=yn;return yn+=1,ca===null&&(ca=[]),hd(ca,e,o)}function Cn(e,o){o=o.props.ref,e.ref=o!==void 0?o:null}function tr(e,o){throw o.$$typeof===m?Error(r(525)):(e=Object.prototype.toString.call(o),Error(r(31,e==="[object Object]"?"object with keys {"+Object.keys(o).join(", ")+"}":e)))}function eA(e){var o=e._init;return o(e._payload)}function tA(e){function o(z,H){if(e){var V=z.deletions;V===null?(z.deletions=[H],z.flags|=16):V.push(H)}}function n(z,H){if(!e)return null;for(;H!==null;)o(z,H),H=H.sibling;return null}function s(z){for(var H=new Map;z!==null;)z.key!==null?H.set(z.key,z):H.set(z.index,z),z=z.sibling;return H}function h(z,H){return z=st(z,H),z.index=0,z.sibling=null,z}function d(z,H,V){return z.index=V,e?(V=z.alternate,V!==null?(V=V.index,V<H?(z.flags|=67108866,H):V):(z.flags|=67108866,H)):(z.flags|=1048576,H)}function k(z){return e&&z.alternate===null&&(z.flags|=67108866),z}function E(z,H,V,t2){return H===null||H.tag!==6?(H=dc(V,z.mode,t2),H.return=z,H):(H=h(H,V),H.return=z,H)}function L(z,H,V,t2){var A2=V.type;return A2===B?e2(z,H,V.props.children,t2,V.key):H!==null&&(H.elementType===A2||typeof A2=="object"&&A2!==null&&A2.$$typeof===O&&eA(A2)===H.type)?(H=h(H,V.props),Cn(H,V),H.return=z,H):(H=Ii(V.type,V.key,V.props,null,z.mode,t2),Cn(H,V),H.return=z,H)}function G(z,H,V,t2){return H===null||H.tag!==4||H.stateNode.containerInfo!==V.containerInfo||H.stateNode.implementation!==V.implementation?(H=Ac(V,z.mode,t2),H.return=z,H):(H=h(H,V.children||[]),H.return=z,H)}function e2(z,H,V,t2,A2){return H===null||H.tag!==7?(H=po(V,z.mode,t2,A2),H.return=z,H):(H=h(H,V),H.return=z,H)}function i2(z,H,V){if(typeof H=="string"&&H!==""||typeof H=="number"||typeof H=="bigint")return H=dc(""+H,z.mode,V),H.return=z,H;if(typeof H=="object"&&H!==null){switch(H.$$typeof){case y:return V=Ii(H.type,H.key,H.props,null,z.mode,V),Cn(V,H),V.return=z,V;case C:return H=Ac(H,z.mode,V),H.return=z,H;case O:var t2=H._init;return H=t2(H._payload),i2(z,H,V)}if(F2(H)||s2(H))return H=po(H,z.mode,V,null),H.return=z,H;if(typeof H.then=="function")return i2(z,er(H),V);if(H.$$typeof===_)return i2(z,ji(z,H),V);tr(z,H)}return null}function K(z,H,V,t2){var A2=H!==null?H.key:null;if(typeof V=="string"&&V!==""||typeof V=="number"||typeof V=="bigint")return A2!==null?null:E(z,H,""+V,t2);if(typeof V=="object"&&V!==null){switch(V.$$typeof){case y:return V.key===A2?L(z,H,V,t2):null;case C:return V.key===A2?G(z,H,V,t2):null;case O:return A2=V._init,V=A2(V._payload),K(z,H,V,t2)}if(F2(V)||s2(V))return A2!==null?null:e2(z,H,V,t2,null);if(typeof V.then=="function")return K(z,H,er(V),t2);if(V.$$typeof===_)return K(z,H,ji(z,V),t2);tr(z,V)}return null}function Z(z,H,V,t2,A2){if(typeof t2=="string"&&t2!==""||typeof t2=="number"||typeof t2=="bigint")return z=z.get(V)||null,E(H,z,""+t2,A2);if(typeof t2=="object"&&t2!==null){switch(t2.$$typeof){case y:return z=z.get(t2.key===null?V:t2.key)||null,L(H,z,t2,A2);case C:return z=z.get(t2.key===null?V:t2.key)||null,G(H,z,t2,A2);case O:var z2=t2._init;return t2=z2(t2._payload),Z(z,H,V,t2,A2)}if(F2(t2)||s2(t2))return z=z.get(V)||null,e2(H,z,t2,A2,null);if(typeof t2.then=="function")return Z(z,H,V,er(t2),A2);if(t2.$$typeof===_)return Z(z,H,V,ji(H,t2),A2);tr(H,t2)}return null}function S2(z,H,V,t2){for(var A2=null,z2=null,C2=H,E2=H=0,_0=null;C2!==null&&E2<V.length;E2++){C2.index>E2?(_0=C2,C2=null):_0=C2.sibling;var G2=K(z,C2,V[E2],t2);if(G2===null){C2===null&&(C2=_0);break}e&&C2&&G2.alternate===null&&o(z,C2),H=d(G2,H,E2),z2===null?A2=G2:z2.sibling=G2,z2=G2,C2=_0}if(E2===V.length)return n(z,C2),W2&&go(z,E2),A2;if(C2===null){for(;E2<V.length;E2++)C2=i2(z,V[E2],t2),C2!==null&&(H=d(C2,H,E2),z2===null?A2=C2:z2.sibling=C2,z2=C2);return W2&&go(z,E2),A2}for(C2=s(C2);E2<V.length;E2++)_0=Z(C2,z,E2,V[E2],t2),_0!==null&&(e&&_0.alternate!==null&&C2.delete(_0.key===null?E2:_0.key),H=d(_0,H,E2),z2===null?A2=_0:z2.sibling=_0,z2=_0);return e&&C2.forEach(function(Zt){return o(z,Zt)}),W2&&go(z,E2),A2}function w2(z,H,V,t2){if(V==null)throw Error(r(151));for(var A2=null,z2=null,C2=H,E2=H=0,_0=null,G2=V.next();C2!==null&&!G2.done;E2++,G2=V.next()){C2.index>E2?(_0=C2,C2=null):_0=C2.sibling;var Zt=K(z,C2,G2.value,t2);if(Zt===null){C2===null&&(C2=_0);break}e&&C2&&Zt.alternate===null&&o(z,C2),H=d(Zt,H,E2),z2===null?A2=Zt:z2.sibling=Zt,z2=Zt,C2=_0}if(G2.done)return n(z,C2),W2&&go(z,E2),A2;if(C2===null){for(;!G2.done;E2++,G2=V.next())G2=i2(z,G2.value,t2),G2!==null&&(H=d(G2,H,E2),z2===null?A2=G2:z2.sibling=G2,z2=G2);return W2&&go(z,E2),A2}for(C2=s(C2);!G2.done;E2++,G2=V.next())G2=Z(C2,z,E2,G2.value,t2),G2!==null&&(e&&G2.alternate!==null&&C2.delete(G2.key===null?E2:G2.key),H=d(G2,H,E2),z2===null?A2=G2:z2.sibling=G2,z2=G2);return e&&C2.forEach(function(cC){return o(z,cC)}),W2&&go(z,E2),A2}function Q2(z,H,V,t2){if(typeof V=="object"&&V!==null&&V.type===B&&V.key===null&&(V=V.props.children),typeof V=="object"&&V!==null){switch(V.$$typeof){case y:e:{for(var A2=V.key;H!==null;){if(H.key===A2){if(A2=V.type,A2===B){if(H.tag===7){n(z,H.sibling),t2=h(H,V.props.children),t2.return=z,z=t2;break e}}else if(H.elementType===A2||typeof A2=="object"&&A2!==null&&A2.$$typeof===O&&eA(A2)===H.type){n(z,H.sibling),t2=h(H,V.props),Cn(t2,V),t2.return=z,z=t2;break e}n(z,H);break}else o(z,H);H=H.sibling}V.type===B?(t2=po(V.props.children,z.mode,t2,V.key),t2.return=z,z=t2):(t2=Ii(V.type,V.key,V.props,null,z.mode,t2),Cn(t2,V),t2.return=z,z=t2)}return k(z);case C:e:{for(A2=V.key;H!==null;){if(H.key===A2)if(H.tag===4&&H.stateNode.containerInfo===V.containerInfo&&H.stateNode.implementation===V.implementation){n(z,H.sibling),t2=h(H,V.children||[]),t2.return=z,z=t2;break e}else{n(z,H);break}else o(z,H);H=H.sibling}t2=Ac(V,z.mode,t2),t2.return=z,z=t2}return k(z);case O:return A2=V._init,V=A2(V._payload),Q2(z,H,V,t2)}if(F2(V))return S2(z,H,V,t2);if(s2(V)){if(A2=s2(V),typeof A2!="function")throw Error(r(150));return V=A2.call(V),w2(z,H,V,t2)}if(typeof V.then=="function")return Q2(z,H,er(V),t2);if(V.$$typeof===_)return Q2(z,H,ji(z,V),t2);tr(z,V)}return typeof V=="string"&&V!==""||typeof V=="number"||typeof V=="bigint"?(V=""+V,H!==null&&H.tag===6?(n(z,H.sibling),t2=h(H,V),t2.return=z,z=t2):(n(z,H),t2=dc(V,z.mode,t2),t2.return=z,z=t2),k(z)):n(z,H)}return function(z,H,V,t2){try{yn=0;var A2=Q2(z,H,V,t2);return ca=null,A2}catch(C2){if(C2===un||C2===Ui)throw C2;var z2=Q0(29,C2,null,z.mode);return z2.lanes=t2,z2.return=z,z2}finally{}}}var la=tA(!0),oA=tA(!1),be=$(null),Ue=null;function Pt(e){var o=e.alternate;a2(k0,k0.current&1),a2(be,e),Ue===null&&(o===null||na.current!==null||o.memoizedState!==null)&&(Ue=e)}function aA(e){if(e.tag===22){if(a2(k0,k0.current),a2(be,e),Ue===null){var o=e.alternate;o!==null&&o.memoizedState!==null&&(Ue=e)}}else Lt()}function Lt(){a2(k0,k0.current),a2(be,be.current)}function dt(e){Q(be),Ue===e&&(Ue=null),Q(k0)}var k0=$(0);function or(e){for(var o=e;o!==null;){if(o.tag===13){var n=o.memoizedState;if(n!==null&&(n=n.dehydrated,n===null||n.data==="$?"||Nl(n)))return o}else if(o.tag===19&&o.memoizedProps.revealOrder!==void 0){if((o.flags&128)!==0)return o}else if(o.child!==null){o.child.return=o,o=o.child;continue}if(o===e)break;for(;o.sibling===null;){if(o.return===null||o.return===e)return null;o=o.return}o.sibling.return=o.return,o=o.sibling}return null}function Kc(e,o,n,s){o=e.memoizedState,n=n(s,o),n=n==null?o:b({},o,n),e.memoizedState=n,e.lanes===0&&(e.updateQueue.baseState=n)}var Zc={enqueueSetState:function(e,o,n){e=e._reactInternals;var s=ae(),h=St(s);h.payload=o,n!=null&&(h.callback=n),o=Rt(e,h,s),o!==null&&(ne(o,e,s),dn(o,e,s))},enqueueReplaceState:function(e,o,n){e=e._reactInternals;var s=ae(),h=St(s);h.tag=1,h.payload=o,n!=null&&(h.callback=n),o=Rt(e,h,s),o!==null&&(ne(o,e,s),dn(o,e,s))},enqueueForceUpdate:function(e,o){e=e._reactInternals;var n=ae(),s=St(n);s.tag=2,o!=null&&(s.callback=o),o=Rt(e,s,n),o!==null&&(ne(o,e,n),dn(o,e,n))}};function nA(e,o,n,s,h,d,k){return e=e.stateNode,typeof e.shouldComponentUpdate=="function"?e.shouldComponentUpdate(s,d,k):o.prototype&&o.prototype.isPureReactComponent?!on(n,s)||!on(h,d):!0}function iA(e,o,n,s){e=o.state,typeof o.componentWillReceiveProps=="function"&&o.componentWillReceiveProps(n,s),typeof o.UNSAFE_componentWillReceiveProps=="function"&&o.UNSAFE_componentWillReceiveProps(n,s),o.state!==e&&Zc.enqueueReplaceState(o,o.state,null)}function ko(e,o){var n=o;if("ref"in o){n={};for(var s in o)s!=="ref"&&(n[s]=o[s])}if(e=e.defaultProps){n===o&&(n=b({},n));for(var h in e)n[h]===void 0&&(n[h]=e[h])}return n}var ar=typeof reportError=="function"?reportError:function(e){if(typeof window=="object"&&typeof window.ErrorEvent=="function"){var o=new window.ErrorEvent("error",{bubbles:!0,cancelable:!0,message:typeof e=="object"&&e!==null&&typeof e.message=="string"?String(e.message):String(e),error:e});if(!window.dispatchEvent(o))return}else if(typeof process=="object"&&typeof process.emit=="function"){process.emit("uncaughtException",e);return}console.error(e)};function rA(e){ar(e)}function sA(e){console.error(e)}function cA(e){ar(e)}function nr(e,o){try{var n=e.onUncaughtError;n(o.value,{componentStack:o.stack})}catch(s){setTimeout(function(){throw s})}}function lA(e,o,n){try{var s=e.onCaughtError;s(n.value,{componentStack:n.stack,errorBoundary:o.tag===1?o.stateNode:null})}catch(h){setTimeout(function(){throw h})}}function Yc(e,o,n){return n=St(n),n.tag=3,n.payload={element:null},n.callback=function(){nr(e,o)},n}function hA(e){return e=St(e),e.tag=3,e}function uA(e,o,n,s){var h=n.type.getDerivedStateFromError;if(typeof h=="function"){var d=s.value;e.payload=function(){return h(d)},e.callback=function(){lA(o,n,s)}}var k=n.stateNode;k!==null&&typeof k.componentDidCatch=="function"&&(e.callback=function(){lA(o,n,s),typeof h!="function"&&(Ot===null?Ot=new Set([this]):Ot.add(this));var E=s.stack;this.componentDidCatch(s.value,{componentStack:E!==null?E:""})})}function cy(e,o,n,s,h){if(n.flags|=32768,s!==null&&typeof s=="object"&&typeof s.then=="function"){if(o=n.alternate,o!==null&&cn(o,n,h,!0),n=be.current,n!==null){switch(n.tag){case 13:return Ue===null?fl():n.alternate===null&&A0===0&&(A0=3),n.flags&=-257,n.flags|=65536,n.lanes=h,s===kc?n.flags|=16384:(o=n.updateQueue,o===null?n.updateQueue=new Set([s]):o.add(s),Cl(e,s,h)),!1;case 22:return n.flags|=65536,s===kc?n.flags|=16384:(o=n.updateQueue,o===null?(o={transitions:null,markerInstances:null,retryQueue:new Set([s])},n.updateQueue=o):(n=o.retryQueue,n===null?o.retryQueue=new Set([s]):n.add(s)),Cl(e,s,h)),!1}throw Error(r(435,n.tag))}return Cl(e,s,h),fl(),!1}if(W2)return o=be.current,o!==null?((o.flags&65536)===0&&(o.flags|=256),o.flags|=65536,o.lanes=h,s!==gc&&(e=Error(r(422),{cause:s}),sn(Ae(e,n)))):(s!==gc&&(o=Error(r(423),{cause:s}),sn(Ae(o,n))),e=e.current.alternate,e.flags|=65536,h&=-h,e.lanes|=h,s=Ae(s,n),h=Yc(e.stateNode,s,h),_c(e,h),A0!==4&&(A0=2)),!1;var d=Error(r(520),{cause:s});if(d=Ae(d,n),En===null?En=[d]:En.push(d),A0!==4&&(A0=2),o===null)return!0;s=Ae(s,n),n=o;do{switch(n.tag){case 3:return n.flags|=65536,e=h&-h,n.lanes|=e,e=Yc(n.stateNode,s,e),_c(n,e),!1;case 1:if(o=n.type,d=n.stateNode,(n.flags&128)===0&&(typeof o.getDerivedStateFromError=="function"||d!==null&&typeof d.componentDidCatch=="function"&&(Ot===null||!Ot.has(d))))return n.flags|=65536,h&=-h,n.lanes|=h,h=hA(h),uA(h,e,n,s),_c(n,h),!1}n=n.return}while(n!==null);return!1}var FA=Error(r(461)),D0=!1;function S0(e,o,n,s){o.child=e===null?oA(o,null,n,s):la(o,e.child,n,s)}function dA(e,o,n,s,h){n=n.render;var d=o.ref;if("ref"in s){var k={};for(var E in s)E!=="ref"&&(k[E]=s[E])}else k=s;return Co(o),s=Tc(e,o,n,k,d,h),E=Pc(),e!==null&&!D0?(Lc(e,o,h),At(e,o,h)):(W2&&E&&pc(o),o.flags|=1,S0(e,o,s,h),o.child)}function AA(e,o,n,s,h){if(e===null){var d=n.type;return typeof d=="function"&&!Fc(d)&&d.defaultProps===void 0&&n.compare===null?(o.tag=15,o.type=d,pA(e,o,d,s,h)):(e=Ii(n.type,null,s,o,o.mode,h),e.ref=o.ref,e.return=o,o.child=e)}if(d=e.child,!al(e,h)){var k=d.memoizedProps;if(n=n.compare,n=n!==null?n:on,n(k,s)&&e.ref===o.ref)return At(e,o,h)}return o.flags|=1,e=st(d,s),e.ref=o.ref,e.return=o,o.child=e}function pA(e,o,n,s,h){if(e!==null){var d=e.memoizedProps;if(on(d,s)&&e.ref===o.ref)if(D0=!1,o.pendingProps=s=d,al(e,h))(e.flags&131072)!==0&&(D0=!0);else return o.lanes=e.lanes,At(e,o,h)}return Xc(e,o,n,s,h)}function mA(e,o,n){var s=o.pendingProps,h=s.children,d=e!==null?e.memoizedState:null;if(s.mode==="hidden"){if((o.flags&128)!==0){if(s=d!==null?d.baseLanes|n:n,e!==null){for(h=o.child=e.child,d=0;h!==null;)d=d|h.lanes|h.childLanes,h=h.sibling;o.childLanes=d&~s}else o.childLanes=0,o.child=null;return gA(e,o,s,n)}if((n&536870912)!==0)o.memoizedState={baseLanes:0,cachePool:null},e!==null&&Vi(o,d!==null?d.cachePool:null),d!==null?pd(o,d):xc(),aA(o);else return o.lanes=o.childLanes=536870912,gA(e,o,d!==null?d.baseLanes|n:n,n)}else d!==null?(Vi(o,d.cachePool),pd(o,d),Lt(),o.memoizedState=null):(e!==null&&Vi(o,null),xc(),Lt());return S0(e,o,h,n),o.child}function gA(e,o,n,s){var h=Bc();return h=h===null?null:{parent:B0._currentValue,pool:h},o.memoizedState={baseLanes:n,cachePool:h},e!==null&&Vi(o,null),xc(),aA(o),e!==null&&cn(e,o,s,!0),null}function ir(e,o){var n=o.ref;if(n===null)e!==null&&e.ref!==null&&(o.flags|=4194816);else{if(typeof n!="function"&&typeof n!="object")throw Error(r(284));(e===null||e.ref!==n)&&(o.flags|=4194816)}}function Xc(e,o,n,s,h){return Co(o),n=Tc(e,o,n,s,void 0,h),s=Pc(),e!==null&&!D0?(Lc(e,o,h),At(e,o,h)):(W2&&s&&pc(o),o.flags|=1,S0(e,o,n,h),o.child)}function bA(e,o,n,s,h,d){return Co(o),o.updateQueue=null,n=gd(o,s,n,h),md(e),s=Pc(),e!==null&&!D0?(Lc(e,o,d),At(e,o,d)):(W2&&s&&pc(o),o.flags|=1,S0(e,o,n,d),o.child)}function fA(e,o,n,s,h){if(Co(o),o.stateNode===null){var d=Qo,k=n.contextType;typeof k=="object"&&k!==null&&(d=M0(k)),d=new n(s,d),o.memoizedState=d.state!==null&&d.state!==void 0?d.state:null,d.updater=Zc,o.stateNode=d,d._reactInternals=o,d=o.stateNode,d.props=s,d.state=o.memoizedState,d.refs={},Dc(o),k=n.contextType,d.context=typeof k=="object"&&k!==null?M0(k):Qo,d.state=o.memoizedState,k=n.getDerivedStateFromProps,typeof k=="function"&&(Kc(o,n,k,s),d.state=o.memoizedState),typeof n.getDerivedStateFromProps=="function"||typeof d.getSnapshotBeforeUpdate=="function"||typeof d.UNSAFE_componentWillMount!="function"&&typeof d.componentWillMount!="function"||(k=d.state,typeof d.componentWillMount=="function"&&d.componentWillMount(),typeof d.UNSAFE_componentWillMount=="function"&&d.UNSAFE_componentWillMount(),k!==d.state&&Zc.enqueueReplaceState(d,d.state,null),pn(o,s,d,h),An(),d.state=o.memoizedState),typeof d.componentDidMount=="function"&&(o.flags|=4194308),s=!0}else if(e===null){d=o.stateNode;var E=o.memoizedProps,L=ko(n,E);d.props=L;var G=d.context,e2=n.contextType;k=Qo,typeof e2=="object"&&e2!==null&&(k=M0(e2));var i2=n.getDerivedStateFromProps;e2=typeof i2=="function"||typeof d.getSnapshotBeforeUpdate=="function",E=o.pendingProps!==E,e2||typeof d.UNSAFE_componentWillReceiveProps!="function"&&typeof d.componentWillReceiveProps!="function"||(E||G!==k)&&iA(o,d,s,k),xt=!1;var K=o.memoizedState;d.state=K,pn(o,s,d,h),An(),G=o.memoizedState,E||K!==G||xt?(typeof i2=="function"&&(Kc(o,n,i2,s),G=o.memoizedState),(L=xt||nA(o,n,L,s,K,G,k))?(e2||typeof d.UNSAFE_componentWillMount!="function"&&typeof d.componentWillMount!="function"||(typeof d.componentWillMount=="function"&&d.componentWillMount(),typeof d.UNSAFE_componentWillMount=="function"&&d.UNSAFE_componentWillMount()),typeof d.componentDidMount=="function"&&(o.flags|=4194308)):(typeof d.componentDidMount=="function"&&(o.flags|=4194308),o.memoizedProps=s,o.memoizedState=G),d.props=s,d.state=G,d.context=k,s=L):(typeof d.componentDidMount=="function"&&(o.flags|=4194308),s=!1)}else{d=o.stateNode,wc(e,o),k=o.memoizedProps,e2=ko(n,k),d.props=e2,i2=o.pendingProps,K=d.context,G=n.contextType,L=Qo,typeof G=="object"&&G!==null&&(L=M0(G)),E=n.getDerivedStateFromProps,(G=typeof E=="function"||typeof d.getSnapshotBeforeUpdate=="function")||typeof d.UNSAFE_componentWillReceiveProps!="function"&&typeof d.componentWillReceiveProps!="function"||(k!==i2||K!==L)&&iA(o,d,s,L),xt=!1,K=o.memoizedState,d.state=K,pn(o,s,d,h),An();var Z=o.memoizedState;k!==i2||K!==Z||xt||e!==null&&e.dependencies!==null&&Oi(e.dependencies)?(typeof E=="function"&&(Kc(o,n,E,s),Z=o.memoizedState),(e2=xt||nA(o,n,e2,s,K,Z,L)||e!==null&&e.dependencies!==null&&Oi(e.dependencies))?(G||typeof d.UNSAFE_componentWillUpdate!="function"&&typeof d.componentWillUpdate!="function"||(typeof d.componentWillUpdate=="function"&&d.componentWillUpdate(s,Z,L),typeof d.UNSAFE_componentWillUpdate=="function"&&d.UNSAFE_componentWillUpdate(s,Z,L)),typeof d.componentDidUpdate=="function"&&(o.flags|=4),typeof d.getSnapshotBeforeUpdate=="function"&&(o.flags|=1024)):(typeof d.componentDidUpdate!="function"||k===e.memoizedProps&&K===e.memoizedState||(o.flags|=4),typeof d.getSnapshotBeforeUpdate!="function"||k===e.memoizedProps&&K===e.memoizedState||(o.flags|=1024),o.memoizedProps=s,o.memoizedState=Z),d.props=s,d.state=Z,d.context=L,s=e2):(typeof d.componentDidUpdate!="function"||k===e.memoizedProps&&K===e.memoizedState||(o.flags|=4),typeof d.getSnapshotBeforeUpdate!="function"||k===e.memoizedProps&&K===e.memoizedState||(o.flags|=1024),s=!1)}return d=s,ir(e,o),s=(o.flags&128)!==0,d||s?(d=o.stateNode,n=s&&typeof n.getDerivedStateFromError!="function"?null:d.render(),o.flags|=1,e!==null&&s?(o.child=la(o,e.child,null,h),o.child=la(o,null,n,h)):S0(e,o,n,h),o.memoizedState=d.state,e=o.child):e=At(e,o,h),e}function yA(e,o,n,s){return rn(),o.flags|=256,S0(e,o,n,s),o.child}var Jc={dehydrated:null,treeContext:null,retryLane:0,hydrationErrors:null};function $c(e){return{baseLanes:e,cachePool:sd()}}function Qc(e,o,n){return e=e!==null?e.childLanes&~n:0,o&&(e|=fe),e}function CA(e,o,n){var s=o.pendingProps,h=!1,d=(o.flags&128)!==0,k;if((k=d)||(k=e!==null&&e.memoizedState===null?!1:(k0.current&2)!==0),k&&(h=!0,o.flags&=-129),k=(o.flags&32)!==0,o.flags&=-33,e===null){if(W2){if(h?Pt(o):Lt(),W2){var E=d0,L;if(L=E){e:{for(L=E,E=Ve;L.nodeType!==8;){if(!E){E=null;break e}if(L=Pe(L.nextSibling),L===null){E=null;break e}}E=L}E!==null?(o.memoizedState={dehydrated:E,treeContext:mo!==null?{id:ct,overflow:lt}:null,retryLane:536870912,hydrationErrors:null},L=Q0(18,null,null,0),L.stateNode=E,L.return=o,o.child=L,j0=o,d0=null,L=!0):L=!1}L||fo(o)}if(E=o.memoizedState,E!==null&&(E=E.dehydrated,E!==null))return Nl(E)?o.lanes=32:o.lanes=536870912,null;dt(o)}return E=s.children,s=s.fallback,h?(Lt(),h=o.mode,E=rr({mode:"hidden",children:E},h),s=po(s,h,n,null),E.return=o,s.return=o,E.sibling=s,o.child=E,h=o.child,h.memoizedState=$c(n),h.childLanes=Qc(e,k,n),o.memoizedState=Jc,s):(Pt(o),el(o,E))}if(L=e.memoizedState,L!==null&&(E=L.dehydrated,E!==null)){if(d)o.flags&256?(Pt(o),o.flags&=-257,o=tl(e,o,n)):o.memoizedState!==null?(Lt(),o.child=e.child,o.flags|=128,o=null):(Lt(),h=s.fallback,E=o.mode,s=rr({mode:"visible",children:s.children},E),h=po(h,E,n,null),h.flags|=2,s.return=o,h.return=o,s.sibling=h,o.child=s,la(o,e.child,null,n),s=o.child,s.memoizedState=$c(n),s.childLanes=Qc(e,k,n),o.memoizedState=Jc,o=h);else if(Pt(o),Nl(E)){if(k=E.nextSibling&&E.nextSibling.dataset,k)var G=k.dgst;k=G,s=Error(r(419)),s.stack="",s.digest=k,sn({value:s,source:null,stack:null}),o=tl(e,o,n)}else if(D0||cn(e,o,n,!1),k=(n&e.childLanes)!==0,D0||k){if(k=t0,k!==null&&(s=n&-n,s=(s&42)!==0?1:Ka(s),s=(s&(k.suspendedLanes|n))!==0?0:s,s!==0&&s!==L.retryLane))throw L.retryLane=s,$o(e,s),ne(k,e,s),FA;E.data==="$?"||fl(),o=tl(e,o,n)}else E.data==="$?"?(o.flags|=192,o.child=e.child,o=null):(e=L.treeContext,d0=Pe(E.nextSibling),j0=o,W2=!0,bo=null,Ve=!1,e!==null&&(me[ge++]=ct,me[ge++]=lt,me[ge++]=mo,ct=e.id,lt=e.overflow,mo=o),o=el(o,s.children),o.flags|=4096);return o}return h?(Lt(),h=s.fallback,E=o.mode,L=e.child,G=L.sibling,s=st(L,{mode:"hidden",children:s.children}),s.subtreeFlags=L.subtreeFlags&65011712,G!==null?h=st(G,h):(h=po(h,E,n,null),h.flags|=2),h.return=o,s.return=o,s.sibling=h,o.child=s,s=h,h=o.child,E=e.child.memoizedState,E===null?E=$c(n):(L=E.cachePool,L!==null?(G=B0._currentValue,L=L.parent!==G?{parent:G,pool:G}:L):L=sd(),E={baseLanes:E.baseLanes|n,cachePool:L}),h.memoizedState=E,h.childLanes=Qc(e,k,n),o.memoizedState=Jc,s):(Pt(o),n=e.child,e=n.sibling,n=st(n,{mode:"visible",children:s.children}),n.return=o,n.sibling=null,e!==null&&(k=o.deletions,k===null?(o.deletions=[e],o.flags|=16):k.push(e)),o.child=n,o.memoizedState=null,n)}function el(e,o){return o=rr({mode:"visible",children:o},e.mode),o.return=e,e.child=o}function rr(e,o){return e=Q0(22,e,null,o),e.lanes=0,e.stateNode={_visibility:1,_pendingMarkers:null,_retryCache:null,_transitions:null},e}function tl(e,o,n){return la(o,e.child,null,n),e=el(o,o.pendingProps.children),e.flags|=2,o.memoizedState=null,e}function vA(e,o,n){e.lanes|=o;var s=e.alternate;s!==null&&(s.lanes|=o),fc(e.return,o,n)}function ol(e,o,n,s,h){var d=e.memoizedState;d===null?e.memoizedState={isBackwards:o,rendering:null,renderingStartTime:0,last:s,tail:n,tailMode:h}:(d.isBackwards=o,d.rendering=null,d.renderingStartTime=0,d.last=s,d.tail=n,d.tailMode=h)}function BA(e,o,n){var s=o.pendingProps,h=s.revealOrder,d=s.tail;if(S0(e,o,s.children,n),s=k0.current,(s&2)!==0)s=s&1|2,o.flags|=128;else{if(e!==null&&(e.flags&128)!==0)e:for(e=o.child;e!==null;){if(e.tag===13)e.memoizedState!==null&&vA(e,n,o);else if(e.tag===19)vA(e,n,o);else if(e.child!==null){e.child.return=e,e=e.child;continue}if(e===o)break e;for(;e.sibling===null;){if(e.return===null||e.return===o)break e;e=e.return}e.sibling.return=e.return,e=e.sibling}s&=1}switch(a2(k0,s),h){case"forwards":for(n=o.child,h=null;n!==null;)e=n.alternate,e!==null&&or(e)===null&&(h=n),n=n.sibling;n=h,n===null?(h=o.child,o.child=null):(h=n.sibling,n.sibling=null),ol(o,!1,h,n,d);break;case"backwards":for(n=null,h=o.child,o.child=null;h!==null;){if(e=h.alternate,e!==null&&or(e)===null){o.child=h;break}e=h.sibling,h.sibling=n,n=h,h=e}ol(o,!0,n,null,d);break;case"together":ol(o,!1,null,null,void 0);break;default:o.memoizedState=null}return o.child}function At(e,o,n){if(e!==null&&(o.dependencies=e.dependencies),zt|=o.lanes,(n&o.childLanes)===0)if(e!==null){if(cn(e,o,n,!1),(n&o.childLanes)===0)return null}else return null;if(e!==null&&o.child!==e.child)throw Error(r(153));if(o.child!==null){for(e=o.child,n=st(e,e.pendingProps),o.child=n,n.return=o;e.sibling!==null;)e=e.sibling,n=n.sibling=st(e,e.pendingProps),n.return=o;n.sibling=null}return o.child}function al(e,o){return(e.lanes&o)!==0?!0:(e=e.dependencies,!!(e!==null&&Oi(e)))}function ly(e,o,n){switch(o.tag){case 3:_2(o,o.stateNode.containerInfo),Et(o,B0,e.memoizedState.cache),rn();break;case 27:case 5:V2(o);break;case 4:_2(o,o.stateNode.containerInfo);break;case 10:Et(o,o.type,o.memoizedProps.value);break;case 13:var s=o.memoizedState;if(s!==null)return s.dehydrated!==null?(Pt(o),o.flags|=128,null):(n&o.child.childLanes)!==0?CA(e,o,n):(Pt(o),e=At(e,o,n),e!==null?e.sibling:null);Pt(o);break;case 19:var h=(e.flags&128)!==0;if(s=(n&o.childLanes)!==0,s||(cn(e,o,n,!1),s=(n&o.childLanes)!==0),h){if(s)return BA(e,o,n);o.flags|=128}if(h=o.memoizedState,h!==null&&(h.rendering=null,h.tail=null,h.lastEffect=null),a2(k0,k0.current),s)break;return null;case 22:case 23:return o.lanes=0,mA(e,o,n);case 24:Et(o,B0,e.memoizedState.cache)}return At(e,o,n)}function kA(e,o,n){if(e!==null)if(e.memoizedProps!==o.pendingProps)D0=!0;else{if(!al(e,n)&&(o.flags&128)===0)return D0=!1,ly(e,o,n);D0=(e.flags&131072)!==0}else D0=!1,W2&&(o.flags&1048576)!==0&&ed(o,zi,o.index);switch(o.lanes=0,o.tag){case 16:e:{e=o.pendingProps;var s=o.elementType,h=s._init;if(s=h(s._payload),o.type=s,typeof s=="function")Fc(s)?(e=ko(s,e),o.tag=1,o=fA(null,o,s,e,n)):(o.tag=0,o=Xc(null,o,s,e,n));else{if(s!=null){if(h=s.$$typeof,h===R){o.tag=11,o=dA(null,o,s,e,n);break e}else if(h===N){o.tag=14,o=AA(null,o,s,e,n);break e}}throw o=W(s)||s,Error(r(306,o,""))}}return o;case 0:return Xc(e,o,o.type,o.pendingProps,n);case 1:return s=o.type,h=ko(s,o.pendingProps),fA(e,o,s,h,n);case 3:e:{if(_2(o,o.stateNode.containerInfo),e===null)throw Error(r(387));s=o.pendingProps;var d=o.memoizedState;h=d.element,wc(e,o),pn(o,s,null,n);var k=o.memoizedState;if(s=k.cache,Et(o,B0,s),s!==d.cache&&yc(o,[B0],n,!0),An(),s=k.element,d.isDehydrated)if(d={element:s,isDehydrated:!1,cache:k.cache},o.updateQueue.baseState=d,o.memoizedState=d,o.flags&256){o=yA(e,o,s,n);break e}else if(s!==h){h=Ae(Error(r(424)),o),sn(h),o=yA(e,o,s,n);break e}else{switch(e=o.stateNode.containerInfo,e.nodeType){case 9:e=e.body;break;default:e=e.nodeName==="HTML"?e.ownerDocument.body:e}for(d0=Pe(e.firstChild),j0=o,W2=!0,bo=null,Ve=!0,n=oA(o,null,s,n),o.child=n;n;)n.flags=n.flags&-3|4096,n=n.sibling}else{if(rn(),s===h){o=At(e,o,n);break e}S0(e,o,s,n)}o=o.child}return o;case 26:return ir(e,o),e===null?(n=Ep(o.type,null,o.pendingProps,null))?o.memoizedState=n:W2||(n=o.type,e=o.pendingProps,s=yr(g2.current).createElement(n),s[r2]=o,s[h2]=e,T0(s,n,e),T2(s),o.stateNode=s):o.memoizedState=Ep(o.type,e.memoizedProps,o.pendingProps,e.memoizedState),null;case 27:return V2(o),e===null&&W2&&(s=o.stateNode=Dp(o.type,o.pendingProps,g2.current),j0=o,Ve=!0,h=d0,Ut(o.type)?(Il=h,d0=Pe(s.firstChild)):d0=h),S0(e,o,o.pendingProps.children,n),ir(e,o),e===null&&(o.flags|=4194304),o.child;case 5:return e===null&&W2&&((h=s=d0)&&(s=Iy(s,o.type,o.pendingProps,Ve),s!==null?(o.stateNode=s,j0=o,d0=Pe(s.firstChild),Ve=!1,h=!0):h=!1),h||fo(o)),V2(o),h=o.type,d=o.pendingProps,k=e!==null?e.memoizedProps:null,s=d.children,Pl(h,d)?s=null:k!==null&&Pl(h,k)&&(o.flags|=32),o.memoizedState!==null&&(h=Tc(e,o,ty,null,null,n),In._currentValue=h),ir(e,o),S0(e,o,s,n),o.child;case 6:return e===null&&W2&&((e=n=d0)&&(n=Hy(n,o.pendingProps,Ve),n!==null?(o.stateNode=n,j0=o,d0=null,e=!0):e=!1),e||fo(o)),null;case 13:return CA(e,o,n);case 4:return _2(o,o.stateNode.containerInfo),s=o.pendingProps,e===null?o.child=la(o,null,s,n):S0(e,o,s,n),o.child;case 11:return dA(e,o,o.type,o.pendingProps,n);case 7:return S0(e,o,o.pendingProps,n),o.child;case 8:return S0(e,o,o.pendingProps.children,n),o.child;case 12:return S0(e,o,o.pendingProps.children,n),o.child;case 10:return s=o.pendingProps,Et(o,o.type,s.value),S0(e,o,s.children,n),o.child;case 9:return h=o.type._context,s=o.pendingProps.children,Co(o),h=M0(h),s=s(h),o.flags|=1,S0(e,o,s,n),o.child;case 14:return AA(e,o,o.type,o.pendingProps,n);case 15:return pA(e,o,o.type,o.pendingProps,n);case 19:return BA(e,o,n);case 31:return s=o.pendingProps,n=o.mode,s={mode:s.mode,children:s.children},e===null?(n=rr(s,n),n.ref=o.ref,o.child=n,n.return=o,o=n):(n=st(e.child,s),n.ref=o.ref,o.child=n,n.return=o,o=n),o;case 22:return mA(e,o,n);case 24:return Co(o),s=M0(B0),e===null?(h=Bc(),h===null&&(h=t0,d=Cc(),h.pooledCache=d,d.refCount++,d!==null&&(h.pooledCacheLanes|=n),h=d),o.memoizedState={parent:s,cache:h},Dc(o),Et(o,B0,h)):((e.lanes&n)!==0&&(wc(e,o),pn(o,null,null,n),An()),h=e.memoizedState,d=o.memoizedState,h.parent!==s?(h={parent:s,cache:s},o.memoizedState=h,o.lanes===0&&(o.memoizedState=o.updateQueue.baseState=h),Et(o,B0,s)):(s=d.cache,Et(o,B0,s),s!==h.cache&&yc(o,[B0],n,!0))),S0(e,o,o.pendingProps.children,n),o.child;case 29:throw o.pendingProps}throw Error(r(156,o.tag))}function pt(e){e.flags|=4}function DA(e,o){if(o.type!=="stylesheet"||(o.state.loading&4)!==0)e.flags&=-16777217;else if(e.flags|=16777216,!Pp(o)){if(o=be.current,o!==null&&((U2&4194048)===U2?Ue!==null:(U2&62914560)!==U2&&(U2&536870912)===0||o!==Ue))throw Fn=kc,cd;e.flags|=8192}}function sr(e,o){o!==null&&(e.flags|=4),e.flags&16384&&(o=e.tag!==22?Ci():536870912,e.lanes|=o,da|=o)}function vn(e,o){if(!W2)switch(e.tailMode){case"hidden":o=e.tail;for(var n=null;o!==null;)o.alternate!==null&&(n=o),o=o.sibling;n===null?e.tail=null:n.sibling=null;break;case"collapsed":n=e.tail;for(var s=null;n!==null;)n.alternate!==null&&(s=n),n=n.sibling;s===null?o||e.tail===null?e.tail=null:e.tail.sibling=null:s.sibling=null}}function l0(e){var o=e.alternate!==null&&e.alternate.child===e.child,n=0,s=0;if(o)for(var h=e.child;h!==null;)n|=h.lanes|h.childLanes,s|=h.subtreeFlags&65011712,s|=h.flags&65011712,h.return=e,h=h.sibling;else for(h=e.child;h!==null;)n|=h.lanes|h.childLanes,s|=h.subtreeFlags,s|=h.flags,h.return=e,h=h.sibling;return e.subtreeFlags|=s,e.childLanes=n,o}function hy(e,o,n){var s=o.pendingProps;switch(mc(o),o.tag){case 31:case 16:case 15:case 0:case 11:case 7:case 8:case 12:case 9:case 14:return l0(o),null;case 1:return l0(o),null;case 3:return n=o.stateNode,s=null,e!==null&&(s=e.memoizedState.cache),o.memoizedState.cache!==s&&(o.flags|=2048),ut(B0),L2(),n.pendingContext&&(n.context=n.pendingContext,n.pendingContext=null),(e===null||e.child===null)&&(nn(o)?pt(o):e===null||e.memoizedState.isDehydrated&&(o.flags&256)===0||(o.flags|=1024,ad())),l0(o),null;case 26:return n=o.memoizedState,e===null?(pt(o),n!==null?(l0(o),DA(o,n)):(l0(o),o.flags&=-16777217)):n?n!==e.memoizedState?(pt(o),l0(o),DA(o,n)):(l0(o),o.flags&=-16777217):(e.memoizedProps!==s&&pt(o),l0(o),o.flags&=-16777217),null;case 27:h0(o),n=g2.current;var h=o.type;if(e!==null&&o.stateNode!=null)e.memoizedProps!==s&&pt(o);else{if(!s){if(o.stateNode===null)throw Error(r(166));return l0(o),null}e=d2.current,nn(o)?td(o):(e=Dp(h,s,n),o.stateNode=e,pt(o))}return l0(o),null;case 5:if(h0(o),n=o.type,e!==null&&o.stateNode!=null)e.memoizedProps!==s&&pt(o);else{if(!s){if(o.stateNode===null)throw Error(r(166));return l0(o),null}if(e=d2.current,nn(o))td(o);else{switch(h=yr(g2.current),e){case 1:e=h.createElementNS("http://www.w3.org/2000/svg",n);break;case 2:e=h.createElementNS("http://www.w3.org/1998/Math/MathML",n);break;default:switch(n){case"svg":e=h.createElementNS("http://www.w3.org/2000/svg",n);break;case"math":e=h.createElementNS("http://www.w3.org/1998/Math/MathML",n);break;case"script":e=h.createElement("div"),e.innerHTML="<script><\/script>",e=e.removeChild(e.firstChild);break;case"select":e=typeof s.is=="string"?h.createElement("select",{is:s.is}):h.createElement("select"),s.multiple?e.multiple=!0:s.size&&(e.size=s.size);break;default:e=typeof s.is=="string"?h.createElement(n,{is:s.is}):h.createElement(n)}}e[r2]=o,e[h2]=s;e:for(h=o.child;h!==null;){if(h.tag===5||h.tag===6)e.appendChild(h.stateNode);else if(h.tag!==4&&h.tag!==27&&h.child!==null){h.child.return=h,h=h.child;continue}if(h===o)break e;for(;h.sibling===null;){if(h.return===null||h.return===o)break e;h=h.return}h.sibling.return=h.return,h=h.sibling}o.stateNode=e;e:switch(T0(e,n,s),n){case"button":case"input":case"select":case"textarea":e=!!s.autoFocus;break e;case"img":e=!0;break e;default:e=!1}e&&pt(o)}}return l0(o),o.flags&=-16777217,null;case 6:if(e&&o.stateNode!=null)e.memoizedProps!==s&&pt(o);else{if(typeof s!="string"&&o.stateNode===null)throw Error(r(166));if(e=g2.current,nn(o)){if(e=o.stateNode,n=o.memoizedProps,s=null,h=j0,h!==null)switch(h.tag){case 27:case 5:s=h.memoizedProps}e[r2]=o,e=!!(e.nodeValue===n||s!==null&&s.suppressHydrationWarning===!0||bp(e.nodeValue,n)),e||fo(o)}else e=yr(e).createTextNode(s),e[r2]=o,o.stateNode=e}return l0(o),null;case 13:if(s=o.memoizedState,e===null||e.memoizedState!==null&&e.memoizedState.dehydrated!==null){if(h=nn(o),s!==null&&s.dehydrated!==null){if(e===null){if(!h)throw Error(r(318));if(h=o.memoizedState,h=h!==null?h.dehydrated:null,!h)throw Error(r(317));h[r2]=o}else rn(),(o.flags&128)===0&&(o.memoizedState=null),o.flags|=4;l0(o),h=!1}else h=ad(),e!==null&&e.memoizedState!==null&&(e.memoizedState.hydrationErrors=h),h=!0;if(!h)return o.flags&256?(dt(o),o):(dt(o),null)}if(dt(o),(o.flags&128)!==0)return o.lanes=n,o;if(n=s!==null,e=e!==null&&e.memoizedState!==null,n){s=o.child,h=null,s.alternate!==null&&s.alternate.memoizedState!==null&&s.alternate.memoizedState.cachePool!==null&&(h=s.alternate.memoizedState.cachePool.pool);var d=null;s.memoizedState!==null&&s.memoizedState.cachePool!==null&&(d=s.memoizedState.cachePool.pool),d!==h&&(s.flags|=2048)}return n!==e&&n&&(o.child.flags|=8192),sr(o,o.updateQueue),l0(o),null;case 4:return L2(),e===null&&El(o.stateNode.containerInfo),l0(o),null;case 10:return ut(o.type),l0(o),null;case 19:if(Q(k0),h=o.memoizedState,h===null)return l0(o),null;if(s=(o.flags&128)!==0,d=h.rendering,d===null)if(s)vn(h,!1);else{if(A0!==0||e!==null&&(e.flags&128)!==0)for(e=o.child;e!==null;){if(d=or(e),d!==null){for(o.flags|=128,vn(h,!1),e=d.updateQueue,o.updateQueue=e,sr(o,e),o.subtreeFlags=0,e=n,n=o.child;n!==null;)QF(n,e),n=n.sibling;return a2(k0,k0.current&1|2),o.child}e=e.sibling}h.tail!==null&&z0()>hr&&(o.flags|=128,s=!0,vn(h,!1),o.lanes=4194304)}else{if(!s)if(e=or(d),e!==null){if(o.flags|=128,s=!0,e=e.updateQueue,o.updateQueue=e,sr(o,e),vn(h,!0),h.tail===null&&h.tailMode==="hidden"&&!d.alternate&&!W2)return l0(o),null}else 2*z0()-h.renderingStartTime>hr&&n!==536870912&&(o.flags|=128,s=!0,vn(h,!1),o.lanes=4194304);h.isBackwards?(d.sibling=o.child,o.child=d):(e=h.last,e!==null?e.sibling=d:o.child=d,h.last=d)}return h.tail!==null?(o=h.tail,h.rendering=o,h.tail=o.sibling,h.renderingStartTime=z0(),o.sibling=null,e=k0.current,a2(k0,s?e&1|2:e&1),o):(l0(o),null);case 22:case 23:return dt(o),Sc(),s=o.memoizedState!==null,e!==null?e.memoizedState!==null!==s&&(o.flags|=8192):s&&(o.flags|=8192),s?(n&536870912)!==0&&(o.flags&128)===0&&(l0(o),o.subtreeFlags&6&&(o.flags|=8192)):l0(o),n=o.updateQueue,n!==null&&sr(o,n.retryQueue),n=null,e!==null&&e.memoizedState!==null&&e.memoizedState.cachePool!==null&&(n=e.memoizedState.cachePool.pool),s=null,o.memoizedState!==null&&o.memoizedState.cachePool!==null&&(s=o.memoizedState.cachePool.pool),s!==n&&(o.flags|=2048),e!==null&&Q(vo),null;case 24:return n=null,e!==null&&(n=e.memoizedState.cache),o.memoizedState.cache!==n&&(o.flags|=2048),ut(B0),l0(o),null;case 25:return null;case 30:return null}throw Error(r(156,o.tag))}function uy(e,o){switch(mc(o),o.tag){case 1:return e=o.flags,e&65536?(o.flags=e&-65537|128,o):null;case 3:return ut(B0),L2(),e=o.flags,(e&65536)!==0&&(e&128)===0?(o.flags=e&-65537|128,o):null;case 26:case 27:case 5:return h0(o),null;case 13:if(dt(o),e=o.memoizedState,e!==null&&e.dehydrated!==null){if(o.alternate===null)throw Error(r(340));rn()}return e=o.flags,e&65536?(o.flags=e&-65537|128,o):null;case 19:return Q(k0),null;case 4:return L2(),null;case 10:return ut(o.type),null;case 22:case 23:return dt(o),Sc(),e!==null&&Q(vo),e=o.flags,e&65536?(o.flags=e&-65537|128,o):null;case 24:return ut(B0),null;case 25:return null;default:return null}}function wA(e,o){switch(mc(o),o.tag){case 3:ut(B0),L2();break;case 26:case 27:case 5:h0(o);break;case 4:L2();break;case 13:dt(o);break;case 19:Q(k0);break;case 10:ut(o.type);break;case 22:case 23:dt(o),Sc(),e!==null&&Q(vo);break;case 24:ut(B0)}}function Bn(e,o){try{var n=o.updateQueue,s=n!==null?n.lastEffect:null;if(s!==null){var h=s.next;n=h;do{if((n.tag&e)===e){s=void 0;var d=n.create,k=n.inst;s=d(),k.destroy=s}n=n.next}while(n!==h)}}catch(E){e0(o,o.return,E)}}function Mt(e,o,n){try{var s=o.updateQueue,h=s!==null?s.lastEffect:null;if(h!==null){var d=h.next;s=d;do{if((s.tag&e)===e){var k=s.inst,E=k.destroy;if(E!==void 0){k.destroy=void 0,h=o;var L=n,G=E;try{G()}catch(e2){e0(h,L,e2)}}}s=s.next}while(s!==d)}}catch(e2){e0(o,o.return,e2)}}function _A(e){var o=e.updateQueue;if(o!==null){var n=e.stateNode;try{Ad(o,n)}catch(s){e0(e,e.return,s)}}}function EA(e,o,n){n.props=ko(e.type,e.memoizedProps),n.state=e.memoizedState;try{n.componentWillUnmount()}catch(s){e0(e,o,s)}}function kn(e,o){try{var n=e.ref;if(n!==null){switch(e.tag){case 26:case 27:case 5:var s=e.stateNode;break;case 30:s=e.stateNode;break;default:s=e.stateNode}typeof n=="function"?e.refCleanup=n(s):n.current=s}}catch(h){e0(e,o,h)}}function Ge(e,o){var n=e.ref,s=e.refCleanup;if(n!==null)if(typeof s=="function")try{s()}catch(h){e0(e,o,h)}finally{e.refCleanup=null,e=e.alternate,e!=null&&(e.refCleanup=null)}else if(typeof n=="function")try{n(null)}catch(h){e0(e,o,h)}else n.current=null}function xA(e){var o=e.type,n=e.memoizedProps,s=e.stateNode;try{e:switch(o){case"button":case"input":case"select":case"textarea":n.autoFocus&&s.focus();break e;case"img":n.src?s.src=n.src:n.srcSet&&(s.srcset=n.srcSet)}}catch(h){e0(e,e.return,h)}}function nl(e,o,n){try{var s=e.stateNode;Ty(s,e.type,n,o),s[h2]=o}catch(h){e0(e,e.return,h)}}function SA(e){return e.tag===5||e.tag===3||e.tag===26||e.tag===27&&Ut(e.type)||e.tag===4}function il(e){e:for(;;){for(;e.sibling===null;){if(e.return===null||SA(e.return))return null;e=e.return}for(e.sibling.return=e.return,e=e.sibling;e.tag!==5&&e.tag!==6&&e.tag!==18;){if(e.tag===27&&Ut(e.type)||e.flags&2||e.child===null||e.tag===4)continue e;e.child.return=e,e=e.child}if(!(e.flags&2))return e.stateNode}}function rl(e,o,n){var s=e.tag;if(s===5||s===6)e=e.stateNode,o?(n.nodeType===9?n.body:n.nodeName==="HTML"?n.ownerDocument.body:n).insertBefore(e,o):(o=n.nodeType===9?n.body:n.nodeName==="HTML"?n.ownerDocument.body:n,o.appendChild(e),n=n._reactRootContainer,n!=null||o.onclick!==null||(o.onclick=fr));else if(s!==4&&(s===27&&Ut(e.type)&&(n=e.stateNode,o=null),e=e.child,e!==null))for(rl(e,o,n),e=e.sibling;e!==null;)rl(e,o,n),e=e.sibling}function cr(e,o,n){var s=e.tag;if(s===5||s===6)e=e.stateNode,o?n.insertBefore(e,o):n.appendChild(e);else if(s!==4&&(s===27&&Ut(e.type)&&(n=e.stateNode),e=e.child,e!==null))for(cr(e,o,n),e=e.sibling;e!==null;)cr(e,o,n),e=e.sibling}function RA(e){var o=e.stateNode,n=e.memoizedProps;try{for(var s=e.type,h=o.attributes;h.length;)o.removeAttributeNode(h[0]);T0(o,s,n),o[r2]=e,o[h2]=n}catch(d){e0(e,e.return,d)}}var mt=!1,b0=!1,sl=!1,TA=typeof WeakSet=="function"?WeakSet:Set,w0=null;function Fy(e,o){if(e=e.containerInfo,Rl=wr,e=UF(e),ic(e)){if("selectionStart"in e)var n={start:e.selectionStart,end:e.selectionEnd};else e:{n=(n=e.ownerDocument)&&n.defaultView||window;var s=n.getSelection&&n.getSelection();if(s&&s.rangeCount!==0){n=s.anchorNode;var h=s.anchorOffset,d=s.focusNode;s=s.focusOffset;try{n.nodeType,d.nodeType}catch{n=null;break e}var k=0,E=-1,L=-1,G=0,e2=0,i2=e,K=null;t:for(;;){for(var Z;i2!==n||h!==0&&i2.nodeType!==3||(E=k+h),i2!==d||s!==0&&i2.nodeType!==3||(L=k+s),i2.nodeType===3&&(k+=i2.nodeValue.length),(Z=i2.firstChild)!==null;)K=i2,i2=Z;for(;;){if(i2===e)break t;if(K===n&&++G===h&&(E=k),K===d&&++e2===s&&(L=k),(Z=i2.nextSibling)!==null)break;i2=K,K=i2.parentNode}i2=Z}n=E===-1||L===-1?null:{start:E,end:L}}else n=null}n=n||{start:0,end:0}}else n=null;for(Tl={focusedElem:e,selectionRange:n},wr=!1,w0=o;w0!==null;)if(o=w0,e=o.child,(o.subtreeFlags&1024)!==0&&e!==null)e.return=o,w0=e;else for(;w0!==null;){switch(o=w0,d=o.alternate,e=o.flags,o.tag){case 0:break;case 11:case 15:break;case 1:if((e&1024)!==0&&d!==null){e=void 0,n=o,h=d.memoizedProps,d=d.memoizedState,s=n.stateNode;try{var S2=ko(n.type,h,n.elementType===n.type);e=s.getSnapshotBeforeUpdate(S2,d),s.__reactInternalSnapshotBeforeUpdate=e}catch(w2){e0(n,n.return,w2)}}break;case 3:if((e&1024)!==0){if(e=o.stateNode.containerInfo,n=e.nodeType,n===9)Ml(e);else if(n===1)switch(e.nodeName){case"HEAD":case"HTML":case"BODY":Ml(e);break;default:e.textContent=""}}break;case 5:case 26:case 27:case 6:case 4:case 17:break;default:if((e&1024)!==0)throw Error(r(163))}if(e=o.sibling,e!==null){e.return=o.return,w0=e;break}w0=o.return}}function PA(e,o,n){var s=n.flags;switch(n.tag){case 0:case 11:case 15:Nt(e,n),s&4&&Bn(5,n);break;case 1:if(Nt(e,n),s&4)if(e=n.stateNode,o===null)try{e.componentDidMount()}catch(k){e0(n,n.return,k)}else{var h=ko(n.type,o.memoizedProps);o=o.memoizedState;try{e.componentDidUpdate(h,o,e.__reactInternalSnapshotBeforeUpdate)}catch(k){e0(n,n.return,k)}}s&64&&_A(n),s&512&&kn(n,n.return);break;case 3:if(Nt(e,n),s&64&&(e=n.updateQueue,e!==null)){if(o=null,n.child!==null)switch(n.child.tag){case 27:case 5:o=n.child.stateNode;break;case 1:o=n.child.stateNode}try{Ad(e,o)}catch(k){e0(n,n.return,k)}}break;case 27:o===null&&s&4&&RA(n);case 26:case 5:Nt(e,n),o===null&&s&4&&xA(n),s&512&&kn(n,n.return);break;case 12:Nt(e,n);break;case 13:Nt(e,n),s&4&&NA(e,n),s&64&&(e=n.memoizedState,e!==null&&(e=e.dehydrated,e!==null&&(n=Cy.bind(null,n),zy(e,n))));break;case 22:if(s=n.memoizedState!==null||mt,!s){o=o!==null&&o.memoizedState!==null||b0,h=mt;var d=b0;mt=s,(b0=o)&&!d?It(e,n,(n.subtreeFlags&8772)!==0):Nt(e,n),mt=h,b0=d}break;case 30:break;default:Nt(e,n)}}function LA(e){var o=e.alternate;o!==null&&(e.alternate=null,LA(o)),e.child=null,e.deletions=null,e.sibling=null,e.tag===5&&(o=e.stateNode,o!==null&&y2(o)),e.stateNode=null,e.return=null,e.dependencies=null,e.memoizedProps=null,e.memoizedState=null,e.pendingProps=null,e.stateNode=null,e.updateQueue=null}var r0=null,Z0=!1;function gt(e,o,n){for(n=n.child;n!==null;)MA(e,o,n),n=n.sibling}function MA(e,o,n){if(s0&&typeof s0.onCommitFiberUnmount=="function")try{s0.onCommitFiberUnmount(q0,n)}catch{}switch(n.tag){case 26:b0||Ge(n,o),gt(e,o,n),n.memoizedState?n.memoizedState.count--:n.stateNode&&(n=n.stateNode,n.parentNode.removeChild(n));break;case 27:b0||Ge(n,o);var s=r0,h=Z0;Ut(n.type)&&(r0=n.stateNode,Z0=!1),gt(e,o,n),Pn(n.stateNode),r0=s,Z0=h;break;case 5:b0||Ge(n,o);case 6:if(s=r0,h=Z0,r0=null,gt(e,o,n),r0=s,Z0=h,r0!==null)if(Z0)try{(r0.nodeType===9?r0.body:r0.nodeName==="HTML"?r0.ownerDocument.body:r0).removeChild(n.stateNode)}catch(d){e0(n,o,d)}else try{r0.removeChild(n.stateNode)}catch(d){e0(n,o,d)}break;case 18:r0!==null&&(Z0?(e=r0,Bp(e.nodeType===9?e.body:e.nodeName==="HTML"?e.ownerDocument.body:e,n.stateNode),jn(e)):Bp(r0,n.stateNode));break;case 4:s=r0,h=Z0,r0=n.stateNode.containerInfo,Z0=!0,gt(e,o,n),r0=s,Z0=h;break;case 0:case 11:case 14:case 15:b0||Mt(2,n,o),b0||Mt(4,n,o),gt(e,o,n);break;case 1:b0||(Ge(n,o),s=n.stateNode,typeof s.componentWillUnmount=="function"&&EA(n,o,s)),gt(e,o,n);break;case 21:gt(e,o,n);break;case 22:b0=(s=b0)||n.memoizedState!==null,gt(e,o,n),b0=s;break;default:gt(e,o,n)}}function NA(e,o){if(o.memoizedState===null&&(e=o.alternate,e!==null&&(e=e.memoizedState,e!==null&&(e=e.dehydrated,e!==null))))try{jn(e)}catch(n){e0(o,o.return,n)}}function dy(e){switch(e.tag){case 13:case 19:var o=e.stateNode;return o===null&&(o=e.stateNode=new TA),o;case 22:return e=e.stateNode,o=e._retryCache,o===null&&(o=e._retryCache=new TA),o;default:throw Error(r(435,e.tag))}}function cl(e,o){var n=dy(e);o.forEach(function(s){var h=vy.bind(null,e,s);n.has(s)||(n.add(s),s.then(h,h))})}function ee(e,o){var n=o.deletions;if(n!==null)for(var s=0;s<n.length;s++){var h=n[s],d=e,k=o,E=k;e:for(;E!==null;){switch(E.tag){case 27:if(Ut(E.type)){r0=E.stateNode,Z0=!1;break e}break;case 5:r0=E.stateNode,Z0=!1;break e;case 3:case 4:r0=E.stateNode.containerInfo,Z0=!0;break e}E=E.return}if(r0===null)throw Error(r(160));MA(d,k,h),r0=null,Z0=!1,d=h.alternate,d!==null&&(d.return=null),h.return=null}if(o.subtreeFlags&13878)for(o=o.child;o!==null;)IA(o,e),o=o.sibling}var Te=null;function IA(e,o){var n=e.alternate,s=e.flags;switch(e.tag){case 0:case 11:case 14:case 15:ee(o,e),te(e),s&4&&(Mt(3,e,e.return),Bn(3,e),Mt(5,e,e.return));break;case 1:ee(o,e),te(e),s&512&&(b0||n===null||Ge(n,n.return)),s&64&&mt&&(e=e.updateQueue,e!==null&&(s=e.callbacks,s!==null&&(n=e.shared.hiddenCallbacks,e.shared.hiddenCallbacks=n===null?s:n.concat(s))));break;case 26:var h=Te;if(ee(o,e),te(e),s&512&&(b0||n===null||Ge(n,n.return)),s&4){var d=n!==null?n.memoizedState:null;if(s=e.memoizedState,n===null)if(s===null)if(e.stateNode===null){e:{s=e.type,n=e.memoizedProps,h=h.ownerDocument||h;t:switch(s){case"title":d=h.getElementsByTagName("title")[0],(!d||d[B2]||d[r2]||d.namespaceURI==="http://www.w3.org/2000/svg"||d.hasAttribute("itemprop"))&&(d=h.createElement(s),h.head.insertBefore(d,h.querySelector("head > title"))),T0(d,s,n),d[r2]=e,T2(d),s=d;break e;case"link":var k=Rp("link","href",h).get(s+(n.href||""));if(k){for(var E=0;E<k.length;E++)if(d=k[E],d.getAttribute("href")===(n.href==null||n.href===""?null:n.href)&&d.getAttribute("rel")===(n.rel==null?null:n.rel)&&d.getAttribute("title")===(n.title==null?null:n.title)&&d.getAttribute("crossorigin")===(n.crossOrigin==null?null:n.crossOrigin)){k.splice(E,1);break t}}d=h.createElement(s),T0(d,s,n),h.head.appendChild(d);break;case"meta":if(k=Rp("meta","content",h).get(s+(n.content||""))){for(E=0;E<k.length;E++)if(d=k[E],d.getAttribute("content")===(n.content==null?null:""+n.content)&&d.getAttribute("name")===(n.name==null?null:n.name)&&d.getAttribute("property")===(n.property==null?null:n.property)&&d.getAttribute("http-equiv")===(n.httpEquiv==null?null:n.httpEquiv)&&d.getAttribute("charset")===(n.charSet==null?null:n.charSet)){k.splice(E,1);break t}}d=h.createElement(s),T0(d,s,n),h.head.appendChild(d);break;default:throw Error(r(468,s))}d[r2]=e,T2(d),s=d}e.stateNode=s}else Tp(h,e.type,e.stateNode);else e.stateNode=Sp(h,s,e.memoizedProps);else d!==s?(d===null?n.stateNode!==null&&(n=n.stateNode,n.parentNode.removeChild(n)):d.count--,s===null?Tp(h,e.type,e.stateNode):Sp(h,s,e.memoizedProps)):s===null&&e.stateNode!==null&&nl(e,e.memoizedProps,n.memoizedProps)}break;case 27:ee(o,e),te(e),s&512&&(b0||n===null||Ge(n,n.return)),n!==null&&s&4&&nl(e,e.memoizedProps,n.memoizedProps);break;case 5:if(ee(o,e),te(e),s&512&&(b0||n===null||Ge(n,n.return)),e.flags&32){h=e.stateNode;try{qo(h,"")}catch(Z){e0(e,e.return,Z)}}s&4&&e.stateNode!=null&&(h=e.memoizedProps,nl(e,h,n!==null?n.memoizedProps:h)),s&1024&&(sl=!0);break;case 6:if(ee(o,e),te(e),s&4){if(e.stateNode===null)throw Error(r(162));s=e.memoizedProps,n=e.stateNode;try{n.nodeValue=s}catch(Z){e0(e,e.return,Z)}}break;case 3:if(Br=null,h=Te,Te=Cr(o.containerInfo),ee(o,e),Te=h,te(e),s&4&&n!==null&&n.memoizedState.isDehydrated)try{jn(o.containerInfo)}catch(Z){e0(e,e.return,Z)}sl&&(sl=!1,HA(e));break;case 4:s=Te,Te=Cr(e.stateNode.containerInfo),ee(o,e),te(e),Te=s;break;case 12:ee(o,e),te(e);break;case 13:ee(o,e),te(e),e.child.flags&8192&&e.memoizedState!==null!=(n!==null&&n.memoizedState!==null)&&(Al=z0()),s&4&&(s=e.updateQueue,s!==null&&(e.updateQueue=null,cl(e,s)));break;case 22:h=e.memoizedState!==null;var L=n!==null&&n.memoizedState!==null,G=mt,e2=b0;if(mt=G||h,b0=e2||L,ee(o,e),b0=e2,mt=G,te(e),s&8192)e:for(o=e.stateNode,o._visibility=h?o._visibility&-2:o._visibility|1,h&&(n===null||L||mt||b0||Do(e)),n=null,o=e;;){if(o.tag===5||o.tag===26){if(n===null){L=n=o;try{if(d=L.stateNode,h)k=d.style,typeof k.setProperty=="function"?k.setProperty("display","none","important"):k.display="none";else{E=L.stateNode;var i2=L.memoizedProps.style,K=i2!=null&&i2.hasOwnProperty("display")?i2.display:null;E.style.display=K==null||typeof K=="boolean"?"":(""+K).trim()}}catch(Z){e0(L,L.return,Z)}}}else if(o.tag===6){if(n===null){L=o;try{L.stateNode.nodeValue=h?"":L.memoizedProps}catch(Z){e0(L,L.return,Z)}}}else if((o.tag!==22&&o.tag!==23||o.memoizedState===null||o===e)&&o.child!==null){o.child.return=o,o=o.child;continue}if(o===e)break e;for(;o.sibling===null;){if(o.return===null||o.return===e)break e;n===o&&(n=null),o=o.return}n===o&&(n=null),o.sibling.return=o.return,o=o.sibling}s&4&&(s=e.updateQueue,s!==null&&(n=s.retryQueue,n!==null&&(s.retryQueue=null,cl(e,n))));break;case 19:ee(o,e),te(e),s&4&&(s=e.updateQueue,s!==null&&(e.updateQueue=null,cl(e,s)));break;case 30:break;case 21:break;default:ee(o,e),te(e)}}function te(e){var o=e.flags;if(o&2){try{for(var n,s=e.return;s!==null;){if(SA(s)){n=s;break}s=s.return}if(n==null)throw Error(r(160));switch(n.tag){case 27:var h=n.stateNode,d=il(e);cr(e,d,h);break;case 5:var k=n.stateNode;n.flags&32&&(qo(k,""),n.flags&=-33);var E=il(e);cr(e,E,k);break;case 3:case 4:var L=n.stateNode.containerInfo,G=il(e);rl(e,G,L);break;default:throw Error(r(161))}}catch(e2){e0(e,e.return,e2)}e.flags&=-3}o&4096&&(e.flags&=-4097)}function HA(e){if(e.subtreeFlags&1024)for(e=e.child;e!==null;){var o=e;HA(o),o.tag===5&&o.flags&1024&&o.stateNode.reset(),e=e.sibling}}function Nt(e,o){if(o.subtreeFlags&8772)for(o=o.child;o!==null;)PA(e,o.alternate,o),o=o.sibling}function Do(e){for(e=e.child;e!==null;){var o=e;switch(o.tag){case 0:case 11:case 14:case 15:Mt(4,o,o.return),Do(o);break;case 1:Ge(o,o.return);var n=o.stateNode;typeof n.componentWillUnmount=="function"&&EA(o,o.return,n),Do(o);break;case 27:Pn(o.stateNode);case 26:case 5:Ge(o,o.return),Do(o);break;case 22:o.memoizedState===null&&Do(o);break;case 30:Do(o);break;default:Do(o)}e=e.sibling}}function It(e,o,n){for(n=n&&(o.subtreeFlags&8772)!==0,o=o.child;o!==null;){var s=o.alternate,h=e,d=o,k=d.flags;switch(d.tag){case 0:case 11:case 15:It(h,d,n),Bn(4,d);break;case 1:if(It(h,d,n),s=d,h=s.stateNode,typeof h.componentDidMount=="function")try{h.componentDidMount()}catch(G){e0(s,s.return,G)}if(s=d,h=s.updateQueue,h!==null){var E=s.stateNode;try{var L=h.shared.hiddenCallbacks;if(L!==null)for(h.shared.hiddenCallbacks=null,h=0;h<L.length;h++)dd(L[h],E)}catch(G){e0(s,s.return,G)}}n&&k&64&&_A(d),kn(d,d.return);break;case 27:RA(d);case 26:case 5:It(h,d,n),n&&s===null&&k&4&&xA(d),kn(d,d.return);break;case 12:It(h,d,n);break;case 13:It(h,d,n),n&&k&4&&NA(h,d);break;case 22:d.memoizedState===null&&It(h,d,n),kn(d,d.return);break;case 30:break;default:It(h,d,n)}o=o.sibling}}function ll(e,o){var n=null;e!==null&&e.memoizedState!==null&&e.memoizedState.cachePool!==null&&(n=e.memoizedState.cachePool.pool),e=null,o.memoizedState!==null&&o.memoizedState.cachePool!==null&&(e=o.memoizedState.cachePool.pool),e!==n&&(e!=null&&e.refCount++,n!=null&&ln(n))}function hl(e,o){e=null,o.alternate!==null&&(e=o.alternate.memoizedState.cache),o=o.memoizedState.cache,o!==e&&(o.refCount++,e!=null&&ln(e))}function qe(e,o,n,s){if(o.subtreeFlags&10256)for(o=o.child;o!==null;)zA(e,o,n,s),o=o.sibling}function zA(e,o,n,s){var h=o.flags;switch(o.tag){case 0:case 11:case 15:qe(e,o,n,s),h&2048&&Bn(9,o);break;case 1:qe(e,o,n,s);break;case 3:qe(e,o,n,s),h&2048&&(e=null,o.alternate!==null&&(e=o.alternate.memoizedState.cache),o=o.memoizedState.cache,o!==e&&(o.refCount++,e!=null&&ln(e)));break;case 12:if(h&2048){qe(e,o,n,s),e=o.stateNode;try{var d=o.memoizedProps,k=d.id,E=d.onPostCommit;typeof E=="function"&&E(k,o.alternate===null?"mount":"update",e.passiveEffectDuration,-0)}catch(L){e0(o,o.return,L)}}else qe(e,o,n,s);break;case 13:qe(e,o,n,s);break;case 23:break;case 22:d=o.stateNode,k=o.alternate,o.memoizedState!==null?d._visibility&2?qe(e,o,n,s):Dn(e,o):d._visibility&2?qe(e,o,n,s):(d._visibility|=2,ha(e,o,n,s,(o.subtreeFlags&10256)!==0)),h&2048&&ll(k,o);break;case 24:qe(e,o,n,s),h&2048&&hl(o.alternate,o);break;default:qe(e,o,n,s)}}function ha(e,o,n,s,h){for(h=h&&(o.subtreeFlags&10256)!==0,o=o.child;o!==null;){var d=e,k=o,E=n,L=s,G=k.flags;switch(k.tag){case 0:case 11:case 15:ha(d,k,E,L,h),Bn(8,k);break;case 23:break;case 22:var e2=k.stateNode;k.memoizedState!==null?e2._visibility&2?ha(d,k,E,L,h):Dn(d,k):(e2._visibility|=2,ha(d,k,E,L,h)),h&&G&2048&&ll(k.alternate,k);break;case 24:ha(d,k,E,L,h),h&&G&2048&&hl(k.alternate,k);break;default:ha(d,k,E,L,h)}o=o.sibling}}function Dn(e,o){if(o.subtreeFlags&10256)for(o=o.child;o!==null;){var n=e,s=o,h=s.flags;switch(s.tag){case 22:Dn(n,s),h&2048&&ll(s.alternate,s);break;case 24:Dn(n,s),h&2048&&hl(s.alternate,s);break;default:Dn(n,s)}o=o.sibling}}var wn=8192;function ua(e){if(e.subtreeFlags&wn)for(e=e.child;e!==null;)OA(e),e=e.sibling}function OA(e){switch(e.tag){case 26:ua(e),e.flags&wn&&e.memoizedState!==null&&$y(Te,e.memoizedState,e.memoizedProps);break;case 5:ua(e);break;case 3:case 4:var o=Te;Te=Cr(e.stateNode.containerInfo),ua(e),Te=o;break;case 22:e.memoizedState===null&&(o=e.alternate,o!==null&&o.memoizedState!==null?(o=wn,wn=16777216,ua(e),wn=o):ua(e));break;default:ua(e)}}function jA(e){var o=e.alternate;if(o!==null&&(e=o.child,e!==null)){o.child=null;do o=e.sibling,e.sibling=null,e=o;while(e!==null)}}function _n(e){var o=e.deletions;if((e.flags&16)!==0){if(o!==null)for(var n=0;n<o.length;n++){var s=o[n];w0=s,UA(s,e)}jA(e)}if(e.subtreeFlags&10256)for(e=e.child;e!==null;)VA(e),e=e.sibling}function VA(e){switch(e.tag){case 0:case 11:case 15:_n(e),e.flags&2048&&Mt(9,e,e.return);break;case 3:_n(e);break;case 12:_n(e);break;case 22:var o=e.stateNode;e.memoizedState!==null&&o._visibility&2&&(e.return===null||e.return.tag!==13)?(o._visibility&=-3,lr(e)):_n(e);break;default:_n(e)}}function lr(e){var o=e.deletions;if((e.flags&16)!==0){if(o!==null)for(var n=0;n<o.length;n++){var s=o[n];w0=s,UA(s,e)}jA(e)}for(e=e.child;e!==null;){switch(o=e,o.tag){case 0:case 11:case 15:Mt(8,o,o.return),lr(o);break;case 22:n=o.stateNode,n._visibility&2&&(n._visibility&=-3,lr(o));break;default:lr(o)}e=e.sibling}}function UA(e,o){for(;w0!==null;){var n=w0;switch(n.tag){case 0:case 11:case 15:Mt(8,n,o);break;case 23:case 22:if(n.memoizedState!==null&&n.memoizedState.cachePool!==null){var s=n.memoizedState.cachePool.pool;s!=null&&s.refCount++}break;case 24:ln(n.memoizedState.cache)}if(s=n.child,s!==null)s.return=n,w0=s;else e:for(n=e;w0!==null;){s=w0;var h=s.sibling,d=s.return;if(LA(s),s===n){w0=null;break e}if(h!==null){h.return=d,w0=h;break e}w0=d}}}var Ay={getCacheForType:function(e){var o=M0(B0),n=o.data.get(e);return n===void 0&&(n=e(),o.data.set(e,n)),n}},py=typeof WeakMap=="function"?WeakMap:Map,Z2=0,t0=null,O2=null,U2=0,Y2=0,oe=null,Ht=!1,Fa=!1,ul=!1,bt=0,A0=0,zt=0,wo=0,Fl=0,fe=0,da=0,En=null,Y0=null,dl=!1,Al=0,hr=1/0,ur=null,Ot=null,R0=0,jt=null,Aa=null,pa=0,pl=0,ml=null,GA=null,xn=0,gl=null;function ae(){if((Z2&2)!==0&&U2!==0)return U2&-U2;if(I.T!==null){var e=oa;return e!==0?e:kl()}return M()}function qA(){fe===0&&(fe=(U2&536870912)===0||W2?jo():536870912);var e=be.current;return e!==null&&(e.flags|=32),fe}function ne(e,o,n){(e===t0&&(Y2===2||Y2===9)||e.cancelPendingCommit!==null)&&(ma(e,0),Vt(e,U2,fe,!1)),so(e,n),((Z2&2)===0||e!==t0)&&(e===t0&&((Z2&2)===0&&(wo|=n),A0===4&&Vt(e,U2,fe,!1)),We(e))}function WA(e,o,n){if((Z2&6)!==0)throw Error(r(327));var s=!n&&(o&124)===0&&(o&e.expiredLanes)===0||Oe(e,o),h=s?by(e,o):yl(e,o,!0),d=s;do{if(h===0){Fa&&!s&&Vt(e,o,0,!1);break}else{if(n=e.current.alternate,d&&!my(n)){h=yl(e,o,!1),d=!1;continue}if(h===2){if(d=o,e.errorRecoveryDisabledLanes&d)var k=0;else k=e.pendingLanes&-536870913,k=k!==0?k:k&536870912?536870912:0;if(k!==0){o=k;e:{var E=e;h=En;var L=E.current.memoizedState.isDehydrated;if(L&&(ma(E,k).flags|=256),k=yl(E,k,!1),k!==2){if(ul&&!L){E.errorRecoveryDisabledLanes|=d,wo|=d,h=4;break e}d=Y0,Y0=h,d!==null&&(Y0===null?Y0=d:Y0.push.apply(Y0,d))}h=k}if(d=!1,h!==2)continue}}if(h===1){ma(e,0),Vt(e,o,0,!0);break}e:{switch(s=e,d=h,d){case 0:case 1:throw Error(r(345));case 4:if((o&4194048)!==o)break;case 6:Vt(s,o,fe,!Ht);break e;case 2:Y0=null;break;case 3:case 5:break;default:throw Error(r(329))}if((o&62914560)===o&&(h=Al+300-z0(),10<h)){if(Vt(s,o,fe,!Ht),ro(s,0,!0)!==0)break e;s.timeoutHandle=Cp(KA.bind(null,s,n,Y0,ur,dl,o,fe,wo,da,Ht,d,2,-0,0),h);break e}KA(s,n,Y0,ur,dl,o,fe,wo,da,Ht,d,0,-0,0)}}break}while(!0);We(e)}function KA(e,o,n,s,h,d,k,E,L,G,e2,i2,K,Z){if(e.timeoutHandle=-1,i2=o.subtreeFlags,(i2&8192||(i2&16785408)===16785408)&&(Nn={stylesheets:null,count:0,unsuspend:Jy},OA(o),i2=Qy(),i2!==null)){e.cancelPendingCommit=i2(ep.bind(null,e,o,d,n,s,h,k,E,L,e2,1,K,Z)),Vt(e,d,k,!G);return}ep(e,o,d,n,s,h,k,E,L)}function my(e){for(var o=e;;){var n=o.tag;if((n===0||n===11||n===15)&&o.flags&16384&&(n=o.updateQueue,n!==null&&(n=n.stores,n!==null)))for(var s=0;s<n.length;s++){var h=n[s],d=h.getSnapshot;h=h.value;try{if(!$0(d(),h))return!1}catch{return!1}}if(n=o.child,o.subtreeFlags&16384&&n!==null)n.return=o,o=n;else{if(o===e)break;for(;o.sibling===null;){if(o.return===null||o.return===e)return!0;o=o.return}o.sibling.return=o.return,o=o.sibling}}return!0}function Vt(e,o,n,s){o&=~Fl,o&=~wo,e.suspendedLanes|=o,e.pingedLanes&=~o,s&&(e.warmLanes|=o),s=e.expirationTimes;for(var h=o;0<h;){var d=31-x0(h),k=1<<d;s[d]=-1,h&=~k}n!==0&&co(e,n,o)}function Fr(){return(Z2&6)===0?(Sn(0),!1):!0}function bl(){if(O2!==null){if(Y2===0)var e=O2.return;else e=O2,ht=yo=null,Mc(e),ca=null,yn=0,e=O2;for(;e!==null;)wA(e.alternate,e),e=e.return;O2=null}}function ma(e,o){var n=e.timeoutHandle;n!==-1&&(e.timeoutHandle=-1,Ly(n)),n=e.cancelPendingCommit,n!==null&&(e.cancelPendingCommit=null,n()),bl(),t0=e,O2=n=st(e.current,null),U2=o,Y2=0,oe=null,Ht=!1,Fa=Oe(e,o),ul=!1,da=fe=Fl=wo=zt=A0=0,Y0=En=null,dl=!1,(o&8)!==0&&(o|=o&32);var s=e.entangledLanes;if(s!==0)for(e=e.entanglements,s&=o;0<s;){var h=31-x0(s),d=1<<h;o|=e[h],s&=~d}return bt=o,Li(),n}function ZA(e,o){M2=null,I.H=Qi,o===un||o===Ui?(o=ud(),Y2=3):o===cd?(o=ud(),Y2=4):Y2=o===FA?8:o!==null&&typeof o=="object"&&typeof o.then=="function"?6:1,oe=o,O2===null&&(A0=1,nr(e,Ae(o,e.current)))}function YA(){var e=I.H;return I.H=Qi,e===null?Qi:e}function XA(){var e=I.A;return I.A=Ay,e}function fl(){A0=4,Ht||(U2&4194048)!==U2&&be.current!==null||(Fa=!0),(zt&134217727)===0&&(wo&134217727)===0||t0===null||Vt(t0,U2,fe,!1)}function yl(e,o,n){var s=Z2;Z2|=2;var h=YA(),d=XA();(t0!==e||U2!==o)&&(ur=null,ma(e,o)),o=!1;var k=A0;e:do try{if(Y2!==0&&O2!==null){var E=O2,L=oe;switch(Y2){case 8:bl(),k=6;break e;case 3:case 2:case 9:case 6:be.current===null&&(o=!0);var G=Y2;if(Y2=0,oe=null,ga(e,E,L,G),n&&Fa){k=0;break e}break;default:G=Y2,Y2=0,oe=null,ga(e,E,L,G)}}gy(),k=A0;break}catch(e2){ZA(e,e2)}while(!0);return o&&e.shellSuspendCounter++,ht=yo=null,Z2=s,I.H=h,I.A=d,O2===null&&(t0=null,U2=0,Li()),k}function gy(){for(;O2!==null;)JA(O2)}function by(e,o){var n=Z2;Z2|=2;var s=YA(),h=XA();t0!==e||U2!==o?(ur=null,hr=z0()+500,ma(e,o)):Fa=Oe(e,o);e:do try{if(Y2!==0&&O2!==null){o=O2;var d=oe;t:switch(Y2){case 1:Y2=0,oe=null,ga(e,o,d,1);break;case 2:case 9:if(ld(d)){Y2=0,oe=null,$A(o);break}o=function(){Y2!==2&&Y2!==9||t0!==e||(Y2=7),We(e)},d.then(o,o);break e;case 3:Y2=7;break e;case 4:Y2=5;break e;case 7:ld(d)?(Y2=0,oe=null,$A(o)):(Y2=0,oe=null,ga(e,o,d,7));break;case 5:var k=null;switch(O2.tag){case 26:k=O2.memoizedState;case 5:case 27:var E=O2;if(!k||Pp(k)){Y2=0,oe=null;var L=E.sibling;if(L!==null)O2=L;else{var G=E.return;G!==null?(O2=G,dr(G)):O2=null}break t}}Y2=0,oe=null,ga(e,o,d,5);break;case 6:Y2=0,oe=null,ga(e,o,d,6);break;case 8:bl(),A0=6;break e;default:throw Error(r(462))}}fy();break}catch(e2){ZA(e,e2)}while(!0);return ht=yo=null,I.H=s,I.A=h,Z2=n,O2!==null?0:(t0=null,U2=0,Li(),A0)}function fy(){for(;O2!==null&&!Ua();)JA(O2)}function JA(e){var o=kA(e.alternate,e,bt);e.memoizedProps=e.pendingProps,o===null?dr(e):O2=o}function $A(e){var o=e,n=o.alternate;switch(o.tag){case 15:case 0:o=bA(n,o,o.pendingProps,o.type,void 0,U2);break;case 11:o=bA(n,o,o.pendingProps,o.type.render,o.ref,U2);break;case 5:Mc(o);default:wA(n,o),o=O2=QF(o,bt),o=kA(n,o,bt)}e.memoizedProps=e.pendingProps,o===null?dr(e):O2=o}function ga(e,o,n,s){ht=yo=null,Mc(o),ca=null,yn=0;var h=o.return;try{if(cy(e,h,o,n,U2)){A0=1,nr(e,Ae(n,e.current)),O2=null;return}}catch(d){if(h!==null)throw O2=h,d;A0=1,nr(e,Ae(n,e.current)),O2=null;return}o.flags&32768?(W2||s===1?e=!0:Fa||(U2&536870912)!==0?e=!1:(Ht=e=!0,(s===2||s===9||s===3||s===6)&&(s=be.current,s!==null&&s.tag===13&&(s.flags|=16384))),QA(o,e)):dr(o)}function dr(e){var o=e;do{if((o.flags&32768)!==0){QA(o,Ht);return}e=o.return;var n=hy(o.alternate,o,bt);if(n!==null){O2=n;return}if(o=o.sibling,o!==null){O2=o;return}O2=o=e}while(o!==null);A0===0&&(A0=5)}function QA(e,o){do{var n=uy(e.alternate,e);if(n!==null){n.flags&=32767,O2=n;return}if(n=e.return,n!==null&&(n.flags|=32768,n.subtreeFlags=0,n.deletions=null),!o&&(e=e.sibling,e!==null)){O2=e;return}O2=e=n}while(e!==null);A0=6,O2=null}function ep(e,o,n,s,h,d,k,E,L){e.cancelPendingCommit=null;do Ar();while(R0!==0);if((Z2&6)!==0)throw Error(r(327));if(o!==null){if(o===e.current)throw Error(r(177));if(d=o.lanes|o.childLanes,d|=hc,vi(e,n,d,k,E,L),e===t0&&(O2=t0=null,U2=0),Aa=o,jt=e,pa=n,pl=d,ml=h,GA=s,(o.subtreeFlags&10256)!==0||(o.flags&10256)!==0?(e.callbackNode=null,e.callbackPriority=0,By(Oo,function(){return ip(),null})):(e.callbackNode=null,e.callbackPriority=0),s=(o.flags&13878)!==0,(o.subtreeFlags&13878)!==0||s){s=I.T,I.T=null,h=q.p,q.p=2,k=Z2,Z2|=4;try{Fy(e,o,n)}finally{Z2=k,q.p=h,I.T=s}}R0=1,tp(),op(),ap()}}function tp(){if(R0===1){R0=0;var e=jt,o=Aa,n=(o.flags&13878)!==0;if((o.subtreeFlags&13878)!==0||n){n=I.T,I.T=null;var s=q.p;q.p=2;var h=Z2;Z2|=4;try{IA(o,e);var d=Tl,k=UF(e.containerInfo),E=d.focusedElem,L=d.selectionRange;if(k!==E&&E&&E.ownerDocument&&VF(E.ownerDocument.documentElement,E)){if(L!==null&&ic(E)){var G=L.start,e2=L.end;if(e2===void 0&&(e2=G),"selectionStart"in E)E.selectionStart=G,E.selectionEnd=Math.min(e2,E.value.length);else{var i2=E.ownerDocument||document,K=i2&&i2.defaultView||window;if(K.getSelection){var Z=K.getSelection(),S2=E.textContent.length,w2=Math.min(L.start,S2),Q2=L.end===void 0?w2:Math.min(L.end,S2);!Z.extend&&w2>Q2&&(k=Q2,Q2=w2,w2=k);var z=jF(E,w2),H=jF(E,Q2);if(z&&H&&(Z.rangeCount!==1||Z.anchorNode!==z.node||Z.anchorOffset!==z.offset||Z.focusNode!==H.node||Z.focusOffset!==H.offset)){var V=i2.createRange();V.setStart(z.node,z.offset),Z.removeAllRanges(),w2>Q2?(Z.addRange(V),Z.extend(H.node,H.offset)):(V.setEnd(H.node,H.offset),Z.addRange(V))}}}}for(i2=[],Z=E;Z=Z.parentNode;)Z.nodeType===1&&i2.push({element:Z,left:Z.scrollLeft,top:Z.scrollTop});for(typeof E.focus=="function"&&E.focus(),E=0;E<i2.length;E++){var t2=i2[E];t2.element.scrollLeft=t2.left,t2.element.scrollTop=t2.top}}wr=!!Rl,Tl=Rl=null}finally{Z2=h,q.p=s,I.T=n}}e.current=o,R0=2}}function op(){if(R0===2){R0=0;var e=jt,o=Aa,n=(o.flags&8772)!==0;if((o.subtreeFlags&8772)!==0||n){n=I.T,I.T=null;var s=q.p;q.p=2;var h=Z2;Z2|=4;try{PA(e,o.alternate,o)}finally{Z2=h,q.p=s,I.T=n}}R0=3}}function ap(){if(R0===4||R0===3){R0=0,Ga();var e=jt,o=Aa,n=pa,s=GA;(o.subtreeFlags&10256)!==0||(o.flags&10256)!==0?R0=5:(R0=0,Aa=jt=null,np(e,e.pendingLanes));var h=e.pendingLanes;if(h===0&&(Ot=null),Za(n),o=o.stateNode,s0&&typeof s0.onCommitFiberRoot=="function")try{s0.onCommitFiberRoot(q0,o,void 0,(o.current.flags&128)===128)}catch{}if(s!==null){o=I.T,h=q.p,q.p=2,I.T=null;try{for(var d=e.onRecoverableError,k=0;k<s.length;k++){var E=s[k];d(E.value,{componentStack:E.stack})}}finally{I.T=o,q.p=h}}(pa&3)!==0&&Ar(),We(e),h=e.pendingLanes,(n&4194090)!==0&&(h&42)!==0?e===gl?xn++:(xn=0,gl=e):xn=0,Sn(0)}}function np(e,o){(e.pooledCacheLanes&=o)===0&&(o=e.pooledCache,o!=null&&(e.pooledCache=null,ln(o)))}function Ar(e){return tp(),op(),ap(),ip()}function ip(){if(R0!==5)return!1;var e=jt,o=pl;pl=0;var n=Za(pa),s=I.T,h=q.p;try{q.p=32>n?32:n,I.T=null,n=ml,ml=null;var d=jt,k=pa;if(R0=0,Aa=jt=null,pa=0,(Z2&6)!==0)throw Error(r(331));var E=Z2;if(Z2|=4,VA(d.current),zA(d,d.current,k,n),Z2=E,Sn(0,!1),s0&&typeof s0.onPostCommitFiberRoot=="function")try{s0.onPostCommitFiberRoot(q0,d)}catch{}return!0}finally{q.p=h,I.T=s,np(e,o)}}function rp(e,o,n){o=Ae(n,o),o=Yc(e.stateNode,o,2),e=Rt(e,o,2),e!==null&&(so(e,2),We(e))}function e0(e,o,n){if(e.tag===3)rp(e,e,n);else for(;o!==null;){if(o.tag===3){rp(o,e,n);break}else if(o.tag===1){var s=o.stateNode;if(typeof o.type.getDerivedStateFromError=="function"||typeof s.componentDidCatch=="function"&&(Ot===null||!Ot.has(s))){e=Ae(n,e),n=hA(2),s=Rt(o,n,2),s!==null&&(uA(n,s,o,e),so(s,2),We(s));break}}o=o.return}}function Cl(e,o,n){var s=e.pingCache;if(s===null){s=e.pingCache=new py;var h=new Set;s.set(o,h)}else h=s.get(o),h===void 0&&(h=new Set,s.set(o,h));h.has(n)||(ul=!0,h.add(n),e=yy.bind(null,e,o,n),o.then(e,e))}function yy(e,o,n){var s=e.pingCache;s!==null&&s.delete(o),e.pingedLanes|=e.suspendedLanes&n,e.warmLanes&=~n,t0===e&&(U2&n)===n&&(A0===4||A0===3&&(U2&62914560)===U2&&300>z0()-Al?(Z2&2)===0&&ma(e,0):Fl|=n,da===U2&&(da=0)),We(e)}function sp(e,o){o===0&&(o=Ci()),e=$o(e,o),e!==null&&(so(e,o),We(e))}function Cy(e){var o=e.memoizedState,n=0;o!==null&&(n=o.retryLane),sp(e,n)}function vy(e,o){var n=0;switch(e.tag){case 13:var s=e.stateNode,h=e.memoizedState;h!==null&&(n=h.retryLane);break;case 19:s=e.stateNode;break;case 22:s=e.stateNode._retryCache;break;default:throw Error(r(314))}s!==null&&s.delete(o),sp(e,n)}function By(e,o){return xe(e,o)}var pr=null,ba=null,vl=!1,mr=!1,Bl=!1,_o=0;function We(e){e!==ba&&e.next===null&&(ba===null?pr=ba=e:ba=ba.next=e),mr=!0,vl||(vl=!0,Dy())}function Sn(e,o){if(!Bl&&mr){Bl=!0;do for(var n=!1,s=pr;s!==null;){if(e!==0){var h=s.pendingLanes;if(h===0)var d=0;else{var k=s.suspendedLanes,E=s.pingedLanes;d=(1<<31-x0(42|e)+1)-1,d&=h&~(k&~E),d=d&201326741?d&201326741|1:d?d|2:0}d!==0&&(n=!0,up(s,d))}else d=U2,d=ro(s,s===t0?d:0,s.cancelPendingCommit!==null||s.timeoutHandle!==-1),(d&3)===0||Oe(s,d)||(n=!0,up(s,d));s=s.next}while(n);Bl=!1}}function ky(){cp()}function cp(){mr=vl=!1;var e=0;_o!==0&&(Py()&&(e=_o),_o=0);for(var o=z0(),n=null,s=pr;s!==null;){var h=s.next,d=lp(s,o);d===0?(s.next=null,n===null?pr=h:n.next=h,h===null&&(ba=n)):(n=s,(e!==0||(d&3)!==0)&&(mr=!0)),s=h}Sn(e)}function lp(e,o){for(var n=e.suspendedLanes,s=e.pingedLanes,h=e.expirationTimes,d=e.pendingLanes&-62914561;0<d;){var k=31-x0(d),E=1<<k,L=h[k];L===-1?((E&n)===0||(E&s)!==0)&&(h[k]=yi(E,o)):L<=o&&(e.expiredLanes|=E),d&=~E}if(o=t0,n=U2,n=ro(e,e===o?n:0,e.cancelPendingCommit!==null||e.timeoutHandle!==-1),s=e.callbackNode,n===0||e===o&&(Y2===2||Y2===9)||e.cancelPendingCommit!==null)return s!==null&&s!==null&&G0(s),e.callbackNode=null,e.callbackPriority=0;if((n&3)===0||Oe(e,n)){if(o=n&-n,o===e.callbackPriority)return o;switch(s!==null&&G0(s),Za(n)){case 2:case 8:n=gi;break;case 32:n=Oo;break;case 268435456:n=kt;break;default:n=Oo}return s=hp.bind(null,e),n=xe(n,s),e.callbackPriority=o,e.callbackNode=n,o}return s!==null&&s!==null&&G0(s),e.callbackPriority=2,e.callbackNode=null,2}function hp(e,o){if(R0!==0&&R0!==5)return e.callbackNode=null,e.callbackPriority=0,null;var n=e.callbackNode;if(Ar()&&e.callbackNode!==n)return null;var s=U2;return s=ro(e,e===t0?s:0,e.cancelPendingCommit!==null||e.timeoutHandle!==-1),s===0?null:(WA(e,s,o),lp(e,z0()),e.callbackNode!=null&&e.callbackNode===n?hp.bind(null,e):null)}function up(e,o){if(Ar())return null;WA(e,o,!0)}function Dy(){My(function(){(Z2&6)!==0?xe(et,ky):cp()})}function kl(){return _o===0&&(_o=jo()),_o}function Fp(e){return e==null||typeof e=="symbol"||typeof e=="boolean"?null:typeof e=="function"?e:_i(""+e)}function dp(e,o){var n=o.ownerDocument.createElement("input");return n.name=o.name,n.value=o.value,e.id&&n.setAttribute("form",e.id),o.parentNode.insertBefore(n,o),e=new FormData(e),n.parentNode.removeChild(n),e}function wy(e,o,n,s,h){if(o==="submit"&&n&&n.stateNode===h){var d=Fp((h[h2]||null).action),k=s.submitter;k&&(o=(o=k[h2]||null)?Fp(o.formAction):k.getAttribute("formAction"),o!==null&&(d=o,k=null));var E=new Ri("action","action",null,s,h);e.push({event:E,listeners:[{instance:null,listener:function(){if(s.defaultPrevented){if(_o!==0){var L=k?dp(h,k):new FormData(h);Gc(n,{pending:!0,data:L,method:h.method,action:d},null,L)}}else typeof d=="function"&&(E.preventDefault(),L=k?dp(h,k):new FormData(h),Gc(n,{pending:!0,data:L,method:h.method,action:d},d,L))},currentTarget:h}]})}}for(var Dl=0;Dl<lc.length;Dl++){var wl=lc[Dl],_y=wl.toLowerCase(),Ey=wl[0].toUpperCase()+wl.slice(1);Re(_y,"on"+Ey)}Re(WF,"onAnimationEnd"),Re(KF,"onAnimationIteration"),Re(ZF,"onAnimationStart"),Re("dblclick","onDoubleClick"),Re("focusin","onFocus"),Re("focusout","onBlur"),Re(q6,"onTransitionRun"),Re(W6,"onTransitionStart"),Re(K6,"onTransitionCancel"),Re(YF,"onTransitionEnd"),O0("onMouseEnter",["mouseout","mouseover"]),O0("onMouseLeave",["mouseout","mouseover"]),O0("onPointerEnter",["pointerout","pointerover"]),O0("onPointerLeave",["pointerout","pointerover"]),J0("onChange","change click focusin focusout input keydown keyup selectionchange".split(" ")),J0("onSelect","focusout contextmenu dragend focusin keydown keyup mousedown mouseup selectionchange".split(" ")),J0("onBeforeInput",["compositionend","keypress","textInput","paste"]),J0("onCompositionEnd","compositionend focusout keydown keypress keyup mousedown".split(" ")),J0("onCompositionStart","compositionstart focusout keydown keypress keyup mousedown".split(" ")),J0("onCompositionUpdate","compositionupdate focusout keydown keypress keyup mousedown".split(" "));var Rn="abort canplay canplaythrough durationchange emptied encrypted ended error loadeddata loadedmetadata loadstart pause play playing progress ratechange resize seeked seeking stalled suspend timeupdate volumechange waiting".split(" "),xy=new Set("beforetoggle cancel close invalid load scroll scrollend toggle".split(" ").concat(Rn));function Ap(e,o){o=(o&4)!==0;for(var n=0;n<e.length;n++){var s=e[n],h=s.event;s=s.listeners;e:{var d=void 0;if(o)for(var k=s.length-1;0<=k;k--){var E=s[k],L=E.instance,G=E.currentTarget;if(E=E.listener,L!==d&&h.isPropagationStopped())break e;d=E,h.currentTarget=G;try{d(h)}catch(e2){ar(e2)}h.currentTarget=null,d=L}else for(k=0;k<s.length;k++){if(E=s[k],L=E.instance,G=E.currentTarget,E=E.listener,L!==d&&h.isPropagationStopped())break e;d=E,h.currentTarget=G;try{d(h)}catch(e2){ar(e2)}h.currentTarget=null,d=L}}}}function j2(e,o){var n=o[f2];n===void 0&&(n=o[f2]=new Set);var s=e+"__bubble";n.has(s)||(pp(o,e,2,!1),n.add(s))}function _l(e,o,n){var s=0;o&&(s|=4),pp(n,e,s,o)}var gr="_reactListening"+Math.random().toString(36).slice(2);function El(e){if(!e[gr]){e[gr]=!0,X2.forEach(function(n){n!=="selectionchange"&&(xy.has(n)||_l(n,!1,e),_l(n,!0,e))});var o=e.nodeType===9?e:e.ownerDocument;o===null||o[gr]||(o[gr]=!0,_l("selectionchange",!1,o))}}function pp(e,o,n,s){switch(zp(o)){case 2:var h=oC;break;case 8:h=aC;break;default:h=Vl}n=h.bind(null,o,n,e),h=void 0,!Xs||o!=="touchstart"&&o!=="touchmove"&&o!=="wheel"||(h=!0),s?h!==void 0?e.addEventListener(o,n,{capture:!0,passive:h}):e.addEventListener(o,n,!0):h!==void 0?e.addEventListener(o,n,{passive:h}):e.addEventListener(o,n,!1)}function xl(e,o,n,s,h){var d=s;if((o&1)===0&&(o&2)===0&&s!==null)e:for(;;){if(s===null)return;var k=s.tag;if(k===3||k===4){var E=s.stateNode.containerInfo;if(E===h)break;if(k===4)for(k=s.return;k!==null;){var L=k.tag;if((L===3||L===4)&&k.stateNode.containerInfo===h)return;k=k.return}for(;E!==null;){if(k=x2(E),k===null)return;if(L=k.tag,L===5||L===6||L===26||L===27){s=d=k;continue e}E=E.parentNode}}s=s.return}vF(function(){var G=d,e2=Zs(n),i2=[];e:{var K=XF.get(e);if(K!==void 0){var Z=Ri,S2=e;switch(e){case"keypress":if(xi(n)===0)break e;case"keydown":case"keyup":Z=B6;break;case"focusin":S2="focus",Z=ec;break;case"focusout":S2="blur",Z=ec;break;case"beforeblur":case"afterblur":Z=ec;break;case"click":if(n.button===2)break e;case"auxclick":case"dblclick":case"mousedown":case"mousemove":case"mouseup":case"mouseout":case"mouseover":case"contextmenu":Z=DF;break;case"drag":case"dragend":case"dragenter":case"dragexit":case"dragleave":case"dragover":case"dragstart":case"drop":Z=u6;break;case"touchcancel":case"touchend":case"touchmove":case"touchstart":Z=w6;break;case WF:case KF:case ZF:Z=A6;break;case YF:Z=E6;break;case"scroll":case"scrollend":Z=l6;break;case"wheel":Z=S6;break;case"copy":case"cut":case"paste":Z=m6;break;case"gotpointercapture":case"lostpointercapture":case"pointercancel":case"pointerdown":case"pointermove":case"pointerout":case"pointerover":case"pointerup":Z=_F;break;case"toggle":case"beforetoggle":Z=T6}var w2=(o&4)!==0,Q2=!w2&&(e==="scroll"||e==="scrollend"),z=w2?K!==null?K+"Capture":null:K;w2=[];for(var H=G,V;H!==null;){var t2=H;if(V=t2.stateNode,t2=t2.tag,t2!==5&&t2!==26&&t2!==27||V===null||z===null||(t2=Ya(H,z),t2!=null&&w2.push(Tn(H,t2,V))),Q2)break;H=H.return}0<w2.length&&(K=new Z(K,S2,null,n,e2),i2.push({event:K,listeners:w2}))}}if((o&7)===0){e:{if(K=e==="mouseover"||e==="pointerover",Z=e==="mouseout"||e==="pointerout",K&&n!==Ks&&(S2=n.relatedTarget||n.fromElement)&&(x2(S2)||S2[m2]))break e;if((Z||K)&&(K=e2.window===e2?e2:(K=e2.ownerDocument)?K.defaultView||K.parentWindow:window,Z?(S2=n.relatedTarget||n.toElement,Z=G,S2=S2?x2(S2):null,S2!==null&&(Q2=l(S2),w2=S2.tag,S2!==Q2||w2!==5&&w2!==27&&w2!==6)&&(S2=null)):(Z=null,S2=G),Z!==S2)){if(w2=DF,t2="onMouseLeave",z="onMouseEnter",H="mouse",(e==="pointerout"||e==="pointerover")&&(w2=_F,t2="onPointerLeave",z="onPointerEnter",H="pointer"),Q2=Z==null?K:u0(Z),V=S2==null?K:u0(S2),K=new w2(t2,H+"leave",Z,n,e2),K.target=Q2,K.relatedTarget=V,t2=null,x2(e2)===G&&(w2=new w2(z,H+"enter",S2,n,e2),w2.target=V,w2.relatedTarget=Q2,t2=w2),Q2=t2,Z&&S2)t:{for(w2=Z,z=S2,H=0,V=w2;V;V=fa(V))H++;for(V=0,t2=z;t2;t2=fa(t2))V++;for(;0<H-V;)w2=fa(w2),H--;for(;0<V-H;)z=fa(z),V--;for(;H--;){if(w2===z||z!==null&&w2===z.alternate)break t;w2=fa(w2),z=fa(z)}w2=null}else w2=null;Z!==null&&mp(i2,K,Z,w2,!1),S2!==null&&Q2!==null&&mp(i2,Q2,S2,w2,!0)}}e:{if(K=G?u0(G):window,Z=K.nodeName&&K.nodeName.toLowerCase(),Z==="select"||Z==="input"&&K.type==="file")var A2=MF;else if(PF(K))if(NF)A2=V6;else{A2=O6;var z2=z6}else Z=K.nodeName,!Z||Z.toLowerCase()!=="input"||K.type!=="checkbox"&&K.type!=="radio"?G&&Ws(G.elementType)&&(A2=MF):A2=j6;if(A2&&(A2=A2(e,G))){LF(i2,A2,n,e2);break e}z2&&z2(e,K,G),e==="focusout"&&G&&K.type==="number"&&G.memoizedProps.value!=null&&qs(K,"number",K.value)}switch(z2=G?u0(G):window,e){case"focusin":(PF(z2)||z2.contentEditable==="true")&&(Yo=z2,rc=G,an=null);break;case"focusout":an=rc=Yo=null;break;case"mousedown":sc=!0;break;case"contextmenu":case"mouseup":case"dragend":sc=!1,GF(i2,n,e2);break;case"selectionchange":if(G6)break;case"keydown":case"keyup":GF(i2,n,e2)}var C2;if(oc)e:{switch(e){case"compositionstart":var E2="onCompositionStart";break e;case"compositionend":E2="onCompositionEnd";break e;case"compositionupdate":E2="onCompositionUpdate";break e}E2=void 0}else Zo?RF(e,n)&&(E2="onCompositionEnd"):e==="keydown"&&n.keyCode===229&&(E2="onCompositionStart");E2&&(EF&&n.locale!=="ko"&&(Zo||E2!=="onCompositionStart"?E2==="onCompositionEnd"&&Zo&&(C2=BF()):(_t=e2,Js="value"in _t?_t.value:_t.textContent,Zo=!0)),z2=br(G,E2),0<z2.length&&(E2=new wF(E2,e,null,n,e2),i2.push({event:E2,listeners:z2}),C2?E2.data=C2:(C2=TF(n),C2!==null&&(E2.data=C2)))),(C2=L6?M6(e,n):N6(e,n))&&(E2=br(G,"onBeforeInput"),0<E2.length&&(z2=new wF("onBeforeInput","beforeinput",null,n,e2),i2.push({event:z2,listeners:E2}),z2.data=C2)),wy(i2,e,G,n,e2)}Ap(i2,o)})}function Tn(e,o,n){return{instance:e,listener:o,currentTarget:n}}function br(e,o){for(var n=o+"Capture",s=[];e!==null;){var h=e,d=h.stateNode;if(h=h.tag,h!==5&&h!==26&&h!==27||d===null||(h=Ya(e,n),h!=null&&s.unshift(Tn(e,h,d)),h=Ya(e,o),h!=null&&s.push(Tn(e,h,d))),e.tag===3)return s;e=e.return}return[]}function fa(e){if(e===null)return null;do e=e.return;while(e&&e.tag!==5&&e.tag!==27);return e||null}function mp(e,o,n,s,h){for(var d=o._reactName,k=[];n!==null&&n!==s;){var E=n,L=E.alternate,G=E.stateNode;if(E=E.tag,L!==null&&L===s)break;E!==5&&E!==26&&E!==27||G===null||(L=G,h?(G=Ya(n,d),G!=null&&k.unshift(Tn(n,G,L))):h||(G=Ya(n,d),G!=null&&k.push(Tn(n,G,L)))),n=n.return}k.length!==0&&e.push({event:o,listeners:k})}var Sy=/\r\n?/g,Ry=/\u0000|\uFFFD/g;function gp(e){return(typeof e=="string"?e:""+e).replace(Sy,`
`).replace(Ry,"")}function bp(e,o){return o=gp(o),gp(e)===o}function fr(){}function $2(e,o,n,s,h,d){switch(n){case"children":typeof s=="string"?o==="body"||o==="textarea"&&s===""||qo(e,s):(typeof s=="number"||typeof s=="bigint")&&o!=="body"&&qo(e,""+s);break;case"className":it(e,"class",s);break;case"tabIndex":it(e,"tabindex",s);break;case"dir":case"role":case"viewBox":case"width":case"height":it(e,n,s);break;case"style":yF(e,s,d);break;case"data":if(o!=="object"){it(e,"data",s);break}case"src":case"href":if(s===""&&(o!=="a"||n!=="href")){e.removeAttribute(n);break}if(s==null||typeof s=="function"||typeof s=="symbol"||typeof s=="boolean"){e.removeAttribute(n);break}s=_i(""+s),e.setAttribute(n,s);break;case"action":case"formAction":if(typeof s=="function"){e.setAttribute(n,"javascript:throw new Error('A React form was unexpectedly submitted. If you called form.submit() manually, consider using form.requestSubmit() instead. If you\\'re trying to use event.stopPropagation() in a submit event handler, consider also calling event.preventDefault().')");break}else typeof d=="function"&&(n==="formAction"?(o!=="input"&&$2(e,o,"name",h.name,h,null),$2(e,o,"formEncType",h.formEncType,h,null),$2(e,o,"formMethod",h.formMethod,h,null),$2(e,o,"formTarget",h.formTarget,h,null)):($2(e,o,"encType",h.encType,h,null),$2(e,o,"method",h.method,h,null),$2(e,o,"target",h.target,h,null)));if(s==null||typeof s=="symbol"||typeof s=="boolean"){e.removeAttribute(n);break}s=_i(""+s),e.setAttribute(n,s);break;case"onClick":s!=null&&(e.onclick=fr);break;case"onScroll":s!=null&&j2("scroll",e);break;case"onScrollEnd":s!=null&&j2("scrollend",e);break;case"dangerouslySetInnerHTML":if(s!=null){if(typeof s!="object"||!("__html"in s))throw Error(r(61));if(n=s.__html,n!=null){if(h.children!=null)throw Error(r(60));e.innerHTML=n}}break;case"multiple":e.multiple=s&&typeof s!="function"&&typeof s!="symbol";break;case"muted":e.muted=s&&typeof s!="function"&&typeof s!="symbol";break;case"suppressContentEditableWarning":case"suppressHydrationWarning":case"defaultValue":case"defaultChecked":case"innerHTML":case"ref":break;case"autoFocus":break;case"xlinkHref":if(s==null||typeof s=="function"||typeof s=="boolean"||typeof s=="symbol"){e.removeAttribute("xlink:href");break}n=_i(""+s),e.setAttributeNS("http://www.w3.org/1999/xlink","xlink:href",n);break;case"contentEditable":case"spellCheck":case"draggable":case"value":case"autoReverse":case"externalResourcesRequired":case"focusable":case"preserveAlpha":s!=null&&typeof s!="function"&&typeof s!="symbol"?e.setAttribute(n,""+s):e.removeAttribute(n);break;case"inert":case"allowFullScreen":case"async":case"autoPlay":case"controls":case"default":case"defer":case"disabled":case"disablePictureInPicture":case"disableRemotePlayback":case"formNoValidate":case"hidden":case"loop":case"noModule":case"noValidate":case"open":case"playsInline":case"readOnly":case"required":case"reversed":case"scoped":case"seamless":case"itemScope":s&&typeof s!="function"&&typeof s!="symbol"?e.setAttribute(n,""):e.removeAttribute(n);break;case"capture":case"download":s===!0?e.setAttribute(n,""):s!==!1&&s!=null&&typeof s!="function"&&typeof s!="symbol"?e.setAttribute(n,s):e.removeAttribute(n);break;case"cols":case"rows":case"size":case"span":s!=null&&typeof s!="function"&&typeof s!="symbol"&&!isNaN(s)&&1<=s?e.setAttribute(n,s):e.removeAttribute(n);break;case"rowSpan":case"start":s==null||typeof s=="function"||typeof s=="symbol"||isNaN(s)?e.removeAttribute(n):e.setAttribute(n,s);break;case"popover":j2("beforetoggle",e),j2("toggle",e),nt(e,"popover",s);break;case"xlinkActuate":H2(e,"http://www.w3.org/1999/xlink","xlink:actuate",s);break;case"xlinkArcrole":H2(e,"http://www.w3.org/1999/xlink","xlink:arcrole",s);break;case"xlinkRole":H2(e,"http://www.w3.org/1999/xlink","xlink:role",s);break;case"xlinkShow":H2(e,"http://www.w3.org/1999/xlink","xlink:show",s);break;case"xlinkTitle":H2(e,"http://www.w3.org/1999/xlink","xlink:title",s);break;case"xlinkType":H2(e,"http://www.w3.org/1999/xlink","xlink:type",s);break;case"xmlBase":H2(e,"http://www.w3.org/XML/1998/namespace","xml:base",s);break;case"xmlLang":H2(e,"http://www.w3.org/XML/1998/namespace","xml:lang",s);break;case"xmlSpace":H2(e,"http://www.w3.org/XML/1998/namespace","xml:space",s);break;case"is":nt(e,"is",s);break;case"innerText":case"textContent":break;default:(!(2<n.length)||n[0]!=="o"&&n[0]!=="O"||n[1]!=="n"&&n[1]!=="N")&&(n=s6.get(n)||n,nt(e,n,s))}}function Sl(e,o,n,s,h,d){switch(n){case"style":yF(e,s,d);break;case"dangerouslySetInnerHTML":if(s!=null){if(typeof s!="object"||!("__html"in s))throw Error(r(61));if(n=s.__html,n!=null){if(h.children!=null)throw Error(r(60));e.innerHTML=n}}break;case"children":typeof s=="string"?qo(e,s):(typeof s=="number"||typeof s=="bigint")&&qo(e,""+s);break;case"onScroll":s!=null&&j2("scroll",e);break;case"onScrollEnd":s!=null&&j2("scrollend",e);break;case"onClick":s!=null&&(e.onclick=fr);break;case"suppressContentEditableWarning":case"suppressHydrationWarning":case"innerHTML":case"ref":break;case"innerText":case"textContent":break;default:if(!je.hasOwnProperty(n))e:{if(n[0]==="o"&&n[1]==="n"&&(h=n.endsWith("Capture"),o=n.slice(2,h?n.length-7:void 0),d=e[h2]||null,d=d!=null?d[n]:null,typeof d=="function"&&e.removeEventListener(o,d,h),typeof s=="function")){typeof d!="function"&&d!==null&&(n in e?e[n]=null:e.hasAttribute(n)&&e.removeAttribute(n)),e.addEventListener(o,s,h);break e}n in e?e[n]=s:s===!0?e.setAttribute(n,""):nt(e,n,s)}}}function T0(e,o,n){switch(o){case"div":case"span":case"svg":case"path":case"a":case"g":case"p":case"li":break;case"img":j2("error",e),j2("load",e);var s=!1,h=!1,d;for(d in n)if(n.hasOwnProperty(d)){var k=n[d];if(k!=null)switch(d){case"src":s=!0;break;case"srcSet":h=!0;break;case"children":case"dangerouslySetInnerHTML":throw Error(r(137,o));default:$2(e,o,d,k,n,null)}}h&&$2(e,o,"srcSet",n.srcSet,n,null),s&&$2(e,o,"src",n.src,n,null);return;case"input":j2("invalid",e);var E=d=k=h=null,L=null,G=null;for(s in n)if(n.hasOwnProperty(s)){var e2=n[s];if(e2!=null)switch(s){case"name":h=e2;break;case"type":k=e2;break;case"checked":L=e2;break;case"defaultChecked":G=e2;break;case"value":d=e2;break;case"defaultValue":E=e2;break;case"children":case"dangerouslySetInnerHTML":if(e2!=null)throw Error(r(137,o));break;default:$2(e,o,s,e2,n,null)}}mF(e,d,E,L,G,k,h,!1),Di(e);return;case"select":j2("invalid",e),s=k=d=null;for(h in n)if(n.hasOwnProperty(h)&&(E=n[h],E!=null))switch(h){case"value":d=E;break;case"defaultValue":k=E;break;case"multiple":s=E;default:$2(e,o,h,E,n,null)}o=d,n=k,e.multiple=!!s,o!=null?Go(e,!!s,o,!1):n!=null&&Go(e,!!s,n,!0);return;case"textarea":j2("invalid",e),d=h=s=null;for(k in n)if(n.hasOwnProperty(k)&&(E=n[k],E!=null))switch(k){case"value":s=E;break;case"defaultValue":h=E;break;case"children":d=E;break;case"dangerouslySetInnerHTML":if(E!=null)throw Error(r(91));break;default:$2(e,o,k,E,n,null)}bF(e,s,h,d),Di(e);return;case"option":for(L in n)if(n.hasOwnProperty(L)&&(s=n[L],s!=null))switch(L){case"selected":e.selected=s&&typeof s!="function"&&typeof s!="symbol";break;default:$2(e,o,L,s,n,null)}return;case"dialog":j2("beforetoggle",e),j2("toggle",e),j2("cancel",e),j2("close",e);break;case"iframe":case"object":j2("load",e);break;case"video":case"audio":for(s=0;s<Rn.length;s++)j2(Rn[s],e);break;case"image":j2("error",e),j2("load",e);break;case"details":j2("toggle",e);break;case"embed":case"source":case"link":j2("error",e),j2("load",e);case"area":case"base":case"br":case"col":case"hr":case"keygen":case"meta":case"param":case"track":case"wbr":case"menuitem":for(G in n)if(n.hasOwnProperty(G)&&(s=n[G],s!=null))switch(G){case"children":case"dangerouslySetInnerHTML":throw Error(r(137,o));default:$2(e,o,G,s,n,null)}return;default:if(Ws(o)){for(e2 in n)n.hasOwnProperty(e2)&&(s=n[e2],s!==void 0&&Sl(e,o,e2,s,n,void 0));return}}for(E in n)n.hasOwnProperty(E)&&(s=n[E],s!=null&&$2(e,o,E,s,n,null))}function Ty(e,o,n,s){switch(o){case"div":case"span":case"svg":case"path":case"a":case"g":case"p":case"li":break;case"input":var h=null,d=null,k=null,E=null,L=null,G=null,e2=null;for(Z in n){var i2=n[Z];if(n.hasOwnProperty(Z)&&i2!=null)switch(Z){case"checked":break;case"value":break;case"defaultValue":L=i2;default:s.hasOwnProperty(Z)||$2(e,o,Z,null,s,i2)}}for(var K in s){var Z=s[K];if(i2=n[K],s.hasOwnProperty(K)&&(Z!=null||i2!=null))switch(K){case"type":d=Z;break;case"name":h=Z;break;case"checked":G=Z;break;case"defaultChecked":e2=Z;break;case"value":k=Z;break;case"defaultValue":E=Z;break;case"children":case"dangerouslySetInnerHTML":if(Z!=null)throw Error(r(137,o));break;default:Z!==i2&&$2(e,o,K,Z,s,i2)}}Gs(e,k,E,L,G,e2,d,h);return;case"select":Z=k=E=K=null;for(d in n)if(L=n[d],n.hasOwnProperty(d)&&L!=null)switch(d){case"value":break;case"multiple":Z=L;default:s.hasOwnProperty(d)||$2(e,o,d,null,s,L)}for(h in s)if(d=s[h],L=n[h],s.hasOwnProperty(h)&&(d!=null||L!=null))switch(h){case"value":K=d;break;case"defaultValue":E=d;break;case"multiple":k=d;default:d!==L&&$2(e,o,h,d,s,L)}o=E,n=k,s=Z,K!=null?Go(e,!!n,K,!1):!!s!=!!n&&(o!=null?Go(e,!!n,o,!0):Go(e,!!n,n?[]:"",!1));return;case"textarea":Z=K=null;for(E in n)if(h=n[E],n.hasOwnProperty(E)&&h!=null&&!s.hasOwnProperty(E))switch(E){case"value":break;case"children":break;default:$2(e,o,E,null,s,h)}for(k in s)if(h=s[k],d=n[k],s.hasOwnProperty(k)&&(h!=null||d!=null))switch(k){case"value":K=h;break;case"defaultValue":Z=h;break;case"children":break;case"dangerouslySetInnerHTML":if(h!=null)throw Error(r(91));break;default:h!==d&&$2(e,o,k,h,s,d)}gF(e,K,Z);return;case"option":for(var S2 in n)if(K=n[S2],n.hasOwnProperty(S2)&&K!=null&&!s.hasOwnProperty(S2))switch(S2){case"selected":e.selected=!1;break;default:$2(e,o,S2,null,s,K)}for(L in s)if(K=s[L],Z=n[L],s.hasOwnProperty(L)&&K!==Z&&(K!=null||Z!=null))switch(L){case"selected":e.selected=K&&typeof K!="function"&&typeof K!="symbol";break;default:$2(e,o,L,K,s,Z)}return;case"img":case"link":case"area":case"base":case"br":case"col":case"embed":case"hr":case"keygen":case"meta":case"param":case"source":case"track":case"wbr":case"menuitem":for(var w2 in n)K=n[w2],n.hasOwnProperty(w2)&&K!=null&&!s.hasOwnProperty(w2)&&$2(e,o,w2,null,s,K);for(G in s)if(K=s[G],Z=n[G],s.hasOwnProperty(G)&&K!==Z&&(K!=null||Z!=null))switch(G){case"children":case"dangerouslySetInnerHTML":if(K!=null)throw Error(r(137,o));break;default:$2(e,o,G,K,s,Z)}return;default:if(Ws(o)){for(var Q2 in n)K=n[Q2],n.hasOwnProperty(Q2)&&K!==void 0&&!s.hasOwnProperty(Q2)&&Sl(e,o,Q2,void 0,s,K);for(e2 in s)K=s[e2],Z=n[e2],!s.hasOwnProperty(e2)||K===Z||K===void 0&&Z===void 0||Sl(e,o,e2,K,s,Z);return}}for(var z in n)K=n[z],n.hasOwnProperty(z)&&K!=null&&!s.hasOwnProperty(z)&&$2(e,o,z,null,s,K);for(i2 in s)K=s[i2],Z=n[i2],!s.hasOwnProperty(i2)||K===Z||K==null&&Z==null||$2(e,o,i2,K,s,Z)}var Rl=null,Tl=null;function yr(e){return e.nodeType===9?e:e.ownerDocument}function fp(e){switch(e){case"http://www.w3.org/2000/svg":return 1;case"http://www.w3.org/1998/Math/MathML":return 2;default:return 0}}function yp(e,o){if(e===0)switch(o){case"svg":return 1;case"math":return 2;default:return 0}return e===1&&o==="foreignObject"?0:e}function Pl(e,o){return e==="textarea"||e==="noscript"||typeof o.children=="string"||typeof o.children=="number"||typeof o.children=="bigint"||typeof o.dangerouslySetInnerHTML=="object"&&o.dangerouslySetInnerHTML!==null&&o.dangerouslySetInnerHTML.__html!=null}var Ll=null;function Py(){var e=window.event;return e&&e.type==="popstate"?e===Ll?!1:(Ll=e,!0):(Ll=null,!1)}var Cp=typeof setTimeout=="function"?setTimeout:void 0,Ly=typeof clearTimeout=="function"?clearTimeout:void 0,vp=typeof Promise=="function"?Promise:void 0,My=typeof queueMicrotask=="function"?queueMicrotask:typeof vp<"u"?function(e){return vp.resolve(null).then(e).catch(Ny)}:Cp;function Ny(e){setTimeout(function(){throw e})}function Ut(e){return e==="head"}function Bp(e,o){var n=o,s=0,h=0;do{var d=n.nextSibling;if(e.removeChild(n),d&&d.nodeType===8)if(n=d.data,n==="/$"){if(0<s&&8>s){n=s;var k=e.ownerDocument;if(n&1&&Pn(k.documentElement),n&2&&Pn(k.body),n&4)for(n=k.head,Pn(n),k=n.firstChild;k;){var E=k.nextSibling,L=k.nodeName;k[B2]||L==="SCRIPT"||L==="STYLE"||L==="LINK"&&k.rel.toLowerCase()==="stylesheet"||n.removeChild(k),k=E}}if(h===0){e.removeChild(d),jn(o);return}h--}else n==="$"||n==="$?"||n==="$!"?h++:s=n.charCodeAt(0)-48;else s=0;n=d}while(n);jn(o)}function Ml(e){var o=e.firstChild;for(o&&o.nodeType===10&&(o=o.nextSibling);o;){var n=o;switch(o=o.nextSibling,n.nodeName){case"HTML":case"HEAD":case"BODY":Ml(n),y2(n);continue;case"SCRIPT":case"STYLE":continue;case"LINK":if(n.rel.toLowerCase()==="stylesheet")continue}e.removeChild(n)}}function Iy(e,o,n,s){for(;e.nodeType===1;){var h=n;if(e.nodeName.toLowerCase()!==o.toLowerCase()){if(!s&&(e.nodeName!=="INPUT"||e.type!=="hidden"))break}else if(s){if(!e[B2])switch(o){case"meta":if(!e.hasAttribute("itemprop"))break;return e;case"link":if(d=e.getAttribute("rel"),d==="stylesheet"&&e.hasAttribute("data-precedence"))break;if(d!==h.rel||e.getAttribute("href")!==(h.href==null||h.href===""?null:h.href)||e.getAttribute("crossorigin")!==(h.crossOrigin==null?null:h.crossOrigin)||e.getAttribute("title")!==(h.title==null?null:h.title))break;return e;case"style":if(e.hasAttribute("data-precedence"))break;return e;case"script":if(d=e.getAttribute("src"),(d!==(h.src==null?null:h.src)||e.getAttribute("type")!==(h.type==null?null:h.type)||e.getAttribute("crossorigin")!==(h.crossOrigin==null?null:h.crossOrigin))&&d&&e.hasAttribute("async")&&!e.hasAttribute("itemprop"))break;return e;default:return e}}else if(o==="input"&&e.type==="hidden"){var d=h.name==null?null:""+h.name;if(h.type==="hidden"&&e.getAttribute("name")===d)return e}else return e;if(e=Pe(e.nextSibling),e===null)break}return null}function Hy(e,o,n){if(o==="")return null;for(;e.nodeType!==3;)if((e.nodeType!==1||e.nodeName!=="INPUT"||e.type!=="hidden")&&!n||(e=Pe(e.nextSibling),e===null))return null;return e}function Nl(e){return e.data==="$!"||e.data==="$?"&&e.ownerDocument.readyState==="complete"}function zy(e,o){var n=e.ownerDocument;if(e.data!=="$?"||n.readyState==="complete")o();else{var s=function(){o(),n.removeEventListener("DOMContentLoaded",s)};n.addEventListener("DOMContentLoaded",s),e._reactRetry=s}}function Pe(e){for(;e!=null;e=e.nextSibling){var o=e.nodeType;if(o===1||o===3)break;if(o===8){if(o=e.data,o==="$"||o==="$!"||o==="$?"||o==="F!"||o==="F")break;if(o==="/$")return null}}return e}var Il=null;function kp(e){e=e.previousSibling;for(var o=0;e;){if(e.nodeType===8){var n=e.data;if(n==="$"||n==="$!"||n==="$?"){if(o===0)return e;o--}else n==="/$"&&o++}e=e.previousSibling}return null}function Dp(e,o,n){switch(o=yr(n),e){case"html":if(e=o.documentElement,!e)throw Error(r(452));return e;case"head":if(e=o.head,!e)throw Error(r(453));return e;case"body":if(e=o.body,!e)throw Error(r(454));return e;default:throw Error(r(451))}}function Pn(e){for(var o=e.attributes;o.length;)e.removeAttributeNode(o[0]);y2(e)}var ye=new Map,wp=new Set;function Cr(e){return typeof e.getRootNode=="function"?e.getRootNode():e.nodeType===9?e:e.ownerDocument}var ft=q.d;q.d={f:Oy,r:jy,D:Vy,C:Uy,L:Gy,m:qy,X:Ky,S:Wy,M:Zy};function Oy(){var e=ft.f(),o=Fr();return e||o}function jy(e){var o=q2(e);o!==null&&o.tag===5&&o.type==="form"?Wd(o):ft.r(e)}var ya=typeof document>"u"?null:document;function _p(e,o,n){var s=ya;if(s&&typeof o=="string"&&o){var h=de(o);h='link[rel="'+e+'"][href="'+h+'"]',typeof n=="string"&&(h+='[crossorigin="'+n+'"]'),wp.has(h)||(wp.add(h),e={rel:e,crossOrigin:n,href:o},s.querySelector(h)===null&&(o=s.createElement("link"),T0(o,"link",e),T2(o),s.head.appendChild(o)))}}function Vy(e){ft.D(e),_p("dns-prefetch",e,null)}function Uy(e,o){ft.C(e,o),_p("preconnect",e,o)}function Gy(e,o,n){ft.L(e,o,n);var s=ya;if(s&&e&&o){var h='link[rel="preload"][as="'+de(o)+'"]';o==="image"&&n&&n.imageSrcSet?(h+='[imagesrcset="'+de(n.imageSrcSet)+'"]',typeof n.imageSizes=="string"&&(h+='[imagesizes="'+de(n.imageSizes)+'"]')):h+='[href="'+de(e)+'"]';var d=h;switch(o){case"style":d=Ca(e);break;case"script":d=va(e)}ye.has(d)||(e=b({rel:"preload",href:o==="image"&&n&&n.imageSrcSet?void 0:e,as:o},n),ye.set(d,e),s.querySelector(h)!==null||o==="style"&&s.querySelector(Ln(d))||o==="script"&&s.querySelector(Mn(d))||(o=s.createElement("link"),T0(o,"link",e),T2(o),s.head.appendChild(o)))}}function qy(e,o){ft.m(e,o);var n=ya;if(n&&e){var s=o&&typeof o.as=="string"?o.as:"script",h='link[rel="modulepreload"][as="'+de(s)+'"][href="'+de(e)+'"]',d=h;switch(s){case"audioworklet":case"paintworklet":case"serviceworker":case"sharedworker":case"worker":case"script":d=va(e)}if(!ye.has(d)&&(e=b({rel:"modulepreload",href:e},o),ye.set(d,e),n.querySelector(h)===null)){switch(s){case"audioworklet":case"paintworklet":case"serviceworker":case"sharedworker":case"worker":case"script":if(n.querySelector(Mn(d)))return}s=n.createElement("link"),T0(s,"link",e),T2(s),n.head.appendChild(s)}}}function Wy(e,o,n){ft.S(e,o,n);var s=ya;if(s&&e){var h=F0(s).hoistableStyles,d=Ca(e);o=o||"default";var k=h.get(d);if(!k){var E={loading:0,preload:null};if(k=s.querySelector(Ln(d)))E.loading=5;else{e=b({rel:"stylesheet",href:e,"data-precedence":o},n),(n=ye.get(d))&&Hl(e,n);var L=k=s.createElement("link");T2(L),T0(L,"link",e),L._p=new Promise(function(G,e2){L.onload=G,L.onerror=e2}),L.addEventListener("load",function(){E.loading|=1}),L.addEventListener("error",function(){E.loading|=2}),E.loading|=4,vr(k,o,s)}k={type:"stylesheet",instance:k,count:1,state:E},h.set(d,k)}}}function Ky(e,o){ft.X(e,o);var n=ya;if(n&&e){var s=F0(n).hoistableScripts,h=va(e),d=s.get(h);d||(d=n.querySelector(Mn(h)),d||(e=b({src:e,async:!0},o),(o=ye.get(h))&&zl(e,o),d=n.createElement("script"),T2(d),T0(d,"link",e),n.head.appendChild(d)),d={type:"script",instance:d,count:1,state:null},s.set(h,d))}}function Zy(e,o){ft.M(e,o);var n=ya;if(n&&e){var s=F0(n).hoistableScripts,h=va(e),d=s.get(h);d||(d=n.querySelector(Mn(h)),d||(e=b({src:e,async:!0,type:"module"},o),(o=ye.get(h))&&zl(e,o),d=n.createElement("script"),T2(d),T0(d,"link",e),n.head.appendChild(d)),d={type:"script",instance:d,count:1,state:null},s.set(h,d))}}function Ep(e,o,n,s){var h=(h=g2.current)?Cr(h):null;if(!h)throw Error(r(446));switch(e){case"meta":case"title":return null;case"style":return typeof n.precedence=="string"&&typeof n.href=="string"?(o=Ca(n.href),n=F0(h).hoistableStyles,s=n.get(o),s||(s={type:"style",instance:null,count:0,state:null},n.set(o,s)),s):{type:"void",instance:null,count:0,state:null};case"link":if(n.rel==="stylesheet"&&typeof n.href=="string"&&typeof n.precedence=="string"){e=Ca(n.href);var d=F0(h).hoistableStyles,k=d.get(e);if(k||(h=h.ownerDocument||h,k={type:"stylesheet",instance:null,count:0,state:{loading:0,preload:null}},d.set(e,k),(d=h.querySelector(Ln(e)))&&!d._p&&(k.instance=d,k.state.loading=5),ye.has(e)||(n={rel:"preload",as:"style",href:n.href,crossOrigin:n.crossOrigin,integrity:n.integrity,media:n.media,hrefLang:n.hrefLang,referrerPolicy:n.referrerPolicy},ye.set(e,n),d||Yy(h,e,n,k.state))),o&&s===null)throw Error(r(528,""));return k}if(o&&s!==null)throw Error(r(529,""));return null;case"script":return o=n.async,n=n.src,typeof n=="string"&&o&&typeof o!="function"&&typeof o!="symbol"?(o=va(n),n=F0(h).hoistableScripts,s=n.get(o),s||(s={type:"script",instance:null,count:0,state:null},n.set(o,s)),s):{type:"void",instance:null,count:0,state:null};default:throw Error(r(444,e))}}function Ca(e){return'href="'+de(e)+'"'}function Ln(e){return'link[rel="stylesheet"]['+e+"]"}function xp(e){return b({},e,{"data-precedence":e.precedence,precedence:null})}function Yy(e,o,n,s){e.querySelector('link[rel="preload"][as="style"]['+o+"]")?s.loading=1:(o=e.createElement("link"),s.preload=o,o.addEventListener("load",function(){return s.loading|=1}),o.addEventListener("error",function(){return s.loading|=2}),T0(o,"link",n),T2(o),e.head.appendChild(o))}function va(e){return'[src="'+de(e)+'"]'}function Mn(e){return"script[async]"+e}function Sp(e,o,n){if(o.count++,o.instance===null)switch(o.type){case"style":var s=e.querySelector('style[data-href~="'+de(n.href)+'"]');if(s)return o.instance=s,T2(s),s;var h=b({},n,{"data-href":n.href,"data-precedence":n.precedence,href:null,precedence:null});return s=(e.ownerDocument||e).createElement("style"),T2(s),T0(s,"style",h),vr(s,n.precedence,e),o.instance=s;case"stylesheet":h=Ca(n.href);var d=e.querySelector(Ln(h));if(d)return o.state.loading|=4,o.instance=d,T2(d),d;s=xp(n),(h=ye.get(h))&&Hl(s,h),d=(e.ownerDocument||e).createElement("link"),T2(d);var k=d;return k._p=new Promise(function(E,L){k.onload=E,k.onerror=L}),T0(d,"link",s),o.state.loading|=4,vr(d,n.precedence,e),o.instance=d;case"script":return d=va(n.src),(h=e.querySelector(Mn(d)))?(o.instance=h,T2(h),h):(s=n,(h=ye.get(d))&&(s=b({},n),zl(s,h)),e=e.ownerDocument||e,h=e.createElement("script"),T2(h),T0(h,"link",s),e.head.appendChild(h),o.instance=h);case"void":return null;default:throw Error(r(443,o.type))}else o.type==="stylesheet"&&(o.state.loading&4)===0&&(s=o.instance,o.state.loading|=4,vr(s,n.precedence,e));return o.instance}function vr(e,o,n){for(var s=n.querySelectorAll('link[rel="stylesheet"][data-precedence],style[data-precedence]'),h=s.length?s[s.length-1]:null,d=h,k=0;k<s.length;k++){var E=s[k];if(E.dataset.precedence===o)d=E;else if(d!==h)break}d?d.parentNode.insertBefore(e,d.nextSibling):(o=n.nodeType===9?n.head:n,o.insertBefore(e,o.firstChild))}function Hl(e,o){e.crossOrigin==null&&(e.crossOrigin=o.crossOrigin),e.referrerPolicy==null&&(e.referrerPolicy=o.referrerPolicy),e.title==null&&(e.title=o.title)}function zl(e,o){e.crossOrigin==null&&(e.crossOrigin=o.crossOrigin),e.referrerPolicy==null&&(e.referrerPolicy=o.referrerPolicy),e.integrity==null&&(e.integrity=o.integrity)}var Br=null;function Rp(e,o,n){if(Br===null){var s=new Map,h=Br=new Map;h.set(n,s)}else h=Br,s=h.get(n),s||(s=new Map,h.set(n,s));if(s.has(e))return s;for(s.set(e,null),n=n.getElementsByTagName(e),h=0;h<n.length;h++){var d=n[h];if(!(d[B2]||d[r2]||e==="link"&&d.getAttribute("rel")==="stylesheet")&&d.namespaceURI!=="http://www.w3.org/2000/svg"){var k=d.getAttribute(o)||"";k=e+k;var E=s.get(k);E?E.push(d):s.set(k,[d])}}return s}function Tp(e,o,n){e=e.ownerDocument||e,e.head.insertBefore(n,o==="title"?e.querySelector("head > title"):null)}function Xy(e,o,n){if(n===1||o.itemProp!=null)return!1;switch(e){case"meta":case"title":return!0;case"style":if(typeof o.precedence!="string"||typeof o.href!="string"||o.href==="")break;return!0;case"link":if(typeof o.rel!="string"||typeof o.href!="string"||o.href===""||o.onLoad||o.onError)break;switch(o.rel){case"stylesheet":return e=o.disabled,typeof o.precedence=="string"&&e==null;default:return!0}case"script":if(o.async&&typeof o.async!="function"&&typeof o.async!="symbol"&&!o.onLoad&&!o.onError&&o.src&&typeof o.src=="string")return!0}return!1}function Pp(e){return!(e.type==="stylesheet"&&(e.state.loading&3)===0)}var Nn=null;function Jy(){}function $y(e,o,n){if(Nn===null)throw Error(r(475));var s=Nn;if(o.type==="stylesheet"&&(typeof n.media!="string"||matchMedia(n.media).matches!==!1)&&(o.state.loading&4)===0){if(o.instance===null){var h=Ca(n.href),d=e.querySelector(Ln(h));if(d){e=d._p,e!==null&&typeof e=="object"&&typeof e.then=="function"&&(s.count++,s=kr.bind(s),e.then(s,s)),o.state.loading|=4,o.instance=d,T2(d);return}d=e.ownerDocument||e,n=xp(n),(h=ye.get(h))&&Hl(n,h),d=d.createElement("link"),T2(d);var k=d;k._p=new Promise(function(E,L){k.onload=E,k.onerror=L}),T0(d,"link",n),o.instance=d}s.stylesheets===null&&(s.stylesheets=new Map),s.stylesheets.set(o,e),(e=o.state.preload)&&(o.state.loading&3)===0&&(s.count++,o=kr.bind(s),e.addEventListener("load",o),e.addEventListener("error",o))}}function Qy(){if(Nn===null)throw Error(r(475));var e=Nn;return e.stylesheets&&e.count===0&&Ol(e,e.stylesheets),0<e.count?function(o){var n=setTimeout(function(){if(e.stylesheets&&Ol(e,e.stylesheets),e.unsuspend){var s=e.unsuspend;e.unsuspend=null,s()}},6e4);return e.unsuspend=o,function(){e.unsuspend=null,clearTimeout(n)}}:null}function kr(){if(this.count--,this.count===0){if(this.stylesheets)Ol(this,this.stylesheets);else if(this.unsuspend){var e=this.unsuspend;this.unsuspend=null,e()}}}var Dr=null;function Ol(e,o){e.stylesheets=null,e.unsuspend!==null&&(e.count++,Dr=new Map,o.forEach(eC,e),Dr=null,kr.call(e))}function eC(e,o){if(!(o.state.loading&4)){var n=Dr.get(e);if(n)var s=n.get(null);else{n=new Map,Dr.set(e,n);for(var h=e.querySelectorAll("link[data-precedence],style[data-precedence]"),d=0;d<h.length;d++){var k=h[d];(k.nodeName==="LINK"||k.getAttribute("media")!=="not all")&&(n.set(k.dataset.precedence,k),s=k)}s&&n.set(null,s)}h=o.instance,k=h.getAttribute("data-precedence"),d=n.get(k)||s,d===s&&n.set(null,h),n.set(k,h),this.count++,s=kr.bind(this),h.addEventListener("load",s),h.addEventListener("error",s),d?d.parentNode.insertBefore(h,d.nextSibling):(e=e.nodeType===9?e.head:e,e.insertBefore(h,e.firstChild)),o.state.loading|=4}}var In={$$typeof:_,Provider:null,Consumer:null,_currentValue:J,_currentValue2:J,_threadCount:0};function tC(e,o,n,s,h,d,k,E){this.tag=1,this.containerInfo=e,this.pingCache=this.current=this.pendingChildren=null,this.timeoutHandle=-1,this.callbackNode=this.next=this.pendingContext=this.context=this.cancelPendingCommit=null,this.callbackPriority=0,this.expirationTimes=Vo(-1),this.entangledLanes=this.shellSuspendCounter=this.errorRecoveryDisabledLanes=this.expiredLanes=this.warmLanes=this.pingedLanes=this.suspendedLanes=this.pendingLanes=0,this.entanglements=Vo(0),this.hiddenUpdates=Vo(null),this.identifierPrefix=s,this.onUncaughtError=h,this.onCaughtError=d,this.onRecoverableError=k,this.pooledCache=null,this.pooledCacheLanes=0,this.formState=E,this.incompleteTransitions=new Map}function Lp(e,o,n,s,h,d,k,E,L,G,e2,i2){return e=new tC(e,o,n,k,E,L,G,i2),o=1,d===!0&&(o|=24),d=Q0(3,null,null,o),e.current=d,d.stateNode=e,o=Cc(),o.refCount++,e.pooledCache=o,o.refCount++,d.memoizedState={element:s,isDehydrated:n,cache:o},Dc(d),e}function Mp(e){return e?(e=Qo,e):Qo}function Np(e,o,n,s,h,d){h=Mp(h),s.context===null?s.context=h:s.pendingContext=h,s=St(o),s.payload={element:n},d=d===void 0?null:d,d!==null&&(s.callback=d),n=Rt(e,s,o),n!==null&&(ne(n,e,o),dn(n,e,o))}function Ip(e,o){if(e=e.memoizedState,e!==null&&e.dehydrated!==null){var n=e.retryLane;e.retryLane=n!==0&&n<o?n:o}}function jl(e,o){Ip(e,o),(e=e.alternate)&&Ip(e,o)}function Hp(e){if(e.tag===13){var o=$o(e,67108864);o!==null&&ne(o,e,67108864),jl(e,67108864)}}var wr=!0;function oC(e,o,n,s){var h=I.T;I.T=null;var d=q.p;try{q.p=2,Vl(e,o,n,s)}finally{q.p=d,I.T=h}}function aC(e,o,n,s){var h=I.T;I.T=null;var d=q.p;try{q.p=8,Vl(e,o,n,s)}finally{q.p=d,I.T=h}}function Vl(e,o,n,s){if(wr){var h=Ul(s);if(h===null)xl(e,o,s,_r,n),Op(e,s);else if(iC(h,e,o,n,s))s.stopPropagation();else if(Op(e,s),o&4&&-1<nC.indexOf(e)){for(;h!==null;){var d=q2(h);if(d!==null)switch(d.tag){case 3:if(d=d.stateNode,d.current.memoizedState.isDehydrated){var k=ot(d.pendingLanes);if(k!==0){var E=d;for(E.pendingLanes|=2,E.entangledLanes|=2;k;){var L=1<<31-x0(k);E.entanglements[1]|=L,k&=~L}We(d),(Z2&6)===0&&(hr=z0()+500,Sn(0))}}break;case 13:E=$o(d,2),E!==null&&ne(E,d,2),Fr(),jl(d,2)}if(d=Ul(s),d===null&&xl(e,o,s,_r,n),d===h)break;h=d}h!==null&&s.stopPropagation()}else xl(e,o,s,null,n)}}function Ul(e){return e=Zs(e),Gl(e)}var _r=null;function Gl(e){if(_r=null,e=x2(e),e!==null){var o=l(e);if(o===null)e=null;else{var n=o.tag;if(n===13){if(e=u(o),e!==null)return e;e=null}else if(n===3){if(o.stateNode.current.memoizedState.isDehydrated)return o.tag===3?o.stateNode.containerInfo:null;e=null}else o!==e&&(e=null)}}return _r=e,null}function zp(e){switch(e){case"beforetoggle":case"cancel":case"click":case"close":case"contextmenu":case"copy":case"cut":case"auxclick":case"dblclick":case"dragend":case"dragstart":case"drop":case"focusin":case"focusout":case"input":case"invalid":case"keydown":case"keypress":case"keyup":case"mousedown":case"mouseup":case"paste":case"pause":case"play":case"pointercancel":case"pointerdown":case"pointerup":case"ratechange":case"reset":case"resize":case"seeked":case"submit":case"toggle":case"touchcancel":case"touchend":case"touchstart":case"volumechange":case"change":case"selectionchange":case"textInput":case"compositionstart":case"compositionend":case"compositionupdate":case"beforeblur":case"afterblur":case"beforeinput":case"blur":case"fullscreenchange":case"focus":case"hashchange":case"popstate":case"select":case"selectstart":return 2;case"drag":case"dragenter":case"dragexit":case"dragleave":case"dragover":case"mousemove":case"mouseout":case"mouseover":case"pointermove":case"pointerout":case"pointerover":case"scroll":case"touchmove":case"wheel":case"mouseenter":case"mouseleave":case"pointerenter":case"pointerleave":return 8;case"message":switch(qa()){case et:return 2;case gi:return 8;case Oo:case tt:return 32;case kt:return 268435456;default:return 32}default:return 32}}var ql=!1,Gt=null,qt=null,Wt=null,Hn=new Map,zn=new Map,Kt=[],nC="mousedown mouseup touchcancel touchend touchstart auxclick dblclick pointercancel pointerdown pointerup dragend dragstart drop compositionend compositionstart keydown keypress keyup input textInput copy cut paste click change contextmenu reset".split(" ");function Op(e,o){switch(e){case"focusin":case"focusout":Gt=null;break;case"dragenter":case"dragleave":qt=null;break;case"mouseover":case"mouseout":Wt=null;break;case"pointerover":case"pointerout":Hn.delete(o.pointerId);break;case"gotpointercapture":case"lostpointercapture":zn.delete(o.pointerId)}}function On(e,o,n,s,h,d){return e===null||e.nativeEvent!==d?(e={blockedOn:o,domEventName:n,eventSystemFlags:s,nativeEvent:d,targetContainers:[h]},o!==null&&(o=q2(o),o!==null&&Hp(o)),e):(e.eventSystemFlags|=s,o=e.targetContainers,h!==null&&o.indexOf(h)===-1&&o.push(h),e)}function iC(e,o,n,s,h){switch(o){case"focusin":return Gt=On(Gt,e,o,n,s,h),!0;case"dragenter":return qt=On(qt,e,o,n,s,h),!0;case"mouseover":return Wt=On(Wt,e,o,n,s,h),!0;case"pointerover":var d=h.pointerId;return Hn.set(d,On(Hn.get(d)||null,e,o,n,s,h)),!0;case"gotpointercapture":return d=h.pointerId,zn.set(d,On(zn.get(d)||null,e,o,n,s,h)),!0}return!1}function jp(e){var o=x2(e.target);if(o!==null){var n=l(o);if(n!==null){if(o=n.tag,o===13){if(o=u(n),o!==null){e.blockedOn=o,j(e.priority,function(){if(n.tag===13){var s=ae();s=Ka(s);var h=$o(n,s);h!==null&&ne(h,n,s),jl(n,s)}});return}}else if(o===3&&n.stateNode.current.memoizedState.isDehydrated){e.blockedOn=n.tag===3?n.stateNode.containerInfo:null;return}}}e.blockedOn=null}function Er(e){if(e.blockedOn!==null)return!1;for(var o=e.targetContainers;0<o.length;){var n=Ul(e.nativeEvent);if(n===null){n=e.nativeEvent;var s=new n.constructor(n.type,n);Ks=s,n.target.dispatchEvent(s),Ks=null}else return o=q2(n),o!==null&&Hp(o),e.blockedOn=n,!1;o.shift()}return!0}function Vp(e,o,n){Er(e)&&n.delete(o)}function rC(){ql=!1,Gt!==null&&Er(Gt)&&(Gt=null),qt!==null&&Er(qt)&&(qt=null),Wt!==null&&Er(Wt)&&(Wt=null),Hn.forEach(Vp),zn.forEach(Vp)}function xr(e,o){e.blockedOn===o&&(e.blockedOn=null,ql||(ql=!0,t.unstable_scheduleCallback(t.unstable_NormalPriority,rC)))}var Sr=null;function Up(e){Sr!==e&&(Sr=e,t.unstable_scheduleCallback(t.unstable_NormalPriority,function(){Sr===e&&(Sr=null);for(var o=0;o<e.length;o+=3){var n=e[o],s=e[o+1],h=e[o+2];if(typeof s!="function"){if(Gl(s||n)===null)continue;break}var d=q2(n);d!==null&&(e.splice(o,3),o-=3,Gc(d,{pending:!0,data:h,method:n.method,action:s},s,h))}}))}function jn(e){function o(L){return xr(L,e)}Gt!==null&&xr(Gt,e),qt!==null&&xr(qt,e),Wt!==null&&xr(Wt,e),Hn.forEach(o),zn.forEach(o);for(var n=0;n<Kt.length;n++){var s=Kt[n];s.blockedOn===e&&(s.blockedOn=null)}for(;0<Kt.length&&(n=Kt[0],n.blockedOn===null);)jp(n),n.blockedOn===null&&Kt.shift();if(n=(e.ownerDocument||e).$$reactFormReplay,n!=null)for(s=0;s<n.length;s+=3){var h=n[s],d=n[s+1],k=h[h2]||null;if(typeof d=="function")k||Up(n);else if(k){var E=null;if(d&&d.hasAttribute("formAction")){if(h=d,k=d[h2]||null)E=k.formAction;else if(Gl(h)!==null)continue}else E=k.action;typeof E=="function"?n[s+1]=E:(n.splice(s,3),s-=3),Up(n)}}}function Wl(e){this._internalRoot=e}Rr.prototype.render=Wl.prototype.render=function(e){var o=this._internalRoot;if(o===null)throw Error(r(409));var n=o.current,s=ae();Np(n,s,e,o,null,null)},Rr.prototype.unmount=Wl.prototype.unmount=function(){var e=this._internalRoot;if(e!==null){this._internalRoot=null;var o=e.containerInfo;Np(e.current,2,null,e,null,null),Fr(),o[m2]=null}};function Rr(e){this._internalRoot=e}Rr.prototype.unstable_scheduleHydration=function(e){if(e){var o=M();e={blockedOn:null,target:e,priority:o};for(var n=0;n<Kt.length&&o!==0&&o<Kt[n].priority;n++);Kt.splice(n,0,e),n===0&&jp(e)}};var Gp=a.version;if(Gp!=="19.1.0")throw Error(r(527,Gp,"19.1.0"));q.findDOMNode=function(e){var o=e._reactInternals;if(o===void 0)throw typeof e.render=="function"?Error(r(188)):(e=Object.keys(e).join(","),Error(r(268,e)));return e=p(o),e=e!==null?A(e):null,e=e===null?null:e.stateNode,e};var sC={bundleType:0,version:"19.1.0",rendererPackageName:"react-dom",currentDispatcherRef:I,reconcilerVersion:"19.1.0"};if(typeof __REACT_DEVTOOLS_GLOBAL_HOOK__<"u"){var Tr=__REACT_DEVTOOLS_GLOBAL_HOOK__;if(!Tr.isDisabled&&Tr.supportsFiber)try{q0=Tr.inject(sC),s0=Tr}catch{}}return Un.createRoot=function(e,o){if(!c(e))throw Error(r(299));var n=!1,s="",h=rA,d=sA,k=cA,E=null;return o!=null&&(o.unstable_strictMode===!0&&(n=!0),o.identifierPrefix!==void 0&&(s=o.identifierPrefix),o.onUncaughtError!==void 0&&(h=o.onUncaughtError),o.onCaughtError!==void 0&&(d=o.onCaughtError),o.onRecoverableError!==void 0&&(k=o.onRecoverableError),o.unstable_transitionCallbacks!==void 0&&(E=o.unstable_transitionCallbacks)),o=Lp(e,1,!1,null,null,n,s,h,d,k,E,null),e[m2]=o.current,El(e),new Wl(o)},Un.hydrateRoot=function(e,o,n){if(!c(e))throw Error(r(299));var s=!1,h="",d=rA,k=sA,E=cA,L=null,G=null;return n!=null&&(n.unstable_strictMode===!0&&(s=!0),n.identifierPrefix!==void 0&&(h=n.identifierPrefix),n.onUncaughtError!==void 0&&(d=n.onUncaughtError),n.onCaughtError!==void 0&&(k=n.onCaughtError),n.onRecoverableError!==void 0&&(E=n.onRecoverableError),n.unstable_transitionCallbacks!==void 0&&(L=n.unstable_transitionCallbacks),n.formState!==void 0&&(G=n.formState)),o=Lp(e,1,!0,o,n??null,s,h,d,k,E,L,G),o.context=Mp(null),n=o.current,s=ae(),s=Ka(s),h=St(s),h.callback=null,Rt(n,h,s),n=s,o.current.lanes=n,so(o,n),We(o),e[m2]=o.current,El(e),new Rr(o)},Un.version="19.1.0",Un}var em;function bC(){if(em)return Zl.exports;em=1;function t(){if(!(typeof __REACT_DEVTOOLS_GLOBAL_HOOK__>"u"||typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE!="function"))try{__REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE(t)}catch(a){console.error(a)}}return t(),Zl.exports=gC(),Zl.exports}var fC=bC(),f=hu();const a0=bs(f),fs=M3({__proto__:null,default:a0},[f]);/**
 * react-router v7.7.0
 *
 * Copyright (c) Remix Software Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE.md file in the root directory of this source tree.
 *
 * @license MIT
 */var I3=t=>{throw TypeError(t)},yC=(t,a,i)=>a.has(t)||I3("Cannot "+i),Ql=(t,a,i)=>(yC(t,a,"read from private field"),i?i.call(t):a.get(t)),CC=(t,a,i)=>a.has(t)?I3("Cannot add the same private member more than once"):a instanceof WeakSet?a.add(t):a.set(t,i),tm="popstate";function vC(t={}){function a(r,c){let{pathname:l,search:u,hash:F}=r.location;return Qn("",{pathname:l,search:u,hash:F},c.state&&c.state.usr||null,c.state&&c.state.key||"default")}function i(r,c){return typeof c=="string"?c:Jt(c)}return kC(a,i,null,t)}function I2(t,a){if(t===!1||t===null||typeof t>"u")throw new Error(a)}function p0(t,a){if(!t){typeof console<"u"&&console.warn(a);try{throw new Error(a)}catch{}}}function BC(){return Math.random().toString(36).substring(2,10)}function om(t,a){return{usr:t.state,key:t.key,idx:a}}function Qn(t,a,i=null,r){return{pathname:typeof t=="string"?t:t.pathname,search:"",hash:"",...typeof a=="string"?eo(a):a,state:i,key:a&&a.key||r||BC()}}function Jt({pathname:t="/",search:a="",hash:i=""}){return a&&a!=="?"&&(t+=a.charAt(0)==="?"?a:"?"+a),i&&i!=="#"&&(t+=i.charAt(0)==="#"?i:"#"+i),t}function eo(t){let a={};if(t){let i=t.indexOf("#");i>=0&&(a.hash=t.substring(i),t=t.substring(0,i));let r=t.indexOf("?");r>=0&&(a.search=t.substring(r),t=t.substring(0,r)),t&&(a.pathname=t)}return a}function kC(t,a,i,r={}){let{window:c=document.defaultView,v5Compat:l=!1}=r,u=c.history,F="POP",p=null,A=b();A==null&&(A=0,u.replaceState({...u.state,idx:A},""));function b(){return(u.state||{idx:null}).idx}function m(){F="POP";let D=b(),w=D==null?null:D-A;A=D,p&&p({action:F,location:v.location,delta:w})}function y(D,w){F="PUSH";let x=Qn(v.location,D,w);A=b()+1;let _=om(x,A),R=v.createHref(x);try{u.pushState(_,"",R)}catch(P){if(P instanceof DOMException&&P.name==="DataCloneError")throw P;c.location.assign(R)}l&&p&&p({action:F,location:v.location,delta:1})}function C(D,w){F="REPLACE";let x=Qn(v.location,D,w);A=b();let _=om(x,A),R=v.createHref(x);u.replaceState(_,"",R),l&&p&&p({action:F,location:v.location,delta:0})}function B(D){return H3(D)}let v={get action(){return F},get location(){return t(c,u)},listen(D){if(p)throw new Error("A history only accepts one active listener");return c.addEventListener(tm,m),p=D,()=>{c.removeEventListener(tm,m),p=null}},createHref(D){return a(c,D)},createURL:B,encodeLocation(D){let w=B(D);return{pathname:w.pathname,search:w.search,hash:w.hash}},push:y,replace:C,go(D){return u.go(D)}};return v}function H3(t,a=!1){let i="http://localhost";typeof window<"u"&&(i=window.location.origin!=="null"?window.location.origin:window.location.href),I2(i,"No window.location.(origin|href) available to create URL");let r=typeof t=="string"?t:Jt(t);return r=r.replace(/ $/,"%20"),!a&&r.startsWith("//")&&(r=i+r),new URL(r,i)}var Zn,am=class{constructor(t){if(CC(this,Zn,new Map),t)for(let[a,i]of t)this.set(a,i)}get(t){if(Ql(this,Zn).has(t))return Ql(this,Zn).get(t);if(t.defaultValue!==void 0)return t.defaultValue;throw new Error("No value found for context")}set(t,a){Ql(this,Zn).set(t,a)}};Zn=new WeakMap;var DC=new Set(["lazy","caseSensitive","path","id","index","children"]);function wC(t){return DC.has(t)}var _C=new Set(["lazy","caseSensitive","path","id","index","unstable_middleware","children"]);function EC(t){return _C.has(t)}function xC(t){return t.index===!0}function ei(t,a,i=[],r={},c=!1){return t.map((l,u)=>{let F=[...i,String(u)],p=typeof l.id=="string"?l.id:F.join("-");if(I2(l.index!==!0||!l.children,"Cannot specify children on an index route"),I2(c||!r[p],`Found a route id collision on id "${p}".  Route id's must be globally unique within Data Router usages`),xC(l)){let A={...l,...a(l),id:p};return r[p]=A,A}else{let A={...l,...a(l),id:p,children:void 0};return r[p]=A,l.children&&(A.children=ei(l.children,a,F,r,c)),A}})}function yt(t,a,i="/"){return Yr(t,a,i,!1)}function Yr(t,a,i,r){let c=typeof a=="string"?eo(a):a,l=le(c.pathname||"/",i);if(l==null)return null;let u=O3(t);SC(u);let F=null;for(let p=0;F==null&&p<u.length;++p){let A=V3(l);F=zC(u[p],A,r)}return F}function z3(t,a){let{route:i,pathname:r,params:c}=t;return{id:i.id,pathname:r,params:c,data:a[i.id],handle:i.handle}}function O3(t,a=[],i=[],r=""){let c=(l,u,F)=>{let p={relativePath:F===void 0?l.path||"":F,caseSensitive:l.caseSensitive===!0,childrenIndex:u,route:l};p.relativePath.startsWith("/")&&(I2(p.relativePath.startsWith(r),`Absolute route path "${p.relativePath}" nested under path "${r}" is not valid. An absolute child route path must start with the combined path of all its parent routes.`),p.relativePath=p.relativePath.slice(r.length));let A=Ye([r,p.relativePath]),b=i.concat(p);l.children&&l.children.length>0&&(I2(l.index!==!0,`Index routes must not have child routes. Please remove all child routes from route path "${A}".`),O3(l.children,a,b,A)),!(l.path==null&&!l.index)&&a.push({path:A,score:IC(A,l.index),routesMeta:b})};return t.forEach((l,u)=>{var F;if(l.path===""||!((F=l.path)!=null&&F.includes("?")))c(l,u);else for(let p of j3(l.path))c(l,u,p)}),a}function j3(t){let a=t.split("/");if(a.length===0)return[];let[i,...r]=a,c=i.endsWith("?"),l=i.replace(/\?$/,"");if(r.length===0)return c?[l,""]:[l];let u=j3(r.join("/")),F=[];return F.push(...u.map(p=>p===""?l:[l,p].join("/"))),c&&F.push(...u),F.map(p=>t.startsWith("/")&&p===""?"/":p)}function SC(t){t.sort((a,i)=>a.score!==i.score?i.score-a.score:HC(a.routesMeta.map(r=>r.childrenIndex),i.routesMeta.map(r=>r.childrenIndex)))}var RC=/^:[\w-]+$/,TC=3,PC=2,LC=1,MC=10,NC=-2,nm=t=>t==="*";function IC(t,a){let i=t.split("/"),r=i.length;return i.some(nm)&&(r+=NC),a&&(r+=PC),i.filter(c=>!nm(c)).reduce((c,l)=>c+(RC.test(l)?TC:l===""?LC:MC),r)}function HC(t,a){return t.length===a.length&&t.slice(0,-1).every((r,c)=>r===a[c])?t[t.length-1]-a[a.length-1]:0}function zC(t,a,i=!1){let{routesMeta:r}=t,c={},l="/",u=[];for(let F=0;F<r.length;++F){let p=r[F],A=F===r.length-1,b=l==="/"?a:a.slice(l.length)||"/",m=So({path:p.relativePath,caseSensitive:p.caseSensitive,end:A},b),y=p.route;if(!m&&A&&i&&!r[r.length-1].route.index&&(m=So({path:p.relativePath,caseSensitive:p.caseSensitive,end:!1},b)),!m)return null;Object.assign(c,m.params),u.push({params:c,pathname:Ye([l,m.pathname]),pathnameBase:GC(Ye([l,m.pathnameBase])),route:y}),m.pathnameBase!=="/"&&(l=Ye([l,m.pathnameBase]))}return u}function So(t,a){typeof t=="string"&&(t={path:t,caseSensitive:!1,end:!0});let[i,r]=OC(t.path,t.caseSensitive,t.end),c=a.match(i);if(!c)return null;let l=c[0],u=l.replace(/(.)\/+$/,"$1"),F=c.slice(1);return{params:r.reduce((A,{paramName:b,isOptional:m},y)=>{if(b==="*"){let B=F[y]||"";u=l.slice(0,l.length-B.length).replace(/(.)\/+$/,"$1")}const C=F[y];return m&&!C?A[b]=void 0:A[b]=(C||"").replace(/%2F/g,"/"),A},{}),pathname:l,pathnameBase:u,pattern:t}}function OC(t,a=!1,i=!0){p0(t==="*"||!t.endsWith("*")||t.endsWith("/*"),`Route path "${t}" will be treated as if it were "${t.replace(/\*$/,"/*")}" because the \`*\` character must always follow a \`/\` in the pattern. To get rid of this warning, please change the route path to "${t.replace(/\*$/,"/*")}".`);let r=[],c="^"+t.replace(/\/*\*?$/,"").replace(/^\/*/,"/").replace(/[\\.*+^${}|()[\]]/g,"\\$&").replace(/\/:([\w-]+)(\?)?/g,(u,F,p)=>(r.push({paramName:F,isOptional:p!=null}),p?"/?([^\\/]+)?":"/([^\\/]+)"));return t.endsWith("*")?(r.push({paramName:"*"}),c+=t==="*"||t==="/*"?"(.*)$":"(?:\\/(.+)|\\/*)$"):i?c+="\\/*$":t!==""&&t!=="/"&&(c+="(?:(?=\\/|$))"),[new RegExp(c,a?void 0:"i"),r]}function V3(t){try{return t.split("/").map(a=>decodeURIComponent(a).replace(/\//g,"%2F")).join("/")}catch(a){return p0(!1,`The URL path "${t}" could not be decoded because it is a malformed URL segment. This is probably due to a bad percent encoding (${a}).`),t}}function le(t,a){if(a==="/")return t;if(!t.toLowerCase().startsWith(a.toLowerCase()))return null;let i=a.endsWith("/")?a.length-1:a.length,r=t.charAt(i);return r&&r!=="/"?null:t.slice(i)||"/"}function jC({basename:t,pathname:a}){return a==="/"?t:Ye([t,a])}function VC(t,a="/"){let{pathname:i,search:r="",hash:c=""}=typeof t=="string"?eo(t):t;return{pathname:i?i.startsWith("/")?i:UC(i,a):a,search:qC(r),hash:WC(c)}}function UC(t,a){let i=a.replace(/\/+$/,"").split("/");return t.split("/").forEach(c=>{c===".."?i.length>1&&i.pop():c!=="."&&i.push(c)}),i.length>1?i.join("/"):"/"}function eh(t,a,i,r){return`Cannot include a '${t}' character in a manually specified \`to.${a}\` field [${JSON.stringify(r)}].  Please separate it out to the \`to.${i}\` field. Alternatively you may provide the full path as a string in <Link to="..."> and the router will parse it for you.`}function U3(t){return t.filter((a,i)=>i===0||a.route.path&&a.route.path.length>0)}function uu(t){let a=U3(t);return a.map((i,r)=>r===a.length-1?i.pathname:i.pathnameBase)}function Fu(t,a,i,r=!1){let c;typeof t=="string"?c=eo(t):(c={...t},I2(!c.pathname||!c.pathname.includes("?"),eh("?","pathname","search",c)),I2(!c.pathname||!c.pathname.includes("#"),eh("#","pathname","hash",c)),I2(!c.search||!c.search.includes("#"),eh("#","search","hash",c)));let l=t===""||c.pathname==="",u=l?"/":c.pathname,F;if(u==null)F=i;else{let m=a.length-1;if(!r&&u.startsWith("..")){let y=u.split("/");for(;y[0]==="..";)y.shift(),m-=1;c.pathname=y.join("/")}F=m>=0?a[m]:"/"}let p=VC(c,F),A=u&&u!=="/"&&u.endsWith("/"),b=(l||u===".")&&i.endsWith("/");return!p.pathname.endsWith("/")&&(A||b)&&(p.pathname+="/"),p}var Ye=t=>t.join("/").replace(/\/\/+/g,"/"),GC=t=>t.replace(/\/+$/,"").replace(/^\/*/,"/"),qC=t=>!t||t==="?"?"":t.startsWith("?")?t:"?"+t,WC=t=>!t||t==="#"?"":t.startsWith("#")?t:"#"+t,ns=class{constructor(t,a,i,r=!1){this.status=t,this.statusText=a||"",this.internal=r,i instanceof Error?(this.data=i.toString(),this.error=i):this.data=i}};function ti(t){return t!=null&&typeof t.status=="number"&&typeof t.statusText=="string"&&typeof t.internal=="boolean"&&"data"in t}var G3=["POST","PUT","PATCH","DELETE"],KC=new Set(G3),ZC=["GET",...G3],YC=new Set(ZC),XC=new Set([301,302,303,307,308]),JC=new Set([307,308]),th={state:"idle",location:void 0,formMethod:void 0,formAction:void 0,formEncType:void 0,formData:void 0,json:void 0,text:void 0},$C={state:"idle",data:void 0,formMethod:void 0,formAction:void 0,formEncType:void 0,formData:void 0,json:void 0,text:void 0},Gn={state:"unblocked",proceed:void 0,reset:void 0,location:void 0},QC=/^(?:[a-z][a-z0-9+.-]*:|\/\/)/i,du=t=>QC.test(t),ev=t=>({hasErrorBoundary:!!t.hasErrorBoundary}),q3="remix-router-transitions",W3=Symbol("ResetLoaderData");function tv(t){const a=t.window?t.window:typeof window<"u"?window:void 0,i=typeof a<"u"&&typeof a.document<"u"&&typeof a.document.createElement<"u";I2(t.routes.length>0,"You must provide a non-empty routes array to createRouter");let r=t.hydrationRouteProperties||[],c=t.mapRouteProperties||ev,l={},u=ei(t.routes,c,void 0,l),F,p=t.basename||"/",A=t.dataStrategy||rv,b={unstable_middleware:!1,...t.future},m=null,y=new Set,C=null,B=null,v=null,D=t.hydrationData!=null,w=yt(u,t.history.location,p),x=!1,_=null,R;if(w==null&&!t.patchRoutesOnNavigation){let M=Ce(404,{pathname:t.history.location.pathname}),{matches:j,route:X}=mm(u);R=!0,w=j,_={[X.id]:M}}else if(w&&!t.hydrationData&&co(w,u,t.history.location.pathname).active&&(w=null),w)if(w.some(M=>M.route.lazy))R=!1;else if(!w.some(M=>M.route.loader))R=!0;else{let M=t.hydrationData?t.hydrationData.loaderData:null,j=t.hydrationData?t.hydrationData.errors:null;if(j){let X=w.findIndex(r2=>j[r2.route.id]!==void 0);R=w.slice(0,X+1).every(r2=>!Ph(r2.route,M,j))}else R=w.every(X=>!Ph(X.route,M,j))}else{R=!1,w=[];let M=co(null,u,t.history.location.pathname);M.active&&M.matches&&(x=!0,w=M.matches)}let P,S={historyAction:t.history.action,location:t.history.location,matches:w,initialized:R,navigation:th,restoreScrollPosition:t.hydrationData!=null?!1:null,preventScrollReset:!1,revalidation:"idle",loaderData:t.hydrationData&&t.hydrationData.loaderData||{},actionData:t.hydrationData&&t.hydrationData.actionData||null,errors:t.hydrationData&&t.hydrationData.errors||_,fetchers:new Map,blockers:new Map},N="POP",O=!1,U,n2=!1,u2=new Map,s2=null,c2=!1,W=!1,F2=new Set,I=new Map,q=0,J=-1,Y=new Map,T=new Set,$=new Map,Q=new Map,a2=new Set,d2=new Map,k2,g2=null;function K2(){if(m=t.history.listen(({action:M,location:j,delta:X})=>{if(k2){k2(),k2=void 0;return}p0(d2.size===0||X!=null,"You are trying to use a blocker on a POP navigation to a location that was not created by @remix-run/router. This will fail silently in production. This can happen if you are navigating outside the router via `window.history.pushState`/`window.location.hash` instead of using router navigation APIs.  This can also happen if you are using createHashRouter and the user manually changes the URL.");let r2=yi({currentLocation:S.location,nextLocation:j,historyAction:M});if(r2&&X!=null){let h2=new Promise(m2=>{k2=m2});t.history.go(X*-1),Oe(r2,{state:"blocked",location:j,proceed(){Oe(r2,{state:"proceeding",proceed:void 0,reset:void 0,location:j}),h2.then(()=>t.history.go(X))},reset(){let m2=new Map(S.blockers);m2.set(r2,Gn),V2({blockers:m2})}});return}return G0(M,j)}),i){gv(a,u2);let M=()=>bv(a,u2);a.addEventListener("pagehide",M),s2=()=>a.removeEventListener("pagehide",M)}return S.initialized||G0("POP",S.location,{initialHydration:!0}),P}function _2(){m&&m(),s2&&s2(),y.clear(),U&&U.abort(),S.fetchers.forEach((M,j)=>x0(j)),S.blockers.forEach((M,j)=>ro(j))}function L2(M){return y.add(M),()=>y.delete(M)}function V2(M,j={}){M.matches&&(M.matches=M.matches.map(h2=>{let m2=l[h2.route.id],f2=h2.route;return f2.element!==m2.element||f2.errorElement!==m2.errorElement||f2.hydrateFallbackElement!==m2.hydrateFallbackElement?{...h2,route:m2}:h2})),S={...S,...M};let X=[],r2=[];S.fetchers.forEach((h2,m2)=>{h2.state==="idle"&&(a2.has(m2)?X.push(m2):r2.push(m2))}),a2.forEach(h2=>{!S.fetchers.has(h2)&&!I.has(h2)&&X.push(h2)}),[...y].forEach(h2=>h2(S,{deletedFetchers:X,viewTransitionOpts:j.viewTransitionOpts,flushSync:j.flushSync===!0})),X.forEach(h2=>x0(h2)),r2.forEach(h2=>S.fetchers.delete(h2))}function h0(M,j,{flushSync:X}={}){var B2,y2;let r2=S.actionData!=null&&S.navigation.formMethod!=null&&X0(S.navigation.formMethod)&&S.navigation.state==="loading"&&((B2=M.state)==null?void 0:B2._isRedirect)!==!0,h2;j.actionData?Object.keys(j.actionData).length>0?h2=j.actionData:h2=null:r2?h2=S.actionData:h2=null;let m2=j.loaderData?Am(S.loaderData,j.loaderData,j.matches||[],j.errors):S.loaderData,f2=S.blockers;f2.size>0&&(f2=new Map(f2),f2.forEach((x2,q2)=>f2.set(q2,Gn)));let b2=c2?!1:vi(M,j.matches||S.matches),v2=O===!0||S.navigation.formMethod!=null&&X0(S.navigation.formMethod)&&((y2=M.state)==null?void 0:y2._isRedirect)!==!0;F&&(u=F,F=void 0),c2||N==="POP"||(N==="PUSH"?t.history.push(M,M.state):N==="REPLACE"&&t.history.replace(M,M.state));let D2;if(N==="POP"){let x2=u2.get(S.location.pathname);x2&&x2.has(M.pathname)?D2={currentLocation:S.location,nextLocation:M}:u2.has(M.pathname)&&(D2={currentLocation:M,nextLocation:S.location})}else if(n2){let x2=u2.get(S.location.pathname);x2?x2.add(M.pathname):(x2=new Set([M.pathname]),u2.set(S.location.pathname,x2)),D2={currentLocation:S.location,nextLocation:M}}V2({...j,actionData:h2,loaderData:m2,historyAction:N,location:M,initialized:!0,navigation:th,revalidation:"idle",restoreScrollPosition:b2,preventScrollReset:v2,blockers:f2},{viewTransitionOpts:D2,flushSync:X===!0}),N="POP",O=!1,n2=!1,c2=!1,W=!1,g2==null||g2.resolve(),g2=null}async function L0(M,j){if(typeof M=="number"){t.history.go(M);return}let X=Th(S.location,S.matches,p,M,j==null?void 0:j.fromRouteId,j==null?void 0:j.relative),{path:r2,submission:h2,error:m2}=im(!1,X,j),f2=S.location,b2=Qn(S.location,r2,j&&j.state);b2={...b2,...t.history.encodeLocation(b2)};let v2=j&&j.replace!=null?j.replace:void 0,D2="PUSH";v2===!0?D2="REPLACE":v2===!1||h2!=null&&X0(h2.formMethod)&&h2.formAction===S.location.pathname+S.location.search&&(D2="REPLACE");let B2=j&&"preventScrollReset"in j?j.preventScrollReset===!0:void 0,y2=(j&&j.flushSync)===!0,x2=yi({currentLocation:f2,nextLocation:b2,historyAction:D2});if(x2){Oe(x2,{state:"blocked",location:b2,proceed(){Oe(x2,{state:"proceeding",proceed:void 0,reset:void 0,location:b2}),L0(M,j)},reset(){let q2=new Map(S.blockers);q2.set(x2,Gn),V2({blockers:q2})}});return}await G0(D2,b2,{submission:h2,pendingError:m2,preventScrollReset:B2,replace:j&&j.replace,enableViewTransition:j&&j.viewTransition,flushSync:y2})}function xe(){g2||(g2=fv()),Wa(),V2({revalidation:"loading"});let M=g2.promise;return S.navigation.state==="submitting"?M:S.navigation.state==="idle"?(G0(S.historyAction,S.location,{startUninterruptedRevalidation:!0}),M):(G0(N||S.historyAction,S.navigation.location,{overrideNavigation:S.navigation,enableViewTransition:n2===!0}),M)}async function G0(M,j,X){U&&U.abort(),U=null,N=M,c2=(X&&X.startUninterruptedRevalidation)===!0,so(S.location,S.matches),O=(X&&X.preventScrollReset)===!0,n2=(X&&X.enableViewTransition)===!0;let r2=F||u,h2=X&&X.overrideNavigation,m2=X!=null&&X.initialHydration&&S.matches&&S.matches.length>0&&!x?S.matches:yt(r2,j,p),f2=(X&&X.flushSync)===!0;if(m2&&S.initialized&&!W&&Fv(S.location,j)&&!(X&&X.submission&&X0(X.submission.formMethod))){h0(j,{matches:m2},{flushSync:f2});return}let b2=co(m2,r2,j.pathname);if(b2.active&&b2.matches&&(m2=b2.matches),!m2){let{error:F0,notFoundMatches:T2,route:X2}=jo(j.pathname);h0(j,{matches:T2,loaderData:{},errors:{[X2.id]:F0}},{flushSync:f2});return}U=new AbortController;let v2=_a(t.history,j,U.signal,X&&X.submission),D2=new am(t.unstable_getContext?await t.unstable_getContext():void 0),B2;if(X&&X.pendingError)B2=[Eo(m2).route.id,{type:"error",error:X.pendingError}];else if(X&&X.submission&&X0(X.submission.formMethod)){let F0=await Ua(v2,j,X.submission,m2,D2,b2.active,X&&X.initialHydration===!0,{replace:X.replace,flushSync:f2});if(F0.shortCircuited)return;if(F0.pendingActionResult){let[T2,X2]=F0.pendingActionResult;if(re(X2)&&ti(X2.error)&&X2.error.status===404){U=null,h0(j,{matches:F0.matches,loaderData:{},errors:{[T2]:X2.error}});return}}m2=F0.matches||m2,B2=F0.pendingActionResult,h2=oh(j,X.submission),f2=!1,b2.active=!1,v2=_a(t.history,v2.url,v2.signal)}let{shortCircuited:y2,matches:x2,loaderData:q2,errors:u0}=await Ga(v2,j,m2,D2,b2.active,h2,X&&X.submission,X&&X.fetcherSubmission,X&&X.replace,X&&X.initialHydration===!0,f2,B2);y2||(U=null,h0(j,{matches:x2||m2,...pm(B2),loaderData:q2,errors:u0}))}async function Ua(M,j,X,r2,h2,m2,f2,b2={}){Wa();let v2=pv(j,X);if(V2({navigation:v2},{flushSync:b2.flushSync===!0}),m2){let y2=await lo(r2,j.pathname,M.signal);if(y2.type==="aborted")return{shortCircuited:!0};if(y2.type==="error"){let x2=Eo(y2.partialMatches).route.id;return{matches:y2.partialMatches,pendingActionResult:[x2,{type:"error",error:y2.error}]}}else if(y2.matches)r2=y2.matches;else{let{notFoundMatches:x2,error:q2,route:u0}=jo(j.pathname);return{matches:x2,pendingActionResult:[u0.id,{type:"error",error:q2}]}}}let D2,B2=Xr(r2,j);if(!B2.route.action&&!B2.route.lazy)D2={type:"error",error:Ce(405,{method:M.method,pathname:j.pathname,routeId:B2.route.id})};else{let y2=xa(c,l,M,r2,B2,f2?[]:r,h2),x2=await kt(M,y2,h2,null);if(D2=x2[B2.route.id],!D2){for(let q2 of r2)if(x2[q2.route.id]){D2=x2[q2.route.id];break}}if(M.signal.aborted)return{shortCircuited:!0}}if(xo(D2)){let y2;return b2&&b2.replace!=null?y2=b2.replace:y2=um(D2.response.headers.get("Location"),new URL(M.url),p)===S.location.pathname+S.location.search,await tt(M,D2,!0,{submission:X,replace:y2}),{shortCircuited:!0}}if(re(D2)){let y2=Eo(r2,B2.route.id);return(b2&&b2.replace)!==!0&&(N="PUSH"),{matches:r2,pendingActionResult:[y2.route.id,D2,B2.route.id]}}return{matches:r2,pendingActionResult:[B2.route.id,D2]}}async function Ga(M,j,X,r2,h2,m2,f2,b2,v2,D2,B2,y2){let x2=m2||oh(j,f2),q2=f2||b2||bm(x2),u0=!c2&&!D2;if(h2){if(u0){let y0=z0(y2);V2({navigation:x2,...y0!==void 0?{actionData:y0}:{}},{flushSync:B2})}let H2=await lo(X,j.pathname,M.signal);if(H2.type==="aborted")return{shortCircuited:!0};if(H2.type==="error"){let y0=Eo(H2.partialMatches).route.id;return{matches:H2.partialMatches,loaderData:{},errors:{[y0]:H2.error}}}else if(H2.matches)X=H2.matches;else{let{error:y0,notFoundMatches:ho,route:ue}=jo(j.pathname);return{matches:ho,loaderData:{},errors:{[ue.id]:y0}}}}let F0=F||u,{dsMatches:T2,revalidatingFetchers:X2}=rm(M,r2,c,l,t.history,S,X,q2,j,D2?[]:r,D2===!0,W,F2,a2,$,T,F0,p,t.patchRoutesOnNavigation!=null,y2);if(J=++q,!t.dataStrategy&&!T2.some(H2=>H2.shouldLoad)&&X2.length===0){let H2=no();return h0(j,{matches:X,loaderData:{},errors:y2&&re(y2[1])?{[y2[0]]:y2[1].error}:null,...pm(y2),...H2?{fetchers:new Map(S.fetchers)}:{}},{flushSync:B2}),{shortCircuited:!0}}if(u0){let H2={};if(!h2){H2.navigation=x2;let y0=z0(y2);y0!==void 0&&(H2.actionData=y0)}X2.length>0&&(H2.fetchers=qa(X2)),V2(H2,{flushSync:B2})}X2.forEach(H2=>{ze(H2.key),H2.controller&&I.set(H2.key,H2.controller)});let je=()=>X2.forEach(H2=>ze(H2.key));U&&U.signal.addEventListener("abort",je);let{loaderResults:J0,fetcherResults:O0}=await bi(T2,X2,M,r2);if(M.signal.aborted)return{shortCircuited:!0};U&&U.signal.removeEventListener("abort",je),X2.forEach(H2=>I.delete(H2.key));let he=Pr(J0);if(he)return await tt(M,he.result,!0,{replace:v2}),{shortCircuited:!0};if(he=Pr(O0),he)return T.add(he.key),await tt(M,he.result,!0,{replace:v2}),{shortCircuited:!0};let{loaderData:Uo,errors:Dt}=dm(S,X,J0,y2,X2,O0);D2&&S.errors&&(Dt={...S.errors,...Dt});let at=no(),nt=io(J),it=at||nt||X2.length>0;return{matches:X,loaderData:Uo,errors:Dt,...it?{fetchers:new Map(S.fetchers)}:{}}}function z0(M){if(M&&!re(M[1]))return{[M[0]]:M[1].data};if(S.actionData)return Object.keys(S.actionData).length===0?null:S.actionData}function qa(M){return M.forEach(j=>{let X=S.fetchers.get(j.key),r2=qn(void 0,X?X.data:void 0);S.fetchers.set(j.key,r2)}),new Map(S.fetchers)}async function et(M,j,X,r2){ze(M);let h2=(r2&&r2.flushSync)===!0,m2=F||u,f2=Th(S.location,S.matches,p,X,j,r2==null?void 0:r2.relative),b2=yt(m2,f2,p),v2=co(b2,m2,f2);if(v2.active&&v2.matches&&(b2=v2.matches),!b2){s0(M,j,Ce(404,{pathname:f2}),{flushSync:h2});return}let{path:D2,submission:B2,error:y2}=im(!0,f2,r2);if(y2){s0(M,j,y2,{flushSync:h2});return}let x2=new am(t.unstable_getContext?await t.unstable_getContext():void 0),q2=(r2&&r2.preventScrollReset)===!0;if(B2&&X0(B2.formMethod)){await gi(M,j,D2,b2,x2,v2.active,h2,q2,B2);return}$.set(M,{routeId:j,path:D2}),await Oo(M,j,D2,b2,x2,v2.active,h2,q2,B2)}async function gi(M,j,X,r2,h2,m2,f2,b2,v2){Wa(),$.delete(M);let D2=S.fetchers.get(M);q0(M,mv(v2,D2),{flushSync:f2});let B2=new AbortController,y2=_a(t.history,X,B2.signal,v2);if(m2){let c0=await lo(r2,new URL(y2.url).pathname,y2.signal,M);if(c0.type==="aborted")return;if(c0.type==="error"){s0(M,j,c0.error,{flushSync:f2});return}else if(c0.matches)r2=c0.matches;else{s0(M,j,Ce(404,{pathname:X}),{flushSync:f2});return}}let x2=Xr(r2,X);if(!x2.route.action&&!x2.route.lazy){let c0=Ce(405,{method:v2.formMethod,pathname:X,routeId:j});s0(M,j,c0,{flushSync:f2});return}I.set(M,B2);let q2=q,u0=xa(c,l,y2,r2,x2,r,h2),T2=(await kt(y2,u0,h2,M))[x2.route.id];if(y2.signal.aborted){I.get(M)===B2&&I.delete(M);return}if(a2.has(M)){if(xo(T2)||re(T2)){q0(M,Yt(void 0));return}}else{if(xo(T2))if(I.delete(M),J>q2){q0(M,Yt(void 0));return}else return T.add(M),q0(M,qn(v2)),tt(y2,T2,!1,{fetcherSubmission:v2,preventScrollReset:b2});if(re(T2)){s0(M,j,T2.error);return}}let X2=S.navigation.location||S.location,je=_a(t.history,X2,B2.signal),J0=F||u,O0=S.navigation.state!=="idle"?yt(J0,S.navigation.location,p):S.matches;I2(O0,"Didn't find any matches after fetcher action");let he=++q;Y.set(M,he);let Uo=qn(v2,T2.data);S.fetchers.set(M,Uo);let{dsMatches:Dt,revalidatingFetchers:at}=rm(je,h2,c,l,t.history,S,O0,v2,X2,r,!1,W,F2,a2,$,T,J0,p,t.patchRoutesOnNavigation!=null,[x2.route.id,T2]);at.filter(c0=>c0.key!==M).forEach(c0=>{let wt=c0.key,Bi=S.fetchers.get(wt),ki=qn(void 0,Bi?Bi.data:void 0);S.fetchers.set(wt,ki),ze(wt),c0.controller&&I.set(wt,c0.controller)}),V2({fetchers:new Map(S.fetchers)});let nt=()=>at.forEach(c0=>ze(c0.key));B2.signal.addEventListener("abort",nt);let{loaderResults:it,fetcherResults:H2}=await bi(Dt,at,je,h2);if(B2.signal.aborted)return;if(B2.signal.removeEventListener("abort",nt),Y.delete(M),I.delete(M),at.forEach(c0=>I.delete(c0.key)),S.fetchers.has(M)){let c0=Yt(T2.data);S.fetchers.set(M,c0)}let y0=Pr(it);if(y0)return tt(je,y0.result,!1,{preventScrollReset:b2});if(y0=Pr(H2),y0)return T.add(y0.key),tt(je,y0.result,!1,{preventScrollReset:b2});let{loaderData:ho,errors:ue}=dm(S,O0,it,void 0,at,H2);io(he),S.navigation.state==="loading"&&he>J?(I2(N,"Expected pending action"),U&&U.abort(),h0(S.navigation.location,{matches:O0,loaderData:ho,errors:ue,fetchers:new Map(S.fetchers)})):(V2({errors:ue,loaderData:Am(S.loaderData,ho,O0,ue),fetchers:new Map(S.fetchers)}),W=!1)}async function Oo(M,j,X,r2,h2,m2,f2,b2,v2){let D2=S.fetchers.get(M);q0(M,qn(v2,D2?D2.data:void 0),{flushSync:f2});let B2=new AbortController,y2=_a(t.history,X,B2.signal);if(m2){let X2=await lo(r2,new URL(y2.url).pathname,y2.signal,M);if(X2.type==="aborted")return;if(X2.type==="error"){s0(M,j,X2.error,{flushSync:f2});return}else if(X2.matches)r2=X2.matches;else{s0(M,j,Ce(404,{pathname:X}),{flushSync:f2});return}}let x2=Xr(r2,X);I.set(M,B2);let q2=q,u0=xa(c,l,y2,r2,x2,r,h2),T2=(await kt(y2,u0,h2,M))[x2.route.id];if(I.get(M)===B2&&I.delete(M),!y2.signal.aborted){if(a2.has(M)){q0(M,Yt(void 0));return}if(xo(T2))if(J>q2){q0(M,Yt(void 0));return}else{T.add(M),await tt(y2,T2,!1,{preventScrollReset:b2});return}if(re(T2)){s0(M,j,T2.error);return}q0(M,Yt(T2.data))}}async function tt(M,j,X,{submission:r2,fetcherSubmission:h2,preventScrollReset:m2,replace:f2}={}){j.response.headers.has("X-Remix-Revalidate")&&(W=!0);let b2=j.response.headers.get("Location");I2(b2,"Expected a Location header on the redirect Response"),b2=um(b2,new URL(M.url),p);let v2=Qn(S.location,b2,{_isRedirect:!0});if(i){let u0=!1;if(j.response.headers.has("X-Remix-Reload-Document"))u0=!0;else if(du(b2)){const F0=H3(b2,!0);u0=F0.origin!==a.location.origin||le(F0.pathname,p)==null}if(u0){f2?a.location.replace(b2):a.location.assign(b2);return}}U=null;let D2=f2===!0||j.response.headers.has("X-Remix-Replace")?"REPLACE":"PUSH",{formMethod:B2,formAction:y2,formEncType:x2}=S.navigation;!r2&&!h2&&B2&&y2&&x2&&(r2=bm(S.navigation));let q2=r2||h2;if(JC.has(j.response.status)&&q2&&X0(q2.formMethod))await G0(D2,v2,{submission:{...q2,formAction:b2},preventScrollReset:m2||O,enableViewTransition:X?n2:void 0});else{let u0=oh(v2,r2);await G0(D2,v2,{overrideNavigation:u0,fetcherSubmission:h2,preventScrollReset:m2||O,enableViewTransition:X?n2:void 0})}}async function kt(M,j,X,r2){let h2,m2={};try{h2=await sv(A,M,j,r2,X,!1)}catch(f2){return j.filter(b2=>b2.shouldLoad).forEach(b2=>{m2[b2.route.id]={type:"error",error:f2}}),m2}if(M.signal.aborted)return m2;for(let[f2,b2]of Object.entries(h2))if(dv(b2)){let v2=b2.result;m2[f2]={type:"redirect",response:hv(v2,M,f2,j,p)}}else m2[f2]=await lv(b2);return m2}async function bi(M,j,X,r2){let h2=kt(X,M,r2,null),m2=Promise.all(j.map(async v2=>{if(v2.matches&&v2.match&&v2.request&&v2.controller){let B2=(await kt(v2.request,v2.matches,r2,v2.key))[v2.match.route.id];return{[v2.key]:B2}}else return Promise.resolve({[v2.key]:{type:"error",error:Ce(404,{pathname:v2.path})}})})),f2=await h2,b2=(await m2).reduce((v2,D2)=>Object.assign(v2,D2),{});return{loaderResults:f2,fetcherResults:b2}}function Wa(){W=!0,$.forEach((M,j)=>{I.has(j)&&F2.add(j),ze(j)})}function q0(M,j,X={}){S.fetchers.set(M,j),V2({fetchers:new Map(S.fetchers)},{flushSync:(X&&X.flushSync)===!0})}function s0(M,j,X,r2={}){let h2=Eo(S.matches,j);x0(M),V2({errors:{[h2.route.id]:X},fetchers:new Map(S.fetchers)},{flushSync:(r2&&r2.flushSync)===!0})}function Se(M){return Q.set(M,(Q.get(M)||0)+1),a2.has(M)&&a2.delete(M),S.fetchers.get(M)||$C}function x0(M){let j=S.fetchers.get(M);I.has(M)&&!(j&&j.state==="loading"&&Y.has(M))&&ze(M),$.delete(M),Y.delete(M),T.delete(M),a2.delete(M),F2.delete(M),S.fetchers.delete(M)}function Us(M){let j=(Q.get(M)||0)-1;j<=0?(Q.delete(M),a2.add(M)):Q.set(M,j),V2({fetchers:new Map(S.fetchers)})}function ze(M){let j=I.get(M);j&&(j.abort(),I.delete(M))}function fi(M){for(let j of M){let X=Se(j),r2=Yt(X.data);S.fetchers.set(j,r2)}}function no(){let M=[],j=!1;for(let X of T){let r2=S.fetchers.get(X);I2(r2,`Expected fetcher: ${X}`),r2.state==="loading"&&(T.delete(X),M.push(X),j=!0)}return fi(M),j}function io(M){let j=[];for(let[X,r2]of Y)if(r2<M){let h2=S.fetchers.get(X);I2(h2,`Expected fetcher: ${X}`),h2.state==="loading"&&(ze(X),Y.delete(X),j.push(X))}return fi(j),j.length>0}function ot(M,j){let X=S.blockers.get(M)||Gn;return d2.get(M)!==j&&d2.set(M,j),X}function ro(M){S.blockers.delete(M),d2.delete(M)}function Oe(M,j){let X=S.blockers.get(M)||Gn;I2(X.state==="unblocked"&&j.state==="blocked"||X.state==="blocked"&&j.state==="blocked"||X.state==="blocked"&&j.state==="proceeding"||X.state==="blocked"&&j.state==="unblocked"||X.state==="proceeding"&&j.state==="unblocked",`Invalid blocker state transition: ${X.state} -> ${j.state}`);let r2=new Map(S.blockers);r2.set(M,j),V2({blockers:r2})}function yi({currentLocation:M,nextLocation:j,historyAction:X}){if(d2.size===0)return;d2.size>1&&p0(!1,"A router only supports one blocker at a time");let r2=Array.from(d2.entries()),[h2,m2]=r2[r2.length-1],f2=S.blockers.get(h2);if(!(f2&&f2.state==="proceeding")&&m2({currentLocation:M,nextLocation:j,historyAction:X}))return h2}function jo(M){let j=Ce(404,{pathname:M}),X=F||u,{matches:r2,route:h2}=mm(X);return{notFoundMatches:r2,route:h2,error:j}}function Ci(M,j,X){if(C=M,v=j,B=X||null,!D&&S.navigation===th){D=!0;let r2=vi(S.location,S.matches);r2!=null&&V2({restoreScrollPosition:r2})}return()=>{C=null,v=null,B=null}}function Vo(M,j){return B&&B(M,j.map(r2=>z3(r2,S.loaderData)))||M.key}function so(M,j){if(C&&v){let X=Vo(M,j);C[X]=v()}}function vi(M,j){if(C){let X=Vo(M,j),r2=C[X];if(typeof r2=="number")return r2}return null}function co(M,j,X){if(t.patchRoutesOnNavigation)if(M){if(Object.keys(M[0].params).length>0)return{active:!0,matches:Yr(j,X,p,!0)}}else return{active:!0,matches:Yr(j,X,p,!0)||[]};return{active:!1,matches:null}}async function lo(M,j,X,r2){if(!t.patchRoutesOnNavigation)return{type:"success",matches:M};let h2=M;for(;;){let m2=F==null,f2=F||u,b2=l;try{await t.patchRoutesOnNavigation({signal:X,path:j,matches:h2,fetcherKey:r2,patch:(B2,y2)=>{X.aborted||sm(B2,y2,f2,b2,c,!1)}})}catch(B2){return{type:"error",error:B2,partialMatches:h2}}finally{m2&&!X.aborted&&(u=[...u])}if(X.aborted)return{type:"aborted"};let v2=yt(f2,j,p);if(v2)return{type:"success",matches:v2};let D2=Yr(f2,j,p,!0);if(!D2||h2.length===D2.length&&h2.every((B2,y2)=>B2.route.id===D2[y2].route.id))return{type:"success",matches:null};h2=D2}}function Ka(M){l={},F=ei(M,c,void 0,l)}function Za(M,j,X=!1){let r2=F==null;sm(M,j,F||u,l,c,X),r2&&(u=[...u],V2({}))}return P={get basename(){return p},get future(){return b},get state(){return S},get routes(){return u},get window(){return a},initialize:K2,subscribe:L2,enableScrollRestoration:Ci,navigate:L0,fetch:et,revalidate:xe,createHref:M=>t.history.createHref(M),encodeLocation:M=>t.history.encodeLocation(M),getFetcher:Se,deleteFetcher:Us,dispose:_2,getBlocker:ot,deleteBlocker:ro,patchRoutes:Za,_internalFetchControllers:I,_internalSetRoutes:Ka,_internalSetStateDoNotUseOrYouWillBreakYourApp(M){V2(M)}},P}function ov(t){return t!=null&&("formData"in t&&t.formData!=null||"body"in t&&t.body!==void 0)}function Th(t,a,i,r,c,l){let u,F;if(c){u=[];for(let A of a)if(u.push(A),A.route.id===c){F=A;break}}else u=a,F=a[a.length-1];let p=Fu(r||".",uu(u),le(t.pathname,i)||t.pathname,l==="path");if(r==null&&(p.search=t.search,p.hash=t.hash),(r==null||r===""||r===".")&&F){let A=Au(p.search);if(F.route.index&&!A)p.search=p.search?p.search.replace(/^\?/,"?index&"):"?index";else if(!F.route.index&&A){let b=new URLSearchParams(p.search),m=b.getAll("index");b.delete("index"),m.filter(C=>C).forEach(C=>b.append("index",C));let y=b.toString();p.search=y?`?${y}`:""}}return i!=="/"&&(p.pathname=jC({basename:i,pathname:p.pathname})),Jt(p)}function im(t,a,i){if(!i||!ov(i))return{path:a};if(i.formMethod&&!Av(i.formMethod))return{path:a,error:Ce(405,{method:i.formMethod})};let r=()=>({path:a,error:Ce(400,{type:"invalid-body"})}),l=(i.formMethod||"get").toUpperCase(),u=$3(a);if(i.body!==void 0){if(i.formEncType==="text/plain"){if(!X0(l))return r();let m=typeof i.body=="string"?i.body:i.body instanceof FormData||i.body instanceof URLSearchParams?Array.from(i.body.entries()).reduce((y,[C,B])=>`${y}${C}=${B}
`,""):String(i.body);return{path:a,submission:{formMethod:l,formAction:u,formEncType:i.formEncType,formData:void 0,json:void 0,text:m}}}else if(i.formEncType==="application/json"){if(!X0(l))return r();try{let m=typeof i.body=="string"?JSON.parse(i.body):i.body;return{path:a,submission:{formMethod:l,formAction:u,formEncType:i.formEncType,formData:void 0,json:m,text:void 0}}}catch{return r()}}}I2(typeof FormData=="function","FormData is not available in this environment");let F,p;if(i.formData)F=Mh(i.formData),p=i.formData;else if(i.body instanceof FormData)F=Mh(i.body),p=i.body;else if(i.body instanceof URLSearchParams)F=i.body,p=Fm(F);else if(i.body==null)F=new URLSearchParams,p=new FormData;else try{F=new URLSearchParams(i.body),p=Fm(F)}catch{return r()}let A={formMethod:l,formAction:u,formEncType:i&&i.formEncType||"application/x-www-form-urlencoded",formData:p,json:void 0,text:void 0};if(X0(A.formMethod))return{path:a,submission:A};let b=eo(a);return t&&b.search&&Au(b.search)&&F.append("index",""),b.search=`?${F}`,{path:Jt(b),submission:A}}function rm(t,a,i,r,c,l,u,F,p,A,b,m,y,C,B,v,D,w,x,_){var c2;let R=_?re(_[1])?_[1].error:_[1].data:void 0,P=c.createURL(l.location),S=c.createURL(p),N;if(b&&l.errors){let W=Object.keys(l.errors)[0];N=u.findIndex(F2=>F2.route.id===W)}else if(_&&re(_[1])){let W=_[0];N=u.findIndex(F2=>F2.route.id===W)-1}let O=_?_[1].statusCode:void 0,U=O&&O>=400,n2={currentUrl:P,currentParams:((c2=l.matches[0])==null?void 0:c2.params)||{},nextUrl:S,nextParams:u[0].params,...F,actionResult:R,actionStatus:O},u2=u.map((W,F2)=>{let{route:I}=W,q=null;if(N!=null&&F2>N?q=!1:I.lazy?q=!0:I.loader==null?q=!1:b?q=Ph(I,l.loaderData,l.errors):av(l.loaderData,l.matches[F2],W)&&(q=!0),q!==null)return Lh(i,r,t,W,A,a,q);let J=U?!1:m||P.pathname+P.search===S.pathname+S.search||P.search!==S.search||nv(l.matches[F2],W),Y={...n2,defaultShouldRevalidate:J},T=is(W,Y);return Lh(i,r,t,W,A,a,T,Y)}),s2=[];return B.forEach((W,F2)=>{if(b||!u.some(a2=>a2.route.id===W.routeId)||C.has(F2))return;let I=l.fetchers.get(F2),q=I&&I.state!=="idle"&&I.data===void 0,J=yt(D,W.path,w);if(!J){if(x&&q)return;s2.push({key:F2,routeId:W.routeId,path:W.path,matches:null,match:null,request:null,controller:null});return}if(v.has(F2))return;let Y=Xr(J,W.path),T=new AbortController,$=_a(c,W.path,T.signal),Q=null;if(y.has(F2))y.delete(F2),Q=xa(i,r,$,J,Y,A,a);else if(q)m&&(Q=xa(i,r,$,J,Y,A,a));else{let a2={...n2,defaultShouldRevalidate:U?!1:m};is(Y,a2)&&(Q=xa(i,r,$,J,Y,A,a,a2))}Q&&s2.push({key:F2,routeId:W.routeId,path:W.path,matches:Q,match:Y,request:$,controller:T})}),{dsMatches:u2,revalidatingFetchers:s2}}function Ph(t,a,i){if(t.lazy)return!0;if(!t.loader)return!1;let r=a!=null&&t.id in a,c=i!=null&&i[t.id]!==void 0;return!r&&c?!1:typeof t.loader=="function"&&t.loader.hydrate===!0?!0:!r&&!c}function av(t,a,i){let r=!a||i.route.id!==a.route.id,c=!t.hasOwnProperty(i.route.id);return r||c}function nv(t,a){let i=t.route.path;return t.pathname!==a.pathname||i!=null&&i.endsWith("*")&&t.params["*"]!==a.params["*"]}function is(t,a){if(t.route.shouldRevalidate){let i=t.route.shouldRevalidate(a);if(typeof i=="boolean")return i}return a.defaultShouldRevalidate}function sm(t,a,i,r,c,l){let u;if(t){let A=r[t];I2(A,`No route found to patch children into: routeId = ${t}`),A.children||(A.children=[]),u=A.children}else u=i;let F=[],p=[];if(a.forEach(A=>{let b=u.find(m=>K3(A,m));b?p.push({existingRoute:b,newRoute:A}):F.push(A)}),F.length>0){let A=ei(F,c,[t||"_","patch",String((u==null?void 0:u.length)||"0")],r);u.push(...A)}if(l&&p.length>0)for(let A=0;A<p.length;A++){let{existingRoute:b,newRoute:m}=p[A],y=b,[C]=ei([m],c,[],{},!0);Object.assign(y,{element:C.element?C.element:y.element,errorElement:C.errorElement?C.errorElement:y.errorElement,hydrateFallbackElement:C.hydrateFallbackElement?C.hydrateFallbackElement:y.hydrateFallbackElement})}}function K3(t,a){return"id"in t&&"id"in a&&t.id===a.id?!0:t.index===a.index&&t.path===a.path&&t.caseSensitive===a.caseSensitive?(!t.children||t.children.length===0)&&(!a.children||a.children.length===0)?!0:t.children.every((i,r)=>{var c;return(c=a.children)==null?void 0:c.some(l=>K3(i,l))}):!1}var cm=new WeakMap,Z3=({key:t,route:a,manifest:i,mapRouteProperties:r})=>{let c=i[a.id];if(I2(c,"No route found in manifest"),!c.lazy||typeof c.lazy!="object")return;let l=c.lazy[t];if(!l)return;let u=cm.get(c);u||(u={},cm.set(c,u));let F=u[t];if(F)return F;let p=(async()=>{let A=wC(t),m=c[t]!==void 0&&t!=="hasErrorBoundary";if(A)p0(!A,"Route property "+t+" is not a supported lazy route property. This property will be ignored."),u[t]=Promise.resolve();else if(m)p0(!1,`Route "${c.id}" has a static property "${t}" defined. The lazy property will be ignored.`);else{let y=await l();y!=null&&(Object.assign(c,{[t]:y}),Object.assign(c,r(c)))}typeof c.lazy=="object"&&(c.lazy[t]=void 0,Object.values(c.lazy).every(y=>y===void 0)&&(c.lazy=void 0))})();return u[t]=p,p},lm=new WeakMap;function iv(t,a,i,r,c){let l=i[t.id];if(I2(l,"No route found in manifest"),!t.lazy)return{lazyRoutePromise:void 0,lazyHandlerPromise:void 0};if(typeof t.lazy=="function"){let b=lm.get(l);if(b)return{lazyRoutePromise:b,lazyHandlerPromise:b};let m=(async()=>{I2(typeof t.lazy=="function","No lazy route function found");let y=await t.lazy(),C={};for(let B in y){let v=y[B];if(v===void 0)continue;let D=EC(B),x=l[B]!==void 0&&B!=="hasErrorBoundary";D?p0(!D,"Route property "+B+" is not a supported property to be returned from a lazy route function. This property will be ignored."):x?p0(!x,`Route "${l.id}" has a static property "${B}" defined but its lazy function is also returning a value for this property. The lazy route property "${B}" will be ignored.`):C[B]=v}Object.assign(l,C),Object.assign(l,{...r(l),lazy:void 0})})();return lm.set(l,m),m.catch(()=>{}),{lazyRoutePromise:m,lazyHandlerPromise:m}}let u=Object.keys(t.lazy),F=[],p;for(let b of u){if(c&&c.includes(b))continue;let m=Z3({key:b,route:t,manifest:i,mapRouteProperties:r});m&&(F.push(m),b===a&&(p=m))}let A=F.length>0?Promise.all(F).then(()=>{}):void 0;return A==null||A.catch(()=>{}),p==null||p.catch(()=>{}),{lazyRoutePromise:A,lazyHandlerPromise:p}}async function hm(t){let a=t.matches.filter(c=>c.shouldLoad),i={};return(await Promise.all(a.map(c=>c.resolve()))).forEach((c,l)=>{i[a[l].route.id]=c}),i}async function rv(t){return t.matches.some(a=>a.route.unstable_middleware)?Y3(t,!1,()=>hm(t),(a,i)=>({[i]:{type:"error",result:a}})):hm(t)}async function Y3(t,a,i,r){let{matches:c,request:l,params:u,context:F}=t,p={handlerResult:void 0};try{let A=c.flatMap(m=>m.route.unstable_middleware?m.route.unstable_middleware.map(y=>[m.route.id,y]):[]),b=await X3({request:l,params:u,context:F},A,a,p,i);return a?b:p.handlerResult}catch(A){if(!p.middlewareError)throw A;let b=await r(p.middlewareError.error,p.middlewareError.routeId);return p.handlerResult?Object.assign(p.handlerResult,b):b}}async function X3(t,a,i,r,c,l=0){let{request:u}=t;if(u.signal.aborted)throw u.signal.reason?u.signal.reason:new Error(`Request aborted without an \`AbortSignal.reason\`: ${u.method} ${u.url}`);let F=a[l];if(!F)return r.handlerResult=await c(),r.handlerResult;let[p,A]=F,b=!1,m,y=async()=>{if(b)throw new Error("You may only call `next()` once per middleware");b=!0,await X3(t,a,i,r,c,l+1)};try{let C=await A({request:t.request,params:t.params,context:t.context},y);return b?C===void 0?m:C:y()}catch(C){throw r.middlewareError?r.middlewareError.error!==C&&(r.middlewareError={routeId:p,error:C}):r.middlewareError={routeId:p,error:C},C}}function J3(t,a,i,r,c){let l=Z3({key:"unstable_middleware",route:r.route,manifest:a,mapRouteProperties:t}),u=iv(r.route,X0(i.method)?"action":"loader",a,t,c);return{middleware:l,route:u.lazyRoutePromise,handler:u.lazyHandlerPromise}}function Lh(t,a,i,r,c,l,u,F=null){let p=!1,A=J3(t,a,i,r,c);return{...r,_lazyPromises:A,shouldLoad:u,unstable_shouldRevalidateArgs:F,unstable_shouldCallHandler(b){return p=!0,F?typeof b=="boolean"?is(r,{...F,defaultShouldRevalidate:b}):is(r,F):u},resolve(b){return p||u||b&&!X0(i.method)&&(r.route.lazy||r.route.loader)?cv({request:i,match:r,lazyHandlerPromise:A==null?void 0:A.handler,lazyRoutePromise:A==null?void 0:A.route,handlerOverride:b,scopedContext:l}):Promise.resolve({type:"data",result:void 0})}}}function xa(t,a,i,r,c,l,u,F=null){return r.map(p=>p.route.id!==c.route.id?{...p,shouldLoad:!1,unstable_shouldRevalidateArgs:F,unstable_shouldCallHandler:()=>!1,_lazyPromises:J3(t,a,i,p,l),resolve:()=>Promise.resolve({type:"data",result:void 0})}:Lh(t,a,i,p,l,u,!0,F))}async function sv(t,a,i,r,c,l){i.some(A=>{var b;return(b=A._lazyPromises)==null?void 0:b.middleware})&&await Promise.all(i.map(A=>{var b;return(b=A._lazyPromises)==null?void 0:b.middleware}));let u={request:a,params:i[0].params,context:c,matches:i},p=await t({...u,fetcherKey:r,unstable_runClientMiddleware:A=>{let b=u;return Y3(b,!1,()=>A({...b,fetcherKey:r,unstable_runClientMiddleware:()=>{throw new Error("Cannot call `unstable_runClientMiddleware()` from within an `unstable_runClientMiddleware` handler")}}),(m,y)=>({[y]:{type:"error",result:m}}))}});try{await Promise.all(i.flatMap(A=>{var b,m;return[(b=A._lazyPromises)==null?void 0:b.handler,(m=A._lazyPromises)==null?void 0:m.route]}))}catch{}return p}async function cv({request:t,match:a,lazyHandlerPromise:i,lazyRoutePromise:r,handlerOverride:c,scopedContext:l}){let u,F,p=X0(t.method),A=p?"action":"loader",b=m=>{let y,C=new Promise((D,w)=>y=w);F=()=>y(),t.signal.addEventListener("abort",F);let B=D=>typeof m!="function"?Promise.reject(new Error(`You cannot call the handler for a route which defines a boolean "${A}" [routeId: ${a.route.id}]`)):m({request:t,params:a.params,context:l},...D!==void 0?[D]:[]),v=(async()=>{try{return{type:"data",result:await(c?c(w=>B(w)):B())}}catch(D){return{type:"error",result:D}}})();return Promise.race([v,C])};try{let m=p?a.route.action:a.route.loader;if(i||r)if(m){let y,[C]=await Promise.all([b(m).catch(B=>{y=B}),i,r]);if(y!==void 0)throw y;u=C}else{await i;let y=p?a.route.action:a.route.loader;if(y)[u]=await Promise.all([b(y),r]);else if(A==="action"){let C=new URL(t.url),B=C.pathname+C.search;throw Ce(405,{method:t.method,pathname:B,routeId:a.route.id})}else return{type:"data",result:void 0}}else if(m)u=await b(m);else{let y=new URL(t.url),C=y.pathname+y.search;throw Ce(404,{pathname:C})}}catch(m){return{type:"error",result:m}}finally{F&&t.signal.removeEventListener("abort",F)}return u}async function lv(t){var r,c,l,u,F,p;let{result:a,type:i}=t;if(Q3(a)){let A;try{let b=a.headers.get("Content-Type");b&&/\bapplication\/json\b/.test(b)?a.body==null?A=null:A=await a.json():A=await a.text()}catch(b){return{type:"error",error:b}}return i==="error"?{type:"error",error:new ns(a.status,a.statusText,A),statusCode:a.status,headers:a.headers}:{type:"data",data:A,statusCode:a.status,headers:a.headers}}return i==="error"?gm(a)?a.data instanceof Error?{type:"error",error:a.data,statusCode:(r=a.init)==null?void 0:r.status,headers:(c=a.init)!=null&&c.headers?new Headers(a.init.headers):void 0}:{type:"error",error:new ns(((l=a.init)==null?void 0:l.status)||500,void 0,a.data),statusCode:ti(a)?a.status:void 0,headers:(u=a.init)!=null&&u.headers?new Headers(a.init.headers):void 0}:{type:"error",error:a,statusCode:ti(a)?a.status:void 0}:gm(a)?{type:"data",data:a.data,statusCode:(F=a.init)==null?void 0:F.status,headers:(p=a.init)!=null&&p.headers?new Headers(a.init.headers):void 0}:{type:"data",data:a}}function hv(t,a,i,r,c){let l=t.headers.get("Location");if(I2(l,"Redirects returned/thrown from loaders/actions must have a Location header"),!du(l)){let u=r.slice(0,r.findIndex(F=>F.route.id===i)+1);l=Th(new URL(a.url),u,c,l),t.headers.set("Location",l)}return t}function um(t,a,i){if(du(t)){let r=t,c=r.startsWith("//")?new URL(a.protocol+r):new URL(r),l=le(c.pathname,i)!=null;if(c.origin===a.origin&&l)return c.pathname+c.search+c.hash}return t}function _a(t,a,i,r){let c=t.createURL($3(a)).toString(),l={signal:i};if(r&&X0(r.formMethod)){let{formMethod:u,formEncType:F}=r;l.method=u.toUpperCase(),F==="application/json"?(l.headers=new Headers({"Content-Type":F}),l.body=JSON.stringify(r.json)):F==="text/plain"?l.body=r.text:F==="application/x-www-form-urlencoded"&&r.formData?l.body=Mh(r.formData):l.body=r.formData}return new Request(c,l)}function Mh(t){let a=new URLSearchParams;for(let[i,r]of t.entries())a.append(i,typeof r=="string"?r:r.name);return a}function Fm(t){let a=new FormData;for(let[i,r]of t.entries())a.append(i,r);return a}function uv(t,a,i,r=!1,c=!1){let l={},u=null,F,p=!1,A={},b=i&&re(i[1])?i[1].error:void 0;return t.forEach(m=>{if(!(m.route.id in a))return;let y=m.route.id,C=a[y];if(I2(!xo(C),"Cannot handle redirect results in processLoaderData"),re(C)){let B=C.error;if(b!==void 0&&(B=b,b=void 0),u=u||{},c)u[y]=B;else{let v=Eo(t,y);u[v.route.id]==null&&(u[v.route.id]=B)}r||(l[y]=W3),p||(p=!0,F=ti(C.error)?C.error.status:500),C.headers&&(A[y]=C.headers)}else l[y]=C.data,C.statusCode&&C.statusCode!==200&&!p&&(F=C.statusCode),C.headers&&(A[y]=C.headers)}),b!==void 0&&i&&(u={[i[0]]:b},i[2]&&(l[i[2]]=void 0)),{loaderData:l,errors:u,statusCode:F||200,loaderHeaders:A}}function dm(t,a,i,r,c,l){let{loaderData:u,errors:F}=uv(a,i,r);return c.filter(p=>!p.matches||p.matches.some(A=>A.shouldLoad)).forEach(p=>{let{key:A,match:b,controller:m}=p,y=l[A];if(I2(y,"Did not find corresponding fetcher result"),!(m&&m.signal.aborted))if(re(y)){let C=Eo(t.matches,b==null?void 0:b.route.id);F&&F[C.route.id]||(F={...F,[C.route.id]:y.error}),t.fetchers.delete(A)}else if(xo(y))I2(!1,"Unhandled fetcher revalidation redirect");else{let C=Yt(y.data);t.fetchers.set(A,C)}}),{loaderData:u,errors:F}}function Am(t,a,i,r){let c=Object.entries(a).filter(([,l])=>l!==W3).reduce((l,[u,F])=>(l[u]=F,l),{});for(let l of i){let u=l.route.id;if(!a.hasOwnProperty(u)&&t.hasOwnProperty(u)&&l.route.loader&&(c[u]=t[u]),r&&r.hasOwnProperty(u))break}return c}function pm(t){return t?re(t[1])?{actionData:{}}:{actionData:{[t[0]]:t[1].data}}:{}}function Eo(t,a){return(a?t.slice(0,t.findIndex(r=>r.route.id===a)+1):[...t]).reverse().find(r=>r.route.hasErrorBoundary===!0)||t[0]}function mm(t){let a=t.length===1?t[0]:t.find(i=>i.index||!i.path||i.path==="/")||{id:"__shim-error-route__"};return{matches:[{params:{},pathname:"",pathnameBase:"",route:a}],route:a}}function Ce(t,{pathname:a,routeId:i,method:r,type:c,message:l}={}){let u="Unknown Server Error",F="Unknown @remix-run/router error";return t===400?(u="Bad Request",r&&a&&i?F=`You made a ${r} request to "${a}" but did not provide a \`loader\` for route "${i}", so there is no way to handle the request.`:c==="invalid-body"&&(F="Unable to encode submission body")):t===403?(u="Forbidden",F=`Route "${i}" does not match URL "${a}"`):t===404?(u="Not Found",F=`No route matches URL "${a}"`):t===405&&(u="Method Not Allowed",r&&a&&i?F=`You made a ${r.toUpperCase()} request to "${a}" but did not provide an \`action\` for route "${i}", so there is no way to handle the request.`:r&&(F=`Invalid request method "${r.toUpperCase()}"`)),new ns(t||500,u,new Error(F),!0)}function Pr(t){let a=Object.entries(t);for(let i=a.length-1;i>=0;i--){let[r,c]=a[i];if(xo(c))return{key:r,result:c}}}function $3(t){let a=typeof t=="string"?eo(t):t;return Jt({...a,hash:""})}function Fv(t,a){return t.pathname!==a.pathname||t.search!==a.search?!1:t.hash===""?a.hash!=="":t.hash===a.hash?!0:a.hash!==""}function dv(t){return Q3(t.result)&&XC.has(t.result.status)}function re(t){return t.type==="error"}function xo(t){return(t&&t.type)==="redirect"}function gm(t){return typeof t=="object"&&t!=null&&"type"in t&&"data"in t&&"init"in t&&t.type==="DataWithResponseInit"}function Q3(t){return t!=null&&typeof t.status=="number"&&typeof t.statusText=="string"&&typeof t.headers=="object"&&typeof t.body<"u"}function Av(t){return YC.has(t.toUpperCase())}function X0(t){return KC.has(t.toUpperCase())}function Au(t){return new URLSearchParams(t).getAll("index").some(a=>a==="")}function Xr(t,a){let i=typeof a=="string"?eo(a).search:a.search;if(t[t.length-1].route.index&&Au(i||""))return t[t.length-1];let r=U3(t);return r[r.length-1]}function bm(t){let{formMethod:a,formAction:i,formEncType:r,text:c,formData:l,json:u}=t;if(!(!a||!i||!r)){if(c!=null)return{formMethod:a,formAction:i,formEncType:r,formData:void 0,json:void 0,text:c};if(l!=null)return{formMethod:a,formAction:i,formEncType:r,formData:l,json:void 0,text:void 0};if(u!==void 0)return{formMethod:a,formAction:i,formEncType:r,formData:void 0,json:u,text:void 0}}}function oh(t,a){return a?{state:"loading",location:t,formMethod:a.formMethod,formAction:a.formAction,formEncType:a.formEncType,formData:a.formData,json:a.json,text:a.text}:{state:"loading",location:t,formMethod:void 0,formAction:void 0,formEncType:void 0,formData:void 0,json:void 0,text:void 0}}function pv(t,a){return{state:"submitting",location:t,formMethod:a.formMethod,formAction:a.formAction,formEncType:a.formEncType,formData:a.formData,json:a.json,text:a.text}}function qn(t,a){return t?{state:"loading",formMethod:t.formMethod,formAction:t.formAction,formEncType:t.formEncType,formData:t.formData,json:t.json,text:t.text,data:a}:{state:"loading",formMethod:void 0,formAction:void 0,formEncType:void 0,formData:void 0,json:void 0,text:void 0,data:a}}function mv(t,a){return{state:"submitting",formMethod:t.formMethod,formAction:t.formAction,formEncType:t.formEncType,formData:t.formData,json:t.json,text:t.text,data:a?a.data:void 0}}function Yt(t){return{state:"idle",formMethod:void 0,formAction:void 0,formEncType:void 0,formData:void 0,json:void 0,text:void 0,data:t}}function gv(t,a){try{let i=t.sessionStorage.getItem(q3);if(i){let r=JSON.parse(i);for(let[c,l]of Object.entries(r||{}))l&&Array.isArray(l)&&a.set(c,new Set(l||[]))}}catch{}}function bv(t,a){if(a.size>0){let i={};for(let[r,c]of a)i[r]=[...c];try{t.sessionStorage.setItem(q3,JSON.stringify(i))}catch(r){p0(!1,`Failed to save applied view transitions in sessionStorage (${r}).`)}}}function fv(){let t,a,i=new Promise((r,c)=>{t=async l=>{r(l);try{await i}catch{}},a=async l=>{c(l);try{await i}catch{}}});return{promise:i,resolve:t,reject:a}}var Mo=f.createContext(null);Mo.displayName="DataRouter";var Ia=f.createContext(null);Ia.displayName="DataRouterState";f.createContext(!1);var pu=f.createContext({isTransitioning:!1});pu.displayName="ViewTransition";var eg=f.createContext(new Map);eg.displayName="Fetchers";var yv=f.createContext(null);yv.displayName="Await";var _e=f.createContext(null);_e.displayName="Navigation";var ys=f.createContext(null);ys.displayName="Location";var Bt=f.createContext({outlet:null,matches:[],isDataRoute:!1});Bt.displayName="Route";var mu=f.createContext(null);mu.displayName="RouteError";function Cv(t,{relative:a}={}){I2(Ha(),"useHref() may be used only in the context of a <Router> component.");let{basename:i,navigator:r}=f.useContext(_e),{hash:c,pathname:l,search:u}=ri(t,{relative:a}),F=l;return i!=="/"&&(F=l==="/"?i:Ye([i,l])),r.createHref({pathname:F,search:u,hash:c})}function Ha(){return f.useContext(ys)!=null}function i0(){return I2(Ha(),"useLocation() may be used only in the context of a <Router> component."),f.useContext(ys).location}function vv(t){I2(Ha(),"useMatch() may be used only in the context of a <Router> component.");let{pathname:a}=i0();return f.useMemo(()=>So(t,V3(a)),[a,t])}var tg="You should call navigate() in a React.useEffect(), not when your component is first rendered.";function og(t){f.useContext(_e).static||f.useLayoutEffect(t)}function gu(){let{isDataRoute:t}=f.useContext(Bt);return t?Mv():Bv()}function Bv(){I2(Ha(),"useNavigate() may be used only in the context of a <Router> component.");let t=f.useContext(Mo),{basename:a,navigator:i}=f.useContext(_e),{matches:r}=f.useContext(Bt),{pathname:c}=i0(),l=JSON.stringify(uu(r)),u=f.useRef(!1);return og(()=>{u.current=!0}),f.useCallback((p,A={})=>{if(p0(u.current,tg),!u.current)return;if(typeof p=="number"){i.go(p);return}let b=Fu(p,JSON.parse(l),c,A.relative==="path");t==null&&a!=="/"&&(b.pathname=b.pathname==="/"?a:Ye([a,b.pathname])),(A.replace?i.replace:i.push)(b,A.state,A)},[a,i,l,c,t])}f.createContext(null);function ri(t,{relative:a}={}){let{matches:i}=f.useContext(Bt),{pathname:r}=i0(),c=JSON.stringify(uu(i));return f.useMemo(()=>Fu(t,JSON.parse(c),r,a==="path"),[t,c,r,a])}function kv(t,a,i,r){I2(Ha(),"useRoutes() may be used only in the context of a <Router> component.");let{navigator:c}=f.useContext(_e),{matches:l}=f.useContext(Bt),u=l[l.length-1],F=u?u.params:{},p=u?u.pathname:"/",A=u?u.pathnameBase:"/",b=u&&u.route;{let w=b&&b.path||"";ng(p,!b||w.endsWith("*")||w.endsWith("*?"),`You rendered descendant <Routes> (or called \`useRoutes()\`) at "${p}" (under <Route path="${w}">) but the parent route path has no trailing "*". This means if you navigate deeper, the parent won't match anymore and therefore the child routes will never render.

Please change the parent <Route path="${w}"> to <Route path="${w==="/"?"*":`${w}/*`}">.`)}let m=i0(),y;y=m;let C=y.pathname||"/",B=C;if(A!=="/"){let w=A.replace(/^\//,"").split("/");B="/"+C.replace(/^\//,"").split("/").slice(w.length).join("/")}let v=yt(t,{pathname:B});return p0(b||v!=null,`No routes matched location "${y.pathname}${y.search}${y.hash}" `),p0(v==null||v[v.length-1].route.element!==void 0||v[v.length-1].route.Component!==void 0||v[v.length-1].route.lazy!==void 0,`Matched leaf route at location "${y.pathname}${y.search}${y.hash}" does not have an element or Component. This means it will render an <Outlet /> with a null value by default resulting in an "empty" page.`),xv(v&&v.map(w=>Object.assign({},w,{params:Object.assign({},F,w.params),pathname:Ye([A,c.encodeLocation?c.encodeLocation(w.pathname).pathname:w.pathname]),pathnameBase:w.pathnameBase==="/"?A:Ye([A,c.encodeLocation?c.encodeLocation(w.pathnameBase).pathname:w.pathnameBase])})),l,i,r)}function Dv(){let t=Lv(),a=ti(t)?`${t.status} ${t.statusText}`:t instanceof Error?t.message:JSON.stringify(t),i=t instanceof Error?t.stack:null,r="rgba(200,200,200, 0.5)",c={padding:"0.5rem",backgroundColor:r},l={padding:"2px 4px",backgroundColor:r},u=null;return console.error("Error handled by React Router default ErrorBoundary:",t),u=f.createElement(f.Fragment,null,f.createElement("p",null,"💿 Hey developer 👋"),f.createElement("p",null,"You can provide a way better UX than this when your app throws errors by providing your own ",f.createElement("code",{style:l},"ErrorBoundary")," or"," ",f.createElement("code",{style:l},"errorElement")," prop on your route.")),f.createElement(f.Fragment,null,f.createElement("h2",null,"Unexpected Application Error!"),f.createElement("h3",{style:{fontStyle:"italic"}},a),i?f.createElement("pre",{style:c},i):null,u)}var wv=f.createElement(Dv,null),_v=class extends f.Component{constructor(t){super(t),this.state={location:t.location,revalidation:t.revalidation,error:t.error}}static getDerivedStateFromError(t){return{error:t}}static getDerivedStateFromProps(t,a){return a.location!==t.location||a.revalidation!=="idle"&&t.revalidation==="idle"?{error:t.error,location:t.location,revalidation:t.revalidation}:{error:t.error!==void 0?t.error:a.error,location:a.location,revalidation:t.revalidation||a.revalidation}}componentDidCatch(t,a){console.error("React Router caught the following error during render",t,a)}render(){return this.state.error!==void 0?f.createElement(Bt.Provider,{value:this.props.routeContext},f.createElement(mu.Provider,{value:this.state.error,children:this.props.component})):this.props.children}};function Ev({routeContext:t,match:a,children:i}){let r=f.useContext(Mo);return r&&r.static&&r.staticContext&&(a.route.errorElement||a.route.ErrorBoundary)&&(r.staticContext._deepestRenderedBoundaryId=a.route.id),f.createElement(Bt.Provider,{value:t},i)}function xv(t,a=[],i=null,r=null){if(t==null){if(!i)return null;if(i.errors)t=i.matches;else if(a.length===0&&!i.initialized&&i.matches.length>0)t=i.matches;else return null}let c=t,l=i==null?void 0:i.errors;if(l!=null){let p=c.findIndex(A=>A.route.id&&(l==null?void 0:l[A.route.id])!==void 0);I2(p>=0,`Could not find a matching route for errors on route IDs: ${Object.keys(l).join(",")}`),c=c.slice(0,Math.min(c.length,p+1))}let u=!1,F=-1;if(i)for(let p=0;p<c.length;p++){let A=c[p];if((A.route.HydrateFallback||A.route.hydrateFallbackElement)&&(F=p),A.route.id){let{loaderData:b,errors:m}=i,y=A.route.loader&&!b.hasOwnProperty(A.route.id)&&(!m||m[A.route.id]===void 0);if(A.route.lazy||y){u=!0,F>=0?c=c.slice(0,F+1):c=[c[0]];break}}}return c.reduceRight((p,A,b)=>{let m,y=!1,C=null,B=null;i&&(m=l&&A.route.id?l[A.route.id]:void 0,C=A.route.errorElement||wv,u&&(F<0&&b===0?(ng("route-fallback",!1,"No `HydrateFallback` element provided to render during initial hydration"),y=!0,B=null):F===b&&(y=!0,B=A.route.hydrateFallbackElement||null)));let v=a.concat(c.slice(0,b+1)),D=()=>{let w;return m?w=C:y?w=B:A.route.Component?w=f.createElement(A.route.Component,null):A.route.element?w=A.route.element:w=p,f.createElement(Ev,{match:A,routeContext:{outlet:p,matches:v,isDataRoute:i!=null},children:w})};return i&&(A.route.ErrorBoundary||A.route.errorElement||b===0)?f.createElement(_v,{location:i.location,revalidation:i.revalidation,component:C,error:m,children:D(),routeContext:{outlet:null,matches:v,isDataRoute:!0}}):D()},null)}function bu(t){return`${t} must be used within a data router.  See https://reactrouter.com/en/main/routers/picking-a-router.`}function Sv(t){let a=f.useContext(Mo);return I2(a,bu(t)),a}function fu(t){let a=f.useContext(Ia);return I2(a,bu(t)),a}function Rv(t){let a=f.useContext(Bt);return I2(a,bu(t)),a}function yu(t){let a=Rv(t),i=a.matches[a.matches.length-1];return I2(i.route.id,`${t} can only be used on routes that contain a unique "id"`),i.route.id}function Tv(){return yu("useRouteId")}function Pv(){return fu("useNavigation").navigation}function ag(){let{matches:t,loaderData:a}=fu("useMatches");return f.useMemo(()=>t.map(i=>z3(i,a)),[t,a])}function Lv(){var r;let t=f.useContext(mu),a=fu("useRouteError"),i=yu("useRouteError");return t!==void 0?t:(r=a.errors)==null?void 0:r[i]}function Mv(){let{router:t}=Sv("useNavigate"),a=yu("useNavigate"),i=f.useRef(!1);return og(()=>{i.current=!0}),f.useCallback(async(c,l={})=>{p0(i.current,tg),i.current&&(typeof c=="number"?t.navigate(c):await t.navigate(c,{fromRouteId:a,...l}))},[t,a])}var fm={};function ng(t,a,i){!a&&!fm[t]&&(fm[t]=!0,p0(!1,i))}var ym={};function Cm(t,a){!t&&!ym[a]&&(ym[a]=!0,console.warn(a))}function Nv(t){let a={hasErrorBoundary:t.hasErrorBoundary||t.ErrorBoundary!=null||t.errorElement!=null};return t.Component&&(t.element&&p0(!1,"You should not include both `Component` and `element` on your route - `Component` will be used."),Object.assign(a,{element:f.createElement(t.Component),Component:void 0})),t.HydrateFallback&&(t.hydrateFallbackElement&&p0(!1,"You should not include both `HydrateFallback` and `hydrateFallbackElement` on your route - `HydrateFallback` will be used."),Object.assign(a,{hydrateFallbackElement:f.createElement(t.HydrateFallback),HydrateFallback:void 0})),t.ErrorBoundary&&(t.errorElement&&p0(!1,"You should not include both `ErrorBoundary` and `errorElement` on your route - `ErrorBoundary` will be used."),Object.assign(a,{errorElement:f.createElement(t.ErrorBoundary),ErrorBoundary:void 0})),a}var Iv=["HydrateFallback","hydrateFallbackElement"],Hv=class{constructor(){this.status="pending",this.promise=new Promise((t,a)=>{this.resolve=i=>{this.status==="pending"&&(this.status="resolved",t(i))},this.reject=i=>{this.status==="pending"&&(this.status="rejected",a(i))}})}};function zv({router:t,flushSync:a}){let[i,r]=f.useState(t.state),[c,l]=f.useState(),[u,F]=f.useState({isTransitioning:!1}),[p,A]=f.useState(),[b,m]=f.useState(),[y,C]=f.useState(),B=f.useRef(new Map),v=f.useCallback((_,{deletedFetchers:R,flushSync:P,viewTransitionOpts:S})=>{_.fetchers.forEach((O,U)=>{O.data!==void 0&&B.current.set(U,O.data)}),R.forEach(O=>B.current.delete(O)),Cm(P===!1||a!=null,'You provided the `flushSync` option to a router update, but you are not using the `<RouterProvider>` from `react-router/dom` so `ReactDOM.flushSync()` is unavailable.  Please update your app to `import { RouterProvider } from "react-router/dom"` and ensure you have `react-dom` installed as a dependency to use the `flushSync` option.');let N=t.window!=null&&t.window.document!=null&&typeof t.window.document.startViewTransition=="function";if(Cm(S==null||N,"You provided the `viewTransition` option to a router update, but you do not appear to be running in a DOM environment as `window.startViewTransition` is not available."),!S||!N){a&&P?a(()=>r(_)):f.startTransition(()=>r(_));return}if(a&&P){a(()=>{b&&(p&&p.resolve(),b.skipTransition()),F({isTransitioning:!0,flushSync:!0,currentLocation:S.currentLocation,nextLocation:S.nextLocation})});let O=t.window.document.startViewTransition(()=>{a(()=>r(_))});O.finished.finally(()=>{a(()=>{A(void 0),m(void 0),l(void 0),F({isTransitioning:!1})})}),a(()=>m(O));return}b?(p&&p.resolve(),b.skipTransition(),C({state:_,currentLocation:S.currentLocation,nextLocation:S.nextLocation})):(l(_),F({isTransitioning:!0,flushSync:!1,currentLocation:S.currentLocation,nextLocation:S.nextLocation}))},[t.window,a,b,p]);f.useLayoutEffect(()=>t.subscribe(v),[t,v]),f.useEffect(()=>{u.isTransitioning&&!u.flushSync&&A(new Hv)},[u]),f.useEffect(()=>{if(p&&c&&t.window){let _=c,R=p.promise,P=t.window.document.startViewTransition(async()=>{f.startTransition(()=>r(_)),await R});P.finished.finally(()=>{A(void 0),m(void 0),l(void 0),F({isTransitioning:!1})}),m(P)}},[c,p,t.window]),f.useEffect(()=>{p&&c&&i.location.key===c.location.key&&p.resolve()},[p,b,i.location,c]),f.useEffect(()=>{!u.isTransitioning&&y&&(l(y.state),F({isTransitioning:!0,flushSync:!1,currentLocation:y.currentLocation,nextLocation:y.nextLocation}),C(void 0))},[u.isTransitioning,y]);let D=f.useMemo(()=>({createHref:t.createHref,encodeLocation:t.encodeLocation,go:_=>t.navigate(_),push:(_,R,P)=>t.navigate(_,{state:R,preventScrollReset:P==null?void 0:P.preventScrollReset}),replace:(_,R,P)=>t.navigate(_,{replace:!0,state:R,preventScrollReset:P==null?void 0:P.preventScrollReset})}),[t]),w=t.basename||"/",x=f.useMemo(()=>({router:t,navigator:D,static:!1,basename:w}),[t,D,w]);return f.createElement(f.Fragment,null,f.createElement(Mo.Provider,{value:x},f.createElement(Ia.Provider,{value:i},f.createElement(eg.Provider,{value:B.current},f.createElement(pu.Provider,{value:u},f.createElement(Vv,{basename:w,location:i.location,navigationType:i.historyAction,navigator:D},f.createElement(Ov,{routes:t.routes,future:t.future,state:i})))))),null)}var Ov=f.memo(jv);function jv({routes:t,future:a,state:i}){return kv(t,void 0,i,a)}function Vv({basename:t="/",children:a=null,location:i,navigationType:r="POP",navigator:c,static:l=!1}){I2(!Ha(),"You cannot render a <Router> inside another <Router>. You should never have more than one in your app.");let u=t.replace(/^\/*/,"/"),F=f.useMemo(()=>({basename:u,navigator:c,static:l,future:{}}),[u,c,l]);typeof i=="string"&&(i=eo(i));let{pathname:p="/",search:A="",hash:b="",state:m=null,key:y="default"}=i,C=f.useMemo(()=>{let B=le(p,u);return B==null?null:{location:{pathname:B,search:A,hash:b,state:m,key:y},navigationType:r}},[u,p,A,b,m,y,r]);return p0(C!=null,`<Router basename="${u}"> is not able to match the URL "${p}${A}${b}" because it does not start with the basename, so the <Router> won't render anything.`),C==null?null:f.createElement(_e.Provider,{value:F},f.createElement(ys.Provider,{children:a,value:C}))}var Jr="get",$r="application/x-www-form-urlencoded";function Cs(t){return t!=null&&typeof t.tagName=="string"}function Uv(t){return Cs(t)&&t.tagName.toLowerCase()==="button"}function Gv(t){return Cs(t)&&t.tagName.toLowerCase()==="form"}function qv(t){return Cs(t)&&t.tagName.toLowerCase()==="input"}function Wv(t){return!!(t.metaKey||t.altKey||t.ctrlKey||t.shiftKey)}function Kv(t,a){return t.button===0&&(!a||a==="_self")&&!Wv(t)}var Lr=null;function Zv(){if(Lr===null)try{new FormData(document.createElement("form"),0),Lr=!1}catch{Lr=!0}return Lr}var Yv=new Set(["application/x-www-form-urlencoded","multipart/form-data","text/plain"]);function ah(t){return t!=null&&!Yv.has(t)?(p0(!1,`"${t}" is not a valid \`encType\` for \`<Form>\`/\`<fetcher.Form>\` and will default to "${$r}"`),null):t}function Xv(t,a){let i,r,c,l,u;if(Gv(t)){let F=t.getAttribute("action");r=F?le(F,a):null,i=t.getAttribute("method")||Jr,c=ah(t.getAttribute("enctype"))||$r,l=new FormData(t)}else if(Uv(t)||qv(t)&&(t.type==="submit"||t.type==="image")){let F=t.form;if(F==null)throw new Error('Cannot submit a <button> or <input type="submit"> without a <form>');let p=t.getAttribute("formaction")||F.getAttribute("action");if(r=p?le(p,a):null,i=t.getAttribute("formmethod")||F.getAttribute("method")||Jr,c=ah(t.getAttribute("formenctype"))||ah(F.getAttribute("enctype"))||$r,l=new FormData(F,t),!Zv()){let{name:A,type:b,value:m}=t;if(b==="image"){let y=A?`${A}.`:"";l.append(`${y}x`,"0"),l.append(`${y}y`,"0")}else A&&l.append(A,m)}}else{if(Cs(t))throw new Error('Cannot submit element that is not <form>, <button>, or <input type="submit|image">');i=Jr,r=null,c=$r,u=t}return l&&c==="text/plain"&&(u=l,l=void 0),{action:r,method:i.toLowerCase(),encType:c,formData:l,body:u}}Object.getOwnPropertyNames(Object.prototype).sort().join("\0");function Cu(t,a){if(t===!1||t===null||typeof t>"u")throw new Error(a)}function Jv(t,a,i){let r=typeof t=="string"?new URL(t,typeof window>"u"?"server://singlefetch/":window.location.origin):t;return r.pathname==="/"?r.pathname=`_root.${i}`:a&&le(r.pathname,a)==="/"?r.pathname=`${a.replace(/\/$/,"")}/_root.${i}`:r.pathname=`${r.pathname.replace(/\/$/,"")}.${i}`,r}async function $v(t,a){if(t.id in a)return a[t.id];try{let i=await import(t.module);return a[t.id]=i,i}catch(i){return console.error(`Error loading route module \`${t.module}\`, reloading page...`),console.error(i),window.__reactRouterContext&&window.__reactRouterContext.isSpaMode,window.location.reload(),new Promise(()=>{})}}function Qv(t){return t==null?!1:t.href==null?t.rel==="preload"&&typeof t.imageSrcSet=="string"&&typeof t.imageSizes=="string":typeof t.rel=="string"&&typeof t.href=="string"}async function e1(t,a,i){let r=await Promise.all(t.map(async c=>{let l=a.routes[c.route.id];if(l){let u=await $v(l,i);return u.links?u.links():[]}return[]}));return n1(r.flat(1).filter(Qv).filter(c=>c.rel==="stylesheet"||c.rel==="preload").map(c=>c.rel==="stylesheet"?{...c,rel:"prefetch",as:"style"}:{...c,rel:"prefetch"}))}function vm(t,a,i,r,c,l){let u=(p,A)=>i[A]?p.route.id!==i[A].route.id:!0,F=(p,A)=>{var b;return i[A].pathname!==p.pathname||((b=i[A].route.path)==null?void 0:b.endsWith("*"))&&i[A].params["*"]!==p.params["*"]};return l==="assets"?a.filter((p,A)=>u(p,A)||F(p,A)):l==="data"?a.filter((p,A)=>{var m;let b=r.routes[p.route.id];if(!b||!b.hasLoader)return!1;if(u(p,A)||F(p,A))return!0;if(p.route.shouldRevalidate){let y=p.route.shouldRevalidate({currentUrl:new URL(c.pathname+c.search+c.hash,window.origin),currentParams:((m=i[0])==null?void 0:m.params)||{},nextUrl:new URL(t,window.origin),nextParams:p.params,defaultShouldRevalidate:!0});if(typeof y=="boolean")return y}return!0}):[]}function t1(t,a,{includeHydrateFallback:i}={}){return o1(t.map(r=>{let c=a.routes[r.route.id];if(!c)return[];let l=[c.module];return c.clientActionModule&&(l=l.concat(c.clientActionModule)),c.clientLoaderModule&&(l=l.concat(c.clientLoaderModule)),i&&c.hydrateFallbackModule&&(l=l.concat(c.hydrateFallbackModule)),c.imports&&(l=l.concat(c.imports)),l}).flat(1))}function o1(t){return[...new Set(t)]}function a1(t){let a={},i=Object.keys(t).sort();for(let r of i)a[r]=t[r];return a}function n1(t,a){let i=new Set;return new Set(a),t.reduce((r,c)=>{let l=JSON.stringify(a1(c));return i.has(l)||(i.add(l),r.push({key:l,link:c})),r},[])}function ig(){let t=f.useContext(Mo);return Cu(t,"You must render this element inside a <DataRouterContext.Provider> element"),t}function i1(){let t=f.useContext(Ia);return Cu(t,"You must render this element inside a <DataRouterStateContext.Provider> element"),t}var vs=f.createContext(void 0);vs.displayName="FrameworkContext";function rg(){let t=f.useContext(vs);return Cu(t,"You must render this element inside a <HydratedRouter> element"),t}function r1(t,a){let i=f.useContext(vs),[r,c]=f.useState(!1),[l,u]=f.useState(!1),{onFocus:F,onBlur:p,onMouseEnter:A,onMouseLeave:b,onTouchStart:m}=a,y=f.useRef(null);f.useEffect(()=>{if(t==="render"&&u(!0),t==="viewport"){let v=w=>{w.forEach(x=>{u(x.isIntersecting)})},D=new IntersectionObserver(v,{threshold:.5});return y.current&&D.observe(y.current),()=>{D.disconnect()}}},[t]),f.useEffect(()=>{if(r){let v=setTimeout(()=>{u(!0)},100);return()=>{clearTimeout(v)}}},[r]);let C=()=>{c(!0)},B=()=>{c(!1),u(!1)};return i?t!=="intent"?[l,y,{}]:[l,y,{onFocus:Wn(F,C),onBlur:Wn(p,B),onMouseEnter:Wn(A,C),onMouseLeave:Wn(b,B),onTouchStart:Wn(m,C)}]:[!1,y,{}]}function Wn(t,a){return i=>{t&&t(i),i.defaultPrevented||a(i)}}function s1({page:t,...a}){let{router:i}=ig(),r=f.useMemo(()=>yt(i.routes,t,i.basename),[i.routes,t,i.basename]);return r?f.createElement(l1,{page:t,matches:r,...a}):null}function c1(t){let{manifest:a,routeModules:i}=rg(),[r,c]=f.useState([]);return f.useEffect(()=>{let l=!1;return e1(t,a,i).then(u=>{l||c(u)}),()=>{l=!0}},[t,a,i]),r}function l1({page:t,matches:a,...i}){let r=i0(),{manifest:c,routeModules:l}=rg(),{basename:u}=ig(),{loaderData:F,matches:p}=i1(),A=f.useMemo(()=>vm(t,a,p,c,r,"data"),[t,a,p,c,r]),b=f.useMemo(()=>vm(t,a,p,c,r,"assets"),[t,a,p,c,r]),m=f.useMemo(()=>{if(t===r.pathname+r.search+r.hash)return[];let B=new Set,v=!1;if(a.forEach(w=>{var _;let x=c.routes[w.route.id];!x||!x.hasLoader||(!A.some(R=>R.route.id===w.route.id)&&w.route.id in F&&((_=l[w.route.id])!=null&&_.shouldRevalidate)||x.hasClientLoader?v=!0:B.add(w.route.id))}),B.size===0)return[];let D=Jv(t,u,"data");return v&&B.size>0&&D.searchParams.set("_routes",a.filter(w=>B.has(w.route.id)).map(w=>w.route.id).join(",")),[D.pathname+D.search]},[u,F,r,c,A,a,t,l]),y=f.useMemo(()=>t1(b,c),[b,c]),C=c1(b);return f.createElement(f.Fragment,null,m.map(B=>f.createElement("link",{key:B,rel:"prefetch",as:"fetch",href:B,...i})),y.map(B=>f.createElement("link",{key:B,rel:"modulepreload",href:B,...i})),C.map(({key:B,link:v})=>f.createElement("link",{key:B,...v})))}function h1(...t){return a=>{t.forEach(i=>{typeof i=="function"?i(a):i!=null&&(i.current=a)})}}var sg=typeof window<"u"&&typeof window.document<"u"&&typeof window.document.createElement<"u";try{sg&&(window.__reactRouterVersion="7.7.0")}catch{}function u1(t,a){return tv({basename:a==null?void 0:a.basename,unstable_getContext:a==null?void 0:a.unstable_getContext,future:a==null?void 0:a.future,history:vC({window:a==null?void 0:a.window}),hydrationData:(a==null?void 0:a.hydrationData)||F1(),routes:t,mapRouteProperties:Nv,hydrationRouteProperties:Iv,dataStrategy:a==null?void 0:a.dataStrategy,patchRoutesOnNavigation:a==null?void 0:a.patchRoutesOnNavigation,window:a==null?void 0:a.window}).initialize()}function F1(){let t=window==null?void 0:window.__staticRouterHydrationData;return t&&t.errors&&(t={...t,errors:d1(t.errors)}),t}function d1(t){if(!t)return null;let a=Object.entries(t),i={};for(let[r,c]of a)if(c&&c.__type==="RouteErrorResponse")i[r]=new ns(c.status,c.statusText,c.data,c.internal===!0);else if(c&&c.__type==="Error"){if(c.__subType){let l=window[c.__subType];if(typeof l=="function")try{let u=new l(c.message);u.stack="",i[r]=u}catch{}}if(i[r]==null){let l=new Error(c.message);l.stack="",i[r]=l}}else i[r]=c;return i}var cg=/^(?:[a-z][a-z0-9+.-]*:|\/\/)/i,za=f.forwardRef(function({onClick:a,discover:i="render",prefetch:r="none",relative:c,reloadDocument:l,replace:u,state:F,target:p,to:A,preventScrollReset:b,viewTransition:m,...y},C){let{basename:B}=f.useContext(_e),v=typeof A=="string"&&cg.test(A),D,w=!1;if(typeof A=="string"&&v&&(D=A,sg))try{let U=new URL(window.location.href),n2=A.startsWith("//")?new URL(U.protocol+A):new URL(A),u2=le(n2.pathname,B);n2.origin===U.origin&&u2!=null?A=u2+n2.search+n2.hash:w=!0}catch{p0(!1,`<Link to="${A}"> contains an invalid URL which will probably break when clicked - please update to a valid URL path.`)}let x=Cv(A,{relative:c}),[_,R,P]=r1(r,y),S=g1(A,{replace:u,state:F,target:p,preventScrollReset:b,relative:c,viewTransition:m});function N(U){a&&a(U),U.defaultPrevented||S(U)}let O=f.createElement("a",{...y,...P,href:D||x,onClick:w||l?a:N,ref:h1(C,R),target:p,"data-discover":!v&&i==="render"?"true":void 0});return _&&!v?f.createElement(f.Fragment,null,O,f.createElement(s1,{page:x})):O});za.displayName="Link";var A1=f.forwardRef(function({"aria-current":a="page",caseSensitive:i=!1,className:r="",end:c=!1,style:l,to:u,viewTransition:F,children:p,...A},b){let m=ri(u,{relative:A.relative}),y=i0(),C=f.useContext(Ia),{navigator:B,basename:v}=f.useContext(_e),D=C!=null&&k1(m)&&F===!0,w=B.encodeLocation?B.encodeLocation(m).pathname:m.pathname,x=y.pathname,_=C&&C.navigation&&C.navigation.location?C.navigation.location.pathname:null;i||(x=x.toLowerCase(),_=_?_.toLowerCase():null,w=w.toLowerCase()),_&&v&&(_=le(_,v)||_);const R=w!=="/"&&w.endsWith("/")?w.length-1:w.length;let P=x===w||!c&&x.startsWith(w)&&x.charAt(R)==="/",S=_!=null&&(_===w||!c&&_.startsWith(w)&&_.charAt(w.length)==="/"),N={isActive:P,isPending:S,isTransitioning:D},O=P?a:void 0,U;typeof r=="function"?U=r(N):U=[r,P?"active":null,S?"pending":null,D?"transitioning":null].filter(Boolean).join(" ");let n2=typeof l=="function"?l(N):l;return f.createElement(za,{...A,"aria-current":O,className:U,ref:b,style:n2,to:u,viewTransition:F},typeof p=="function"?p(N):p)});A1.displayName="NavLink";var p1=f.forwardRef(({discover:t="render",fetcherKey:a,navigate:i,reloadDocument:r,replace:c,state:l,method:u=Jr,action:F,onSubmit:p,relative:A,preventScrollReset:b,viewTransition:m,...y},C)=>{let B=y1(),v=C1(F,{relative:A}),D=u.toLowerCase()==="get"?"get":"post",w=typeof F=="string"&&cg.test(F),x=_=>{if(p&&p(_),_.defaultPrevented)return;_.preventDefault();let R=_.nativeEvent.submitter,P=(R==null?void 0:R.getAttribute("formmethod"))||u;B(R||_.currentTarget,{fetcherKey:a,method:P,navigate:i,replace:c,state:l,relative:A,preventScrollReset:b,viewTransition:m})};return f.createElement("form",{ref:C,method:D,action:v,onSubmit:r?p:x,...y,"data-discover":!w&&t==="render"?"true":void 0})});p1.displayName="Form";function lg({getKey:t,storageKey:a,...i}){let r=f.useContext(vs),{basename:c}=f.useContext(_e),l=i0(),u=ag();v1({getKey:t,storageKey:a});let F=f.useMemo(()=>{if(!r||!t)return null;let A=Ih(l,u,c,t);return A!==l.key?A:null},[]);if(!r||r.isSpaMode)return null;let p=((A,b)=>{if(!window.history.state||!window.history.state.key){let m=Math.random().toString(32).slice(2);window.history.replaceState({key:m},"")}try{let y=JSON.parse(sessionStorage.getItem(A)||"{}")[b||window.history.state.key];typeof y=="number"&&window.scrollTo(0,y)}catch(m){console.error(m),sessionStorage.removeItem(A)}}).toString();return f.createElement("script",{...i,suppressHydrationWarning:!0,dangerouslySetInnerHTML:{__html:`(${p})(${JSON.stringify(a||Nh)}, ${JSON.stringify(F)})`}})}lg.displayName="ScrollRestoration";function hg(t){return`${t} must be used within a data router.  See https://reactrouter.com/en/main/routers/picking-a-router.`}function vu(t){let a=f.useContext(Mo);return I2(a,hg(t)),a}function m1(t){let a=f.useContext(Ia);return I2(a,hg(t)),a}function g1(t,{target:a,replace:i,state:r,preventScrollReset:c,relative:l,viewTransition:u}={}){let F=gu(),p=i0(),A=ri(t,{relative:l});return f.useCallback(b=>{if(Kv(b,a)){b.preventDefault();let m=i!==void 0?i:Jt(p)===Jt(A);F(t,{replace:m,state:r,preventScrollReset:c,relative:l,viewTransition:u})}},[p,F,A,i,r,a,t,c,l,u])}var b1=0,f1=()=>`__${String(++b1)}__`;function y1(){let{router:t}=vu("useSubmit"),{basename:a}=f.useContext(_e),i=Tv();return f.useCallback(async(r,c={})=>{let{action:l,method:u,encType:F,formData:p,body:A}=Xv(r,a);if(c.navigate===!1){let b=c.fetcherKey||f1();await t.fetch(b,i,c.action||l,{preventScrollReset:c.preventScrollReset,formData:p,body:A,formMethod:c.method||u,formEncType:c.encType||F,flushSync:c.flushSync})}else await t.navigate(c.action||l,{preventScrollReset:c.preventScrollReset,formData:p,body:A,formMethod:c.method||u,formEncType:c.encType||F,replace:c.replace,state:c.state,fromRouteId:i,flushSync:c.flushSync,viewTransition:c.viewTransition})},[t,a,i])}function C1(t,{relative:a}={}){let{basename:i}=f.useContext(_e),r=f.useContext(Bt);I2(r,"useFormAction must be used inside a RouteContext");let[c]=r.matches.slice(-1),l={...ri(t||".",{relative:a})},u=i0();if(t==null){l.search=u.search;let F=new URLSearchParams(l.search),p=F.getAll("index");if(p.some(b=>b==="")){F.delete("index"),p.filter(m=>m).forEach(m=>F.append("index",m));let b=F.toString();l.search=b?`?${b}`:""}}return(!t||t===".")&&c.route.index&&(l.search=l.search?l.search.replace(/^\?/,"?index&"):"?index"),i!=="/"&&(l.pathname=l.pathname==="/"?i:Ye([i,l.pathname])),Jt(l)}var Nh="react-router-scroll-positions",Mr={};function Ih(t,a,i,r){let c=null;return r&&(i!=="/"?c=r({...t,pathname:le(t.pathname,i)||t.pathname},a):c=r(t,a)),c==null&&(c=t.key),c}function v1({getKey:t,storageKey:a}={}){let{router:i}=vu("useScrollRestoration"),{restoreScrollPosition:r,preventScrollReset:c}=m1("useScrollRestoration"),{basename:l}=f.useContext(_e),u=i0(),F=ag(),p=Pv();f.useEffect(()=>(window.history.scrollRestoration="manual",()=>{window.history.scrollRestoration="auto"}),[]),B1(f.useCallback(()=>{if(p.state==="idle"){let A=Ih(u,F,l,t);Mr[A]=window.scrollY}try{sessionStorage.setItem(a||Nh,JSON.stringify(Mr))}catch(A){p0(!1,`Failed to save scroll positions in sessionStorage, <ScrollRestoration /> will not work properly (${A}).`)}window.history.scrollRestoration="auto"},[p.state,t,l,u,F,a])),typeof document<"u"&&(f.useLayoutEffect(()=>{try{let A=sessionStorage.getItem(a||Nh);A&&(Mr=JSON.parse(A))}catch{}},[a]),f.useLayoutEffect(()=>{let A=i==null?void 0:i.enableScrollRestoration(Mr,()=>window.scrollY,t?(b,m)=>Ih(b,m,l,t):void 0);return()=>A&&A()},[i,l,t]),f.useLayoutEffect(()=>{if(r!==!1){if(typeof r=="number"){window.scrollTo(0,r);return}try{if(u.hash){let A=document.getElementById(decodeURIComponent(u.hash.slice(1)));if(A){A.scrollIntoView();return}}}catch{p0(!1,`"${u.hash.slice(1)}" is not a decodable element ID. The view will not scroll to it.`)}c!==!0&&window.scrollTo(0,0)}},[u,r,c]))}function B1(t,a){let{capture:i}={};f.useEffect(()=>{let r=i!=null?{capture:i}:void 0;return window.addEventListener("pagehide",t,r),()=>{window.removeEventListener("pagehide",t,r)}},[t,i])}function k1(t,a={}){let i=f.useContext(pu);I2(i!=null,"`useViewTransitionState` must be used within `react-router-dom`'s `RouterProvider`.  Did you accidentally import `RouterProvider` from `react-router`?");let{basename:r}=vu("useViewTransitionState"),c=ri(t,{relative:a.relative});if(!i.isTransitioning)return!1;let l=le(i.currentLocation.pathname,r)||i.currentLocation.pathname,u=le(i.nextLocation.pathname,r)||i.nextLocation.pathname;return So(c.pathname,u)!=null||So(c.pathname,l)!=null}var Bu=N3();const ug=bs(Bu);function Hh(t){return Array.isArray(t)?t.map(Hh):typeof t=="object"&&t!==null?Object.keys(t).reduce((a,i)=>(a[i]=Hh(t[i]),a),{}):typeof t=="string"&&t.includes("_vocs-fn_")?new Function(`return ${t.slice(9)}`)():t}const Fg=Hh({aiCta:!0,blogDir:"./pages/blog",ogImageUrl:"https://vocs.dev/api/og?logo=%logo&title=%title&description=%description",rootDir:"docs",title:"John Whitton",titleTemplate:"%s – John Whitton",description:"John Whitton's personal website",iconUrl:"/images/jincubator.png",logoUrl:"/images/jincubator.png",topNav:[{text:"Home",link:"/",id:72,items:[]},{text:"About John",link:"/about",id:73,items:[]},{text:"Resume",link:"/resume",id:74,items:[]},{text:"References",link:"/references/intro",id:75,items:[]},{text:"Writing",link:"/writing/intro",id:76,items:[]},{text:"Research",link:"/research/intro",id:77,items:[]}],sidebar:{"/references":[{text:"John's Colleagues",link:"/references/intro"},{text:"Andy",link:"/references/andy"},{text:"Ganesha",link:"/references/ganesha"},{text:"Janet",link:"/references/janet"},{text:"Li",link:"/references/li"},{text:"Nick",link:"/references/nick"},{text:"Olivier",link:"/references/olivier"},{text:"Yishuang",link:"/references/yishuang"}],"/writing":[{text:"John's Writing",link:"/writing/intro"},{text:"Ethereum Bridging using Light Clients - Rainbow Costing",link:"/writing/2023-02-23-rainbow-costs"},{text:"Draft EAVE Whitepaper",link:"/writing/2021-12-01-eave-defi"},{text:"Kanga Protocol Whitepaper",link:"/writing/2021-05-01-kanga"},{text:"EAVE Parachain Design",link:"/writing/2021-04-01-eave-parachain"},{text:"Lessons Learned from Devcon5",link:"/writing/2019-10-16-devcon5"},{text:"Project-X Technical White Paper",link:"/writing/2018-07-17-projectx"}],"/research":[{text:"John's Research",link:"/research/intro"},{text:"Solving and Arbitrage",items:[{text:"Solving and Arbitrage Intro",link:"/research/solving/intro"},{text:"Reference Architecture",link:"/research/solving/architecture"},{text:"Uniswap V4 Hooks",link:"/research/solving/hooks"}]},{text:"Primitives",items:[{text:"Primitives Intro",link:"/research/primitives/intro"},{text:"Fraud Proofs",link:"/research/primitives/fraud-proofs"},{text:"Light Clients",link:"/research/primitives/light-clients"},{text:"Cryptogaphic Primitives",link:"/research/primitives/primitives"},{text:"Weak Subjectivity",link:"/research/primitives/weak-subjectivity"},{text:"Signature Schemes",link:"/research/primitives/signatures"}]},{text:"Zero Knowledge",items:[{text:"Zero Knowledge Intro",link:"/research/zk/intro"},{text:"ZK Proof of Stake",link:"/research/zk/zkpos"},{text:"zk-Snarks",link:"/research/zk/zksnarks"},{text:"Axiom",link:"/research/zk/axiom"}]},{text:"Cross Chain Bridges",items:[{text:"Bridging Intro",link:"/research/bridge/intro"},{text:"Cosmos IBC",link:"/research/bridge/cosmos-ibc"},{text:"Harmony Horizon",link:"/research/bridge/harmony-horizon"},{text:"Isomorph",link:"/research/bridge/isomorph"},{text:"Near Rainbow Bridge",link:"/research/bridge/near-rainbow"},{text:"Polymer Labs",link:"/research/bridge/polymerlabs"},{text:"Snowbridge",link:"/research/bridge/snowbridge"},{text:"Succint",link:"/research/bridge/succinct"}]},{text:"Layer 1 Platforms",items:[{text:"Layer 1 Intro",link:"/research/chains/intro"},{text:"Avalanche",link:"/research/chains/avalanche"},{text:"Binance Smart Chain",link:"/research/chains/binance"},{text:"Cosmos",link:"/research/chains/cosmos"},{text:"Ethereum 1.0",link:"/research/chains/ethereum-1-0"},{text:"Ethereum",link:"/research/chains/ethereum"},{text:"NEAR",link:"/research/chains/NEAR"},{text:"Harmony",link:"/research/chains/harmony"},{text:"Polkadot",link:"/research/chains/polkadot"},{text:"Polygon",link:"/research/chains/polygon"}]},{text:"Code Reviews",items:[{text:"Code Review Intro",link:"/research/code/intro"},{text:"Horizon Bridge",link:"/research/code/horizon"},{text:"Ethereum Near Bridge",link:"/research/code/ethereum-near"},{text:"Ethereum",link:"/research/code/ethereum"}]}]},socials:[{icon:"github",link:"https://github.com/johnwhitton",label:"GitHub",type:"github"},{icon:"x",link:"https://twitter.com/johnwhitton",label:"X (Twitter)",type:"x"},{icon:"telegram",link:"https://t.me/john_whitton",label:"Telegram",type:"telegram"}],basePath:"",font:{},markdown:{code:{themes:{dark:"github-dark-dimmed",light:"github-light"}}},theme:{},vite:{}}),D1="modulepreload",w1=function(t){return"/"+t},Bm={},o2=function(a,i,r){let c=Promise.resolve();if(i&&i.length>0){let u=function(A){return Promise.all(A.map(b=>Promise.resolve(b).then(m=>({status:"fulfilled",value:m}),m=>({status:"rejected",reason:m}))))};document.getElementsByTagName("link");const F=document.querySelector("meta[property=csp-nonce]"),p=(F==null?void 0:F.nonce)||(F==null?void 0:F.getAttribute("nonce"));c=u(i.map(A=>{if(A=w1(A),A in Bm)return;Bm[A]=!0;const b=A.endsWith(".css"),m=b?'[rel="stylesheet"]':"";if(document.querySelector(`link[href="${A}"]${m}`))return;const y=document.createElement("link");if(y.rel=b?"stylesheet":D1,b||(y.as="script"),y.crossOrigin="",y.href=A,p&&y.setAttribute("nonce",p),document.head.appendChild(y),b)return new Promise((C,B)=>{y.addEventListener("load",C),y.addEventListener("error",()=>B(new Error(`Unable to preload CSS for ${A}`)))})}))}function l(u){const F=new Event("vite:preloadError",{cancelable:!0});if(F.payload=u,window.dispatchEvent(F),!F.defaultPrevented)throw u}return c.then(u=>{for(const F of u||[])F.status==="rejected"&&l(F.reason);return a().catch(l)})},dg=f.createContext(Fg);function Ag(){return Fg}function _1({children:t,config:a}){const[i,r]=f.useState(()=>a||Ag());return f.useEffect(()=>{},[]),f.useEffect(()=>{},[i]),g.jsx(dg.Provider,{value:i,children:t})}function m0(){return f.useContext(dg)}const ku=[{lazy:()=>o2(()=>import("./about-DKDGf0gF.js"),[]),path:"/about",type:"mdx",filePath:"about.mdx",content:"---%0Atitle%3A%20About%20Me%0A---%0A%0A!%5BJohn%20Whitton%20Work%20History%5D(%2Fimages%2FJohnWhittonWorkHistory.png%20%22John%20Whitton%20Work%20History%22)%0A%0AHello%2C%20I'm%20John%2C%20and%20I'm%20a%20Research%2Fengineer%2C%20technical%20leader%2C%20and%20entrepreneur%20working%20at%20the%20intersection%20of%20blockchain%20infrastructure%20(Solving%2C%20Market%20Making%2C%20Arbitrage)%20and%20Decentralized%20protocols%20(Intents%2C%20Liquidity%20Management%2C%20Settlement).%20I%20have%20a%20track%20record%20of%20driving%20projects%20from%20conception%20to%20completion%2C%20identifying%20research%20gaps%2C%20and%20providing%20solutions.%20Finally%2C%20I%20love%20leading%20engineering%20teams%20and%20have%20the%20ability%20to%20drive%20collaboration%20across%20the%20organization%20and%20the%20entire%20ecosystem.%0A%0AI%20use%20%5Bjincubator%5D(https%3A%2F%2Fgithub.com%2Fjincubator)%20for%20research%20and%20development%20of%20prototypes.%20%5BHere%5D(%2Fresearch%2Fsolving%2Fintro)%20you'll%20find%20an%20overview%20of%20my%20work%20in%202025%20on%20Solving%2C%20Arbitrage%20and%20Indexing%2C%20an%20opinionated%20architecture%20is%20%5Bhere%5D(%2Fresearch%2Fsolving%2Farchitecture).%20It%20uses%20%5BTycho%5D(https%3A%2F%2Fdocs.propellerheads.xyz%2Ftycho%2Foverview)%2C%20Intents%20using%20%5BERC-7683%5D(https%3A%2F%2Fwww.erc7683.org%2Fspec)%2C%20%5BEIP-712%5D(https%3A%2F%2Feips.ethereum.org%2FEIPS%2Feip-712)%2C%20%5BCompactx%5D(https%3A%2F%2Fgithub.com%2Funiswap%2Fcompactx)%20and%20%5BUniswap%20V4%20Hooks%5D(https%3A%2F%2Fdocs.uniswap.org%2Fcontracts%2Fv4%2Foverview).%0A%0AAs%20of%20July%202025%20I'm%20currently%20wanting%20to%20collaborate%20with%20thought%20leaders%20in%20this%20space.%20Specifically%20I'm%20interested%20in%0A%0A-%20Grants%20and%20Bounties%3A%20Including%20Deliverable%20based%20grants%20around%20solving%2C%20routing%2C%20liquidity%20management%0A-%20Consulting%20Work%3A%20I'm%20interested%20in%20work%20primarily%20Smart%20Contract%20work%20and%20RUST%20Development%20in%20the%20Solving%20and%20Intent%20based%20space%0A-%20Full%20Time%20Roles%3A%20I'd%20enjoy%20working%20with%20a%20team%20in%20this%20space.%20TBD%20whether%20that%20will%20be%20launching%20the%20protocol%20I've%20been%20working%20with%20as%20part%20of%20a%20founding%20team%20or%20with%20a%20more%20established%20organization%20building%20out%20innovative%20frameworks%20in%20the%20space.%20I'm%20happy%20working%20as%20an%20individual%20contributor%20or%20leading%20engineering%20teams%2C%20as%20have%20done%20so%20for%20a%20large%20part%20of%20my%20career.%20Historically%20I've%20worked%20with%20Early%20Stage%20Startups%2010-30%20team%20members%20but%20am%20comfortable%20with%20both%20smaller%20and%20larger%20teams.%0A%0ABelow%20is%20a%20quick%20professional%20summary%2C%20more%20detail%20can%20be%20found%20on%20%5Bthe%20resume%20page%5D(https%3A%2F%2Fjohnwhitton.com%2Fresume%2Fintro)%0A%0AI%20worked%20as%20a%20Senior%20Protocol%20Engineer%2C%20previously%20Engineering%20Manager%20at%20%5BEco%5D(https%3A%2F%2Feco.com)%20building%20a%20payment%20focused%20intent%20protocol%20on%20a%20dedicated%20L3%20rollup.%20Read%20the%20docs%20%5Bhere%5D(https%3A%2F%2Fdocs.eco.com%2F)%20and%20the%20code%20%5Bhere%5D(https%3A%2F%2Fgithub.com%2Feco%2Feco-routes).%0A%0AI%20have%20researched%20zero%20knowledge%20proofs%2C%20cryptographic%20primitives%20and%20consensus%20protocols.%0A%0AI%20consulted%20as%20a%20research%20engineer%20providing%20strategy%2C%20research%2C%20design%20and%20building%20out%20DeFi%20infrastructure%20including%20trustless%20bridging%2C%20web3%20identity%20and%20wallets.%20Deployments%20have%20been%20on%20EVM%20compatible%20chains%20including%20%5BEthereum%5D(https%3A%2F%2Fethereum.org%2Fen%2F)%20and%20%5BHarmony%5D(https%3A%2F%2Fwww.harmony.one%2F).%0A%0AI%20prototyped%20the%20DEX%20%5BKanga%20Finance%5D(https%3A%2F%2Fgithub.com%2Fkangafinance)%20(inspired%20by%20%5BSushi%5D(https%3A%2F%2Fgithub.com%2Fsushiswap))%20and%20a%20DeFi%20parachain%20%5Beave.network%5D(https%3A%2F%2Fgithub.com%2Feavenetwork)%20(inspired%20by%20%5BAcala%5D(https%3A%2F%2Fgithub.com%2Facalanetwork)).%20Deployments%20on%20%5BHarmony%5D(https%3A%2F%2Fwww.harmony.one%2F)%20and%20%5BPolkadot%5D(https%3A%2F%2Fpolkadot.network%2F).%20As%20founder%20for%20these%20projects%2C%20I%20was%20responsible%20for%20writing%20whitepapers%2C%20reviewing%20legal%20infrastructure%2C%20and%20fundraising.%20Although%20projects%20had%20investor%20interest%20and%20were%20awarded%20%5Bhackathon%20prizes%5D(https%3A%2F%2Fdocs.google.com%2Fpresentation%2Fd%2F1ZGrbKSaAdtzvMzVh0EVFBfUvA4SqiAeYVXGhJN7Orbs%2Fedit%23slide%3Did.g48989ac23a_0_0)%20the%20projects%20did%20not%20move%20forward%20due%20to%20a%20combination%20of%20team%20commitment%2C%20market%20fit%20and%20crypto%20market%20conditions.%0A%0APreviously%20I%20was%20as%20an%20Ecosystem%20Architect%20at%20Harmony.%20Where%20I%20helped%20launch%20the%20Harmony%20Mainnet%2C%20grew%20the%20ecosystem%20and%20was%20also%20intimately%20involved%20with%20hiring%20decisions%20and%20business%20strategy.%20Prior%20to%20this%20I%20was%20CTO%20for%20Loyyal%20(BaaS%20company)%20where%20we%20built%20private%20permissioned%20blockchains%20on%20Ethereum%20and%20Hypersphere%20Fabric%20and%20I%20managed%20a%20team%20of%20seven%20engineers.%0A%0AI%20have%20worked%20extensively%20with%20decentralized%20financial%20protocols%2C%20bringing%20a%20unique%20perspective%20by%20combining%20my%20extensive%20corporate%20experience%20with%20IBM%2C%20SAP%2C%20Deloitte%20and%20KPMG%20with%20the%20disruptive%20financial%20models%20being%20developed%20on%20blockchain.%0A%0AMy%20earlier%20career%20focused%20on%20enterprise%20applications%2C%20service%20oriented%20architectures%20and%20cross%20application%20business%20processes.%20Where%20I%20founded%20a%20consultancy%20firm%20which%20grew%20to%20%24800k%20in%20revenues%20and%20ran%20from%202000-2009.%20One%20of%20my%20former%20clients%2C%20EFI%20(%241.6%20billion%20market%20cap)%20brought%20me%20on%20as%20a%20Manager%20in%20Enterprise%20Systems%20Architecture%20where%20I%20remained%20for%206%20years.%0A%0AI%20have%20been%20passionate%20about%20software%20and%20technology%20since%20high%20school.%20I%20graduated%20from%20the%20University%20of%20Queensland%20with%20a%20Bachelor%20of%20Science%20majoring%20in%20Computer%20Science%20before%20travelling%20globally%20leading%20the%20design%20and%20development%20of%20many%20Service%20Oriented%20Architectures%20and%20Blockchain%20implementations.%0A%0A%23%23%20Further%20Reading%0A%0A-%20%5BThe%20State%20of%20InterOp%202025%5D(https%3A%2F%2Fblog.li.fi%2Fthe-state-of-interop-2025-4a75d82a9bb9)%0A-%20%5BIntent%20Collective%3A%20a%20list%20of%20working%20projects%20in%20the%20Intents%20ecosystem%5D(https%3A%2F%2Fgithub.com%2FEnsoFinance%2FIntentCollective)%0A-%20%5BIlluminating%20Ethereum's%20Order%20Flow%20Landscape%5D(https%3A%2F%2Fwritings.flashbots.net%2Filluminate-the-order-flow)%0A",lastUpdatedAt:1753234955e3},{lazy:()=>o2(()=>import("./about-DKDGf0gF.js"),[]),path:"/about.html",type:"mdx",filePath:"about.mdx",content:"---%0Atitle%3A%20About%20Me%0A---%0A%0A!%5BJohn%20Whitton%20Work%20History%5D(%2Fimages%2FJohnWhittonWorkHistory.png%20%22John%20Whitton%20Work%20History%22)%0A%0AHello%2C%20I'm%20John%2C%20and%20I'm%20a%20Research%2Fengineer%2C%20technical%20leader%2C%20and%20entrepreneur%20working%20at%20the%20intersection%20of%20blockchain%20infrastructure%20(Solving%2C%20Market%20Making%2C%20Arbitrage)%20and%20Decentralized%20protocols%20(Intents%2C%20Liquidity%20Management%2C%20Settlement).%20I%20have%20a%20track%20record%20of%20driving%20projects%20from%20conception%20to%20completion%2C%20identifying%20research%20gaps%2C%20and%20providing%20solutions.%20Finally%2C%20I%20love%20leading%20engineering%20teams%20and%20have%20the%20ability%20to%20drive%20collaboration%20across%20the%20organization%20and%20the%20entire%20ecosystem.%0A%0AI%20use%20%5Bjincubator%5D(https%3A%2F%2Fgithub.com%2Fjincubator)%20for%20research%20and%20development%20of%20prototypes.%20%5BHere%5D(%2Fresearch%2Fsolving%2Fintro)%20you'll%20find%20an%20overview%20of%20my%20work%20in%202025%20on%20Solving%2C%20Arbitrage%20and%20Indexing%2C%20an%20opinionated%20architecture%20is%20%5Bhere%5D(%2Fresearch%2Fsolving%2Farchitecture).%20It%20uses%20%5BTycho%5D(https%3A%2F%2Fdocs.propellerheads.xyz%2Ftycho%2Foverview)%2C%20Intents%20using%20%5BERC-7683%5D(https%3A%2F%2Fwww.erc7683.org%2Fspec)%2C%20%5BEIP-712%5D(https%3A%2F%2Feips.ethereum.org%2FEIPS%2Feip-712)%2C%20%5BCompactx%5D(https%3A%2F%2Fgithub.com%2Funiswap%2Fcompactx)%20and%20%5BUniswap%20V4%20Hooks%5D(https%3A%2F%2Fdocs.uniswap.org%2Fcontracts%2Fv4%2Foverview).%0A%0AAs%20of%20July%202025%20I'm%20currently%20wanting%20to%20collaborate%20with%20thought%20leaders%20in%20this%20space.%20Specifically%20I'm%20interested%20in%0A%0A-%20Grants%20and%20Bounties%3A%20Including%20Deliverable%20based%20grants%20around%20solving%2C%20routing%2C%20liquidity%20management%0A-%20Consulting%20Work%3A%20I'm%20interested%20in%20work%20primarily%20Smart%20Contract%20work%20and%20RUST%20Development%20in%20the%20Solving%20and%20Intent%20based%20space%0A-%20Full%20Time%20Roles%3A%20I'd%20enjoy%20working%20with%20a%20team%20in%20this%20space.%20TBD%20whether%20that%20will%20be%20launching%20the%20protocol%20I've%20been%20working%20with%20as%20part%20of%20a%20founding%20team%20or%20with%20a%20more%20established%20organization%20building%20out%20innovative%20frameworks%20in%20the%20space.%20I'm%20happy%20working%20as%20an%20individual%20contributor%20or%20leading%20engineering%20teams%2C%20as%20have%20done%20so%20for%20a%20large%20part%20of%20my%20career.%20Historically%20I've%20worked%20with%20Early%20Stage%20Startups%2010-30%20team%20members%20but%20am%20comfortable%20with%20both%20smaller%20and%20larger%20teams.%0A%0ABelow%20is%20a%20quick%20professional%20summary%2C%20more%20detail%20can%20be%20found%20on%20%5Bthe%20resume%20page%5D(https%3A%2F%2Fjohnwhitton.com%2Fresume%2Fintro)%0A%0AI%20worked%20as%20a%20Senior%20Protocol%20Engineer%2C%20previously%20Engineering%20Manager%20at%20%5BEco%5D(https%3A%2F%2Feco.com)%20building%20a%20payment%20focused%20intent%20protocol%20on%20a%20dedicated%20L3%20rollup.%20Read%20the%20docs%20%5Bhere%5D(https%3A%2F%2Fdocs.eco.com%2F)%20and%20the%20code%20%5Bhere%5D(https%3A%2F%2Fgithub.com%2Feco%2Feco-routes).%0A%0AI%20have%20researched%20zero%20knowledge%20proofs%2C%20cryptographic%20primitives%20and%20consensus%20protocols.%0A%0AI%20consulted%20as%20a%20research%20engineer%20providing%20strategy%2C%20research%2C%20design%20and%20building%20out%20DeFi%20infrastructure%20including%20trustless%20bridging%2C%20web3%20identity%20and%20wallets.%20Deployments%20have%20been%20on%20EVM%20compatible%20chains%20including%20%5BEthereum%5D(https%3A%2F%2Fethereum.org%2Fen%2F)%20and%20%5BHarmony%5D(https%3A%2F%2Fwww.harmony.one%2F).%0A%0AI%20prototyped%20the%20DEX%20%5BKanga%20Finance%5D(https%3A%2F%2Fgithub.com%2Fkangafinance)%20(inspired%20by%20%5BSushi%5D(https%3A%2F%2Fgithub.com%2Fsushiswap))%20and%20a%20DeFi%20parachain%20%5Beave.network%5D(https%3A%2F%2Fgithub.com%2Feavenetwork)%20(inspired%20by%20%5BAcala%5D(https%3A%2F%2Fgithub.com%2Facalanetwork)).%20Deployments%20on%20%5BHarmony%5D(https%3A%2F%2Fwww.harmony.one%2F)%20and%20%5BPolkadot%5D(https%3A%2F%2Fpolkadot.network%2F).%20As%20founder%20for%20these%20projects%2C%20I%20was%20responsible%20for%20writing%20whitepapers%2C%20reviewing%20legal%20infrastructure%2C%20and%20fundraising.%20Although%20projects%20had%20investor%20interest%20and%20were%20awarded%20%5Bhackathon%20prizes%5D(https%3A%2F%2Fdocs.google.com%2Fpresentation%2Fd%2F1ZGrbKSaAdtzvMzVh0EVFBfUvA4SqiAeYVXGhJN7Orbs%2Fedit%23slide%3Did.g48989ac23a_0_0)%20the%20projects%20did%20not%20move%20forward%20due%20to%20a%20combination%20of%20team%20commitment%2C%20market%20fit%20and%20crypto%20market%20conditions.%0A%0APreviously%20I%20was%20as%20an%20Ecosystem%20Architect%20at%20Harmony.%20Where%20I%20helped%20launch%20the%20Harmony%20Mainnet%2C%20grew%20the%20ecosystem%20and%20was%20also%20intimately%20involved%20with%20hiring%20decisions%20and%20business%20strategy.%20Prior%20to%20this%20I%20was%20CTO%20for%20Loyyal%20(BaaS%20company)%20where%20we%20built%20private%20permissioned%20blockchains%20on%20Ethereum%20and%20Hypersphere%20Fabric%20and%20I%20managed%20a%20team%20of%20seven%20engineers.%0A%0AI%20have%20worked%20extensively%20with%20decentralized%20financial%20protocols%2C%20bringing%20a%20unique%20perspective%20by%20combining%20my%20extensive%20corporate%20experience%20with%20IBM%2C%20SAP%2C%20Deloitte%20and%20KPMG%20with%20the%20disruptive%20financial%20models%20being%20developed%20on%20blockchain.%0A%0AMy%20earlier%20career%20focused%20on%20enterprise%20applications%2C%20service%20oriented%20architectures%20and%20cross%20application%20business%20processes.%20Where%20I%20founded%20a%20consultancy%20firm%20which%20grew%20to%20%24800k%20in%20revenues%20and%20ran%20from%202000-2009.%20One%20of%20my%20former%20clients%2C%20EFI%20(%241.6%20billion%20market%20cap)%20brought%20me%20on%20as%20a%20Manager%20in%20Enterprise%20Systems%20Architecture%20where%20I%20remained%20for%206%20years.%0A%0AI%20have%20been%20passionate%20about%20software%20and%20technology%20since%20high%20school.%20I%20graduated%20from%20the%20University%20of%20Queensland%20with%20a%20Bachelor%20of%20Science%20majoring%20in%20Computer%20Science%20before%20travelling%20globally%20leading%20the%20design%20and%20development%20of%20many%20Service%20Oriented%20Architectures%20and%20Blockchain%20implementations.%0A%0A%23%23%20Further%20Reading%0A%0A-%20%5BThe%20State%20of%20InterOp%202025%5D(https%3A%2F%2Fblog.li.fi%2Fthe-state-of-interop-2025-4a75d82a9bb9)%0A-%20%5BIntent%20Collective%3A%20a%20list%20of%20working%20projects%20in%20the%20Intents%20ecosystem%5D(https%3A%2F%2Fgithub.com%2FEnsoFinance%2FIntentCollective)%0A-%20%5BIlluminating%20Ethereum's%20Order%20Flow%20Landscape%5D(https%3A%2F%2Fwritings.flashbots.net%2Filluminate-the-order-flow)%0A",lastUpdatedAt:1753234955e3},{lazy:()=>o2(()=>import("./example-BHAFszCC.js"),[]),path:"/example",type:"mdx",filePath:"example.mdx",content:"%23%20Example%0A%0AThis%20is%20an%20example%20page.",lastUpdatedAt:1753052272e3},{lazy:()=>o2(()=>import("./example-BHAFszCC.js"),[]),path:"/example.html",type:"mdx",filePath:"example.mdx",content:"%23%20Example%0A%0AThis%20is%20an%20example%20page.",lastUpdatedAt:1753052272e3},{lazy:()=>o2(()=>import("./getting-started-65M8kbNX.js"),[]),path:"/getting-started",type:"mdx",filePath:"getting-started.mdx",content:"%23%20Get%20started%0A%0AHello%20world!",lastUpdatedAt:1753052272e3},{lazy:()=>o2(()=>import("./getting-started-65M8kbNX.js"),[]),path:"/getting-started.html",type:"mdx",filePath:"getting-started.mdx",content:"%23%20Get%20started%0A%0AHello%20world!",lastUpdatedAt:1753052272e3},{lazy:()=>o2(()=>import("./index-Bkz3aIkT.js"),[]),path:"/",type:"mdx",filePath:"index.mdx",content:"---%0Alayout%3A%20landing%0A---%0A%0Aimport%20%7B%20HomePage%20%7D%20from%20%22vocs%2Fcomponents%22%3B%0A%0A%3CHomePage.Root%3E%0A%20%20%3CHomePage.Logo%20%2F%3E%0A%20%20%3CHomePage.Tagline%3EJohn%20Whitton%3C%2FHomePage.Tagline%3E%0A%20%20%3CHomePage.Description%3E%0A%20%20%20%20I%20am%20a%20research%20engineer%2C%20technical%20leader%20and%20entrepreneur%20currently%0A%20%20%20%20working%20in%20crypto.%0A%20%20%3C%2FHomePage.Description%3E%0A%20%20%3CHomePage.Buttons%3E%0A%20%20%20%20%3CHomePage.Button%20href%3D%22%2Fresume%22%20variant%3D%22accent%22%3E%0A%20%20%20%20%20%20John's%20Work%0A%20%20%20%20%3C%2FHomePage.Button%3E%0A%20%20%20%20%3CHomePage.Button%20href%3D%22https%3A%2F%2Fgithub.com%2Fjohnwhitton%22%3E%0A%20%20%20%20%20%20GitHub%0A%20%20%20%20%3C%2FHomePage.Button%3E%0A%20%20%3C%2FHomePage.Buttons%3E%0A%3C%2FHomePage.Root%3E%0A",lastUpdatedAt:1753062478e3},{lazy:()=>o2(()=>import("./resume-C4nleIsR.js"),[]),path:"/resume",type:"mdx",filePath:"resume.mdx",content:"**One-page%20resume%20can%20be%20downloaded%20%5Bhere%5D(https%3A%2F%2Fjohnwhitton.com%2Fimages%2Fjohn.pdf)%20and%20viewed%20at%20the%20bottom%20of%20this%20page**%0A%0A%23%23%20Professional%20Summary%0A%0A-%20Research%2Fengineer%2C%20technical%20leader%2C%20and%20entrepreneur%20working%20at%20the%20intersection%20of%20blockchain%20infrastructure%20(Solving%2C%20Market%20Making%2C%20Arbitrage)%20and%20Decentralized%20protocols%20(Intents%2C%20Liquidity%20Management%2C%20Settlement).%0A-%20Track%20record%20of%20driving%20projects%20from%20conception%20to%20completion%2C%20identifying%20research%20gaps%2C%20and%20providing%20solutions.%0A-%20Proven%20leader%20of%20engineering%20teams%20with%20the%20ability%20to%20drive%20collaboration%20across%20the%20organization%20and%20the%20entire%20ecosystem.%0A%0A%23%23%20Achievements%0A%0A%23%23%23%23%20Research%20and%20Engineering%0A%0A-%20Designing%20and%20Building%20an%20Intent%20Based%2C%20Liquidity%20Management%20and%20Settlement%20Platform%20%5Bjincubator%5D(https%3A%2F%2Fgithub.com%2Fjincubator)%0A-%20Researching%2C%20designing%20and%20building%20a%20protocol%20for%20stablecoins%20on%20a%20dedicated%20L3%20roll-up%20at%20%5Beco%5D(https%3A%2F%2Feco.com)%20(%5Bdocs%5D(https%3A%2F%2Fdocs.eco.com%2F)%2C%20%5Beco-routes%20codebase%5D(https%3A%2F%2Fgithub.com%2Feco%2Feco-routes))%0A-%20Wrote%20multiple%20DeFi%20whitepapers%20(see%20%5Bhere%5D(https%3A%2F%2Fjohnwhitton.com%2Fwriting%2Fintro))%0A-%20Researched%20consensus%2C%20bridging%2C%20cryptographic%20primitives%20and%20zero%20knowledge%20proofs.%0A-%20Built%20Layer%201%20platforms%2C%20DeFi%20protocols%2C%20non-custodial%20wallets%2C%20web3%20identity%2C%20wallet%20infrastructure%20and%20NFT%20contracts%20for%20gaming%20character%20token%20sales.%0A%0A%23%23%23%23%20Building%20Great%20Technical%20Teams%0A%0A-%20Lead%20a%20team%20of%208%20Engineers%20at%20ECO%0A-%20Grew%20Harmony%20from%206%20to%2020%20Engineers%0A-%20Managed%207%20engineers%20at%20LOYYAL%0A-%20Founded%20an%20enterprise%20consulting%20startup%20onboarding%20a%20team%20of%205.%0A%0A%23%23%23%23%20Successful%20Product%20Launches%0A%0A-%206%20launches%20and%20multiple%20ecosystem%20releases%20including%0A%20%20-%20%5Beco%5D(https%3A%2F%2Feco.com)%0A%20%20-%20%5BGama%20Space%20Station%20NFT%20Launch%5D(https%3A%2F%2Fopensea.io%2Fcollection%2Fgamaspacestation-genesis)%0A%20%20-%20%5B1ns%3A%20harmony%20web3%20identity%5D(https%3A%2F%2Fgithub.com%2Fharmony-one%2F1ns-docs)%0A%20%20-%20%5BHarmony%20Mainnet%5D(https%3A%2F%2Fmedium.com%2Fharmony-one%2Fharmony-day-one-mainnet-b31ac0d80233)%0A%20%20-%20%5BDubai%20Points%5D(https%3A%2F%2Fmedium.com%2F%40Loyyal%2Fdubai-points-looking-to-the-future-of-loyalty-250e12c3a2e5)%0A%20%20-%20%5BLoyyal%20Mainnet%20(Hyperledger)%5D(https%3A%2F%2Fmedium.com%2F%40IBMBlockchain%2Floyyal-transforms-loyalty-with-hyperledger-fabric-638e1b2e86cd).%0A%0A%23%23%23%23%20Founder%0A%0A-%20Founded%20an%20enterprise%20consultancy%20firm%20which%20I%20grew%20to%20%24800k%20in%20annual%20revenue%20and%20ran%20from%202000-2009.%0A-%20Lead%20research%2C%20legal%20framework%20for%20incorporation%2C%20compliance%20and%20fundraising%20efforts%20for%20multiple%20blockchain%20protocols.%0A%0A%23%23%20Projects%20%2F%20Work%20History%0A%0ABelow%20are%20links%20to%20projects%20I%20have%20designed%20and%20built%20or%20contributed%20to.%0A%0A%23%23%23%20Founder%20%2F%20Research%20Engineer%0A%0A%23%23%23%23%20%5Bjohnwhitton%5D(https%3A%2F%2Fjohnwhitton.com)%3A%20July%202018%20-%20Present%2C%20Silicon%20Valley%0A%0A-%20%5Bjincubator.com%5D(https%3A%2F%2Fgithub.com%2Fjincubator)%3A%20Solving%2C%20Arbitrage%20and%20Indexing%20(%5BTycho%5D(https%3A%2F%2Fdocs.propellerheads.xyz%2Ftycho%2Foverview))%2C%20Intents%20(%5BERC-7683%5D(https%3A%2F%2Fwww.erc7683.org%2Fspec)%2C%5BEIP-712%5D(https%3A%2F%2Feips.ethereum.org%2FEIPS%2Feip-712))%2C%20DEX(%5BUniswap%20V4%20Hooks%5D(https%3A%2F%2Fdocs.uniswap.org%2Fcontracts%2Fv4%2Foverview))%2C%20%5BUHI5%20Atrium%20Academy%5D(https%3A%2F%2Fatrium.academy%2Funiswap).%0A-%20%5Bisolab.gg%5D(https%3A%2F%2Fgithub.com%2Fisolab-gg%2Fisolab.gg)%3A%20Trustless%20Bridge%20Research%20using%20Zero%20Knowledge%20Proofs%20including%20cryptographic%20primitives%2C%20consensus%20layer%20and%20zero%20knowledge%20implementations.%20See%20the%0A-%20%5Bhiddenstate.xyz%5D(https%3A%2F%2Fhiddenstate.xyz%2F)%3A%20%5B1.country%5D(https%3A%2F%2Fgithub.com%2Fharmony-one%2F1ns-docs)%20implementation%20inspired%20by%20%5BENS%5D(https%3A%2F%2Fens.domains%2F)%20and%20enhanced%20to%20integrate%20web2%20DNS%20server%20and%20SMTP%20routing.%0A-%20%5Bmodulo%5D(https%3A%2F%2Fmodulo.so%2F)%3A%20%5B1-wallet%5D(https%3A%2F%2Fgithub.com%2Fpolymorpher%2Fone-wallet)%20and%20%5Bsms-wallet%5D(https%3A%2F%2Fgithub.com%2Fpolymorpher%2Fsms-wallet)%3A%20non-custodial%20crypto%20wallet%20and%20lightweight%20crypto%20sms%20wallet.%0A-%20%5Bkanga.finance%5D(https%3A%2F%2Fkanga.finance%2F)%3A%20Dex%20implementation%20inspired%20by%20Sushi%20and%20proof%20of%20concept%20integration%20with%20one-wallet.%20(%5Bgithub%5D(https%3A%2F%2Fgithub.com%2Fkangafinance)).%20%5BWinner%5D(https%3A%2F%2Fdocs.google.com%2Fpresentation%2Fd%2F1ZGrbKSaAdtzvMzVh0EVFBfUvA4SqiAeYVXGhJN7Orbs%2Fedit%23slide%3Did.g48989ac23a_0_0)%20of%20%2430%2C000%20in%20prizes%20from%20%5BHarmony%20Hackathon%5D(https%3A%2F%2Fbounties.gitcoin.co%2Fhackathon%2Fharmony-defi%2Fonboard).%0A-%20%5Beave.network%5D(https%3A%2F%2Feave.network%2F)%3A%20Polkadot%20DeFi%20Parachain%20(%5Bgithub%5D(https%3A%2F%2Fgithub.com%2FEaveNetwork))%20inspired%20by%20Acala%20and%20launched%20on%20the%20Rococo%20Network.%0A-%20em%E2%88%86sset%20(%5Bgithub%5D(https%3A%2F%2Fgithub.com%2Femasset))%3A%0A%20%20-%20Designed%20StableCoin%20Payment%20Platform%20integrating%20with%20banking%20systems%0A%20%20-%20Defi%20Research%3A%20Uniswap%2C%20Polkadot%2C%20Curve%2C%20Balancer%2C%20Coinbase%20Rosettanet%0A%20%20-%20Built%20gRPC%20API%20Layer%3A%20proto%2C%20golang%2C%20grpc-gateway%2C%20openapi%2C%20MongoDB%0A%20%20-%20Mobile%20App%3A%20Flutter%2C%20Dart%20integrating%20with%20gRPC%20Services%0A-%20WASDEX%3A%20designed%20a%20decentralized%20regulated%20platform%20for%20digital%20securities%0A-%20%5BShell%20protocol%5D(https%3A%2F%2Fshellprotocol.io%2F)%3A%20developed%20initial%20prototype%20of%20the%20COWRI%20protocol%2C%20a%20stable%20coin%2C%20meta%20layer%20which%20leveraged%20the%200x%20Protocol%20and%20became%20%5BShell%20Protocol%5D(https%3A%2F%2Fshellprotocol.io%2F).%0A-%20Project%20X%3A%20wrote%20white%20paper%20for%20a%20layer%201%20blockchain%20platform%0A-%20Pocketh%20-%20wrote%20design%20document%20for%20a%20mobile%20payment%20platform%20for%20restaurants%20using%20stable%20coins%20and%20collateralization.%0A-%20Jincubator%3A%20researched%20layer%201%20platforms%20including%20polkadot%2C%20cosmos%2C%20stellar%20and%20ethereum%0A%0A%23%23%20Work%20History%0A%0ABelow%20are%20the%20organizations%20I%20have%20been%20fortunate%20enough%20to%20work%20for.%0A%0A%23%23%23%20Engineering%20Manager%20-%20Senior%20Protocol%20Engineer%0A%0A%23%23%23%23%20%5BEco%5D(https%3A%2F%2Feco.com)%3A%20Aug%202023%20-%20Jan%202025%2C%20Silicon%20Valley%0A%0AA%20protocol%20for%20stablecoins%20on%20a%20dedicated%20roll-up%20using%20intents%20and%20account%20abstraction%0A%0A-%20Lead%20a%20team%20of%208%20engineers%20up%20until%20August%202024%0A-%20Senior%20Protocol%20Engineer%20from%20April%202024%20to%20present%0A-%20L3%20roll-up%20design%20and%20implementation%20of%20the%20ECO%20chain%2C%20read%20the%20%5Bdocs%5D(https%3A%2F%2Fdocs.eco.com%2F)%0A-%20Developing%20Intent%20Protocol%20and%20cross-chain%20proving%20mechanisms%2C%20see%20the%20open%20sourced%20version%20of%20the%20code%20at%20%5BCross-L2-Actions%5D(https%3A%2F%2Fgithub.com%2Fecoinc%2FCross-L2-Actions)%0A-%20Manage%20development%20of%20%5Bbend.eco%5D(https%3A%2F%2Fbend.eco)%20-%20fast%20cheap%20stable%20coin%20payments%0A-%20Lead%20the%20%5BEco%20Association%5D(https%3A%2F%2Fgithub.com%2Feco-association)%20-%20%5BCurrency%201.5%20upgrade%5D(https%3A%2F%2Fgithub.com%2Feco-association%2Fcurrency-1.5)%0A%0A%23%23%23%20Ecosystem%20Architect%0A%0A%23%23%23%23%20%5BHarmony%5D(https%3A%2F%2Fwww.harmony.one%2F)%3A%20August%202019%20-%20May%202020%2C%20Silicon%20Valley%0A%0ALayer%201%20Proof%20of%20Stake%2C%20Sharded%20Blockchain%20Protocol%0A%0A-%20Hired%20and%20Mentored%20over%2010%20Engineers%20growing%20the%20team%20from%206%20to%2020%0A-%20Launched%20Mainnet%20ONE%2C%20Token%20Swap%20and%20Open%20Staking%0A-%20Owned%20Developer%20Tooling%20including%20API%2C%20SDK%2C%20HRC%20and%20IDEs%0A-%20Deployed%20Network%20Upgrades%20including%20over%2050%20rollouts%20of%20complete%20Harmony%20Protocol%20and%20Network%0A-%20Presented%20Internationally%20at%20Technical%20Conferences%0A-%20Responsible%20for%20Partner%20Success%20and%20Developer%20Advocacy%0A%0A%23%23%23%20Chief%20Technology%20Officer%0A%0A%23%23%23%23%20%5Bloyyal%5D(https%3A%2F%2Floyyal.com%2F)%3A%20July%202016%20-%20Jun%202018%2C%20New%20York%0A%0ALoyalty%20Platform%20leveraging%20tokenization%20of%20points%20using%20blockchain%0A%0A-%20Hired%20and%20mentored%20a%20team%20of%207%20engineers%0A-%20Launched%20LOYYAL%20program%20management%20suite%20on%20HYPERLEDGER%0A-%20Built%20Dubai%20Points%20the%20first%20loyalty%20mobile%20application%20built%20on%20blockchain%0A-%20Deployed%20and%20maintained%20a%20private%20ethereum%20network%0A-%20Owned%20partner%20success%20with%20IBM%2C%20Deloitte%2C%20Emirates%20Airlines%2C%20CIBC%20Bank%0A%0A%23%23%23%20Founder%2C%20Engineering%20Manager%2C%20Architect%2C%20Developer%0A%0A%23%23%23%23%20Enterprise%20Software%20and%20Consulting%3A%20July%201986%20-%20Jun%202016%2C%20Global%0A%0AEnterprise%20Software%20and%20Integration%20Platforms%0A%0A-%20Managed%20over%20100%20initiatives%20and%2050%20staff%20at%20EFI%0A-%20Built%20EFI%20Business%20Integration%20Services%20an%20SOA%20platform%20integrating%20SAP%2C%20Salesforce%2C%20FLEXERA%20and%20external%20partners%20including%20CANON%20and%20Fedex%0A-%20Founded%20Global%20Enterprise%20Solutions%20a%20niche%20SAP%20technical%20consultancy%20and%20hired%20and%20mentored%20a%20team%20of%205%0A-%20Lead%20Autodesk%20Subscription%20Program%20integration%20-%20integrating%20SAP%2C%20TIBCO%2C%20SEEBEYOND%2C%20registration%20systems%20and%20CRM%20systems%0A-%20Developed%20Enterprise%20Software%20for%20the%20Mining%20Industry%0A%0A%23%23%20Whitepapers%20and%20Design%20Documents%0A%0A-%20%5B1ns%20(dot-country)%5D(https%3A%2F%2Fgithub.com%2Fharmony-one%2F1ns-docs)%3A%20dot-country%20design%20and%20deployment%20overview.%0A-%20%5BDraft%20EAVE%20Whitepaper%20(2021)%5D(https%3A%2F%2Fjohnwhitton.com%2Fimages%2FDraftEAVEWhitepaper.pdf)%3A%20a%20multi-chain%20web3%20engine%20(Trading%2C%20DeFi%2C%20Liquidity%20and%20NFTs)%0A-%20%5BEAVE%20Parachain%20Design%20(2021)%5D(https%3A%2F%2Fjohnwhitton.com%2Fimages%2FEAVEParachainDesign.pdf)%3A%20A%20Dedicated%20DeFi%20Polkadot%20Parachain%0A-%20%5BKANGA%20Whitepaper(2021)%5D(https%3A%2F%2Fjohnwhitton.com%2Fimages%2FKANGAWhitepaper.pdf)%3A%20a%20DeFi%20Trading%20and%20Yield%20Engine%5D%0A-%20%5BprojectX%20(2018)%5D(https%3A%2F%2Fjohnwhitton.com%2Fimages%2FprojectX.pdf)%3A%20layer%20one%20blockchain%20protocol%0A%0A%23%23%20Codebases%0A%0A-%20%5Bjincubator%5D(https%3A%2F%2Fgithub.com%2Fjincubator)%3A%20Solving%2C%20Arbitrage%20and%20Indexing%20(%5BTycho%5D(https%3A%2F%2Fdocs.propellerheads.xyz%2Ftycho%2Foverview))%2C%20Intents%20(%5BERC-7683%5D(https%3A%2F%2Fwww.erc7683.org%2Fspec)%2C%5BEIP-712%5D(https%3A%2F%2Feips.ethereum.org%2FEIPS%2Feip-712))%2C%20DEX(%5BUniswap%20V4%20Hooks%5D(https%3A%2F%2Fdocs.uniswap.org%2Fcontracts%2Fv4%2Foverview))%2C%0A-%20%5Buhi5-exercises%5D(https%3A%2F%2Fgithub.com%2Fjohnwhitton%2Fuhi5-exercises)%3A%20Uniswap%20V4%20Hook%20examples%20built%20as%20part%20of%20%5BUHI5%20Atrium%20Academy%5D(https%3A%2F%2Fatrium.academy%2Funiswap)%0A-%20%5Beco-routes%5D(https%3A%2F%2Fgithub.com%2Feco%2Feco-routes%2Ftree%2FED-4357)%3A%20Intent%20Driven%20Stable%20Coin%20Platform%20(this%20branch%20is%20where%20I%20worked%20on%20%5Bproving%5D(https%3A%2F%2Fgithub.com%2Feco%2Feco-routes%2Fblob%2FED-4357%2Fcontracts%2FProver.sol))%20and%20designing%20%5Bcross-chain%20batch%20settlement%5D(https%3A%2F%2Fgithub.com%2Feco%2Feco-routes%2Fblob%2FED-4357%2Fscripts%2Ftestnet%2FbatchSettleGeneral.ts)%0A-%20%5Bdot-country%5D(https%3A%2F%2Fgithub.com%2Fjw-1ns)%3A%20implementation%20inspired%20by%20%5BENS%5D(https%3A%2F%2Fens.domains%2F)%20and%20enhanced%20to%20integrate%20web2%20DNS%20server%20and%20SMTP%20routing.%0A-%20%5B1wallet%5D(https%3A%2F%2Fgithub.com%2Fpolymorpher%2Fone-wallet%2Ftree%2Fmaster%2Fcode%2Ftest)%3A%20non-custodial%20crypto%20wallet%0A-%20%5BNFT%20Contracts%5D(https%3A%2F%2Fgithub.com%2Fgamaspacestation%2Fcontracts)%3A%20Smart%20Contracts%20for%20%5BGama%20Space%20Station%5D(https%3A%2F%2Fopensea.io%2Fcollection%2Fgamaspacestation)%0A-%20%5BCross%20chain%20bridge%5D(https%3A%2F%2Fgithub.com%2Fjohnwhitton%2Fhorizon%2Ftree%2FrefactorV2%2Fdocs)%3A%20Horizon%20trustless%20Bridge%20(not%20the%20one%20that%20got%20hacked)%0A-%20%5BCore%20Protocol%5D(https%3A%2F%2Fgithub.com%2FEaveNetwork)%3A%20EAVE%20Network%20(a%20polkadot%20parachain)%20Rust%2C%20Substrate%2C%20ORML%2C%20TypeScript%2CFlutter%0A-%20%5BDecentralized%20Finance%5D(https%3A%2F%2Fgithub.com%2Fkangafinance)%3A%20Kanga%20Finance%3A%20Solidity%2C%20Javascript%2C%20React%0A-%20%5BSolidity%20Development%5D(https%3A%2F%2Fgithub.com%2Fjohnwhitton%2Fbc_template)%3A%20Smart%20Contract%20Development%20Framework%20using%20hardhat%20and%20typescript.%0A-%20%5BAPI%20Framework%5D(https%3A%2F%2Fgithub.com%2Femasset)%3A%20emasset%3A%20golang%2C%20dart%2C%20protobuf%0A-%20%5BLayer%20One%20Protocol%20Research%5D(https%3A%2F%2Fgithub.com%2Fjohnwhitton%2Fblockchain-eval%2Fblob%2Fmaster%2Fsubstrate.mdx)%3A%20jincubator%3A%20layer%20one%20portocol%20comparison%0A%0A%23%23%20Websites%20and%20Applications%0A%0A-%20%5B1.country%5D(https%3A%2F%2F1.country%2F)%3A%20Web3%20Identity%20integrated%20with%20web%202%20DNS%20services%0A-%20%5B1wallet.crazy.one%5D(https%3A%2F%2F1wallet.crazy.one%2Fcreate)%3A%20Non%20custodial%20crypto%20wallet%0A-%20%5BDecentralized%20Finance%5D(https%3A%2F%2Fdemo.kanga.finance)%3A%20KANGA%20App%20on%20Harmony%20Testnet%0A-%20%5BWebsite%5D(https%3A%2F%2Fkanga.finance)%3A%20KANGA%20website%0A-%20%5BWebsite%5D(https%3A%2F%2Feave.network)%3A%20EAVE%20website%0A%0A%23%23%20Presentations%20and%20Videos%0A%0A-%20%5BDemo%20Video%5D(https%3A%2F%2Fdemo.jincubator.com)%3A%20Jincuator%3A%20Intent%20Based%20Liquidity%20Management%20and%20Settlement%20Platform%0A-%20%5BTechnical%20Walk%20Through%20Video%5D(https%3A%2F%2Frunthrough.jincubator.com)%3A%20Jincubator%3A%20Intent%20Based%20Liquidity%20Management%20and%20Settlement%20Platform%0A-%20%5BOverview%20Deck%5D(https%3A%2F%2Fdeck.jincubator.com)%3A%20Jincubator%3A%20Intent%20Based%20Liquidity%20Management%20and%20Settlement%20Platform%0A-%20%5BDefi%20Presentation%5D(https%3A%2F%2Fdeck.kanga.finance)%3A%20KANGA%20Web3%20Engine%3A%20%5BDefi%20Video%5D(https%3A%2F%2Fwww.youtube.com%2F3wxAbe0GzA0)%3A%20Kanga%20Demo%20for%20Harmony%20Hackathon%0A-%20%5BCore%20Protocol%20Presentation%5D(https%3A%2F%2Fjohnwhitton.com%2Fimages%2FEAVEOverview.pdf)%3A%20EAVE%20DeFi%20Polkadot%20Parachain%0A-%20%5BDefi%20Presentation%5D(https%3A%2F%2Fjohnwhitton.com%2Fimages%2FWASDEXOverview.pd)%3A%20WASDEX%3A%20Digital%20Exchange%0A-%20%5BDefi%20Investor%20Fact%20Sheet%5D(https%3A%2F%2Fjohnwhitton.com%2Fimages%2Fwasdex.pdf)%3A%20WASDEX%3A%20Investor%20Fact%20Sheet%0A-%20%5BEcosystem%20article%5D(https%3A%2F%2Fmedium.com%2Fharmony-one%2Fdevcon-4ee34426530c)%3A%20Devcon5%20lessons%20learned%0A-%20%5BDefi%20Demo%20Video%5D(https%3A%2F%2Fyoutube.kanga.finance)%3A%20KANGA%20Demo%0A-%20%5BDefi%20Demo%20Vido%5D(https%3A%2F%2Fyoutu.be%2Fvk0e6s_2H0w)%3A%20EAVE%20Mobile%20Demo%0A-%20%5BCore%20Protocol%20Video%5D(https%3A%2F%2Fyoutu.be%2FHFo6c32qoyI)%3A%20EAVE%20Overview%0A-%20%5BLeadership%20Video%5D(https%3A%2F%2Fyoutu.be%2FeasABjC4gIY)%3A%20Harmony%20Engineers%20on%20fire%0A-%20%5BDefi%20Investor%20Video%5D(https%3A%2F%2Fyoutu.be%2FiB1wWl5vWTk)%3A%20WASDEX%3A%20World%20Asset%20and%20Securities%20Digital%20Exchange%0A%0A%23%23%20Education%0A%0ABachelor%20of%20Science%2C%20The%20University%20of%20Queensland%20(1984-1987)%0A%0A%23%23%20Additional%20Information%0A%0A-%20%5BGitcoin%5D(https%3A%2F%2Fgitcoin.co%2Fjohnwhitton)%3A%20John%20on%20Gitcoin%0A-%20%5BHackathons%5D(https%3A%2F%2Fgitcoin.co%2Fjohnwhitton%2Fhackathons)%3A%20Kanga%20Harmony%20Hackathon%20Proposals%0A%20%20-%20%5BAwards%5D(https%3A%2F%2Fdocs.google.com%2Fpresentation%2Fd%2F1ZGrbKSaAdtzvMzVh0EVFBfUvA4SqiAeYVXGhJN7Orbs%2Fedit%3Fusp%3Dsharing)%3A%20Kanga%20winning%20multiple%20awards%20in%20Harmony%20Hackathon%0A-%20%5BProposal%5D(https%3A%2F%2Ftalk.harmony.one%2Ft%2Fkanga-launch-proposal%2F8283)%3A%20Kanga%20Launch%20Proposal%0A%0A%3Cobject%0A%20%20data%3D%22%2Fimages%2Fjohn.pdf%22%0A%20%20width%3D%221000%22%0A%20%20height%3D%221000%22%0A%20%20type%3D%22application%2Fpdf%22%0A%2F%3E%0A",lastUpdatedAt:1753234955e3},{lazy:()=>o2(()=>import("./resume-C4nleIsR.js"),[]),path:"/resume.html",type:"mdx",filePath:"resume.mdx",content:"**One-page%20resume%20can%20be%20downloaded%20%5Bhere%5D(https%3A%2F%2Fjohnwhitton.com%2Fimages%2Fjohn.pdf)%20and%20viewed%20at%20the%20bottom%20of%20this%20page**%0A%0A%23%23%20Professional%20Summary%0A%0A-%20Research%2Fengineer%2C%20technical%20leader%2C%20and%20entrepreneur%20working%20at%20the%20intersection%20of%20blockchain%20infrastructure%20(Solving%2C%20Market%20Making%2C%20Arbitrage)%20and%20Decentralized%20protocols%20(Intents%2C%20Liquidity%20Management%2C%20Settlement).%0A-%20Track%20record%20of%20driving%20projects%20from%20conception%20to%20completion%2C%20identifying%20research%20gaps%2C%20and%20providing%20solutions.%0A-%20Proven%20leader%20of%20engineering%20teams%20with%20the%20ability%20to%20drive%20collaboration%20across%20the%20organization%20and%20the%20entire%20ecosystem.%0A%0A%23%23%20Achievements%0A%0A%23%23%23%23%20Research%20and%20Engineering%0A%0A-%20Designing%20and%20Building%20an%20Intent%20Based%2C%20Liquidity%20Management%20and%20Settlement%20Platform%20%5Bjincubator%5D(https%3A%2F%2Fgithub.com%2Fjincubator)%0A-%20Researching%2C%20designing%20and%20building%20a%20protocol%20for%20stablecoins%20on%20a%20dedicated%20L3%20roll-up%20at%20%5Beco%5D(https%3A%2F%2Feco.com)%20(%5Bdocs%5D(https%3A%2F%2Fdocs.eco.com%2F)%2C%20%5Beco-routes%20codebase%5D(https%3A%2F%2Fgithub.com%2Feco%2Feco-routes))%0A-%20Wrote%20multiple%20DeFi%20whitepapers%20(see%20%5Bhere%5D(https%3A%2F%2Fjohnwhitton.com%2Fwriting%2Fintro))%0A-%20Researched%20consensus%2C%20bridging%2C%20cryptographic%20primitives%20and%20zero%20knowledge%20proofs.%0A-%20Built%20Layer%201%20platforms%2C%20DeFi%20protocols%2C%20non-custodial%20wallets%2C%20web3%20identity%2C%20wallet%20infrastructure%20and%20NFT%20contracts%20for%20gaming%20character%20token%20sales.%0A%0A%23%23%23%23%20Building%20Great%20Technical%20Teams%0A%0A-%20Lead%20a%20team%20of%208%20Engineers%20at%20ECO%0A-%20Grew%20Harmony%20from%206%20to%2020%20Engineers%0A-%20Managed%207%20engineers%20at%20LOYYAL%0A-%20Founded%20an%20enterprise%20consulting%20startup%20onboarding%20a%20team%20of%205.%0A%0A%23%23%23%23%20Successful%20Product%20Launches%0A%0A-%206%20launches%20and%20multiple%20ecosystem%20releases%20including%0A%20%20-%20%5Beco%5D(https%3A%2F%2Feco.com)%0A%20%20-%20%5BGama%20Space%20Station%20NFT%20Launch%5D(https%3A%2F%2Fopensea.io%2Fcollection%2Fgamaspacestation-genesis)%0A%20%20-%20%5B1ns%3A%20harmony%20web3%20identity%5D(https%3A%2F%2Fgithub.com%2Fharmony-one%2F1ns-docs)%0A%20%20-%20%5BHarmony%20Mainnet%5D(https%3A%2F%2Fmedium.com%2Fharmony-one%2Fharmony-day-one-mainnet-b31ac0d80233)%0A%20%20-%20%5BDubai%20Points%5D(https%3A%2F%2Fmedium.com%2F%40Loyyal%2Fdubai-points-looking-to-the-future-of-loyalty-250e12c3a2e5)%0A%20%20-%20%5BLoyyal%20Mainnet%20(Hyperledger)%5D(https%3A%2F%2Fmedium.com%2F%40IBMBlockchain%2Floyyal-transforms-loyalty-with-hyperledger-fabric-638e1b2e86cd).%0A%0A%23%23%23%23%20Founder%0A%0A-%20Founded%20an%20enterprise%20consultancy%20firm%20which%20I%20grew%20to%20%24800k%20in%20annual%20revenue%20and%20ran%20from%202000-2009.%0A-%20Lead%20research%2C%20legal%20framework%20for%20incorporation%2C%20compliance%20and%20fundraising%20efforts%20for%20multiple%20blockchain%20protocols.%0A%0A%23%23%20Projects%20%2F%20Work%20History%0A%0ABelow%20are%20links%20to%20projects%20I%20have%20designed%20and%20built%20or%20contributed%20to.%0A%0A%23%23%23%20Founder%20%2F%20Research%20Engineer%0A%0A%23%23%23%23%20%5Bjohnwhitton%5D(https%3A%2F%2Fjohnwhitton.com)%3A%20July%202018%20-%20Present%2C%20Silicon%20Valley%0A%0A-%20%5Bjincubator.com%5D(https%3A%2F%2Fgithub.com%2Fjincubator)%3A%20Solving%2C%20Arbitrage%20and%20Indexing%20(%5BTycho%5D(https%3A%2F%2Fdocs.propellerheads.xyz%2Ftycho%2Foverview))%2C%20Intents%20(%5BERC-7683%5D(https%3A%2F%2Fwww.erc7683.org%2Fspec)%2C%5BEIP-712%5D(https%3A%2F%2Feips.ethereum.org%2FEIPS%2Feip-712))%2C%20DEX(%5BUniswap%20V4%20Hooks%5D(https%3A%2F%2Fdocs.uniswap.org%2Fcontracts%2Fv4%2Foverview))%2C%20%5BUHI5%20Atrium%20Academy%5D(https%3A%2F%2Fatrium.academy%2Funiswap).%0A-%20%5Bisolab.gg%5D(https%3A%2F%2Fgithub.com%2Fisolab-gg%2Fisolab.gg)%3A%20Trustless%20Bridge%20Research%20using%20Zero%20Knowledge%20Proofs%20including%20cryptographic%20primitives%2C%20consensus%20layer%20and%20zero%20knowledge%20implementations.%20See%20the%0A-%20%5Bhiddenstate.xyz%5D(https%3A%2F%2Fhiddenstate.xyz%2F)%3A%20%5B1.country%5D(https%3A%2F%2Fgithub.com%2Fharmony-one%2F1ns-docs)%20implementation%20inspired%20by%20%5BENS%5D(https%3A%2F%2Fens.domains%2F)%20and%20enhanced%20to%20integrate%20web2%20DNS%20server%20and%20SMTP%20routing.%0A-%20%5Bmodulo%5D(https%3A%2F%2Fmodulo.so%2F)%3A%20%5B1-wallet%5D(https%3A%2F%2Fgithub.com%2Fpolymorpher%2Fone-wallet)%20and%20%5Bsms-wallet%5D(https%3A%2F%2Fgithub.com%2Fpolymorpher%2Fsms-wallet)%3A%20non-custodial%20crypto%20wallet%20and%20lightweight%20crypto%20sms%20wallet.%0A-%20%5Bkanga.finance%5D(https%3A%2F%2Fkanga.finance%2F)%3A%20Dex%20implementation%20inspired%20by%20Sushi%20and%20proof%20of%20concept%20integration%20with%20one-wallet.%20(%5Bgithub%5D(https%3A%2F%2Fgithub.com%2Fkangafinance)).%20%5BWinner%5D(https%3A%2F%2Fdocs.google.com%2Fpresentation%2Fd%2F1ZGrbKSaAdtzvMzVh0EVFBfUvA4SqiAeYVXGhJN7Orbs%2Fedit%23slide%3Did.g48989ac23a_0_0)%20of%20%2430%2C000%20in%20prizes%20from%20%5BHarmony%20Hackathon%5D(https%3A%2F%2Fbounties.gitcoin.co%2Fhackathon%2Fharmony-defi%2Fonboard).%0A-%20%5Beave.network%5D(https%3A%2F%2Feave.network%2F)%3A%20Polkadot%20DeFi%20Parachain%20(%5Bgithub%5D(https%3A%2F%2Fgithub.com%2FEaveNetwork))%20inspired%20by%20Acala%20and%20launched%20on%20the%20Rococo%20Network.%0A-%20em%E2%88%86sset%20(%5Bgithub%5D(https%3A%2F%2Fgithub.com%2Femasset))%3A%0A%20%20-%20Designed%20StableCoin%20Payment%20Platform%20integrating%20with%20banking%20systems%0A%20%20-%20Defi%20Research%3A%20Uniswap%2C%20Polkadot%2C%20Curve%2C%20Balancer%2C%20Coinbase%20Rosettanet%0A%20%20-%20Built%20gRPC%20API%20Layer%3A%20proto%2C%20golang%2C%20grpc-gateway%2C%20openapi%2C%20MongoDB%0A%20%20-%20Mobile%20App%3A%20Flutter%2C%20Dart%20integrating%20with%20gRPC%20Services%0A-%20WASDEX%3A%20designed%20a%20decentralized%20regulated%20platform%20for%20digital%20securities%0A-%20%5BShell%20protocol%5D(https%3A%2F%2Fshellprotocol.io%2F)%3A%20developed%20initial%20prototype%20of%20the%20COWRI%20protocol%2C%20a%20stable%20coin%2C%20meta%20layer%20which%20leveraged%20the%200x%20Protocol%20and%20became%20%5BShell%20Protocol%5D(https%3A%2F%2Fshellprotocol.io%2F).%0A-%20Project%20X%3A%20wrote%20white%20paper%20for%20a%20layer%201%20blockchain%20platform%0A-%20Pocketh%20-%20wrote%20design%20document%20for%20a%20mobile%20payment%20platform%20for%20restaurants%20using%20stable%20coins%20and%20collateralization.%0A-%20Jincubator%3A%20researched%20layer%201%20platforms%20including%20polkadot%2C%20cosmos%2C%20stellar%20and%20ethereum%0A%0A%23%23%20Work%20History%0A%0ABelow%20are%20the%20organizations%20I%20have%20been%20fortunate%20enough%20to%20work%20for.%0A%0A%23%23%23%20Engineering%20Manager%20-%20Senior%20Protocol%20Engineer%0A%0A%23%23%23%23%20%5BEco%5D(https%3A%2F%2Feco.com)%3A%20Aug%202023%20-%20Jan%202025%2C%20Silicon%20Valley%0A%0AA%20protocol%20for%20stablecoins%20on%20a%20dedicated%20roll-up%20using%20intents%20and%20account%20abstraction%0A%0A-%20Lead%20a%20team%20of%208%20engineers%20up%20until%20August%202024%0A-%20Senior%20Protocol%20Engineer%20from%20April%202024%20to%20present%0A-%20L3%20roll-up%20design%20and%20implementation%20of%20the%20ECO%20chain%2C%20read%20the%20%5Bdocs%5D(https%3A%2F%2Fdocs.eco.com%2F)%0A-%20Developing%20Intent%20Protocol%20and%20cross-chain%20proving%20mechanisms%2C%20see%20the%20open%20sourced%20version%20of%20the%20code%20at%20%5BCross-L2-Actions%5D(https%3A%2F%2Fgithub.com%2Fecoinc%2FCross-L2-Actions)%0A-%20Manage%20development%20of%20%5Bbend.eco%5D(https%3A%2F%2Fbend.eco)%20-%20fast%20cheap%20stable%20coin%20payments%0A-%20Lead%20the%20%5BEco%20Association%5D(https%3A%2F%2Fgithub.com%2Feco-association)%20-%20%5BCurrency%201.5%20upgrade%5D(https%3A%2F%2Fgithub.com%2Feco-association%2Fcurrency-1.5)%0A%0A%23%23%23%20Ecosystem%20Architect%0A%0A%23%23%23%23%20%5BHarmony%5D(https%3A%2F%2Fwww.harmony.one%2F)%3A%20August%202019%20-%20May%202020%2C%20Silicon%20Valley%0A%0ALayer%201%20Proof%20of%20Stake%2C%20Sharded%20Blockchain%20Protocol%0A%0A-%20Hired%20and%20Mentored%20over%2010%20Engineers%20growing%20the%20team%20from%206%20to%2020%0A-%20Launched%20Mainnet%20ONE%2C%20Token%20Swap%20and%20Open%20Staking%0A-%20Owned%20Developer%20Tooling%20including%20API%2C%20SDK%2C%20HRC%20and%20IDEs%0A-%20Deployed%20Network%20Upgrades%20including%20over%2050%20rollouts%20of%20complete%20Harmony%20Protocol%20and%20Network%0A-%20Presented%20Internationally%20at%20Technical%20Conferences%0A-%20Responsible%20for%20Partner%20Success%20and%20Developer%20Advocacy%0A%0A%23%23%23%20Chief%20Technology%20Officer%0A%0A%23%23%23%23%20%5Bloyyal%5D(https%3A%2F%2Floyyal.com%2F)%3A%20July%202016%20-%20Jun%202018%2C%20New%20York%0A%0ALoyalty%20Platform%20leveraging%20tokenization%20of%20points%20using%20blockchain%0A%0A-%20Hired%20and%20mentored%20a%20team%20of%207%20engineers%0A-%20Launched%20LOYYAL%20program%20management%20suite%20on%20HYPERLEDGER%0A-%20Built%20Dubai%20Points%20the%20first%20loyalty%20mobile%20application%20built%20on%20blockchain%0A-%20Deployed%20and%20maintained%20a%20private%20ethereum%20network%0A-%20Owned%20partner%20success%20with%20IBM%2C%20Deloitte%2C%20Emirates%20Airlines%2C%20CIBC%20Bank%0A%0A%23%23%23%20Founder%2C%20Engineering%20Manager%2C%20Architect%2C%20Developer%0A%0A%23%23%23%23%20Enterprise%20Software%20and%20Consulting%3A%20July%201986%20-%20Jun%202016%2C%20Global%0A%0AEnterprise%20Software%20and%20Integration%20Platforms%0A%0A-%20Managed%20over%20100%20initiatives%20and%2050%20staff%20at%20EFI%0A-%20Built%20EFI%20Business%20Integration%20Services%20an%20SOA%20platform%20integrating%20SAP%2C%20Salesforce%2C%20FLEXERA%20and%20external%20partners%20including%20CANON%20and%20Fedex%0A-%20Founded%20Global%20Enterprise%20Solutions%20a%20niche%20SAP%20technical%20consultancy%20and%20hired%20and%20mentored%20a%20team%20of%205%0A-%20Lead%20Autodesk%20Subscription%20Program%20integration%20-%20integrating%20SAP%2C%20TIBCO%2C%20SEEBEYOND%2C%20registration%20systems%20and%20CRM%20systems%0A-%20Developed%20Enterprise%20Software%20for%20the%20Mining%20Industry%0A%0A%23%23%20Whitepapers%20and%20Design%20Documents%0A%0A-%20%5B1ns%20(dot-country)%5D(https%3A%2F%2Fgithub.com%2Fharmony-one%2F1ns-docs)%3A%20dot-country%20design%20and%20deployment%20overview.%0A-%20%5BDraft%20EAVE%20Whitepaper%20(2021)%5D(https%3A%2F%2Fjohnwhitton.com%2Fimages%2FDraftEAVEWhitepaper.pdf)%3A%20a%20multi-chain%20web3%20engine%20(Trading%2C%20DeFi%2C%20Liquidity%20and%20NFTs)%0A-%20%5BEAVE%20Parachain%20Design%20(2021)%5D(https%3A%2F%2Fjohnwhitton.com%2Fimages%2FEAVEParachainDesign.pdf)%3A%20A%20Dedicated%20DeFi%20Polkadot%20Parachain%0A-%20%5BKANGA%20Whitepaper(2021)%5D(https%3A%2F%2Fjohnwhitton.com%2Fimages%2FKANGAWhitepaper.pdf)%3A%20a%20DeFi%20Trading%20and%20Yield%20Engine%5D%0A-%20%5BprojectX%20(2018)%5D(https%3A%2F%2Fjohnwhitton.com%2Fimages%2FprojectX.pdf)%3A%20layer%20one%20blockchain%20protocol%0A%0A%23%23%20Codebases%0A%0A-%20%5Bjincubator%5D(https%3A%2F%2Fgithub.com%2Fjincubator)%3A%20Solving%2C%20Arbitrage%20and%20Indexing%20(%5BTycho%5D(https%3A%2F%2Fdocs.propellerheads.xyz%2Ftycho%2Foverview))%2C%20Intents%20(%5BERC-7683%5D(https%3A%2F%2Fwww.erc7683.org%2Fspec)%2C%5BEIP-712%5D(https%3A%2F%2Feips.ethereum.org%2FEIPS%2Feip-712))%2C%20DEX(%5BUniswap%20V4%20Hooks%5D(https%3A%2F%2Fdocs.uniswap.org%2Fcontracts%2Fv4%2Foverview))%2C%0A-%20%5Buhi5-exercises%5D(https%3A%2F%2Fgithub.com%2Fjohnwhitton%2Fuhi5-exercises)%3A%20Uniswap%20V4%20Hook%20examples%20built%20as%20part%20of%20%5BUHI5%20Atrium%20Academy%5D(https%3A%2F%2Fatrium.academy%2Funiswap)%0A-%20%5Beco-routes%5D(https%3A%2F%2Fgithub.com%2Feco%2Feco-routes%2Ftree%2FED-4357)%3A%20Intent%20Driven%20Stable%20Coin%20Platform%20(this%20branch%20is%20where%20I%20worked%20on%20%5Bproving%5D(https%3A%2F%2Fgithub.com%2Feco%2Feco-routes%2Fblob%2FED-4357%2Fcontracts%2FProver.sol))%20and%20designing%20%5Bcross-chain%20batch%20settlement%5D(https%3A%2F%2Fgithub.com%2Feco%2Feco-routes%2Fblob%2FED-4357%2Fscripts%2Ftestnet%2FbatchSettleGeneral.ts)%0A-%20%5Bdot-country%5D(https%3A%2F%2Fgithub.com%2Fjw-1ns)%3A%20implementation%20inspired%20by%20%5BENS%5D(https%3A%2F%2Fens.domains%2F)%20and%20enhanced%20to%20integrate%20web2%20DNS%20server%20and%20SMTP%20routing.%0A-%20%5B1wallet%5D(https%3A%2F%2Fgithub.com%2Fpolymorpher%2Fone-wallet%2Ftree%2Fmaster%2Fcode%2Ftest)%3A%20non-custodial%20crypto%20wallet%0A-%20%5BNFT%20Contracts%5D(https%3A%2F%2Fgithub.com%2Fgamaspacestation%2Fcontracts)%3A%20Smart%20Contracts%20for%20%5BGama%20Space%20Station%5D(https%3A%2F%2Fopensea.io%2Fcollection%2Fgamaspacestation)%0A-%20%5BCross%20chain%20bridge%5D(https%3A%2F%2Fgithub.com%2Fjohnwhitton%2Fhorizon%2Ftree%2FrefactorV2%2Fdocs)%3A%20Horizon%20trustless%20Bridge%20(not%20the%20one%20that%20got%20hacked)%0A-%20%5BCore%20Protocol%5D(https%3A%2F%2Fgithub.com%2FEaveNetwork)%3A%20EAVE%20Network%20(a%20polkadot%20parachain)%20Rust%2C%20Substrate%2C%20ORML%2C%20TypeScript%2CFlutter%0A-%20%5BDecentralized%20Finance%5D(https%3A%2F%2Fgithub.com%2Fkangafinance)%3A%20Kanga%20Finance%3A%20Solidity%2C%20Javascript%2C%20React%0A-%20%5BSolidity%20Development%5D(https%3A%2F%2Fgithub.com%2Fjohnwhitton%2Fbc_template)%3A%20Smart%20Contract%20Development%20Framework%20using%20hardhat%20and%20typescript.%0A-%20%5BAPI%20Framework%5D(https%3A%2F%2Fgithub.com%2Femasset)%3A%20emasset%3A%20golang%2C%20dart%2C%20protobuf%0A-%20%5BLayer%20One%20Protocol%20Research%5D(https%3A%2F%2Fgithub.com%2Fjohnwhitton%2Fblockchain-eval%2Fblob%2Fmaster%2Fsubstrate.mdx)%3A%20jincubator%3A%20layer%20one%20portocol%20comparison%0A%0A%23%23%20Websites%20and%20Applications%0A%0A-%20%5B1.country%5D(https%3A%2F%2F1.country%2F)%3A%20Web3%20Identity%20integrated%20with%20web%202%20DNS%20services%0A-%20%5B1wallet.crazy.one%5D(https%3A%2F%2F1wallet.crazy.one%2Fcreate)%3A%20Non%20custodial%20crypto%20wallet%0A-%20%5BDecentralized%20Finance%5D(https%3A%2F%2Fdemo.kanga.finance)%3A%20KANGA%20App%20on%20Harmony%20Testnet%0A-%20%5BWebsite%5D(https%3A%2F%2Fkanga.finance)%3A%20KANGA%20website%0A-%20%5BWebsite%5D(https%3A%2F%2Feave.network)%3A%20EAVE%20website%0A%0A%23%23%20Presentations%20and%20Videos%0A%0A-%20%5BDemo%20Video%5D(https%3A%2F%2Fdemo.jincubator.com)%3A%20Jincuator%3A%20Intent%20Based%20Liquidity%20Management%20and%20Settlement%20Platform%0A-%20%5BTechnical%20Walk%20Through%20Video%5D(https%3A%2F%2Frunthrough.jincubator.com)%3A%20Jincubator%3A%20Intent%20Based%20Liquidity%20Management%20and%20Settlement%20Platform%0A-%20%5BOverview%20Deck%5D(https%3A%2F%2Fdeck.jincubator.com)%3A%20Jincubator%3A%20Intent%20Based%20Liquidity%20Management%20and%20Settlement%20Platform%0A-%20%5BDefi%20Presentation%5D(https%3A%2F%2Fdeck.kanga.finance)%3A%20KANGA%20Web3%20Engine%3A%20%5BDefi%20Video%5D(https%3A%2F%2Fwww.youtube.com%2F3wxAbe0GzA0)%3A%20Kanga%20Demo%20for%20Harmony%20Hackathon%0A-%20%5BCore%20Protocol%20Presentation%5D(https%3A%2F%2Fjohnwhitton.com%2Fimages%2FEAVEOverview.pdf)%3A%20EAVE%20DeFi%20Polkadot%20Parachain%0A-%20%5BDefi%20Presentation%5D(https%3A%2F%2Fjohnwhitton.com%2Fimages%2FWASDEXOverview.pd)%3A%20WASDEX%3A%20Digital%20Exchange%0A-%20%5BDefi%20Investor%20Fact%20Sheet%5D(https%3A%2F%2Fjohnwhitton.com%2Fimages%2Fwasdex.pdf)%3A%20WASDEX%3A%20Investor%20Fact%20Sheet%0A-%20%5BEcosystem%20article%5D(https%3A%2F%2Fmedium.com%2Fharmony-one%2Fdevcon-4ee34426530c)%3A%20Devcon5%20lessons%20learned%0A-%20%5BDefi%20Demo%20Video%5D(https%3A%2F%2Fyoutube.kanga.finance)%3A%20KANGA%20Demo%0A-%20%5BDefi%20Demo%20Vido%5D(https%3A%2F%2Fyoutu.be%2Fvk0e6s_2H0w)%3A%20EAVE%20Mobile%20Demo%0A-%20%5BCore%20Protocol%20Video%5D(https%3A%2F%2Fyoutu.be%2FHFo6c32qoyI)%3A%20EAVE%20Overview%0A-%20%5BLeadership%20Video%5D(https%3A%2F%2Fyoutu.be%2FeasABjC4gIY)%3A%20Harmony%20Engineers%20on%20fire%0A-%20%5BDefi%20Investor%20Video%5D(https%3A%2F%2Fyoutu.be%2FiB1wWl5vWTk)%3A%20WASDEX%3A%20World%20Asset%20and%20Securities%20Digital%20Exchange%0A%0A%23%23%20Education%0A%0ABachelor%20of%20Science%2C%20The%20University%20of%20Queensland%20(1984-1987)%0A%0A%23%23%20Additional%20Information%0A%0A-%20%5BGitcoin%5D(https%3A%2F%2Fgitcoin.co%2Fjohnwhitton)%3A%20John%20on%20Gitcoin%0A-%20%5BHackathons%5D(https%3A%2F%2Fgitcoin.co%2Fjohnwhitton%2Fhackathons)%3A%20Kanga%20Harmony%20Hackathon%20Proposals%0A%20%20-%20%5BAwards%5D(https%3A%2F%2Fdocs.google.com%2Fpresentation%2Fd%2F1ZGrbKSaAdtzvMzVh0EVFBfUvA4SqiAeYVXGhJN7Orbs%2Fedit%3Fusp%3Dsharing)%3A%20Kanga%20winning%20multiple%20awards%20in%20Harmony%20Hackathon%0A-%20%5BProposal%5D(https%3A%2F%2Ftalk.harmony.one%2Ft%2Fkanga-launch-proposal%2F8283)%3A%20Kanga%20Launch%20Proposal%0A%0A%3Cobject%0A%20%20data%3D%22%2Fimages%2Fjohn.pdf%22%0A%20%20width%3D%221000%22%0A%20%20height%3D%221000%22%0A%20%20type%3D%22application%2Fpdf%22%0A%2F%3E%0A",lastUpdatedAt:1753234955e3},{lazy:()=>o2(()=>import("./andy-Cpu_nCQG.js"),[]),path:"/references/andy",type:"mdx",filePath:"references/andy.mdx",content:"%23%23%23%20%5BAndy%5D(https%3A%2F%2Fwww.linkedin.com%2Fin%2Fandy-wu-4329664%2F)%0A%0AJohn%20is%20one%20of%20the%20most%20professional%20engineers%20I%E2%80%99ve%20ever%20worked%20with.%20He%20takes%20the%20ownership%20of%20many%20OPS%20works%2C%0Aand%20documents%20them%20down%20with%20meticulous%20details.%20Also%2C%20he%20is%20a%20fast%20learner%2C%20and%20eager%20to%20pick%20up%20new%20skills.%20He%20also%20has%20very%20good%20project%20management%20skills%2C%20and%20I%20believe%20he%20could%20be%20a%20very%20good%20leader%20either%20in%20biz%20or%20eng%20departments.%0A",lastUpdatedAt:1753140619e3},{lazy:()=>o2(()=>import("./andy-Cpu_nCQG.js"),[]),path:"/references/andy.html",type:"mdx",filePath:"references/andy.mdx",content:"%23%23%23%20%5BAndy%5D(https%3A%2F%2Fwww.linkedin.com%2Fin%2Fandy-wu-4329664%2F)%0A%0AJohn%20is%20one%20of%20the%20most%20professional%20engineers%20I%E2%80%99ve%20ever%20worked%20with.%20He%20takes%20the%20ownership%20of%20many%20OPS%20works%2C%0Aand%20documents%20them%20down%20with%20meticulous%20details.%20Also%2C%20he%20is%20a%20fast%20learner%2C%20and%20eager%20to%20pick%20up%20new%20skills.%20He%20also%20has%20very%20good%20project%20management%20skills%2C%20and%20I%20believe%20he%20could%20be%20a%20very%20good%20leader%20either%20in%20biz%20or%20eng%20departments.%0A",lastUpdatedAt:1753140619e3},{lazy:()=>o2(()=>import("./ganesha-CMkyx1wL.js"),[]),path:"/references/ganesha",type:"mdx",filePath:"references/ganesha.mdx",content:"%23%23%23%20%5BGanesha%5D(https%3A%2F%2Fwww.linkedin.com%2Fin%2Fgupadhyaya%2F)%0A%0AJohn%20is%20dedicated%2C%20hard-working%2C%20great%20work%20ethics%2C%20and%20brings%20lot%20of%20positive%20energy.%20no%20doubt%20that%20he%20is%20a%20great%20manager%20with%20good%20people%20skills.%20john%20led%20the%20whole%20hiring%20process%20and%20single%20handedly%20managed%20it%20well%2C%20without%20much%20chaos.%20no%20joke%20how%20much%20time%20and%20energy%20it%20takes.%20great%20job.%20while%20i%20believe%20it%20was%20not%20the%20best%20use%20of%20john's%20time%2C%20he%20embraced%20whatever%20this%20staking%20launch%20demanded%20from%20him.%20great%20work%20towards%20managing%20the%20release%20(deployment%2C%20documentation%2C%20etc)%20and%20taking%20some%20load%20of%20andy%20and%20daniel.%20after%20the%20staking%20release%2C%20john%20could%20refocus%20and%20quickly%20get%20back%20to%20speed%20on%20the%20ecosystem%2Ftooling%2Fpartner%20tasks%2Fgoals%20for%20q4%20and%20expedite%20some%20of%20the%20deliverables.%0A",lastUpdatedAt:1753140619e3},{lazy:()=>o2(()=>import("./ganesha-CMkyx1wL.js"),[]),path:"/references/ganesha.html",type:"mdx",filePath:"references/ganesha.mdx",content:"%23%23%23%20%5BGanesha%5D(https%3A%2F%2Fwww.linkedin.com%2Fin%2Fgupadhyaya%2F)%0A%0AJohn%20is%20dedicated%2C%20hard-working%2C%20great%20work%20ethics%2C%20and%20brings%20lot%20of%20positive%20energy.%20no%20doubt%20that%20he%20is%20a%20great%20manager%20with%20good%20people%20skills.%20john%20led%20the%20whole%20hiring%20process%20and%20single%20handedly%20managed%20it%20well%2C%20without%20much%20chaos.%20no%20joke%20how%20much%20time%20and%20energy%20it%20takes.%20great%20job.%20while%20i%20believe%20it%20was%20not%20the%20best%20use%20of%20john's%20time%2C%20he%20embraced%20whatever%20this%20staking%20launch%20demanded%20from%20him.%20great%20work%20towards%20managing%20the%20release%20(deployment%2C%20documentation%2C%20etc)%20and%20taking%20some%20load%20of%20andy%20and%20daniel.%20after%20the%20staking%20release%2C%20john%20could%20refocus%20and%20quickly%20get%20back%20to%20speed%20on%20the%20ecosystem%2Ftooling%2Fpartner%20tasks%2Fgoals%20for%20q4%20and%20expedite%20some%20of%20the%20deliverables.%0A",lastUpdatedAt:1753140619e3},{lazy:()=>o2(()=>import("./intro-BaYqDB7k.js"),[]),path:"/references/intro",type:"mdx",filePath:"references/intro.mdx",content:"%23%20John's%20Colleagues%0A%0A%3Cspan%20class%3D%22image%20main%22%3E%0A%20%20%3Cimg%20src%3D%22%2Fimages%2Fpic03.jpg%22%20alt%3D%22%22%20%2F%3E%0A%3C%2Fspan%3E%0A%0AI%20have%20been%20fortunate%20over%20my%20long%20career%20to%20have%20the%20opportunity%20to%20work%20with%20some%20of%20the%20most%20talented%20individuals%20and%20teams%20not%20only%20in%20Silicon%20Valley%2C%20but%20globally.%0A%0AIn%20my%20role%20as%20a%20founder%2C%20cto%2C%20ecoystem%20architect%20and%20engineer.%20I%20have%20learned%20from%20great%20leaders%2C%0Aresearchers%2C%20business%20strategists%20and%20engineers.%20I%20have%20built%20great%20teams%20and%20mentored%20many%20talented%20junior%20engineers.%20I%20have%20watched%20my%20teams%20apply%20their%20solid%20technical%20foundation%20to%20become%20invaluable%20contributors%20to%20the%20team%20and%20the%20organization.%20Watching%20individuals%20grow%20both%20personally%20and%20professionally%20is%20the%20most%20rewarding%20work%20I%20have%20done.%0A%0AHere%20is%20a%20video%20highlighting%20the%20strengths%20of%20the%20Harmony%20Team%20that%20I%20was%20fortunate%20enough%20to%20work%20with.%0A%0A%7B%22%20%22%7D%0A%0A%3Cdiv%20className%3D%22video-responsive%22%3E%0A%20%20%3Ciframe%0A%20%20%20%20width%3D%22560%22%0A%20%20%20%20height%3D%22315%22%0A%20%20%20%20src%3D%22https%3A%2F%2Fwww.youtube.com%2Fembed%2FeasABjC4gIY%22%0A%20%20%20%20frameBorder%3D%220%22%0A%20%20%20%20allow%3D%22accelerometer%3B%20autoplay%3B%20encrypted-media%3B%20gyroscope%3B%20picture-in-picture%22%0A%20%20%20%20allowFullScreen%0A%20%20%3E%3C%2Fiframe%3E%0A%3C%2Fdiv%3E%0A%0A%3Ca%0A%20%20href%3D%22%2Fimages%2FjohnImpact.png%22%0A%20%20target%3D%22_blank%22%0A%20%20rel%3D%22noopener%20noreferrer%22%0A%20%20style%3D%7B%7B%20color%3A%20%22blue%22%2C%20textDecoration%3A%20%22underline%22%20%7D%7D%0A%3E%0A%20%20Here%20are%20some%20quotes%20from%20some%20of%20the%20greatest%20people%20you'll%20ever%20get%20to%20work%0A%20%20with%0A%3C%2Fa%3E%0A",lastUpdatedAt:1753140619e3},{lazy:()=>o2(()=>import("./intro-BaYqDB7k.js"),[]),path:"/references/intro.html",type:"mdx",filePath:"references/intro.mdx",content:"%23%20John's%20Colleagues%0A%0A%3Cspan%20class%3D%22image%20main%22%3E%0A%20%20%3Cimg%20src%3D%22%2Fimages%2Fpic03.jpg%22%20alt%3D%22%22%20%2F%3E%0A%3C%2Fspan%3E%0A%0AI%20have%20been%20fortunate%20over%20my%20long%20career%20to%20have%20the%20opportunity%20to%20work%20with%20some%20of%20the%20most%20talented%20individuals%20and%20teams%20not%20only%20in%20Silicon%20Valley%2C%20but%20globally.%0A%0AIn%20my%20role%20as%20a%20founder%2C%20cto%2C%20ecoystem%20architect%20and%20engineer.%20I%20have%20learned%20from%20great%20leaders%2C%0Aresearchers%2C%20business%20strategists%20and%20engineers.%20I%20have%20built%20great%20teams%20and%20mentored%20many%20talented%20junior%20engineers.%20I%20have%20watched%20my%20teams%20apply%20their%20solid%20technical%20foundation%20to%20become%20invaluable%20contributors%20to%20the%20team%20and%20the%20organization.%20Watching%20individuals%20grow%20both%20personally%20and%20professionally%20is%20the%20most%20rewarding%20work%20I%20have%20done.%0A%0AHere%20is%20a%20video%20highlighting%20the%20strengths%20of%20the%20Harmony%20Team%20that%20I%20was%20fortunate%20enough%20to%20work%20with.%0A%0A%7B%22%20%22%7D%0A%0A%3Cdiv%20className%3D%22video-responsive%22%3E%0A%20%20%3Ciframe%0A%20%20%20%20width%3D%22560%22%0A%20%20%20%20height%3D%22315%22%0A%20%20%20%20src%3D%22https%3A%2F%2Fwww.youtube.com%2Fembed%2FeasABjC4gIY%22%0A%20%20%20%20frameBorder%3D%220%22%0A%20%20%20%20allow%3D%22accelerometer%3B%20autoplay%3B%20encrypted-media%3B%20gyroscope%3B%20picture-in-picture%22%0A%20%20%20%20allowFullScreen%0A%20%20%3E%3C%2Fiframe%3E%0A%3C%2Fdiv%3E%0A%0A%3Ca%0A%20%20href%3D%22%2Fimages%2FjohnImpact.png%22%0A%20%20target%3D%22_blank%22%0A%20%20rel%3D%22noopener%20noreferrer%22%0A%20%20style%3D%7B%7B%20color%3A%20%22blue%22%2C%20textDecoration%3A%20%22underline%22%20%7D%7D%0A%3E%0A%20%20Here%20are%20some%20quotes%20from%20some%20of%20the%20greatest%20people%20you'll%20ever%20get%20to%20work%0A%20%20with%0A%3C%2Fa%3E%0A",lastUpdatedAt:1753140619e3},{lazy:()=>o2(()=>import("./janet-L1BnltDh.js"),[]),path:"/references/janet",type:"mdx",filePath:"references/janet.mdx",content:"%23%23%23%20%5BJanet%5D(https%3A%2F%2Fwww.linkedin.com%2Fin%2Fjanet-liang-754090135%2F)%0A%0AJohn%20is%20always%20willing%20to%20work%20on%20whatever%20the%20team%20needs%20even%20though%20you%20don't%20necessarily%20want%20to.%0Athank%20you%20for%20listening%20and%20being%20a%20great%20mentor.%0A",lastUpdatedAt:1753140619e3},{lazy:()=>o2(()=>import("./janet-L1BnltDh.js"),[]),path:"/references/janet.html",type:"mdx",filePath:"references/janet.mdx",content:"%23%23%23%20%5BJanet%5D(https%3A%2F%2Fwww.linkedin.com%2Fin%2Fjanet-liang-754090135%2F)%0A%0AJohn%20is%20always%20willing%20to%20work%20on%20whatever%20the%20team%20needs%20even%20though%20you%20don't%20necessarily%20want%20to.%0Athank%20you%20for%20listening%20and%20being%20a%20great%20mentor.%0A",lastUpdatedAt:1753140619e3},{lazy:()=>o2(()=>import("./li-BZwaL0L0.js"),[]),path:"/references/li",type:"mdx",filePath:"references/li.mdx",content:"%23%23%23%20%5BLi%5D(https%3A%2F%2Fwww.linkedin.com%2Fin%2Flijiang2087%2F)%0A%0AI%20want%20to%20thank%20John%20for%20having%20a%20detailed%20process%20and%20documentation%20of%20the%20OSTN%20network%20upgrades%20and%20resets%20and%20communicating%20to%20me%20and%20community.%0A",lastUpdatedAt:1753140619e3},{lazy:()=>o2(()=>import("./li-BZwaL0L0.js"),[]),path:"/references/li.html",type:"mdx",filePath:"references/li.mdx",content:"%23%23%23%20%5BLi%5D(https%3A%2F%2Fwww.linkedin.com%2Fin%2Flijiang2087%2F)%0A%0AI%20want%20to%20thank%20John%20for%20having%20a%20detailed%20process%20and%20documentation%20of%20the%20OSTN%20network%20upgrades%20and%20resets%20and%20communicating%20to%20me%20and%20community.%0A",lastUpdatedAt:1753140619e3},{lazy:()=>o2(()=>import("./matt-9iUVReiY.js"),[]),path:"/references/matt",type:"mdx",filePath:"references/matt.mdx",content:"%23%23%23%20%5BMatt%5D(https%3A%2F%2Fwww.linkedin.com%2Fin%2Fmattlockyer%2F)%0A%0AJohn%20is%20amazing%20at%20explaining%20and%20delegating.%20I%E2%80%99m%20always%20impressed%20with%20his%20knowledge%20base.%20I%20think%20more%20efforts%20could%20be%20made%20to%20capture%20his%20knowledge%20in%20%E2%80%9Cexplainers%E2%80%9D%2C%20that%20would%20go%20a%20long%20way%20to%20supporting%20the%20community.%20John%20can%20also%20run%20anything%2C%20like%20up%20and%20running%20in%20a%20matter%20of%20minutes.%20This%20means%20he%20can%20troubleshoot%20tons%20of%20deployment%20issues%20from%20the%20core%20protocol%20all%20the%20way%20up%20to%20the%20application%20layer%0A",lastUpdatedAt:1753140619e3},{lazy:()=>o2(()=>import("./matt-9iUVReiY.js"),[]),path:"/references/matt.html",type:"mdx",filePath:"references/matt.mdx",content:"%23%23%23%20%5BMatt%5D(https%3A%2F%2Fwww.linkedin.com%2Fin%2Fmattlockyer%2F)%0A%0AJohn%20is%20amazing%20at%20explaining%20and%20delegating.%20I%E2%80%99m%20always%20impressed%20with%20his%20knowledge%20base.%20I%20think%20more%20efforts%20could%20be%20made%20to%20capture%20his%20knowledge%20in%20%E2%80%9Cexplainers%E2%80%9D%2C%20that%20would%20go%20a%20long%20way%20to%20supporting%20the%20community.%20John%20can%20also%20run%20anything%2C%20like%20up%20and%20running%20in%20a%20matter%20of%20minutes.%20This%20means%20he%20can%20troubleshoot%20tons%20of%20deployment%20issues%20from%20the%20core%20protocol%20all%20the%20way%20up%20to%20the%20application%20layer%0A",lastUpdatedAt:1753140619e3},{lazy:()=>o2(()=>import("./nick-kK9RKR6p.js"),[]),path:"/references/nick",type:"mdx",filePath:"references/nick.mdx",content:"%23%23%23%20%5BNick%5D(https%3A%2F%2Fwww.linkedin.com%2Fin%2Fnickwh8te%2F)%0A%0AJohn%20is%20always%20willing%20to%20jump%20on%20whatever%20needs%20to%20get%20done.%20he%20jumped%20SDK%20to%20hiring%20and%20then%20back%20into%20network%20ops.%20I%20think%20that%20John%20does%20a%20good%20job%20of%20recruiting%20and%20onboarding%20new%20interns%20and%20giving%20them%20appropriate%20difficulty%20tasks%20as%20they%20ramp%20up.%20I'm%20grateful%20that%20he%20stepped%20in%20to%20cover%20miami%20devcon%20for%20me%20at%20the%20last%20minute.%20team%20player%0A",lastUpdatedAt:1753140619e3},{lazy:()=>o2(()=>import("./nick-kK9RKR6p.js"),[]),path:"/references/nick.html",type:"mdx",filePath:"references/nick.mdx",content:"%23%23%23%20%5BNick%5D(https%3A%2F%2Fwww.linkedin.com%2Fin%2Fnickwh8te%2F)%0A%0AJohn%20is%20always%20willing%20to%20jump%20on%20whatever%20needs%20to%20get%20done.%20he%20jumped%20SDK%20to%20hiring%20and%20then%20back%20into%20network%20ops.%20I%20think%20that%20John%20does%20a%20good%20job%20of%20recruiting%20and%20onboarding%20new%20interns%20and%20giving%20them%20appropriate%20difficulty%20tasks%20as%20they%20ramp%20up.%20I'm%20grateful%20that%20he%20stepped%20in%20to%20cover%20miami%20devcon%20for%20me%20at%20the%20last%20minute.%20team%20player%0A",lastUpdatedAt:1753140619e3},{lazy:()=>o2(()=>import("./olivier-BEJ5D8NU.js"),[]),path:"/references/olivier",type:"mdx",filePath:"references/olivier.mdx",content:"%23%23%23%20%5BOlivier%5D(https%3A%2F%2Fwww.linkedin.com%2Fin%2Folivierveyrac%2F)%0A%0AJohn%20and%20I%20worked%20together%20at%20Autodesk%20during%20the%20implementation%20of%20the%20subscription%20program%2C%20John%20was%20a%20lead%20SAP%20developer%20working%20on%20the%20program.%20I%20frequently%20interacted%20with%20him%20as%20we%20rolled%20out%20the%20program.%20John%20has%20the%20rare%20gift%20of%20being%20able%20to%20understand%20complex%20business%20problems%20and%20map%20them%20to%20a%20technical%20solution.%20His%20drive%20and%20passion%20for%20the%20project%2C%20combined%20with%20his%20excellent%20communication%20skills%20and%20deep%20technical%20knowledge%2C%20were%20key%20factors%20in%20the%20successful%20rollout%20of%20the%20program.%20We've%20since%20become%20close%20friends.%20I'd%20recommend%20anyone%20looking%20for%20a%20technical%20lead%20with%20business%20acumen%20to%20consider%20John.%0A",lastUpdatedAt:1753140619e3},{lazy:()=>o2(()=>import("./olivier-BEJ5D8NU.js"),[]),path:"/references/olivier.html",type:"mdx",filePath:"references/olivier.mdx",content:"%23%23%23%20%5BOlivier%5D(https%3A%2F%2Fwww.linkedin.com%2Fin%2Folivierveyrac%2F)%0A%0AJohn%20and%20I%20worked%20together%20at%20Autodesk%20during%20the%20implementation%20of%20the%20subscription%20program%2C%20John%20was%20a%20lead%20SAP%20developer%20working%20on%20the%20program.%20I%20frequently%20interacted%20with%20him%20as%20we%20rolled%20out%20the%20program.%20John%20has%20the%20rare%20gift%20of%20being%20able%20to%20understand%20complex%20business%20problems%20and%20map%20them%20to%20a%20technical%20solution.%20His%20drive%20and%20passion%20for%20the%20project%2C%20combined%20with%20his%20excellent%20communication%20skills%20and%20deep%20technical%20knowledge%2C%20were%20key%20factors%20in%20the%20successful%20rollout%20of%20the%20program.%20We've%20since%20become%20close%20friends.%20I'd%20recommend%20anyone%20looking%20for%20a%20technical%20lead%20with%20business%20acumen%20to%20consider%20John.%0A",lastUpdatedAt:1753140619e3},{lazy:()=>o2(()=>import("./yishuang-BARS_yYy.js"),[]),path:"/references/yishuang",type:"mdx",filePath:"references/yishuang.mdx",content:"%23%23%23%20%5BYishuang%5D(https%3A%2F%2Fwww.linkedin.com%2Fin%2Fchenyishuang%2F)%0A%0AJohn%20is%20a%20really%20good%20team%20player%2C%20among%20his%20good%20qualities%2C%20I%20admire%20three%20most.%0A%0A1.%20Helpful%20and%20warm-hearted%20whenever%20you%20ask%20for%20help%2C%20John%20will%20give%20you%20the%20best%20help.%0A2.%20Avid%20learner%2C%20John%20likes%20to%20learn%20new%20things%20and%20will%20actively%20take%20new%20tasks.%20I%20see%20John%20actively%20in%20ops%20recently.%0A3.%20Responsible%2C%20longer%20view%2C%20John%20focused%20a%20lot%20on%20knowledge%20transfer.%20He%20wants%20to%20make%20sure%20the%20knowledge%20can%20be%20shared%20with%20the%20whole%20team%20and%20future%20new%20employees%2C%20so%20he%20contributed%20a%20lot%20on%20internal%20wiki%20gitbooks%2C%20which%20I%20think%20it%E2%80%99s%20a%20good%20point.%0A",lastUpdatedAt:1753140619e3},{lazy:()=>o2(()=>import("./yishuang-BARS_yYy.js"),[]),path:"/references/yishuang.html",type:"mdx",filePath:"references/yishuang.mdx",content:"%23%23%23%20%5BYishuang%5D(https%3A%2F%2Fwww.linkedin.com%2Fin%2Fchenyishuang%2F)%0A%0AJohn%20is%20a%20really%20good%20team%20player%2C%20among%20his%20good%20qualities%2C%20I%20admire%20three%20most.%0A%0A1.%20Helpful%20and%20warm-hearted%20whenever%20you%20ask%20for%20help%2C%20John%20will%20give%20you%20the%20best%20help.%0A2.%20Avid%20learner%2C%20John%20likes%20to%20learn%20new%20things%20and%20will%20actively%20take%20new%20tasks.%20I%20see%20John%20actively%20in%20ops%20recently.%0A3.%20Responsible%2C%20longer%20view%2C%20John%20focused%20a%20lot%20on%20knowledge%20transfer.%20He%20wants%20to%20make%20sure%20the%20knowledge%20can%20be%20shared%20with%20the%20whole%20team%20and%20future%20new%20employees%2C%20so%20he%20contributed%20a%20lot%20on%20internal%20wiki%20gitbooks%2C%20which%20I%20think%20it%E2%80%99s%20a%20good%20point.%0A",lastUpdatedAt:1753140619e3},{lazy:()=>o2(()=>import("./intro-D5FR8Ggz.js"),[]),path:"/research/intro",type:"mdx",filePath:"research/intro.mdx",content:"%3Cdiv%20align%3D%22center%22%3E%0A%20%20%3Ch1%20align%3D%22center%22%3EJohn%20Whitton%20Research%3C%2Fh1%3E%0A%20%20%3Cp%20align%3D%22center%22%3E%0A%20%20%20%20Research%20on%20Proving%20Mechanisms%2C%20Dedicated%20Rollups%2C%20Bridging%2C%20Zero%20Knowledge%2C%0A%20%20%20%20Consensus%2C%20DeFi%20and%20NFT's%0A%20%20%3C%2Fp%3E%0A%3C%2Fdiv%3E%0A%0AThis%20knowledge%20base%20and%20learning%20center%20is%20based%20upon%20research%20I%20have%20done%20around%20bridging%2C%20zero%20knowledge%20and%20chain%20consensus%20and%20signing%20up%20until%202023.%0A%0AFor%20more%20recent%20work%20I%20have%20been%20doing%20please%20see%0A%0A-%20%5Bjincubator%5D(https%3A%2F%2Fgithub.com%2Fjincubator)%20for%20my%20work%20on%20Solving%2C%20Arbitrage%20and%20Indexing%20using%20%5BTycho%5D(https%3A%2F%2Fdocs.propellerheads.xyz%2Ftycho%2Foverview)%2C%20Intents%20using%20%5BERC-7683%5D(https%3A%2F%2Fwww.erc7683.org%2Fspec)%2C%20%5BEIP-712%5D(https%3A%2F%2Feips.ethereum.org%2FEIPS%2Feip-712)%2C%20%5BCompactx%5D(https%3A%2F%2Fgithub.com%2Funiswap%2Fcompactx)%20and%20%5BUniswap%20V4%20Hooks%5D(https%3A%2F%2Fdocs.uniswap.org%2Fcontracts%2Fv4%2Foverview).%0A-%20%5Buhi5-exercises%5D(https%3A%2F%2Fgithub.com%2Fjohnwhitton%2Fuhi5-exercises)%20for%20Uniswap%20V4%20Hook%20examples%20built%20as%20part%20of%20%5BUHI5%20Atrium%20Academy%5D(https%3A%2F%2Fatrium.academy%2Funiswap).%0A-%20%5Beco-routes%5D(https%3A%2F%2Fgithub.com%2Feco%2Feco-routes%2Ftree%2FED-4357)%20for%20earlier%20work%20on%20cross-chain%20intents%20done%20at%20%5BECO%5D(https%3A%2F%2Feco.com%2Fdocs%2Fwhat-is-eco)%20including%20%5Beco-routes%5D(https%3A%2F%2Fgithub.com%2Feco%2Feco-routes%2Ftree%2FED-4357)%20and%20this%20branch%20is%20where%20I%20worked%20on%20%5Bproving%5D(https%3A%2F%2Fgithub.com%2Feco%2Feco-routes%2Fblob%2FED-4357%2Fcontracts%2FProver.sol)%20and%20designing%20%5Bcross-chain%20batch%20settlement%5D(https%3A%2F%2Fgithub.com%2Feco%2Feco-routes%2Fblob%2FED-4357%2Fscripts%2Ftestnet%2FbatchSettleGeneral.ts)%0A%0A**Specifically%20I'd%20like%20to%20thank**%0A%0A-%20%5BPropellor%20Heads%5D(https%3A%2F%2Fwww.propellerheads.xyz%2F)%3A%20For%20their%20outstanding%20work%20on%20indexing%2C%20simulation%20and%20execution%20for%20Solvers%20as%20part%20of%20%5BTycho%5D(https%3A%2F%2Fdocs.propellerheads.xyz%2Ftycho%2Foverview)%20which%20lays%20the%20foundation%20for%20the%20jincubator%20platform.%0A-%20%5BUniswap%5D(https%3A%2F%2Fdocs.uniswap.org%2Fcontracts%2Fv4%2Foverview)%3A%20For%20their%20leading%20work%20on%20%5BUniswap%20V4%20Hook%20Architecture%5D(https%3A%2F%2Fdocs.uniswap.org%2Fcontracts%2Fv4%2Fconcepts%2Fhooks)%20and%20their%20inspirational%20design%20of%20%5BCompactX%5D(https%3A%2F%2Fgithub.com%2Funiswap%2Fcompactx)%20including%20resource%20locking%20via%20%5Bthe-compact%5D(https%3A%2F%2Fgithub.com%2Funiswap%2Fthe-compact)%20and%20attestations%20via%20%5BEIP-712%5D(https%3A%2F%2Feips.ethereum.org%2FEIPS%2Feip-712)%20signing%20implemented%20in%20%5BTribunal%5D(https%3A%2F%2Fgithub.com%2Funiswap%2Ftribunal).%0A-%20%5BAtrium%20Academy%5D(https%3A%2F%2Fatrium.academy%2Funiswap)%3A%20For%20their%20Uniswap%20V4%20Hook%20Incubator%20and%20the%20mentors%20Haardik%20and%20Saucepoint.%0A-%20%5Beco%5D(https%3A%2F%2Feco.com)%3A%20Where%20I%20was%20fortunate%20enough%20to%20lead%20the%20engineering%20team%20and%20work%20on%20hard%20problems%20around%20Cross%20L2%20Transactions%20and%20designing%20and%20bulding%20a%20dedicated%20rollup.%0A-%20%5BAaron%20Li%5D(https%3A%2F%2Fwww.linkedin.com%2Fin%2Faaronqli%2F)%3A%20who%20has%20mentored%20and%20driven%20much%20of%20the%20research%20around%20cryptographic%20primitives%2C%20wallets%2C%20gaming%20and%20trustless%20bridging.%0A-%20%5BThe%20Delendum%20Team%5D(https%3A%2F%2Fdelendum.xyz%2Fteam)%3A%20who%20are%20leading%20many%20zero%20knowledge%20research%20initiatives.%0A-%20%5BGanesha%20Upadhyaya%5D(https%3A%2F%2Fwww.linkedin.com%2Fin%2Fgupadhyaya%2F)%3A%20For%20his%20leading%20work%20on%20the%20horizon%20bridge%20and%20other%20trustless%20bridging%20research.%0A-%20%5BRongjian%20Lan%5D(https%3A%2F%2Fwww.linkedin.com%2Fin%2Frongjianlan%2F)%3A%20For%20his%20work%20on%20core%20protocol%2C%20specifically%20Harmony%20and%20the%20knowledge%20which%20he%20generously%20shared.%0A%0A_Please%20note%3A%20Research%20is%20ongoing%20and%20as%20such%20some%20items%20are%20placeholders%20or%20work%20in%20progress_%0A",lastUpdatedAt:1753234955e3},{lazy:()=>o2(()=>import("./intro-D5FR8Ggz.js"),[]),path:"/research/intro.html",type:"mdx",filePath:"research/intro.mdx",content:"%3Cdiv%20align%3D%22center%22%3E%0A%20%20%3Ch1%20align%3D%22center%22%3EJohn%20Whitton%20Research%3C%2Fh1%3E%0A%20%20%3Cp%20align%3D%22center%22%3E%0A%20%20%20%20Research%20on%20Proving%20Mechanisms%2C%20Dedicated%20Rollups%2C%20Bridging%2C%20Zero%20Knowledge%2C%0A%20%20%20%20Consensus%2C%20DeFi%20and%20NFT's%0A%20%20%3C%2Fp%3E%0A%3C%2Fdiv%3E%0A%0AThis%20knowledge%20base%20and%20learning%20center%20is%20based%20upon%20research%20I%20have%20done%20around%20bridging%2C%20zero%20knowledge%20and%20chain%20consensus%20and%20signing%20up%20until%202023.%0A%0AFor%20more%20recent%20work%20I%20have%20been%20doing%20please%20see%0A%0A-%20%5Bjincubator%5D(https%3A%2F%2Fgithub.com%2Fjincubator)%20for%20my%20work%20on%20Solving%2C%20Arbitrage%20and%20Indexing%20using%20%5BTycho%5D(https%3A%2F%2Fdocs.propellerheads.xyz%2Ftycho%2Foverview)%2C%20Intents%20using%20%5BERC-7683%5D(https%3A%2F%2Fwww.erc7683.org%2Fspec)%2C%20%5BEIP-712%5D(https%3A%2F%2Feips.ethereum.org%2FEIPS%2Feip-712)%2C%20%5BCompactx%5D(https%3A%2F%2Fgithub.com%2Funiswap%2Fcompactx)%20and%20%5BUniswap%20V4%20Hooks%5D(https%3A%2F%2Fdocs.uniswap.org%2Fcontracts%2Fv4%2Foverview).%0A-%20%5Buhi5-exercises%5D(https%3A%2F%2Fgithub.com%2Fjohnwhitton%2Fuhi5-exercises)%20for%20Uniswap%20V4%20Hook%20examples%20built%20as%20part%20of%20%5BUHI5%20Atrium%20Academy%5D(https%3A%2F%2Fatrium.academy%2Funiswap).%0A-%20%5Beco-routes%5D(https%3A%2F%2Fgithub.com%2Feco%2Feco-routes%2Ftree%2FED-4357)%20for%20earlier%20work%20on%20cross-chain%20intents%20done%20at%20%5BECO%5D(https%3A%2F%2Feco.com%2Fdocs%2Fwhat-is-eco)%20including%20%5Beco-routes%5D(https%3A%2F%2Fgithub.com%2Feco%2Feco-routes%2Ftree%2FED-4357)%20and%20this%20branch%20is%20where%20I%20worked%20on%20%5Bproving%5D(https%3A%2F%2Fgithub.com%2Feco%2Feco-routes%2Fblob%2FED-4357%2Fcontracts%2FProver.sol)%20and%20designing%20%5Bcross-chain%20batch%20settlement%5D(https%3A%2F%2Fgithub.com%2Feco%2Feco-routes%2Fblob%2FED-4357%2Fscripts%2Ftestnet%2FbatchSettleGeneral.ts)%0A%0A**Specifically%20I'd%20like%20to%20thank**%0A%0A-%20%5BPropellor%20Heads%5D(https%3A%2F%2Fwww.propellerheads.xyz%2F)%3A%20For%20their%20outstanding%20work%20on%20indexing%2C%20simulation%20and%20execution%20for%20Solvers%20as%20part%20of%20%5BTycho%5D(https%3A%2F%2Fdocs.propellerheads.xyz%2Ftycho%2Foverview)%20which%20lays%20the%20foundation%20for%20the%20jincubator%20platform.%0A-%20%5BUniswap%5D(https%3A%2F%2Fdocs.uniswap.org%2Fcontracts%2Fv4%2Foverview)%3A%20For%20their%20leading%20work%20on%20%5BUniswap%20V4%20Hook%20Architecture%5D(https%3A%2F%2Fdocs.uniswap.org%2Fcontracts%2Fv4%2Fconcepts%2Fhooks)%20and%20their%20inspirational%20design%20of%20%5BCompactX%5D(https%3A%2F%2Fgithub.com%2Funiswap%2Fcompactx)%20including%20resource%20locking%20via%20%5Bthe-compact%5D(https%3A%2F%2Fgithub.com%2Funiswap%2Fthe-compact)%20and%20attestations%20via%20%5BEIP-712%5D(https%3A%2F%2Feips.ethereum.org%2FEIPS%2Feip-712)%20signing%20implemented%20in%20%5BTribunal%5D(https%3A%2F%2Fgithub.com%2Funiswap%2Ftribunal).%0A-%20%5BAtrium%20Academy%5D(https%3A%2F%2Fatrium.academy%2Funiswap)%3A%20For%20their%20Uniswap%20V4%20Hook%20Incubator%20and%20the%20mentors%20Haardik%20and%20Saucepoint.%0A-%20%5Beco%5D(https%3A%2F%2Feco.com)%3A%20Where%20I%20was%20fortunate%20enough%20to%20lead%20the%20engineering%20team%20and%20work%20on%20hard%20problems%20around%20Cross%20L2%20Transactions%20and%20designing%20and%20bulding%20a%20dedicated%20rollup.%0A-%20%5BAaron%20Li%5D(https%3A%2F%2Fwww.linkedin.com%2Fin%2Faaronqli%2F)%3A%20who%20has%20mentored%20and%20driven%20much%20of%20the%20research%20around%20cryptographic%20primitives%2C%20wallets%2C%20gaming%20and%20trustless%20bridging.%0A-%20%5BThe%20Delendum%20Team%5D(https%3A%2F%2Fdelendum.xyz%2Fteam)%3A%20who%20are%20leading%20many%20zero%20knowledge%20research%20initiatives.%0A-%20%5BGanesha%20Upadhyaya%5D(https%3A%2F%2Fwww.linkedin.com%2Fin%2Fgupadhyaya%2F)%3A%20For%20his%20leading%20work%20on%20the%20horizon%20bridge%20and%20other%20trustless%20bridging%20research.%0A-%20%5BRongjian%20Lan%5D(https%3A%2F%2Fwww.linkedin.com%2Fin%2Frongjianlan%2F)%3A%20For%20his%20work%20on%20core%20protocol%2C%20specifically%20Harmony%20and%20the%20knowledge%20which%20he%20generously%20shared.%0A%0A_Please%20note%3A%20Research%20is%20ongoing%20and%20as%20such%20some%20items%20are%20placeholders%20or%20work%20in%20progress_%0A",lastUpdatedAt:1753234955e3},{lazy:()=>o2(()=>import("./2018-07-17-projectx-OH0UZ1RN.js"),[]),path:"/writing/2018-07-17-projectx",type:"mdx",filePath:"writing/2018-07-17-projectx.mdx",content:"%23%20Project-X%20Technical%20White%20Paper%0A%0ABlockchain%20ledger%20platform%20with%20a%20focus%20on%20interoperability%2C%20speed%20and%20privacy%0A%0A-%20date%3A%202018-07-17%0A-%20author%3A%20John%20Whitton%0A%0A%3Cobject%0A%20%20data%3D%22%2Fposts%2F2018-07-17-projectx%2FprojectX.pdf%22%0A%20%20width%3D%221000%22%0A%20%20height%3D%221000%22%0A%20%20type%3D%22application%2Fpdf%22%0A%2F%3E%0A",lastUpdatedAt:1753110537e3},{lazy:()=>o2(()=>import("./2018-07-17-projectx-OH0UZ1RN.js"),[]),path:"/writing/2018-07-17-projectx.html",type:"mdx",filePath:"writing/2018-07-17-projectx.mdx",content:"%23%20Project-X%20Technical%20White%20Paper%0A%0ABlockchain%20ledger%20platform%20with%20a%20focus%20on%20interoperability%2C%20speed%20and%20privacy%0A%0A-%20date%3A%202018-07-17%0A-%20author%3A%20John%20Whitton%0A%0A%3Cobject%0A%20%20data%3D%22%2Fposts%2F2018-07-17-projectx%2FprojectX.pdf%22%0A%20%20width%3D%221000%22%0A%20%20height%3D%221000%22%0A%20%20type%3D%22application%2Fpdf%22%0A%2F%3E%0A",lastUpdatedAt:1753110537e3},{lazy:()=>o2(()=>import("./2019-10-16-devcon5-dtwVneXY.js"),[]),path:"/writing/2019-10-16-devcon5",type:"mdx",filePath:"writing/2019-10-16-devcon5.mdx",content:"%23%20Lessons%20Learned%20from%20Devcon5%0A%0ADevcon5%20key%20take%20aways%20on%20emerging%20blockchain%20technologies%2C%20new%20initatives%20and%20what%20the%20community%20is%20looking%20for.%0A%0A-%20date%3A%202019-10-16%0A-%20author%3A%20John%20Whitton%0A%0A%23%23%20Introduction%0A%0AHaving%20just%20returned%20from%20Devcon5%20I%E2%80%99d%20like%20to%20take%20a%20moment%20to%20thank%20Tokyo%20and%20Osaka%20specifically%20for%20the%20warmth%20and%20hospitality%20shown.%20Secondly%20I%E2%80%99d%20like%20to%20congratulate%20the%20Ethereum%20community%20for%20its%20vibrant%20and%20inclusive%20culture.%20The%20community%20continues%20to%20get%20stronger%20every%20year%20and%20the%20level%20of%20research%20and%20innovation%20is%20amazing.%0A%0ASo%20with%20that%20being%20said%2C%20I%20thought%20I%E2%80%99d%20also%20share%20some%20of%20the%20lessons%20that%20the%20Harmony%20team%20learned%20and%20also%20some%20focus%20areas%20for%20us%20as%20we%20move%20forward.%20In%20the%20form%20of%20a%20few%20slides.%0A%0A%3Cspan%20class%3D%22image%20main%22%3E%0A%20%20%3Cimg%20src%3D%22%2Fposts%2F2019-10-16-devcon5%2F1_meet.webp%22%20alt%3D%22%22%20%2F%3E%0A%3C%2Fspan%3E%0A%0AThe%20highlight%20as%20you%20can%20see%20below%20is%20engaging%20and%20learning%20from%20the%20quality%20researchers%20and%20partners%20at%20the%20conference.%0A%0A%3Cspan%20class%3D%22image%20main%22%3E%0A%20%20%3Cimg%20src%3D%22%2Fposts%2F2019-10-16-devcon5%2F2_highlight.webp%22%20alt%3D%22%22%20%2F%3E%0A%3C%2Fspan%3E%0A%0AThe%20following%205%20areas%20we%20found%20of%20most%20interest%20to%20help%20us%20better%20serve%20our%20developer%20and%20user%20community.%0A%0A%3Cspan%20class%3D%22image%20main%22%3E%0A%20%20%3Cimg%20src%3D%22%2Fposts%2F2019-10-16-devcon5%2F3_lessons.webp%22%20alt%3D%22%22%20%2F%3E%0A%3C%2Fspan%3E%0A%0A1.%20As%20a%20layer%20one%20solution%20scaling%20is%20of%20keen%20interest%20to%20us%20and%20it%20was%20exciting%20to%20see%20the%20amount%20of%20work%20done%20on%20Layer%20II%20solutions.%0A%0A%3Cspan%20class%3D%22image%20main%22%3E%0A%20%20%3Cimg%20src%3D%22%2Fposts%2F2019-10-16-devcon5%2F4_layer2.webp%22%20alt%3D%22%22%20%2F%3E%0A%3C%2Fspan%3E%0A%0A2.%20The%20overwhelming%20message%20from%20the%20community%20is%20that%20wallets%20need%20to%20be%20simplified%20to%20drive%20Main%20stream%20adoption.%0A%0A%3Cspan%20class%3D%22image%20main%22%3E%0A%20%20%3Cimg%20src%3D%22%2Fposts%2F2019-10-16-devcon5%2F5_wallets.webp%22%20alt%3D%22%22%20%2F%3E%0A%3C%2Fspan%3E%0A%0A3.%20Bridging%20decentralized%20finance%20and%20traditional%20finance%20continues%20to%20be%20sought%20after.%0A%0A%3Cspan%20class%3D%22image%20main%22%3E%0A%20%20%3Cimg%20src%3D%22%2Fposts%2F2019-10-16-devcon5%2F6_tokens.webp%22%20alt%3D%22%22%20%2F%3E%0A%3C%2Fspan%3E%0A%0A4.%20Currently%20blockchains%20are%20still%20limited%20by%20scalability%20and%20settlement%20time%20issues.%0A%0A%3Cspan%20class%3D%22image%20main%22%3E%0A%20%20%3Cimg%20src%3D%22%2Fposts%2F2019-10-16-devcon5%2F7_settlement.webp%22%20alt%3D%22%22%20%2F%3E%0A%3C%2Fspan%3E%0A%0A5.%20Sharding%20is%20one%20of%20the%20key%20approaches%20for%20scalability.%20It%20was%20refreshing%20to%20see%20some%20of%20the%20innovative%20methods%20people%20are%20using%20for%20this.%0A%0A%3Cspan%20class%3D%22image%20main%22%3E%0A%20%20%3Cimg%20src%3D%22%2Fposts%2F2019-10-16-devcon5%2F8_sharding.webp%22%20alt%3D%22%22%20%2F%3E%0A%3C%2Fspan%3E%0A%0AI%20hope%20you%20found%20this%20helpful%20and%20if%20you%E2%80%99d%20like%20to%20find%20out%20more%20about%20Harmony%20please%20use%20the%20following%20links%20to%20%5BJoin%20our%20community%5D(https%3A%2F%2Fopen.harmony.one%2F)%20%2C%20%5Bread%20our%20docs%5D(https%3A%2F%2Fdocs.harmony.one%2Fhome%2F)%20and%20%5Bcontribute%20to%20our%20protocol%5D(https%3A%2F%2Fgithub.com%2Fharmony-one).%0A%0A**Thanks%20for%20your%20interest%20in%20Harmony.**%0A%0A%3Cspan%20class%3D%22image%20main%22%3E%0A%20%20%3Cimg%20src%3D%22%2Fposts%2F2019-10-16-devcon5%2F9_harmony.webp%22%20alt%3D%22%22%20%2F%3E%0A%3C%2Fspan%3E%0A",lastUpdatedAt:1753110537e3},{lazy:()=>o2(()=>import("./2019-10-16-devcon5-dtwVneXY.js"),[]),path:"/writing/2019-10-16-devcon5.html",type:"mdx",filePath:"writing/2019-10-16-devcon5.mdx",content:"%23%20Lessons%20Learned%20from%20Devcon5%0A%0ADevcon5%20key%20take%20aways%20on%20emerging%20blockchain%20technologies%2C%20new%20initatives%20and%20what%20the%20community%20is%20looking%20for.%0A%0A-%20date%3A%202019-10-16%0A-%20author%3A%20John%20Whitton%0A%0A%23%23%20Introduction%0A%0AHaving%20just%20returned%20from%20Devcon5%20I%E2%80%99d%20like%20to%20take%20a%20moment%20to%20thank%20Tokyo%20and%20Osaka%20specifically%20for%20the%20warmth%20and%20hospitality%20shown.%20Secondly%20I%E2%80%99d%20like%20to%20congratulate%20the%20Ethereum%20community%20for%20its%20vibrant%20and%20inclusive%20culture.%20The%20community%20continues%20to%20get%20stronger%20every%20year%20and%20the%20level%20of%20research%20and%20innovation%20is%20amazing.%0A%0ASo%20with%20that%20being%20said%2C%20I%20thought%20I%E2%80%99d%20also%20share%20some%20of%20the%20lessons%20that%20the%20Harmony%20team%20learned%20and%20also%20some%20focus%20areas%20for%20us%20as%20we%20move%20forward.%20In%20the%20form%20of%20a%20few%20slides.%0A%0A%3Cspan%20class%3D%22image%20main%22%3E%0A%20%20%3Cimg%20src%3D%22%2Fposts%2F2019-10-16-devcon5%2F1_meet.webp%22%20alt%3D%22%22%20%2F%3E%0A%3C%2Fspan%3E%0A%0AThe%20highlight%20as%20you%20can%20see%20below%20is%20engaging%20and%20learning%20from%20the%20quality%20researchers%20and%20partners%20at%20the%20conference.%0A%0A%3Cspan%20class%3D%22image%20main%22%3E%0A%20%20%3Cimg%20src%3D%22%2Fposts%2F2019-10-16-devcon5%2F2_highlight.webp%22%20alt%3D%22%22%20%2F%3E%0A%3C%2Fspan%3E%0A%0AThe%20following%205%20areas%20we%20found%20of%20most%20interest%20to%20help%20us%20better%20serve%20our%20developer%20and%20user%20community.%0A%0A%3Cspan%20class%3D%22image%20main%22%3E%0A%20%20%3Cimg%20src%3D%22%2Fposts%2F2019-10-16-devcon5%2F3_lessons.webp%22%20alt%3D%22%22%20%2F%3E%0A%3C%2Fspan%3E%0A%0A1.%20As%20a%20layer%20one%20solution%20scaling%20is%20of%20keen%20interest%20to%20us%20and%20it%20was%20exciting%20to%20see%20the%20amount%20of%20work%20done%20on%20Layer%20II%20solutions.%0A%0A%3Cspan%20class%3D%22image%20main%22%3E%0A%20%20%3Cimg%20src%3D%22%2Fposts%2F2019-10-16-devcon5%2F4_layer2.webp%22%20alt%3D%22%22%20%2F%3E%0A%3C%2Fspan%3E%0A%0A2.%20The%20overwhelming%20message%20from%20the%20community%20is%20that%20wallets%20need%20to%20be%20simplified%20to%20drive%20Main%20stream%20adoption.%0A%0A%3Cspan%20class%3D%22image%20main%22%3E%0A%20%20%3Cimg%20src%3D%22%2Fposts%2F2019-10-16-devcon5%2F5_wallets.webp%22%20alt%3D%22%22%20%2F%3E%0A%3C%2Fspan%3E%0A%0A3.%20Bridging%20decentralized%20finance%20and%20traditional%20finance%20continues%20to%20be%20sought%20after.%0A%0A%3Cspan%20class%3D%22image%20main%22%3E%0A%20%20%3Cimg%20src%3D%22%2Fposts%2F2019-10-16-devcon5%2F6_tokens.webp%22%20alt%3D%22%22%20%2F%3E%0A%3C%2Fspan%3E%0A%0A4.%20Currently%20blockchains%20are%20still%20limited%20by%20scalability%20and%20settlement%20time%20issues.%0A%0A%3Cspan%20class%3D%22image%20main%22%3E%0A%20%20%3Cimg%20src%3D%22%2Fposts%2F2019-10-16-devcon5%2F7_settlement.webp%22%20alt%3D%22%22%20%2F%3E%0A%3C%2Fspan%3E%0A%0A5.%20Sharding%20is%20one%20of%20the%20key%20approaches%20for%20scalability.%20It%20was%20refreshing%20to%20see%20some%20of%20the%20innovative%20methods%20people%20are%20using%20for%20this.%0A%0A%3Cspan%20class%3D%22image%20main%22%3E%0A%20%20%3Cimg%20src%3D%22%2Fposts%2F2019-10-16-devcon5%2F8_sharding.webp%22%20alt%3D%22%22%20%2F%3E%0A%3C%2Fspan%3E%0A%0AI%20hope%20you%20found%20this%20helpful%20and%20if%20you%E2%80%99d%20like%20to%20find%20out%20more%20about%20Harmony%20please%20use%20the%20following%20links%20to%20%5BJoin%20our%20community%5D(https%3A%2F%2Fopen.harmony.one%2F)%20%2C%20%5Bread%20our%20docs%5D(https%3A%2F%2Fdocs.harmony.one%2Fhome%2F)%20and%20%5Bcontribute%20to%20our%20protocol%5D(https%3A%2F%2Fgithub.com%2Fharmony-one).%0A%0A**Thanks%20for%20your%20interest%20in%20Harmony.**%0A%0A%3Cspan%20class%3D%22image%20main%22%3E%0A%20%20%3Cimg%20src%3D%22%2Fposts%2F2019-10-16-devcon5%2F9_harmony.webp%22%20alt%3D%22%22%20%2F%3E%0A%3C%2Fspan%3E%0A",lastUpdatedAt:1753110537e3},{lazy:()=>o2(()=>import("./2021-04-01-eave-parachain-COg7NRQf.js"),[]),path:"/writing/2021-04-01-eave-parachain",type:"mdx",filePath:"writing/2021-04-01-eave-parachain.mdx",content:"%23%20EAVE%20Parachain%20Design%0A%0AEmerging%20Asset%20Value%20Engine%20(EAVE)%20Polkadot%20Parachain%0A%0A-%20date%3A%202021-04-01%0A-%20author%3A%20John%20Whitton%0A%0A%3Cobject%0A%20%20data%3D%22%2Fposts%2F2021-04-01-eave-parachain%2FEaveParachainDesign.pdf%22%0A%20%20width%3D%221000%22%0A%20%20height%3D%221000%22%0A%20%20type%3D%22application%2Fpdf%22%0A%2F%3E%0A",lastUpdatedAt:1753110537e3},{lazy:()=>o2(()=>import("./2021-04-01-eave-parachain-COg7NRQf.js"),[]),path:"/writing/2021-04-01-eave-parachain.html",type:"mdx",filePath:"writing/2021-04-01-eave-parachain.mdx",content:"%23%20EAVE%20Parachain%20Design%0A%0AEmerging%20Asset%20Value%20Engine%20(EAVE)%20Polkadot%20Parachain%0A%0A-%20date%3A%202021-04-01%0A-%20author%3A%20John%20Whitton%0A%0A%3Cobject%0A%20%20data%3D%22%2Fposts%2F2021-04-01-eave-parachain%2FEaveParachainDesign.pdf%22%0A%20%20width%3D%221000%22%0A%20%20height%3D%221000%22%0A%20%20type%3D%22application%2Fpdf%22%0A%2F%3E%0A",lastUpdatedAt:1753110537e3},{lazy:()=>o2(()=>import("./2021-05-01-kanga-DffcIXP_.js"),[]),path:"/writing/2021-05-01-kanga",type:"mdx",filePath:"writing/2021-05-01-kanga.mdx",content:"%23%20Kanga%20Protocol%20Whitepaper%0A%0AKernel%20Agnositic%20Next%20Generation%20Assets%20(KANGA)%3A%20A%20Decentralized%20Finance%20Protocol%0A%0A-%20date%3A%202021-05-01%0A-%20author%3A%20John%20Whitton%0A%0A%3Cobject%0A%20%20data%3D%22%2Fposts%2F2021-05-01-kanga%2FKANGAWhitepaper.pdf%22%0A%20%20width%3D%221000%22%0A%20%20height%3D%221000%22%0A%20%20type%3D%22application%2Fpdf%22%0A%2F%3E%0A",lastUpdatedAt:1753110537e3},{lazy:()=>o2(()=>import("./2021-05-01-kanga-DffcIXP_.js"),[]),path:"/writing/2021-05-01-kanga.html",type:"mdx",filePath:"writing/2021-05-01-kanga.mdx",content:"%23%20Kanga%20Protocol%20Whitepaper%0A%0AKernel%20Agnositic%20Next%20Generation%20Assets%20(KANGA)%3A%20A%20Decentralized%20Finance%20Protocol%0A%0A-%20date%3A%202021-05-01%0A-%20author%3A%20John%20Whitton%0A%0A%3Cobject%0A%20%20data%3D%22%2Fposts%2F2021-05-01-kanga%2FKANGAWhitepaper.pdf%22%0A%20%20width%3D%221000%22%0A%20%20height%3D%221000%22%0A%20%20type%3D%22application%2Fpdf%22%0A%2F%3E%0A",lastUpdatedAt:1753110537e3},{lazy:()=>o2(()=>import("./2021-12-01-eave-defi-C-iAjTq5.js"),[]),path:"/writing/2021-12-01-eave-defi",type:"mdx",filePath:"writing/2021-12-01-eave-defi.mdx",content:"%23%20Draft%20EAVE%20Whitepaper%0A%0AEAVE%3A%20a%20multi-chain%20web3%20engine%20to%20support%20the%20growing%20adoption%20of%20emerging%20assets%20on%20blockchain%0A%0A-%20date%3A%202021-12-01%0A-%20author%3A%20John%20Whitton%0A%0A%3Cobject%0A%20%20data%3D%22%2Fposts%2F2021-12-01-eave-defi%2FDraftEAVEWhitepaper.pdf%22%0A%20%20width%3D%221000%22%0A%20%20height%3D%221000%22%0A%20%20type%3D%22application%2Fpdf%22%0A%2F%3E%0A",lastUpdatedAt:1753110537e3},{lazy:()=>o2(()=>import("./2021-12-01-eave-defi-C-iAjTq5.js"),[]),path:"/writing/2021-12-01-eave-defi.html",type:"mdx",filePath:"writing/2021-12-01-eave-defi.mdx",content:"%23%20Draft%20EAVE%20Whitepaper%0A%0AEAVE%3A%20a%20multi-chain%20web3%20engine%20to%20support%20the%20growing%20adoption%20of%20emerging%20assets%20on%20blockchain%0A%0A-%20date%3A%202021-12-01%0A-%20author%3A%20John%20Whitton%0A%0A%3Cobject%0A%20%20data%3D%22%2Fposts%2F2021-12-01-eave-defi%2FDraftEAVEWhitepaper.pdf%22%0A%20%20width%3D%221000%22%0A%20%20height%3D%221000%22%0A%20%20type%3D%22application%2Fpdf%22%0A%2F%3E%0A",lastUpdatedAt:1753110537e3},{lazy:()=>o2(()=>import("./2023-02-23-rainbow-costs-CPp3K6wk.js"),[]),path:"/writing/2023-02-23-rainbow-costs",type:"mdx",filePath:"writing/2023-02-23-rainbow-costs.mdx",content:"%23%20Ethereum%20Bridging%20using%20Light%20Clients%20-%20Rainbow%20Costing%0A%0AA%20review%20of%20how%20Bridging%20costs%20can%20be%20reduced%20using%20light%20clients.%20Taking%20the%20near%20Rainbow%20Bridge%20as%20an%20example.%0A%0A-%20date%3A%202022-02-23%0A-%20author%3A%20John%20Whitton%0A-%20contributors%3A%20Thanks%20to%20Aaron%20Li%20for%20their%20helpful%20suggestions.%0A%0A%23%20Ethereum%20Bridging%20using%20Light%20Clients%20-%20Rainbow%20Costing%0A%0AA%20review%20of%20how%20Bridging%20costs%20can%20be%20reduced%20using%20light%20clients.%20Taking%20the%20near%20Rainbow%20Bridge%20as%20an%20example%0A%0A-%20date%3A%202022-02-23%0A-%20author%3A%20John%20Whitton%0A-%20contributors%3A%20Thanks%20to%20Aaron%20Li%20for%20their%20helpful%20suggestions.%0A%0A%23%23%20Table%20of%20Contents%0A%0A-%20%5BEthereum%20Bridging%20using%20Light%20Clients%20-%20Rainbow%20Costing%5D(%23ethereum-bridging-using-light-clients---rainbow-costing)%0A-%20%5BEthereum%20Bridging%20using%20Light%20Clients%20-%20Rainbow%20Costing%5D(%23ethereum-bridging-using-light-clients---rainbow-costing-1)%0A%20%20-%20%5BTable%20of%20Contents%5D(%23table-of-contents)%0A%20%20-%20%5BIntroduction%5D(%23introduction)%0A%20%20-%20%5BBridge%20Transaction%20Walk%20Through%5D(%23bridge-transaction-walk-through)%0A%20%20%20%20-%20%5BActors%5D(%23actors)%0A%20%20%20%20-%20%5BSample%20TransactionFlow%5D(%23sample-transactionflow)%0A%20%20-%20%5BBridging%20Resources%20Required%5D(%23bridging-resources-required)%0A%20%20%20%20-%20%5BReferences%5D(%23references)%0A%0A%23%23%20Introduction%0A%0AIn%20this%20article%20we%20review%20the%20use%20of%20light%20clients%20and%20how%20they%20can%20improve%20trust%20and%20costing%20for%20bridges.%0A%0A%23%23%20Bridge%20Transaction%20Walk%20Through%0A%0AFollowing%20is%20a%20walkthough%20of%20a%20funds%20transfer%20from%20Ethereum%20to%20a%20target%20chain%20(In%20this%20example%20Near)%2C%20complete%20with%20light%20client%20updates%2C%20block%20propogation%20and%20proofs%20to%20ensure%20the%20transaction%20validity.%0A%0A!%5BEthereum%20to%20Near%20Funds%20Transfer%5D(%2Fposts%2F2023-03-23-rainbow-costs%2Feth2NearFundsTransfer.jpg%20%22Ethereum%20to%20NEAR%20Funds%20Transfer%22)%0A%0A%23%23%23%20Actors%0A%0AFrom%20the%20diagram%20above%20you'll%20notice%20that%20there%20are%20many%20actors%20involved%2C%20below%20is%20an%20overview%20of%20the%20actors%20and%20the%20operations%20they%20perform.%0A%0A-%20Accounts%0A%20%20-%20%5BUser%20Account%5D(https%3A%2F%2Fetherscan.io%2Faddress%2F0x29da2ef94deeaf2d2f9003e9354abfcb1ff04b32)%20%3A%20The%20user%20is%20the%20owner%20of%20the%20funds%20being%20transferred%20and%20is%20responsible%20for%20signing%20the%20transactions%20to%20authorize%20bridging%20them%20accross%20chains.%20In%20this%20example%20they%20have%20accounts%20on%20%5BEthereum%5D(https%3A%2F%2Fetherscan.io%2Faddress%2F0x29da2ef94deeaf2d2f9003e9354abfcb1ff04b32)%20and%20%5BNEAR%5D(https%3A%2F%2Fnearblocks.io%2Faddress%2Fjohnrubini.near%23tokentxns)%0A%20%20-%20%5BTarget%20Chain%20Relayer%20Acccount%5D(https%3A%2F%2Fnearblocks.io%2Faddress%2Frelayer.bridge.near)%3A%20The%20relayer%20account%20is%20responsible%20for%20relaying%20messages%20from%20Ethereum%20to%20the%20target%20chain.%20%5C*Note%20this%20is%20connected%20to%20a%20relayer%20which%20is%20responsible%20for%20tasks%20such%20as%20querying%20latest%20block%20headers%20and%20getting%20light%20client%20status%20updates.%20Source%20code%20is%20%5Bhere%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Ftree%2Fmaster%2Feth2near%2Feth2near-block-relay-rs).%0A%20%20-%20%5BTarget%20Chain%20Bridge%20Validator%20Accounts%5D(https%3A%2F%2Fnearblocks.io%2Faddress%2Fbridge-validator1.near)%3A%20are%20responsible%20for%20validating%20light%20client%20update%20proposals%20and%20sending%20approval%20votes%20to%20%5BDAO%20Eth%20Client%20Contract%5D(https%3A%2F%2Fnearblocks.io%2Faddress%2Fbridge-validator.sputnik-dao.near).%0A-%20Ethereum%20Components%0A%20%20-%20%5BERC20%20Token%20Contract%5D(https%3A%2F%2Fetherscan.io%2Faddress%2F0xdac17f958d2ee523a2206206994597c13d831ec7%23code)%3A%20this%20is%20the%20token%20contract%20securing%20the%20funds%20in%20this%20examle%20USDT%20(Tether).%20Source%20code%20is%20%5Bhere%5D(https%3A%2F%2Fgithub.com%2FOpenZeppelin%2Fopenzeppelin-contracts%2Fblob%2Frelease-v4.8%2Fcontracts%2Ftoken%2FERC20%2Fpresets%2FERC20PresetMinterPauser.sol)%0A%20%20-%20%5BBridge%20Contract%5D(https%3A%2F%2Fetherscan.io%2Faddress%2F0x23ddd3e3692d1861ed57ede224608875809e127f%23code)%3A%20Responsible%20for%20deposits%20and%20withdrawals%20of%20tokens%20on%20Ethereum%20as%20well%20as%20various%20proving%20and%20propogation%20mechanisms%20such%20as%20checking%20of%20Signatures%20and%20adding%20Light%20Client%20Blocks.%20Source%20code%20is%20%5Bhere%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Fblob%2Fmaster%2Fcontracts%2Feth%2Fnearbridge%2Fcontracts%2FNearBridge.sol)%0A-%20Target%20Chain%20(NEAR)%20Components%0A%20%20-%20%5BValidator%20DAO%20Contract%5D(https%3A%2F%2Fnearblocks.io%2Faddress%2Fbridge-validator.sputnik-dao.near)%3A%20Responsible%20for%20receivng%20light%20client%20update%20proposals%20from%20the%20relayer%20and%20gathering%20approval%20votes%20for%20these%20propoals%20from%20Validators%20and%20submitting%20light%20client%20updates%20once%20the%20proposal%20is%20approved%20by%20the%20Validators.%20Source%20code%20is%20%5Bhere%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Fblob%2Fmaster%2Feth2near%2Fcontract_wrapper%2Fsrc%2Fdao_eth_client_contract.rs)%0A%20%20-%20%5BEtherum%202%20Client%5D(https%3A%2F%2Fnearblocks.io%2Faddress%2Fclient-eth2.bridge.near)%3A%20The%20Ethereum%202%20client%20is%20responsbile%20for%20processing%20light%20client%20updates%20and%20receiving%20execution%20header%20blocks%20from%20Ethereum%20via%20the%20relayer.%20Source%20code%20is%20%5Bhere%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Fblob%2Fmaster%2Fcontracts%2Fnear%2Feth2-client%2Fsrc%2Flib.rs).%20_Note%3A%20this%20replaced%20the%20%5BEthereum%201%20client%5D(https%3A%2F%2Fnearblocks.io%2Faddress%2Fclient.bridge.near)%20source%20code%20%5Bhere%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Fblob%2Fmaster%2Fcontracts%2Fnear%2Feth-client%2Fsrc%2Flib.rs)_%0A%20%20-%20%5BEthereum%20Prover%5D(https%3A%2F%2Fnearblocks.io%2Faddress%2Fprover.bridge.near)%20%3A%20The%20Ethereum%20Prover%20is%20used%20to%20prove%20transactions%20are%20included%20in%20a%20valid%20block%20Header.%20Source%20code%20is%20%5Bhere%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Fblob%2Fmaster%2Fcontracts%2Fnear%2Feth-prover%2Fsrc%2Flib.rs)%0A%20%20-%20%5BBridge%20Contract%5D(https%3A%2F%2Fnearblocks.io%2Faddress%2Ffactory.bridge.near%23contract)%3A%20The%20Bridge%20contract%20is%20responsible%20for%20managing%20tokens%20including%20creating%20new%20tokens%2C%20setting%20metadata%20and%20depositing%20and%20withdrawal%20of%20tokens.%20Source%20code%20is%20%5Bhere%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-token-connector%2Fblob%2Fmaster%2Fbridge-token-factory%2Fsrc%2Flib.rs).%0A%20%20%20%20-%20%5BNEAR%20Token%20Contract%5D(https%3A%2F%2Fnearblocks.io%2Ftoken%2Fdac17f958d2ee523a2206206994597c13d831ec7.factory.bridge.near%3Fa%3Ddac17f958d2ee523a2206206994597c13d831ec7.factory.bridge.near)%3A%20The%20target%20chain%20representation%20of%20the%20token%20(USDT)%20managed%20by%20the%20target%20chain%20bridge%20contract.%0A%0A%23%23%23%20Sample%20TransactionFlow%0A%0A1.%20Block%20Propogation%0A%20%20%201.%20Get%20the%20Latest%20Slot%3A%20The%20relayer%20loops%20polling%20Ethereum%20every%2012%20seconds%20to%20get%20the%20latest%20slot.%20It%20then%20checks%20if%20it%20is%20for%20a%20new%20epoch%20and%20if%20so%20(every%206%20minutes)%20submits%20an%20execution%20header%20(with%2032%20blocks%20in%20it)%20and%20a%20light%20client%20update%20with%20the%20latest%20approved%20epochs%20and%20updated%20sync_comittee.%20Relayer%20source%20code%20for%20the%20loop%20is%20%5Bhere%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Fblob%2Fmaster%2Feth2near%2Feth2near-block-relay-rs%2Fsrc%2Feth2near_relay.rs%23L258)%20for%20retrieving%20the%20latest%20slot%20is%20%5Bhere%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Fblob%2Fmaster%2Feth2near%2Feth2near-block-relay-rs%2Fsrc%2Feth2near_relay.rs%23L163)%2C%20for%20submitting%20execution%20blocks%20is%20%5Bhere%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Fblob%2Fmaster%2Feth2near%2Feth2near-block-relay-rs%2Fsrc%2Feth2near_relay.rs%23L399)%20and%20for%20sending%20light%20client%20updates%20is%20%5Bhere%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Fblob%2Fmaster%2Feth2near%2Feth2near-block-relay-rs%2Fsrc%2Feth2near_relay.rs%23L489).%0A%20%20%20%20%20%201.%20%5BSend%20Block%20Headers%20(submit_execution_header)%5D(https%3A%2F%2Fnearblocks.io%2Ftxns%2FHaXUxCvA1D87QXJzPzSYXmFYNuSLbTmyuxShzWgSLvPM)%3A%20Batch%20transaction%20which%20submits%2032%20block%20headers%20to%20%5Bclient-eth2.bridge.near%5D(https%3A%2F%2Fnearblocks.io%2Faddress%2Fclient-eth2.bridge.near)%20for%20Ethereum%20Blocks%2016493592%20to%2016493623.%20(The%20second%20slot%20in%20epoch%20%5B176%2C936%5D(https%3A%2F%2Fbeaconcha.in%2Fepoch%2F176936)%20to%20the%20first%20slot%20in%20epoch%20%5B176%2C937%5D(https%3A%2F%2Fbeaconcha.in%2Fepoch%2F176937)).%20**Executed%20every%206%20minutes%20when%20the%20first%20slot%20of%20a%20new%20epoch%20is%20found.**%0A%20%20%20%20%20%202.%20%5BCreate%20Light%20Client%20update%20proposal(add_proposal)%5D(https%3A%2F%2Fnearblocks.io%2Ftxns%2FJ1tQ465Dxt4UhWy9Msn2pZCbdkWatSepqsx9sDZaX35z%23)%3A%20calls%20%5Bbridge-validator.sputnik-dao.near%5D(https%3A%2F%2Fnearblocks.io%2Faddress%2Fbridge-validator.sputnik-dao.near)%20to%20add%20proposal%2017410%20for%20%5Bslot%205%2C661%2C984%5D(https%3A%2F%2Fbeaconcha.in%2Fslot%2F5661984)%20in%20epoch%20%5B176%2C937%5D(https%3A%2F%2Fbeaconcha.in%2Fepoch%2F176937).%0A%20%20%202.%20%5BApprove%20Proposal%20(act_proposal)%5D(https%3A%2F%2Fnearblocks.io%2Ftxns%2FD5uP4BbRSUX4ZGijRfWGkR5KbFb2Kb9q1gSsFVQbYSLt)%3A%20sends%20a%20VoteApprove%20action%20for%20proposal%2017410%20from%20a%20%5Bbridge%20validator%5D(https%3A%2F%2Fnearblocks.io%2Faddress%2Fbridge-validator1.near)%20to%20the%20%5BValidator%20DAO%20Contract%5D(https%3A%2F%2Fnearblocks.io%2Faddress%2Fbridge-validator.sputnik-dao.near).%0A%20%20%20%20%20%201.%20act_proposal%20in%20contract%20%5Bbridge-validator.sputnik-dao.near%5D(https%3A%2F%2Fnearblocks.io%2Faddress%2Fbridge-validator.sputnik-dao.near)%0A%20%20%20%20%20%202.%20submit_beacon_chain_light_client_update%20in%20%5Bclient-eth2.bridge.near%5D(https%3A%2F%2Fnearblocks.io%2Faddress%2Fclient-eth2.bridge.near)%0A%20%20%20%20%20%203.%20on_proposal_callback%20in%20contract%20%5Bbridge-validator.sputnik-dao.near%5D(https%3A%2F%2Fnearblocks.io%2Faddress%2Fbridge-validator.sputnik-dao.near)%0A2.%20Funds%20Transfer%20Transaction%20Flow%0A%20%20%201.%20%5BLock%20Funds%20On%20Ethereum%5D(https%3A%2F%2Fetherscan.io%2Ftx%2F0xa685c59a24cc2056e10e660ce8a8bff7bbc335433698e138c77aaadf20ecb614)%3A%20Locking%2010%2C000%20USDT%20to%20send%20to%20user%20on%20NEAR.%0A%20%20%202.%20%5BDeposit%20Funds%20on%20Target%20Chain%20Bridge%20Contract%20(deposit)%5D(https%3A%2F%2Fnearblocks.io%2Ftxns%2FvniyRR67ndrtvpoQ9c5ACoT4e9c283VSQsrZcN6GGto%23execution)%0A%20%20%20%20%20%201.%20deposit%20in%20contract%20factory.bridge.near%0A%20%20%20%20%20%202.%20verify_log_entry%20in%20contract%20prover.bridge.near%0A%20%20%20%20%20%203.%20block_hash_safe%20in%20contract%20client-eth2.bridge.near%0A%20%20%20%20%20%204.%20finish_deposit%20in%20contract%20factory.bridge.near%20%3A%20mint%20of%2010%2C000%20USDT.%0A%0A**TODO**%0A%0A-%20Find%20and%20review%20the%20source%20code%20for%20the%20%5Bvalidator%20light%20client%20approval%20update%5D(https%3A%2F%2Fnearblocks.io%2Ftxns%2FHnzBR7x5Sxnmcm4MfRt1ghhMjJNspDaygUUKeM9T27Li%23execution).%20_Note%3A%20the%20eth2_client%20has%20a%20%5Bvalidate_light_client_update%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Fblob%2Fmaster%2Fcontracts%2Fnear%2Feth2-client%2Fsrc%2Flib.rs%23L311)%20which%20is%20%5Bconfigurable%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Fblob%2Fmaster%2Fcontracts%2Fnear%2Feth2-client%2Fsrc%2Flib.rs%23L42)%20and%20is%20used%20for%20debugging%20purposes._%0A%0A%23%23%20Bridging%20Resources%20Required%0A%0AHere%20is%20the%20storage%20and%20compuational%20costs%20per%20component.%0A%0A%7C%20Component%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7C%20Data%20%20%20%20%20%20%20%20%20%20%20%7C%20Storage%20%7C%20Notes%20%7C%0A%7C%20---------------------------------------------------------------------------------------------------------------------------%20%7C%20--------------%20%7C%20-------%20%7C%20-----%20%7C%0A%7C%20%5BEthereum%202%20Client%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Fblob%2Fmaster%2Fcontracts%2Fnear%2Feth2-client%2Fsrc%2Flib.rs%23L35)%20%7C%20---%20%20%20%20%20%20%20%20%20%20%20%20%7C%20---%20%20%20%20%20%7C%20---%20%20%20%7C%0A%7C%20%5BProver%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Fblob%2Fmaster%2Fcontracts%2Fnear%2Feth-prover%2Fsrc%2Flib.rs)%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7C%20not%20applicable%20%7C%200%20bytes%20%7C%20%20%20%20%20%20%20%7C%0A%7C%20%5BDAO%20Contract%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Fblob%2Fmaster%2Feth2near%2Fcontract_wrapper%2Fsrc%2Fdao_contract.rs)%20%20%7C%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7C%20%20%20%20%20%20%20%20%20%7C%20%20%20%20%20%20%20%7C%0A%0A**TODO**%0AReview%20the%20following%20data%20structure%20and%20elements%20and%20move%20into%20the%20table%20above%20commenting%20on%20any%20mandatory%20requirements%20and%20structures%20that%20can%20be%20improved.%0A%0A%60%60%60go%0Apub%20struct%20Eth2Client%20%7B%0A%20%20%20%20%2F%2F%2F%20If%20set%2C%20only%20light%20client%20updates%20by%20the%20trusted%20signer%20will%20be%20accepted%0A%20%20%20%20trusted_signer%3A%20Option%3CAccountId%3E%2C%0A%20%20%20%20%2F%2F%2F%20Mask%20determining%20all%20paused%20functions%0A%20%20%20%20paused%3A%20Mask%2C%0A%20%20%20%20%2F%2F%2F%20Whether%20the%20client%20validates%20the%20updates.%0A%20%20%20%20%2F%2F%2F%20Should%20only%20be%20set%20to%20%60false%60%20for%20debugging%2C%20testing%2C%20and%20diagnostic%20purposes%0A%20%20%20%20validate_updates%3A%20bool%2C%0A%20%20%20%20%2F%2F%2F%20Whether%20the%20client%20verifies%20BLS%20signatures.%0A%20%20%20%20verify_bls_signatures%3A%20bool%2C%0A%20%20%20%20%2F%2F%2F%20We%20store%20the%20hashes%20of%20the%20blocks%20for%20the%20past%20%60hashes_gc_threshold%60%20headers.%0A%20%20%20%20%2F%2F%2F%20Events%20that%20happen%20past%20this%20threshold%20cannot%20be%20verified%20by%20the%20client.%0A%20%20%20%20%2F%2F%2F%20It%20is%20desirable%20that%20this%20number%20is%20larger%20than%207%20days'%20worth%20of%20headers%2C%20which%20is%20roughly%0A%20%20%20%20%2F%2F%2F%2051k%20Ethereum%20blocks.%20So%20this%20number%20should%20be%2051k%20in%20production.%0A%20%20%20%20hashes_gc_threshold%3A%20u64%2C%0A%20%20%20%20%2F%2F%2F%20Network.%20e.g.%20mainnet%2C%20kiln%0A%20%20%20%20network%3A%20Network%2C%0A%20%20%20%20%2F%2F%2F%20Hashes%20of%20the%20finalized%20execution%20blocks%20mapped%20to%20their%20numbers.%20Stores%20up%20to%20%60hashes_gc_threshold%60%20entries.%0A%20%20%20%20%2F%2F%2F%20Execution%20block%20number%20-%3E%20execution%20block%20hash%0A%20%20%20%20finalized_execution_blocks%3A%20LookupMap%3Cu64%2C%20H256%3E%2C%0A%20%20%20%20%2F%2F%2F%20All%20unfinalized%20execution%20blocks'%20headers%20hashes%20mapped%20to%20their%20%60HeaderInfo%60.%0A%20%20%20%20%2F%2F%2F%20Execution%20block%20hash%20-%3E%20ExecutionHeaderInfo%20object%0A%20%20%20%20unfinalized_headers%3A%20UnorderedMap%3CH256%2C%20ExecutionHeaderInfo%3E%2C%0A%20%20%20%20%2F%2F%2F%20%60AccountId%60s%20mapped%20to%20their%20number%20of%20submitted%20headers.%0A%20%20%20%20%2F%2F%2F%20Submitter%20account%20-%3E%20Num%20of%20submitted%20headers%0A%20%20%20%20submitters%3A%20LookupMap%3CAccountId%2C%20u32%3E%2C%0A%20%20%20%20%2F%2F%2F%20Max%20number%20of%20unfinalized%20blocks%20allowed%20to%20be%20stored%20by%20one%20submitter%20account%0A%20%20%20%20%2F%2F%2F%20This%20value%20should%20be%20at%20least%2032%20blocks%20(1%20epoch)%2C%20but%20the%20recommended%20value%20is%201024%20(32%20epochs)%0A%20%20%20%20max_submitted_blocks_by_account%3A%20u32%2C%0A%20%20%20%20%2F%2F%20The%20minimum%20balance%20that%20should%20be%20attached%20to%20register%20a%20new%20submitter%20account%0A%20%20%20%20min_storage_balance_for_submitter%3A%20Balance%2C%0A%20%20%20%20%2F%2F%2F%20Light%20client%20state%0A%20%20%20%20finalized_beacon_header%3A%20ExtendedBeaconBlockHeader%2C%0A%20%20%20%20finalized_execution_header%3A%20LazyOption%3CExecutionHeaderInfo%3E%2C%0A%20%20%20%20current_sync_committee%3A%20LazyOption%3CSyncCommittee%3E%2C%0A%20%20%20%20next_sync_committee%3A%20LazyOption%3CSyncCommittee%3E%2C%0A%7D%0A%60%60%60%0A%0A%23%23%23%20References%0A%0A**Explorer%20and%20Interactive%20Links**%0A%0A-%20Near%0A%0A%20%20-%20eth-prover%0A%20%20%20%20-%20%5Bhttps%3A%2F%2Fnearblocks.io%2Faddress%2Frelayer.bridge.near%5D(https%3A%2F%2Fnearblocks.io%2Faddress%2Frelayer.bridge.near)%0A%20%20%20%20-%20%5Bhttps%3A%2F%2Fnearblocks.io%2Faddress%2Fclient-eth2.bridge.near%5D(https%3A%2F%2Fnearblocks.io%2Faddress%2Fclient-eth2.bridge.near)%0A%20%20%20%20-%20%5Bhttps%3A%2F%2Fnearblocks.io%2Faddress%2Fclient.bridge.near%5D(https%3A%2F%2Fnearblocks.io%2Faddress%2Fclient.bridge.near)%0A%20%20-%20eth-client%0A%20%20%20%20-%20%5Bhttps%3A%2F%2Fnearblocks.io%2Faddress%2Fprover.bridge.near%5D(https%3A%2F%2Fnearblocks.io%2Faddress%2Fprover.bridge.near)%0A%20%20%20%20-%20%5Bhttps%3A%2F%2Fnearblocks.io%2Faddress%2Fclient.bridge.near%5D(https%3A%2F%2Fnearblocks.io%2Faddress%2Fclient.bridge.near)%0A%20%20-%20factory%20(manages%20tokens)%0A%20%20%20%20-%20%5Bhttps%3A%2F%2Fnearblocks.io%2Faddress%2Ffactory.bridge.near%5D(https%3A%2F%2Fnearblocks.io%2Faddress%2Ffactory.bridge.near)%0A%20%20-%20dao%0A%20%20%20%20-%20%5Bhttps%3A%2F%2Fnearblocks.io%2Faddress%2Fbridge-validator.sputnik-dao.near%5D(https%3A%2F%2Fnearblocks.io%2Faddress%2Fbridge-validator.sputnik-dao.near)%0A%20%20-%20aurora%0A%20%20%20%20-%20%5Bhttps%3A%2F%2Fnearblocks.io%2Faddress%2Faurora%5D(https%3A%2F%2Fnearblocks.io%2Faddress%2Faurora)%0A%20%20%20%20-%20%5Bhttps%3A%2F%2Fnearblocks.io%2Faddress%2Frelay.aurora%5D(https%3A%2F%2Fnearblocks.io%2Faddress%2Frelay.aurora)%0A%0A-%20Ethereum%0A%20%20-%20%5Bbeaconcha.in%5D(https%3A%2F%2Fbeaconcha.in%2F)%0A%20%20%20%20-%20%5Bvalidators%5D(https%3A%2F%2Fbeaconcha.in%2Fvalidators)%0A%20%20%20%20-%20%5Bepochs%5D(https%3A%2F%2Fbeaconcha.in%2Fepochs)%0A%20%20%20%20-%20%5Bslots%5D(https%3A%2F%2Fbeaconcha.in%2Fslots)%0A%20%20%20%20-%20%5Bblocks%5D(https%3A%2F%2Fbeaconcha.in%2Fblocks)%0A%20%20%20%20-%20%5Btransactions%5D(https%3A%2F%2Fbeaconcha.in%2Ftransactions)%0A%20%20-%20Near%20Bridge%0A%20%20%20%20-%20%5BNearBridge%5D(https%3A%2F%2Fetherscan.io%2Faddress%2F0x3fefc5a4b1c02f21cbc8d3613643ba0635b9a873)%0A%20%20%20%20-%20%5BERC20Locker%5D(https%3A%2F%2Fetherscan.io%2Ftx%2F0xa685c59a24cc2056e10e660ce8a8bff7bbc335433698e138c77aaadf20ecb614)%0A",lastUpdatedAt:1753110537e3},{lazy:()=>o2(()=>import("./2023-02-23-rainbow-costs-CPp3K6wk.js"),[]),path:"/writing/2023-02-23-rainbow-costs.html",type:"mdx",filePath:"writing/2023-02-23-rainbow-costs.mdx",content:"%23%20Ethereum%20Bridging%20using%20Light%20Clients%20-%20Rainbow%20Costing%0A%0AA%20review%20of%20how%20Bridging%20costs%20can%20be%20reduced%20using%20light%20clients.%20Taking%20the%20near%20Rainbow%20Bridge%20as%20an%20example.%0A%0A-%20date%3A%202022-02-23%0A-%20author%3A%20John%20Whitton%0A-%20contributors%3A%20Thanks%20to%20Aaron%20Li%20for%20their%20helpful%20suggestions.%0A%0A%23%20Ethereum%20Bridging%20using%20Light%20Clients%20-%20Rainbow%20Costing%0A%0AA%20review%20of%20how%20Bridging%20costs%20can%20be%20reduced%20using%20light%20clients.%20Taking%20the%20near%20Rainbow%20Bridge%20as%20an%20example%0A%0A-%20date%3A%202022-02-23%0A-%20author%3A%20John%20Whitton%0A-%20contributors%3A%20Thanks%20to%20Aaron%20Li%20for%20their%20helpful%20suggestions.%0A%0A%23%23%20Table%20of%20Contents%0A%0A-%20%5BEthereum%20Bridging%20using%20Light%20Clients%20-%20Rainbow%20Costing%5D(%23ethereum-bridging-using-light-clients---rainbow-costing)%0A-%20%5BEthereum%20Bridging%20using%20Light%20Clients%20-%20Rainbow%20Costing%5D(%23ethereum-bridging-using-light-clients---rainbow-costing-1)%0A%20%20-%20%5BTable%20of%20Contents%5D(%23table-of-contents)%0A%20%20-%20%5BIntroduction%5D(%23introduction)%0A%20%20-%20%5BBridge%20Transaction%20Walk%20Through%5D(%23bridge-transaction-walk-through)%0A%20%20%20%20-%20%5BActors%5D(%23actors)%0A%20%20%20%20-%20%5BSample%20TransactionFlow%5D(%23sample-transactionflow)%0A%20%20-%20%5BBridging%20Resources%20Required%5D(%23bridging-resources-required)%0A%20%20%20%20-%20%5BReferences%5D(%23references)%0A%0A%23%23%20Introduction%0A%0AIn%20this%20article%20we%20review%20the%20use%20of%20light%20clients%20and%20how%20they%20can%20improve%20trust%20and%20costing%20for%20bridges.%0A%0A%23%23%20Bridge%20Transaction%20Walk%20Through%0A%0AFollowing%20is%20a%20walkthough%20of%20a%20funds%20transfer%20from%20Ethereum%20to%20a%20target%20chain%20(In%20this%20example%20Near)%2C%20complete%20with%20light%20client%20updates%2C%20block%20propogation%20and%20proofs%20to%20ensure%20the%20transaction%20validity.%0A%0A!%5BEthereum%20to%20Near%20Funds%20Transfer%5D(%2Fposts%2F2023-03-23-rainbow-costs%2Feth2NearFundsTransfer.jpg%20%22Ethereum%20to%20NEAR%20Funds%20Transfer%22)%0A%0A%23%23%23%20Actors%0A%0AFrom%20the%20diagram%20above%20you'll%20notice%20that%20there%20are%20many%20actors%20involved%2C%20below%20is%20an%20overview%20of%20the%20actors%20and%20the%20operations%20they%20perform.%0A%0A-%20Accounts%0A%20%20-%20%5BUser%20Account%5D(https%3A%2F%2Fetherscan.io%2Faddress%2F0x29da2ef94deeaf2d2f9003e9354abfcb1ff04b32)%20%3A%20The%20user%20is%20the%20owner%20of%20the%20funds%20being%20transferred%20and%20is%20responsible%20for%20signing%20the%20transactions%20to%20authorize%20bridging%20them%20accross%20chains.%20In%20this%20example%20they%20have%20accounts%20on%20%5BEthereum%5D(https%3A%2F%2Fetherscan.io%2Faddress%2F0x29da2ef94deeaf2d2f9003e9354abfcb1ff04b32)%20and%20%5BNEAR%5D(https%3A%2F%2Fnearblocks.io%2Faddress%2Fjohnrubini.near%23tokentxns)%0A%20%20-%20%5BTarget%20Chain%20Relayer%20Acccount%5D(https%3A%2F%2Fnearblocks.io%2Faddress%2Frelayer.bridge.near)%3A%20The%20relayer%20account%20is%20responsible%20for%20relaying%20messages%20from%20Ethereum%20to%20the%20target%20chain.%20%5C*Note%20this%20is%20connected%20to%20a%20relayer%20which%20is%20responsible%20for%20tasks%20such%20as%20querying%20latest%20block%20headers%20and%20getting%20light%20client%20status%20updates.%20Source%20code%20is%20%5Bhere%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Ftree%2Fmaster%2Feth2near%2Feth2near-block-relay-rs).%0A%20%20-%20%5BTarget%20Chain%20Bridge%20Validator%20Accounts%5D(https%3A%2F%2Fnearblocks.io%2Faddress%2Fbridge-validator1.near)%3A%20are%20responsible%20for%20validating%20light%20client%20update%20proposals%20and%20sending%20approval%20votes%20to%20%5BDAO%20Eth%20Client%20Contract%5D(https%3A%2F%2Fnearblocks.io%2Faddress%2Fbridge-validator.sputnik-dao.near).%0A-%20Ethereum%20Components%0A%20%20-%20%5BERC20%20Token%20Contract%5D(https%3A%2F%2Fetherscan.io%2Faddress%2F0xdac17f958d2ee523a2206206994597c13d831ec7%23code)%3A%20this%20is%20the%20token%20contract%20securing%20the%20funds%20in%20this%20examle%20USDT%20(Tether).%20Source%20code%20is%20%5Bhere%5D(https%3A%2F%2Fgithub.com%2FOpenZeppelin%2Fopenzeppelin-contracts%2Fblob%2Frelease-v4.8%2Fcontracts%2Ftoken%2FERC20%2Fpresets%2FERC20PresetMinterPauser.sol)%0A%20%20-%20%5BBridge%20Contract%5D(https%3A%2F%2Fetherscan.io%2Faddress%2F0x23ddd3e3692d1861ed57ede224608875809e127f%23code)%3A%20Responsible%20for%20deposits%20and%20withdrawals%20of%20tokens%20on%20Ethereum%20as%20well%20as%20various%20proving%20and%20propogation%20mechanisms%20such%20as%20checking%20of%20Signatures%20and%20adding%20Light%20Client%20Blocks.%20Source%20code%20is%20%5Bhere%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Fblob%2Fmaster%2Fcontracts%2Feth%2Fnearbridge%2Fcontracts%2FNearBridge.sol)%0A-%20Target%20Chain%20(NEAR)%20Components%0A%20%20-%20%5BValidator%20DAO%20Contract%5D(https%3A%2F%2Fnearblocks.io%2Faddress%2Fbridge-validator.sputnik-dao.near)%3A%20Responsible%20for%20receivng%20light%20client%20update%20proposals%20from%20the%20relayer%20and%20gathering%20approval%20votes%20for%20these%20propoals%20from%20Validators%20and%20submitting%20light%20client%20updates%20once%20the%20proposal%20is%20approved%20by%20the%20Validators.%20Source%20code%20is%20%5Bhere%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Fblob%2Fmaster%2Feth2near%2Fcontract_wrapper%2Fsrc%2Fdao_eth_client_contract.rs)%0A%20%20-%20%5BEtherum%202%20Client%5D(https%3A%2F%2Fnearblocks.io%2Faddress%2Fclient-eth2.bridge.near)%3A%20The%20Ethereum%202%20client%20is%20responsbile%20for%20processing%20light%20client%20updates%20and%20receiving%20execution%20header%20blocks%20from%20Ethereum%20via%20the%20relayer.%20Source%20code%20is%20%5Bhere%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Fblob%2Fmaster%2Fcontracts%2Fnear%2Feth2-client%2Fsrc%2Flib.rs).%20_Note%3A%20this%20replaced%20the%20%5BEthereum%201%20client%5D(https%3A%2F%2Fnearblocks.io%2Faddress%2Fclient.bridge.near)%20source%20code%20%5Bhere%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Fblob%2Fmaster%2Fcontracts%2Fnear%2Feth-client%2Fsrc%2Flib.rs)_%0A%20%20-%20%5BEthereum%20Prover%5D(https%3A%2F%2Fnearblocks.io%2Faddress%2Fprover.bridge.near)%20%3A%20The%20Ethereum%20Prover%20is%20used%20to%20prove%20transactions%20are%20included%20in%20a%20valid%20block%20Header.%20Source%20code%20is%20%5Bhere%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Fblob%2Fmaster%2Fcontracts%2Fnear%2Feth-prover%2Fsrc%2Flib.rs)%0A%20%20-%20%5BBridge%20Contract%5D(https%3A%2F%2Fnearblocks.io%2Faddress%2Ffactory.bridge.near%23contract)%3A%20The%20Bridge%20contract%20is%20responsible%20for%20managing%20tokens%20including%20creating%20new%20tokens%2C%20setting%20metadata%20and%20depositing%20and%20withdrawal%20of%20tokens.%20Source%20code%20is%20%5Bhere%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-token-connector%2Fblob%2Fmaster%2Fbridge-token-factory%2Fsrc%2Flib.rs).%0A%20%20%20%20-%20%5BNEAR%20Token%20Contract%5D(https%3A%2F%2Fnearblocks.io%2Ftoken%2Fdac17f958d2ee523a2206206994597c13d831ec7.factory.bridge.near%3Fa%3Ddac17f958d2ee523a2206206994597c13d831ec7.factory.bridge.near)%3A%20The%20target%20chain%20representation%20of%20the%20token%20(USDT)%20managed%20by%20the%20target%20chain%20bridge%20contract.%0A%0A%23%23%23%20Sample%20TransactionFlow%0A%0A1.%20Block%20Propogation%0A%20%20%201.%20Get%20the%20Latest%20Slot%3A%20The%20relayer%20loops%20polling%20Ethereum%20every%2012%20seconds%20to%20get%20the%20latest%20slot.%20It%20then%20checks%20if%20it%20is%20for%20a%20new%20epoch%20and%20if%20so%20(every%206%20minutes)%20submits%20an%20execution%20header%20(with%2032%20blocks%20in%20it)%20and%20a%20light%20client%20update%20with%20the%20latest%20approved%20epochs%20and%20updated%20sync_comittee.%20Relayer%20source%20code%20for%20the%20loop%20is%20%5Bhere%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Fblob%2Fmaster%2Feth2near%2Feth2near-block-relay-rs%2Fsrc%2Feth2near_relay.rs%23L258)%20for%20retrieving%20the%20latest%20slot%20is%20%5Bhere%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Fblob%2Fmaster%2Feth2near%2Feth2near-block-relay-rs%2Fsrc%2Feth2near_relay.rs%23L163)%2C%20for%20submitting%20execution%20blocks%20is%20%5Bhere%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Fblob%2Fmaster%2Feth2near%2Feth2near-block-relay-rs%2Fsrc%2Feth2near_relay.rs%23L399)%20and%20for%20sending%20light%20client%20updates%20is%20%5Bhere%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Fblob%2Fmaster%2Feth2near%2Feth2near-block-relay-rs%2Fsrc%2Feth2near_relay.rs%23L489).%0A%20%20%20%20%20%201.%20%5BSend%20Block%20Headers%20(submit_execution_header)%5D(https%3A%2F%2Fnearblocks.io%2Ftxns%2FHaXUxCvA1D87QXJzPzSYXmFYNuSLbTmyuxShzWgSLvPM)%3A%20Batch%20transaction%20which%20submits%2032%20block%20headers%20to%20%5Bclient-eth2.bridge.near%5D(https%3A%2F%2Fnearblocks.io%2Faddress%2Fclient-eth2.bridge.near)%20for%20Ethereum%20Blocks%2016493592%20to%2016493623.%20(The%20second%20slot%20in%20epoch%20%5B176%2C936%5D(https%3A%2F%2Fbeaconcha.in%2Fepoch%2F176936)%20to%20the%20first%20slot%20in%20epoch%20%5B176%2C937%5D(https%3A%2F%2Fbeaconcha.in%2Fepoch%2F176937)).%20**Executed%20every%206%20minutes%20when%20the%20first%20slot%20of%20a%20new%20epoch%20is%20found.**%0A%20%20%20%20%20%202.%20%5BCreate%20Light%20Client%20update%20proposal(add_proposal)%5D(https%3A%2F%2Fnearblocks.io%2Ftxns%2FJ1tQ465Dxt4UhWy9Msn2pZCbdkWatSepqsx9sDZaX35z%23)%3A%20calls%20%5Bbridge-validator.sputnik-dao.near%5D(https%3A%2F%2Fnearblocks.io%2Faddress%2Fbridge-validator.sputnik-dao.near)%20to%20add%20proposal%2017410%20for%20%5Bslot%205%2C661%2C984%5D(https%3A%2F%2Fbeaconcha.in%2Fslot%2F5661984)%20in%20epoch%20%5B176%2C937%5D(https%3A%2F%2Fbeaconcha.in%2Fepoch%2F176937).%0A%20%20%202.%20%5BApprove%20Proposal%20(act_proposal)%5D(https%3A%2F%2Fnearblocks.io%2Ftxns%2FD5uP4BbRSUX4ZGijRfWGkR5KbFb2Kb9q1gSsFVQbYSLt)%3A%20sends%20a%20VoteApprove%20action%20for%20proposal%2017410%20from%20a%20%5Bbridge%20validator%5D(https%3A%2F%2Fnearblocks.io%2Faddress%2Fbridge-validator1.near)%20to%20the%20%5BValidator%20DAO%20Contract%5D(https%3A%2F%2Fnearblocks.io%2Faddress%2Fbridge-validator.sputnik-dao.near).%0A%20%20%20%20%20%201.%20act_proposal%20in%20contract%20%5Bbridge-validator.sputnik-dao.near%5D(https%3A%2F%2Fnearblocks.io%2Faddress%2Fbridge-validator.sputnik-dao.near)%0A%20%20%20%20%20%202.%20submit_beacon_chain_light_client_update%20in%20%5Bclient-eth2.bridge.near%5D(https%3A%2F%2Fnearblocks.io%2Faddress%2Fclient-eth2.bridge.near)%0A%20%20%20%20%20%203.%20on_proposal_callback%20in%20contract%20%5Bbridge-validator.sputnik-dao.near%5D(https%3A%2F%2Fnearblocks.io%2Faddress%2Fbridge-validator.sputnik-dao.near)%0A2.%20Funds%20Transfer%20Transaction%20Flow%0A%20%20%201.%20%5BLock%20Funds%20On%20Ethereum%5D(https%3A%2F%2Fetherscan.io%2Ftx%2F0xa685c59a24cc2056e10e660ce8a8bff7bbc335433698e138c77aaadf20ecb614)%3A%20Locking%2010%2C000%20USDT%20to%20send%20to%20user%20on%20NEAR.%0A%20%20%202.%20%5BDeposit%20Funds%20on%20Target%20Chain%20Bridge%20Contract%20(deposit)%5D(https%3A%2F%2Fnearblocks.io%2Ftxns%2FvniyRR67ndrtvpoQ9c5ACoT4e9c283VSQsrZcN6GGto%23execution)%0A%20%20%20%20%20%201.%20deposit%20in%20contract%20factory.bridge.near%0A%20%20%20%20%20%202.%20verify_log_entry%20in%20contract%20prover.bridge.near%0A%20%20%20%20%20%203.%20block_hash_safe%20in%20contract%20client-eth2.bridge.near%0A%20%20%20%20%20%204.%20finish_deposit%20in%20contract%20factory.bridge.near%20%3A%20mint%20of%2010%2C000%20USDT.%0A%0A**TODO**%0A%0A-%20Find%20and%20review%20the%20source%20code%20for%20the%20%5Bvalidator%20light%20client%20approval%20update%5D(https%3A%2F%2Fnearblocks.io%2Ftxns%2FHnzBR7x5Sxnmcm4MfRt1ghhMjJNspDaygUUKeM9T27Li%23execution).%20_Note%3A%20the%20eth2_client%20has%20a%20%5Bvalidate_light_client_update%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Fblob%2Fmaster%2Fcontracts%2Fnear%2Feth2-client%2Fsrc%2Flib.rs%23L311)%20which%20is%20%5Bconfigurable%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Fblob%2Fmaster%2Fcontracts%2Fnear%2Feth2-client%2Fsrc%2Flib.rs%23L42)%20and%20is%20used%20for%20debugging%20purposes._%0A%0A%23%23%20Bridging%20Resources%20Required%0A%0AHere%20is%20the%20storage%20and%20compuational%20costs%20per%20component.%0A%0A%7C%20Component%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7C%20Data%20%20%20%20%20%20%20%20%20%20%20%7C%20Storage%20%7C%20Notes%20%7C%0A%7C%20---------------------------------------------------------------------------------------------------------------------------%20%7C%20--------------%20%7C%20-------%20%7C%20-----%20%7C%0A%7C%20%5BEthereum%202%20Client%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Fblob%2Fmaster%2Fcontracts%2Fnear%2Feth2-client%2Fsrc%2Flib.rs%23L35)%20%7C%20---%20%20%20%20%20%20%20%20%20%20%20%20%7C%20---%20%20%20%20%20%7C%20---%20%20%20%7C%0A%7C%20%5BProver%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Fblob%2Fmaster%2Fcontracts%2Fnear%2Feth-prover%2Fsrc%2Flib.rs)%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7C%20not%20applicable%20%7C%200%20bytes%20%7C%20%20%20%20%20%20%20%7C%0A%7C%20%5BDAO%20Contract%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Fblob%2Fmaster%2Feth2near%2Fcontract_wrapper%2Fsrc%2Fdao_contract.rs)%20%20%7C%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7C%20%20%20%20%20%20%20%20%20%7C%20%20%20%20%20%20%20%7C%0A%0A**TODO**%0AReview%20the%20following%20data%20structure%20and%20elements%20and%20move%20into%20the%20table%20above%20commenting%20on%20any%20mandatory%20requirements%20and%20structures%20that%20can%20be%20improved.%0A%0A%60%60%60go%0Apub%20struct%20Eth2Client%20%7B%0A%20%20%20%20%2F%2F%2F%20If%20set%2C%20only%20light%20client%20updates%20by%20the%20trusted%20signer%20will%20be%20accepted%0A%20%20%20%20trusted_signer%3A%20Option%3CAccountId%3E%2C%0A%20%20%20%20%2F%2F%2F%20Mask%20determining%20all%20paused%20functions%0A%20%20%20%20paused%3A%20Mask%2C%0A%20%20%20%20%2F%2F%2F%20Whether%20the%20client%20validates%20the%20updates.%0A%20%20%20%20%2F%2F%2F%20Should%20only%20be%20set%20to%20%60false%60%20for%20debugging%2C%20testing%2C%20and%20diagnostic%20purposes%0A%20%20%20%20validate_updates%3A%20bool%2C%0A%20%20%20%20%2F%2F%2F%20Whether%20the%20client%20verifies%20BLS%20signatures.%0A%20%20%20%20verify_bls_signatures%3A%20bool%2C%0A%20%20%20%20%2F%2F%2F%20We%20store%20the%20hashes%20of%20the%20blocks%20for%20the%20past%20%60hashes_gc_threshold%60%20headers.%0A%20%20%20%20%2F%2F%2F%20Events%20that%20happen%20past%20this%20threshold%20cannot%20be%20verified%20by%20the%20client.%0A%20%20%20%20%2F%2F%2F%20It%20is%20desirable%20that%20this%20number%20is%20larger%20than%207%20days'%20worth%20of%20headers%2C%20which%20is%20roughly%0A%20%20%20%20%2F%2F%2F%2051k%20Ethereum%20blocks.%20So%20this%20number%20should%20be%2051k%20in%20production.%0A%20%20%20%20hashes_gc_threshold%3A%20u64%2C%0A%20%20%20%20%2F%2F%2F%20Network.%20e.g.%20mainnet%2C%20kiln%0A%20%20%20%20network%3A%20Network%2C%0A%20%20%20%20%2F%2F%2F%20Hashes%20of%20the%20finalized%20execution%20blocks%20mapped%20to%20their%20numbers.%20Stores%20up%20to%20%60hashes_gc_threshold%60%20entries.%0A%20%20%20%20%2F%2F%2F%20Execution%20block%20number%20-%3E%20execution%20block%20hash%0A%20%20%20%20finalized_execution_blocks%3A%20LookupMap%3Cu64%2C%20H256%3E%2C%0A%20%20%20%20%2F%2F%2F%20All%20unfinalized%20execution%20blocks'%20headers%20hashes%20mapped%20to%20their%20%60HeaderInfo%60.%0A%20%20%20%20%2F%2F%2F%20Execution%20block%20hash%20-%3E%20ExecutionHeaderInfo%20object%0A%20%20%20%20unfinalized_headers%3A%20UnorderedMap%3CH256%2C%20ExecutionHeaderInfo%3E%2C%0A%20%20%20%20%2F%2F%2F%20%60AccountId%60s%20mapped%20to%20their%20number%20of%20submitted%20headers.%0A%20%20%20%20%2F%2F%2F%20Submitter%20account%20-%3E%20Num%20of%20submitted%20headers%0A%20%20%20%20submitters%3A%20LookupMap%3CAccountId%2C%20u32%3E%2C%0A%20%20%20%20%2F%2F%2F%20Max%20number%20of%20unfinalized%20blocks%20allowed%20to%20be%20stored%20by%20one%20submitter%20account%0A%20%20%20%20%2F%2F%2F%20This%20value%20should%20be%20at%20least%2032%20blocks%20(1%20epoch)%2C%20but%20the%20recommended%20value%20is%201024%20(32%20epochs)%0A%20%20%20%20max_submitted_blocks_by_account%3A%20u32%2C%0A%20%20%20%20%2F%2F%20The%20minimum%20balance%20that%20should%20be%20attached%20to%20register%20a%20new%20submitter%20account%0A%20%20%20%20min_storage_balance_for_submitter%3A%20Balance%2C%0A%20%20%20%20%2F%2F%2F%20Light%20client%20state%0A%20%20%20%20finalized_beacon_header%3A%20ExtendedBeaconBlockHeader%2C%0A%20%20%20%20finalized_execution_header%3A%20LazyOption%3CExecutionHeaderInfo%3E%2C%0A%20%20%20%20current_sync_committee%3A%20LazyOption%3CSyncCommittee%3E%2C%0A%20%20%20%20next_sync_committee%3A%20LazyOption%3CSyncCommittee%3E%2C%0A%7D%0A%60%60%60%0A%0A%23%23%23%20References%0A%0A**Explorer%20and%20Interactive%20Links**%0A%0A-%20Near%0A%0A%20%20-%20eth-prover%0A%20%20%20%20-%20%5Bhttps%3A%2F%2Fnearblocks.io%2Faddress%2Frelayer.bridge.near%5D(https%3A%2F%2Fnearblocks.io%2Faddress%2Frelayer.bridge.near)%0A%20%20%20%20-%20%5Bhttps%3A%2F%2Fnearblocks.io%2Faddress%2Fclient-eth2.bridge.near%5D(https%3A%2F%2Fnearblocks.io%2Faddress%2Fclient-eth2.bridge.near)%0A%20%20%20%20-%20%5Bhttps%3A%2F%2Fnearblocks.io%2Faddress%2Fclient.bridge.near%5D(https%3A%2F%2Fnearblocks.io%2Faddress%2Fclient.bridge.near)%0A%20%20-%20eth-client%0A%20%20%20%20-%20%5Bhttps%3A%2F%2Fnearblocks.io%2Faddress%2Fprover.bridge.near%5D(https%3A%2F%2Fnearblocks.io%2Faddress%2Fprover.bridge.near)%0A%20%20%20%20-%20%5Bhttps%3A%2F%2Fnearblocks.io%2Faddress%2Fclient.bridge.near%5D(https%3A%2F%2Fnearblocks.io%2Faddress%2Fclient.bridge.near)%0A%20%20-%20factory%20(manages%20tokens)%0A%20%20%20%20-%20%5Bhttps%3A%2F%2Fnearblocks.io%2Faddress%2Ffactory.bridge.near%5D(https%3A%2F%2Fnearblocks.io%2Faddress%2Ffactory.bridge.near)%0A%20%20-%20dao%0A%20%20%20%20-%20%5Bhttps%3A%2F%2Fnearblocks.io%2Faddress%2Fbridge-validator.sputnik-dao.near%5D(https%3A%2F%2Fnearblocks.io%2Faddress%2Fbridge-validator.sputnik-dao.near)%0A%20%20-%20aurora%0A%20%20%20%20-%20%5Bhttps%3A%2F%2Fnearblocks.io%2Faddress%2Faurora%5D(https%3A%2F%2Fnearblocks.io%2Faddress%2Faurora)%0A%20%20%20%20-%20%5Bhttps%3A%2F%2Fnearblocks.io%2Faddress%2Frelay.aurora%5D(https%3A%2F%2Fnearblocks.io%2Faddress%2Frelay.aurora)%0A%0A-%20Ethereum%0A%20%20-%20%5Bbeaconcha.in%5D(https%3A%2F%2Fbeaconcha.in%2F)%0A%20%20%20%20-%20%5Bvalidators%5D(https%3A%2F%2Fbeaconcha.in%2Fvalidators)%0A%20%20%20%20-%20%5Bepochs%5D(https%3A%2F%2Fbeaconcha.in%2Fepochs)%0A%20%20%20%20-%20%5Bslots%5D(https%3A%2F%2Fbeaconcha.in%2Fslots)%0A%20%20%20%20-%20%5Bblocks%5D(https%3A%2F%2Fbeaconcha.in%2Fblocks)%0A%20%20%20%20-%20%5Btransactions%5D(https%3A%2F%2Fbeaconcha.in%2Ftransactions)%0A%20%20-%20Near%20Bridge%0A%20%20%20%20-%20%5BNearBridge%5D(https%3A%2F%2Fetherscan.io%2Faddress%2F0x3fefc5a4b1c02f21cbc8d3613643ba0635b9a873)%0A%20%20%20%20-%20%5BERC20Locker%5D(https%3A%2F%2Fetherscan.io%2Ftx%2F0xa685c59a24cc2056e10e660ce8a8bff7bbc335433698e138c77aaadf20ecb614)%0A",lastUpdatedAt:1753110537e3},{lazy:()=>o2(()=>import("./intro-Bqx9jGSi.js"),[]),path:"/writing/intro",type:"mdx",filePath:"writing/intro.mdx",content:"%3Cdiv%20align%3D%22center%22%3E%0A%20%20%3Ch1%20align%3D%22center%22%3EJohn%20Whitton%20Writing%3C%2Fh1%3E%0A%20%20%3Cp%20align%3D%22center%22%3E%0A%20%20%20%20Papers%20and%20articles%20on%20Layer%201%20Protocols%2C%20Bridging%2C%20Decentralized%20Finance%2C%0A%20%20%20%20Ecosystem%20Growth%0A%20%20%3C%2Fp%3E%0A%3C%2Fdiv%3E%0A%0AThe%20articles%20on%20this%20site%2C%20relates%20to%20the%20research%20I%20have%20done%20previously%20in%20designing%20Layer%201%20platforms%20and%20Defi%20Protocols.%20For%20recent%20research%20on%20bridging%2C%20zero%20knowledge%20and%20chain%20consensus%20and%20signing%20see%20%5Bresearch%5D(%2Fresearch%2Fintro.mdx).%0A",lastUpdatedAt:1753125084e3},{lazy:()=>o2(()=>import("./intro-Bqx9jGSi.js"),[]),path:"/writing/intro.html",type:"mdx",filePath:"writing/intro.mdx",content:"%3Cdiv%20align%3D%22center%22%3E%0A%20%20%3Ch1%20align%3D%22center%22%3EJohn%20Whitton%20Writing%3C%2Fh1%3E%0A%20%20%3Cp%20align%3D%22center%22%3E%0A%20%20%20%20Papers%20and%20articles%20on%20Layer%201%20Protocols%2C%20Bridging%2C%20Decentralized%20Finance%2C%0A%20%20%20%20Ecosystem%20Growth%0A%20%20%3C%2Fp%3E%0A%3C%2Fdiv%3E%0A%0AThe%20articles%20on%20this%20site%2C%20relates%20to%20the%20research%20I%20have%20done%20previously%20in%20designing%20Layer%201%20platforms%20and%20Defi%20Protocols.%20For%20recent%20research%20on%20bridging%2C%20zero%20knowledge%20and%20chain%20consensus%20and%20signing%20see%20%5Bresearch%5D(%2Fresearch%2Fintro.mdx).%0A",lastUpdatedAt:1753125084e3},{lazy:()=>o2(()=>import("./cosmos-ibc-saKp64TK.js"),[]),path:"/research/bridge/cosmos-ibc",type:"mdx",filePath:"research/bridge/cosmos-ibc.mdx",content:"%23%20Cosmos%20IBC%0A%0A-%20date%3A%202023-02-24%0A-%20last%20updated%3A%202023-04-04%0A%0A%23%23%20Overview%0A%0ACosmos%20is%20a%20network%20of%20the%20many%20blockchains%20built%20on%20IBC%20protocol.%20The%20IBC%20protocol%20is%20a%20universal%20interoperability%20protocol%20that%20allows%20two%20different%20blockchains%20to%20communicate%20with%20one%20another.%20IBC%20guarantees%20reliable%2C%20ordered%2C%20and%20authenticated%20communication.%20See%20%5BCosmos%20Network%20Whitepaper%5D(https%3A%2F%2Fv1.cosmos.network%2Fresources%2Fwhitepaper)%0A%0ABlockchains%20based%20on%20IBC%20protocol%20may%20use%20validity%20based%20proofs%20for%20interchain%20communication.%20See%20%5BIBC%20Protocol%20ELI5%3A%20What%20is%20IBC%3F%5D(https%3A%2F%2Fmedium.com%2Fthe-interchain-foundation%2Feli5-what-is-ibc-def44d7b5b4c)%0A%0A%23%23%23%20Protocol%0A%0A-%20%5BDesign%5D(https%3A%2F%2Fgithub.com%2Fcosmos%2Fibc)%3A%20the%20primary%20repository%20for%20development%20and%20documentation%0A-%20%5BDocs%5D(https%3A%2F%2Ftutorials.cosmos.network%2Facademy%2F3-ibc%2F)%3A%20a%20quick%20introduction.%20See%20also%20%5Bibc-go%20documentation%5D(https%3A%2F%2Fibc.cosmos.network%2F)%0A-%20%5BImplementation%5D(https%3A%2F%2Fgithub.com%2Fcosmos%2Fibc-go)%3A%20Implementation%20in%20Golang%2C%20built%20as%20a%20Cosmos%20SDK%20module.%0A-%20%5BRoadmap%5D(https%3A%2F%2Fibc.cosmos.network%2Fmain%2Froadmap%2Froadmap.html)%0A%0A%23%23%23%20Bridging%0A%0A-%20%5BRelayer%5D(https%3A%2F%2Fgithub.com%2Fcosmos%2Frelayer)%3A%20%22...blockchains%20do%20not%20directly%20pass%20messages%20to%20each%20other%20over%20the%20network.%20This%20is%20where%20relayer%20comes%20in.%20A%20relayer%20process%20monitors%20for%20updates%20on%20opens%20paths%20between%20sets%20of%20IBC%20enabled%20chains...%22%0A-%20%5BLight%20Clients%5D(https%3A%2F%2Fibc.cosmos.network%2Fmain%2Fibc%2Flight-clients%2Foverview.html)%3A%20%22...Light%20clients%20operate%20under%20a%20strict%20set%20of%20rules%20which%20provide%20security%20guarantees%20for%20state%20updates%20and%20facilitate%20the%20ability%20to%20verify%20the%20state%20of%20a%20remote%20blockchain%20using%20merkle%20proofs%22%0A%0A%23%23%23%20Utilities%0A%0A-%20%5BExplorer%5D(https%3A%2F%2Fhub.mintscan.io%2Fchains%2Fibc-network)%3A%20Monitoring%20interchain%20activities%20and%20messaging%20in%203D%0A-%20%5BKeplr%5D(https%3A%2F%2Fwww.keplr.app%2F)%3A%20Wallet%20designed%20to%20work%20across%20blockchains%20on%20IBC%20(see%20%5BGetting%20Started%20with%20Cosmos%20IBC%20Transfers%5D(https%3A%2F%2Fcatdotfish.medium.com%2Fgetting-started-with-ibc-transfers-276e9ce91e17))%0A%0A(to%20be%20continued)%0A%0A%5C*%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%20Content%20below%20requires%20significant%20revision%20%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%0A%0A%23%23%20Code%20Review%0A%0AFollowing%20is%20a%20review%20of%20%5Bibc-go%5D(https%3A%2F%2Fgithub.com%2Fcosmos%2Fibc-go)%0A%0A%23%23%23%20Signing%20Mechanisms%20from%20%5Bcosmos-sdk%5D(https%3A%2F%2Fgithub.com%2Fcosmos%2Fcosmos-sdk)%0A%0A-%20%5Bbcrypt%5D(https%3A%2F%2Fwww.usenix.org%2Flegacy%2Fevent%2Fusenix99%2Fprovos%2Fprovos.pdf)%0A%20%20-%20%5Bcosmos-sdk%20bcrypt%5D(https%3A%2F%2Fgithub.com%2Fcosmos%2Fcosmos-sdk%2Ftree%2Fmain%2Fcrypto%2Fkeys%2Fbcrypt)%0A-%20%5Bed25519%5D(https%3A%2F%2Fed25519.cr.yp.to%2Fed25519-20110926.pdf)%0A%20%20-%20%5Bcosmos-sdk%20ed25519%5D(https%3A%2F%2Fgithub.com%2Fcosmos%2Fcosmos-sdk%2Ftree%2Fmain%2Fcrypto%2Fkeys%2Fed25519)%0A-%20%5Becdsa%5D(https%3A%2F%2Fen.wikipedia.org%2Fwiki%2FElliptic_Curve_Digital_Signature_Algorithm)%0A%20%20-%20%5Bcosmos-sdk%20ecdsa%5D(https%3A%2F%2Fgithub.com%2Fcosmos%2Fcosmos-sdk%2Ftree%2Fmain%2Fcrypto%2Fkeys%2Finternal%2Fecdsa)%0A-%20%5Bsecp256k1%5D(https%3A%2F%2Fwww.secg.org%2Fsec2-v2.pdf)%0A%20%20-%20%5Bcosmos-sdk%20secp256k1%5D(https%3A%2F%2Fgithub.com%2Fcosmos%2Fcosmos-sdk%2Ftree%2Fmain%2Fcrypto%2Fkeys%2Fsecp256k1)%0A%20%20-%20%5Bsecp256r1%5D(https%3A%2F%2Fwww.secg.org%2Fsec2-v2.pdf)%0A%20%20%20%20-%20%5Bcosmos-sdk%20secp256r1%5D(https%3A%2F%2Fgithub.com%2Fcosmos%2Fcosmos-sdk%2Ftree%2Fmain%2Fcrypto%2Fkeys%2Fsecp256r1)%0A%0A-%20%5Bmerkle.go%5D(https%3A%2F%2Fgithub.com%2Fcosmos%2Fibc-go%2Fblob%2Fmain%2Fmodules%2Fcore%2F23-commitment%2Ftypes%2Fmerkle.go)%0A%0A%23%23%23%20Proving%20Mechanisms%0A%0A%23%23%23%20Relayer%20Mechanisms%0A%0A-%20%5Be2e%20relayer.go%5D(https%3A%2F%2Fgithub.com%2Fcosmos%2Fibc-go%2Fblob%2Fmain%2Fe2e%2Frelayer%2Frelayer.go)%20uses%20%5Bstrangelove-ventures%20interchaintest%20relayer%5D(https%3A%2F%2Fgithub.com%2Fstrangelove-ventures%2Finterchaintest%2Ftree%2Fmain%2Frelayer)%0A%20%20-%20%5Bcosmos-relayer.go%5D(https%3A%2F%2Fgithub.com%2Fstrangelove-ventures%2Finterchaintest%2Fblob%2Fmain%2Frelayer%2Frly%2Fcosmos_relayer.go)%0A%0A%23%23%23%20Light%20Client%20Functionality%0A%0A-%20%5Blight-clients%5D(https%3A%2F%2Fgithub.com%2Fcosmos%2Fibc-go%2Ftree%2Fmain%2Fmodules%2Flight-clients)%0A%0A%23%23%23%20Token%20Lockers%0A%0A%23%23%20References%0A%0A%23%23%20Appendices%0A",lastUpdatedAt:1753129136e3},{lazy:()=>o2(()=>import("./cosmos-ibc-saKp64TK.js"),[]),path:"/research/bridge/cosmos-ibc.html",type:"mdx",filePath:"research/bridge/cosmos-ibc.mdx",content:"%23%20Cosmos%20IBC%0A%0A-%20date%3A%202023-02-24%0A-%20last%20updated%3A%202023-04-04%0A%0A%23%23%20Overview%0A%0ACosmos%20is%20a%20network%20of%20the%20many%20blockchains%20built%20on%20IBC%20protocol.%20The%20IBC%20protocol%20is%20a%20universal%20interoperability%20protocol%20that%20allows%20two%20different%20blockchains%20to%20communicate%20with%20one%20another.%20IBC%20guarantees%20reliable%2C%20ordered%2C%20and%20authenticated%20communication.%20See%20%5BCosmos%20Network%20Whitepaper%5D(https%3A%2F%2Fv1.cosmos.network%2Fresources%2Fwhitepaper)%0A%0ABlockchains%20based%20on%20IBC%20protocol%20may%20use%20validity%20based%20proofs%20for%20interchain%20communication.%20See%20%5BIBC%20Protocol%20ELI5%3A%20What%20is%20IBC%3F%5D(https%3A%2F%2Fmedium.com%2Fthe-interchain-foundation%2Feli5-what-is-ibc-def44d7b5b4c)%0A%0A%23%23%23%20Protocol%0A%0A-%20%5BDesign%5D(https%3A%2F%2Fgithub.com%2Fcosmos%2Fibc)%3A%20the%20primary%20repository%20for%20development%20and%20documentation%0A-%20%5BDocs%5D(https%3A%2F%2Ftutorials.cosmos.network%2Facademy%2F3-ibc%2F)%3A%20a%20quick%20introduction.%20See%20also%20%5Bibc-go%20documentation%5D(https%3A%2F%2Fibc.cosmos.network%2F)%0A-%20%5BImplementation%5D(https%3A%2F%2Fgithub.com%2Fcosmos%2Fibc-go)%3A%20Implementation%20in%20Golang%2C%20built%20as%20a%20Cosmos%20SDK%20module.%0A-%20%5BRoadmap%5D(https%3A%2F%2Fibc.cosmos.network%2Fmain%2Froadmap%2Froadmap.html)%0A%0A%23%23%23%20Bridging%0A%0A-%20%5BRelayer%5D(https%3A%2F%2Fgithub.com%2Fcosmos%2Frelayer)%3A%20%22...blockchains%20do%20not%20directly%20pass%20messages%20to%20each%20other%20over%20the%20network.%20This%20is%20where%20relayer%20comes%20in.%20A%20relayer%20process%20monitors%20for%20updates%20on%20opens%20paths%20between%20sets%20of%20IBC%20enabled%20chains...%22%0A-%20%5BLight%20Clients%5D(https%3A%2F%2Fibc.cosmos.network%2Fmain%2Fibc%2Flight-clients%2Foverview.html)%3A%20%22...Light%20clients%20operate%20under%20a%20strict%20set%20of%20rules%20which%20provide%20security%20guarantees%20for%20state%20updates%20and%20facilitate%20the%20ability%20to%20verify%20the%20state%20of%20a%20remote%20blockchain%20using%20merkle%20proofs%22%0A%0A%23%23%23%20Utilities%0A%0A-%20%5BExplorer%5D(https%3A%2F%2Fhub.mintscan.io%2Fchains%2Fibc-network)%3A%20Monitoring%20interchain%20activities%20and%20messaging%20in%203D%0A-%20%5BKeplr%5D(https%3A%2F%2Fwww.keplr.app%2F)%3A%20Wallet%20designed%20to%20work%20across%20blockchains%20on%20IBC%20(see%20%5BGetting%20Started%20with%20Cosmos%20IBC%20Transfers%5D(https%3A%2F%2Fcatdotfish.medium.com%2Fgetting-started-with-ibc-transfers-276e9ce91e17))%0A%0A(to%20be%20continued)%0A%0A%5C*%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%20Content%20below%20requires%20significant%20revision%20%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%0A%0A%23%23%20Code%20Review%0A%0AFollowing%20is%20a%20review%20of%20%5Bibc-go%5D(https%3A%2F%2Fgithub.com%2Fcosmos%2Fibc-go)%0A%0A%23%23%23%20Signing%20Mechanisms%20from%20%5Bcosmos-sdk%5D(https%3A%2F%2Fgithub.com%2Fcosmos%2Fcosmos-sdk)%0A%0A-%20%5Bbcrypt%5D(https%3A%2F%2Fwww.usenix.org%2Flegacy%2Fevent%2Fusenix99%2Fprovos%2Fprovos.pdf)%0A%20%20-%20%5Bcosmos-sdk%20bcrypt%5D(https%3A%2F%2Fgithub.com%2Fcosmos%2Fcosmos-sdk%2Ftree%2Fmain%2Fcrypto%2Fkeys%2Fbcrypt)%0A-%20%5Bed25519%5D(https%3A%2F%2Fed25519.cr.yp.to%2Fed25519-20110926.pdf)%0A%20%20-%20%5Bcosmos-sdk%20ed25519%5D(https%3A%2F%2Fgithub.com%2Fcosmos%2Fcosmos-sdk%2Ftree%2Fmain%2Fcrypto%2Fkeys%2Fed25519)%0A-%20%5Becdsa%5D(https%3A%2F%2Fen.wikipedia.org%2Fwiki%2FElliptic_Curve_Digital_Signature_Algorithm)%0A%20%20-%20%5Bcosmos-sdk%20ecdsa%5D(https%3A%2F%2Fgithub.com%2Fcosmos%2Fcosmos-sdk%2Ftree%2Fmain%2Fcrypto%2Fkeys%2Finternal%2Fecdsa)%0A-%20%5Bsecp256k1%5D(https%3A%2F%2Fwww.secg.org%2Fsec2-v2.pdf)%0A%20%20-%20%5Bcosmos-sdk%20secp256k1%5D(https%3A%2F%2Fgithub.com%2Fcosmos%2Fcosmos-sdk%2Ftree%2Fmain%2Fcrypto%2Fkeys%2Fsecp256k1)%0A%20%20-%20%5Bsecp256r1%5D(https%3A%2F%2Fwww.secg.org%2Fsec2-v2.pdf)%0A%20%20%20%20-%20%5Bcosmos-sdk%20secp256r1%5D(https%3A%2F%2Fgithub.com%2Fcosmos%2Fcosmos-sdk%2Ftree%2Fmain%2Fcrypto%2Fkeys%2Fsecp256r1)%0A%0A-%20%5Bmerkle.go%5D(https%3A%2F%2Fgithub.com%2Fcosmos%2Fibc-go%2Fblob%2Fmain%2Fmodules%2Fcore%2F23-commitment%2Ftypes%2Fmerkle.go)%0A%0A%23%23%23%20Proving%20Mechanisms%0A%0A%23%23%23%20Relayer%20Mechanisms%0A%0A-%20%5Be2e%20relayer.go%5D(https%3A%2F%2Fgithub.com%2Fcosmos%2Fibc-go%2Fblob%2Fmain%2Fe2e%2Frelayer%2Frelayer.go)%20uses%20%5Bstrangelove-ventures%20interchaintest%20relayer%5D(https%3A%2F%2Fgithub.com%2Fstrangelove-ventures%2Finterchaintest%2Ftree%2Fmain%2Frelayer)%0A%20%20-%20%5Bcosmos-relayer.go%5D(https%3A%2F%2Fgithub.com%2Fstrangelove-ventures%2Finterchaintest%2Fblob%2Fmain%2Frelayer%2Frly%2Fcosmos_relayer.go)%0A%0A%23%23%23%20Light%20Client%20Functionality%0A%0A-%20%5Blight-clients%5D(https%3A%2F%2Fgithub.com%2Fcosmos%2Fibc-go%2Ftree%2Fmain%2Fmodules%2Flight-clients)%0A%0A%23%23%23%20Token%20Lockers%0A%0A%23%23%20References%0A%0A%23%23%20Appendices%0A",lastUpdatedAt:1753129136e3},{lazy:()=>o2(()=>import("./harmony-horizon-Ctnlrcxy.js"),[]),path:"/research/bridge/harmony-horizon",type:"mdx",filePath:"research/bridge/harmony-horizon.mdx",content:"%23%20Harmony%20Horizon%0A%0A-%20date%3A%202023-02-24%0A-%20last%20updated%3A%202023-02-24%0A%0A%23%23%20Overview%0A%0AThis%20document%20reviews%20the%20%5Bhorizon%5D(https%3A%2F%2Fgithub.com%2Fjohnwhitton%2Fhorizon%2Ftree%2FrefactorV2)%20current%20implementation%2C%20development%20tasks%20that%20need%20to%20be%20done%20to%20support%20POW%20and%20offers%20some%20thoughts%20on%20next%20steps%20to%20support%20Ethereum%202.0%20and%20other%20chains.%0A%0AFurther%20thoughs%20on%20ETH%202.0%20support%2C%20removing%20the%20ETHHASH%20logic%20and%20SPV%20client%20and%20potentially%20replacing%20with%20MMR%20trees%20per%20epoch%20and%20checkpoints%20similar%20to%20Harmony%20Light%20Client%20on%20Ethereum%2C%20can%20find%20inspiration%20in%20%5Bnear-rainbow%5D(.%2Fnear-rainbow.mdx).%0A%0A%23%23%20Approach%0A%0AHorizon%202.0%20approach%20is%20to%20use%20validity%20proofs%20implemented%20by%20on-chain%20smart%20contracts.%0A%0A%23%23%20Proving%20Mechanisms%0A%0A%23%23%23%20Ethereum%20Light%20Client%0A%0A1.%20ETH%202.0%20support%20see%20%5Bhere%5D(%2Fresearch%2Fchains%2Fethereum.mdx)%0A2.%20Queuing%20mechanism%20should%20be%20implemented%20to%20queue%20bridge%20transactions.%20The%20queue%20can%20be%20polled%20as%20part%20of%20the%20block%20relay%20functionality%20to%20process%20bridge%20transactions%20once%20the%20blocks%20have%20been%20relayed.%0A3.%20Consider%20whether%20we%20can%20use%20p2p%20messaging%20to%20receive%20published%20blocks%20rather%20than%20looping%20and%20polling%20via%20an%20RPC.%0A%0A%23%23%23%20Harmony%20Light%20Client%0A%0A1.%20Needs%20to%20implement%20a%20process%20to%20%60submitCheckpoint%60.%0A2.%20%60eprove%60%20logic%20needs%20to%20be%20reviewed%0A3.%20Queuing%20mechanism%20should%20be%20implemented%20to%20queue%20bridge%20transactions.%20The%20queue%20can%20be%20polled%20as%20part%20of%20the%20%60submitCheckpoint%60%20functionality%20to%20process%20bridge%20transactions%20once%20the%20blocks%20have%20been%20relayed.%0A4.%20Need%20to%20facilitate%20the%20core%20protocol%20%5BMMR%20enhancements%20PR%5D(https%3A%2F%2Fgithub.com%2Fharmony-one%2Fharmony%2Fpull%2F4198%2Ffiles)%0A%0A%23%23%20Relayer%20Mechanisms%0A%0ASequencing%20of%20Transactions%3A%20Needs%20to%20be%20implemented%20and%20%60TokenMap%60%20in%20%60bridge.js%60%20needs%20to%20be%20refactored.%20Below%20is%20the%20current%20sequence%20flow%20and%20areas%20for%20improvements.%0A%0A1.%20Ethereum%20Mapping%20Request%0A2.%20Relay%20of%20Block%20to%20EthereumLightClient.sol%20on%20Harmony%0A%20%20%20-%20The%20block%20has%20to%20be%20relayed%20before%20we%20can%20process%20the%20Harmony%20Mapping%20request%2C%20as%20we%20have%20just%20executed%20the%20transaction%20the%20relayer%20usually%20has%20not%20relayed%20the%20block%20so%20this%20will%20fail.%0A%20%20%20-%20There%20must%20be%20an%20additional%2025%20blocks%20on%20Ethereum%20before%20this%20block%20can%20be%20considered%20part%20of%20the%20canonical%20chain.%0A%20%20%20-%20This%20logic%20needs%20to%20be%20rewritten%20to%20break%20down%20execution%20for%201.%20the%20ethereum%20mapping%20request%202.%20After%20a%2025%20block%20delay%20the%20Harmony%20Proof%20validation%20and%20executing%20the%20Harmony%20Mapping%20Request%5C*%5C*%0A3.%20Harmony%20Mapping%20Request%0A4.%20Relay%20of%20Checkpoint%20to%20HarmonyLightClient.sol%20on%20Ethereum%0A%20%20%20-%20A%20%60submitCheckpoint%60%20in%20%60HarmonyLightClient.sol%60%20needs%20to%20have%20called%20either%20for%20the%20next%20epoch%20or%20for%20a%20checkpoint%2C%20after%20the%20block%20the%20harmony%20mapping%20transaction%20was%20in.%5C*%5C*%0A%20%20%20-%20Automatic%20submission%20of%20checkpoints%20to%20the%20Harmony%20Light%20Client%20has%20not%20been%20developed%20as%20yet.%20(It%20is%20not%20part%20of%20the%20%60ethRelay.js%60).%20And%20so%20the%20checkpoint%20would%20need%20to%20be%20manually%20submitted%20before%20the%20Ethereum%20Mapping%20could%20take%20place.%0A5.%20Etherem%20Process%20Harmony%20Mapping%20Acknowledgement%0A%0A%23%23%20Light%20Client%20Functionality%0A%0A%23%23%23%20Ethereum%20Light%20Client%0A%0A1.%20ETH%202.0%20support%20see%20%5Bhere%5D(%2Fresearch%2Fchains%2Fethereum.mdx)%0A2.%20Queuing%20mechanism%20should%20be%20implemented%20to%20queue%20bridge%20transactions.%20The%20queue%20can%20be%20polled%20as%20part%20of%20the%20block%20relay%20functionality%20to%20process%20bridge%20transactions%20once%20the%20blocks%20have%20been%20relayed.%0A3.%20Consider%20whether%20we%20can%20use%20p2p%20messaging%20to%20receive%20published%20blocks%20rather%20than%20looping%20and%20polling%20via%20an%20RPC.%0A%0A%23%23%23%20Harmony%20Light%20Client%0A%0A1.%20Needs%20to%20implement%20a%20process%20to%20%60submitCheckpoint%60.%0A2.%20%60eprove%60%20logic%20needs%20to%20be%20reviewed%0A3.%20Queuing%20mechanism%20should%20be%20implemented%20to%20queue%20bridge%20transactions.%20The%20queue%20can%20be%20polled%20as%20part%20of%20the%20%60submitCheckpoint%60%20functionality%20to%20process%20bridge%20transactions%20once%20the%20blocks%20have%20been%20relayed.%0A4.%20Need%20to%20facilitate%20the%20core%20protocol%20%5BMMR%20enhancements%20PR%5D(https%3A%2F%2Fgithub.com%2Fharmony-one%2Fharmony%2Fpull%2F4198%2Ffiles)%0A%0A%23%23%20Token%20Lockers%0A%0A_Note%3A%20The%20key%20difference%20between%20%60TokenLockerOnEthereum.sol%60%20and%20%60TokenLockerOnHarmony.sol%60%20is%20the%20proof%20validation.%20%60TokenLockerOnEthereum.sol%60%20uses%20%60.%2Flib%2FMMRVerifier.sol%60%20to%20validate%20the%20%5BMountain%20Merkle%20Ranges%5D(https%3A%2F%2Fgithub.com%2Fopentimestamps%2Fopentimestamps-server%2Fblob%2Fmaster%2Fdoc%2Fmerkle-mountain-range.mdx)%20on%20Harmony%20and%20%60HarmonyProver.sol%60.%20%60TokenLockerOnHarmony.sol%60%20imports%20%60.%2Flib%2FMPTValidatorV2.sol%60%20to%20validate%20%5BMerkle%20Patrica%20Trie%5D(https%3A%2F%2Fethereum.org%2Fen%2Fdevelopers%2Fdocs%2Fdata-structures-and-encoding%2Fpatricia-merkle-trie%2F%23merkle-patricia-trees)%20and%20%60.%2FEthereumLightClient.sol%60._%0A%0A%23%23%23%20MultiChain%20Support%0A%0A1.%20Need%20to%20support%20other%20chains%0A%20%20%20-%20EVM%3A%20BSC%2C%20Polygon%2C%20Avalanche%2C%20Arbitrum%2C%20Optimism%0A%20%20%20-%20Bitcoin%0A%20%20%20-%20NEAR%0A%20%20%20-%20Solana%0A%20%20%20-%20Polkadot%0A%0A%23%23%20Code%20Review%0A%0AThe%20code%20reviewed%20is%20from%20a%20fork%20of%20%5Bharmony-one%2Fhorizon%5D(https%3A%2F%2Fgithub.com%2Fharmony-one%2Fhorizon).%20The%20fork%20is%20%5Bjohnwhitton%2Fhorizon%20branch%20refactorV2%5D(https%3A%2F%2Fgithub.com%2Fjohnwhitton%2Fhorizon%2Ftree%2FrefactorV2).%20This%20is%20part%20of%20the%20horizon%20v2%20initiative%20to%20bride%20a%20trustless%20bridge%20after%20the%20initial%20horizon%20hack.%20The%20code%20is%20incomplete%20and%20the%20original%20codebase%20did%20not%20support%20ethereum%202.0%20(only%20ethereum%201.0).%20Nevertheless%20there%20are%20a%20number%20of%20useful%20components%20developed%20which%20can%20be%20leveraged%20in%20building%20a%20trustless%20bridge.%0A%0A%23%23%20On-chain%20(Solidity)%20Code%20Review%0A%0A_Note%3A%20here%20we%20document%20functionality%20developed%20in%20solidity.%20We%20recommend%20reading%20the%20%5BOpen%20Zeppelin%20Contract%20Documentation%5D(https%3A%2F%2Fdocs.openzeppelin.com%2Fcontracts%2F4.x%2F)%20specifically%20the%20%5Butilities%5D(https%3A%2F%2Fdocs.openzeppelin.com%2Fcontracts%2F4.x%2Futilities)%20have%20a%20number%20of%20utitlies%20we%20leverage%20around%20signing%20and%20proving.%20We%20tend%20to%20utilize%20the%20%5Bopenzeppelin-contracts-upgradeabe%20repository%5D(https%3A%2F%2Fgithub.com%2FOpenZeppelin%2Fopenzeppelin-contracts-upgradeable)%20when%20building%20over%20the%20documented%20%5Bopenzeppelin-contracts%20repository%5D(https%3A%2F%2Fgithub.com%2FOpenZeppelin%2Fopenzeppelin-contracts)%20as%20we%20are%20often%20working%20with%20contracts%20which%20we%20wish%20to%20upgrade%2C%20there%20should%20be%20equivalent%20contracts%20in%20both%20repositories._%0A%0A%23%23%23%20OpenZeppelin%20Utilities%0A%0A-%20%5BUtilities%5D(https%3A%2F%2Fdocs.openzeppelin.com%2Fcontracts%2F4.x%2Fapi%2Futils)%3A%20Miscellaneous%20contracts%20and%20libraries%20containing%20utility%20functions%20you%20can%20use%20to%20improve%20security%2C%20work%20with%20new%20data%20types%2C%20or%20safely%20use%20low-level%20primitives.%0A%20%20-%20%5BMath%5D(https%3A%2F%2Fdocs.openzeppelin.com%2Fcontracts%2F4.x%2Fapi%2Futils%23math)%3A%20Standard%20math%20utilities%20missing%20in%20the%20Solidity%20language.%0A%20%20-%20%5BCryptography%5D(https%3A%2F%2Fdocs.openzeppelin.com%2Fcontracts%2F4.x%2Fapi%2Futils%23cryptography)%0A%20%20%20%20-%20%5BECDSA%5D(https%3A%2F%2Fdocs.openzeppelin.com%2Fcontracts%2F4.x%2Fapi%2Futils%23ECDSA)%3A%20Elliptic%20Curve%20Digital%20Signature%20Algorithm%20(ECDSA)%20operations.%0A%20%20%20%20-%20%5BSignatureChecker%5D(https%3A%2F%2Fdocs.openzeppelin.com%2Fcontracts%2F4.x%2Fapi%2Futils%23SignatureChecker)%3A%20Signature%20verification%20helper%20that%20can%20be%20used%20instead%20of%20ECDSA.recover%20to%20seamlessly%20support%20both%20ECDSA%20signatures%20from%20externally%20owned%20accounts%20(EOAs)%20as%20well%20as%20ERC1271%20signatures%20from%20smart%20contract%20wallets%20like%20Argent%20and%20Gnosis%20Safe.%0A%20%20%20%20-%20%5BMerkleProof%5D(https%3A%2F%2Fdocs.openzeppelin.com%2Fcontracts%2F4.x%2Fapi%2Futils%23MerkleProof)%3A%20These%20functions%20deal%20with%20verification%20of%20Merkle%20Tree%20proofs.%0A%20%20%20%20-%20%5BEIP712%5D(https%3A%2F%2Fdocs.openzeppelin.com%2Fcontracts%2F4.x%2Fapi%2Futils%23EIP712)%3A%20%5BEIP%20712%5D(https%3A%2F%2Feips.ethereum.org%2FEIPS%2Feip-712)%20is%20a%20standard%20for%20hashing%20and%20signing%20of%20typed%20structured%20data.%0A%20%20-%20%5BEscrow%5D(https%3A%2F%2Fdocs.openzeppelin.com%2Fcontracts%2F4.x%2Fapi%2Futils%23escrow)%3A%20Base%20escrow%20contract%2C%20holds%20funds%20designated%20for%20a%20payee%20until%20they%20withdraw%20them.%0A%20%20-%20%5BIntrospection%5D(https%3A%2F%2Fdocs.openzeppelin.com%2Fcontracts%2F4.x%2Fapi%2Futils%23introspection)%3A%20This%20set%20of%20interfaces%20and%20contracts%20deal%20with%20%5Btype%20introspection%5D(https%3A%2F%2Fen.wikipedia.org%2Fwiki%2FType_introspection)%20of%20contracts%2C%20that%20is%2C%20examining%20which%20functions%20can%20be%20called%20on%20them.%20This%20is%20usually%20referred%20to%20as%20a%20contract%E2%80%99s%20_interface_.%0A%20%20-%20%5BData%20Structures%5D(https%3A%2F%2Fdocs.openzeppelin.com%2Fcontracts%2F4.x%2Fapi%2Futils%23data_structures)%0A%20%20%20%20-%20%5BBitMaps%5D(https%3A%2F%2Fdocs.openzeppelin.com%2Fcontracts%2F4.x%2Fapi%2Futils%23BitMaps)%3A%20Library%20for%20managing%20uint256%20to%20bool%20mapping%20in%20a%20compact%20and%20efficient%20way%2C%20providing%20the%20keys%20are%20sequential.%20Largely%20inspired%20by%20Uniswap%E2%80%99s%20%5Bmerkle-distributor%5D(https%3A%2F%2Fgithub.com%2FUniswap%2Fmerkle-distributor%2Fblob%2Fmaster%2Fcontracts%2FMerkleDistributor.sol).%0A%20%20%20%20-%20%5BEnumerableMap%5D(https%3A%2F%2Fdocs.openzeppelin.com%2Fcontracts%2F4.x%2Fapi%2Futils%23EnumerableMap)%3A%20Library%20for%20managing%20an%20enumerable%20variant%20of%20Solidity%E2%80%99s%20%5Bmapping%5D(https%3A%2F%2Fsolidity.readthedocs.io%2Fen%2Flatest%2Ftypes.html%23mapping-types)%20type.%0A%20%20%20%20-%20%5BEnumerableSet%5D(https%3A%2F%2Fdocs.openzeppelin.com%2Fcontracts%2F4.x%2Fapi%2Futils%23EnumerableSet)%3A%20Library%20for%20managing%20%5Bsets%5D(%3Chttps%3A%2F%2Fen.wikipedia.org%2Fwiki%2FSet_(abstract_data_type)%3E)%20of%20primitive%20types.%0A%20%20%20%20-%20%5BDoubleEndedQueue%5D(https%3A%2F%2Fdocs.openzeppelin.com%2Fcontracts%2F4.x%2Fapi%2Futils%23DoubleEndedQueue)%3A%20A%20sequence%20of%20items%20with%20the%20ability%20to%20efficiently%20push%20and%20pop%20items%20(i.e.%20insert%20and%20remove)%20on%20both%20ends%20of%20the%20sequence%20(called%20front%20and%20back).%0A%20%20%20%20-%20%5BCheckpoints%5D(https%3A%2F%2Fdocs.openzeppelin.com%2Fcontracts%2F4.x%2Fapi%2Futils%23Checkpoints)%3A%20This%20library%20defines%20the%20%60History%60%20struct%2C%20for%20checkpointing%20values%20as%20they%20change%20at%20different%20points%20in%20time%2C%20and%20later%20looking%20up%20past%20values%20by%20block%20number.%20See%20%5BVotes%5D(https%3A%2F%2Fdocs.openzeppelin.com%2Fcontracts%2F4.x%2Fapi%2Fgovernance%23Votes)%20as%20an%20example.%0A%20%20-%20%5BLibraries%5D(https%3A%2F%2Fdocs.openzeppelin.com%2Fcontracts%2F4.x%2Fapi%2Fgovernance%23Votes)%0A%20%20%20%20-%20%5BCreate2%5D(https%3A%2F%2Fdocs.openzeppelin.com%2Fcontracts%2F4.x%2Fapi%2Futils%23Create2)%3A%20Helper%20to%20make%20usage%20of%20the%20%60CREATE2%60%20EVM%20opcode%20easier%20and%20safer.%0A%20%20%20%20-%20%5BAddress%5D(https%3A%2F%2Fdocs.openzeppelin.com%2Fcontracts%2F4.x%2Fapi%2Futils%23Address)%3A%20Collection%20of%20functions%20related%20to%20the%20address%20type%0A%20%20%20%20-%20%5BArrays%5D(https%3A%2F%2Fdocs.openzeppelin.com%2Fcontracts%2F4.x%2Fapi%2Futils%23Arrays)%3A%20Collection%20of%20functions%20related%20to%20array%20types.%0A%20%20%20%20-%20%5BBase64%5D(https%3A%2F%2Fdocs.openzeppelin.com%2Fcontracts%2F4.x%2Fapi%2Futils%23Base64)%3A%20Provides%20a%20set%20of%20functions%20to%20operate%20with%20Base64%20strings.%0A%20%20%20%20-%20%5BCounters%5D(https%3A%2F%2Fdocs.openzeppelin.com%2Fcontracts%2F4.x%2Fapi%2Futils%23Counters)%3A%20Provides%20counters%20that%20can%20only%20be%20incremented%2C%20decremented%20or%20reset.%0A%20%20%20%20-%20%5BStrings%5D(https%3A%2F%2Fdocs.openzeppelin.com%2Fcontracts%2F4.x%2Fapi%2Futils%23Strings)%3A%20String%20operations.%0A%20%20%20%20-%20%5BStorageSlot%5D(https%3A%2F%2Fdocs.openzeppelin.com%2Fcontracts%2F4.x%2Fapi%2Futils%23StorageSlot)%3A%20Library%20for%20reading%20and%20writing%20primitive%20types%20to%20specific%20storage%20slots.%20Storage%20slots%20are%20often%20used%20to%20avoid%20storage%20conflict%20when%20dealing%20with%20upgradeable%20contracts.%0A%20%20%20%20-%20%5BMulticall%5D(https%3A%2F%2Fdocs.openzeppelin.com%2Fcontracts%2F4.x%2Fapi%2Futils%23Multicall)%3A%20Provides%20a%20function%20to%20batch%20together%20multiple%20calls%20in%20a%20single%20external%20call.%0A%0A%23%23%23%20Cryptographic%20Primitives%0A%0A-%20%5Bethash%5D(https%3A%2F%2Fgithub.com%2Fjohnwhitton%2Fhorizon%2Ftree%2FrefactorV2%2Fcontracts%2Fethash)%3A%20used%20in%20proving%20ethereum%201.0%20%5Bethash%5D(https%3A%2F%2Fgithub.com%2Fjohnwhitton%2Fhorizon%2Ftree%2FrefactorV2%2Fcontracts%2Fethash)%20proof%20of%20work.%0A%20%20-%20%5BMerkleRoot.sol%5D(https%3A%2F%2Fgithub.com%2Fjohnwhitton%2Fhorizon%2Fblob%2FrefactorV2%2Fcontracts%2Fethash%2FMerkelRoot.sol)%3A%20provides%20the%20ability%20to%20getRootHash%20for%20a%20given%20epoch.%20Needs%20to%20be%20initialized%20with%20a%20start%20and%20end%20epoch%20and%20an%20initial%20merkle%20root.%0A%20%20-%20%5BPrime.sol%5D(https%3A%2F%2Fgithub.com%2Fjohnwhitton%2Fhorizon%2Fblob%2FrefactorV2%2Fcontracts%2Fethash%2FPrime.sol)%3A%20Determins%20if%20a%20number%20is%20likely%20to%20be%20prime%2C%20based%20on%20the%20%5BMiller-Rabin%20primality%20test%5D(https%3A%2F%2Fen.wikipedia.org%2Fwiki%2FMiller%25E2%2580%2593Rabin_primality_test)%0A%20%20-%20%5Bbinary.sol%5D(https%3A%2F%2Fgithub.com%2Fjohnwhitton%2Fhorizon%2Fblob%2FrefactorV2%2Fcontracts%2Fethash%2Fbinary.sol)%3A%20Binary%20number%20manipulation.%0A%20%20-%20%5Bethash.sol%5D(https%3A%2F%2Fgithub.com%2Fjohnwhitton%2Fhorizon%2Fblob%2FrefactorV2%2Fcontracts%2Fethash%2Fethash.sol)%3A%20Provides%20the%20ability%20to%20verifyHash%20using%20a%20%5Bhashimto%20function%5D(https%3A%2F%2Fethereum.org%2Fen%2Fdevelopers%2Fdocs%2Fconsensus-mechanisms%2Fpow%2Fmining-algorithms%2Fdagger-hashimoto%2F)%20and%20%5Bfnv%20hashing%5D(https%3A%2F%2Fen.wikipedia.org%2Fwiki%2FFowler%25E2%2580%2593Noll%25E2%2580%2593Vo_hash_function).%0A%20%20-%20%5Bkecakk512.sol%5D(https%3A%2F%2Fgithub.com%2Fjohnwhitton%2Fhorizon%2Fblob%2FrefactorV2%2Fcontracts%2Fethash%2Fkeccak512.sol)%3A%20Keccak512%20hash%20function%20supporting%20%5BSHA-3%5D(https%3A%2F%2Fen.wikipedia.org%2Fwiki%2FSHA-3).%0A-%20%5Blib%5D(https%3A%2F%2Fgithub.com%2Fjohnwhitton%2Fhorizon%2Ftree%2FrefactorV2%2Fcontracts%2Flib)%3A%20utility%20library%0A%20%20-%20%5BECVerify.sol%5D(https%3A%2F%2Fgithub.com%2Fjohnwhitton%2Fhorizon%2Fblob%2FrefactorV2%2Fcontracts%2Flib%2FECVerify.sol)%3A%20Verify's%20a%20signature%20and%20returns%20the%20signer%20address.%0A%20%20-%20%5BEthUtils%5D(https%3A%2F%2Fgithub.com%2Fjohnwhitton%2Fhorizon%2Fblob%2FrefactorV2%2Fcontracts%2Flib%2FEthUtils.sol)%3A%20hexString%20and%20byte%20manipulation%0A%20%20-%20%5BMMR.sol%5D(https%3A%2F%2Fgithub.com%2Fjohnwhitton%2Fhorizon%2Fblob%2FrefactorV2%2Fcontracts%2Flib%2FMMR.sol)%3A%20Merkle%20Mountain%20Range%20solidity%20library%0A%20%20-%20%5BMMRWrapper.sol%5D(https%3A%2F%2Fgithub.com%2Fjohnwhitton%2Fhorizon%2Fblob%2FrefactorV2%2Fcontracts%2Flib%2FMMRWrapper.sol)%3A%20Merkle%20Mountain%20Range%20wrapper%20functions.%0A%20%20-%20%5BMPT.sol%5D(https%3A%2F%2Fgithub.com%2Fjohnwhitton%2Fhorizon%2Fblob%2FrefactorV2%2Fcontracts%2Flib%2FMPT.sol)%3A%20Merkle%20Patricie%20Tries%20validation%20tools%20(uses%20RLPReader.sol)%0A%20%20-%20%5BMPTValidatorV2.sol%5D(https%3A%2F%2Fgithub.com%2Fjohnwhitton%2Fhorizon%2Fblob%2FrefactorV2%2Fcontracts%2Flib%2FMPTValidatorV2.sol)%3A%20Merkle%20Particia%20Tries%20validation%20tools%20improved%20by%20LayerZero%0A%20%20-%20%5BRLPEncode.sol%5D(https%3A%2F%2Fgithub.com%2Fjohnwhitton%2Fhorizon%2Fblob%2FrefactorV2%2Fcontracts%2Flib%2FRLPEncode.sol)%3A%20A%20simple%20RLP%20encoding%20library.%0A%20%20-%20%5BRLPReader.sol%5D(https%3A%2F%2Fgithub.com%2Fjohnwhitton%2Fhorizon%2Fblob%2FrefactorV2%2Fcontracts%2Flib%2FRLPReader.sol)%3A%20RLP%20Reader%0A%20%20-%20%5BSafecast.sol%5D(https%3A%2F%2Fgithub.com%2Fjohnwhitton%2Fhorizon%2Fblob%2FrefactorV2%2Fcontracts%2Flib%2FSafeCast.sol)%3A%20Safe%20casting%20function%20for%20Uints.%0A%0A%23%23%23%20Proving%20Mechanisms%0A%0A**Ethereum%201.0%20contracts%20deployed%20to%20Harmony**%0A%0A-%20%5BEthereumLightClient.sol%5D(https%3A%2F%2Fgithub.com%2Fjohnwhitton%2Fhorizon%2Fblob%2FrefactorV2%2Fcontracts%2FEthereumLightClient.sol)%3A%20Light%20Client%20for%20Ethereum%201.0%2C%20stores%20a%20mapping%20of%20blocks%20existing%20in%20the%20Canonical%20Chain%20verified%20using%20EthHash.%0A-%20%5BEthereumParser.sol%5D(https%3A%2F%2Fgithub.com%2Fjohnwhitton%2Fhorizon%2Fblob%2FrefactorV2%2Fcontracts%2FEthereumParser.sol)%3A%20Parse%20RLP-encoded%20block%20header%20into%20BlockHeader%20data%20structure%20and%20transactions%20with%20data%20fields%20order%20as%20defined%20in%20the%20Tx%20struct.%0A-%20%5BEthereumProver.sol%5D(https%3A%2F%2Fgithub.com%2Fjohnwhitton%2Fhorizon%2Fblob%2FrefactorV2%2Fcontracts%2FEthereumProver.sol)%3A%20Computes%20the%20hash%20of%20the%20Merkle-Patricia-Trie%20hash%20of%20the%20input%20and%20Validates%20a%20Merkle-Patricia-Trie%20proof.%20If%20the%20proof%20proves%20the%20inclusion%20of%20some%20key-value%20pair%20in%20the%20trie%2C%20the%20value%20is%20returned.%0A%0A**Harmony%20contracts%20deployed%20to%20Ethereum%201.0**%0A%0A_Note%20these%20contracts%20were%20planned%20to%20be%20implemented%20with%20Harmony%20Light%20Client%20support%20which%20includes%20Merkle%20Mountain%20Ranges%20(see%20this%20%5BPR%5D(https%3A%2F%2Fgithub.com%2Fharmony-one%2Fharmony%2Fpull%2F3872)%20and%20this%20%5Breview%5D(..%2Fchains%2Fharmony%23light-client-support)).%20The%20planned%20timeline%20for%20implementing%20this%20had%20not%20been%20finalized%20as%20of%20Feb%202023._%0A%0A-%20%5BHarmonyLightClient.sol%5D(https%3A%2F%2Fgithub.com%2Fjohnwhitton%2Fhorizon%2Fblob%2FrefactorV2%2Fcontracts%2FHarmonyLightClient.sol)%3A%20Allows%20submission%20of%20checkpoints%20and%20manages%20mappings%20for%20%60checkPointBlocks%60%20(holding%20blockHeader%20information%20including%20the%20Merkle%20Mountain%20Range%20Root%20field%20%60mmrRoot%60).%0A-%20%5BHarmonyParser.sol%5D(https%3A%2F%2Fgithub.com%2Fjohnwhitton%2Fhorizon%2Fblob%2FrefactorV2%2Fcontracts%2FHarmonyParser.sol)%3A%20Parse%20RLP-encoded%20block%20header%20into%20BlockHeader%20data%20structure%20and%20transactions%20with%20data%20fields%20order%20as%20defined%20in%20the%20Transaction%20struct.%0A-%20%5BHarmonyProver.sol%5D(https%3A%2F%2Fgithub.com%2Fjohnwhitton%2Fhorizon%2Fblob%2FrefactorV2%2Fcontracts%2FHarmonyProver.sol)%3A%20Verification%20functions%20for%20Blocks%2C%20Transaction%2C%20Receipts%20etc.%20Verification%20is%20done%20by%20verifying%20MerkleProofs%20via%20%60MPTValidator2.sol%60.%0A%0A%23%23%23%20Token%20Lockers%0A%0A-%20%5BBridgeToken.sol%5D(https%3A%2F%2Fgithub.com%2Fjohnwhitton%2Fhorizon%2Fblob%2FrefactorV2%2Fcontracts%2FBridgedToken.sol)%3A%20ERC20%20contract%20used%20for%20managing%20bridged%20tokens.%0A-%20%5BFaucetToken.sol%5D(https%3A%2F%2Fgithub.com%2Fjohnwhitton%2Fhorizon%2Fblob%2FrefactorV2%2Fcontracts%2FFaucetToken.sol)%3A%20ERC20%20Token%20Faucet%20used%20for%20testing%20on%20testnets.%0A-%20%5BTokenLocker.sol%5D(https%3A%2F%2Fgithub.com%2Fjohnwhitton%2Fhorizon%2Fblob%2FrefactorV2%2Fcontracts%2FTokenLocker.sol)%3A%20Locks%20Bridged%20Tokens%0A-%20%5BTokenLockerOnEthereum.sol%5D(https%3A%2F%2Fgithub.com%2Fjohnwhitton%2Fhorizon%2Fblob%2FrefactorV2%2Fcontracts%2FTokenLockerOnEthereum.sol)%3A%20Ethereum%20TokenLocker%0A-%20%5BTokenLockerOnHarmony.sol%5D(https%3A%2F%2Fgithub.com%2Fjohnwhitton%2Fhorizon%2Fblob%2FrefactorV2%2Fcontracts%2FTokenLockerOnHarmony.sol)%3A%20Harmony%20TokenLocker%0A-%20%5BTokenRegistry.sol%5D(https%3A%2F%2Fgithub.com%2Fjohnwhitton%2Fhorizon%2Fblob%2FrefactorV2%2Fcontracts%2FTokenRegistry.sol)%3A%20Responsible%20for%20mapping%20tokens%20between%20chains%20and%20minting%20new%20bridged%20tokens.%0A%0A%23%23%20Off-chain%20(Javascript)%20Code%20Review%0A%0A%23%23%23%20On-chain%20interaction%0A%0A-%20%5Bbridge%5D(https%3A%2F%2Fgithub.com%2Fjohnwhitton%2Fhorizon%2Ftree%2FrefactorV2%2Fsrc%2Fbridge)%0A%20%20-%20%5Bbridge.js%5D(https%3A%2F%2Fgithub.com%2Fjohnwhitton%2Fhorizon%2Fblob%2FrefactorV2%2Fsrc%2Fbridge%2Fbridge.js)%3A%20Interacts%20with%20provers%20and%20tokenLockers%20on%20the%20respective%20chains%20to%20perform%20the%20bridging%20of%20tokens%20across%20chains.%0A%20%20-%20%5Bcontract.js%5D(https%3A%2F%2Fgithub.com%2Fjohnwhitton%2Fhorizon%2Fblob%2FrefactorV2%2Fsrc%2Fbridge%2Fcontract.js)%3A%20Responsible%20for%20deploying%20contracts%2C%20mapping%20tokens%20between%20chains%20and%20checking%20token%20status.%0A%20%20-%20%5BethBridge.js%5D(https%3A%2F%2Fgithub.com%2Fjohnwhitton%2Fhorizon%2Fblob%2FrefactorV2%2Fsrc%2Fbridge%2FethBridge.js)%3A%20extends%20bridge.js%20with%20a%20constructor%20for%20Ethereum%0A%20%20-%20%5BhmyBridge.js%5D(https%3A%2F%2Fgithub.com%2Fjohnwhitton%2Fhorizon%2Fblob%2FrefactorV2%2Fsrc%2Fbridge%2FhmyBridge.js)%3A%20extens%20bridge.js%20with%20a%20constructor%20for%20Harmony%0A%20%20-%20%5Btoken.js%5D(https%3A%2F%2Fgithub.com%2Fjohnwhitton%2Fhorizon%2Fblob%2FrefactorV2%2Fsrc%2Fbridge%2Ftoken.js)%3A%20interacts%20with%20ERC20%20and%20FaucetToken%20(for%20testing).%0A%20%20-%20%5Bindex.js%5D(https%3A%2F%2Fgithub.com%2Fjohnwhitton%2Fhorizon%2Fblob%2FrefactorV2%2Fsrc%2Fcli%2Findex.js)%3A%20Command%20Line%20Interface%20commands.%0A%0A%23%23%23%20Command%20Line%20Interface%0A%0A-%20%5Bcli%5D(https%3A%2F%2Fgithub.com%2Fjohnwhitton%2Fhorizon%2Ftree%2FrefactorV2%2Fsrc%2Fcli)%3A%20CLI%20is%20a%20utility%20that%20provides%20a%20command-line%20interface%20to%20all%20the%20components%20to%20the%20Horizon%20bridge%20and%20allow%20performing%20end-to-end%20bridge%20functionalities.%0A%20%20-%20%5Belsc.js%5D(https%3A%2F%2Fgithub.com%2Fjohnwhitton%2Fhorizon%2Fblob%2FrefactorV2%2Fsrc%2Fcli%2Felc.js)%3A%20Ethereum%20Light%20Client%20deployed%20on%20Harmony.%20Supports%20deployment%2C%20status%20checks%20and%20querying%20block%20information.%0A%20%20-%20%5BethRelay.js%5D(https%3A%2F%2Fgithub.com%2Fjohnwhitton%2Fhorizon%2Fblob%2FrefactorV2%2Fsrc%2Fcli%2FethRelay.js)%3A%20Block%20Relayer%20from%20Ethereum%20to%20Harmony%0A%20%20-%20%5Beverifier.js%5D(https%3A%2F%2Fgithub.com%2Fjohnwhitton%2Fhorizon%2Fblob%2FrefactorV2%2Fsrc%2Fcli%2Feverifier.js)%3A%20Ethereum%20Verifier%20for%20Harmony.%20Supports%20the%20deployment%20of%20the%20verifier%20and%20validating%20Merkle%20Patricia%20Trie%20proofs%20from%20Harmony.%0A%20%20-%20%5Bindex.js%5D(https%3A%2F%2Fgithub.com%2Fjohnwhitton%2Fhorizon%2Fblob%2FrefactorV2%2Fsrc%2Fcli%2Findex.js)%3A%20Commands%20for%20the%20CLI.%0A%0A%23%23%23%20Ethereum%20Light%20Client%0A%0A-%20%5Belc%5D(https%3A%2F%2Fgithub.com%2Fjohnwhitton%2Fhorizon%2Fblob%2FrefactorV2%2Fsrc%2Felc%2FREADME.mdx)%3A%20Ethereum%20Light%20Client%20(ELC)%20is%20a%20SPV-based%20light%20client%20implemented%20as%20a%20smart%20contract%20that%20receives%20and%20stores%20Ethereum%20block%20header%20information.%0A%20%20-%20%5BMerkleRoot.json%5D(https%3A%2F%2Fgithub.com%2Fjohnwhitton%2Fhorizon%2Fblob%2FrefactorV2%2Fsrc%2Felc%2FMerkelRoot.json)%3A%20Holds%20starting%20epoch%20and%20Merkle%20root%20information.%0A%20%20-%20%5BMerkleRootSol.js%5D(https%3A%2F%2Fgithub.com%2Fjohnwhitton%2Fhorizon%2Fblob%2FrefactorV2%2Fsrc%2Felc%2FMerkelRootSol.js)%3A%20Deploys%20a%20MerkleRoot.sol%20contract%20on%20Harmony%20for%20the%20given%20Ethereum%20epoch%20and%20merkle%20root%20information.%0A%20%20-%20%5Bclient.js%5D(https%3A%2F%2Fgithub.com%2Fjohnwhitton%2Fhorizon%2Fblob%2FrefactorV2%2Fsrc%2Felc%2Fclient.js)%3A%20Interaction%20with%20the%20Client.sol%20(the%20Ethereum%20Light%20Client%20deployed%20on%20Harmony).%0A%20%20-%20%5Beth2one.js%5D(https%3A%2F%2Fgithub.com%2Fjohnwhitton%2Fhorizon%2Fblob%2FrefactorV2%2Fsrc%2Felc%2Feth2one-relay.js)%3A%20Relays%20blocks%20from%20ethereum%20to%20Harmony.%0A%20%20-%20%5BproofDump%5D(https%3A%2F%2Fgithub.com%2Fjohnwhitton%2Fhorizon%2Fblob%2FrefactorV2%2Fsrc%2Felc%2FproofDump.js)%3A%20Allows%20logging%20of%20dagProofs%20for%20blocks%20and%20epochs%20and%20writing%20them%20to%20files.%0A%0A%23%23%23%20Proving%20Mechanisms%0A%0A**Ethereum%20Prover**%0A%0A-%20%5Beprover%5D(https%3A%2F%2Fgithub.com%2Fjohnwhitton%2Fhorizon%2Ftree%2FrefactorV2%2Fsrc%2Feprover)%3A%20EProver%20is%20a%20utility%20that%20provides%20verifiable%20proof%20about%20user%E2%80%99s%20Ethereum%20tx%2C%20e.g.%2C%20lock%20tx.%0A%20%20-%20%5BReceipt.js%5D(https%3A%2F%2Fgithub.com%2Fjohnwhitton%2Fhorizon%2Fblob%2FrefactorV2%2Fsrc%2Feprover%2FReceipt.js)%3A%20Allows%20retreival%20of%20a%20receipt%20from%20Rpc%2C%20buffer%20or%20hex%20and%20serailiation%20of%20receipt.%0A%20%20-%20%5Bindex.js%5D(https%3A%2F%2Fgithub.com%2Fjohnwhitton%2Fhorizon%2Fblob%2FrefactorV2%2Fsrc%2Feprover%2Findex.js)%3A%20exports%20Eprover%0A%20%20-%20%5BtxProof.js%5D(https%3A%2F%2Fgithub.com%2Fjohnwhitton%2Fhorizon%2Fblob%2FrefactorV2%2Fsrc%2Feprover%2FtxProof.js)%3A%20Takes%20a%20transaction%20hash%20and%20gets%20a%20receipt%20proof%20(sha3%20hash%2C%20recieptRoor%2C%20proof%20and%20an%20encoded%20txIndex).%0A%0A%23%23%23%20Relayer%20Mechanisms%0A%0A**Ethereum%20to%20Harmony%20Relayer**%0A%0A-%20%5Beth2hmy-relay%5D(https%3A%2F%2Fgithub.com%2Fjohnwhitton%2Fhorizon%2Ftree%2FrefactorV2%2Fsrc%2Feth2hmy-relay)%3A%20Eth2Hmy%20relay%20downloads%20the%20Ethereum%20block%20headers%2C%20extract%20information%20and%20relay%20it%20to%20ELC%20smart%20contract%20on%20Harmony.%0A%20%20-%20%5Bindex.js%5D(https%3A%2F%2Fgithub.com%2Fjohnwhitton%2Fhorizon%2Fblob%2FrefactorV2%2Fsrc%2Feth2hmy-relay%2Findex.js)%3A%20exports%20%60DagProof%60%20and%20%60getBlockByNumber%60.%0A%20%20-%20%5Bethash%5D(https%3A%2F%2Fgithub.com%2Fjohnwhitton%2Fhorizon%2Ftree%2FrefactorV2%2Fsrc%2Feth2hmy-relay%2Fethash)%0A%20%20%20%20-%20%5Bindex.js%5D(https%3A%2F%2Fgithub.com%2Fjohnwhitton%2Fhorizon%2Fblob%2FrefactorV2%2Fsrc%2Feth2hmy-relay%2Fethash%2Fdist%2Findex.js)%3A%20Loads%20the%20epoch%20seed%20and%20cache%20given%20a%20block%20number%20and%20uses%20this%20to%20verify%20Proof%20of%20Work%20for%20headers%20and%20blocks.%0A%20%20%20%20-%20%5Butil.js%5D(https%3A%2F%2Fgithub.com%2Fjohnwhitton%2Fhorizon%2Fblob%2FrefactorV2%2Fsrc%2Feth2hmy-relay%2Fethash%2Fdist%2Futil.js)%3A%20Utilities%20for%20epochs%20including%20caching%2C%20hashing%20and%20retreival%20of%20seeds%20and%20buffers.%0A%0A%23%23%23%20Cryptographic%20Primitives%0A%0A-%20%5Beth2hmy-relay%2Flib%5D(https%3A%2F%2Fgithub.com%2Fjohnwhitton%2Fhorizon%2Ftree%2FrefactorV2%2Fsrc%2Feth2hmy-relay%2Flib)%3A%20Library%20of%20functions%20used%20by%20the%20Ethereum%20to%20Harmony%20Relay%0A%20%20-%20%5BDagPropf.js%5D(https%3A%2F%2Fgithub.com%2Fjohnwhitton%2Fhorizon%2Fblob%2FrefactorV2%2Fsrc%2Feth2hmy-relay%2Flib%2FDagProof.js)%3A%20Checks%20if%20a%20dag%20exists%20for%20an%20epoch%2C%20loads%20DAG%20for%20an%20epoch%20and%20verify%20header%20and%20getProof%20using%20the%20epoch's%20DAG.%0A%20%20-%20%5BMmapDB.js%5D(https%3A%2F%2Fgithub.com%2Fjohnwhitton%2Fhorizon%2Fblob%2FrefactorV2%2Fsrc%2Feth2hmy-relay%2Flib%2FMmapDB.js)%3A%20Merkle%20database%20functionality%20by%20extending%20Memory%20Map.%0A%20%20-%20%5BgetBlockHeader.js%5D(https%3A%2F%2Fgithub.com%2Fjohnwhitton%2Fhorizon%2Fblob%2FrefactorV2%2Fsrc%2Feth2hmy-relay%2Flib%2FgetBlockHeader.js)%3A%20Get%20Block%20information.%0A%20%20-%20%5Bmerkel.js%5D(https%3A%2F%2Fgithub.com%2Fjohnwhitton%2Fhorizon%2Fblob%2FrefactorV2%2Fsrc%2Feth2hmy-relay%2Flib%2Fmerkel.js)%3A%20MerkleTree%20functionality%20including%20construction%20of%20MerkleTrees%20and%20getting%20proofs%2C%20hex%20proofs%2C%20combined%20hashes%2C%20get%20Paired%20Elements%20and%20layers.%0A-%20%5BethashProof%5D(https%3A%2F%2Fgithub.com%2Fjohnwhitton%2Fhorizon%2Ftree%2FrefactorV2%2Fsrc%2FethashProof)%3A%20ethash%20proving%20mechanisms%0A%20%20-%20%5BBlockProof.js%5D(https%3A%2F%2Fgithub.com%2Fjohnwhitton%2Fhorizon%2Fblob%2FrefactorV2%2Fsrc%2FethashProof%2FBlockProof.js)%3A%20Exports%20getHeaderProof%2C%20parseRlpHeader%2C%20getBlockByNumber%0A%20%20-%20%5BDagMTreeEpoch.js%5D(https%3A%2F%2Fgithub.com%2Fjohnwhitton%2Fhorizon%2Fblob%2FrefactorV2%2Fsrc%2FethashProof%2FDagMtreeEpoch.js)%3A%20Exports%20generateDagMTree%2C%20genearateDagMTreeRange%0A%20%20-%20%5BMerkelRootSol.js%5D(https%3A%2F%2Fgithub.com%2Fjohnwhitton%2Fhorizon%2Fblob%2FrefactorV2%2Fsrc%2FethashProof%2FMerkelRootSol.js)%3A%20Creates%20a%20MerkleRoot.sol%20contract%20for%20an%20inputted%20merkleInfo.%0A-%20%5Blib%5D(https%3A%2F%2Fgithub.com%2Fjohnwhitton%2Fhorizon%2Ftree%2FrefactorV2%2Fsrc%2Flib)%0A%20%20-%20%5Bconfigure.js%5D(https%3A%2F%2Fgithub.com%2Fjohnwhitton%2Fhorizon%2Fblob%2FrefactorV2%2Fsrc%2Flib%2Fconfigure.js)%3A%20Configure%20TokenLocker%20and%20Faucet%20contracts.%0A%20%20-%20%5BethEthers.js%5D(https%3A%2F%2Fgithub.com%2Fjohnwhitton%2Fhorizon%2Fblob%2FrefactorV2%2Fsrc%2Flib%2FethEthers.js)%3A%20Shim%20over%20%5Bethers%5D(https%3A%2F%2Fwww.npmjs.com%2Fpackage%2Fethers)%20allowing%20the%20instantiation%20of%20connections%20using%20a%20configured%20private%20key.%0A%20%20-%20%5Blogger.js%5D(https%3A%2F%2Fgithub.com%2Fjohnwhitton%2Fhorizon%2Fblob%2FrefactorV2%2Fsrc%2Flib%2Flogger.js)%3A%20Logging%20Functions%0A%20%20-%20%5Butils.ts%5D(https%3A%2F%2Fgithub.com%2Fjohnwhitton%2Fhorizon%2Fblob%2FrefactorV2%2Fsrc%2Flib%2Futils.ts)%3A%20Utility%20functions%20including%20(buffer2hex%2C%20rpcWrapper%2C%20toRLPHeader%2C%20getReceiptLight%2C%20getReceipt%2C%20getReceiptRlp%2C%20getReceiptTrie%2Chex2key%2Cindex2key%2C%20expandkey%2C%20getReceiptProof%2C%20getTransactionProof%2C%20getAccountProof%2C%20getStorageProof%2C%20getKeyFromProof%2C%20fullToMin)%0A%0A**npm%20packages**%0A%0A-%20%5B%40ethereumjs%2Fblock%5D(https%3A%2F%2Fwww.npmjs.com%2Fpackage%2F%40ethereumjs%2Fblock)%3A%20Implements%20schema%20and%20functions%20related%20to%20Ethereum's%20block.%20(Ethereum%201.0%20or%20Execution%20Chain%20for%20Ethereum%202.0)%0A-%20%5Bethereumjs-util%5D(https%3A%2F%2Fwww.npmjs.com%2Fpackage%2Fethereumjs-util)%3A%20A%20collection%20of%20utility%20functions%20for%20Ethereum.%20It%20can%20be%20used%20in%20Node.js%20and%20in%20the%20browser%20with%20browserify.%0A-%20%5Bethers%5D(https%3A%2F%2Fwww.npmjs.com%2Fpackage%2Fethers)%3A%20A%20complete%2C%20compact%20and%20simple%20library%20for%20Ethereum%20and%20ilk%2C%20written%20in%20TypeScript.%0A-%0A-%20%5Bmiller-rabin%5D(https%3A%2F%2Fwww.npmjs.com%2Fpackage%2Fmiller-rabin)%3A%20implements%20%5BMiller%20Rabin%20primality%20test%5D(https%3A%2F%2Fen.wikipedia.org%2Fwiki%2FMiller%25E2%2580%2593Rabin_primality_test)%0A-%20%5Bmmap-io%5D(https%3A%2F%2Fwww.npmjs.com%2Fpackage%2Fmmap-io)%3A%20Memory%20Map%20for%20node.js%0A-%20%5Bsha3%5D(https%3A%2F%2Fwww.npmjs.com%2Fpackage%2Fsha3)%3A%20A%20pure%20JavaScript%20implementation%20of%20the%20Keccak%20family%20of%20cryptographic%20hashing%20algorithms%2C%20most%20notably%20including%20Keccak%20and%20SHA3.%0A-%0A%0A%23%23%23%20Light%20Client%20Functionality%0A%0A%23%23%23%20Token%20Lockers%0A%0A%23%23%20References%0A%0A%23%23%20Appendices%0A%0A%23%23%23%20Appendix%20A%3A%20Current%20Implementation%20Walkthough%0A%0AFollowing%20is%20a%20detailed%20walk%20though%20of%20the%20current%20implementation%20of%20the%20Ethereum%20Light%20Client%20and%20the%20flow%20for%20mapping%20tokens%20from%20Ethereum%20to%20Harmony.%0A%0A%23%23%23%23%20Ethereum%20Light%20Client%20(on%20Harmony)%0A%0A**Design**%0AExisting%20Design%0A%0A1.%20DAG%20is%20generated%20for%20each%20Ethereum%20EPOCH%3A%20This%20takes%20a%20couple%20of%20hours%20and%20has%20a%20size%20of%20approx%201GB.%0A2.%20Relayer%20is%20run%20to%20replicate%20each%20block%20header%20to%20the%20SPV%20Client%20on%20Harmony.%0A3.%20EthereumLightClient.sol%20addBlockHeader%3A%20Adds%20each%20block%20header%20to%20the%20Ethereum%20Light%20Client.%0A4.%20Transactions%20are%20Verified%0A%0A**Running%20the%20Relayer**%0A%0A%60%60%60%0A%23%20Start%20the%20relayer%20(note%3A%20replace%20the%20etherum%20light%20client%20address%20below)%0A%23%20relay%20%5Boptions%5D%20%3CethUrl%3E%20%3ChmyUrl%3E%20%3CelcAddress%3E%20%20%20relay%20eth%20block%20header%20to%20elc%20on%20hmy%0A%20yarn%20cli%20ethRelay%20relay%20http%3A%2F%2Flocalhost%3A8645%20http%3A%2F%2Flocalhost%3A9500%200x3Ceb74A902dc5fc11cF6337F68d04cB834AE6A22%0A%60%60%60%0A%0A**Implementation**%0A%0A1.%20DAG%20Generation%20can%20be%20done%20explicity%20by%20calling%20%60dagProve%60%20from%20the%20CLI%20or%20it%20is%20done%20automatically%20by%20%60getHeaderProof%60%20in%20%60ethHashProof%2FBlockProof.js%60%20which%20is%20called%20from%20%60blockRelay%60%20in%20%60cli%2FethRelay.js%60.%0A2.%20Relaying%20of%20Block%20Headers%20is%20done%20by%20%60blockRelayLoop%60%20in%20%60cli%2FethRelay.js%60%20which%0A%20%20%20-%20Reads%20the%20last%20block%20header%20from%20EthereumLightClient.sol%0A%20%20%20-%20Loops%20through%20calling%20an%20Ethereum%20RPC%20per%20block%20to%20retrieve%20the%20blockHeader%20using%20%60return%20eth.getBlock(blockNo).then(fromRPC)%60%20in%20function%20%60getBlockByNumber%60%20in%20%60eth2hmy-relay%2FgetBlockHeader.js%60%0A3.%20Adding%20BlockHeaders%20is%20done%20by%20%60await%20elc.addBlockHeader(rlpHeader%2C%20proofs.dagData%2C%20proofs.proofs)%60%20which%20is%20called%20from%20%60cli%2FethRelay.js%60.%20%60addBlockHeader%60%20in%20%60EthereumLightClient.sol%60%0A%20%20%20-%20calculates%20the%20blockHeader%20Hash%0A%20%20%20-%20and%20checks%20that%20it%0A%20%20%20%20%20-%20hasn't%20already%20been%20relayed%2C%0A%20%20%20%20%20-%20is%20the%20next%20block%20to%20be%20added%2C%0A%20%20%20%20%20-%20has%20a%20valid%20timestamp%0A%20%20%20%20%20-%20has%20a%20valid%20difficulty%0A%20%20%20%20%20-%20has%20a%20valid%20Proof%20of%20Work%20(POW)%0A%20%20%20-%20Check%20if%20the%20canonical%20chain%20needs%20to%20be%20replaced%20by%20another%20fork%0A%0A%23%23%23%20Mapping%20Tokens%20(Ethereum%20to%20Harmony)%0A%0A**Design**%0A%0A1.%20If%20the%20Token%20Has%20not%20already%20been%20mapped%20on%20Harmony%0A%20%20%20-%20Harmony%3A%20Create%20an%20ERC20%20Token%0A%20%20%20-%20Harmony%3A%20Map%20the%20Ethereum%20Token%20to%20the%20new%20ERC20%20Contract%0A%20%20%20-%20Ethereum%3A%20Validate%20the%20Harmony%20Mapping%20Transaction%0A%20%20%20-%20Ethereum%3A%20Map%20the%20Harmony%20ERC20%20token%20to%20the%20existing%20Ethereum%20Token%0A%20%20%20-%20Harmony%3A%20Validate%20the%20Ethereum%20mapping%20Transaction%0A%0A_Note%3A%20The%20key%20difference%20between%20%60TokenLockerOnEthereum.sol%60%20and%20%60TokenLockerOnHarmony.sol%60%20is%20the%20proof%20validation.%20%60TokenLockerOnEthereum.sol%60%20uses%20%60.%2Flib%2FMMRVerifier.sol%60%20to%20validate%20the%20%5BMountain%20Merkle%20Ranges%5D(https%3A%2F%2Fgithub.com%2Fopentimestamps%2Fopentimestamps-server%2Fblob%2Fmaster%2Fdoc%2Fmerkle-mountain-range.mdx)%20on%20Harmony%20and%20%60HarmonyProver.sol%60.%20%60TokenLockerOnHarmony.sol%60%20imports%20%60.%2Flib%2FMPTValidatorV2.sol%60%20to%20validate%20%5BMerkle%20Patrica%20Trie%5D(https%3A%2F%2Fethereum.org%2Fen%2Fdevelopers%2Fdocs%2Fdata-structures-and-encoding%2Fpatricia-merkle-trie%2F%23merkle-patricia-trees)%20and%20%60.%2FEthereumLightClient.sol%60._%0A%0A_Note%3A%20%60validateAndExecuteProof%60%20is%20responsible%20for%20creation%20of%20the%20BridgeTokens%20on%20the%20destination%20chain%20it%20does%20this%20by%20calling%20%60execute%60%20call%20in%20%60TokenLockerLocker.sol%60%20which%20then%20calls%20the%20function%20%60onTokenMapReqEvent%60%20in%20%60TokenRegistry.sol%60%20which%20creates%20a%20new%20Bridge%20Token%20%60BridgedToken%20mintAddress%20%3D%20new%20BridgedToken%7Bsalt%3A%20salt%7D()%3B%60%20and%20then%20initializes%20it.%20This%20uses%20%5B(RLP)%20Serialization%5D(https%3A%2F%2Fethereum.org%2Fen%2Fdevelopers%2Fdocs%2Fdata-structures-and-encoding%2Frlp%2F)_%0A%0A_Note%3A%20The%20shims%20in%20%60ethWeb3.js%60%20provide%20simplified%20functions%20for%20%60ContractAt%60%2C%20%60ContractDeploy%60%2C%20%60sendTx%60%20and%20%60addPrivateKey%60%20and%20have%20a%20constructor%20which%20uses%20%60process.env.PRIVATE_KEY%60._%0A%0A**Mapping%20the%20Tokens**%0A%0A%60%60%60%0A%23%20Map%20the%20Tokens%0A%23%20map%20%3CethUrl%3E%20%3CethBridge%3E%20%3ChmyUrl%3E%20%3ChmyBridge%3E%20%3Ctoken%3E%0Ayarn%20cli%20Bridge%20map%20http%3A%2F%2Flocalhost%3A8645%200x017f8C7d1Cb04dE974B8aC1a6B8d3d74bC74E7E1%20http%3A%2F%2Flocalhost%3A9500%200x017f8C7d1Cb04dE974B8aC1a6B8d3d74bC74E7E1%200x4e59AeD3aCbb0cb66AF94E893BEE7df8B414dAB1%0A%60%60%60%0A%0A**Implementation**%0A%0A-%20The%20CLI%20calls%20%60tokenMap%60%20in%20%60src%2Fbridge%2Fcontract.js%60%20to%0A%20%20-%20Instantiate%20the%20Ethereum%20Bridge%20and%20Harmony%20Bridge%20Contracts%0A%20%20-%20Calls%20%60TokenMap%60%20in%20%60scr%2Fbridge%2Fbridge.js%60%20to%0A%20%20%20%20-%20Issue%20a%20token%20Map%20request%20on%20Ethereum%20%60const%20mapReq%20%3D%20await%20src.IssueTokenMapReq(token)%60%0A%20%20%20%20-%20Acknowledge%20the%20Map%20Request%20on%20Harmony%20%60const%20mapAck%20%3D%20await%20Bridge.CrossRelayEthHmy(src%2C%20dest%2C%20mapReq)%60%0A%20%20%20%20-%20Issue%20a%20token%20Map%20request%20on%20Harmony%20%60return%20Bridge.CrossRelayHmyEth(dest%2C%20src%2C%20mapAck.transactionHash)%60%0A%0A**Here%20is%20the%20Logic%20(call%20execution%20overview)%20when%20Mapping%20Tokens%20across%20Chains.%20_NOTE%3A%20Currently%20mapping%20has%20only%20been%20developed%20from%20Ethereum%20to%20Harmony%20(not%20bi-directional)_.**%0A%0A1.%20Bridge%20Map%20is%20called%20in%20src.cli.index.js%20and%20it%20calls%20%60tokenMap%60%20in%20%60bridge%2Fcontract.js%60%20which%0A%20%20%20-%20Get%20srcBridge%20Contract%20on%20Ethereum%20%60TokenLockerOnEthereum.sol%60%20from%20%60ethBridge.js%60%20it%20also%20instantiates%20an%20%60eprover%60%20using%20%60tools%2Feprover%2Findex.js%60%20which%20calls%20%60txProof.js%60%20which%20uses%20%5Beth-proof%20npm%20package%5D(https%3A%2F%2Fwww.npmjs.com%2Fpackage%2Feth-proof).%20_Note%3A%20this%20is%20marked%20with%20a%20%2F%2FTODO%20need%20to%20test%20and%20develop%20proving%20logic%20on%20Harmony._%0A%20%20%20-%20Get%20destBridge%20Contract%20on%20Hamony%20%60TokenLockerOnHarmony.sol%60%20from%20%60hmyBridge.js%60%20it%20also%20instantiates%20an%20%60hprove%60%20using%20%60tools%2Feprover%2Findex.js%60%20which%20calls%20%60txProof.js%60%20which%20uses%20%5Beth-proof%20npm%20package%5D(https%3A%2F%2Fwww.npmjs.com%2Fpackage%2Feth-proof).%0A%20%20%20-%20calls%20%60TokenMap%60%20in%20%60bridge.js%60%0A2.%20%60TokenMap%60%20Calls%20IssueTokenMapReq%20(on%20the%20Ethreum%20Locker)%20returning%20the%20%60mapReq.transactionHash%60%0A%20%20%20-%20%60IssueTokenMapReq(token)%60%20is%20held%20in%20%60bridge.js%60%20as%20part%20of%20the%20bridge%20class%0A%20%20%20-%20It%20calls%20%60issueTokenMapReq%60%20on%20%60TokenLockerOnEthereum.sol%60%20which%20is%20implemented%20by%20%60TokenRegistry.sol%60%0A%20%20%20-%20%60issueTokenMapReq%60%20checks%20if%20the%20token%20has%20already%20been%20mapped%20if%20not%20it%20was%20emitting%20a%20%60TokenMapReq%60%20with%20the%20details%20of%20the%20token%20to%20be%20mapped.%20However%20this%20was%20commented%20out%20as%20it%20was%20felt%20that%2C%20if%20it%20has%20not%20been%20mapped%2C%20we%20use%20the%20%60transactionHash%60%20of%20the%20mapping%20request%60%20to%20drive%20the%20logic%20below%20(not%20the%20event).%0A3.%20%60TokenMap%60%20calls%20%60Bridge.CrossRelay%60%20with%20the%20IssueTokenMapReq.hash%20to%0A%20%20%20-%20gets%20the%20proof%20of%20the%20transaction%20on%20Ethereum%20via%20%60getProof%60%20calling%20%60prover.ReceiptProof%60%20which%20calls%20the%20eprover%20and%20returns%20%60proof%60%20with%0A%20%20%20%20%20-%20%60hash%3A%20sha3(resp.header.serialize())%2C%60%0A%20%20%20%20%20-%20%60root%3A%20resp.header.receiptRoot%2C%60%0A%20%20%20%20%20-%20%60proof%3A%20encode(resp.receiptProof)%2C%60%0A%20%20%20%20%20-%20%60key%3A%20encode(Number(resp.txIndex))%20%2F%2F%20'0x12'%20%3D%3E%20Nunmber%60%0A%20%20%20-%20We%20then%20call%20%60dest.ExecProof(proof)%60%20to%20execute%20the%20proof%20on%20Harmony%0A%20%20%20%20%20-%20This%20calls%20%60validateAndExecuteProof%60%20on%20%60TokenLockerOnHarmony.sol%60%20with%20the%20%60proofData%60%20from%20above%2C%20which%0A%20%20%20%20%20%20%20-%20requires%20%60lightclient.VerifyReceiptsHash(blockHash%2C%20rootHash)%2C%60%20implemented%20by%20%60.%2FEthereumLightClient.sol%60%0A%20%20%20%20%20%20%20%20%20-%20This%20returns%20%60return%20bytes32(blocks%5Buint256(blockHash)%5D.receiptsRoot)%20%3D%3D%20receiptsHash%3B%60%0A%20%20%20%20%20%20%20%20%20-%20**Which%20means%20the%20block%20has%20to%20be%20relayed%20first%2C%20as%20we%20have%20just%20executed%20the%20transaction%20the%20relayer%20usually%20has%20not%20relayed%20the%20block%20so%20this%20will%20fail**%0A%20%20%20%20%20%20%20-%20requires%20%60lightclient.isVerified(uint256(blockHash)%60%20implemented%20by%20%60.%2FEthereumLightClient.sol%60%0A%20%20%20%20%20%20%20%20%20-%20This%20returns%20%60return%20canonicalBlocks%5BblockHash%5D%20%26%26%20blocks%5BblockHash%5D.number%20%2B%2025%20%3C%20blocks%5BcanonicalHead%5D.number%3B%60%0A%20%20%20%20%20%20%20%20%20-%20**Which%20means%20there%20must%20be%20an%20additional%2025%20blocks%20on%20Ethereum%20before%20this%20can%20be%20processed.%20This%20logic%20needs%20to%20be%20rewritten%20to%20break%20down%20execution%20for%201.%20the%20ethereum%20mapping%20request%202.%20After%20a%2025%20block%20delay%20the%20Harmony%20Proof%20validation%20and%20executing%20the%20Harmony%20Mapping%20Request**%0A%20%20%20%20%20%20%20-%20%60require(spentReceipt%5BreceiptHash%5D%20%3D%3D%20false%2C%20%22double%20spent!%22)%3B%60%20to%20ensure%20that%20we%20haven't%20already%20executed%20this%20proof%0A%20%20%20%20%20%20%20-%20gets%20the%20%60rlpdata%60%20using%20%60EthereumProver.validateMPTProof%60%20implemented%20by%20%60EthereumProver.sol%60%20which%0A%20%20%20%20%20%20%20%20%20-%20Validates%20a%20Merkle-Patricia-Trie%20proof.%0A%20%20%20%20%20%20%20%20%20-%20Returns%20a%20value%20whose%20inclusion%20is%20proved%20or%20an%20empty%20byte%20array%20for%20a%20proof%20of%20exclusion%0A%20%20%20%20%20%20%20-%20marks%20%60spentReceipt%5BreceiptHash%5D%20%3D%20true%3B%60%0A%20%20%20%20%20%20%20-%20%60execute(rlpdata)%60%20implemented%20by%20%60TokenLocker.sol%60%20which%20calls%20%60onTokenMapReqEvent(topics%2C%20Data)%60%20implemented%20by%20%60TokenRegistry.sol%60%0A%20%20%20%20%20%20%20%20%20-%20%60address%20tokenReq%20%3D%20address(uint160(uint256(topics%5B1%5D)))%3B%60%20gets%20the%20address%20of%20the%20token%20to%20be%20mapped.%0A%20%20%20%20%20%20%20%20%20-%20require%20%60address(RxMapped%5BtokenReq%5D)%20%3D%3D%20address(0)%60%20that%20the%20token%20has%20not%20already%20been%20mapped.%0A%20%20%20%20%20%20%20%20%20-%20%60address(RxMapped%5BtokenReq%5D)%20%3D%3D%20address(0)%60%20creates%20a%20new%20BridgedToken%20implemented%20by%20%60BridgedToken.sol%60%0A%20%20%20%20%20%20%20%20%20%20%20-%20%60contract%20BridgedToken%20is%20ERC20Upgradeable%2C%20ERC20BurnableUpgradeable%2C%20OwnableUpgradeable%60%20it%20is%20a%20standard%20openzepplin%20ERC20%20Burnable%2C%20Ownable%2C%20Upgradeable%20token%0A%20%20%20%20%20%20%20%20%20-%20%60mintAddress.initialize%60%20initialize%20the%20token%20with%20the%20same%20%60name%60%2C%20%60symbol%60%20and%20%60decimals%60%20as%20the%20ethereum%20bridged%20token%0A%20%20%20%20%20%20%20%20%20-%20%60RxMappedInv%5Baddress(mintAddress)%5D%20%3D%20tokenReq%3B%60%20updates%20the%20inverse%20Key%20Value%20Mapping%0A%20%20%20%20%20%20%20%20%20-%20%60RxMapped%5BtokenReq%5D%20%3D%20mintAddress%3B%60%20updates%20the%20Ethereum%20mapped%20tokens%0A%20%20%20%20%20%20%20%20%20-%20%60RxTokens.push(mintAddress)%3B%60%20add%20the%20newly%20created%20token%20to%20a%20list%20of%20bridged%20tokens%0A%20%20%20%20%20%20%20%20%20-%20%60emit%20TokenMapAck(tokenReq%2C%20address(mintAddress))%3B%60%0A%20%20%20%20%20%20%20-%20%60require(executedEvents%20%3E%200%2C%20%22no%20valid%20event%22)%60%20to%20check%20if%20it%20executed%20the%20mapping%20correctly.%0A4.%20We%20then%20take%20the%20Harmony%20Mapping%20%60transactionHash%60%20and%20repeat%20the%20above%20process%20to%20prove%20the%20Harmony%20mapping%20acknowledgment%20on%20Ethereum%20(Cross%20Relay%20second%20call)%20%60return%20Bridge.CrossRelay(dest%2C%20src%2C%20mapAck.transactionHash)%3B%60%0A%0A-%20gets%20the%20proof%20of%20the%20transaction%20on%20Harmony%20via%20%60getProof%60%20calling%20%60prover.ReceiptProof%60%20which%20calls%20the%20eprover%20and%20returns%20%60proof%60%20with%0A%20%20_%60hash%3A%20sha3(resp.header.serialize())%2C%60%0A%20%20_%20%60root%3A%20resp.header.receiptRoot%2C%60%0A%20%20_%60proof%3A%20encode(resp.receiptProof)%2C%60%0A%20%20_%20%60key%3A%20encode(Number(resp.txIndex))%20%2F%2F%20'0x12'%20%3D%3E%20Nunmber%60%0A%20%20-%20We%20then%20call%20%60dest.ExecProof(proof)%60%20to%20execute%20the%20proof%20on%20Ethereum%0A%20%20%20%20-%20This%20calls%20%60validateAndExecuteProof%60%20on%20%60TokenLokerOnEthereum.sol%60%20with%20the%20%60proofData%60%20from%20above%2C%20which%0A%20%20%20%20%20%20-%20%60require(lightclient.isValidCheckPoint(header.epoch%2C%20mmrProof.root)%2C%60%20implemented%20by%20%60HarmonyLightClient.sol%60%0A%20%20%20%20%20%20%20%20-%20%60return%20epochMmrRoots%5Bepoch%5D%5BmmrRoot%5D%60%20which%20means%20that%20the%20epoch%20has%20to%20have%20had%20a%20checkpoint%20submitted%20via%20%60submitCheckpoint%60%0A%20%20%20%20%20%20-%20%60bytes32%20blockHash%20%3D%20HarmonyParser.getBlockHash(header)%3B%60%20gets%20the%20blockHash%20implemented%20by%20%60HarmonyParser.sol%60%0A%20%20%20%20%20%20%20%20-%20This%20returns%20%60return%20keccak256(getBlockRlpData(header))%3B%60%0A%20%20%20%20%20%20%20%20-%20%60getBlockRlpData%60%20creates%20a%20list%20%60bytes%5B%5D%20memory%20list%20%3D%20new%20bytes%5B%5D(15)%3B%60%20and%20uses%20statements%20like%20%60list%5B0%5D%20%3D%20RLPEncode.encodeBytes(abi.encodePacked(header.parentHash))%3B%60%20to%20perform%20%5BRecursive-Length%20Prefix%20(RLP)%20Serialization%5D(https%3A%2F%2Fethereum.org%2Fen%2Fdevelopers%2Fdocs%2Fdata-structures-and-encoding%2Frlp%2F)%20implemented%20by%20%60RLPEncode.sol%60%0A%20%20%20%20%20%20-%20%60HarmonyProver.verifyHeader(header%2C%20mmrProof)%3B%60%20verifys%20the%20header%20implemented%20by%20%60HarmonyProver.sol%60%0A%20%20%20%20%20%20%20%20-%20%60bytes32%20blockHash%20%3D%20HarmonyParser.getBlockHash(header)%3B%60%20gets%20the%20blockHash%20implemented%20by%20%60HarmonyParser.sol%60%20as%20above%0A%20%20%20%20%20%20%20%20-%20%60valid%20%3D%20MMRVerifier.inclusionProof(proof.root%2C%20proof.width%2C%20proof.index%2C%20blockHash%2C%20proof.peaks%2C%20proof.siblings)%3B%60%20verifys%20the%20proff%20using%20the%20%5BMerkle%20Mountain%20Range%20Proof%5D(https%3A%2F%2Fgithub.com%2Fopentimestamps%2Fopentimestamps-server%2Fblob%2Fmaster%2Fdoc%2Fmerkle-mountain-range.mdx)%20passed%20%60MMRVerifier.MMRProof%20memory%20proof%60%20and%20the%20%60blockHash%60.%0A%20%20%20%20%20%20%20%20-%20**NOTE%3A%20This%20means%20that%20a%20%60submitCheckpoint%60%20in%20%60HarmonyLightClient.sol%60%20needs%20to%20have%20called%20either%20for%20the%20next%20epoch%20or%20for%20a%20checkpoint%2C%20after%20the%20block%20the%20harmony%20mapping%20transaction%20was%20in.**%0A%20%20%20%20%20%20%20%20-%20**NOTE%3A%20Automatic%20submission%20of%20checkpoints%20to%20the%20Harmony%20Light%20Client%20has%20not%20been%20developed%20as%20yet.%20(It%20is%20not%20part%20of%20the%20%60ethRelay.js%60).%20And%20so%20the%20checkpoint%20would%20need%20to%20be%20manually%20submitted%20before%20the%20Ethereum%20Mapping%20could%20take%20place.**%0A%20%20%20%20%20%20-%20%60require(spentReceipt%5BreceiptHash%5D%20%3D%3D%20false%2C%20%22double%20spent!%22)%3B%60%20ensure%20that%20we%20haven't%20already%20processed%20this%20mapping%20request%60%0A%20%20%20%20%20%20-%20%60HarmonyProver.verifyReceipt(header%2C%20receiptdata)%60%20ensure%20the%20receiptdata%20is%20valid%0A%20%20%20%20%20%20-%20%60spentReceipt%5BreceiptHash%5D%20%3D%20true%3B%60%20marks%20the%20receipt%20as%20having%20been%20processed%0A%20%20%20%20%20%20-%20%60execute(receiptdata.expectedValue)%3B%60%20implemented%20by%20%60TokenLocker.sol%60%20which%20calls%20%60onTokenMapAckEvent(topics)%60%20implemented%20by%20%60TokenRegistry.sol%60%0A%20%20%20%20%20%20%20%20-%20%60address%20tokenReq%20%3D%20address(uint160(uint256(topics%5B1%5D)))%3B%60%0A%20%20%20%20%20%20%20%20-%20%60address%20tokenAck%20%3D%20address(uint160(uint256(topics%5B2%5D)))%3B%60%0A%20%20%20%20%20%20%20%20-%20%60require(TxMapped%5BtokenReq%5D%20%3D%3D%20address(0)%2C%20%22missing%20mapping%20to%20acknowledge%22)%3B%60%0A%20%20%20%20%20%20%20%20-%20%60TxMapped%5BtokenReq%5D%20%3D%20tokenAck%3B%60%0A%20%20%20%20%20%20%20%20-%20%60TxMappedInv%5BtokenAck%5D%20%3D%20IERC20Upgradeable(tokenReq)%3B%60%0A%20%20%20%20%20%20%20%20-%20%60TxTokens.push(IERC20Upgradeable(tokenReq))%3B%60%0A%0A5.%20Upon%20completion%20of%20tokenMap%20control%20is%20passed%20back%20to%20Bridge%20Map%20which%0A6.%20Calls%20TokenPair%20on%20Ethereum%0A7.%20Calls%20ethTokenInfo%20to%20get%20the%20status%20of%20the%20ERC20%0A8.%20Calls%20hmyTokenInfo%20to%20get%20the%20tokenStatus%20on%20Harmony%0A",lastUpdatedAt:1753129136e3},{lazy:()=>o2(()=>import("./harmony-horizon-Ctnlrcxy.js"),[]),path:"/research/bridge/harmony-horizon.html",type:"mdx",filePath:"research/bridge/harmony-horizon.mdx",content:"%23%20Harmony%20Horizon%0A%0A-%20date%3A%202023-02-24%0A-%20last%20updated%3A%202023-02-24%0A%0A%23%23%20Overview%0A%0AThis%20document%20reviews%20the%20%5Bhorizon%5D(https%3A%2F%2Fgithub.com%2Fjohnwhitton%2Fhorizon%2Ftree%2FrefactorV2)%20current%20implementation%2C%20development%20tasks%20that%20need%20to%20be%20done%20to%20support%20POW%20and%20offers%20some%20thoughts%20on%20next%20steps%20to%20support%20Ethereum%202.0%20and%20other%20chains.%0A%0AFurther%20thoughs%20on%20ETH%202.0%20support%2C%20removing%20the%20ETHHASH%20logic%20and%20SPV%20client%20and%20potentially%20replacing%20with%20MMR%20trees%20per%20epoch%20and%20checkpoints%20similar%20to%20Harmony%20Light%20Client%20on%20Ethereum%2C%20can%20find%20inspiration%20in%20%5Bnear-rainbow%5D(.%2Fnear-rainbow.mdx).%0A%0A%23%23%20Approach%0A%0AHorizon%202.0%20approach%20is%20to%20use%20validity%20proofs%20implemented%20by%20on-chain%20smart%20contracts.%0A%0A%23%23%20Proving%20Mechanisms%0A%0A%23%23%23%20Ethereum%20Light%20Client%0A%0A1.%20ETH%202.0%20support%20see%20%5Bhere%5D(%2Fresearch%2Fchains%2Fethereum.mdx)%0A2.%20Queuing%20mechanism%20should%20be%20implemented%20to%20queue%20bridge%20transactions.%20The%20queue%20can%20be%20polled%20as%20part%20of%20the%20block%20relay%20functionality%20to%20process%20bridge%20transactions%20once%20the%20blocks%20have%20been%20relayed.%0A3.%20Consider%20whether%20we%20can%20use%20p2p%20messaging%20to%20receive%20published%20blocks%20rather%20than%20looping%20and%20polling%20via%20an%20RPC.%0A%0A%23%23%23%20Harmony%20Light%20Client%0A%0A1.%20Needs%20to%20implement%20a%20process%20to%20%60submitCheckpoint%60.%0A2.%20%60eprove%60%20logic%20needs%20to%20be%20reviewed%0A3.%20Queuing%20mechanism%20should%20be%20implemented%20to%20queue%20bridge%20transactions.%20The%20queue%20can%20be%20polled%20as%20part%20of%20the%20%60submitCheckpoint%60%20functionality%20to%20process%20bridge%20transactions%20once%20the%20blocks%20have%20been%20relayed.%0A4.%20Need%20to%20facilitate%20the%20core%20protocol%20%5BMMR%20enhancements%20PR%5D(https%3A%2F%2Fgithub.com%2Fharmony-one%2Fharmony%2Fpull%2F4198%2Ffiles)%0A%0A%23%23%20Relayer%20Mechanisms%0A%0ASequencing%20of%20Transactions%3A%20Needs%20to%20be%20implemented%20and%20%60TokenMap%60%20in%20%60bridge.js%60%20needs%20to%20be%20refactored.%20Below%20is%20the%20current%20sequence%20flow%20and%20areas%20for%20improvements.%0A%0A1.%20Ethereum%20Mapping%20Request%0A2.%20Relay%20of%20Block%20to%20EthereumLightClient.sol%20on%20Harmony%0A%20%20%20-%20The%20block%20has%20to%20be%20relayed%20before%20we%20can%20process%20the%20Harmony%20Mapping%20request%2C%20as%20we%20have%20just%20executed%20the%20transaction%20the%20relayer%20usually%20has%20not%20relayed%20the%20block%20so%20this%20will%20fail.%0A%20%20%20-%20There%20must%20be%20an%20additional%2025%20blocks%20on%20Ethereum%20before%20this%20block%20can%20be%20considered%20part%20of%20the%20canonical%20chain.%0A%20%20%20-%20This%20logic%20needs%20to%20be%20rewritten%20to%20break%20down%20execution%20for%201.%20the%20ethereum%20mapping%20request%202.%20After%20a%2025%20block%20delay%20the%20Harmony%20Proof%20validation%20and%20executing%20the%20Harmony%20Mapping%20Request%5C*%5C*%0A3.%20Harmony%20Mapping%20Request%0A4.%20Relay%20of%20Checkpoint%20to%20HarmonyLightClient.sol%20on%20Ethereum%0A%20%20%20-%20A%20%60submitCheckpoint%60%20in%20%60HarmonyLightClient.sol%60%20needs%20to%20have%20called%20either%20for%20the%20next%20epoch%20or%20for%20a%20checkpoint%2C%20after%20the%20block%20the%20harmony%20mapping%20transaction%20was%20in.%5C*%5C*%0A%20%20%20-%20Automatic%20submission%20of%20checkpoints%20to%20the%20Harmony%20Light%20Client%20has%20not%20been%20developed%20as%20yet.%20(It%20is%20not%20part%20of%20the%20%60ethRelay.js%60).%20And%20so%20the%20checkpoint%20would%20need%20to%20be%20manually%20submitted%20before%20the%20Ethereum%20Mapping%20could%20take%20place.%0A5.%20Etherem%20Process%20Harmony%20Mapping%20Acknowledgement%0A%0A%23%23%20Light%20Client%20Functionality%0A%0A%23%23%23%20Ethereum%20Light%20Client%0A%0A1.%20ETH%202.0%20support%20see%20%5Bhere%5D(%2Fresearch%2Fchains%2Fethereum.mdx)%0A2.%20Queuing%20mechanism%20should%20be%20implemented%20to%20queue%20bridge%20transactions.%20The%20queue%20can%20be%20polled%20as%20part%20of%20the%20block%20relay%20functionality%20to%20process%20bridge%20transactions%20once%20the%20blocks%20have%20been%20relayed.%0A3.%20Consider%20whether%20we%20can%20use%20p2p%20messaging%20to%20receive%20published%20blocks%20rather%20than%20looping%20and%20polling%20via%20an%20RPC.%0A%0A%23%23%23%20Harmony%20Light%20Client%0A%0A1.%20Needs%20to%20implement%20a%20process%20to%20%60submitCheckpoint%60.%0A2.%20%60eprove%60%20logic%20needs%20to%20be%20reviewed%0A3.%20Queuing%20mechanism%20should%20be%20implemented%20to%20queue%20bridge%20transactions.%20The%20queue%20can%20be%20polled%20as%20part%20of%20the%20%60submitCheckpoint%60%20functionality%20to%20process%20bridge%20transactions%20once%20the%20blocks%20have%20been%20relayed.%0A4.%20Need%20to%20facilitate%20the%20core%20protocol%20%5BMMR%20enhancements%20PR%5D(https%3A%2F%2Fgithub.com%2Fharmony-one%2Fharmony%2Fpull%2F4198%2Ffiles)%0A%0A%23%23%20Token%20Lockers%0A%0A_Note%3A%20The%20key%20difference%20between%20%60TokenLockerOnEthereum.sol%60%20and%20%60TokenLockerOnHarmony.sol%60%20is%20the%20proof%20validation.%20%60TokenLockerOnEthereum.sol%60%20uses%20%60.%2Flib%2FMMRVerifier.sol%60%20to%20validate%20the%20%5BMountain%20Merkle%20Ranges%5D(https%3A%2F%2Fgithub.com%2Fopentimestamps%2Fopentimestamps-server%2Fblob%2Fmaster%2Fdoc%2Fmerkle-mountain-range.mdx)%20on%20Harmony%20and%20%60HarmonyProver.sol%60.%20%60TokenLockerOnHarmony.sol%60%20imports%20%60.%2Flib%2FMPTValidatorV2.sol%60%20to%20validate%20%5BMerkle%20Patrica%20Trie%5D(https%3A%2F%2Fethereum.org%2Fen%2Fdevelopers%2Fdocs%2Fdata-structures-and-encoding%2Fpatricia-merkle-trie%2F%23merkle-patricia-trees)%20and%20%60.%2FEthereumLightClient.sol%60._%0A%0A%23%23%23%20MultiChain%20Support%0A%0A1.%20Need%20to%20support%20other%20chains%0A%20%20%20-%20EVM%3A%20BSC%2C%20Polygon%2C%20Avalanche%2C%20Arbitrum%2C%20Optimism%0A%20%20%20-%20Bitcoin%0A%20%20%20-%20NEAR%0A%20%20%20-%20Solana%0A%20%20%20-%20Polkadot%0A%0A%23%23%20Code%20Review%0A%0AThe%20code%20reviewed%20is%20from%20a%20fork%20of%20%5Bharmony-one%2Fhorizon%5D(https%3A%2F%2Fgithub.com%2Fharmony-one%2Fhorizon).%20The%20fork%20is%20%5Bjohnwhitton%2Fhorizon%20branch%20refactorV2%5D(https%3A%2F%2Fgithub.com%2Fjohnwhitton%2Fhorizon%2Ftree%2FrefactorV2).%20This%20is%20part%20of%20the%20horizon%20v2%20initiative%20to%20bride%20a%20trustless%20bridge%20after%20the%20initial%20horizon%20hack.%20The%20code%20is%20incomplete%20and%20the%20original%20codebase%20did%20not%20support%20ethereum%202.0%20(only%20ethereum%201.0).%20Nevertheless%20there%20are%20a%20number%20of%20useful%20components%20developed%20which%20can%20be%20leveraged%20in%20building%20a%20trustless%20bridge.%0A%0A%23%23%20On-chain%20(Solidity)%20Code%20Review%0A%0A_Note%3A%20here%20we%20document%20functionality%20developed%20in%20solidity.%20We%20recommend%20reading%20the%20%5BOpen%20Zeppelin%20Contract%20Documentation%5D(https%3A%2F%2Fdocs.openzeppelin.com%2Fcontracts%2F4.x%2F)%20specifically%20the%20%5Butilities%5D(https%3A%2F%2Fdocs.openzeppelin.com%2Fcontracts%2F4.x%2Futilities)%20have%20a%20number%20of%20utitlies%20we%20leverage%20around%20signing%20and%20proving.%20We%20tend%20to%20utilize%20the%20%5Bopenzeppelin-contracts-upgradeabe%20repository%5D(https%3A%2F%2Fgithub.com%2FOpenZeppelin%2Fopenzeppelin-contracts-upgradeable)%20when%20building%20over%20the%20documented%20%5Bopenzeppelin-contracts%20repository%5D(https%3A%2F%2Fgithub.com%2FOpenZeppelin%2Fopenzeppelin-contracts)%20as%20we%20are%20often%20working%20with%20contracts%20which%20we%20wish%20to%20upgrade%2C%20there%20should%20be%20equivalent%20contracts%20in%20both%20repositories._%0A%0A%23%23%23%20OpenZeppelin%20Utilities%0A%0A-%20%5BUtilities%5D(https%3A%2F%2Fdocs.openzeppelin.com%2Fcontracts%2F4.x%2Fapi%2Futils)%3A%20Miscellaneous%20contracts%20and%20libraries%20containing%20utility%20functions%20you%20can%20use%20to%20improve%20security%2C%20work%20with%20new%20data%20types%2C%20or%20safely%20use%20low-level%20primitives.%0A%20%20-%20%5BMath%5D(https%3A%2F%2Fdocs.openzeppelin.com%2Fcontracts%2F4.x%2Fapi%2Futils%23math)%3A%20Standard%20math%20utilities%20missing%20in%20the%20Solidity%20language.%0A%20%20-%20%5BCryptography%5D(https%3A%2F%2Fdocs.openzeppelin.com%2Fcontracts%2F4.x%2Fapi%2Futils%23cryptography)%0A%20%20%20%20-%20%5BECDSA%5D(https%3A%2F%2Fdocs.openzeppelin.com%2Fcontracts%2F4.x%2Fapi%2Futils%23ECDSA)%3A%20Elliptic%20Curve%20Digital%20Signature%20Algorithm%20(ECDSA)%20operations.%0A%20%20%20%20-%20%5BSignatureChecker%5D(https%3A%2F%2Fdocs.openzeppelin.com%2Fcontracts%2F4.x%2Fapi%2Futils%23SignatureChecker)%3A%20Signature%20verification%20helper%20that%20can%20be%20used%20instead%20of%20ECDSA.recover%20to%20seamlessly%20support%20both%20ECDSA%20signatures%20from%20externally%20owned%20accounts%20(EOAs)%20as%20well%20as%20ERC1271%20signatures%20from%20smart%20contract%20wallets%20like%20Argent%20and%20Gnosis%20Safe.%0A%20%20%20%20-%20%5BMerkleProof%5D(https%3A%2F%2Fdocs.openzeppelin.com%2Fcontracts%2F4.x%2Fapi%2Futils%23MerkleProof)%3A%20These%20functions%20deal%20with%20verification%20of%20Merkle%20Tree%20proofs.%0A%20%20%20%20-%20%5BEIP712%5D(https%3A%2F%2Fdocs.openzeppelin.com%2Fcontracts%2F4.x%2Fapi%2Futils%23EIP712)%3A%20%5BEIP%20712%5D(https%3A%2F%2Feips.ethereum.org%2FEIPS%2Feip-712)%20is%20a%20standard%20for%20hashing%20and%20signing%20of%20typed%20structured%20data.%0A%20%20-%20%5BEscrow%5D(https%3A%2F%2Fdocs.openzeppelin.com%2Fcontracts%2F4.x%2Fapi%2Futils%23escrow)%3A%20Base%20escrow%20contract%2C%20holds%20funds%20designated%20for%20a%20payee%20until%20they%20withdraw%20them.%0A%20%20-%20%5BIntrospection%5D(https%3A%2F%2Fdocs.openzeppelin.com%2Fcontracts%2F4.x%2Fapi%2Futils%23introspection)%3A%20This%20set%20of%20interfaces%20and%20contracts%20deal%20with%20%5Btype%20introspection%5D(https%3A%2F%2Fen.wikipedia.org%2Fwiki%2FType_introspection)%20of%20contracts%2C%20that%20is%2C%20examining%20which%20functions%20can%20be%20called%20on%20them.%20This%20is%20usually%20referred%20to%20as%20a%20contract%E2%80%99s%20_interface_.%0A%20%20-%20%5BData%20Structures%5D(https%3A%2F%2Fdocs.openzeppelin.com%2Fcontracts%2F4.x%2Fapi%2Futils%23data_structures)%0A%20%20%20%20-%20%5BBitMaps%5D(https%3A%2F%2Fdocs.openzeppelin.com%2Fcontracts%2F4.x%2Fapi%2Futils%23BitMaps)%3A%20Library%20for%20managing%20uint256%20to%20bool%20mapping%20in%20a%20compact%20and%20efficient%20way%2C%20providing%20the%20keys%20are%20sequential.%20Largely%20inspired%20by%20Uniswap%E2%80%99s%20%5Bmerkle-distributor%5D(https%3A%2F%2Fgithub.com%2FUniswap%2Fmerkle-distributor%2Fblob%2Fmaster%2Fcontracts%2FMerkleDistributor.sol).%0A%20%20%20%20-%20%5BEnumerableMap%5D(https%3A%2F%2Fdocs.openzeppelin.com%2Fcontracts%2F4.x%2Fapi%2Futils%23EnumerableMap)%3A%20Library%20for%20managing%20an%20enumerable%20variant%20of%20Solidity%E2%80%99s%20%5Bmapping%5D(https%3A%2F%2Fsolidity.readthedocs.io%2Fen%2Flatest%2Ftypes.html%23mapping-types)%20type.%0A%20%20%20%20-%20%5BEnumerableSet%5D(https%3A%2F%2Fdocs.openzeppelin.com%2Fcontracts%2F4.x%2Fapi%2Futils%23EnumerableSet)%3A%20Library%20for%20managing%20%5Bsets%5D(%3Chttps%3A%2F%2Fen.wikipedia.org%2Fwiki%2FSet_(abstract_data_type)%3E)%20of%20primitive%20types.%0A%20%20%20%20-%20%5BDoubleEndedQueue%5D(https%3A%2F%2Fdocs.openzeppelin.com%2Fcontracts%2F4.x%2Fapi%2Futils%23DoubleEndedQueue)%3A%20A%20sequence%20of%20items%20with%20the%20ability%20to%20efficiently%20push%20and%20pop%20items%20(i.e.%20insert%20and%20remove)%20on%20both%20ends%20of%20the%20sequence%20(called%20front%20and%20back).%0A%20%20%20%20-%20%5BCheckpoints%5D(https%3A%2F%2Fdocs.openzeppelin.com%2Fcontracts%2F4.x%2Fapi%2Futils%23Checkpoints)%3A%20This%20library%20defines%20the%20%60History%60%20struct%2C%20for%20checkpointing%20values%20as%20they%20change%20at%20different%20points%20in%20time%2C%20and%20later%20looking%20up%20past%20values%20by%20block%20number.%20See%20%5BVotes%5D(https%3A%2F%2Fdocs.openzeppelin.com%2Fcontracts%2F4.x%2Fapi%2Fgovernance%23Votes)%20as%20an%20example.%0A%20%20-%20%5BLibraries%5D(https%3A%2F%2Fdocs.openzeppelin.com%2Fcontracts%2F4.x%2Fapi%2Fgovernance%23Votes)%0A%20%20%20%20-%20%5BCreate2%5D(https%3A%2F%2Fdocs.openzeppelin.com%2Fcontracts%2F4.x%2Fapi%2Futils%23Create2)%3A%20Helper%20to%20make%20usage%20of%20the%20%60CREATE2%60%20EVM%20opcode%20easier%20and%20safer.%0A%20%20%20%20-%20%5BAddress%5D(https%3A%2F%2Fdocs.openzeppelin.com%2Fcontracts%2F4.x%2Fapi%2Futils%23Address)%3A%20Collection%20of%20functions%20related%20to%20the%20address%20type%0A%20%20%20%20-%20%5BArrays%5D(https%3A%2F%2Fdocs.openzeppelin.com%2Fcontracts%2F4.x%2Fapi%2Futils%23Arrays)%3A%20Collection%20of%20functions%20related%20to%20array%20types.%0A%20%20%20%20-%20%5BBase64%5D(https%3A%2F%2Fdocs.openzeppelin.com%2Fcontracts%2F4.x%2Fapi%2Futils%23Base64)%3A%20Provides%20a%20set%20of%20functions%20to%20operate%20with%20Base64%20strings.%0A%20%20%20%20-%20%5BCounters%5D(https%3A%2F%2Fdocs.openzeppelin.com%2Fcontracts%2F4.x%2Fapi%2Futils%23Counters)%3A%20Provides%20counters%20that%20can%20only%20be%20incremented%2C%20decremented%20or%20reset.%0A%20%20%20%20-%20%5BStrings%5D(https%3A%2F%2Fdocs.openzeppelin.com%2Fcontracts%2F4.x%2Fapi%2Futils%23Strings)%3A%20String%20operations.%0A%20%20%20%20-%20%5BStorageSlot%5D(https%3A%2F%2Fdocs.openzeppelin.com%2Fcontracts%2F4.x%2Fapi%2Futils%23StorageSlot)%3A%20Library%20for%20reading%20and%20writing%20primitive%20types%20to%20specific%20storage%20slots.%20Storage%20slots%20are%20often%20used%20to%20avoid%20storage%20conflict%20when%20dealing%20with%20upgradeable%20contracts.%0A%20%20%20%20-%20%5BMulticall%5D(https%3A%2F%2Fdocs.openzeppelin.com%2Fcontracts%2F4.x%2Fapi%2Futils%23Multicall)%3A%20Provides%20a%20function%20to%20batch%20together%20multiple%20calls%20in%20a%20single%20external%20call.%0A%0A%23%23%23%20Cryptographic%20Primitives%0A%0A-%20%5Bethash%5D(https%3A%2F%2Fgithub.com%2Fjohnwhitton%2Fhorizon%2Ftree%2FrefactorV2%2Fcontracts%2Fethash)%3A%20used%20in%20proving%20ethereum%201.0%20%5Bethash%5D(https%3A%2F%2Fgithub.com%2Fjohnwhitton%2Fhorizon%2Ftree%2FrefactorV2%2Fcontracts%2Fethash)%20proof%20of%20work.%0A%20%20-%20%5BMerkleRoot.sol%5D(https%3A%2F%2Fgithub.com%2Fjohnwhitton%2Fhorizon%2Fblob%2FrefactorV2%2Fcontracts%2Fethash%2FMerkelRoot.sol)%3A%20provides%20the%20ability%20to%20getRootHash%20for%20a%20given%20epoch.%20Needs%20to%20be%20initialized%20with%20a%20start%20and%20end%20epoch%20and%20an%20initial%20merkle%20root.%0A%20%20-%20%5BPrime.sol%5D(https%3A%2F%2Fgithub.com%2Fjohnwhitton%2Fhorizon%2Fblob%2FrefactorV2%2Fcontracts%2Fethash%2FPrime.sol)%3A%20Determins%20if%20a%20number%20is%20likely%20to%20be%20prime%2C%20based%20on%20the%20%5BMiller-Rabin%20primality%20test%5D(https%3A%2F%2Fen.wikipedia.org%2Fwiki%2FMiller%25E2%2580%2593Rabin_primality_test)%0A%20%20-%20%5Bbinary.sol%5D(https%3A%2F%2Fgithub.com%2Fjohnwhitton%2Fhorizon%2Fblob%2FrefactorV2%2Fcontracts%2Fethash%2Fbinary.sol)%3A%20Binary%20number%20manipulation.%0A%20%20-%20%5Bethash.sol%5D(https%3A%2F%2Fgithub.com%2Fjohnwhitton%2Fhorizon%2Fblob%2FrefactorV2%2Fcontracts%2Fethash%2Fethash.sol)%3A%20Provides%20the%20ability%20to%20verifyHash%20using%20a%20%5Bhashimto%20function%5D(https%3A%2F%2Fethereum.org%2Fen%2Fdevelopers%2Fdocs%2Fconsensus-mechanisms%2Fpow%2Fmining-algorithms%2Fdagger-hashimoto%2F)%20and%20%5Bfnv%20hashing%5D(https%3A%2F%2Fen.wikipedia.org%2Fwiki%2FFowler%25E2%2580%2593Noll%25E2%2580%2593Vo_hash_function).%0A%20%20-%20%5Bkecakk512.sol%5D(https%3A%2F%2Fgithub.com%2Fjohnwhitton%2Fhorizon%2Fblob%2FrefactorV2%2Fcontracts%2Fethash%2Fkeccak512.sol)%3A%20Keccak512%20hash%20function%20supporting%20%5BSHA-3%5D(https%3A%2F%2Fen.wikipedia.org%2Fwiki%2FSHA-3).%0A-%20%5Blib%5D(https%3A%2F%2Fgithub.com%2Fjohnwhitton%2Fhorizon%2Ftree%2FrefactorV2%2Fcontracts%2Flib)%3A%20utility%20library%0A%20%20-%20%5BECVerify.sol%5D(https%3A%2F%2Fgithub.com%2Fjohnwhitton%2Fhorizon%2Fblob%2FrefactorV2%2Fcontracts%2Flib%2FECVerify.sol)%3A%20Verify's%20a%20signature%20and%20returns%20the%20signer%20address.%0A%20%20-%20%5BEthUtils%5D(https%3A%2F%2Fgithub.com%2Fjohnwhitton%2Fhorizon%2Fblob%2FrefactorV2%2Fcontracts%2Flib%2FEthUtils.sol)%3A%20hexString%20and%20byte%20manipulation%0A%20%20-%20%5BMMR.sol%5D(https%3A%2F%2Fgithub.com%2Fjohnwhitton%2Fhorizon%2Fblob%2FrefactorV2%2Fcontracts%2Flib%2FMMR.sol)%3A%20Merkle%20Mountain%20Range%20solidity%20library%0A%20%20-%20%5BMMRWrapper.sol%5D(https%3A%2F%2Fgithub.com%2Fjohnwhitton%2Fhorizon%2Fblob%2FrefactorV2%2Fcontracts%2Flib%2FMMRWrapper.sol)%3A%20Merkle%20Mountain%20Range%20wrapper%20functions.%0A%20%20-%20%5BMPT.sol%5D(https%3A%2F%2Fgithub.com%2Fjohnwhitton%2Fhorizon%2Fblob%2FrefactorV2%2Fcontracts%2Flib%2FMPT.sol)%3A%20Merkle%20Patricie%20Tries%20validation%20tools%20(uses%20RLPReader.sol)%0A%20%20-%20%5BMPTValidatorV2.sol%5D(https%3A%2F%2Fgithub.com%2Fjohnwhitton%2Fhorizon%2Fblob%2FrefactorV2%2Fcontracts%2Flib%2FMPTValidatorV2.sol)%3A%20Merkle%20Particia%20Tries%20validation%20tools%20improved%20by%20LayerZero%0A%20%20-%20%5BRLPEncode.sol%5D(https%3A%2F%2Fgithub.com%2Fjohnwhitton%2Fhorizon%2Fblob%2FrefactorV2%2Fcontracts%2Flib%2FRLPEncode.sol)%3A%20A%20simple%20RLP%20encoding%20library.%0A%20%20-%20%5BRLPReader.sol%5D(https%3A%2F%2Fgithub.com%2Fjohnwhitton%2Fhorizon%2Fblob%2FrefactorV2%2Fcontracts%2Flib%2FRLPReader.sol)%3A%20RLP%20Reader%0A%20%20-%20%5BSafecast.sol%5D(https%3A%2F%2Fgithub.com%2Fjohnwhitton%2Fhorizon%2Fblob%2FrefactorV2%2Fcontracts%2Flib%2FSafeCast.sol)%3A%20Safe%20casting%20function%20for%20Uints.%0A%0A%23%23%23%20Proving%20Mechanisms%0A%0A**Ethereum%201.0%20contracts%20deployed%20to%20Harmony**%0A%0A-%20%5BEthereumLightClient.sol%5D(https%3A%2F%2Fgithub.com%2Fjohnwhitton%2Fhorizon%2Fblob%2FrefactorV2%2Fcontracts%2FEthereumLightClient.sol)%3A%20Light%20Client%20for%20Ethereum%201.0%2C%20stores%20a%20mapping%20of%20blocks%20existing%20in%20the%20Canonical%20Chain%20verified%20using%20EthHash.%0A-%20%5BEthereumParser.sol%5D(https%3A%2F%2Fgithub.com%2Fjohnwhitton%2Fhorizon%2Fblob%2FrefactorV2%2Fcontracts%2FEthereumParser.sol)%3A%20Parse%20RLP-encoded%20block%20header%20into%20BlockHeader%20data%20structure%20and%20transactions%20with%20data%20fields%20order%20as%20defined%20in%20the%20Tx%20struct.%0A-%20%5BEthereumProver.sol%5D(https%3A%2F%2Fgithub.com%2Fjohnwhitton%2Fhorizon%2Fblob%2FrefactorV2%2Fcontracts%2FEthereumProver.sol)%3A%20Computes%20the%20hash%20of%20the%20Merkle-Patricia-Trie%20hash%20of%20the%20input%20and%20Validates%20a%20Merkle-Patricia-Trie%20proof.%20If%20the%20proof%20proves%20the%20inclusion%20of%20some%20key-value%20pair%20in%20the%20trie%2C%20the%20value%20is%20returned.%0A%0A**Harmony%20contracts%20deployed%20to%20Ethereum%201.0**%0A%0A_Note%20these%20contracts%20were%20planned%20to%20be%20implemented%20with%20Harmony%20Light%20Client%20support%20which%20includes%20Merkle%20Mountain%20Ranges%20(see%20this%20%5BPR%5D(https%3A%2F%2Fgithub.com%2Fharmony-one%2Fharmony%2Fpull%2F3872)%20and%20this%20%5Breview%5D(..%2Fchains%2Fharmony%23light-client-support)).%20The%20planned%20timeline%20for%20implementing%20this%20had%20not%20been%20finalized%20as%20of%20Feb%202023._%0A%0A-%20%5BHarmonyLightClient.sol%5D(https%3A%2F%2Fgithub.com%2Fjohnwhitton%2Fhorizon%2Fblob%2FrefactorV2%2Fcontracts%2FHarmonyLightClient.sol)%3A%20Allows%20submission%20of%20checkpoints%20and%20manages%20mappings%20for%20%60checkPointBlocks%60%20(holding%20blockHeader%20information%20including%20the%20Merkle%20Mountain%20Range%20Root%20field%20%60mmrRoot%60).%0A-%20%5BHarmonyParser.sol%5D(https%3A%2F%2Fgithub.com%2Fjohnwhitton%2Fhorizon%2Fblob%2FrefactorV2%2Fcontracts%2FHarmonyParser.sol)%3A%20Parse%20RLP-encoded%20block%20header%20into%20BlockHeader%20data%20structure%20and%20transactions%20with%20data%20fields%20order%20as%20defined%20in%20the%20Transaction%20struct.%0A-%20%5BHarmonyProver.sol%5D(https%3A%2F%2Fgithub.com%2Fjohnwhitton%2Fhorizon%2Fblob%2FrefactorV2%2Fcontracts%2FHarmonyProver.sol)%3A%20Verification%20functions%20for%20Blocks%2C%20Transaction%2C%20Receipts%20etc.%20Verification%20is%20done%20by%20verifying%20MerkleProofs%20via%20%60MPTValidator2.sol%60.%0A%0A%23%23%23%20Token%20Lockers%0A%0A-%20%5BBridgeToken.sol%5D(https%3A%2F%2Fgithub.com%2Fjohnwhitton%2Fhorizon%2Fblob%2FrefactorV2%2Fcontracts%2FBridgedToken.sol)%3A%20ERC20%20contract%20used%20for%20managing%20bridged%20tokens.%0A-%20%5BFaucetToken.sol%5D(https%3A%2F%2Fgithub.com%2Fjohnwhitton%2Fhorizon%2Fblob%2FrefactorV2%2Fcontracts%2FFaucetToken.sol)%3A%20ERC20%20Token%20Faucet%20used%20for%20testing%20on%20testnets.%0A-%20%5BTokenLocker.sol%5D(https%3A%2F%2Fgithub.com%2Fjohnwhitton%2Fhorizon%2Fblob%2FrefactorV2%2Fcontracts%2FTokenLocker.sol)%3A%20Locks%20Bridged%20Tokens%0A-%20%5BTokenLockerOnEthereum.sol%5D(https%3A%2F%2Fgithub.com%2Fjohnwhitton%2Fhorizon%2Fblob%2FrefactorV2%2Fcontracts%2FTokenLockerOnEthereum.sol)%3A%20Ethereum%20TokenLocker%0A-%20%5BTokenLockerOnHarmony.sol%5D(https%3A%2F%2Fgithub.com%2Fjohnwhitton%2Fhorizon%2Fblob%2FrefactorV2%2Fcontracts%2FTokenLockerOnHarmony.sol)%3A%20Harmony%20TokenLocker%0A-%20%5BTokenRegistry.sol%5D(https%3A%2F%2Fgithub.com%2Fjohnwhitton%2Fhorizon%2Fblob%2FrefactorV2%2Fcontracts%2FTokenRegistry.sol)%3A%20Responsible%20for%20mapping%20tokens%20between%20chains%20and%20minting%20new%20bridged%20tokens.%0A%0A%23%23%20Off-chain%20(Javascript)%20Code%20Review%0A%0A%23%23%23%20On-chain%20interaction%0A%0A-%20%5Bbridge%5D(https%3A%2F%2Fgithub.com%2Fjohnwhitton%2Fhorizon%2Ftree%2FrefactorV2%2Fsrc%2Fbridge)%0A%20%20-%20%5Bbridge.js%5D(https%3A%2F%2Fgithub.com%2Fjohnwhitton%2Fhorizon%2Fblob%2FrefactorV2%2Fsrc%2Fbridge%2Fbridge.js)%3A%20Interacts%20with%20provers%20and%20tokenLockers%20on%20the%20respective%20chains%20to%20perform%20the%20bridging%20of%20tokens%20across%20chains.%0A%20%20-%20%5Bcontract.js%5D(https%3A%2F%2Fgithub.com%2Fjohnwhitton%2Fhorizon%2Fblob%2FrefactorV2%2Fsrc%2Fbridge%2Fcontract.js)%3A%20Responsible%20for%20deploying%20contracts%2C%20mapping%20tokens%20between%20chains%20and%20checking%20token%20status.%0A%20%20-%20%5BethBridge.js%5D(https%3A%2F%2Fgithub.com%2Fjohnwhitton%2Fhorizon%2Fblob%2FrefactorV2%2Fsrc%2Fbridge%2FethBridge.js)%3A%20extends%20bridge.js%20with%20a%20constructor%20for%20Ethereum%0A%20%20-%20%5BhmyBridge.js%5D(https%3A%2F%2Fgithub.com%2Fjohnwhitton%2Fhorizon%2Fblob%2FrefactorV2%2Fsrc%2Fbridge%2FhmyBridge.js)%3A%20extens%20bridge.js%20with%20a%20constructor%20for%20Harmony%0A%20%20-%20%5Btoken.js%5D(https%3A%2F%2Fgithub.com%2Fjohnwhitton%2Fhorizon%2Fblob%2FrefactorV2%2Fsrc%2Fbridge%2Ftoken.js)%3A%20interacts%20with%20ERC20%20and%20FaucetToken%20(for%20testing).%0A%20%20-%20%5Bindex.js%5D(https%3A%2F%2Fgithub.com%2Fjohnwhitton%2Fhorizon%2Fblob%2FrefactorV2%2Fsrc%2Fcli%2Findex.js)%3A%20Command%20Line%20Interface%20commands.%0A%0A%23%23%23%20Command%20Line%20Interface%0A%0A-%20%5Bcli%5D(https%3A%2F%2Fgithub.com%2Fjohnwhitton%2Fhorizon%2Ftree%2FrefactorV2%2Fsrc%2Fcli)%3A%20CLI%20is%20a%20utility%20that%20provides%20a%20command-line%20interface%20to%20all%20the%20components%20to%20the%20Horizon%20bridge%20and%20allow%20performing%20end-to-end%20bridge%20functionalities.%0A%20%20-%20%5Belsc.js%5D(https%3A%2F%2Fgithub.com%2Fjohnwhitton%2Fhorizon%2Fblob%2FrefactorV2%2Fsrc%2Fcli%2Felc.js)%3A%20Ethereum%20Light%20Client%20deployed%20on%20Harmony.%20Supports%20deployment%2C%20status%20checks%20and%20querying%20block%20information.%0A%20%20-%20%5BethRelay.js%5D(https%3A%2F%2Fgithub.com%2Fjohnwhitton%2Fhorizon%2Fblob%2FrefactorV2%2Fsrc%2Fcli%2FethRelay.js)%3A%20Block%20Relayer%20from%20Ethereum%20to%20Harmony%0A%20%20-%20%5Beverifier.js%5D(https%3A%2F%2Fgithub.com%2Fjohnwhitton%2Fhorizon%2Fblob%2FrefactorV2%2Fsrc%2Fcli%2Feverifier.js)%3A%20Ethereum%20Verifier%20for%20Harmony.%20Supports%20the%20deployment%20of%20the%20verifier%20and%20validating%20Merkle%20Patricia%20Trie%20proofs%20from%20Harmony.%0A%20%20-%20%5Bindex.js%5D(https%3A%2F%2Fgithub.com%2Fjohnwhitton%2Fhorizon%2Fblob%2FrefactorV2%2Fsrc%2Fcli%2Findex.js)%3A%20Commands%20for%20the%20CLI.%0A%0A%23%23%23%20Ethereum%20Light%20Client%0A%0A-%20%5Belc%5D(https%3A%2F%2Fgithub.com%2Fjohnwhitton%2Fhorizon%2Fblob%2FrefactorV2%2Fsrc%2Felc%2FREADME.mdx)%3A%20Ethereum%20Light%20Client%20(ELC)%20is%20a%20SPV-based%20light%20client%20implemented%20as%20a%20smart%20contract%20that%20receives%20and%20stores%20Ethereum%20block%20header%20information.%0A%20%20-%20%5BMerkleRoot.json%5D(https%3A%2F%2Fgithub.com%2Fjohnwhitton%2Fhorizon%2Fblob%2FrefactorV2%2Fsrc%2Felc%2FMerkelRoot.json)%3A%20Holds%20starting%20epoch%20and%20Merkle%20root%20information.%0A%20%20-%20%5BMerkleRootSol.js%5D(https%3A%2F%2Fgithub.com%2Fjohnwhitton%2Fhorizon%2Fblob%2FrefactorV2%2Fsrc%2Felc%2FMerkelRootSol.js)%3A%20Deploys%20a%20MerkleRoot.sol%20contract%20on%20Harmony%20for%20the%20given%20Ethereum%20epoch%20and%20merkle%20root%20information.%0A%20%20-%20%5Bclient.js%5D(https%3A%2F%2Fgithub.com%2Fjohnwhitton%2Fhorizon%2Fblob%2FrefactorV2%2Fsrc%2Felc%2Fclient.js)%3A%20Interaction%20with%20the%20Client.sol%20(the%20Ethereum%20Light%20Client%20deployed%20on%20Harmony).%0A%20%20-%20%5Beth2one.js%5D(https%3A%2F%2Fgithub.com%2Fjohnwhitton%2Fhorizon%2Fblob%2FrefactorV2%2Fsrc%2Felc%2Feth2one-relay.js)%3A%20Relays%20blocks%20from%20ethereum%20to%20Harmony.%0A%20%20-%20%5BproofDump%5D(https%3A%2F%2Fgithub.com%2Fjohnwhitton%2Fhorizon%2Fblob%2FrefactorV2%2Fsrc%2Felc%2FproofDump.js)%3A%20Allows%20logging%20of%20dagProofs%20for%20blocks%20and%20epochs%20and%20writing%20them%20to%20files.%0A%0A%23%23%23%20Proving%20Mechanisms%0A%0A**Ethereum%20Prover**%0A%0A-%20%5Beprover%5D(https%3A%2F%2Fgithub.com%2Fjohnwhitton%2Fhorizon%2Ftree%2FrefactorV2%2Fsrc%2Feprover)%3A%20EProver%20is%20a%20utility%20that%20provides%20verifiable%20proof%20about%20user%E2%80%99s%20Ethereum%20tx%2C%20e.g.%2C%20lock%20tx.%0A%20%20-%20%5BReceipt.js%5D(https%3A%2F%2Fgithub.com%2Fjohnwhitton%2Fhorizon%2Fblob%2FrefactorV2%2Fsrc%2Feprover%2FReceipt.js)%3A%20Allows%20retreival%20of%20a%20receipt%20from%20Rpc%2C%20buffer%20or%20hex%20and%20serailiation%20of%20receipt.%0A%20%20-%20%5Bindex.js%5D(https%3A%2F%2Fgithub.com%2Fjohnwhitton%2Fhorizon%2Fblob%2FrefactorV2%2Fsrc%2Feprover%2Findex.js)%3A%20exports%20Eprover%0A%20%20-%20%5BtxProof.js%5D(https%3A%2F%2Fgithub.com%2Fjohnwhitton%2Fhorizon%2Fblob%2FrefactorV2%2Fsrc%2Feprover%2FtxProof.js)%3A%20Takes%20a%20transaction%20hash%20and%20gets%20a%20receipt%20proof%20(sha3%20hash%2C%20recieptRoor%2C%20proof%20and%20an%20encoded%20txIndex).%0A%0A%23%23%23%20Relayer%20Mechanisms%0A%0A**Ethereum%20to%20Harmony%20Relayer**%0A%0A-%20%5Beth2hmy-relay%5D(https%3A%2F%2Fgithub.com%2Fjohnwhitton%2Fhorizon%2Ftree%2FrefactorV2%2Fsrc%2Feth2hmy-relay)%3A%20Eth2Hmy%20relay%20downloads%20the%20Ethereum%20block%20headers%2C%20extract%20information%20and%20relay%20it%20to%20ELC%20smart%20contract%20on%20Harmony.%0A%20%20-%20%5Bindex.js%5D(https%3A%2F%2Fgithub.com%2Fjohnwhitton%2Fhorizon%2Fblob%2FrefactorV2%2Fsrc%2Feth2hmy-relay%2Findex.js)%3A%20exports%20%60DagProof%60%20and%20%60getBlockByNumber%60.%0A%20%20-%20%5Bethash%5D(https%3A%2F%2Fgithub.com%2Fjohnwhitton%2Fhorizon%2Ftree%2FrefactorV2%2Fsrc%2Feth2hmy-relay%2Fethash)%0A%20%20%20%20-%20%5Bindex.js%5D(https%3A%2F%2Fgithub.com%2Fjohnwhitton%2Fhorizon%2Fblob%2FrefactorV2%2Fsrc%2Feth2hmy-relay%2Fethash%2Fdist%2Findex.js)%3A%20Loads%20the%20epoch%20seed%20and%20cache%20given%20a%20block%20number%20and%20uses%20this%20to%20verify%20Proof%20of%20Work%20for%20headers%20and%20blocks.%0A%20%20%20%20-%20%5Butil.js%5D(https%3A%2F%2Fgithub.com%2Fjohnwhitton%2Fhorizon%2Fblob%2FrefactorV2%2Fsrc%2Feth2hmy-relay%2Fethash%2Fdist%2Futil.js)%3A%20Utilities%20for%20epochs%20including%20caching%2C%20hashing%20and%20retreival%20of%20seeds%20and%20buffers.%0A%0A%23%23%23%20Cryptographic%20Primitives%0A%0A-%20%5Beth2hmy-relay%2Flib%5D(https%3A%2F%2Fgithub.com%2Fjohnwhitton%2Fhorizon%2Ftree%2FrefactorV2%2Fsrc%2Feth2hmy-relay%2Flib)%3A%20Library%20of%20functions%20used%20by%20the%20Ethereum%20to%20Harmony%20Relay%0A%20%20-%20%5BDagPropf.js%5D(https%3A%2F%2Fgithub.com%2Fjohnwhitton%2Fhorizon%2Fblob%2FrefactorV2%2Fsrc%2Feth2hmy-relay%2Flib%2FDagProof.js)%3A%20Checks%20if%20a%20dag%20exists%20for%20an%20epoch%2C%20loads%20DAG%20for%20an%20epoch%20and%20verify%20header%20and%20getProof%20using%20the%20epoch's%20DAG.%0A%20%20-%20%5BMmapDB.js%5D(https%3A%2F%2Fgithub.com%2Fjohnwhitton%2Fhorizon%2Fblob%2FrefactorV2%2Fsrc%2Feth2hmy-relay%2Flib%2FMmapDB.js)%3A%20Merkle%20database%20functionality%20by%20extending%20Memory%20Map.%0A%20%20-%20%5BgetBlockHeader.js%5D(https%3A%2F%2Fgithub.com%2Fjohnwhitton%2Fhorizon%2Fblob%2FrefactorV2%2Fsrc%2Feth2hmy-relay%2Flib%2FgetBlockHeader.js)%3A%20Get%20Block%20information.%0A%20%20-%20%5Bmerkel.js%5D(https%3A%2F%2Fgithub.com%2Fjohnwhitton%2Fhorizon%2Fblob%2FrefactorV2%2Fsrc%2Feth2hmy-relay%2Flib%2Fmerkel.js)%3A%20MerkleTree%20functionality%20including%20construction%20of%20MerkleTrees%20and%20getting%20proofs%2C%20hex%20proofs%2C%20combined%20hashes%2C%20get%20Paired%20Elements%20and%20layers.%0A-%20%5BethashProof%5D(https%3A%2F%2Fgithub.com%2Fjohnwhitton%2Fhorizon%2Ftree%2FrefactorV2%2Fsrc%2FethashProof)%3A%20ethash%20proving%20mechanisms%0A%20%20-%20%5BBlockProof.js%5D(https%3A%2F%2Fgithub.com%2Fjohnwhitton%2Fhorizon%2Fblob%2FrefactorV2%2Fsrc%2FethashProof%2FBlockProof.js)%3A%20Exports%20getHeaderProof%2C%20parseRlpHeader%2C%20getBlockByNumber%0A%20%20-%20%5BDagMTreeEpoch.js%5D(https%3A%2F%2Fgithub.com%2Fjohnwhitton%2Fhorizon%2Fblob%2FrefactorV2%2Fsrc%2FethashProof%2FDagMtreeEpoch.js)%3A%20Exports%20generateDagMTree%2C%20genearateDagMTreeRange%0A%20%20-%20%5BMerkelRootSol.js%5D(https%3A%2F%2Fgithub.com%2Fjohnwhitton%2Fhorizon%2Fblob%2FrefactorV2%2Fsrc%2FethashProof%2FMerkelRootSol.js)%3A%20Creates%20a%20MerkleRoot.sol%20contract%20for%20an%20inputted%20merkleInfo.%0A-%20%5Blib%5D(https%3A%2F%2Fgithub.com%2Fjohnwhitton%2Fhorizon%2Ftree%2FrefactorV2%2Fsrc%2Flib)%0A%20%20-%20%5Bconfigure.js%5D(https%3A%2F%2Fgithub.com%2Fjohnwhitton%2Fhorizon%2Fblob%2FrefactorV2%2Fsrc%2Flib%2Fconfigure.js)%3A%20Configure%20TokenLocker%20and%20Faucet%20contracts.%0A%20%20-%20%5BethEthers.js%5D(https%3A%2F%2Fgithub.com%2Fjohnwhitton%2Fhorizon%2Fblob%2FrefactorV2%2Fsrc%2Flib%2FethEthers.js)%3A%20Shim%20over%20%5Bethers%5D(https%3A%2F%2Fwww.npmjs.com%2Fpackage%2Fethers)%20allowing%20the%20instantiation%20of%20connections%20using%20a%20configured%20private%20key.%0A%20%20-%20%5Blogger.js%5D(https%3A%2F%2Fgithub.com%2Fjohnwhitton%2Fhorizon%2Fblob%2FrefactorV2%2Fsrc%2Flib%2Flogger.js)%3A%20Logging%20Functions%0A%20%20-%20%5Butils.ts%5D(https%3A%2F%2Fgithub.com%2Fjohnwhitton%2Fhorizon%2Fblob%2FrefactorV2%2Fsrc%2Flib%2Futils.ts)%3A%20Utility%20functions%20including%20(buffer2hex%2C%20rpcWrapper%2C%20toRLPHeader%2C%20getReceiptLight%2C%20getReceipt%2C%20getReceiptRlp%2C%20getReceiptTrie%2Chex2key%2Cindex2key%2C%20expandkey%2C%20getReceiptProof%2C%20getTransactionProof%2C%20getAccountProof%2C%20getStorageProof%2C%20getKeyFromProof%2C%20fullToMin)%0A%0A**npm%20packages**%0A%0A-%20%5B%40ethereumjs%2Fblock%5D(https%3A%2F%2Fwww.npmjs.com%2Fpackage%2F%40ethereumjs%2Fblock)%3A%20Implements%20schema%20and%20functions%20related%20to%20Ethereum's%20block.%20(Ethereum%201.0%20or%20Execution%20Chain%20for%20Ethereum%202.0)%0A-%20%5Bethereumjs-util%5D(https%3A%2F%2Fwww.npmjs.com%2Fpackage%2Fethereumjs-util)%3A%20A%20collection%20of%20utility%20functions%20for%20Ethereum.%20It%20can%20be%20used%20in%20Node.js%20and%20in%20the%20browser%20with%20browserify.%0A-%20%5Bethers%5D(https%3A%2F%2Fwww.npmjs.com%2Fpackage%2Fethers)%3A%20A%20complete%2C%20compact%20and%20simple%20library%20for%20Ethereum%20and%20ilk%2C%20written%20in%20TypeScript.%0A-%0A-%20%5Bmiller-rabin%5D(https%3A%2F%2Fwww.npmjs.com%2Fpackage%2Fmiller-rabin)%3A%20implements%20%5BMiller%20Rabin%20primality%20test%5D(https%3A%2F%2Fen.wikipedia.org%2Fwiki%2FMiller%25E2%2580%2593Rabin_primality_test)%0A-%20%5Bmmap-io%5D(https%3A%2F%2Fwww.npmjs.com%2Fpackage%2Fmmap-io)%3A%20Memory%20Map%20for%20node.js%0A-%20%5Bsha3%5D(https%3A%2F%2Fwww.npmjs.com%2Fpackage%2Fsha3)%3A%20A%20pure%20JavaScript%20implementation%20of%20the%20Keccak%20family%20of%20cryptographic%20hashing%20algorithms%2C%20most%20notably%20including%20Keccak%20and%20SHA3.%0A-%0A%0A%23%23%23%20Light%20Client%20Functionality%0A%0A%23%23%23%20Token%20Lockers%0A%0A%23%23%20References%0A%0A%23%23%20Appendices%0A%0A%23%23%23%20Appendix%20A%3A%20Current%20Implementation%20Walkthough%0A%0AFollowing%20is%20a%20detailed%20walk%20though%20of%20the%20current%20implementation%20of%20the%20Ethereum%20Light%20Client%20and%20the%20flow%20for%20mapping%20tokens%20from%20Ethereum%20to%20Harmony.%0A%0A%23%23%23%23%20Ethereum%20Light%20Client%20(on%20Harmony)%0A%0A**Design**%0AExisting%20Design%0A%0A1.%20DAG%20is%20generated%20for%20each%20Ethereum%20EPOCH%3A%20This%20takes%20a%20couple%20of%20hours%20and%20has%20a%20size%20of%20approx%201GB.%0A2.%20Relayer%20is%20run%20to%20replicate%20each%20block%20header%20to%20the%20SPV%20Client%20on%20Harmony.%0A3.%20EthereumLightClient.sol%20addBlockHeader%3A%20Adds%20each%20block%20header%20to%20the%20Ethereum%20Light%20Client.%0A4.%20Transactions%20are%20Verified%0A%0A**Running%20the%20Relayer**%0A%0A%60%60%60%0A%23%20Start%20the%20relayer%20(note%3A%20replace%20the%20etherum%20light%20client%20address%20below)%0A%23%20relay%20%5Boptions%5D%20%3CethUrl%3E%20%3ChmyUrl%3E%20%3CelcAddress%3E%20%20%20relay%20eth%20block%20header%20to%20elc%20on%20hmy%0A%20yarn%20cli%20ethRelay%20relay%20http%3A%2F%2Flocalhost%3A8645%20http%3A%2F%2Flocalhost%3A9500%200x3Ceb74A902dc5fc11cF6337F68d04cB834AE6A22%0A%60%60%60%0A%0A**Implementation**%0A%0A1.%20DAG%20Generation%20can%20be%20done%20explicity%20by%20calling%20%60dagProve%60%20from%20the%20CLI%20or%20it%20is%20done%20automatically%20by%20%60getHeaderProof%60%20in%20%60ethHashProof%2FBlockProof.js%60%20which%20is%20called%20from%20%60blockRelay%60%20in%20%60cli%2FethRelay.js%60.%0A2.%20Relaying%20of%20Block%20Headers%20is%20done%20by%20%60blockRelayLoop%60%20in%20%60cli%2FethRelay.js%60%20which%0A%20%20%20-%20Reads%20the%20last%20block%20header%20from%20EthereumLightClient.sol%0A%20%20%20-%20Loops%20through%20calling%20an%20Ethereum%20RPC%20per%20block%20to%20retrieve%20the%20blockHeader%20using%20%60return%20eth.getBlock(blockNo).then(fromRPC)%60%20in%20function%20%60getBlockByNumber%60%20in%20%60eth2hmy-relay%2FgetBlockHeader.js%60%0A3.%20Adding%20BlockHeaders%20is%20done%20by%20%60await%20elc.addBlockHeader(rlpHeader%2C%20proofs.dagData%2C%20proofs.proofs)%60%20which%20is%20called%20from%20%60cli%2FethRelay.js%60.%20%60addBlockHeader%60%20in%20%60EthereumLightClient.sol%60%0A%20%20%20-%20calculates%20the%20blockHeader%20Hash%0A%20%20%20-%20and%20checks%20that%20it%0A%20%20%20%20%20-%20hasn't%20already%20been%20relayed%2C%0A%20%20%20%20%20-%20is%20the%20next%20block%20to%20be%20added%2C%0A%20%20%20%20%20-%20has%20a%20valid%20timestamp%0A%20%20%20%20%20-%20has%20a%20valid%20difficulty%0A%20%20%20%20%20-%20has%20a%20valid%20Proof%20of%20Work%20(POW)%0A%20%20%20-%20Check%20if%20the%20canonical%20chain%20needs%20to%20be%20replaced%20by%20another%20fork%0A%0A%23%23%23%20Mapping%20Tokens%20(Ethereum%20to%20Harmony)%0A%0A**Design**%0A%0A1.%20If%20the%20Token%20Has%20not%20already%20been%20mapped%20on%20Harmony%0A%20%20%20-%20Harmony%3A%20Create%20an%20ERC20%20Token%0A%20%20%20-%20Harmony%3A%20Map%20the%20Ethereum%20Token%20to%20the%20new%20ERC20%20Contract%0A%20%20%20-%20Ethereum%3A%20Validate%20the%20Harmony%20Mapping%20Transaction%0A%20%20%20-%20Ethereum%3A%20Map%20the%20Harmony%20ERC20%20token%20to%20the%20existing%20Ethereum%20Token%0A%20%20%20-%20Harmony%3A%20Validate%20the%20Ethereum%20mapping%20Transaction%0A%0A_Note%3A%20The%20key%20difference%20between%20%60TokenLockerOnEthereum.sol%60%20and%20%60TokenLockerOnHarmony.sol%60%20is%20the%20proof%20validation.%20%60TokenLockerOnEthereum.sol%60%20uses%20%60.%2Flib%2FMMRVerifier.sol%60%20to%20validate%20the%20%5BMountain%20Merkle%20Ranges%5D(https%3A%2F%2Fgithub.com%2Fopentimestamps%2Fopentimestamps-server%2Fblob%2Fmaster%2Fdoc%2Fmerkle-mountain-range.mdx)%20on%20Harmony%20and%20%60HarmonyProver.sol%60.%20%60TokenLockerOnHarmony.sol%60%20imports%20%60.%2Flib%2FMPTValidatorV2.sol%60%20to%20validate%20%5BMerkle%20Patrica%20Trie%5D(https%3A%2F%2Fethereum.org%2Fen%2Fdevelopers%2Fdocs%2Fdata-structures-and-encoding%2Fpatricia-merkle-trie%2F%23merkle-patricia-trees)%20and%20%60.%2FEthereumLightClient.sol%60._%0A%0A_Note%3A%20%60validateAndExecuteProof%60%20is%20responsible%20for%20creation%20of%20the%20BridgeTokens%20on%20the%20destination%20chain%20it%20does%20this%20by%20calling%20%60execute%60%20call%20in%20%60TokenLockerLocker.sol%60%20which%20then%20calls%20the%20function%20%60onTokenMapReqEvent%60%20in%20%60TokenRegistry.sol%60%20which%20creates%20a%20new%20Bridge%20Token%20%60BridgedToken%20mintAddress%20%3D%20new%20BridgedToken%7Bsalt%3A%20salt%7D()%3B%60%20and%20then%20initializes%20it.%20This%20uses%20%5B(RLP)%20Serialization%5D(https%3A%2F%2Fethereum.org%2Fen%2Fdevelopers%2Fdocs%2Fdata-structures-and-encoding%2Frlp%2F)_%0A%0A_Note%3A%20The%20shims%20in%20%60ethWeb3.js%60%20provide%20simplified%20functions%20for%20%60ContractAt%60%2C%20%60ContractDeploy%60%2C%20%60sendTx%60%20and%20%60addPrivateKey%60%20and%20have%20a%20constructor%20which%20uses%20%60process.env.PRIVATE_KEY%60._%0A%0A**Mapping%20the%20Tokens**%0A%0A%60%60%60%0A%23%20Map%20the%20Tokens%0A%23%20map%20%3CethUrl%3E%20%3CethBridge%3E%20%3ChmyUrl%3E%20%3ChmyBridge%3E%20%3Ctoken%3E%0Ayarn%20cli%20Bridge%20map%20http%3A%2F%2Flocalhost%3A8645%200x017f8C7d1Cb04dE974B8aC1a6B8d3d74bC74E7E1%20http%3A%2F%2Flocalhost%3A9500%200x017f8C7d1Cb04dE974B8aC1a6B8d3d74bC74E7E1%200x4e59AeD3aCbb0cb66AF94E893BEE7df8B414dAB1%0A%60%60%60%0A%0A**Implementation**%0A%0A-%20The%20CLI%20calls%20%60tokenMap%60%20in%20%60src%2Fbridge%2Fcontract.js%60%20to%0A%20%20-%20Instantiate%20the%20Ethereum%20Bridge%20and%20Harmony%20Bridge%20Contracts%0A%20%20-%20Calls%20%60TokenMap%60%20in%20%60scr%2Fbridge%2Fbridge.js%60%20to%0A%20%20%20%20-%20Issue%20a%20token%20Map%20request%20on%20Ethereum%20%60const%20mapReq%20%3D%20await%20src.IssueTokenMapReq(token)%60%0A%20%20%20%20-%20Acknowledge%20the%20Map%20Request%20on%20Harmony%20%60const%20mapAck%20%3D%20await%20Bridge.CrossRelayEthHmy(src%2C%20dest%2C%20mapReq)%60%0A%20%20%20%20-%20Issue%20a%20token%20Map%20request%20on%20Harmony%20%60return%20Bridge.CrossRelayHmyEth(dest%2C%20src%2C%20mapAck.transactionHash)%60%0A%0A**Here%20is%20the%20Logic%20(call%20execution%20overview)%20when%20Mapping%20Tokens%20across%20Chains.%20_NOTE%3A%20Currently%20mapping%20has%20only%20been%20developed%20from%20Ethereum%20to%20Harmony%20(not%20bi-directional)_.**%0A%0A1.%20Bridge%20Map%20is%20called%20in%20src.cli.index.js%20and%20it%20calls%20%60tokenMap%60%20in%20%60bridge%2Fcontract.js%60%20which%0A%20%20%20-%20Get%20srcBridge%20Contract%20on%20Ethereum%20%60TokenLockerOnEthereum.sol%60%20from%20%60ethBridge.js%60%20it%20also%20instantiates%20an%20%60eprover%60%20using%20%60tools%2Feprover%2Findex.js%60%20which%20calls%20%60txProof.js%60%20which%20uses%20%5Beth-proof%20npm%20package%5D(https%3A%2F%2Fwww.npmjs.com%2Fpackage%2Feth-proof).%20_Note%3A%20this%20is%20marked%20with%20a%20%2F%2FTODO%20need%20to%20test%20and%20develop%20proving%20logic%20on%20Harmony._%0A%20%20%20-%20Get%20destBridge%20Contract%20on%20Hamony%20%60TokenLockerOnHarmony.sol%60%20from%20%60hmyBridge.js%60%20it%20also%20instantiates%20an%20%60hprove%60%20using%20%60tools%2Feprover%2Findex.js%60%20which%20calls%20%60txProof.js%60%20which%20uses%20%5Beth-proof%20npm%20package%5D(https%3A%2F%2Fwww.npmjs.com%2Fpackage%2Feth-proof).%0A%20%20%20-%20calls%20%60TokenMap%60%20in%20%60bridge.js%60%0A2.%20%60TokenMap%60%20Calls%20IssueTokenMapReq%20(on%20the%20Ethreum%20Locker)%20returning%20the%20%60mapReq.transactionHash%60%0A%20%20%20-%20%60IssueTokenMapReq(token)%60%20is%20held%20in%20%60bridge.js%60%20as%20part%20of%20the%20bridge%20class%0A%20%20%20-%20It%20calls%20%60issueTokenMapReq%60%20on%20%60TokenLockerOnEthereum.sol%60%20which%20is%20implemented%20by%20%60TokenRegistry.sol%60%0A%20%20%20-%20%60issueTokenMapReq%60%20checks%20if%20the%20token%20has%20already%20been%20mapped%20if%20not%20it%20was%20emitting%20a%20%60TokenMapReq%60%20with%20the%20details%20of%20the%20token%20to%20be%20mapped.%20However%20this%20was%20commented%20out%20as%20it%20was%20felt%20that%2C%20if%20it%20has%20not%20been%20mapped%2C%20we%20use%20the%20%60transactionHash%60%20of%20the%20mapping%20request%60%20to%20drive%20the%20logic%20below%20(not%20the%20event).%0A3.%20%60TokenMap%60%20calls%20%60Bridge.CrossRelay%60%20with%20the%20IssueTokenMapReq.hash%20to%0A%20%20%20-%20gets%20the%20proof%20of%20the%20transaction%20on%20Ethereum%20via%20%60getProof%60%20calling%20%60prover.ReceiptProof%60%20which%20calls%20the%20eprover%20and%20returns%20%60proof%60%20with%0A%20%20%20%20%20-%20%60hash%3A%20sha3(resp.header.serialize())%2C%60%0A%20%20%20%20%20-%20%60root%3A%20resp.header.receiptRoot%2C%60%0A%20%20%20%20%20-%20%60proof%3A%20encode(resp.receiptProof)%2C%60%0A%20%20%20%20%20-%20%60key%3A%20encode(Number(resp.txIndex))%20%2F%2F%20'0x12'%20%3D%3E%20Nunmber%60%0A%20%20%20-%20We%20then%20call%20%60dest.ExecProof(proof)%60%20to%20execute%20the%20proof%20on%20Harmony%0A%20%20%20%20%20-%20This%20calls%20%60validateAndExecuteProof%60%20on%20%60TokenLockerOnHarmony.sol%60%20with%20the%20%60proofData%60%20from%20above%2C%20which%0A%20%20%20%20%20%20%20-%20requires%20%60lightclient.VerifyReceiptsHash(blockHash%2C%20rootHash)%2C%60%20implemented%20by%20%60.%2FEthereumLightClient.sol%60%0A%20%20%20%20%20%20%20%20%20-%20This%20returns%20%60return%20bytes32(blocks%5Buint256(blockHash)%5D.receiptsRoot)%20%3D%3D%20receiptsHash%3B%60%0A%20%20%20%20%20%20%20%20%20-%20**Which%20means%20the%20block%20has%20to%20be%20relayed%20first%2C%20as%20we%20have%20just%20executed%20the%20transaction%20the%20relayer%20usually%20has%20not%20relayed%20the%20block%20so%20this%20will%20fail**%0A%20%20%20%20%20%20%20-%20requires%20%60lightclient.isVerified(uint256(blockHash)%60%20implemented%20by%20%60.%2FEthereumLightClient.sol%60%0A%20%20%20%20%20%20%20%20%20-%20This%20returns%20%60return%20canonicalBlocks%5BblockHash%5D%20%26%26%20blocks%5BblockHash%5D.number%20%2B%2025%20%3C%20blocks%5BcanonicalHead%5D.number%3B%60%0A%20%20%20%20%20%20%20%20%20-%20**Which%20means%20there%20must%20be%20an%20additional%2025%20blocks%20on%20Ethereum%20before%20this%20can%20be%20processed.%20This%20logic%20needs%20to%20be%20rewritten%20to%20break%20down%20execution%20for%201.%20the%20ethereum%20mapping%20request%202.%20After%20a%2025%20block%20delay%20the%20Harmony%20Proof%20validation%20and%20executing%20the%20Harmony%20Mapping%20Request**%0A%20%20%20%20%20%20%20-%20%60require(spentReceipt%5BreceiptHash%5D%20%3D%3D%20false%2C%20%22double%20spent!%22)%3B%60%20to%20ensure%20that%20we%20haven't%20already%20executed%20this%20proof%0A%20%20%20%20%20%20%20-%20gets%20the%20%60rlpdata%60%20using%20%60EthereumProver.validateMPTProof%60%20implemented%20by%20%60EthereumProver.sol%60%20which%0A%20%20%20%20%20%20%20%20%20-%20Validates%20a%20Merkle-Patricia-Trie%20proof.%0A%20%20%20%20%20%20%20%20%20-%20Returns%20a%20value%20whose%20inclusion%20is%20proved%20or%20an%20empty%20byte%20array%20for%20a%20proof%20of%20exclusion%0A%20%20%20%20%20%20%20-%20marks%20%60spentReceipt%5BreceiptHash%5D%20%3D%20true%3B%60%0A%20%20%20%20%20%20%20-%20%60execute(rlpdata)%60%20implemented%20by%20%60TokenLocker.sol%60%20which%20calls%20%60onTokenMapReqEvent(topics%2C%20Data)%60%20implemented%20by%20%60TokenRegistry.sol%60%0A%20%20%20%20%20%20%20%20%20-%20%60address%20tokenReq%20%3D%20address(uint160(uint256(topics%5B1%5D)))%3B%60%20gets%20the%20address%20of%20the%20token%20to%20be%20mapped.%0A%20%20%20%20%20%20%20%20%20-%20require%20%60address(RxMapped%5BtokenReq%5D)%20%3D%3D%20address(0)%60%20that%20the%20token%20has%20not%20already%20been%20mapped.%0A%20%20%20%20%20%20%20%20%20-%20%60address(RxMapped%5BtokenReq%5D)%20%3D%3D%20address(0)%60%20creates%20a%20new%20BridgedToken%20implemented%20by%20%60BridgedToken.sol%60%0A%20%20%20%20%20%20%20%20%20%20%20-%20%60contract%20BridgedToken%20is%20ERC20Upgradeable%2C%20ERC20BurnableUpgradeable%2C%20OwnableUpgradeable%60%20it%20is%20a%20standard%20openzepplin%20ERC20%20Burnable%2C%20Ownable%2C%20Upgradeable%20token%0A%20%20%20%20%20%20%20%20%20-%20%60mintAddress.initialize%60%20initialize%20the%20token%20with%20the%20same%20%60name%60%2C%20%60symbol%60%20and%20%60decimals%60%20as%20the%20ethereum%20bridged%20token%0A%20%20%20%20%20%20%20%20%20-%20%60RxMappedInv%5Baddress(mintAddress)%5D%20%3D%20tokenReq%3B%60%20updates%20the%20inverse%20Key%20Value%20Mapping%0A%20%20%20%20%20%20%20%20%20-%20%60RxMapped%5BtokenReq%5D%20%3D%20mintAddress%3B%60%20updates%20the%20Ethereum%20mapped%20tokens%0A%20%20%20%20%20%20%20%20%20-%20%60RxTokens.push(mintAddress)%3B%60%20add%20the%20newly%20created%20token%20to%20a%20list%20of%20bridged%20tokens%0A%20%20%20%20%20%20%20%20%20-%20%60emit%20TokenMapAck(tokenReq%2C%20address(mintAddress))%3B%60%0A%20%20%20%20%20%20%20-%20%60require(executedEvents%20%3E%200%2C%20%22no%20valid%20event%22)%60%20to%20check%20if%20it%20executed%20the%20mapping%20correctly.%0A4.%20We%20then%20take%20the%20Harmony%20Mapping%20%60transactionHash%60%20and%20repeat%20the%20above%20process%20to%20prove%20the%20Harmony%20mapping%20acknowledgment%20on%20Ethereum%20(Cross%20Relay%20second%20call)%20%60return%20Bridge.CrossRelay(dest%2C%20src%2C%20mapAck.transactionHash)%3B%60%0A%0A-%20gets%20the%20proof%20of%20the%20transaction%20on%20Harmony%20via%20%60getProof%60%20calling%20%60prover.ReceiptProof%60%20which%20calls%20the%20eprover%20and%20returns%20%60proof%60%20with%0A%20%20_%60hash%3A%20sha3(resp.header.serialize())%2C%60%0A%20%20_%20%60root%3A%20resp.header.receiptRoot%2C%60%0A%20%20_%60proof%3A%20encode(resp.receiptProof)%2C%60%0A%20%20_%20%60key%3A%20encode(Number(resp.txIndex))%20%2F%2F%20'0x12'%20%3D%3E%20Nunmber%60%0A%20%20-%20We%20then%20call%20%60dest.ExecProof(proof)%60%20to%20execute%20the%20proof%20on%20Ethereum%0A%20%20%20%20-%20This%20calls%20%60validateAndExecuteProof%60%20on%20%60TokenLokerOnEthereum.sol%60%20with%20the%20%60proofData%60%20from%20above%2C%20which%0A%20%20%20%20%20%20-%20%60require(lightclient.isValidCheckPoint(header.epoch%2C%20mmrProof.root)%2C%60%20implemented%20by%20%60HarmonyLightClient.sol%60%0A%20%20%20%20%20%20%20%20-%20%60return%20epochMmrRoots%5Bepoch%5D%5BmmrRoot%5D%60%20which%20means%20that%20the%20epoch%20has%20to%20have%20had%20a%20checkpoint%20submitted%20via%20%60submitCheckpoint%60%0A%20%20%20%20%20%20-%20%60bytes32%20blockHash%20%3D%20HarmonyParser.getBlockHash(header)%3B%60%20gets%20the%20blockHash%20implemented%20by%20%60HarmonyParser.sol%60%0A%20%20%20%20%20%20%20%20-%20This%20returns%20%60return%20keccak256(getBlockRlpData(header))%3B%60%0A%20%20%20%20%20%20%20%20-%20%60getBlockRlpData%60%20creates%20a%20list%20%60bytes%5B%5D%20memory%20list%20%3D%20new%20bytes%5B%5D(15)%3B%60%20and%20uses%20statements%20like%20%60list%5B0%5D%20%3D%20RLPEncode.encodeBytes(abi.encodePacked(header.parentHash))%3B%60%20to%20perform%20%5BRecursive-Length%20Prefix%20(RLP)%20Serialization%5D(https%3A%2F%2Fethereum.org%2Fen%2Fdevelopers%2Fdocs%2Fdata-structures-and-encoding%2Frlp%2F)%20implemented%20by%20%60RLPEncode.sol%60%0A%20%20%20%20%20%20-%20%60HarmonyProver.verifyHeader(header%2C%20mmrProof)%3B%60%20verifys%20the%20header%20implemented%20by%20%60HarmonyProver.sol%60%0A%20%20%20%20%20%20%20%20-%20%60bytes32%20blockHash%20%3D%20HarmonyParser.getBlockHash(header)%3B%60%20gets%20the%20blockHash%20implemented%20by%20%60HarmonyParser.sol%60%20as%20above%0A%20%20%20%20%20%20%20%20-%20%60valid%20%3D%20MMRVerifier.inclusionProof(proof.root%2C%20proof.width%2C%20proof.index%2C%20blockHash%2C%20proof.peaks%2C%20proof.siblings)%3B%60%20verifys%20the%20proff%20using%20the%20%5BMerkle%20Mountain%20Range%20Proof%5D(https%3A%2F%2Fgithub.com%2Fopentimestamps%2Fopentimestamps-server%2Fblob%2Fmaster%2Fdoc%2Fmerkle-mountain-range.mdx)%20passed%20%60MMRVerifier.MMRProof%20memory%20proof%60%20and%20the%20%60blockHash%60.%0A%20%20%20%20%20%20%20%20-%20**NOTE%3A%20This%20means%20that%20a%20%60submitCheckpoint%60%20in%20%60HarmonyLightClient.sol%60%20needs%20to%20have%20called%20either%20for%20the%20next%20epoch%20or%20for%20a%20checkpoint%2C%20after%20the%20block%20the%20harmony%20mapping%20transaction%20was%20in.**%0A%20%20%20%20%20%20%20%20-%20**NOTE%3A%20Automatic%20submission%20of%20checkpoints%20to%20the%20Harmony%20Light%20Client%20has%20not%20been%20developed%20as%20yet.%20(It%20is%20not%20part%20of%20the%20%60ethRelay.js%60).%20And%20so%20the%20checkpoint%20would%20need%20to%20be%20manually%20submitted%20before%20the%20Ethereum%20Mapping%20could%20take%20place.**%0A%20%20%20%20%20%20-%20%60require(spentReceipt%5BreceiptHash%5D%20%3D%3D%20false%2C%20%22double%20spent!%22)%3B%60%20ensure%20that%20we%20haven't%20already%20processed%20this%20mapping%20request%60%0A%20%20%20%20%20%20-%20%60HarmonyProver.verifyReceipt(header%2C%20receiptdata)%60%20ensure%20the%20receiptdata%20is%20valid%0A%20%20%20%20%20%20-%20%60spentReceipt%5BreceiptHash%5D%20%3D%20true%3B%60%20marks%20the%20receipt%20as%20having%20been%20processed%0A%20%20%20%20%20%20-%20%60execute(receiptdata.expectedValue)%3B%60%20implemented%20by%20%60TokenLocker.sol%60%20which%20calls%20%60onTokenMapAckEvent(topics)%60%20implemented%20by%20%60TokenRegistry.sol%60%0A%20%20%20%20%20%20%20%20-%20%60address%20tokenReq%20%3D%20address(uint160(uint256(topics%5B1%5D)))%3B%60%0A%20%20%20%20%20%20%20%20-%20%60address%20tokenAck%20%3D%20address(uint160(uint256(topics%5B2%5D)))%3B%60%0A%20%20%20%20%20%20%20%20-%20%60require(TxMapped%5BtokenReq%5D%20%3D%3D%20address(0)%2C%20%22missing%20mapping%20to%20acknowledge%22)%3B%60%0A%20%20%20%20%20%20%20%20-%20%60TxMapped%5BtokenReq%5D%20%3D%20tokenAck%3B%60%0A%20%20%20%20%20%20%20%20-%20%60TxMappedInv%5BtokenAck%5D%20%3D%20IERC20Upgradeable(tokenReq)%3B%60%0A%20%20%20%20%20%20%20%20-%20%60TxTokens.push(IERC20Upgradeable(tokenReq))%3B%60%0A%0A5.%20Upon%20completion%20of%20tokenMap%20control%20is%20passed%20back%20to%20Bridge%20Map%20which%0A6.%20Calls%20TokenPair%20on%20Ethereum%0A7.%20Calls%20ethTokenInfo%20to%20get%20the%20status%20of%20the%20ERC20%0A8.%20Calls%20hmyTokenInfo%20to%20get%20the%20tokenStatus%20on%20Harmony%0A",lastUpdatedAt:1753129136e3},{lazy:()=>o2(()=>import("./intro-djeLbpl0.js"),[]),path:"/research/bridge/intro",type:"mdx",filePath:"research/bridge/intro.mdx",content:"%23%20Crosschain%20Bridge%20Analysis%20-%20An%20Introduction%0A%0A-%20date%3A%202023-02-04%0A-%20last%20updated%3A%202023-02-04%0A%0AHere%20we%20present%20a%20survey%20of%20existing%20bridge%20designs%2C%20historical%20security%20incidents%2C%20and%20a%20brief%20discussion%20of%20common%20components%20and%20where%20ZKP%20may%20be%20used.%0A%0A%23%23%20Bridge%20Taxonomy%0A%0ABridge%20designs%20evolved%20as%20DeFi%20and%20multi-chain%20paradigm%20gained%20popularity.%20Our%20summary%20is%20inspired%20by%20prior%20taxonomy%20work%20by%20%5BGanesha%20Upadhyaya%5D(https%3A%2F%2Ftwitter.com%2Fgupadhyaya)%20in%20%5BA%20Classification%20of%20Various%20Bridging%20Technologies%5D(https%3A%2F%2Fmedium.com%2Fharmony-one%2Fharmonys-cross-chain-future-41d02d53b10)%2C%20%5BDmitriy%20Berenzon%5D(https%3A%2F%2Ftwitter.com%2Fdberenzon)%20in%20%5BBlockchain%20Bridges%3A%20Building%20Networks%20of%20Cryptonetworks%5D(https%3A%2F%2Fmedium.com%2F1kxnetwork%2Fblockchain-bridges-5db6afac44f8)%2C%20and%20by%20multiple%20researchers%20from%20Jump%20Crypto%20in%20%5BSecurity%20Stack-Up%3A%20How%20Bridges%20Compare%5D(https%3A%2F%2Fjumpcrypto.com%2Fsecurity-stack-up-how-bridges-compare%2F)%0A%0A%3E%20At%20a%20very%20high%20level%2C%20there%20are%20two%20types%20of%20bridging%20solutions%3A%201)%20proof-based%20and%202)%20committee-based.%20The%20proof-based%20solutions%20entail%20cryptographic%20proving%20of%20the%20validity%20of%20any%20transaction%20of%20one%20chain%20in%20the%20other%2C%20whereas%20the%20committee-based%20solution%20relies%20on%20the%20social%20consensus%20of%20the%20bridge%20validators%20to%20attest%20for%20the%20transaction%20validity%2C%20which%20often%20involves%20no%20cryptographic%20proving.%0A%3E%0A%3E%20-%20Ganesha%20Upadhyaya%20in%20%22A%20Classification%20of%20Various%20Bridging%20Technologies%22%0A%0A%23%23%23%20Proof%20Based%0A%0A%23%23%23%23%20Validity%20Proofs%0A%0AValidity-proof%20based%20bridges%20prioritize%20security%2C%20trustlessness%2C%20permissionlessness%2C%20and%20delay%20minimization%0A%0A%7C%20Type%20%20%20%7C%20Design%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7C%20CodeotezkBridge%5D(https%3A%2F%2Frdi.berkeley.edu%2Fzkp%2FzkBridge%2Fuploads%2Fpaper.pdfy%20Berkeley%20researcehrs%20(%5BTwitter%5D(https%3A%2F%2Ftwitter.com%2Fzkcollective))%20%7C%0A%7C%20ZKP%20%20%20%20%7C%20%5BTelepathy%5D(https%3A%2F%2Fdocs.telepathy.xyz%2Fprotocol%2Foverview)%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7C%20%5BTelepathy%5D(https%3A%2F%2Fgithub.com%2Fsuccinctlabs%3Fq%3Dtelepathy%26type%3Dall%26language%3D%26sort%3D)%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7C%20%5BDemo%5D(https%3A%2F%2Fdemo.telepathy.xyz%2F)%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7C%20By%20%5BSuccint%20Labs%5D(https%3A%2F%2Fsuccinct.xyz)%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7C%0A%7C%20Native%20%7C%20%5BHorizon%5D(https%3A%2F%2Farxiv.org%2Fpdf%2F2101.06000.pdf)%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7C%20%5BHorizon%5D(https%3A%2F%2Fgithub.com%2Fharmony-one%2Fhorizon)%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7C%20TBD%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7C%20Inactive.%20By%20Harmony%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7C%0A%7C%20Native%20%7C%20%5BIBC%5D(https%3A%2F%2Fgithub.com%2Fcosmos%2Fibc)%20(%5BIntro%5D(https%3A%2F%2Ftutorials.cosmos.network%2Facademy%2F3-ibc%2F1-what-is-ibc.html))%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7C%20%5Bibc-go%5D(https%3A%2F%2Fgithub.com%2Fcosmos%2Fibc-go)%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7C%20Various%20%2F%20%5BExplorer%5D(https%3A%2F%2Fhub.mintscan.io%2Fchains%2Fibc-network)%20%7C%20Within%20Cosmos%20Network%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7C%0A%7C%20Native%20%7C%20%5BGravity%5D(https%3A%2F%2Fgithub.com%2FGravity-Bridge%2FGravity-Bridge%2Fblob%2Fmain%2Fdocs%2Fdesign%2Foverview.mdx)%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7C%20%5BGravity%5D(https%3A%2F%2Fgithub.com%2FGravity-Bridge%2FGravity-Bridge)%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7C%20%5BGravity%5D(https%3A%2F%2Fbridge.blockscape.network%2F)%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7C%20Ethereum%20and%20Cosmos%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7C%0A%7C%20Native%20%7C%20%5BAWM%5D(https%3A%2F%2Fgithub.com%2Fava-labs%2Fxsvm)%20(%5BIntro%5D(https%3A%2F%2Fmedium.com%2Favalancheavax%2Favalanche-warp-messaging-awm-launches-with-the-first-native-subnet-to-subnet-message-on-avalanche-c0ceec32144a))%20%7C%20%5BWrap%5D(https%3A%2F%2Fgithub.com%2Fava-labs%2Favalanchego%2Ftree%2Fmaster%2Fvms%2Fplatformvm%2Fwarp)%20%2F%20%5BXSVM%5D(https%3A%2F%2Fgithub.com%2Fava-labs%2Fxsvm)%20%7C%20TBD%20%2F%20%5BExplorer%5D(https%3A%2F%2Fsubnets.avax.network%2Fsubnets)%20%20%20%20%20%20%20%20%20%20%20%7C%20Within%20Avalanche%20Subnets%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7C%0A%7C%20Native%20%7C%20%5BSnowbridge%5D(https%3A%2F%2Fdocs.snowbridge.network%2Farchitecture%2Foverview)%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7C%20%5Bsnowbridge%5D(https%3A%2F%2Fgithub.com%2FSnowfork%2Fsnowbridge)%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7C%20TBD%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7C%0A%7C%20LCP%20%20%20%20%7C%20%5BDatachain%20LCP%5D(https%3A%2F%2Fmedium.com%2Flcp-network%2Flcp-a-proxy-for-light-client-verification-to-realize-trust-minimized-and-gas-efficient-f7d5868e4b0)%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7C%20%5BLCP%5D(https%3A%2F%2Fgithub.com%2Fdatachainlab%2Flcp)%20%2F%20%5BDemo%5D(https%3A%2F%2Fgithub.com%2Fdatachainlab%2Fharmony-cosmos-bridge-demo)%20%20%20%20%20%20%20%20%20%20%20%20%7C%20TBD%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7C%20Relies%20on%20TEE%20enclave%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7C%0A%7C%20LCP%20%20%20%20%7C%20%5BAvalanche%5D(https%3A%2F%2Fmedium.com%2Favalancheavax%2Favalanche-bridge-secure-cross-chain-asset-transfers-using-intel-sgx-b04f5a4c7ad1)%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7C%20TBD%20%2F%20%5BAudit%5D(https%3A%2F%2Fgithub.com%2Fava-labs%2Faudits%2Fblob%2Fmain%2Fbridge%2FAvalanche_Bridge_Security_Audit_Report_Halborn_v1_1.pdf)%20%7C%20%5Bcore.app%5D(https%3A%2F%2Fcore.app%2Fbridge%2F)%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7C%20Relies%20on%20TEE%20enclave%20(Intel%20SGX)%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7C%0A%0A%23%23%23%23%20Fraud%20Proofs%0A%0AFraud-proof%20based%20bridges%20assume%20all%20participants%20are%20truthful%20unless%20someone%20presents%20a%20proof%20showing%20otherwise.%20As%20a%20result%2C%20they%20must%20leave%20a%20wide%20fraud-proof%20time%20window%20and%20carefully%20design%20economic%20incentives%20for%20such.%20This%20limitation%20inevitably%20incurs%20much%20higher%20delay%2C%20but%20makes%20implementation%20substantially%20easier%20and%20costs%20significantly%20less%20to%20operate%20and%20maintain.%20Fraud-proof%20based%20bridges%20face%20more%20security%20risks%20due%20to%20reliance%20on%20fraud-prover%20and%20economic%20incentives%2C%20but%20still%20far%20less%20risky%20than%20committee-based%20bridges.%0A%0A%7C%20Design%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7C%20Code%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7C%20UI%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7C%20Note%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7C%0A%7C%20----------------------------------------------------------------------------------------------------------------------------------------------------%20%7C%20------------------------------------------------------------------%20%7C%20-------------------------------------------------------%20%7C%20--------------------------------%20%7C%0A%7C%20%5BRainbow%5D(https%3A%2F%2Fnear.org%2Fblog%2Feth-near-rainbow-bridge%2F)%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7C%20%5Brainbow-bridge%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge)%20%7C%20%5Brainbowbridge.app%5D(https%3A%2F%2Frainbowbridge.app%2Ftransfer)%20%7C%20By%20NEAR%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7C%0A%7C%20%5BNomad%5D(https%3A%2F%2Fdocs.nomad.xyz%2Fgovernance-bridge%2Farchitecture)%20(%5BIntro%5D(https%3A%2F%2Fmedium.com%2Fnomad-xyz-blog%2Fthe-nomad-design-philosophy-6fc0eacf3263))%20%7C%20%5Bmonorepo%5D(https%3A%2F%2Fgithub.com%2Fnomad-xyz%2Fmonorepo)%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7C%20%5Bapp.nomad.xyz%5D(https%3A%2F%2Fapp.nomad.xyz%2F)%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7C%20Hacked%20%5C%24200M%20(engineering%20flaw)%20%7C%0A%7C%20%5BDarwinia%5D(https%3A%2F%2Fdocs.darwinia.network%2F)%20(%5BPaper%5D(https%3A%2F%2Fdarwinia.network%2Fitering_io_optimistic_bridge_technical_paper_en.pdf))%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7C%20%5Bdarwinia%5D(https%3A%2F%2Fgithub.com%2Fdarwinia-network%2Fdarwinia)%20%20%20%20%20%20%20%20%20%20%20%7C%20TBD%20%2F%20%5BExplorer%5D(https%3A%2F%2Fdarwinia.subscan.io%2F)%20%20%20%20%20%20%20%20%20%20%7C%0A%0A%23%23%23%20Committee%20Based%0A%0A%7C%20Sub%20Category%20%20%20%20%20%20%20%20%20%7C%20Type%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7C%20Design%2FDocsmplementationrontendrotocol%20Validators%20%20%7C%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7C%20%5BCosmos%20Gravity%20Bridge%5D(https%3A%2F%2Fwww.gravitybridge.net%2Ffaqgravity-bridge%5D(https%3A%2F%2Fgithub.com%2Fcosmos%2Fgravity-bridge)%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7C%20%5Bhttps%3A%2F%2Fbridge.blockscape.network%2F%5D(https%3A%2F%2Fbridge.blockscape.network%2F)%20%5Bhttps%3A%2F%2Femeris.com%2F%20(ON%20HOLD)%5D(https%3A%2F%2Femeris.com%2F)%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7C%0A%7C%20Proof%20of%20Stake%20Chain%20%7C%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7C%20%5BAxelar%5D(https%3A%2F%2Faxelar.network%2Faxelar_whitepaper.pdf)%20%5Bdocs%5D(https%3A%2F%2Fdocs.axelar.devaxelar-core%5D(https%3A%2F%2Fgithub.com%2Faxelarnetwork%2Faxelar-coreroof%20of%20Stake%20Chain%20%7C%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7C%20%5BCeler%20cBridge%5D(https%3A%2F%2Fcbridge-docs.celer.network%2F)%20%5BCeler%20Network%20Whitepaper%5D(https%3A%2F%2Fceler.network%2Fdoc%2FCelerNetwork-Whitepaper.pdf)%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7C%20%5BcBridge-node%5D(https%3A%2F%2Fgithub.com%2Fceler-network%2FcBridge-node)%2C%20%5BcBridge-contracts%5D(https%3A%2F%2Fgithub.com%2Fceler-network%2FcBridge-contracts)%2C%20%5BcBridge-cowa%5D(https%3A%2F%2Fgithub.com%2Fceler-network%2Fcbridge-cowa)%20%7C%20%5Bhttps%3A%2F%2Fcbridge.celer.network%2F%5D(https%3A%2F%2Fcbridge.celer.network%2F)%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7C%0A%7C%20External%20Networks%20%20%20%20%7C%20Multisig%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7C%20%5BHorizon%201.0%5D(https%3A%2F%2Fmedium.com%2Fharmony-one%2Fintroducing-horizon-an-ethereum-harmony-cross-chain-bridge-2f56ed7214b3)%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7C%20%5Bgithub%5D(https%3A%2F%2Fgithub.com%2Fharmony-one%2Fhorizonxternal%20Networks%20%20%20%20%7C%20Multisig%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7C%20%5BWormhole%5D(https%3A%2F%2Fbook.wormhole.com%2Fwormhole%2F2_architectureOverview.htmlwormhole%5D(https%3A%2F%2Fgithub.com%2Fwormhole-foundation%2Fwormhole)%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7C%20%5Bnetwork%5D(https%3A%2F%2Fwormhole.com%2Fnetwork%2F)%20%5Becosystem%5D(https%3A%2F%2Fwormhole.com%2Fecosystem%2F)%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7C%0A%7C%20External%20Networks%20%20%20%20%7C%20Decentralized%20Oracle%20Network%20(DON)%20%7C%20%5BChainlink%20(CCIP)%5D(https%3A%2F%2Fblog.chain.link%2Fintroducing-the-cross-chain-interoperability-protocol-ccip%2F)%2C%20%5Bweb%5D(https%3A%2F%2Fchain.link%2Fcross-chain)%20%5BChainlink%20Whitepaper%5D(https%3A%2F%2Fresearch.chain.link%2Fwhitepaper-v2.pdf%3F_ga%3D2.40239147.884807142.1677705772-204109244.1677705772)%20%7C%20%5Bccip-read%5D(https%3A%2F%2Fgithub.com%2Fsmartcontractkit%2Fccip-readxternal%20Networks%20%20%20%20%7C%20Decentralized%20Oracle%20Network%20(DON)%20%7C%20%5BLayerZero%5D(https%3A%2F%2Flayerzero.network%2Fpdf%2FLayerZero_Whitepaper_Release.pdf)%2C%20%5Bdocs%5D(https%3A%2F%2Flayerzero.gitbook.io%2Fdocs%2F)%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7C%20%5BLayerZero%5D(https%3A%2F%2Fgithub.com%2FLayerZero-Labs%2FLayerZero)%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7C%20%5Bhttps%3A%2F%2Ftheaptosbridge.com%2Fbridge%5D(https%3A%2F%2Ftheaptosbridge.com%2Fbridge)%20%5Bhttps%3A%2F%2Fbitcoinbridge.network%2Fbridge%5D(https%3A%2F%2Fbitcoinbridge.network%2Fbridge)%20%5Bhttps%3A%2F%2Fbridge.harmony.one%2Fone%5D(https%3A%2F%2Fbridge.harmony.one%2Fone)%20%7C%0A%7C%20External%20Networks%20%20%20%20%7C%20Multi-Party%20Communication%20(MPC)%20%20%20%20%7C%20%5BMultichain%20bridge%5D(https%3A%2F%2Fdocs.multichain.org%2Fgetting-started%2Fintroductionross-Chain-Bridge%5D(https%3A%2F%2Fgithub.com%2Fanyswap%2FCrossChain-Bridge)%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7C%20%5Bhttps%3A%2F%2Fbsc.anyswap.exchange%2F%5D(https%3A%2F%2Fbsc.anyswap.exchange%2Fbridge%23%2Frouter)%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7C%0A%7C%20External%20Networks%20%20%20%20%7C%20Multi-Party%20Communication%20(MPC)%20%20%20%20%7C%20%5BSynapse%20Protocol%5D(https%3A%2F%2Fmedium.com%2Fsynapse-protocol%2Fintroducing-synapse-protocol-2af926143deb)%2C%20%5Bdocs%5D(https%3A%2F%2Fdocs.synapseprotocol.com%2F)%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7C%20%5Bsynapsecns%5D(https%3A%2F%2Fgithub.com%2Forgs%2Fsynapsecns%2Frepositories)%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7C%20%5Bhttps%3A%2F%2Fsynapseprotocol.com%2F%5D(https%3A%2F%2Fsynapseprotocol.com%2F)%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7C%0A%0A%23%23%23%20Others%0A%0A%7C%20Sub%20Category%20%20%20%20%20%20%7C%20Type%20%7C%20Design%2FDocs%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7C%20Implementation%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7C%20Frontendrollup-to-rollup%20%20%7C%20%20%20%20%20%20%7C%20%5BHop%20Protocol%5D(https%3A%2F%2Fhop.exchange%2Fwhitepaper.pdf)%2C%20%5Bdocs%5D(https%3A%2F%2Fdocs.hop.exchange%2Fbasics%2Fa-short-explainer)%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7C%20%5Bcontracts%5D(https%3A%2F%2Fgithub.com%2Fhop-protocol%2Fcontracts)%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7C%20%5Bhttps%3A%2F%2Fapp.hop.exchange%2F%5D(https%3A%2F%2Fapp.hop.exchange%2F)%20%20%20%20%20%20%20%20%20%20%20%7C%0A%7C%20mesh-network%20%20%20%20%20%20%7C%20%20%20%20%20%20%7C%20%5BRouter%20Protocol%5D(https%3A%2F%2Fdocs.routerprotocol.com%2Fwhitepaper%2Fintroducing-router-protocol%2Farchitecture)%2C%20%5Bdocs%5D(https%3A%2F%2Fdev.routerprotocol.com%2F)%20%7C%20%5BRouter%20Protocol%5D(https%3A%2F%2Fgithub.com%2Forgs%2Frouter-protocol%2Frepositories)%20%20%20%20%20%20%7C%20%5Bhttps%3A%2F%2Fapp.thevoyager.io%2Fswap%5D(https%3A%2F%2Fapp.thevoyager.io%2Fswap)%20%7C%0A%7C%20Bridge%20Components%20%7C%20%20%20%20%20%20%7C%20%5BParity%20Bridges%20Common%5D(https%3A%2F%2Fgithub.com%2Fparitytech%2Fparity-bridges-common%23high-level-architecture)%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7C%20%5Bparity-bridges-common%5D(https%3A%2F%2Fgithub.com%2Fparitytech%2Fparity-bridges-common)%20%7C%20TBD%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7C%0A%0A%23%23%23%20Miscellaneous%0A%0A-%20TVL%20of%20bridges%20can%20be%20found%20on%20%5BDeFi%20Llama%5D(https%3A%2F%2Fdefillama.com%2Fprotocols%2FBridge)%0A-%20Some%20tools%20and%20queries%20are%20already%20prepared%20on%20Dune%20Analytics%20for%20analysis%20of%20bridge%20volume.%20See%20for%20example%3A%20https%3A%2F%2Fdune.com%2Fqueries%2F511393.%0A%0A%23%23%20Bridging%20Components%0A%0AFollowing%20are%20the%20main%20components%20for%20Cross-Chain%20Bridges%20we%20review%0A%0A-%20Approach%20%3A%20The%20design%20approach%20for%20the%20bridge%0A-%20Proving%20Mechanisms%3A%20How%20do%20we%20ensure%20transactions%20are%20valid%0A%20%20-%20Transaction%20Proofs%3A%20How%20do%20we%20ensure%20a%20transacion%20was%20included%20in%20a%20valid%20block%0A%20%20-%20Block%20Proofs%3A%20How%20do%20we%20ensure%20a%20block%20was%20included%20in%20the%20canonical%20chain%0A-%20Relayer%20Mechanisms%0A%20%20-%20Relaying%3A%20How%20do%20we%20relay%20messages%20(blocks%20and%20transactions)%20between%20chains%0A-%20Light%20Clients%3A%20What%20Light%20client%20approaches%20can%20we%20leverage%0A-%20Token%20Lockers%3A%20How%20do%20we%20safely%20store%20bridged%20assets%20in%20a%20trustless%20cost%20effective%20way%0A-%20Multi-chain%20support%3A%20What%20chains%20are%20supported%20and%20what%20is%20the%20proces%20to%20add%20additional%20chains.%0A-%20Economics%3A%20What%20are%20the%20costs%20for%20bridging%20between%20chains%20and%20how%20do%20we%20secure%20and%20incentivize%20validators%20and%20relayers.%0A%0A%23%23%20Cross%20Chain%20Communication%20Protocols%0A%0A-%20%5BINTER%E2%80%91BLOCKCHAINCOMMUNICATION%20PROTOCOL%5D(https%3A%2F%2Fibcprotocol.org%2F)%0A-%20%5BCosmos%20IBC%3A%20Interchain%20Standards%5D(https%3A%2F%2Fgithub.com%2Fcosmos%2Fibc)%0A-%20%5BIBC%20Update%E2%80%94%20The%20Internet%20of%20Blockchains%20Is%20Growing%20Fast%5D(https%3A%2F%2Fblog.cosmos.network%2Fibc-update-the-internet-of-blockchains-is-growing-fast-dae883228ebf)%0A-%20%5BPolkadot%20Cross-Consensus%20Message%20(XCM)%20Format%5D(https%3A%2F%2Fgithub.com%2Fparitytech%2Fxcm-format%2Fblob%2Fmaster%2FREADME.mdx)%0A-%20%5BXCMP%20Design%5D(https%3A%2F%2Fresearch.web3.foundation%2Fen%2Flatest%2Fpolkadot%2FXCMP%2Findex.html)%0A-%20%5BHRMP%20Channels%5D(https%3A%2F%2Fresearch.web3.foundation%2Fen%2Flatest%2Fpolkadot%2FXCMP%2FHRMP%2520channels.html)%0A-%20%5BThe%20Path%20of%20a%20Parachain%20Block%5D(https%3A%2F%2Fpolkadot.network%2Fblog%2Fthe-path-of-a-parachain-block%2F)%0A-%20%5BParity%20Bridges%20Common%5D(https%3A%2F%2Fgithub.com%2Fparitytech%2Fparity-bridges-common%2Fblob%2Fmaster%2FREADME.mdx)%0A%0A%23%23%20Bridge%20Attack%20Vectors%20and%20Hacks%0A%0AFollowing%20is%20an%20overview%20of%20some%20common%20bridge%20attack%20vectors.%0A%0A-%20%5BVitalik%3B%20security%20limits%20of%20bridges%5D(https%3A%2F%2Fold.reddit.com%2Fr%2Fethereum%2Fcomments%2Frwojtk%2Fama_we_are_the_efs_research_team_pt_7_07_january%2Fhrngyk8%2F)%0A%0A%3E%20Now%2C%20imagine%20what%20happens%20if%20you%20move%20100%20ETH%20onto%20a%20bridge%20on%20Solana%20to%20get%20100%20Solana-WETH%2C%20and%20then%20Ethereum%20gets%2051%25%20attacked.%20The%20attacker%20deposited%20a%20bunch%20of%20their%20own%20ETH%20into%20Solana-WETH%20and%20then%20reverted%20that%20transaction%20on%20the%20Ethereum%20side%20as%20soon%20as%20the%20Solana%20side%20confirmed%20it.%20The%20Solana-WETH%20contract%20is%20now%20no%20longer%20fully%20backed%2C%20and%20perhaps%20your%20100%20Solana-WETH%20is%20now%20only%20worth%2060%20ETH.%20Even%20if%20there's%20a%20perfect%20ZK-SNARK-based%20bridge%20that%20fully%20validates%20consensus%2C%20it's%20still%20vulnerable%20to%20theft%20through%2051%25%20attacks%20like%20this.%0A%3E%0A%3E%20It's%20always%20safer%20to%20hold%20Ethereum-native%20assets%20on%20Ethereum%20or%20Solana-native%20assets%20on%20Solana%20than%20it%20is%20to%20hold%20Ethereum-native%20assets%20on%20Solana%20or%20Solana-native%20assets%20on%20Ethereum.%20And%20in%20this%20context%2C%20%22Ethereum%22%20refers%20not%20just%20to%20the%20base%20chain%2C%20but%20also%20any%20proper%20L2%20that%20is%20built%20on%20it.%20If%20Ethereum%20gets%2051%25%20attacked%20and%20reverts%2C%20Arbitrum%20and%20Optimism%20revert%20too%2C%20and%20so%20%22cross-rollup%22%20applications%20that%20hold%20state%20on%20Arbitrum%20and%20Optimism%20are%20guaranteed%20to%20remain%20consistent%20even%20if%20Ethereum%20gets%2051%25%20attacked.%20And%20if%20Ethereum%20does%20not%20get%2051%25%20attacked%2C%20there's%20no%20way%20to%2051%25%20attack%20Arbitrum%20and%20Optimism%20separately.%20Hence%2C%20holding%20assets%20issued%20on%20Optimism%20wrapped%20on%20Arbitrum%20is%20still%20perfectly%20safe.%0A%3E%0A%3E%20Why%20a%20rollup%20can't%20just%20%22go%20use%20another%20data%20layer%22.%20If%20a%20rollup%20stores%20its%20data%20on%20Celestia%20or%20BCH%20or%20whatever%20else%20but%20deals%20with%20assets%20on%20Ethereum%2C%20if%20that%20layer%20gets%2051%25%20attacked%20you're%20screwed.%20The%20DAS%20on%20Celestia%20providing%2051%25%20attack%20resistance%20doesn't%20actually%20help%20you%20because%20the%20Ethereum%20network%20isn't%20reading%20that%20DAS%3B%20it%20would%20be%20reading%20a%20bridge%2C%20which%20would%20be%20vulnerable%20to%2051%25%20attacks.%20To%20be%20a%20rollup%20that%20provides%20security%20to%20applications%20using%20Ethereum-native%20assets%2C%20you%20have%20to%20use%20the%20Ethereum%20data%20layer%20(and%20likewise%20for%20any%20other%20ecosystem).%0A%0AHere%20are%20some%20sample%20hacks%0A%0A-%20%5BVulnerabilities%20in%20Cross-chain%20Bridge%20Protocols%20Emerge%20as%20Top%20Security%20Risk%5D(https%3A%2F%2Fblog.chainalysis.com%2Freports%2Fcross-chain-bridge-hacks-2022%2F)%0A%0A%3E%20Following%20last%20night%E2%80%99s%20exploit%20of%20the%20Nomad%20Bridge%2C%20Chainalysis%20estimates%20that%20%242%20billion%20in%20cryptocurrency%20has%20been%20stolen%20across%2013%20separate%20cross-chain%20bridge%20hacks%2C%20the%20majority%20of%20which%20was%20stolen%20this%20year.%20Attacks%20on%20bridges%20account%20for%2069%25%20of%20total%20funds%20stolen%20in%202022%20so%20far.%0A%0A-%20%5BEXPLAINED%3A%20THE%20QUBIT%20HACK%20(JANUARY%202022)%5D(https%3A%2F%2Fhalborn.com%2Fexplained-the-qubit-hack-january-2022%2F)%0A%0A%3E%20The%20exploited%20contract%20used%20a%20modified%20safeTransferFrom()%20function%20which%20instead%20of%20making%20use%20of%20functionCall()%20to%20verify%20that%20the%20target%20address%20contained%20contract%20code%2C%20used%20the%20call()%20function%20directly.%20As%20the%200%20address%20has%20no%20code%20at%20all%2C%20no%20code%20is%20run%2C%20and%20the%20call%20is%20completed%20successfully%20without%20reverting.%20As%20a%20result%2C%20the%20deposit%20function%20executed%20successfully%20but%20no%20real%20tokens%20were%20deposited.%0A%3E%0A%3E%20The%20Ethereum%20QBridge%20caught%20the%20Deposit%20event%20and%20interpreted%20it%20as%20a%20valid%20deposit%20of%20ETH.%20As%20a%20result%2C%20qXETH%20tokens%20were%20minted%20for%20the%20attacker%20on%20BSC.%0A%0A-%20%5BEXPLAINED%3A%20THE%20WORMHOLE%20HACK%20(FEBRUARY%202022)%5D(https%3A%2F%2Fhalborn.com%2Fexplained-the-wormhole-hack-february-2022%2F)%0A%0A%3E%20The%20actual%20extraction%20of%20120k%20ETH%20from%20the%20Wormhole%20bridge%20came%20at%20the%20end%20of%20a%20series%20of%20events.%20The%20actual%20flow%20of%20the%20attack%20was%3A%0A%3E%0A%3E%201.%20The%20attacker%20creates%20a%20validator%20action%20approval%20(VAA)%20with%20a%20call%20to%20post_vaa%0A%3E%202.%20This%20VAA%20was%20used%20in%20a%20call%20to%20complete_wrapped%20to%20mint%20the%20120%2C000%20ETH%20extracted%20in%20the%20attack%0A%3E%203.%20The%20attacker%20%E2%80%9Clegitimately%E2%80%9D%20extracted%20the%20minted%20tokens%20from%20the%20bridge%0A%3E%0A%3E%20The%20vulnerability%20that%20made%20the%20attack%20possible%20was%20a%20failure%20to%20perform%20proper%20signature%20verification%20in%20the%20VAA%20creation%20process.%20The%20role%20of%20signature%20verification%20is%20delegated%20several%20times%20from%20post_vaa%20to%20verify_signatures%20to%20Secp256k1.%0A%0A-%20%5BEXPLAINED%3A%20THE%20RONIN%20HACK%20(MARCH%202022)%5D(https%3A%2F%2Fhalborn.com%2Fexplained-the-ronin-hack-march-2022%2F)%0A%0A%3E%20The%20Ronin%20Network%20attack%20was%20extremely%20stealthy.%20In%20fact%2C%20the%20hack%20wasn%E2%80%99t%20noticed%20until%20six%20days%20after%20it%20occurred%20when%20the%20project%20team%20was%20notified%20by%20a%20user%20that%20they%20couldn%E2%80%99t%20withdraw%20about%205k%20ETH%20from%20the%20project%E2%80%99s%20bridge.%20Further%20investigation%20discovered%20the%20largest%20hack%20in%20DeFi%20history%20to%20date.%0A%3E%0A%3E%20The%20Ronin%20Network%20hack%20was%20made%20possible%20by%20compromised%20private%20keys.%20The%20Ronin%20Network%20uses%20a%20set%20of%20nine%20validator%20nodes%20to%20approve%20transactions%20on%20the%20bridge%2C%20and%20a%20deposit%20or%20withdrawal%20requires%20approval%20by%20a%20majority%20of%20five%20of%20these%20nodes.%20The%20attacker%20gained%20control%20of%20four%20validators%20controlled%20by%20Sky%20Mavis%20and%20a%20third-party%20Axie%20DAO%20validator%20that%20signed%20their%20malicious%20transactions.%0A%0A-%20%5BEXPLAINED%3A%20THE%20HARMONY%20HORIZON%20BRIDGE%20HACK%5D(https%3A%2F%2Fhalborn.com%2Fexplained-the-harmony-horizon-bridge-hack%2F)%0A%0A%3E%20Like%20most%20cross-chain%20bridges%2C%20the%20Harmony%20Horizon%20Bridge%20has%20a%20validation%20process%20for%20approving%20transactions%20being%20transferred%20over%20the%20bridge.%20In%20this%20case%2C%20the%20approvals%20process%20uses%20a%20multi-signature%20scheme%20with%20five%20validators.%0A%3E%0A%3E%20However%2C%20the%20bridge%20only%20used%20a%202%20of%205%20validation%20scheme.%20This%20means%20that%20only%20two%20blockchain%20accounts%20needed%20to%20be%20compromised%20for%20an%20attacker%20to%20approve%20any%20malicious%20transaction%20that%20they%20wished.%0A%3E%0A%3E%20The%20Harmony%20Horizon%20bridge%20was%20exploited%20via%20the%20theft%20of%20two%20private%20keys.%20These%20private%20keys%20were%20encrypted%20with%20both%20a%20passphrase%20and%20a%20key%20management%20service%2C%20and%20no%20system%20had%20access%20to%20multiple%20plaintext%20keys.%20However%2C%20the%20attacker%20managed%20to%20access%20and%20decrypt%20multiple%20keys.%0A%3E%0A%3E%20With%20access%20to%20two%20of%20the%20bridge%E2%80%99s%20private%20keys%2C%20the%20attacker%20could%20create%20a%20transaction%20extracting%20%24100%20million%20from%20the%20bridge%20and%20confirm%20it%20using%20two%20accounts%20under%20their%20control.%0A%0A-%20%5BTHE%20NOMAD%20BRIDGE%20HACK%3A%20A%20DEEPER%20DIVE%5D(https%3A%2F%2Fhalborn.com%2Fthe-nomad-bridge-hack-a-deeper-dive%2F)%0A%0A%3E%20On%20August%201%2C%20DeFi%20bridge%20Nomad%20was%20hacked%20for%20over%20%24190M.%0A%3E%0A%3E%20After%20a%20frenzied%20hack%20from%20hundreds%20of%20wallets%2C%20the%20bridge%E2%80%99s%20TVL%20dropped%20from%20%24190%2C740%2C000%20to%20%241%2C794%20in%20mere%20hours.%20The%20hack%20involved%20a%20total%20of%20960%20transactions%20with%201%2C175%20individual%20withdrawals%20from%20the%20bridge.%0A%3E%20According%20to%20Nomad%E2%80%99s%20post-mortem%2C%20an%20implementation%20bug%20in%20a%20June%2021%20smart%20contract%20upgrade%20caused%20the%20Replica%20contract%20to%20fail%20to%20authenticate%20messages%20properly.%20This%20issue%20meant%20that%20any%20message%20could%20be%20forged%20as%20long%20as%20it%20had%20not%20already%20been%20processed.%0A%3E%0A%3E%20As%20a%20result%2C%20contracts%20relying%20on%20the%20Replica%20for%20authentication%20of%20inbound%20messages%20suffered%20security%20failures.%20From%20there%2C%20this%20authentication%20failure%20resulted%20in%20fraudulent%20messages%20being%20passed%20to%20the%20Nomad%20BridgeRouter%20contract.%0A%0A%23%23%20References%0A%0ABackground%20and%20Overview%0A%0A-%20%5BHarmony%E2%80%99s%20Cross-Chain%20Future%5D(https%3A%2F%2Fmedium.com%2Fharmony-one%2Fharmonys-cross-chain-future-41d02d53b10)%0A-%20%5BAwesome%20Interoperability%5D(https%3A%2F%2Fgithub.com%2Fnomad-xyz%2Fawesome-interop)%3A%20A%20curated%20list%20of%20awesome%20interoperability%20resources%2C%20libraries%2C%20tools%20and%20more.%0A-%20%5BVitalik%3A%20why%20the%20future%20will%20be%20_multi-chain_%2C%20but%20it%20will%20not%20be%20_cross-chain_%5D(https%3A%2F%2Ftwitter.com%2Fvitalikbuterin%2Fstatus%2F1479501366192132099%3Flang%3Den)%0A-%20%5BVitalik%E2%80%99s%20Annotated%20Ethereum%202.0%20Spec%5D(https%3A%2F%2Fnotes.ethereum.org%2F%40vbuterin%2FSkeyEI3xv)%0A%0ABackground%20and%20Overview%20(Zero%20Knowledge%20Related)%0A%0A-%20%5BBridging%20the%20Multichain%20Universe%20with%20Zero%20Knowledge%20Proofs%5D(https%3A%2F%2Fmedium.com%2F%40ingonyama%2Fbridging-the-multichain-universe-with-zero-knowledge-proofs-6157464fbc86)%0A-%20%5Bawesome-zkml%5D(https%3A%2F%2Fgithub.com%2Fworldcoin%2Fawesome-zkml)%0A%0AMathematical%20Theory%0A%0A-%20%5BElliptic%20Curve%20Cryptography%3A%20a%20gentle%20introduction%5D(https%3A%2F%2Fandrea.corbellini.name%2F2015%2F05%2F17%2Felliptic-curve-cryptography-a-gentle-introduction%2F)%0A-%20%5BExploring%20Elliptic%20Curve%20Pairings%5D(https%3A%2F%2Fvitalik.ca%2Fgeneral%2F2017%2F01%2F14%2Fexploring_ecp.html)%0A%0AMathematical%20Theory%20(Zero%20Knowledge%20Related)%0A%0A-%20%5BKZG%20polynomial%20commitments%5D(https%3A%2F%2Fdankradfeist.de%2Fethereum%2F2020%2F06%2F16%2Fkate-polynomial-commitments.html)%0A%0AResearch%20Papers%0A%0A-%20%5BFraud%20and%20Data%20Availability%20Proofs%5D(https%3A%2F%2Farxiv.org%2Fpdf%2F1809.09044.pdf)%3A%20Maximising%20Light%20Client%20Security%20and%20Scaling%20Blockchains%20with%20Dishonest%20Majorities.%20_Light%20clients%2C%20also%20known%20as%20Simple%20Payment%20Verification%20(SPV)%20clients%2C%20are%20nodes%20which%20only%20download%20a%20small%20portion%20of%20the%20data%20in%20a%20blockchain%2C%20and%20use%20indirect%20means%20to%20verify%20that%20a%20given%20chain%20is%20valid._%0A%0AResearch%20Articles%0A%0A-%20%5BPaths%20toward%20single-slot%20finality%5D(https%3A%2F%2Fnotes.ethereum.org%2F%40vbuterin%2Fsingle_slot_finality)%3A%20A%20look%20at%20how%20to%20improve%20Ethereum%E2%80%99s%20LMD%20GHOST%20%2B%20Casper%20FFG%20consensus.%0A%0AResearch%20Papers%20(Zero%20Knowledge%20Related)%0A%0A-%20%5BzkBridge%3A%20Trustless%20Cross-chain%20Bridges%20Made%20Practical%5D(https%3A%2F%2Frdi.berkeley.edu%2Fzkp%2FzkBridge%2Fuploads%2Fpaper.pdf)%0A-%20%5BzkPoS%3A%20End-to-End%20Trustless%5D(https%3A%2F%2Fhyperoracle.medium.com%2Fzkpos-end-to-end-trustless-65edccd87c5a)%3A%20HyperOracle%20article%20on%20how%20zkPoS%20provides%20the%20ability%20of%20proving%20the%20consensus%20with%20ZK.%0A-%20%5BCaulk%3A%20Lookup%20Arguments%20in%20Sublinear%20Time%5D(https%3A%2F%2Feprint.iacr.org%2F2022%2F621.pdf)%0A-%20%5BHyperPlonk%3A%20Plonk%20with%20Linear-Time%20Prover%20and%20High-Degree%20Custom%20Gates%5D(https%3A%2F%2Feprint.iacr.org%2F2022%2F1355.pdf)%0A%0AResearch%20Articles%20(Zero%20Knowledge%20Related)%0A%0A-%20%5BSLONK%E2%80%94a%20simple%20universal%20SNARK%5D(https%3A%2F%2Fethresear.ch%2Ft%2Fslonk-a-simple-universal-snark%2F6420)%3A%20a%20simplification%20to%20PLONK%20called%20SLONK.%20We%20replace%20the%20permutation%20argument%20(the%20%E2%80%9CP%E2%80%9D%20in%20PLONK)%20in%20favour%20of%20a%20shift%20argument%20(the%20%E2%80%9CS%E2%80%9D%20in%20SLONK).%20We%20get%20a%20universal%20SNARK%20with%20the%20smallest%20known%20proof%20size%20and%20verification%20time.%0A-%20%5BKate%20commitments%20from%20the%20Lagrange%20basis%20without%20FFTs%5D(https%3A%2F%2Fnotes.ethereum.org%2FT0ZVaaywQAqP4jegqO3asg%3Fview)%3A%20how%20to%20commit%2C%20evaluate%20and%20open%20polynomials%20in%20the%20Lagrange%20basis%20without%20FFTs.%20This%20is%20the%20first%20part%20in%20a%20series%20(see%20part%201%2C%20part%202%2C%20part%203)%20showing%20how%20to%20do%20PLONK-style%20universal%20SNARKs%20without%20FFTs%0A-%20%5BHadamard%20checks%20from%20the%20Lagrange%20basis%20without%20FFTs%5D(https%3A%2F%2Fnotes.ethereum.org%2FIl4z42lmQtaUYFigsjsk2Q%3Fview)%3A%20how%20to%20prove%20Hadamard%20relations%20between%20polynomials%20in%20the%20Lagrange%20basis%20without%20FFTs.%20This%20is%20the%20second%20part%20(see%20part%201%2C%20part%202%2C%20part%203)%20in%20a%20series%20showing%20how%20to%20do%20PLONK-style%20universal%20SNARKs%20without%20FFTs.%0A-%20%5BPLONK-style%20SNARKs%20without%20FFTs%5D(https%3A%2F%2Fnotes.ethereum.org%2FDLRqK9V7RIOsTZkab8Hm_Q%3Fview)%3A%20how%20to%20do%20PLONK-style%20universal%20SNARKs%20without%20FFTs.%20This%20is%20part%203%20in%20a%20series%20(part%201%2C%20part%202%2C%20part%203).%0A%0AImplementation%20Articles%0A%0A-%20%5BzkBridge%3A%20Trustless%20Cross-chain%20Bridges%20Made%20Practical%5D(https%3A%2F%2Frdi.berkeley.edu%2Fzkp%2FzkBridge%2FzkBridge.html)%0A-%20%5BSuccinct%20Towards%20the%20endgame%20of%20blockchain%20interoperability%20with%20proof%20of%20consensus%5D(https%3A%2F%2Fblog.succinct.xyz%2Fpost%2F2022%2F09%2F20%2Fproof-of-consensus)%0A%0AImplementations%0A%0A-%20%5BWormhole%20ethereum%20contracts%20Implementaion.sol%5D(https%3A%2F%2Fgithub.com%2Fwormhole-foundation%2Fwormhole%2Fblob%2Fdev.v2%2Fethereum%2Fcontracts%2FImplementation.sol)%0A-%20%5Bbls%20verification%20contract%5D(https%3A%2F%2Fgithub.com%2Fsemaraugusto%2Fbls-verification-contract%2Fblob%2Fmaster%2Fcontracts%2Fverifier.sol)%0A%0ADocumentation%0A%0A-%20%5BETHEREUM%20DEVELOPMENT%20DOCUMENTATION%5D(https%3A%2F%2Fethereum.org%2Fen%2Fdevelopers%2Fdocs%2F)%0A-%20%5BMINA%20docs%5D(https%3A%2F%2Fdocs.minaprotocol.com%2F)%0A%0AAdditional%20References%0A%0A-%20%5Bnil-Foundation%20ETH-Mina%20bridge%20live%20on%20Ethereum%20testnet%20Ropsten%5D(https%3A%2F%2Fminacrypto.com%2F2022%2F04%2F27%2Fnil-foundation%2F)%0A%0A%23%23%20Bridge%20Implementation%20References%0A%0A-%20%5BHarmony%20Horizon%20Bridge%5D(.%2Fharmony-horizon)%3A%20Detailed%20code%20review%0A%20%20-%20%5BHorizon%5D(https%3A%2F%2Fgithub.com%2Fjohnwhitton%2Fhorizon%2Ftree%2FrefactorV2)%3A%20javascript%2C%20solidity%0A-%20Near%20Rainbow%20Bridge%3A%20Codebases%0A%20%20-%20%5BNear%20Rainbow%20Bridge%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge)%3A%20rust%2C%20go%2C%20solidity%2C%20javascript%0A%20%20-%20%5BNear%20Rainbow%20Token%20Connector%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-token-connector)%3A%20soldity%0A%20%20-%20SDK%0A%20%20%20%20-%20%5BNear%20Rainbow%20Bridge%20Client%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge-client%2Ftree%2Fmain%2Fpackages%2Fclient)%3A%20typescript%0A%20%20-%20Frontend%0A%20%20%20%20-%20%5BNEAR%20Rainbow%20Bridge%20Frontend%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge-frontend)%0A-%20%5BNomad%20monprepo%5D(https%3A%2F%2Fgithub.com%2Fnomad-xyz%2Fmonorepo)%3A%20Nomad%20is%20a%20cross-chain%20communication%20protocol.%20This%20repo%20contains%20the%20following%3A%20Smart%20contracts%20for%20the%20core%20Nomad%20protocol%2C%20Smart%20contracts%20for%20the%20Nomad%20token%20bridge%20SDKs%20for%20Nomad's%20core%20protocol%2C%20bridge%2C%20and%20governance%20systems%2C%20Tooling%20for%20local%20environment%20simulation%20and%20Smart%20contract%20deployment%20tooling.%0A%20%20-%20%5BNomad%20rust%5D(https%3A%2F%2Fgithub.com%2Fnomad-xyz%2Frust)%3A%20Nomad%20is%20a%20cross-chain%20communication%20standard%20that%20supports%20passing%20messages%20between%20blockchains%20easily%20and%20inexpensively.%20Like%20IBC%20light%20clients%20and%20similar%20systems%2C%20Nomad%20establishes%20message-passing%20channels%20between%20chains.%20Once%20a%20channel%20is%20established%2C%20any%20application%20on%20that%20chain%20can%20use%20it%20to%20send%20messages%20to%20others%20chains.%0A%20%20-%20%5BNomad%20gelato-sdk%5D(https%3A%2F%2Fgithub.com%2Fnomad-xyz%2Fgelato-sdk)%3A%20This%20crate%20reimplements%20Gelato's%20Relay%20SDK%20in%20Rust.%20It%20simply%20wraps%20Gelato%20Relay%20requests%20and%20responses%20to%2Ffrom%20Gelato%20endpoints%20with%20Rust%20types%20and%20methods.%0A-%20%5BSuccinct%20labs%5D(..%2Fbridge%2Fsuccinct)%3A%20Deep%20dive%20on%20Succinct%20labs%20Proof%20of%20Consensus%20for%20Ethreum.%0A%20%20-%20%5BProof%20of%20Consensus%20for%20Ethereum%5D(https%3A%2F%2Fgithub.com%2Fsuccinctlabs%2Feth-proof-of-consensus)%3A%20contains%20both%20the%20zkSNARK%20circuits%20as%20well%20as%20the%20smart%20contracts%20needed%20for%20our%20succinct%20light%20client%20implementation%2C%20as%20well%20as%20prototype%20message%20passing%20contracts%20and%20bridge%20contracts.%0A-%20%5BDatachain%20lcp%5D(https%3A%2F%2Fgithub.com%2Fdatachainlab%2Fharmony-cosmos-bridge-demo)A%20proxy%20for%20light%20client%20verification%20executed%20in%20TEE.%0A-%20%5BCosmos%20ibc-go%5D(https%3A%2F%2Fgithub.com%2Fcosmos%2Fibc-go)%3A%20allows%20blockchains%20to%20talk%20to%20each%20other.%20This%20end-to-end%2C%20connection-oriented%2C%20stateful%20protocol%20provides%20reliable%2C%20ordered%2C%20and%20authenticated%20communication%20between%20heterogeneous%20blockchains.%0A%20%20-%20%5BCosmos%20ibc%5D(https%3A%2F%2Fgithub.com%2Fcosmos%2Fibc)%3A%20ibc%20specification%0A-%20%5BCosmos%20gravity%20bridge%5D(https%3A%2F%2Fgithub.com%2Fcosmos%2Fgravity-bridge)%3A%20Cosmos%20and%20Ethereum%20bridge%20designed%20to%20run%20on%20the%20Cosmos%20Hub%20focused%20on%20maximum%20design%20simplicity%20and%20efficiency.%0A-%20%5BAxelar%5D(https%3A%2F%2Fgithub.com%2Faxelarnetwork%2Faxelar-core)%3A%20based%20on%20the%20Cosmos%20SDK%20is%20the%20main%20application%20of%20the%20axelar%20network.%20%5Bwhitepaper%5D(https%3A%2F%2Faxelar.network%2Faxelar_whitepaper.pdf)%20%5Bdocs%5D(https%3A%2F%2Fdocs.axelar.dev%2F)%0A-%20%5BCeler%20cBridge-node%5D(https%3A%2F%2Fgithub.com%2Fceler-network%2FcBridge-node)%3A%20Celer%20cBridge%20relay%20node%20implementation%20in%20Golang.%20(%5Bdocs%5D(https%3A%2F%2Fcbridge-docs.celer.network%2F))%0A%20%20-%20%5BCeler%20cBridge-contracts%5D(https%3A%2F%2Fgithub.com%2Fceler-network%2FcBridge-contracts)%3A%20Contracts%20for%20cBridge%2C%20cross-chain%20liquidity%20solution%20powered%20by%20Hashed-Timelock%20Transfers%0A%20%20-%20%5BCeler%20cBridge-cowa%5D(https%3A%2F%2Fgithub.com%2Fceler-network%2Fcbridge-cowa)%3A%20CosmWasm%20Rust%20smart%20contracts%20for%20cbridge%0A-%20%5BWormhole%5D(https%3A%2F%2Fgithub.com%2Fwormhole-foundation%2Fwormhole)%3A%20the%20reference%20implementation%20of%20the%20Wormhole%20protocol.%20(%5Bdocs%5D(https%3A%2F%2Fbook.wormhole.com%2Fintroduction%2Fintroduction.html))%0A-%20%5BLayerZero%20Labs%20LayerZero%5D(https%3A%2F%2Fgithub.com%2FLayerZero-Labs%2FLayerZero)%3A%20contains%20the%20smart%20contracts%20for%20LayerZero%20Endpoints.%20(%5Bdocs%5D(https%3A%2F%2Flayerzero.gitbook.io%2Fdocs%2F))%0A-%20%5BMultichain%20CrossChain-Bridge%5D(https%3A%2F%2Fgithub.com%2Fanyswap%2FCrossChain-Bridge)%3A%20Cross-Chain%20bridge%20based%20on%20Anyswap%20MPC%20network.%20(%5Bdocs%5D(https%3A%2F%2Fdocs.multichain.org%2Fgetting-started%2Fintroduction))%0A-%20%5BSynapse%20Protocol%5D(https%3A%2F%2Fgithub.com%2Fsynapsecns)%3A%20a%20universal%20interoperability%20protocol%20that%20enables%20secure%20cross-chain%20communication.(%20%5Bdocs%5D(https%3A%2F%2Fdocs.synapseprotocol.com%2F))%0A%20%20-%20%5Bsynapse-contracts%5D(https%3A%2F%2Fgithub.com%2Fsynapsecns%2Fsynapse-contracts)%3A%20smart%20contracts%20for%20Synapse%20Protocol.%0A-%20%5BHop%20Protocol%20contracts%5D(https%3A%2F%2Fgithub.com%2Fhop-protocol%2Fcontracts)%3A%20Hop%20is%20a%20scalable%20rollup-to-rollup%20general%20token%20bridge.%20Heare%20are%20the%20smart%20contracts%20that%20power%20the%20Hop%20Exchange.%20(%5Bwhitepaper%5D(https%3A%2F%2Fhop.exchange%2Fwhitepaper.pdf)%2C%20%5Bdocs%5D(https%3A%2F%2Fdocs.hop.exchange%2Fbasics%2Fa-short-explainer)).%0A-%20%5BRouter%20Protocol%5D(https%3A%2F%2Fgithub.com%2Forgs%2Frouter-protocol%2Frepositories)%3A%20(%5Bwhitepaper%5D(https%3A%2F%2Fdocs.routerprotocol.com%2Fwhitepaper%2Fintroducing-router-protocol)%2C%20%5Bdocs%5D(https%3A%2F%2Fdev.routerprotocol.com%2F))%0A-%20%5BParity%20Bridges%20Common%5D(https%3A%2F%2Fgithub.com%2Fparitytech%2Fparity-bridges-common)%3A%20a%20collection%20of%20components%20for%20building%20bridges.%0A-%20%5BSnowfork%20snowbridge%5D(https%3A%2F%2Fgithub.com%2FSnowfork%2Fsnowbridge)%3A%20A%20trustless%20bridge%20between%20Polkadot%20and%20Ethereum.%20(%5Bdocs%5D(https%3A%2F%2Fdocs.snowbridge.network%2F))%0A",lastUpdatedAt:1753129136e3},{lazy:()=>o2(()=>import("./intro-djeLbpl0.js"),[]),path:"/research/bridge/intro.html",type:"mdx",filePath:"research/bridge/intro.mdx",content:"%23%20Crosschain%20Bridge%20Analysis%20-%20An%20Introduction%0A%0A-%20date%3A%202023-02-04%0A-%20last%20updated%3A%202023-02-04%0A%0AHere%20we%20present%20a%20survey%20of%20existing%20bridge%20designs%2C%20historical%20security%20incidents%2C%20and%20a%20brief%20discussion%20of%20common%20components%20and%20where%20ZKP%20may%20be%20used.%0A%0A%23%23%20Bridge%20Taxonomy%0A%0ABridge%20designs%20evolved%20as%20DeFi%20and%20multi-chain%20paradigm%20gained%20popularity.%20Our%20summary%20is%20inspired%20by%20prior%20taxonomy%20work%20by%20%5BGanesha%20Upadhyaya%5D(https%3A%2F%2Ftwitter.com%2Fgupadhyaya)%20in%20%5BA%20Classification%20of%20Various%20Bridging%20Technologies%5D(https%3A%2F%2Fmedium.com%2Fharmony-one%2Fharmonys-cross-chain-future-41d02d53b10)%2C%20%5BDmitriy%20Berenzon%5D(https%3A%2F%2Ftwitter.com%2Fdberenzon)%20in%20%5BBlockchain%20Bridges%3A%20Building%20Networks%20of%20Cryptonetworks%5D(https%3A%2F%2Fmedium.com%2F1kxnetwork%2Fblockchain-bridges-5db6afac44f8)%2C%20and%20by%20multiple%20researchers%20from%20Jump%20Crypto%20in%20%5BSecurity%20Stack-Up%3A%20How%20Bridges%20Compare%5D(https%3A%2F%2Fjumpcrypto.com%2Fsecurity-stack-up-how-bridges-compare%2F)%0A%0A%3E%20At%20a%20very%20high%20level%2C%20there%20are%20two%20types%20of%20bridging%20solutions%3A%201)%20proof-based%20and%202)%20committee-based.%20The%20proof-based%20solutions%20entail%20cryptographic%20proving%20of%20the%20validity%20of%20any%20transaction%20of%20one%20chain%20in%20the%20other%2C%20whereas%20the%20committee-based%20solution%20relies%20on%20the%20social%20consensus%20of%20the%20bridge%20validators%20to%20attest%20for%20the%20transaction%20validity%2C%20which%20often%20involves%20no%20cryptographic%20proving.%0A%3E%0A%3E%20-%20Ganesha%20Upadhyaya%20in%20%22A%20Classification%20of%20Various%20Bridging%20Technologies%22%0A%0A%23%23%23%20Proof%20Based%0A%0A%23%23%23%23%20Validity%20Proofs%0A%0AValidity-proof%20based%20bridges%20prioritize%20security%2C%20trustlessness%2C%20permissionlessness%2C%20and%20delay%20minimization%0A%0A%7C%20Type%20%20%20%7C%20Design%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7C%20CodeotezkBridge%5D(https%3A%2F%2Frdi.berkeley.edu%2Fzkp%2FzkBridge%2Fuploads%2Fpaper.pdfy%20Berkeley%20researcehrs%20(%5BTwitter%5D(https%3A%2F%2Ftwitter.com%2Fzkcollective))%20%7C%0A%7C%20ZKP%20%20%20%20%7C%20%5BTelepathy%5D(https%3A%2F%2Fdocs.telepathy.xyz%2Fprotocol%2Foverview)%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7C%20%5BTelepathy%5D(https%3A%2F%2Fgithub.com%2Fsuccinctlabs%3Fq%3Dtelepathy%26type%3Dall%26language%3D%26sort%3D)%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7C%20%5BDemo%5D(https%3A%2F%2Fdemo.telepathy.xyz%2F)%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7C%20By%20%5BSuccint%20Labs%5D(https%3A%2F%2Fsuccinct.xyz)%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7C%0A%7C%20Native%20%7C%20%5BHorizon%5D(https%3A%2F%2Farxiv.org%2Fpdf%2F2101.06000.pdf)%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7C%20%5BHorizon%5D(https%3A%2F%2Fgithub.com%2Fharmony-one%2Fhorizon)%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7C%20TBD%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7C%20Inactive.%20By%20Harmony%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7C%0A%7C%20Native%20%7C%20%5BIBC%5D(https%3A%2F%2Fgithub.com%2Fcosmos%2Fibc)%20(%5BIntro%5D(https%3A%2F%2Ftutorials.cosmos.network%2Facademy%2F3-ibc%2F1-what-is-ibc.html))%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7C%20%5Bibc-go%5D(https%3A%2F%2Fgithub.com%2Fcosmos%2Fibc-go)%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7C%20Various%20%2F%20%5BExplorer%5D(https%3A%2F%2Fhub.mintscan.io%2Fchains%2Fibc-network)%20%7C%20Within%20Cosmos%20Network%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7C%0A%7C%20Native%20%7C%20%5BGravity%5D(https%3A%2F%2Fgithub.com%2FGravity-Bridge%2FGravity-Bridge%2Fblob%2Fmain%2Fdocs%2Fdesign%2Foverview.mdx)%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7C%20%5BGravity%5D(https%3A%2F%2Fgithub.com%2FGravity-Bridge%2FGravity-Bridge)%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7C%20%5BGravity%5D(https%3A%2F%2Fbridge.blockscape.network%2F)%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7C%20Ethereum%20and%20Cosmos%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7C%0A%7C%20Native%20%7C%20%5BAWM%5D(https%3A%2F%2Fgithub.com%2Fava-labs%2Fxsvm)%20(%5BIntro%5D(https%3A%2F%2Fmedium.com%2Favalancheavax%2Favalanche-warp-messaging-awm-launches-with-the-first-native-subnet-to-subnet-message-on-avalanche-c0ceec32144a))%20%7C%20%5BWrap%5D(https%3A%2F%2Fgithub.com%2Fava-labs%2Favalanchego%2Ftree%2Fmaster%2Fvms%2Fplatformvm%2Fwarp)%20%2F%20%5BXSVM%5D(https%3A%2F%2Fgithub.com%2Fava-labs%2Fxsvm)%20%7C%20TBD%20%2F%20%5BExplorer%5D(https%3A%2F%2Fsubnets.avax.network%2Fsubnets)%20%20%20%20%20%20%20%20%20%20%20%7C%20Within%20Avalanche%20Subnets%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7C%0A%7C%20Native%20%7C%20%5BSnowbridge%5D(https%3A%2F%2Fdocs.snowbridge.network%2Farchitecture%2Foverview)%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7C%20%5Bsnowbridge%5D(https%3A%2F%2Fgithub.com%2FSnowfork%2Fsnowbridge)%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7C%20TBD%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7C%0A%7C%20LCP%20%20%20%20%7C%20%5BDatachain%20LCP%5D(https%3A%2F%2Fmedium.com%2Flcp-network%2Flcp-a-proxy-for-light-client-verification-to-realize-trust-minimized-and-gas-efficient-f7d5868e4b0)%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7C%20%5BLCP%5D(https%3A%2F%2Fgithub.com%2Fdatachainlab%2Flcp)%20%2F%20%5BDemo%5D(https%3A%2F%2Fgithub.com%2Fdatachainlab%2Fharmony-cosmos-bridge-demo)%20%20%20%20%20%20%20%20%20%20%20%20%7C%20TBD%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7C%20Relies%20on%20TEE%20enclave%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7C%0A%7C%20LCP%20%20%20%20%7C%20%5BAvalanche%5D(https%3A%2F%2Fmedium.com%2Favalancheavax%2Favalanche-bridge-secure-cross-chain-asset-transfers-using-intel-sgx-b04f5a4c7ad1)%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7C%20TBD%20%2F%20%5BAudit%5D(https%3A%2F%2Fgithub.com%2Fava-labs%2Faudits%2Fblob%2Fmain%2Fbridge%2FAvalanche_Bridge_Security_Audit_Report_Halborn_v1_1.pdf)%20%7C%20%5Bcore.app%5D(https%3A%2F%2Fcore.app%2Fbridge%2F)%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7C%20Relies%20on%20TEE%20enclave%20(Intel%20SGX)%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7C%0A%0A%23%23%23%23%20Fraud%20Proofs%0A%0AFraud-proof%20based%20bridges%20assume%20all%20participants%20are%20truthful%20unless%20someone%20presents%20a%20proof%20showing%20otherwise.%20As%20a%20result%2C%20they%20must%20leave%20a%20wide%20fraud-proof%20time%20window%20and%20carefully%20design%20economic%20incentives%20for%20such.%20This%20limitation%20inevitably%20incurs%20much%20higher%20delay%2C%20but%20makes%20implementation%20substantially%20easier%20and%20costs%20significantly%20less%20to%20operate%20and%20maintain.%20Fraud-proof%20based%20bridges%20face%20more%20security%20risks%20due%20to%20reliance%20on%20fraud-prover%20and%20economic%20incentives%2C%20but%20still%20far%20less%20risky%20than%20committee-based%20bridges.%0A%0A%7C%20Design%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7C%20Code%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7C%20UI%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7C%20Note%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7C%0A%7C%20----------------------------------------------------------------------------------------------------------------------------------------------------%20%7C%20------------------------------------------------------------------%20%7C%20-------------------------------------------------------%20%7C%20--------------------------------%20%7C%0A%7C%20%5BRainbow%5D(https%3A%2F%2Fnear.org%2Fblog%2Feth-near-rainbow-bridge%2F)%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7C%20%5Brainbow-bridge%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge)%20%7C%20%5Brainbowbridge.app%5D(https%3A%2F%2Frainbowbridge.app%2Ftransfer)%20%7C%20By%20NEAR%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7C%0A%7C%20%5BNomad%5D(https%3A%2F%2Fdocs.nomad.xyz%2Fgovernance-bridge%2Farchitecture)%20(%5BIntro%5D(https%3A%2F%2Fmedium.com%2Fnomad-xyz-blog%2Fthe-nomad-design-philosophy-6fc0eacf3263))%20%7C%20%5Bmonorepo%5D(https%3A%2F%2Fgithub.com%2Fnomad-xyz%2Fmonorepo)%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7C%20%5Bapp.nomad.xyz%5D(https%3A%2F%2Fapp.nomad.xyz%2F)%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7C%20Hacked%20%5C%24200M%20(engineering%20flaw)%20%7C%0A%7C%20%5BDarwinia%5D(https%3A%2F%2Fdocs.darwinia.network%2F)%20(%5BPaper%5D(https%3A%2F%2Fdarwinia.network%2Fitering_io_optimistic_bridge_technical_paper_en.pdf))%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7C%20%5Bdarwinia%5D(https%3A%2F%2Fgithub.com%2Fdarwinia-network%2Fdarwinia)%20%20%20%20%20%20%20%20%20%20%20%7C%20TBD%20%2F%20%5BExplorer%5D(https%3A%2F%2Fdarwinia.subscan.io%2F)%20%20%20%20%20%20%20%20%20%20%7C%0A%0A%23%23%23%20Committee%20Based%0A%0A%7C%20Sub%20Category%20%20%20%20%20%20%20%20%20%7C%20Type%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7C%20Design%2FDocsmplementation%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7C%20Frontendrotocol%20Validators%20%20%7C%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7C%20%5BCosmos%20Gravity%20Bridge%5D(https%3A%2F%2Fwww.gravitybridge.net%2Ffaqgravity-bridge%5D(https%3A%2F%2Fgithub.com%2Fcosmos%2Fgravity-bridge)%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7C%20%5Bhttps%3A%2F%2Fbridge.blockscape.network%2F%5D(https%3A%2F%2Fbridge.blockscape.network%2F)%20%5Bhttps%3A%2F%2Femeris.com%2F%20(ON%20HOLD)%5D(https%3A%2F%2Femeris.com%2F)%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7C%0A%7C%20Proof%20of%20Stake%20Chain%20%7C%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7C%20%5BAxelar%5D(https%3A%2F%2Faxelar.network%2Faxelar_whitepaper.pdf)%20%5Bdocs%5D(https%3A%2F%2Fdocs.axelar.devaxelar-core%5D(https%3A%2F%2Fgithub.com%2Faxelarnetwork%2Faxelar-coreroof%20of%20Stake%20Chain%20%7C%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7C%20%5BCeler%20cBridge%5D(https%3A%2F%2Fcbridge-docs.celer.network%2F)%20%5BCeler%20Network%20Whitepaper%5D(https%3A%2F%2Fceler.network%2Fdoc%2FCelerNetwork-Whitepaper.pdf)%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7C%20%5BcBridge-node%5D(https%3A%2F%2Fgithub.com%2Fceler-network%2FcBridge-node)%2C%20%5BcBridge-contracts%5D(https%3A%2F%2Fgithub.com%2Fceler-network%2FcBridge-contracts)%2C%20%5BcBridge-cowa%5D(https%3A%2F%2Fgithub.com%2Fceler-network%2Fcbridge-cowa)%20%7C%20%5Bhttps%3A%2F%2Fcbridge.celer.network%2F%5D(https%3A%2F%2Fcbridge.celer.network%2F)%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7C%0A%7C%20External%20Networks%20%20%20%20%7C%20Multisig%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7C%20%5BHorizon%201.0%5D(https%3A%2F%2Fmedium.com%2Fharmony-one%2Fintroducing-horizon-an-ethereum-harmony-cross-chain-bridge-2f56ed7214b3)%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7C%20%5Bgithub%5D(https%3A%2F%2Fgithub.com%2Fharmony-one%2Fhorizonxternal%20Networks%20%20%20%20%7C%20Multisig%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7C%20%5BWormhole%5D(https%3A%2F%2Fbook.wormhole.com%2Fwormhole%2F2_architectureOverview.htmlwormhole%5D(https%3A%2F%2Fgithub.com%2Fwormhole-foundation%2Fwormhole)%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7C%20%5Bnetwork%5D(https%3A%2F%2Fwormhole.com%2Fnetwork%2F)%20%5Becosystem%5D(https%3A%2F%2Fwormhole.com%2Fecosystem%2F)%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7C%0A%7C%20External%20Networks%20%20%20%20%7C%20Decentralized%20Oracle%20Network%20(DON)%20%7C%20%5BChainlink%20(CCIP)%5D(https%3A%2F%2Fblog.chain.link%2Fintroducing-the-cross-chain-interoperability-protocol-ccip%2F)%2C%20%5Bweb%5D(https%3A%2F%2Fchain.link%2Fcross-chain)%20%5BChainlink%20Whitepaper%5D(https%3A%2F%2Fresearch.chain.link%2Fwhitepaper-v2.pdf%3F_ga%3D2.40239147.884807142.1677705772-204109244.1677705772)%20%7C%20%5Bccip-read%5D(https%3A%2F%2Fgithub.com%2Fsmartcontractkit%2Fccip-read)%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7C%20N%2FA%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7C%0A%7C%20External%20Networks%20%20%20%20%7C%20Decentralized%20Oracle%20Network%20(DON)%20%7C%20%5BLayerZero%5D(https%3A%2F%2Flayerzero.network%2Fpdf%2FLayerZero_Whitepaper_Release.pdf)%2C%20%5Bdocs%5D(https%3A%2F%2Flayerzero.gitbook.io%2Fdocs%2F)%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7C%20%5BLayerZero%5D(https%3A%2F%2Fgithub.com%2FLayerZero-Labs%2FLayerZero)%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7C%20%5Bhttps%3A%2F%2Ftheaptosbridge.com%2Fbridge%5D(https%3A%2F%2Ftheaptosbridge.com%2Fbridge)%20%5Bhttps%3A%2F%2Fbitcoinbridge.network%2Fbridge%5D(https%3A%2F%2Fbitcoinbridge.network%2Fbridge)%20%5Bhttps%3A%2F%2Fbridge.harmony.one%2Fone%5D(https%3A%2F%2Fbridge.harmony.one%2Fone)%20%7C%0A%7C%20External%20Networks%20%20%20%20%7C%20Multi-Party%20Communication%20(MPC)%20%20%20%20%7C%20%5BMultichain%20bridge%5D(https%3A%2F%2Fdocs.multichain.org%2Fgetting-started%2Fintroduction)%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7C%20%5BCross-Chain-Bridge%5D(https%3A%2F%2Fgithub.com%2Fanyswap%2FCrossChain-Bridge)%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7C%20%5Bhttps%3A%2F%2Fbsc.anyswap.exchange%2F%5D(https%3A%2F%2Fbsc.anyswap.exchange%2Fbridge%23%2Frouter)%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7C%0A%7C%20External%20Networks%20%20%20%20%7C%20Multi-Party%20Communication%20(MPC)%20%20%20%20%7C%20%5BSynapse%20Protocol%5D(https%3A%2F%2Fmedium.com%2Fsynapse-protocol%2Fintroducing-synapse-protocol-2af926143deb)%2C%20%5Bdocs%5D(https%3A%2F%2Fdocs.synapseprotocol.com%2F)%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7C%20%5Bsynapsecns%5D(https%3A%2F%2Fgithub.com%2Forgs%2Fsynapsecns%2Frepositories)%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7C%20%5Bhttps%3A%2F%2Fsynapseprotocol.com%2F%5D(https%3A%2F%2Fsynapseprotocol.com%2F)%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7C%0A%0A%23%23%23%20Others%0A%0A%7C%20Sub%20Category%20%20%20%20%20%20%7C%20Type%20%7C%20Design%2FDocs%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7C%20Implementation%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7C%20Frontendrollup-to-rollup%20%20%7C%20%20%20%20%20%20%7C%20%5BHop%20Protocol%5D(https%3A%2F%2Fhop.exchange%2Fwhitepaper.pdf)%2C%20%5Bdocs%5D(https%3A%2F%2Fdocs.hop.exchange%2Fbasics%2Fa-short-explainer)%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7C%20%5Bcontracts%5D(https%3A%2F%2Fgithub.com%2Fhop-protocol%2Fcontracts)%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7C%20%5Bhttps%3A%2F%2Fapp.hop.exchange%2F%5D(https%3A%2F%2Fapp.hop.exchange%2F)%20%20%20%20%20%20%20%20%20%20%20%7C%0A%7C%20mesh-network%20%20%20%20%20%20%7C%20%20%20%20%20%20%7C%20%5BRouter%20Protocol%5D(https%3A%2F%2Fdocs.routerprotocol.com%2Fwhitepaper%2Fintroducing-router-protocol%2Farchitecture)%2C%20%5Bdocs%5D(https%3A%2F%2Fdev.routerprotocol.com%2F)%20%7C%20%5BRouter%20Protocol%5D(https%3A%2F%2Fgithub.com%2Forgs%2Frouter-protocol%2Frepositories)%20%20%20%20%20%20%7C%20%5Bhttps%3A%2F%2Fapp.thevoyager.io%2Fswap%5D(https%3A%2F%2Fapp.thevoyager.io%2Fswap)%20%7C%0A%7C%20Bridge%20Components%20%7C%20%20%20%20%20%20%7C%20%5BParity%20Bridges%20Common%5D(https%3A%2F%2Fgithub.com%2Fparitytech%2Fparity-bridges-common%23high-level-architecture)%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7C%20%5Bparity-bridges-common%5D(https%3A%2F%2Fgithub.com%2Fparitytech%2Fparity-bridges-common)%20%7C%20TBD%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7C%0A%0A%23%23%23%20Miscellaneous%0A%0A-%20TVL%20of%20bridges%20can%20be%20found%20on%20%5BDeFi%20Llama%5D(https%3A%2F%2Fdefillama.com%2Fprotocols%2FBridge)%0A-%20Some%20tools%20and%20queries%20are%20already%20prepared%20on%20Dune%20Analytics%20for%20analysis%20of%20bridge%20volume.%20See%20for%20example%3A%20https%3A%2F%2Fdune.com%2Fqueries%2F511393.%0A%0A%23%23%20Bridging%20Components%0A%0AFollowing%20are%20the%20main%20components%20for%20Cross-Chain%20Bridges%20we%20review%0A%0A-%20Approach%20%3A%20The%20design%20approach%20for%20the%20bridge%0A-%20Proving%20Mechanisms%3A%20How%20do%20we%20ensure%20transactions%20are%20valid%0A%20%20-%20Transaction%20Proofs%3A%20How%20do%20we%20ensure%20a%20transacion%20was%20included%20in%20a%20valid%20block%0A%20%20-%20Block%20Proofs%3A%20How%20do%20we%20ensure%20a%20block%20was%20included%20in%20the%20canonical%20chain%0A-%20Relayer%20Mechanisms%0A%20%20-%20Relaying%3A%20How%20do%20we%20relay%20messages%20(blocks%20and%20transactions)%20between%20chains%0A-%20Light%20Clients%3A%20What%20Light%20client%20approaches%20can%20we%20leverage%0A-%20Token%20Lockers%3A%20How%20do%20we%20safely%20store%20bridged%20assets%20in%20a%20trustless%20cost%20effective%20way%0A-%20Multi-chain%20support%3A%20What%20chains%20are%20supported%20and%20what%20is%20the%20proces%20to%20add%20additional%20chains.%0A-%20Economics%3A%20What%20are%20the%20costs%20for%20bridging%20between%20chains%20and%20how%20do%20we%20secure%20and%20incentivize%20validators%20and%20relayers.%0A%0A%23%23%20Cross%20Chain%20Communication%20Protocols%0A%0A-%20%5BINTER%E2%80%91BLOCKCHAINCOMMUNICATION%20PROTOCOL%5D(https%3A%2F%2Fibcprotocol.org%2F)%0A-%20%5BCosmos%20IBC%3A%20Interchain%20Standards%5D(https%3A%2F%2Fgithub.com%2Fcosmos%2Fibc)%0A-%20%5BIBC%20Update%E2%80%94%20The%20Internet%20of%20Blockchains%20Is%20Growing%20Fast%5D(https%3A%2F%2Fblog.cosmos.network%2Fibc-update-the-internet-of-blockchains-is-growing-fast-dae883228ebf)%0A-%20%5BPolkadot%20Cross-Consensus%20Message%20(XCM)%20Format%5D(https%3A%2F%2Fgithub.com%2Fparitytech%2Fxcm-format%2Fblob%2Fmaster%2FREADME.mdx)%0A-%20%5BXCMP%20Design%5D(https%3A%2F%2Fresearch.web3.foundation%2Fen%2Flatest%2Fpolkadot%2FXCMP%2Findex.html)%0A-%20%5BHRMP%20Channels%5D(https%3A%2F%2Fresearch.web3.foundation%2Fen%2Flatest%2Fpolkadot%2FXCMP%2FHRMP%2520channels.html)%0A-%20%5BThe%20Path%20of%20a%20Parachain%20Block%5D(https%3A%2F%2Fpolkadot.network%2Fblog%2Fthe-path-of-a-parachain-block%2F)%0A-%20%5BParity%20Bridges%20Common%5D(https%3A%2F%2Fgithub.com%2Fparitytech%2Fparity-bridges-common%2Fblob%2Fmaster%2FREADME.mdx)%0A%0A%23%23%20Bridge%20Attack%20Vectors%20and%20Hacks%0A%0AFollowing%20is%20an%20overview%20of%20some%20common%20bridge%20attack%20vectors.%0A%0A-%20%5BVitalik%3B%20security%20limits%20of%20bridges%5D(https%3A%2F%2Fold.reddit.com%2Fr%2Fethereum%2Fcomments%2Frwojtk%2Fama_we_are_the_efs_research_team_pt_7_07_january%2Fhrngyk8%2F)%0A%0A%3E%20Now%2C%20imagine%20what%20happens%20if%20you%20move%20100%20ETH%20onto%20a%20bridge%20on%20Solana%20to%20get%20100%20Solana-WETH%2C%20and%20then%20Ethereum%20gets%2051%25%20attacked.%20The%20attacker%20deposited%20a%20bunch%20of%20their%20own%20ETH%20into%20Solana-WETH%20and%20then%20reverted%20that%20transaction%20on%20the%20Ethereum%20side%20as%20soon%20as%20the%20Solana%20side%20confirmed%20it.%20The%20Solana-WETH%20contract%20is%20now%20no%20longer%20fully%20backed%2C%20and%20perhaps%20your%20100%20Solana-WETH%20is%20now%20only%20worth%2060%20ETH.%20Even%20if%20there's%20a%20perfect%20ZK-SNARK-based%20bridge%20that%20fully%20validates%20consensus%2C%20it's%20still%20vulnerable%20to%20theft%20through%2051%25%20attacks%20like%20this.%0A%3E%0A%3E%20It's%20always%20safer%20to%20hold%20Ethereum-native%20assets%20on%20Ethereum%20or%20Solana-native%20assets%20on%20Solana%20than%20it%20is%20to%20hold%20Ethereum-native%20assets%20on%20Solana%20or%20Solana-native%20assets%20on%20Ethereum.%20And%20in%20this%20context%2C%20%22Ethereum%22%20refers%20not%20just%20to%20the%20base%20chain%2C%20but%20also%20any%20proper%20L2%20that%20is%20built%20on%20it.%20If%20Ethereum%20gets%2051%25%20attacked%20and%20reverts%2C%20Arbitrum%20and%20Optimism%20revert%20too%2C%20and%20so%20%22cross-rollup%22%20applications%20that%20hold%20state%20on%20Arbitrum%20and%20Optimism%20are%20guaranteed%20to%20remain%20consistent%20even%20if%20Ethereum%20gets%2051%25%20attacked.%20And%20if%20Ethereum%20does%20not%20get%2051%25%20attacked%2C%20there's%20no%20way%20to%2051%25%20attack%20Arbitrum%20and%20Optimism%20separately.%20Hence%2C%20holding%20assets%20issued%20on%20Optimism%20wrapped%20on%20Arbitrum%20is%20still%20perfectly%20safe.%0A%3E%0A%3E%20Why%20a%20rollup%20can't%20just%20%22go%20use%20another%20data%20layer%22.%20If%20a%20rollup%20stores%20its%20data%20on%20Celestia%20or%20BCH%20or%20whatever%20else%20but%20deals%20with%20assets%20on%20Ethereum%2C%20if%20that%20layer%20gets%2051%25%20attacked%20you're%20screwed.%20The%20DAS%20on%20Celestia%20providing%2051%25%20attack%20resistance%20doesn't%20actually%20help%20you%20because%20the%20Ethereum%20network%20isn't%20reading%20that%20DAS%3B%20it%20would%20be%20reading%20a%20bridge%2C%20which%20would%20be%20vulnerable%20to%2051%25%20attacks.%20To%20be%20a%20rollup%20that%20provides%20security%20to%20applications%20using%20Ethereum-native%20assets%2C%20you%20have%20to%20use%20the%20Ethereum%20data%20layer%20(and%20likewise%20for%20any%20other%20ecosystem).%0A%0AHere%20are%20some%20sample%20hacks%0A%0A-%20%5BVulnerabilities%20in%20Cross-chain%20Bridge%20Protocols%20Emerge%20as%20Top%20Security%20Risk%5D(https%3A%2F%2Fblog.chainalysis.com%2Freports%2Fcross-chain-bridge-hacks-2022%2F)%0A%0A%3E%20Following%20last%20night%E2%80%99s%20exploit%20of%20the%20Nomad%20Bridge%2C%20Chainalysis%20estimates%20that%20%242%20billion%20in%20cryptocurrency%20has%20been%20stolen%20across%2013%20separate%20cross-chain%20bridge%20hacks%2C%20the%20majority%20of%20which%20was%20stolen%20this%20year.%20Attacks%20on%20bridges%20account%20for%2069%25%20of%20total%20funds%20stolen%20in%202022%20so%20far.%0A%0A-%20%5BEXPLAINED%3A%20THE%20QUBIT%20HACK%20(JANUARY%202022)%5D(https%3A%2F%2Fhalborn.com%2Fexplained-the-qubit-hack-january-2022%2F)%0A%0A%3E%20The%20exploited%20contract%20used%20a%20modified%20safeTransferFrom()%20function%20which%20instead%20of%20making%20use%20of%20functionCall()%20to%20verify%20that%20the%20target%20address%20contained%20contract%20code%2C%20used%20the%20call()%20function%20directly.%20As%20the%200%20address%20has%20no%20code%20at%20all%2C%20no%20code%20is%20run%2C%20and%20the%20call%20is%20completed%20successfully%20without%20reverting.%20As%20a%20result%2C%20the%20deposit%20function%20executed%20successfully%20but%20no%20real%20tokens%20were%20deposited.%0A%3E%0A%3E%20The%20Ethereum%20QBridge%20caught%20the%20Deposit%20event%20and%20interpreted%20it%20as%20a%20valid%20deposit%20of%20ETH.%20As%20a%20result%2C%20qXETH%20tokens%20were%20minted%20for%20the%20attacker%20on%20BSC.%0A%0A-%20%5BEXPLAINED%3A%20THE%20WORMHOLE%20HACK%20(FEBRUARY%202022)%5D(https%3A%2F%2Fhalborn.com%2Fexplained-the-wormhole-hack-february-2022%2F)%0A%0A%3E%20The%20actual%20extraction%20of%20120k%20ETH%20from%20the%20Wormhole%20bridge%20came%20at%20the%20end%20of%20a%20series%20of%20events.%20The%20actual%20flow%20of%20the%20attack%20was%3A%0A%3E%0A%3E%201.%20The%20attacker%20creates%20a%20validator%20action%20approval%20(VAA)%20with%20a%20call%20to%20post_vaa%0A%3E%202.%20This%20VAA%20was%20used%20in%20a%20call%20to%20complete_wrapped%20to%20mint%20the%20120%2C000%20ETH%20extracted%20in%20the%20attack%0A%3E%203.%20The%20attacker%20%E2%80%9Clegitimately%E2%80%9D%20extracted%20the%20minted%20tokens%20from%20the%20bridge%0A%3E%0A%3E%20The%20vulnerability%20that%20made%20the%20attack%20possible%20was%20a%20failure%20to%20perform%20proper%20signature%20verification%20in%20the%20VAA%20creation%20process.%20The%20role%20of%20signature%20verification%20is%20delegated%20several%20times%20from%20post_vaa%20to%20verify_signatures%20to%20Secp256k1.%0A%0A-%20%5BEXPLAINED%3A%20THE%20RONIN%20HACK%20(MARCH%202022)%5D(https%3A%2F%2Fhalborn.com%2Fexplained-the-ronin-hack-march-2022%2F)%0A%0A%3E%20The%20Ronin%20Network%20attack%20was%20extremely%20stealthy.%20In%20fact%2C%20the%20hack%20wasn%E2%80%99t%20noticed%20until%20six%20days%20after%20it%20occurred%20when%20the%20project%20team%20was%20notified%20by%20a%20user%20that%20they%20couldn%E2%80%99t%20withdraw%20about%205k%20ETH%20from%20the%20project%E2%80%99s%20bridge.%20Further%20investigation%20discovered%20the%20largest%20hack%20in%20DeFi%20history%20to%20date.%0A%3E%0A%3E%20The%20Ronin%20Network%20hack%20was%20made%20possible%20by%20compromised%20private%20keys.%20The%20Ronin%20Network%20uses%20a%20set%20of%20nine%20validator%20nodes%20to%20approve%20transactions%20on%20the%20bridge%2C%20and%20a%20deposit%20or%20withdrawal%20requires%20approval%20by%20a%20majority%20of%20five%20of%20these%20nodes.%20The%20attacker%20gained%20control%20of%20four%20validators%20controlled%20by%20Sky%20Mavis%20and%20a%20third-party%20Axie%20DAO%20validator%20that%20signed%20their%20malicious%20transactions.%0A%0A-%20%5BEXPLAINED%3A%20THE%20HARMONY%20HORIZON%20BRIDGE%20HACK%5D(https%3A%2F%2Fhalborn.com%2Fexplained-the-harmony-horizon-bridge-hack%2F)%0A%0A%3E%20Like%20most%20cross-chain%20bridges%2C%20the%20Harmony%20Horizon%20Bridge%20has%20a%20validation%20process%20for%20approving%20transactions%20being%20transferred%20over%20the%20bridge.%20In%20this%20case%2C%20the%20approvals%20process%20uses%20a%20multi-signature%20scheme%20with%20five%20validators.%0A%3E%0A%3E%20However%2C%20the%20bridge%20only%20used%20a%202%20of%205%20validation%20scheme.%20This%20means%20that%20only%20two%20blockchain%20accounts%20needed%20to%20be%20compromised%20for%20an%20attacker%20to%20approve%20any%20malicious%20transaction%20that%20they%20wished.%0A%3E%0A%3E%20The%20Harmony%20Horizon%20bridge%20was%20exploited%20via%20the%20theft%20of%20two%20private%20keys.%20These%20private%20keys%20were%20encrypted%20with%20both%20a%20passphrase%20and%20a%20key%20management%20service%2C%20and%20no%20system%20had%20access%20to%20multiple%20plaintext%20keys.%20However%2C%20the%20attacker%20managed%20to%20access%20and%20decrypt%20multiple%20keys.%0A%3E%0A%3E%20With%20access%20to%20two%20of%20the%20bridge%E2%80%99s%20private%20keys%2C%20the%20attacker%20could%20create%20a%20transaction%20extracting%20%24100%20million%20from%20the%20bridge%20and%20confirm%20it%20using%20two%20accounts%20under%20their%20control.%0A%0A-%20%5BTHE%20NOMAD%20BRIDGE%20HACK%3A%20A%20DEEPER%20DIVE%5D(https%3A%2F%2Fhalborn.com%2Fthe-nomad-bridge-hack-a-deeper-dive%2F)%0A%0A%3E%20On%20August%201%2C%20DeFi%20bridge%20Nomad%20was%20hacked%20for%20over%20%24190M.%0A%3E%0A%3E%20After%20a%20frenzied%20hack%20from%20hundreds%20of%20wallets%2C%20the%20bridge%E2%80%99s%20TVL%20dropped%20from%20%24190%2C740%2C000%20to%20%241%2C794%20in%20mere%20hours.%20The%20hack%20involved%20a%20total%20of%20960%20transactions%20with%201%2C175%20individual%20withdrawals%20from%20the%20bridge.%0A%3E%20According%20to%20Nomad%E2%80%99s%20post-mortem%2C%20an%20implementation%20bug%20in%20a%20June%2021%20smart%20contract%20upgrade%20caused%20the%20Replica%20contract%20to%20fail%20to%20authenticate%20messages%20properly.%20This%20issue%20meant%20that%20any%20message%20could%20be%20forged%20as%20long%20as%20it%20had%20not%20already%20been%20processed.%0A%3E%0A%3E%20As%20a%20result%2C%20contracts%20relying%20on%20the%20Replica%20for%20authentication%20of%20inbound%20messages%20suffered%20security%20failures.%20From%20there%2C%20this%20authentication%20failure%20resulted%20in%20fraudulent%20messages%20being%20passed%20to%20the%20Nomad%20BridgeRouter%20contract.%0A%0A%23%23%20References%0A%0ABackground%20and%20Overview%0A%0A-%20%5BHarmony%E2%80%99s%20Cross-Chain%20Future%5D(https%3A%2F%2Fmedium.com%2Fharmony-one%2Fharmonys-cross-chain-future-41d02d53b10)%0A-%20%5BAwesome%20Interoperability%5D(https%3A%2F%2Fgithub.com%2Fnomad-xyz%2Fawesome-interop)%3A%20A%20curated%20list%20of%20awesome%20interoperability%20resources%2C%20libraries%2C%20tools%20and%20more.%0A-%20%5BVitalik%3A%20why%20the%20future%20will%20be%20_multi-chain_%2C%20but%20it%20will%20not%20be%20_cross-chain_%5D(https%3A%2F%2Ftwitter.com%2Fvitalikbuterin%2Fstatus%2F1479501366192132099%3Flang%3Den)%0A-%20%5BVitalik%E2%80%99s%20Annotated%20Ethereum%202.0%20Spec%5D(https%3A%2F%2Fnotes.ethereum.org%2F%40vbuterin%2FSkeyEI3xv)%0A%0ABackground%20and%20Overview%20(Zero%20Knowledge%20Related)%0A%0A-%20%5BBridging%20the%20Multichain%20Universe%20with%20Zero%20Knowledge%20Proofs%5D(https%3A%2F%2Fmedium.com%2F%40ingonyama%2Fbridging-the-multichain-universe-with-zero-knowledge-proofs-6157464fbc86)%0A-%20%5Bawesome-zkml%5D(https%3A%2F%2Fgithub.com%2Fworldcoin%2Fawesome-zkml)%0A%0AMathematical%20Theory%0A%0A-%20%5BElliptic%20Curve%20Cryptography%3A%20a%20gentle%20introduction%5D(https%3A%2F%2Fandrea.corbellini.name%2F2015%2F05%2F17%2Felliptic-curve-cryptography-a-gentle-introduction%2F)%0A-%20%5BExploring%20Elliptic%20Curve%20Pairings%5D(https%3A%2F%2Fvitalik.ca%2Fgeneral%2F2017%2F01%2F14%2Fexploring_ecp.html)%0A%0AMathematical%20Theory%20(Zero%20Knowledge%20Related)%0A%0A-%20%5BKZG%20polynomial%20commitments%5D(https%3A%2F%2Fdankradfeist.de%2Fethereum%2F2020%2F06%2F16%2Fkate-polynomial-commitments.html)%0A%0AResearch%20Papers%0A%0A-%20%5BFraud%20and%20Data%20Availability%20Proofs%5D(https%3A%2F%2Farxiv.org%2Fpdf%2F1809.09044.pdf)%3A%20Maximising%20Light%20Client%20Security%20and%20Scaling%20Blockchains%20with%20Dishonest%20Majorities.%20_Light%20clients%2C%20also%20known%20as%20Simple%20Payment%20Verification%20(SPV)%20clients%2C%20are%20nodes%20which%20only%20download%20a%20small%20portion%20of%20the%20data%20in%20a%20blockchain%2C%20and%20use%20indirect%20means%20to%20verify%20that%20a%20given%20chain%20is%20valid._%0A%0AResearch%20Articles%0A%0A-%20%5BPaths%20toward%20single-slot%20finality%5D(https%3A%2F%2Fnotes.ethereum.org%2F%40vbuterin%2Fsingle_slot_finality)%3A%20A%20look%20at%20how%20to%20improve%20Ethereum%E2%80%99s%20LMD%20GHOST%20%2B%20Casper%20FFG%20consensus.%0A%0AResearch%20Papers%20(Zero%20Knowledge%20Related)%0A%0A-%20%5BzkBridge%3A%20Trustless%20Cross-chain%20Bridges%20Made%20Practical%5D(https%3A%2F%2Frdi.berkeley.edu%2Fzkp%2FzkBridge%2Fuploads%2Fpaper.pdf)%0A-%20%5BzkPoS%3A%20End-to-End%20Trustless%5D(https%3A%2F%2Fhyperoracle.medium.com%2Fzkpos-end-to-end-trustless-65edccd87c5a)%3A%20HyperOracle%20article%20on%20how%20zkPoS%20provides%20the%20ability%20of%20proving%20the%20consensus%20with%20ZK.%0A-%20%5BCaulk%3A%20Lookup%20Arguments%20in%20Sublinear%20Time%5D(https%3A%2F%2Feprint.iacr.org%2F2022%2F621.pdf)%0A-%20%5BHyperPlonk%3A%20Plonk%20with%20Linear-Time%20Prover%20and%20High-Degree%20Custom%20Gates%5D(https%3A%2F%2Feprint.iacr.org%2F2022%2F1355.pdf)%0A%0AResearch%20Articles%20(Zero%20Knowledge%20Related)%0A%0A-%20%5BSLONK%E2%80%94a%20simple%20universal%20SNARK%5D(https%3A%2F%2Fethresear.ch%2Ft%2Fslonk-a-simple-universal-snark%2F6420)%3A%20a%20simplification%20to%20PLONK%20called%20SLONK.%20We%20replace%20the%20permutation%20argument%20(the%20%E2%80%9CP%E2%80%9D%20in%20PLONK)%20in%20favour%20of%20a%20shift%20argument%20(the%20%E2%80%9CS%E2%80%9D%20in%20SLONK).%20We%20get%20a%20universal%20SNARK%20with%20the%20smallest%20known%20proof%20size%20and%20verification%20time.%0A-%20%5BKate%20commitments%20from%20the%20Lagrange%20basis%20without%20FFTs%5D(https%3A%2F%2Fnotes.ethereum.org%2FT0ZVaaywQAqP4jegqO3asg%3Fview)%3A%20how%20to%20commit%2C%20evaluate%20and%20open%20polynomials%20in%20the%20Lagrange%20basis%20without%20FFTs.%20This%20is%20the%20first%20part%20in%20a%20series%20(see%20part%201%2C%20part%202%2C%20part%203)%20showing%20how%20to%20do%20PLONK-style%20universal%20SNARKs%20without%20FFTs%0A-%20%5BHadamard%20checks%20from%20the%20Lagrange%20basis%20without%20FFTs%5D(https%3A%2F%2Fnotes.ethereum.org%2FIl4z42lmQtaUYFigsjsk2Q%3Fview)%3A%20how%20to%20prove%20Hadamard%20relations%20between%20polynomials%20in%20the%20Lagrange%20basis%20without%20FFTs.%20This%20is%20the%20second%20part%20(see%20part%201%2C%20part%202%2C%20part%203)%20in%20a%20series%20showing%20how%20to%20do%20PLONK-style%20universal%20SNARKs%20without%20FFTs.%0A-%20%5BPLONK-style%20SNARKs%20without%20FFTs%5D(https%3A%2F%2Fnotes.ethereum.org%2FDLRqK9V7RIOsTZkab8Hm_Q%3Fview)%3A%20how%20to%20do%20PLONK-style%20universal%20SNARKs%20without%20FFTs.%20This%20is%20part%203%20in%20a%20series%20(part%201%2C%20part%202%2C%20part%203).%0A%0AImplementation%20Articles%0A%0A-%20%5BzkBridge%3A%20Trustless%20Cross-chain%20Bridges%20Made%20Practical%5D(https%3A%2F%2Frdi.berkeley.edu%2Fzkp%2FzkBridge%2FzkBridge.html)%0A-%20%5BSuccinct%20Towards%20the%20endgame%20of%20blockchain%20interoperability%20with%20proof%20of%20consensus%5D(https%3A%2F%2Fblog.succinct.xyz%2Fpost%2F2022%2F09%2F20%2Fproof-of-consensus)%0A%0AImplementations%0A%0A-%20%5BWormhole%20ethereum%20contracts%20Implementaion.sol%5D(https%3A%2F%2Fgithub.com%2Fwormhole-foundation%2Fwormhole%2Fblob%2Fdev.v2%2Fethereum%2Fcontracts%2FImplementation.sol)%0A-%20%5Bbls%20verification%20contract%5D(https%3A%2F%2Fgithub.com%2Fsemaraugusto%2Fbls-verification-contract%2Fblob%2Fmaster%2Fcontracts%2Fverifier.sol)%0A%0ADocumentation%0A%0A-%20%5BETHEREUM%20DEVELOPMENT%20DOCUMENTATION%5D(https%3A%2F%2Fethereum.org%2Fen%2Fdevelopers%2Fdocs%2F)%0A-%20%5BMINA%20docs%5D(https%3A%2F%2Fdocs.minaprotocol.com%2F)%0A%0AAdditional%20References%0A%0A-%20%5Bnil-Foundation%20ETH-Mina%20bridge%20live%20on%20Ethereum%20testnet%20Ropsten%5D(https%3A%2F%2Fminacrypto.com%2F2022%2F04%2F27%2Fnil-foundation%2F)%0A%0A%23%23%20Bridge%20Implementation%20References%0A%0A-%20%5BHarmony%20Horizon%20Bridge%5D(.%2Fharmony-horizon)%3A%20Detailed%20code%20review%0A%20%20-%20%5BHorizon%5D(https%3A%2F%2Fgithub.com%2Fjohnwhitton%2Fhorizon%2Ftree%2FrefactorV2)%3A%20javascript%2C%20solidity%0A-%20Near%20Rainbow%20Bridge%3A%20Codebases%0A%20%20-%20%5BNear%20Rainbow%20Bridge%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge)%3A%20rust%2C%20go%2C%20solidity%2C%20javascript%0A%20%20-%20%5BNear%20Rainbow%20Token%20Connector%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-token-connector)%3A%20soldity%0A%20%20-%20SDK%0A%20%20%20%20-%20%5BNear%20Rainbow%20Bridge%20Client%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge-client%2Ftree%2Fmain%2Fpackages%2Fclient)%3A%20typescript%0A%20%20-%20Frontend%0A%20%20%20%20-%20%5BNEAR%20Rainbow%20Bridge%20Frontend%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge-frontend)%0A-%20%5BNomad%20monprepo%5D(https%3A%2F%2Fgithub.com%2Fnomad-xyz%2Fmonorepo)%3A%20Nomad%20is%20a%20cross-chain%20communication%20protocol.%20This%20repo%20contains%20the%20following%3A%20Smart%20contracts%20for%20the%20core%20Nomad%20protocol%2C%20Smart%20contracts%20for%20the%20Nomad%20token%20bridge%20SDKs%20for%20Nomad's%20core%20protocol%2C%20bridge%2C%20and%20governance%20systems%2C%20Tooling%20for%20local%20environment%20simulation%20and%20Smart%20contract%20deployment%20tooling.%0A%20%20-%20%5BNomad%20rust%5D(https%3A%2F%2Fgithub.com%2Fnomad-xyz%2Frust)%3A%20Nomad%20is%20a%20cross-chain%20communication%20standard%20that%20supports%20passing%20messages%20between%20blockchains%20easily%20and%20inexpensively.%20Like%20IBC%20light%20clients%20and%20similar%20systems%2C%20Nomad%20establishes%20message-passing%20channels%20between%20chains.%20Once%20a%20channel%20is%20established%2C%20any%20application%20on%20that%20chain%20can%20use%20it%20to%20send%20messages%20to%20others%20chains.%0A%20%20-%20%5BNomad%20gelato-sdk%5D(https%3A%2F%2Fgithub.com%2Fnomad-xyz%2Fgelato-sdk)%3A%20This%20crate%20reimplements%20Gelato's%20Relay%20SDK%20in%20Rust.%20It%20simply%20wraps%20Gelato%20Relay%20requests%20and%20responses%20to%2Ffrom%20Gelato%20endpoints%20with%20Rust%20types%20and%20methods.%0A-%20%5BSuccinct%20labs%5D(..%2Fbridge%2Fsuccinct)%3A%20Deep%20dive%20on%20Succinct%20labs%20Proof%20of%20Consensus%20for%20Ethreum.%0A%20%20-%20%5BProof%20of%20Consensus%20for%20Ethereum%5D(https%3A%2F%2Fgithub.com%2Fsuccinctlabs%2Feth-proof-of-consensus)%3A%20contains%20both%20the%20zkSNARK%20circuits%20as%20well%20as%20the%20smart%20contracts%20needed%20for%20our%20succinct%20light%20client%20implementation%2C%20as%20well%20as%20prototype%20message%20passing%20contracts%20and%20bridge%20contracts.%0A-%20%5BDatachain%20lcp%5D(https%3A%2F%2Fgithub.com%2Fdatachainlab%2Fharmony-cosmos-bridge-demo)A%20proxy%20for%20light%20client%20verification%20executed%20in%20TEE.%0A-%20%5BCosmos%20ibc-go%5D(https%3A%2F%2Fgithub.com%2Fcosmos%2Fibc-go)%3A%20allows%20blockchains%20to%20talk%20to%20each%20other.%20This%20end-to-end%2C%20connection-oriented%2C%20stateful%20protocol%20provides%20reliable%2C%20ordered%2C%20and%20authenticated%20communication%20between%20heterogeneous%20blockchains.%0A%20%20-%20%5BCosmos%20ibc%5D(https%3A%2F%2Fgithub.com%2Fcosmos%2Fibc)%3A%20ibc%20specification%0A-%20%5BCosmos%20gravity%20bridge%5D(https%3A%2F%2Fgithub.com%2Fcosmos%2Fgravity-bridge)%3A%20Cosmos%20and%20Ethereum%20bridge%20designed%20to%20run%20on%20the%20Cosmos%20Hub%20focused%20on%20maximum%20design%20simplicity%20and%20efficiency.%0A-%20%5BAxelar%5D(https%3A%2F%2Fgithub.com%2Faxelarnetwork%2Faxelar-core)%3A%20based%20on%20the%20Cosmos%20SDK%20is%20the%20main%20application%20of%20the%20axelar%20network.%20%5Bwhitepaper%5D(https%3A%2F%2Faxelar.network%2Faxelar_whitepaper.pdf)%20%5Bdocs%5D(https%3A%2F%2Fdocs.axelar.dev%2F)%0A-%20%5BCeler%20cBridge-node%5D(https%3A%2F%2Fgithub.com%2Fceler-network%2FcBridge-node)%3A%20Celer%20cBridge%20relay%20node%20implementation%20in%20Golang.%20(%5Bdocs%5D(https%3A%2F%2Fcbridge-docs.celer.network%2F))%0A%20%20-%20%5BCeler%20cBridge-contracts%5D(https%3A%2F%2Fgithub.com%2Fceler-network%2FcBridge-contracts)%3A%20Contracts%20for%20cBridge%2C%20cross-chain%20liquidity%20solution%20powered%20by%20Hashed-Timelock%20Transfers%0A%20%20-%20%5BCeler%20cBridge-cowa%5D(https%3A%2F%2Fgithub.com%2Fceler-network%2Fcbridge-cowa)%3A%20CosmWasm%20Rust%20smart%20contracts%20for%20cbridge%0A-%20%5BWormhole%5D(https%3A%2F%2Fgithub.com%2Fwormhole-foundation%2Fwormhole)%3A%20the%20reference%20implementation%20of%20the%20Wormhole%20protocol.%20(%5Bdocs%5D(https%3A%2F%2Fbook.wormhole.com%2Fintroduction%2Fintroduction.html))%0A-%20%5BLayerZero%20Labs%20LayerZero%5D(https%3A%2F%2Fgithub.com%2FLayerZero-Labs%2FLayerZero)%3A%20contains%20the%20smart%20contracts%20for%20LayerZero%20Endpoints.%20(%5Bdocs%5D(https%3A%2F%2Flayerzero.gitbook.io%2Fdocs%2F))%0A-%20%5BMultichain%20CrossChain-Bridge%5D(https%3A%2F%2Fgithub.com%2Fanyswap%2FCrossChain-Bridge)%3A%20Cross-Chain%20bridge%20based%20on%20Anyswap%20MPC%20network.%20(%5Bdocs%5D(https%3A%2F%2Fdocs.multichain.org%2Fgetting-started%2Fintroduction))%0A-%20%5BSynapse%20Protocol%5D(https%3A%2F%2Fgithub.com%2Fsynapsecns)%3A%20a%20universal%20interoperability%20protocol%20that%20enables%20secure%20cross-chain%20communication.(%20%5Bdocs%5D(https%3A%2F%2Fdocs.synapseprotocol.com%2F))%0A%20%20-%20%5Bsynapse-contracts%5D(https%3A%2F%2Fgithub.com%2Fsynapsecns%2Fsynapse-contracts)%3A%20smart%20contracts%20for%20Synapse%20Protocol.%0A-%20%5BHop%20Protocol%20contracts%5D(https%3A%2F%2Fgithub.com%2Fhop-protocol%2Fcontracts)%3A%20Hop%20is%20a%20scalable%20rollup-to-rollup%20general%20token%20bridge.%20Heare%20are%20the%20smart%20contracts%20that%20power%20the%20Hop%20Exchange.%20(%5Bwhitepaper%5D(https%3A%2F%2Fhop.exchange%2Fwhitepaper.pdf)%2C%20%5Bdocs%5D(https%3A%2F%2Fdocs.hop.exchange%2Fbasics%2Fa-short-explainer)).%0A-%20%5BRouter%20Protocol%5D(https%3A%2F%2Fgithub.com%2Forgs%2Frouter-protocol%2Frepositories)%3A%20(%5Bwhitepaper%5D(https%3A%2F%2Fdocs.routerprotocol.com%2Fwhitepaper%2Fintroducing-router-protocol)%2C%20%5Bdocs%5D(https%3A%2F%2Fdev.routerprotocol.com%2F))%0A-%20%5BParity%20Bridges%20Common%5D(https%3A%2F%2Fgithub.com%2Fparitytech%2Fparity-bridges-common)%3A%20a%20collection%20of%20components%20for%20building%20bridges.%0A-%20%5BSnowfork%20snowbridge%5D(https%3A%2F%2Fgithub.com%2FSnowfork%2Fsnowbridge)%3A%20A%20trustless%20bridge%20between%20Polkadot%20and%20Ethereum.%20(%5Bdocs%5D(https%3A%2F%2Fdocs.snowbridge.network%2F))%0A",lastUpdatedAt:1753129136e3},{lazy:()=>o2(()=>import("./isomorph-5DiGAKKx.js"),[]),path:"/research/bridge/isomorph",type:"mdx",filePath:"research/bridge/isomorph.mdx",content:"%23%20Isomorph%0A%0A-%20date%3A%202023-02-24%0A-%20last%20updated%3A%202023-02-24%0A%0A%23%23%20Overview%0A%0AIsomorph%20is%20a%20Zero%20Knowledge%20trustless%20multichain%20bridge.%0A%0A%23%23%20Approach%0A%0A%23%23%20Sample%20Process%20Flow%0A%0AAt%20a%20high%20level%20when%20an%20event%20happens%20on%20chain%201%20we%20want%20to%20trigger%20a%20corresponding%20action%20on%20chain%202.%0A%0AFor%20a%20simple%20bridging%20of%20funds%20this%20looks%20as%20follows%0A%0A1.%20Alice%20deposits%20100%20TokenX%20into%20TokenLocker%20on%20Chain%201%20(which%20are%20locked)%20%5C*%5C*a1%0A2.%20A%20transaction%20t1%20is%20triggered%20in%20Block%20b1%20and%20an%20event%20e1%20is%20sent%0A3.%20The%20relayer%20listens%20to%20event%20e1%20and%20relays%20the%20transaction%20receipt%20information%20to%20Chain%202.%0A4.%20Verifier%20verifies%20that%20t1%20is%20in%20block%20b1%0A5.%20Verifier%20verifies%20that%20block%20b1%20is%20a%20valid%20block%0A6.%20Verifier%20verifies%20that%20b1%20is%20in%20Chain1%20canoninical%20chain%0A7.%20Executor1%20triggers%20a%20minting%20of%20corresponding%20100%20TokenX%E2%88%86%20on%20TokenLocker%E2%88%86%20on%20Chain%202%0A8.%20A%20transaction%20t2%20is%20triggered%20in%20Block%20b2%20and%20an%20event%20e2%20is%20sent%0A9.%20The%20relayer%20listens%20to%20event%20e2%20and%20relays%20the%20transaction%20receipt%20information%20to%20Chain%201.%0A10.%20Verifier%20verifies%20that%20t2%20is%20in%20block%20b2%0A11.%20Verifier%20verifies%20that%20block%20b2%20is%20a%20valid%20block%0A12.%20Verifier%20verifies%20that%20b2%20is%20in%20Chain2%20canoninical%20chain%0A13.%20Executor2%20marks%20the%20bridge%20transaction%20as%20complete%0A%0A%23%23%20Proof%20Components%0A%0A-%20Valid%20Signers%20%3A%20Who%20are%20eligible%20to%20sign%0A-%20Valid%20Signature%3A%0A-%20Valid%20Block%20%3A%20(Epoch)%0A%0A%23%23%20Technology%0A%0A-%20TokenLocker%3A%20%5Bhorizon%20txProof.js%5D(https%3A%2F%2Fgithub.com%2Fjohnwhitton%2Fhorizon%2Fblob%2FrefactorV2%2Fsrc%2Feprover%2FtxProof.js)%20%5Bnpm%20EthProof%5D(https%3A%2F%2Fwww.npmjs.com%2Fpackage%2Feth-proof)%0A-%20TransactionVerify%3A%20Proves%20a%20%5BMerkle%20Patricia%20Trie%5D(https%3A%2F%2Fethereum.org%2Fen%2Fdevelopers%2Fdocs%2Fdata-structures-and-encoding%2Fpatricia-merkle-trie%2F)%20using%20%5Bmerkle%20Proof%5D(https%3A%2F%2Fgithub.com%2Fethereum%2Fconsensus-specs%2Fblob%2Fdev%2Fssz%2Fmerkle-proofs.mdx)%20which%20verifies%20the%20%5BTransaction.Hash%5D(https%3A%2F%2Fgithub.com%2Fethereum%2Fgo-ethereum%2Fblob%2Frelease%2F1.9%2Fcore%2Ftypes%2Ftransaction.go%23L44)%20against%20%5BHeader.txHash%5D(https%3A%2F%2Fgithub.com%2Fethereum%2Fgo-ethereum%2Fblob%2Frelease%2F1.9%2Fcore%2Ftypes%2Fblock.go%23L77).%20Here%20is%20an%20example%20from%20horizon%20using%20%5Bhorizon%20txProof.js%5D(https%3A%2F%2Fgithub.com%2Fjohnwhitton%2Fhorizon%2Fblob%2FrefactorV2%2Fsrc%2Feprover%2FtxProof.js)%20which%20calls%20%5Bnpm%20EthProof%5D(https%3A%2F%2Fwww.npmjs.com%2Fpackage%2Feth-proof).%0A-%20BlockSignatureVerification%0A%20%20-%20On%20Chain%20Verification%20%3A%20example%20is%20Near%20Rainbow%20Bridge%20Fraud%20Proof%0A%20%20-%20Optimistic%0A%20%20-%20Secure%20Enclave%0A%20%20-%20Zero%20Knowledge%0A%20%20%20%20-%20Prover%0A%20%20%20%20-%20Verification%0A-%20BlockCanonicalVerification%0A%20%20-%20Wait%20Number%20of%20Blocks%0A%20%20-%20Optimistic%0A%20%20-%20Light%20Client%20(Finality%20Gadgets)%0A%20%20-%20Finalized%20Epoch%0A-%20EventLister%0A-%20Executor%0A%0A%23%23%20Proving%20Mechanisms%0A%0A%23%23%23%20Avalanche%0A%0A%23%23%23%20Binance%0A%0A%23%23%23%20Cosmos%0A%0A%23%23%23%20Ethereum%0A%0A%23%23%23%20NEAR%0A%0AThe%20leading%20NEAR%20Ethereum%20Bridge%20today%20Near%20Rainbow%20Bridge%20uses%20an%20optimistic%20approach.%20Following%20is%20an%20excerpt%20from%20NearOnEthClient%20%5B%5Enear-1%5D.%0A%0A%3E%20we%20adopt%20the%20optimistic%20%5B%5Enear-2%5D%20approach%20where%20NearOnEthClient%20verifies%20everything%20in%20the%20NEAR%20header%20except%20the%20signatures.%20Then%20anyone%20can%20challenge%20a%20signature%20in%20a%20submitted%20header%20within%20a%204-hour%20challenge%20window.%20The%20challenge%20requires%20verification%20of%20a%20single%20Ed25519%20signature%20which%20would%20cost%20about%20500k%20Ethereum%20gas%20(expensive%2C%20but%20possible).%0A%0A%23%23%23%20Harmony%0A%0A%23%23%23%20Polygon%0A%0A%23%23%23%20Polkadot%0A%0APrevious%20proving%20mechanisms%20for%20Polkadot%20leverage%20BEEFY%20(Bridge%20Effiency%20Enabling%20Finality%20Yielder)%20%5B%5Edot-3%5D%20an%20example%20is%20Snowbridge%20%5B%5Edot-1%5D%20which%20developed%20their%20own%20Interactive%20Update%20Protocol%20%5B%5Edot-2%5D.%0A%0A%23%23%20Verification%20Mechanism%0A%0A%23%23%20Relayer%20Mechanisms%0A%0A%23%23%20Token%20Lockers%0A%0A%23%23%20References%0A%0A%23%23%20Appendices%0A%0A%23%23%23%20Appendix%20F%3A%20Data%20Structures%0A%0A-%20Block%20Structure%20from%20%5Bgo-ethereum%5D(https%3A%2F%2Fgithub.com%2Fethereum%2Fgo-ethereum%2Fblob%2Frelease%2F1.9%2Fcore%2Ftypes%2Fblock.go%23L72)%0A%0A%60%60%60%0A%2F%2F%20SealHash%20returns%20the%20hash%20of%20a%20block%20prior%20to%20it%20being%20sealed.%0Afunc%20(ethash%20*Ethash)%20SealHash(header%20*types.Header)%20(hash%20common.Hash)%20%7B%0A%20hasher%20%3A%3D%20sha3.NewLegacyKeccak256()%0A%0A%20rlp.Encode(hasher%2C%20%5B%5Dinterface%7B%7D%7B%0A%20%20header.ParentHash%2C%0A%20%20header.UncleHash%2C%0A%20%20header.Coinbase%2C%0A%20%20header.Root%2C%0A%20%20header.TxHash%2C%0A%20%20header.ReceiptHash%2C%0A%20%20header.Bloom%2C%0A%20%20header.Difficulty%2C%0A%20%20header.Number%2C%0A%20%20header.GasLimit%2C%0A%20%20header.GasUsed%2C%0A%20%20header.Time%2C%0A%20%20header.Extra%2C%0A%20%7D)%0A%20hasher.Sum(hash%5B%3A0%5D)%0A%20return%20hash%0A%7D%0A%60%60%60%0A%0A-%20Transaction%20structure%20from%20%5Bgo-ethereum%5D(https%3A%2F%2Fgithub.com%2Fethereum%2Fgo-ethereum%2Fblob%2Frelease%2F1.9%2Fcore%2Ftypes%2Ftransaction.go%23LL39-L64C2)%0A%0A%60%60%60%0Atype%20Transaction%20struct%20%7B%0A%20data%20txdata%20%20%20%20%2F%2F%20Consensus%20contents%20of%20a%20transaction%0A%20time%20time.Time%20%2F%2F%20Time%20first%20seen%20locally%20(spam%20avoidance)%0A%0A%20%2F%2F%20caches%0A%20hash%20atomic.Value%0A%20size%20atomic.Value%0A%20from%20atomic.Value%0A%7D%0A%0Atype%20txdata%20struct%20%7B%0A%20AccountNonce%20uint64%20%20%20%20%20%20%20%20%20%20%60json%3A%22nonce%22%20%20%20%20gencodec%3A%22required%22%60%0A%20Price%20%20%20%20%20%20%20%20*big.Int%20%20%20%20%20%20%20%20%60json%3A%22gasPrice%22%20gencodec%3A%22required%22%60%0A%20GasLimit%20%20%20%20%20uint64%20%20%20%20%20%20%20%20%20%20%60json%3A%22gas%22%20%20%20%20%20%20gencodec%3A%22required%22%60%0A%20Recipient%20%20%20%20*common.Address%20%60json%3A%22to%22%20%20%20%20%20%20%20rlp%3A%22nil%22%60%20%2F%2F%20nil%20means%20contract%20creation%0A%20Amount%20%20%20%20%20%20%20*big.Int%20%20%20%20%20%20%20%20%60json%3A%22value%22%20%20%20%20gencodec%3A%22required%22%60%0A%20Payload%20%20%20%20%20%20%5B%5Dbyte%20%20%20%20%20%20%20%20%20%20%60json%3A%22input%22%20%20%20%20gencodec%3A%22required%22%60%0A%0A%20%2F%2F%20Signature%20values%0A%20V%20*big.Int%20%60json%3A%22v%22%20gencodec%3A%22required%22%60%0A%20R%20*big.Int%20%60json%3A%22r%22%20gencodec%3A%22required%22%60%0A%20S%20*big.Int%20%60json%3A%22s%22%20gencodec%3A%22required%22%60%0A%0A%20%2F%2F%20This%20is%20only%20used%20when%20marshaling%20to%20JSON.%0A%20Hash%20*common.Hash%20%60json%3A%22hash%22%20rlp%3A%22-%22%60%0A%7D%0A%60%60%60%0A%0A%23%23%20FootNotes%0A%0ANEAR%0A%0A%5B%5Enear-1%5D%3A%20%5BNEAR%3A%20ETH-NEAR%20Rainbow%20Bridge%5D(https%3A%2F%2Fnear.org%2Fblog%2Feth-near-rainbow-bridge%2F)%3A%20a%20bridge%2C%20called%20Rainbow%20Bridge%2C%20to%20connect%20the%20Ethereum%20and%20NEAR%20blockchains.%0A%0A%5B%5Enear-2%5D%3A%20%5BOptimistic%20Contracts%5D(https%3A%2F%2Fmedium.com%2F%40deaneigenmann%2Foptimistic-contracts-fb75efa7ca84)%3A%20contracts%20that%20accept%20all%20information%20as%20fact%20until%20proven%20to%20be%20non-factual.%20This%20allows%20for%20a%20reduction%20in%20the%20cost%20of%20verifying%20data%2C%20as%20on-chain%20verification%20would%20only%20be%20necessary%20when%20one%20is%20sure%20that%20the%20data%20is%20false.%0A%0APolkadot%0A%0A%5B%5Edot-1%5D%3A%20%5BSnowBridge%3A%20Polkadot%20Verification%5D(https%3A%2F%2Fdocs.snowbridge.network%2Farchitecture%2Fverification%2Fpolkadot)%3A%20use%20Polkadot%E2%80%99s%20BEEFY%20gadget%20to%20implement%20an%20efficient%20light%20client%20that%20only%20needs%20to%20verify%20a%20very%20small%20subset%20of%20relay%20chain%20validator%20signatures.%0A%0A%5B%5Edot-2%5D%3A%20%5BSnowbridge%3A%20Interactive%20Update%20Protocol%5D(https%3A%2F%2Fdocs.snowbridge.network%2Farchitecture%2Fverification%2Fpolkadot%2Finteractive-update-protocol)%3A%20A%20prover%20wants%20to%20convince%20a%20light%20client%20that%20at%20least%20%24%241%2F3%24%24%20of%20validators%20signed%20a%20statement%2C%20which%20they%20claim%20that%20a%20specific%20set%20of%20at%20least%20%24%242%2F3%24%24%20of%20validators%20do.%0A%0A%5B%5Edot-3%5D%3A%20%5BPolkadot%3A%20BEEFY%5D(https%3A%2F%2Fspec.polkadot.network%2F%23sect-grandpa-beefy)%3A%20The%20BEEFY%20(Bridge%20Effiency%20Enabling%20Finality%20Yielder)%20is%20a%20secondary%20protocol%20to%20GRANDPA%20to%20support%20efficient%20bridging%20between%20the%20Polkadot%20network%20(relay%20chain)%20and%20remote%2C%20segregated%20blockchains%2C%20such%20as%20Ethereum%2C%20which%20were%20not%20built%20with%20the%20Polkadot%20interchain%20operability%20in%20mind.%0A",lastUpdatedAt:1753129136e3},{lazy:()=>o2(()=>import("./isomorph-5DiGAKKx.js"),[]),path:"/research/bridge/isomorph.html",type:"mdx",filePath:"research/bridge/isomorph.mdx",content:"%23%20Isomorph%0A%0A-%20date%3A%202023-02-24%0A-%20last%20updated%3A%202023-02-24%0A%0A%23%23%20Overview%0A%0AIsomorph%20is%20a%20Zero%20Knowledge%20trustless%20multichain%20bridge.%0A%0A%23%23%20Approach%0A%0A%23%23%20Sample%20Process%20Flow%0A%0AAt%20a%20high%20level%20when%20an%20event%20happens%20on%20chain%201%20we%20want%20to%20trigger%20a%20corresponding%20action%20on%20chain%202.%0A%0AFor%20a%20simple%20bridging%20of%20funds%20this%20looks%20as%20follows%0A%0A1.%20Alice%20deposits%20100%20TokenX%20into%20TokenLocker%20on%20Chain%201%20(which%20are%20locked)%20%5C*%5C*a1%0A2.%20A%20transaction%20t1%20is%20triggered%20in%20Block%20b1%20and%20an%20event%20e1%20is%20sent%0A3.%20The%20relayer%20listens%20to%20event%20e1%20and%20relays%20the%20transaction%20receipt%20information%20to%20Chain%202.%0A4.%20Verifier%20verifies%20that%20t1%20is%20in%20block%20b1%0A5.%20Verifier%20verifies%20that%20block%20b1%20is%20a%20valid%20block%0A6.%20Verifier%20verifies%20that%20b1%20is%20in%20Chain1%20canoninical%20chain%0A7.%20Executor1%20triggers%20a%20minting%20of%20corresponding%20100%20TokenX%E2%88%86%20on%20TokenLocker%E2%88%86%20on%20Chain%202%0A8.%20A%20transaction%20t2%20is%20triggered%20in%20Block%20b2%20and%20an%20event%20e2%20is%20sent%0A9.%20The%20relayer%20listens%20to%20event%20e2%20and%20relays%20the%20transaction%20receipt%20information%20to%20Chain%201.%0A10.%20Verifier%20verifies%20that%20t2%20is%20in%20block%20b2%0A11.%20Verifier%20verifies%20that%20block%20b2%20is%20a%20valid%20block%0A12.%20Verifier%20verifies%20that%20b2%20is%20in%20Chain2%20canoninical%20chain%0A13.%20Executor2%20marks%20the%20bridge%20transaction%20as%20complete%0A%0A%23%23%20Proof%20Components%0A%0A-%20Valid%20Signers%20%3A%20Who%20are%20eligible%20to%20sign%0A-%20Valid%20Signature%3A%0A-%20Valid%20Block%20%3A%20(Epoch)%0A%0A%23%23%20Technology%0A%0A-%20TokenLocker%3A%20%5Bhorizon%20txProof.js%5D(https%3A%2F%2Fgithub.com%2Fjohnwhitton%2Fhorizon%2Fblob%2FrefactorV2%2Fsrc%2Feprover%2FtxProof.js)%20%5Bnpm%20EthProof%5D(https%3A%2F%2Fwww.npmjs.com%2Fpackage%2Feth-proof)%0A-%20TransactionVerify%3A%20Proves%20a%20%5BMerkle%20Patricia%20Trie%5D(https%3A%2F%2Fethereum.org%2Fen%2Fdevelopers%2Fdocs%2Fdata-structures-and-encoding%2Fpatricia-merkle-trie%2F)%20using%20%5Bmerkle%20Proof%5D(https%3A%2F%2Fgithub.com%2Fethereum%2Fconsensus-specs%2Fblob%2Fdev%2Fssz%2Fmerkle-proofs.mdx)%20which%20verifies%20the%20%5BTransaction.Hash%5D(https%3A%2F%2Fgithub.com%2Fethereum%2Fgo-ethereum%2Fblob%2Frelease%2F1.9%2Fcore%2Ftypes%2Ftransaction.go%23L44)%20against%20%5BHeader.txHash%5D(https%3A%2F%2Fgithub.com%2Fethereum%2Fgo-ethereum%2Fblob%2Frelease%2F1.9%2Fcore%2Ftypes%2Fblock.go%23L77).%20Here%20is%20an%20example%20from%20horizon%20using%20%5Bhorizon%20txProof.js%5D(https%3A%2F%2Fgithub.com%2Fjohnwhitton%2Fhorizon%2Fblob%2FrefactorV2%2Fsrc%2Feprover%2FtxProof.js)%20which%20calls%20%5Bnpm%20EthProof%5D(https%3A%2F%2Fwww.npmjs.com%2Fpackage%2Feth-proof).%0A-%20BlockSignatureVerification%0A%20%20-%20On%20Chain%20Verification%20%3A%20example%20is%20Near%20Rainbow%20Bridge%20Fraud%20Proof%0A%20%20-%20Optimistic%0A%20%20-%20Secure%20Enclave%0A%20%20-%20Zero%20Knowledge%0A%20%20%20%20-%20Prover%0A%20%20%20%20-%20Verification%0A-%20BlockCanonicalVerification%0A%20%20-%20Wait%20Number%20of%20Blocks%0A%20%20-%20Optimistic%0A%20%20-%20Light%20Client%20(Finality%20Gadgets)%0A%20%20-%20Finalized%20Epoch%0A-%20EventLister%0A-%20Executor%0A%0A%23%23%20Proving%20Mechanisms%0A%0A%23%23%23%20Avalanche%0A%0A%23%23%23%20Binance%0A%0A%23%23%23%20Cosmos%0A%0A%23%23%23%20Ethereum%0A%0A%23%23%23%20NEAR%0A%0AThe%20leading%20NEAR%20Ethereum%20Bridge%20today%20Near%20Rainbow%20Bridge%20uses%20an%20optimistic%20approach.%20Following%20is%20an%20excerpt%20from%20NearOnEthClient%20%5B%5Enear-1%5D.%0A%0A%3E%20we%20adopt%20the%20optimistic%20%5B%5Enear-2%5D%20approach%20where%20NearOnEthClient%20verifies%20everything%20in%20the%20NEAR%20header%20except%20the%20signatures.%20Then%20anyone%20can%20challenge%20a%20signature%20in%20a%20submitted%20header%20within%20a%204-hour%20challenge%20window.%20The%20challenge%20requires%20verification%20of%20a%20single%20Ed25519%20signature%20which%20would%20cost%20about%20500k%20Ethereum%20gas%20(expensive%2C%20but%20possible).%0A%0A%23%23%23%20Harmony%0A%0A%23%23%23%20Polygon%0A%0A%23%23%23%20Polkadot%0A%0APrevious%20proving%20mechanisms%20for%20Polkadot%20leverage%20BEEFY%20(Bridge%20Effiency%20Enabling%20Finality%20Yielder)%20%5B%5Edot-3%5D%20an%20example%20is%20Snowbridge%20%5B%5Edot-1%5D%20which%20developed%20their%20own%20Interactive%20Update%20Protocol%20%5B%5Edot-2%5D.%0A%0A%23%23%20Verification%20Mechanism%0A%0A%23%23%20Relayer%20Mechanisms%0A%0A%23%23%20Token%20Lockers%0A%0A%23%23%20References%0A%0A%23%23%20Appendices%0A%0A%23%23%23%20Appendix%20F%3A%20Data%20Structures%0A%0A-%20Block%20Structure%20from%20%5Bgo-ethereum%5D(https%3A%2F%2Fgithub.com%2Fethereum%2Fgo-ethereum%2Fblob%2Frelease%2F1.9%2Fcore%2Ftypes%2Fblock.go%23L72)%0A%0A%60%60%60%0A%2F%2F%20SealHash%20returns%20the%20hash%20of%20a%20block%20prior%20to%20it%20being%20sealed.%0Afunc%20(ethash%20*Ethash)%20SealHash(header%20*types.Header)%20(hash%20common.Hash)%20%7B%0A%20hasher%20%3A%3D%20sha3.NewLegacyKeccak256()%0A%0A%20rlp.Encode(hasher%2C%20%5B%5Dinterface%7B%7D%7B%0A%20%20header.ParentHash%2C%0A%20%20header.UncleHash%2C%0A%20%20header.Coinbase%2C%0A%20%20header.Root%2C%0A%20%20header.TxHash%2C%0A%20%20header.ReceiptHash%2C%0A%20%20header.Bloom%2C%0A%20%20header.Difficulty%2C%0A%20%20header.Number%2C%0A%20%20header.GasLimit%2C%0A%20%20header.GasUsed%2C%0A%20%20header.Time%2C%0A%20%20header.Extra%2C%0A%20%7D)%0A%20hasher.Sum(hash%5B%3A0%5D)%0A%20return%20hash%0A%7D%0A%60%60%60%0A%0A-%20Transaction%20structure%20from%20%5Bgo-ethereum%5D(https%3A%2F%2Fgithub.com%2Fethereum%2Fgo-ethereum%2Fblob%2Frelease%2F1.9%2Fcore%2Ftypes%2Ftransaction.go%23LL39-L64C2)%0A%0A%60%60%60%0Atype%20Transaction%20struct%20%7B%0A%20data%20txdata%20%20%20%20%2F%2F%20Consensus%20contents%20of%20a%20transaction%0A%20time%20time.Time%20%2F%2F%20Time%20first%20seen%20locally%20(spam%20avoidance)%0A%0A%20%2F%2F%20caches%0A%20hash%20atomic.Value%0A%20size%20atomic.Value%0A%20from%20atomic.Value%0A%7D%0A%0Atype%20txdata%20struct%20%7B%0A%20AccountNonce%20uint64%20%20%20%20%20%20%20%20%20%20%60json%3A%22nonce%22%20%20%20%20gencodec%3A%22required%22%60%0A%20Price%20%20%20%20%20%20%20%20*big.Int%20%20%20%20%20%20%20%20%60json%3A%22gasPrice%22%20gencodec%3A%22required%22%60%0A%20GasLimit%20%20%20%20%20uint64%20%20%20%20%20%20%20%20%20%20%60json%3A%22gas%22%20%20%20%20%20%20gencodec%3A%22required%22%60%0A%20Recipient%20%20%20%20*common.Address%20%60json%3A%22to%22%20%20%20%20%20%20%20rlp%3A%22nil%22%60%20%2F%2F%20nil%20means%20contract%20creation%0A%20Amount%20%20%20%20%20%20%20*big.Int%20%20%20%20%20%20%20%20%60json%3A%22value%22%20%20%20%20gencodec%3A%22required%22%60%0A%20Payload%20%20%20%20%20%20%5B%5Dbyte%20%20%20%20%20%20%20%20%20%20%60json%3A%22input%22%20%20%20%20gencodec%3A%22required%22%60%0A%0A%20%2F%2F%20Signature%20values%0A%20V%20*big.Int%20%60json%3A%22v%22%20gencodec%3A%22required%22%60%0A%20R%20*big.Int%20%60json%3A%22r%22%20gencodec%3A%22required%22%60%0A%20S%20*big.Int%20%60json%3A%22s%22%20gencodec%3A%22required%22%60%0A%0A%20%2F%2F%20This%20is%20only%20used%20when%20marshaling%20to%20JSON.%0A%20Hash%20*common.Hash%20%60json%3A%22hash%22%20rlp%3A%22-%22%60%0A%7D%0A%60%60%60%0A%0A%23%23%20FootNotes%0A%0ANEAR%0A%0A%5B%5Enear-1%5D%3A%20%5BNEAR%3A%20ETH-NEAR%20Rainbow%20Bridge%5D(https%3A%2F%2Fnear.org%2Fblog%2Feth-near-rainbow-bridge%2F)%3A%20a%20bridge%2C%20called%20Rainbow%20Bridge%2C%20to%20connect%20the%20Ethereum%20and%20NEAR%20blockchains.%0A%0A%5B%5Enear-2%5D%3A%20%5BOptimistic%20Contracts%5D(https%3A%2F%2Fmedium.com%2F%40deaneigenmann%2Foptimistic-contracts-fb75efa7ca84)%3A%20contracts%20that%20accept%20all%20information%20as%20fact%20until%20proven%20to%20be%20non-factual.%20This%20allows%20for%20a%20reduction%20in%20the%20cost%20of%20verifying%20data%2C%20as%20on-chain%20verification%20would%20only%20be%20necessary%20when%20one%20is%20sure%20that%20the%20data%20is%20false.%0A%0APolkadot%0A%0A%5B%5Edot-1%5D%3A%20%5BSnowBridge%3A%20Polkadot%20Verification%5D(https%3A%2F%2Fdocs.snowbridge.network%2Farchitecture%2Fverification%2Fpolkadot)%3A%20use%20Polkadot%E2%80%99s%20BEEFY%20gadget%20to%20implement%20an%20efficient%20light%20client%20that%20only%20needs%20to%20verify%20a%20very%20small%20subset%20of%20relay%20chain%20validator%20signatures.%0A%0A%5B%5Edot-2%5D%3A%20%5BSnowbridge%3A%20Interactive%20Update%20Protocol%5D(https%3A%2F%2Fdocs.snowbridge.network%2Farchitecture%2Fverification%2Fpolkadot%2Finteractive-update-protocol)%3A%20A%20prover%20wants%20to%20convince%20a%20light%20client%20that%20at%20least%20%24%241%2F3%24%24%20of%20validators%20signed%20a%20statement%2C%20which%20they%20claim%20that%20a%20specific%20set%20of%20at%20least%20%24%242%2F3%24%24%20of%20validators%20do.%0A%0A%5B%5Edot-3%5D%3A%20%5BPolkadot%3A%20BEEFY%5D(https%3A%2F%2Fspec.polkadot.network%2F%23sect-grandpa-beefy)%3A%20The%20BEEFY%20(Bridge%20Effiency%20Enabling%20Finality%20Yielder)%20is%20a%20secondary%20protocol%20to%20GRANDPA%20to%20support%20efficient%20bridging%20between%20the%20Polkadot%20network%20(relay%20chain)%20and%20remote%2C%20segregated%20blockchains%2C%20such%20as%20Ethereum%2C%20which%20were%20not%20built%20with%20the%20Polkadot%20interchain%20operability%20in%20mind.%0A",lastUpdatedAt:1753129136e3},{lazy:()=>o2(()=>import("./near-rainbow-BcHptKHR.js"),[]),path:"/research/bridge/near-rainbow",type:"mdx",filePath:"research/bridge/near-rainbow.mdx",content:"%23%20Near%20Rainbow%20Bridge%0A%0A-%20date%3A%202023-02-24%0A-%20last%20updated%3A%202023-02-24%0A%0A%23%23%20Overview%0A%0ANEAR%20Rainbow%20bridge%20was%20enhanced%20to%20support%20Ethereum%202.0%20leveraging%20Ethereum%20Light%20Clients.%20This%20document%20is%20a%20review%20of%20the%20design.%0A%0AKey%20differences%20in%20supporting%20Ethereum%202.0%20(Proof%20of%20Stake)%20vs%20Proof%20of%20Work%20involves%20removing%20the%20ETHHASH%20logic%20and%20SPV%20client%20and%20potentially%20replacing%20with%20MMR%20trees%20per%20epoch%20and%20checkpoints%20similar%20to%20Harmony%20Light%20Client%20on%20Ethereum.%0A%0AThe%20%5BNEAR%20Rainbow%20bridge%5D(https%3A%2F%2Fnear.org%2Fbridge%2F)%20is%20in%20%5Bthis%20github%20repository%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge)%20and%20is%20supported%20by%20%5BAurora-labs%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near).%0A%0AIt%20recently%20provided%20support%20for%20ETH%202.0%20in%20this%20%5BPull%20Request%20(762)%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Fpull%2F762).%0A%0AIt%20interacts%20%5Blighthouse%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Flighthouse)%20for%20Ethereum%202.0%20Consensus%20and%20tree_hash%20functions%20as%20well%20as%20bls%20signatures.%0A%0AHigh%20Level%20their%20architecture%20is%20similar%20to%20the%20Horizon%20Bridge%20but%20with%20some%20key%20differences%2C%20including%20but%20not%20limited%20to%0A%0A-%20interacting%20with%20the%20beacon%20chain%20now%20for%20finality%20%60is_correct_finality_update%60%20%5Bsee%20finality-update-verify%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Fblob%2Fmaster%2Feth2near%2Ffinality-update-verify%2Fsrc%2Flib.rs%23L36)%0A-%20Updated%20execution%20block%20proof%20to%20use%20the%20BEACONRPCClient%20and%20with%20an%20updated%20merkle%20tree%0A%20%20-%20Design%20can%20be%20found%20in%20%5BPR-762%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Fpull%2F762)%0A%0A%23%23%20Approach%0A%0ANear%20Rainbow%20bridge%20uses%20a%20fradu%20proof%20approach.%0A%0A%23%23%20Proving%20Mechanisms%0A%0A%23%23%23%20NEAR%20to%20Ethereum%20watchdog%0A%0AThe%20%5Bwatchdog%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Fblob%2Fmaster%2Fnear2eth%2Fwatchdog%2Findex.js)%20runs%20every%2010%20seconds%20and%20validates%20blocks%20on%20%60NearBridge.sol%60%20challenging%20blocks%20with%20incorrect%20signatures.%20_Note%3A%20It%20uses%20%5Bheep-prometheus%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Fblob%2Fmaster%2Futils%2Fhttp-prometheus.js)%20for%20monitoring%20and%20storing%20block%20and%20producer%20information%20using%20%60gauges%60%20and%20%60counters%60._%0A%0A-%20%5Bwatchdog%20is%20started%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Fblob%2Fmaster%2Fcli%2Fcommands%2Fstart%2Fwatchdog.js)%20from%20the%20CLI%0A-%20%5Bwatchdog%20logic%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Fblob%2Fmaster%2Fnear2eth%2Fwatchdog%2Findex.js)%0A%20%20-%20Initializes%20monitoring%20information%20on%20%60Prometheus%60%0A%20%20%20%20-%20%60const%20httpPrometheus%20%3D%20new%20HttpPrometheus(this.metricsPort%2C%20'near_bridge_watchdog_')%60%0A%20%20%20%20-%20%60const%20lastBlockVerified%20%3D%20httpPrometheus.gauge('last_block_verified'%2C%20'last%20block%20that%20was%20already%20verified')%60%0A%20%20%20%20-%20%60const%20totBlockProducers%20%3D%20httpPrometheus.gauge('block_producers'%2C%20'number%20of%20block%20producers%20for%20current%20block')%60%0A%20%20%20%20-%20%60const%20incorrectBlocks%20%3D%20httpPrometheus.counter('incorrect_blocks'%2C%20'number%20of%20incorrect%20blocks%20found')%60%0A%20%20%20%20-%20%60const%20challengesSubmitted%20%3D%20httpPrometheus.counter('challenges_submitted'%2C%20'number%20of%20blocks%20challenged')%60%0A%20%20-%20Loops%20%60while%20(true)%60%0A%20%20%20%20-%20Gets%20the%20%60bridgeState%60%0A%20%20%20%20-%20Loops%20through%20all%20blockProducers%20checking%20their%20signatures%0A%20%20%20%20-%20%60for%20(let%20i%20%3D%200%3B%20i%20%3C%20numBlockProducers%3B%20i%2B%2B)%60%0A%20%20%20%20%20%20-%20Check%20each%20signature%20%60this.clientContract.methods.checkBlockProducerSignatureInHead(i).call()%60%0A%20%20%20%20%20%20-%20If%20invalid%20challenge%20the%20signature%3A%20%60this.clientContract.methods.challenge(this.ethMasterAccount%2C%20i).encodeABI()%60%20calls%20%5Bchallenge%20function%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Fblob%2Fmaster%2Fcontracts%2Feth%2Fnearbridge%2Fcontracts%2FNearBridge.sol%23L93)%0A%20%20%20%20%20%20%20%20-%20%60function%20challenge(address%20payable%20receiver%2C%20uint%20signatureIndex)%20external%20override%20pausable(PAUSED_CHALLENGE)%60%0A%20%20%20%20%20%20%20%20%20%20-%20checks%20block.timestamp%20is%20less%20than%20lastValidAt%20%60block.timestamp%20%3C%20lastValidAt%2C%60%0A%20%20%20%20%20%20%20%20%20%20-%20Check%20if%20the%20signature%20is%20valid%20%60!checkBlockProducerSignatureInHead(signatureIndex)%60%0A%20%20%20%20%20%20%20%20%20%20-%20slashes%20the%20last%20submitter%20%60balanceOf%5BlastSubmitter%5D%20%3D%20balanceOf%5BlastSubmitter%5D%20-%20lockEthAmount%3B%60%0A%20%20%20%20%20%20%20%20%20%20-%20resets%20lastValidAt%20%60lastValidAt%20%3D%200%3B%60%0A%20%20%20%20%20%20%20%20%20%20-%20Refunds%20half%20of%20the%20funds%20to%20the%20watchdog%20account%20%60receiver.call%7Bvalue%3A%20lockEthAmount%20%2F%202%7D(%22%22)%3B%60%0A%20%20%20%20%20%20-%20Sleeps%20for%20watchdog%20Delay%20seconds%20%60await%20sleep(watchdogDelay%20*%201000)%60%0A%0A%23%23%20Relayer%20Mechanisms%0A%0A%23%23%23%20Ethereum%20to%20NEAR%20block%20propagation%20flow%0A%0AFollowing%20is%20a%20walkthough%20of%20block%20propogation%20from%20Ethereum%20to%20NEAR.%20For%20a%20better%20understanding%20of%20the%20technical%20components%20see%20%5BAppendix%20A%5D(%23appendix-a-ethereum-to-near-block-propagation-components).%0A%0A-%20%5BLight%20Clients%20are%20deployed%20on%20Near%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Fblob%2Fmaster%2Feth2near%2Feth2near-block-relay-rs%2Fsrc%2Fmain.rs%23L107)%3A%0A%20%20-%20%5Binit_contract%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Fblob%2Fmaster%2Feth2near%2Feth2near-block-relay-rs%2Fsrc%2Fmain.rs%23L107)%3A%20The%20eth2near%20relayer%20is%20called%20with%20an%20argument%20to%20initialize%20the%20%5Beth2-client%20contract%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Fblob%2Fmaster%2Fcontracts%2Fnear%2Feth2-client%2Fsrc%2Flib.rs)%0A%20%20%20%20-%20%5Beth_client_contract%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Fblob%2Fmaster%2Feth2near%2Feth2near-block-relay-rs%2Fsrc%2Fmain.rs%23L108)%3A%20is%20created%20using%20a%20contract_wrapper%0A%20%20%20%20%20%20-%20%60let%20mut%20eth_client_contract%20%3D%20EthClientContract%3A%3Anew(get_eth_contract_wrapper(%26config))%3B%60%0A%20%20%20%20-%20%5BEthClientContract%20Wrapper%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Fblob%2Fmaster%2Feth2near%2Fcontract_wrapper%2Fsrc%2Feth_client_contract.rs)%3A%20creates%20an%20instance%20of%20%5Beth2-client%20contract%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Fblob%2Fmaster%2Fcontracts%2Fnear%2Feth2-client%2Fsrc%2Flib.rs)%20with%20the%20following%20arguments%0A%20%20%20%20%20%20-%20%60network%60%20-%20the%20name%20of%20Ethereum%20network%20such%20as%20%60mainnet%60%2C%20%60goerli%60%2C%20%60kiln%60%2C%20etc.%0A%20%20%20%20%20%20-%20%60finalized_execution_header%60%20-%20the%20finalized%20execution%20header%20to%20start%20initialization%20with.%0A%20%20%20%20%20%20-%20%60finalized_beacon_header%60%20-%20correspondent%20finalized%20beacon%20header.%0A%20%20%20%20%20%20-%20%60current_sync_committee%60%20-%20sync%20committee%20correspondent%20for%20finalized%20block.%0A%20%20%20%20%20%20-%20%60next_sync_committee%60%20-%20sync%20committee%20for%20the%20next%20period%20after%20period%20for%20finalized%20block.%0A%20%20%20%20%20%20-%20%60hashes_gs_threshold%60%20-%20the%20maximum%20number%20of%20stored%20finalized%20blocks.%0A%20%20%20%20%20%20-%20%60max_submitted_block_by_account%60%20-%20the%20maximum%20number%20of%20unfinalized%20blocks%20which%20one%20relay%20can%20store%20in%20the%20client's%20storage.%0A%20%20%20%20%20%20-%20%60trusted_signer%60%20-%20the%20account%20address%20of%20the%20trusted%20signer%20which%20is%20allowed%20to%20submit%20light%20client%20updates.%0A-%20%5BRelayer%20is%20Created%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Fblob%2Fmaster%2Feth2near%2Feth2near-block-relay-rs%2Fsrc%2Fmain.rs%23L111)%3A%0A%20%20-%20%5Beth2near_relay%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Fblob%2Fmaster%2Feth2near%2Feth2near-block-relay-rs%2Fsrc%2Fmain.rs%23L111)%20is%20created%20using%20the%20following%20arguments%0A%20%20%20%20-%20%60let%20mut%20eth2near_relay%20%3D%20Eth2NearRelay%3A%3Ainit(%26config%2C%20get_eth_client_contract(%26config)%2C%20args.enable_binary_search%2C%20args.submit_only_finalized_blocks%2C)%3B%60%0A-%20%5BRelayer%20is%20Started%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Fblob%2Fmaster%2Feth2near%2Feth2near-block-relay-rs%2Fsrc%2Fmain.rs)%3A%0A%20%20-%20The%20relayer%20is%20started%20using%20%60eth2near_relay.run(None)%3B%60%0A%20%20-%20This%20executes%20the%20%5Beth2near_relay%20run%20function%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Fblob%2Fmaster%2Feth2near%2Feth2near-block-relay-rs%2Fsrc%2Feth2near_relay.rs%23L257)%20%60pub%20fn%20run(%26mut%20self%2C%20max_iterations%3A%20Option%3Cu64%3E)%60%20which%20runs%20until%20terminated%20doing%20using%20the%20following%20loop%20%60while%20!self.terminate%60%0A%20%20%20%20-%20%60self.wait_for_synchronization()%2C%60%3A%20gets%20the%20sync%20status%0A%20%20%20%20-%20%60sleep(Duration%3A%3Afrom_secs(12))%3B%60%3A%20waits%20for%2012%20seconds%0A%20%20%20%20-%20%60self.get_max_slot_for_submission()%60%3A%20gets%20the%20maximum%20slot%20for%20submission%20from%20Ethereum%0A%20%20%20%20-%20%60self.get_last_eth2_slot_on_near%60%3A%20gets%20the%20latest%20slot%20propogated%20from%20Ethereum%20to%20NEAR%0A%20%20%20%20-%20%60if%20last_eth2_slot_on_near%20%3C%20max_slot_for_submission%60%3A%20If%20there%20are%20slots%20to%20process%0A%20%20%20%20%20%20-%20%60self.get_execution_blocks_between(last_eth2_slot_on_near%20%2B%201%2C%20max_slot_for_submission%2C)%2C%60%3A%20Get%20the%20execution%20blocks%20to%20be%20processed%0A%20%20%20%20%20%20-%20%60self.submit_execution_blocks(headers%2C%20current_slot%2C%20%26mut%20last_eth2_slot_on_near)%60%3A%20submit%20them%0A%20%20%20%20%20%20-%20%60were_submission_on_iter%20%3D%20true%3B%60%3A%20flags%20that%20there%20were%20submissions%0A%20%20%20%20-%20%60were_submission_on_iter%20%7C%3D%20self.send_light_client_updates_with_checks(last_eth2_slot_on_near)%3B%60%3A%20send%20light_client%20updates%20with%20checks%20and%20updates%20the%20submission%20flag%20to%20true%20if%20if%20passes.%20Following%20is%20some%20key%20logic%0A%20%20%20%20%20%20-%20%60self.is_enough_blocks_for_light_client_update%60%3A%20Checks%20if%20there%20are%20enough%20blocks%20for%20a%20light%20client%20update%0A%20%20%20%20%20%20%20%20-%20%60self.send_light_client_updates%60%20calls%20%60send_light_client_update%60%20which%0A%20%20%20%20%20%20%20%20%20%20-%20%60if%20last_finalized_slot_on_eth%20%3E%3D%20last_finalized_slot_on_near%20%2B%20self.max_blocks_for_finalization%60%3A%20checks%20if%20the%20gap%20is%20too%20big%20(i.e.%20we%20are%20at%20a%20new%20slot)%20between%20slot%20of%20finalized%20block%20on%20NEAR%20and%20ETH.%20If%20it%20is%20it%20sends%20a%20hand%20made%20client%20update%20(which%20will%20loop%20getting%20the%20new%20slots%20sync%20committees)%20otherwise%20it%20sends%20a%20regular%20client%20update%20(which%20propogates%20the%20block%20headers)%0A%20%20%20%20%20%20%20%20%20%20%20%20-%20%60self.send_hand_made_light_client_update(last_finalized_slot_on_near)%3B%60%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20-%20%60let%20include_next_sync_committee%20%3D%20BeaconRPCClient%3A%3Aget_period_for_slot%20(last_finalized_slot_on_near)%20!%3D%20BeaconRPCClient%3A%3Aget_period_for_slot(attested_slot)%3B%60%0A%20%20%20%20%20%20%20%20%20%20%20%20-%20%60self.send_regular_light_client_update(last_finalized_slot_on_eth%2C%20last_finalized_slot_on_near%2C)%3B%60%0A%20%20%20%20%20%20%20%20%20%20-%20%60self.send_specific_light_client_update(light_client_update)%60%20is%20called%20for%20both%20regular%20and%20hand%20made%20updates.%0A%20%20%20%20%20%20%20%20%20%20%20%20-%20%60self.eth_client_contract.is_known_block%60%3A%20Checks%20if%20the%20block%20is%20already%20known%20on%20the%20Etherum%20Client%20Contract%20on%20NEAR%0A%20%20%20%20%20%20%20%20%20%20%20%20-%20%60self.verify_bls_signature_for_finality_update(%26light_client_update)%60%3A%20Verifies%20the%20BLS%20signatures.%20This%20calls%20%60is_correct_finality_update%60%20in%20%60eth2near%2Ffinality-update-verify%2Fsrc%2Flib.rs%60%20%5C*%0A%20%20%20%20%20%20%20%20%20%20%20%20-%20%60self.eth_client_contract.send_light_client_update(light_client_update.clone())%60%3A%20Updates%20the%20light%20client%20with%20the%20finalized%20block%0A%20%20%20%20%20%20%20%20%20%20%20%20-%20%60self.beacon_rpc_client.get_block_number_for_slot(types%3A%3ASlot%3A%3Anew(light_client_update.finality_update.header_update.beacon_header.slot.as_u64()))%2C%60%3A%20Validates%20Finalized%20block%20number%20is%20correct%20on%20Ethereum%20usng%20the%20%60beacon_rpc_client%60.%0A%20%20%20%20%20%20%20%20%20%20%20%20-%20%60sleep(Duration%3A%3Afrom_secs(self.sleep_time_after_submission_secs))%3B%60%3A%20sleeps%20for%20the%20configured%20submission%20sleep%20time.%0A%20%20%20%20-%20%60if%20!were_submission_on_iter%20%7Bthread%3A%3Asleep(Duration%3A%3Afrom_secs(self.sleep_time_on_sync_secs))%3B%7D%60%3A%20if%20there%20were%20submissions%20sleep%20for%20however%20many%20seconds%20were%20configured%20for%20sync%20sleep%20time.%0A%0A%23%23%23%20NEAR%20to%20Ethereum%20block%20propagation%20flow%0A%0A%5BNEAR%20Light%20Client%20Documentation%5D(https%3A%2F%2Fnomicon.io%2FChainSpec%2FLightClient)%20gives%20an%20overview%20of%20how%20light%20clients%20work.%20At%20a%20high%20level%20the%20light%20client%20needs%20to%20fetch%20at%20least%20one%20block%20per%20%5Bepoch%5D(https%3A%2F%2Fdocs.near.org%2Fconcepts%2Fbasics%2Fepoch)%20i.e.%20every%2042%2C200%20blocks%20or%20approxmiately%2012%20hours.%20Also%20Having%20the%20LightClientBlockView%20for%20block%20B%20is%20sufficient%20to%20be%20able%20to%20verify%20any%20statement%20about%20state%20or%20outcomes%20in%20any%20block%20in%20the%20ancestry%20of%20B%20(including%20B%20itself).%0A%0AThe%20current%20scripts%20and%20codebase%20indicates%20that%20a%20block%20would%20be%20fetched%20every%2030%20seconds%20with%20a%20max%20delay%20of%2010%20seconds.%20It%20feels%20that%20this%20would%20be%20expensive%20to%20update%20Ethereum%20so%20frequently.%20%5BNEAR's%20bridge%20documentation%5D(https%3A%2F%2Fnear.org%2Fbridge%2F)%20states%20_Sending%20assets%20from%20NEAR%20back%20to%20Ethereum%20currently%20takes%20a%20maximum%20of%20sixteen%20hours%20(due%20to%20Ethereum%20finality%20times)_.%20This%20seems%20to%20align%20with%20sending%20light%20client%20updates%20once%20per%20NEAR%20epoch.%20The%20block%20fetch%20period%20is%20configurable%20in%20the%20relayer.%0A%0A%3E%20The%20RPC%20returns%20the%20LightClientBlock%20for%20the%20block%20as%20far%20into%20the%20future%20from%20the%20last%20known%20hash%20as%20possible%20for%20the%20light%20client%20to%20still%20accept%20it.%20Specifically%2C%20it%20either%20returns%20the%20last%20final%20block%20of%20the%20next%20epoch%2C%20or%20the%20last%20final%20known%20block.%20If%20there's%20no%20newer%20final%20block%20than%20the%20one%20the%20light%20client%20knows%20about%2C%20the%20RPC%20returns%20an%20empty%20result.%0A%3E%0A%3E%20A%20standalone%20light%20client%20would%20bootstrap%20by%20requesting%20next%20blocks%20until%20it%20receives%20an%20empty%20result%2C%20and%20then%20periodically%20request%20the%20next%20light%20client%20block.%0A%3E%0A%3E%20A%20smart%20contract-based%20light%20client%20that%20enables%20a%20bridge%20to%20NEAR%20on%20a%20different%20blockchain%20naturally%20cannot%20request%20blocks%20itself.%20Instead%20external%20oracles%20query%20the%20next%20light%20client%20block%20from%20one%20of%20the%20full%20nodes%2C%20and%20submit%20it%20to%20the%20light%20client%20smart%20contract.%20The%20smart%20contract-based%20light%20client%20performs%20the%20same%20checks%20described%20above%2C%20so%20the%20oracle%20doesn't%20need%20to%20be%20trusted.%0A%0ABlock%20Submitters%20stake%20ETH%20to%20be%20allowed%20to%20submit%20blocks%20which%20get's%20slashed%20if%20the%20watchdog%20identifies%20blocks%20with%20invalid%20signatures.%0A%0A_Note%3A%20Have%20not%20identified%20how%20the%20block%20submitters%20are%20rewarded%20for%20submitting%20blocks.%20Currently%20have%20only%20identified%20them%20locking%20ETH%20to%20be%20able%20to%20submit%20blocks%20and%20being%20slashed%20if%20they%20submit%20blocks%20with%20invalid%20signatures._%0A%0A-%20%5BLight%20Clients%20are%20deployed%20on%20Ethereum%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Fblob%2Fmaster%2Fcli%2Findex.js%23L518)%20via%20the%20CLI%20using%20%5Beth-contracts.js%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Fblob%2Fmaster%2Fcli%2Finit%2Feth-contracts.js)%0A%20%20-%20%5Binit-eth-ed25519%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Fblob%2Fmaster%2Fcli%2Findex.js%23L505)%3A%20Deploys%20%60Ed25519.sol%60%20see%20more%20information%20under%20%5Bnearbridge%20Cryptographic%20Primitives%5D(%23nearbridge-cryptographic-primitives)%0A%20%20-%20%5Binit-eth-client%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Fblob%2Fmaster%2Fcli%2Findex.js%23L520)%3A%20Deploys%20%60NearBridge.sol%60%20see%20more%20information%20under%20%5BNEAR%20to%20Ethereum%20block%20propagation%20components%5D(%23near-to-ethereum-block-propagation-components).%20It%20takes%20the%20following%20arguments%0A%20%20%20%20-%20%60ethEd25519Address%60%3A%20The%20address%20of%20the%20ECDSA%20signature%20checker%20using%20Ed25519%20curve%20(see%20%5Bhere%5D(https%3A%2F%2Fnbeguier.medium.com%2Fa-real-world-comparison-of-the-ssh-key-algorithms-b26b0b31bfd9))%0A%20%20%20%20-%20%60lockEthAmount%60%3A%20The%20amount%20that%20%60BLOCK_PRODUCERS%60%20need%20to%20deposit%20(in%20wei)to%20be%20able%20to%20provide%20blocks.%20This%20amount%20will%20be%20slashed%20if%20the%20block%20is%20challenged%20and%20proven%20not%20to%20have%20a%20valid%20signature.%20Default%20value%20is%20100000000000000000000%20WEI%20%3D%20100%20ETH.%0A%20%20%20%20-%20%60lockDuration%60%20%3A%2030%20seconds%0A%20%20%20%20-%20%60replaceDuration%60%3A%2060%20seconds%20it%20is%20passed%20in%20nanoseconds%2C%20because%20it%20is%20a%20difference%20between%20NEAR%20timestamps.%0A%20%20%20%20-%20%60ethAdminAddress%60%3A%20Bridge%20Administrator%20Address%0A%20%20%20%20-%20%600%60%20%3A%20Indicates%20nothing%20is%20paused%20%60UNPAUSE_ALL%60%0A%20%20-%20%5Binit-eth-prover%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Fblob%2Fmaster%2Fcli%2Findex.js%23L538)%3A%20Deploys%20%60NearProver.sol%60%20see%20more%20information%20under%20%5BNEAR%20to%20Ethereum%20block%20propagation%20components%5D(%23near-to-ethereum-block-propagation-components).%20It%20takes%20the%20following%20arguments%0A%20%20%20%20-%20%60ethClientAddress%60%3A%20Interface%20to%20%60NearBridge.sol%60%0A%20%20%20%20-%20%60ethAdminAddress%60%3A%20Administrator%20address%0A%20%20%20%20-%20%600%60%3A%20paused%20indicator%20defaults%20to%20%60UNPAUSE_ALL%20%3D%200%60%0A-%20%5BRelayer%20is%20Started%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Fblob%2Fmaster%2Fcli%2Fcommands%2Fstart%2Fnear2eth-relay.js)%0A%20%20-%20Relayer%20is%20started%20using%20the%20following%20command%0A%0A%20%20%20%20%20%20%20%20%60%60%60%0A%20%20%20%20%20%20%20%20cli%2Findex.js%20start%20near2eth-relay%20%5C%0A%20%20%20%20%20%20%20%20--eth-node-url%20http%3A%2F%2F127.0.0.1%3A8545%2F%20%5C%0A%20%20%20%20%20%20%20%20--eth-master-sk%200xac0974bec39a17e36ba4a6b4d238ff944bacb478cbed5efcae784d7bf4f2ff80%20%5C%0A%20%20%20%20%20%20%20%20--near-node-url%20https%3A%2F%2Frpc.testnet.near.org%2F%20%5C%0A%20%20%20%20%20%20%20%20--near-network-id%20testnet%20%5C%0A%20%20%20%20%20%20%20%20--eth-client-address%200xe7f1725e7734ce288f8367e1bb143e90bb3f0512%20%5C%0A%20%20%20%20%20%20%20%20--eth-use-eip-1559%20true%20%5C%0A%20%20%20%20%20%20%20%20--near2eth-relay-max-delay%2010%20%5C%0A%20%20%20%20%20%20%20%20--near2eth-relay-block-select-duration%2030%20%5C%0A%20%20%20%20%20%20%20%20--near2eth-relay-after-submit-delay-ms%201000%20%5C%0A%20%20%20%20%20%20%20%20--log-verbose%20true%20%5C%0A%20%20%20%20%20%20%20%20--daemon%20false%0A%20%20%20%20%20%20%20%20%60%60%60%0A%0A-%20%5BRelayer%20Logic%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Fblob%2Fmaster%2Fnear2eth%2Fnear2eth-block-relay%2Findex.js)%0A%20%20-%20Loops%20%60while%20(true)%60%0A%20%20%20%20-%20Get%20the%20bridge%20state%20(including%20%60currentHeight%60%2C%20%60nextTimestamp%60%2C%20%60nextValidAt%60%2C%20%60numBlockProducers%60%20)%0A%20%20%20%20-%20Get%20the%20%60currentBlockHash%60%20the%20hash%20of%20the%20current%20untrursted%20block%20based%20on%20%60lastValidAt%60%0A%20%20%20%20-%20Gets%20the%20%60lastBlock%60%20by%20calling%20the%20NEAR%20rpc%20%60next_light_client_block%60%20using%20the%20hash%20of%20last%20untrusted%20block%20%60bs58.encode(currentBlockHash)%60%0A%20%20%20%20-%20Get's%20the%20%60replaceDuration%60%20by%20%60clientContract.methods.replaceDuration().call()%60%20this%20will%20be%2060%20seconds%20if%20we%20deployed%20%60NearBridge.sol%60%20with%20the%20default%20values%20above%0A%20%20%20%20-%20Sets%20%60nextValidAt%60%20from%20the%20bridge%20state%20%60web3.utils.toBN(bridgeState.nextValidAt)%60%0A%20%20%20%20-%20Sets%20%60replaceDelay%60%20to%200%20then%20updates%20it%20to%20the%20%60nextTimestamp%60%20%2B%20%60replaceDuration%60%20-%20%60lastBlock.inner_lite.timestamp%60%20i.e.%20The%20new%20block%20has%20to%20be%20at%20least%2060%20seconds%20after%20the%20current%20block%20stored%20on%20the%20light%20client.%0A%20%20%20%20-%20Checks%20the%20height%20of%20the%20%60currentHeight%60%20of%20the%20bridge%20is%20less%20than%20the%20%60lastblock%60%20from%20the%20near%20light%20client%20%60(bridgeState.currentHeight%20%3C%20lastBlock.inner_lite.height)%60%0A%20%20%20%20-%20Serializes%20the%20%60lastBlock%60%20using%20Borsh%20and%20check%20that%20the%20block%20is%20suitable%0A%20%20%20%20-%20Checks%20that%20the%20%60replaceDelay%60%20has%20been%20met%2C%20if%20not%20sleeps%20until%20it%20has%0A%20%20%20%20-%20Checks%20that%20the%20Master%20Account%20(the%20one%20submitting%20the%20block)%20has%20enough%20locked%20ETH%20(if%20not%20tries%20to%20deposit%20more).%20So%20that%20it%20can%20be%20slashed%20if%20the%20block%20proposed%20is%20invalid.%0A%20%20%20%20-%20Adds%20the%20light%20client%20block%20%60await%20clientContract.methods.addLightClientBlock(nextBlockSelection.borshBlock).send%60%0A%20%20%20%20%20%20-%20Checks%20%60NearBridge.sol%60%20(the%20light%20client)%20has%20been%20initialized%0A%20%20%20%20%20%20-%20Checks%20%60balanceOf%5Bmsg.sender%5D%20%3E%3D%20lockEthAmount%60%20that%20the%20sender%20has%20locked%20enough%20Eth%20to%20allow%20them%20to%20submit%20blocks%0A%20%20%20%20%20%20-%20Decodes%20the%20nearBlock%20using%20%60Borsh.from(data)%60%20and%20%60borsh.decodeLightClientBlock()%60%0A%20%20%20%20%20%20-%20Commis%20the%20previous%20block%2C%20or%20make%20sure%20that%20it%20is%20OK%20to%20replace%20it%20using%0A%20%20%20%20%20%20%20%20-%20%60lastValidAt%20%3D%200%3B%60%0A%20%20%20%20%20%20%20%20-%20%60blockHashes_%5BcurHeight%5D%20%3D%20untrustedHash%3B%60%0A%20%20%20%20%20%20%20%20-%20%60blockMerkleRoots_%5BcurHeight%5D%20%3D%20untrustedMerkleRoot%3B%60%0A%20%20%20%20%20%20-%20Check%20that%20the%20new%20block's%20height%20is%20greater%20than%20the%20current%20one's.%20%60nearBlock.inner_lite.height%20%3E%20curHeight%60%0A%20%20%20%20%20%20-%20Check%20that%20the%20new%20block%20is%20from%20the%20same%20epoch%20as%20the%20current%20one%2C%20or%20from%20the%20next%20one.%0A%20%20%20%20%20%20-%20Check%20that%20the%20new%20block%20is%20signed%20by%20more%20than%202%2F3%20of%20the%20validators.%0A%20%20%20%20%20%20-%20If%20the%20block%20is%20from%20the%20next%20epoch%2C%20make%20sure%20that%20the%20Block%20producers%20%60next_bps%60%20are%20supplied%20and%20have%20a%20correct%20hash.%0A%20%20%20%20%20%20-%20Add%20the%20Block%20to%20the%20Light%20client%0A%20%20%20%20%20%20%20%20-%20Updates%20untrusted%20information%20to%20this%20block%20including%20%60untrustedHeight%60%2C%20%60untrustedTimestamp%60%2C%20%60untrustedHash%60%2C%20%60untrustedMerkleRoot%60%2C%20%60untrustedNextHash%60%2C%20%60untrustedSignatureSet%60%2C%20%60untrustedNextEpoch%60%0A%20%20%20%20%20%20%20%20-%20If%20%60fromNextEpoch%60%20also%20update%20the%20Block%20Producers%0A%20%20%20%20%20%20%20%20-%20Updates%20the%20%60lastSubmitter%60%20and%20%60lastValidAt%60%0A%20%20%20%20-%20Cleans%20up%20the%20selected%20block%20to%20prevent%20submitting%20the%20same%20block%20again%20%60await%20sleep(afterSubmitDelayMs)%60%0A%20%20%20%20-%20Sets%20the%20HeightGauuges%20to%20the%20correct%20block%20height%0A%20%20%20%20%20%20-%20%60clientHeightGauge.set(Number(BigInt(bridgeState.currentHeight))%60%0A%20%20%20%20%20%20-%20%60chainHeightGauge.set(Number(BigInt(lastBlock.inner_lite.height)))%60%0A%20%20%20%20-%20Sleeps%20for%20delay%20calculated%20from%20the%20maximum%20of%20the%20relayer%20days%20(10%20seconds)%20and%20differnce%20between%20the%20current%20and%20next%20block%20time%20stamps%20and%20%60await%20sleep(1000%20*%20delay)%60%0A%0A%23%23%20Light%20Client%20Functionality%0A%0A%23%23%23%20Near%20Rainbow%20Bridge%20Ethereum%20Light%20Client%20Walkthrough%0A%0AThe%20following%20is%20a%20walkthrough%20of%20how%20a%20transaction%20executed%20on%20Ethereum%20is%20propogated%20to%20NEAR's%20%5Beth2-client%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Ftree%2Fmaster%2Fcontracts%2Fnear%2Feth2-client).%20See%20%5BCryptographic%20Primitives%5D(%23cryptographic-primitives)%20for%20more%20information%20on%20the%20cryptography%20used.%20and%20%5BAppendix%20B%5D(%23appendix-b-ethereum-light-client-finality-update-verify-components)%20for%20verification%20components.%0A%0A**At%20a%20high%20level%20the%20ethereum%20light%20client%20contract**%0A%0A-%20Optionally%20accepts%20client%20updates%20only%20from%20a%20trusted%20client%0A-%20Can%20pause%20functions%0A-%20Validates%20a%20sync%20committee%20exists%20for%20the%20curremt%20slot%0A-%20Validates%20sync%20committe%20has%20greater%20than%20the%20minimum%20required%20sync%20committee%20members%0A-%20Validates%202%2F3%20or%20more%20of%20the%20committe%20members%20have%20signed%20the%20blocks%0A-%20Validates%20bls%20signatures%20(i.e.%20the%20bls%20signatures%20of%20the%20sync%20comittee%20for%20the%20blocks%20propogated)%0A-%20Stores%20the%20hashes%20of%20the%20blocks%20for%20the%20past%20%60hashes_gc_threshold%60%20headers.%20Events%20that%20happen%20past%20this%20threshold%20cannot%20be%20verified%20by%20the%20client.%20It%20is%20desirable%20that%20this%20number%20is%20larger%20than%207%20days'%20worth%20of%20headers%2C%20which%20is%20roughly%2051k%20Ethereum%20blocks.%20So%20this%20number%20should%20be%2051k%20in%20production.%0A-%20Stores%20the%20Ethereum%20Network%20(e.g.%20mainnet%2C%20kiln)%0A-%20Stores%20Hashes%20of%20the%20finalized%20execution%20blocks%20mapped%20to%20their%20numbers.%0A-%20Stores%20All%20unfinalized%20execution%20blocks'%20headers%20hashes%20mapped%20to%20their%20%60HeaderInfo%60.%0A-%20Stores%20%60AccountId%60s%20mapped%20to%20their%20number%20of%20submitted%20headers.%0A-%20Stores%20Max%20number%20of%20unfinalized%20blocks%20allowed%20to%20be%20stored%20by%20one%20submitter%20account.%20This%20value%20should%20be%20at%20least%2032%20blocks%20(1%20epoch)%2C%20but%20the%20recommended%20value%20is%201024%20(32%20epochs)%0A-%20Stores%20minimum%20balance%20that%20should%20be%20attached%20to%20register%20a%20new%20submitter%20account.%0A-%20Stores%20finalized%20beacon%20header%0A-%20Stores%20finalized%20execution%20header%0A-%20Stores%20current_sync_committee%0A-%20Stores%20next_sync_committee%0A%0A%23%23%23%20Near%20Rainbow%20Bridge%20Near%20Light%20Client%20Walkthrough%0A%0AThe%20following%20is%20a%20walkthrough%20of%20how%20a%20transaction%20executed%20on%20NEAR%20is%20propogated%20to%20Ethereum's%20%5Bnearbridge%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Ftree%2Fmaster%2Fcontracts%2Feth%2Fnearbridge).%20See%20%5Bnearbridge%20Cryptographic%20Primitives%5D(%23nearbridge-cryptographic-primitives)%20for%20more%20information%20on%20the%20cryptography%20used.%0A%0A**NearOnEthClient%20Overview**%0A%0A_The%20following%20is%20an%20excerpt%20from%20a%20blog%20by%20near%20on%20%5Beth-near-rainbow-bridge%5D(https%3A%2F%2Fnear.org%2Fblog%2Feth-near-rainbow-bridge%2F)_%0A%0A%3E%20NearOnEthClient%20is%20an%20implementation%20of%20the%20NEAR%20light%20client%20in%20Solidity%20as%20an%20Ethereum%20contract.%20Unlike%20EthOnNearClient%20it%20does%20not%20need%20to%20verify%20every%20single%20NEAR%20header%20and%20can%20skip%20most%20of%20them%20as%20long%20as%20it%20verifies%20at%20least%20one%20header%20per%20NEAR%20epoch%2C%20which%20is%20about%2043k%20blocks%20and%20lasts%20about%20half%20a%20day.%20As%20a%20result%2C%20NearOnEthClient%20can%20memorize%20hashes%20of%20all%20submitted%20NEAR%20headers%20in%20history%2C%20so%20if%20you%20are%20making%20a%20transfer%20from%20NEAR%20to%20Ethereum%20and%20it%20gets%20interrupted%20you%20don%E2%80%99t%20need%20to%20worry%20and%20you%20can%20resume%20it%20any%20time%2C%20even%20months%20later.%20Another%20useful%20property%20of%20the%20NEAR%20light%20client%20is%20that%20every%20NEAR%20header%20contains%20a%20root%20of%20the%20merkle%20tree%20computed%20from%20all%20headers%20before%20it.%20As%20a%20result%2C%20if%20you%20have%20one%20NEAR%20header%20you%20can%20efficiently%20verify%20any%20event%20that%20happened%20in%20any%20header%20before%20it.%0A%3E%0A%3E%20Another%20useful%20property%20of%20the%20NEAR%20light%20client%20is%20that%20it%20only%20accepts%20final%20blocks%2C%20and%20final%20blocks%20cannot%20leave%20the%20canonical%20chain%20in%20NEAR.%20This%20means%20that%20NearOnEthClient%20does%20not%20need%20to%20worry%20about%20forks.%0A%3E%0A%3E%20However%2C%20unfortunately%2C%20NEAR%20uses%20%5BEd25519%5D(https%3A%2F%2Fgithub.com%2Fethereum%2FEIPs%2Fblob%2Fmaster%2FEIPS%2Feip-665.mdx)%20to%20sign%20messages%20of%20the%20validators%20who%20approve%20the%20blocks%2C%20and%20this%20signature%20is%20not%20available%20as%20an%20EVM%20precompile.%20It%20makes%20verification%20of%20all%20signatures%20of%20a%20single%20NEAR%20header%20prohibitively%20expensive.%20So%20technically%2C%20we%20cannot%20verify%20one%20NEAR%20header%20within%20one%20contract%20call%20to%20NearOnEthClient.%20Therefore%20we%20adopt%20the%20%5Boptimistic%20approach%5D(https%3A%2F%2Fmedium.com%2F%40deaneigenmann%2Foptimistic-contracts-fb75efa7ca84)%20where%20NearOnEthClient%20verifies%20everything%20in%20the%20NEAR%20header%20except%20the%20signatures.%20Then%20anyone%20can%20challenge%20a%20signature%20in%20a%20submitted%20header%20within%20a%204-hour%20challenge%20window.%20The%20challenge%20requires%20verification%20of%20a%20single%20Ed25519%20signature%20which%20would%20cost%20about%20500k%20Ethereum%20gas%20(expensive%2C%20but%20possible).%20The%20user%20submitting%20the%20NEAR%20header%20would%20have%20to%20post%20a%20bond%20in%20Ethereum%20tokens%2C%20and%20a%20successful%20challenge%20would%20burn%20half%20of%20the%20bond%20and%20return%20the%20other%20half%20to%20the%20challenger.%20The%20bond%20should%20be%20large%20enough%20to%20pay%20for%20the%20gas%20even%20if%20the%20gas%20price%20increases%20exponentially%20during%20the%204%20hours.%20For%20instance%2C%20a%2020%20ETH%20bond%20would%20cover%20gas%20price%20hikes%20up%20to%2020000%20Gwei.%20This%20optimistic%20approach%20requires%20having%20a%20watchdog%20service%20that%20monitors%20submitted%20NEAR%20headers%20and%20challenges%20any%20headers%20with%20invalid%20signatures.%20For%20added%20security%2C%20independent%20users%20can%20run%20several%20watchdog%20services.%0A%3E%0A%3E%20Once%20EIP665%20is%20accepted%2C%20Ethereum%20will%20have%20the%20Ed25519%20signature%20available%20as%20an%20EVM%20precompile.%20This%20will%20make%20watchdog%20services%20and%20the%204-hour%20challenge%20window%20unnecessary.%0A%3E%0A%3E%20At%20its%20bare%20minimum%2C%20Rainbow%20Bridge%20consists%20of%20EthOnNearClient%20and%20NearOnEthClient%20contracts%2C%20and%20three%20services%3A%20Eth2NearRelay%2C%20Near2EthRelay%2C%20and%20the%20Watchdog.%20We%20might%20argue%20that%20this%20already%20constitutes%20a%20bridge%20since%20we%20have%20established%20a%20cryptographic%20link%20between%20two%20blockchains%2C%20but%20practically%20speaking%20it%20requires%20a%20large%20portion%20of%20additional%20code%20to%20make%20application%20developers%20even%20consider%20using%20the%20Rainbow%20Bridge%20for%20their%20applications.%0A%0A_The%20following%20information%20on%20sending%20assets%20from%20NEAR%20back%20to%20Ethereum%20is%20an%20excerpt%20from%20%5Bhttps%3A%2F%2Fnear.org%2Fbridge%2F%5D(https%3A%2F%2Fnear.org%2Fbridge%2F)._%0A%0A%3E%20Sending%20assets%20from%20NEAR%20back%20to%20Ethereum%20currently%20takes%20a%20maximum%20of%20sixteen%20hours%20(due%20to%20Ethereum%20finality%20times)%20and%20costs%20around%20%2460%20(due%20to%20ETH%20gas%20costs%20and%20at%20current%20ETH%20price).%20These%20costs%20and%20speeds%20will%20improve%20in%20the%20near%20future.%0A%0A%23%23%20Token%20Lockers%0A%0A%23%23%23%20Token%20Transfer%20Process%20Flow%0A%0AThe%20%5BNEAR%20Rainbow%20Bridge%5D(https%3A%2F%2Fnear.org%2Fbridge%2F)%20uses%20ERC-20%20connectors%20which%20are%20developed%20in%20%5Brainbow-token-connector%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-token-connector)%20and%20%5Brainbow-bridge-client%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge-client).%20Also%20see%20%5Beth2near-fun-transfer.md%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Fblob%2Fmaster%2Fdocs%2Fworkflows%2Feth2near-fun-transfer.mdx).%0A%0AFollowing%20is%20an%20overview%20of%20timing%20and%20anticipated%20costs%0A%0A-%20Once%20on%20NEAR%2C%20transactions%20will%20confirm%20in%201-2%20seconds%20and%20cost%20well%20under%20%241%20in%20most%20cases.%0A-%20Since%20the%20Bridge%20requires%20transactions%20on%20Ethereum%20for%20NEAR%20and%20Ethereum%2C%20the%20following%20costs%20are%20expected.%0A-%20Sending%20assets%20from%20Ethereum%20to%20NEAR%20takes%20about%20six%20minutes%20(20%20blocks)%20and%20for%20ERC-20%20costs%20about%20%2410%20on%20average.%0A-%20Sending%20assets%20from%20NEAR%20back%20to%20Ethereum%20currently%20takes%20a%20maximum%20of%20sixteen%20hours%20(due%20to%20Ethereum%20finality%20times)%20and%20costs%20around%20%2460%20(due%20to%20ETH%20gas%20costs%20and%20at%20current%20ETH%20price).%20These%20costs%20and%20speeds%20will%20improve%20in%20the%20near%20future.%0A%0A_Note%3A%20This%20uses%20Ethreum%20%5BERC20%5D(https%3A%2F%2Feips.ethereum.org%2FEIPS%2Feip-20)%20and%20NEAR%20%5BNEP-141%5D(https%3A%2F%2Fnomicon.io%2FStandards%2FTokens%2FFungibleToken%2FCore)%20initally%20developed%20for%20%5BNEP-21%5D(https%3A%2F%2Fgithub.com%2Fnear%2FNEPs%2Fpull%2F21)_%0A%0A**%5BGeneric%20ERC-20%2FNEP-141%20connector%20for%20Rainbow%20Bridge%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-token-connector%2Fblob%2Fmaster%2FREADME.mdx)**%0A%0A**Specification**%0A%0A**Ethereum's%20side**%0A%0A%60%60%60solidity%0Acontract%20ERC20Locker%20%7B%0A%20%20constructor(bytes%20memory%20nearTokenFactory%2C%20INearProver%20prover)%20public%3B%0A%20%20function%20lockToken(IERC20%20token%2C%20uint256%20amount%2C%20string%20memory%20accountId)%20public%3B%0A%20%20function%20unlockToken(bytes%20memory%20proofData%2C%20uint64%20proofBlockHeader)%20public%3B%0A%7D%0A%60%60%60%0A%0A**NEAR's%20side**%0A%0A%60%60%60rust%0Astruct%20BridgeTokenFactory%20%7B%0A%20%20%20%20%2F%2F%2F%20The%20account%20of%20the%20prover%20that%20we%20can%20use%20to%20prove%0A%20%20%20%20pub%20prover_account%3A%20AccountId%2C%0A%20%20%20%20%2F%2F%2F%20Address%20of%20the%20Ethereum%20locker%20contract.%0A%20%20%20%20pub%20locker_address%3A%20%5Bu8%3B%2020%5D%2C%0A%20%20%20%20%2F%2F%2F%20Hashes%20of%20the%20events%20that%20were%20already%20used.%0A%20%20%20%20pub%20used_events%3A%20UnorderedSet%3CVec%3Cu8%3E%3E%2C%0A%20%20%20%20%2F%2F%2F%20Mapping%20from%20Ethereum%20tokens%20to%20NEAR%20tokens.%0A%20%20%20%20pub%20tokens%3A%20UnorderedMap%3CEvmAddress%2C%20AccountId%3E%3B%0A%7D%0A%0Aimpl%20BridgeTokenFactory%20%7B%0A%20%20%20%20%2F%2F%2F%20Initializes%20the%20contract.%0A%20%20%20%20%2F%2F%2F%20%60prover_account%60%3A%20NEAR%20account%20of%20the%20Near%20Prover%20contract%3B%0A%20%20%20%20%2F%2F%2F%20%60locker_address%60%3A%20Ethereum%20address%20of%20the%20locker%20contract%2C%20in%20hex.%0A%20%20%20%20%23%5Binit%5D%0A%20%20%20%20pub%20fn%20new(prover_account%3A%20AccountId%2C%20locker_address%3A%20String)%20-%3E%20Self%3B%0A%0A%20%20%20%20%2F%2F%2F%20Relays%20the%20lock%20event%20from%20Ethereum.%0A%20%20%20%20%2F%2F%2F%20Uses%20prover%20to%20validate%20that%20proof%20is%20correct%20and%20relies%20on%20a%20canonical%20Ethereum%20chain.%0A%20%20%20%20%2F%2F%2F%20Send%20%60mint%60%20action%20to%20the%20token%20that%20is%20specified%20in%20the%20proof.%0A%20%20%20%20%23%5Bpayable%5D%0A%20%20%20%20pub%20fn%20deposit(%26mut%20self%2C%20proof%3A%20Proof)%3B%0A%0A%20%20%20%20%2F%2F%2F%20A%20callback%20from%20BridgeToken%20contract%20deployed%20under%20this%20factory.%0A%20%20%20%20%2F%2F%2F%20Is%20called%20after%20tokens%20are%20burned%20there%20to%20create%20an%20receipt%20result%20%60(amount%2C%20token_address%2C%20recipient_address)%60%20for%20Ethereum%20to%20unlock%20the%20token.%0A%20%20%20%20pub%20fn%20finish_withdraw(token_account%3A%20AccountId%2C%20amount%3A%20Balance%2C%20recipient%3A%20EvmAddress)%3B%0A%0A%20%20%20%20%2F%2F%2F%20Transfers%20given%20NEP-21%20token%20from%20%60predecessor_id%60%20to%20factory%20to%20lock.%0A%20%20%20%20%2F%2F%2F%20On%20success%2C%20leaves%20a%20receipt%20result%20%60(amount%2C%20token_address%2C%20recipient_address)%60.%0A%20%20%20%20%23%5Bpayable%5D%0A%20%20%20%20pub%20fn%20lock(%26mut%20self%2C%20token%3A%20AccountId%2C%20amount%3A%20Balance%2C%20recipient%3A%20String)%3B%0A%0A%20%20%20%20%2F%2F%2F%20Relays%20the%20unlock%20event%20from%20Ethereum.%0A%20%20%20%20%2F%2F%2F%20Uses%20prover%20to%20validate%20that%20proof%20is%20correct%20and%20relies%20on%20a%20canonical%20Ethereum%20chain.%0A%20%20%20%20%2F%2F%2F%20Uses%20NEP-21%20%60transfer%60%20action%20to%20move%20funds%20to%20%60recipient%60%20account.%0A%20%20%20%20%23%5Bpayable%5D%0A%20%20%20%20pub%20fn%20unlock(%26mut%20self%2C%20proof%3A%20Proof)%3B%0A%0A%20%20%20%20%2F%2F%2F%20Deploys%20BridgeToken%20contract%20for%20the%20given%20EVM%20address%20in%20hex%20code.%0A%20%20%20%20%2F%2F%2F%20The%20name%20of%20new%20NEP21%20compatible%20contract%20will%20be%20%3Chex(evm_address)%3E.%3Ccurrent_id%3E.%0A%20%20%20%20%2F%2F%2F%20Expects%20~35N%20attached%20to%20cover%20storage%20for%20BridgeToken.%0A%20%20%20%20%23%5Bpayable%5D%0A%20%20%20%20pub%20fn%20deploy_bridge_token(address%3A%20String)%3B%0A%0A%20%20%20%20%2F%2F%2F%20Checks%20if%20Bridge%20Token%20has%20been%20successfully%20deployed%20with%20%60deploy_bridge_token%60.%0A%20%20%20%20%2F%2F%2F%20On%20success%2C%20returns%20the%20name%20of%20NEP21%20contract%20associated%20with%20given%20address%20(%3Chex(evm_address)%3E.%3Ccurrent_id%3E).%0A%20%20%20%20%2F%2F%2F%20Otherwise%2C%20returns%20%22token%20do%20not%20exists%22%20error.%0A%20%20%20%20pub%20fn%20get_bridge_token_account_id(%26self%2C%20address%3A%20String)%20-%3E%20AccountId%3B%0A%7D%0A%0Astruct%20BridgeToken%20%7B%0A%20%20%20controller%3A%20AccountId%2C%0A%20%20%20token%3A%20Token%2C%20%2F%2F%20uses%20https%3A%2F%2Fgithub.com%2Filblackdragon%2Fbalancer-near%2Ftree%2Fmaster%2Fnear-lib-rs%0A%7D%0A%0Aimpl%20BridgeToken%20%7B%0A%20%20%20%20%2F%2F%2F%20Setup%20the%20Token%20contract%20with%20given%20factory%2Fcontroller.%0A%20%20%20%20pub%20fn%20new(controller%3A%20AccountId)%20-%3E%20Self%3B%0A%0A%20%20%20%20%2F%2F%2F%20Mint%20tokens%20to%20given%20user.%20Only%20can%20be%20called%20by%20the%20controller.%0A%20%20%20%20pub%20fn%20mint(%26mut%20self%2C%20account_id%3A%20AccountId%2C%20amount%3A%20Balance)%3B%0A%0A%20%20%20%20%2F%2F%2F%20Withdraw%20tokens%20from%20this%20contract.%0A%20%20%20%20%2F%2F%2F%20Burns%20sender's%20tokens%20and%20calls%20controller%20to%20create%20event%20for%20relaying.%0A%20%20%20%20pub%20fn%20withdraw(%26mut%20self%2C%20amount%3A%20U128%2C%20recipient%3A%20String)%20-%3E%20Promise%3B%0A%7D%0A%0Aimpl%20FungibleToken%20for%20BridgeToken%20%7B%0A%20%20%20%2F%2F%20see%20example%20https%3A%2F%2Fgithub.com%2Filblackdragon%2Fbalancer-near%2Fblob%2Fmaster%2Fbalancer-pool%2Fsrc%2Flib.rs%23L329%0A%7D%0A%60%60%60%0A%0A**Setup%20new%20ERC-20%20on%20NEAR**%0A%0ATo%20setup%20token%20contract%20on%20NEAR%20side%2C%20anyone%20can%20call%20%60%3Cbridge_token_factory%3E.deploy_bridge_token(%3Cerc20%3E)%60%20where%20%60%3Cerc20%3E%60%20is%20the%20address%20of%20the%20token.%0AWith%20this%20call%20must%20attach%20the%20amount%20of%20%24NEAR%20to%20cover%20storage%20for%20(at%20least%2030%20%24NEAR%20currently).%0A%0AThis%20will%20create%20%60%3C%3Chex(erc20)%3E.%3Cbridge_token_factory%3E%3E%60%20NEP141-compatible%20contract.%0A%0A**Usage%20flow%20Ethereum%20-%3E%20NEAR**%0A%0A1.%20User%20sends%20%60%3Cerc20%3E.approve(%3Cerc20locker%3E%2C%20%3Camount%3E)%60%20Ethereum%20transaction.%0A2.%20User%20sends%20%60%3Cerc20locker%3E.lock(%3Cerc20%3E%2C%20%3Camount%3E%2C%20%3Cdestination%3E)%60%20Ethereum%20transaction.%20This%20transaction%20will%20create%20%60Locked%60%20event.%0A3.%20Relayers%20will%20be%20sending%20Ethereum%20blocks%20to%20the%20%60EthClient%60%20on%20NEAR%20side.%0A4.%20After%20sufficient%20number%20of%20confirmations%20on%20top%20of%20the%20mined%20Ethereum%20block%20that%20contain%20the%20%60lock%60%20transaction%2C%20user%20or%20relayer%20can%20call%20%60BridgeTokenFactory.deposit(proof)%60.%20Proof%20is%20the%20extracted%20information%20from%20the%20event%20on%20Ethereum%20side.%0A5.%20%60BridgeTokenFactory.deposit%60%20function%20will%20call%20%60EthProver%60%20and%20verify%20that%20proof%20is%20correct%20and%20relies%20on%20a%20block%20with%20sufficient%20number%20of%20confirmations.%0A6.%20%60EthProver%60%20will%20return%20callback%20to%20%60BridgeTokenFactory%60%20confirming%20that%20proof%20is%20correct.%0A7.%20%60BridgeTokenFactory%60%20will%20call%20%60%3C%3Chex(erc20)%3E.%3Cbridge_token_factory%3E%3E.mint(%3Cnear_account_id%3E%2C%20%3Camount%3E)%60.%0A8.%20User%20can%20use%20%60%3C%3Chex(erc20)%3E.%3Cbridge_token_factory%3E%3E%60%20token%20in%20other%20applications%20now%20on%20NEAR.%0A%0A**Usage%20flow%20NEAR%20-%3E%20Ethereum**%0A%0A1.%20%60token-locker%60%20locks%20NEP141%20tokens%20on%20NEAR%20side.%0A%0ATo%20deposit%20funds%20into%20the%20locker%2C%20call%20%60ft_transfer_call%60%20where%20%60msg%60%20contains%20Ethereum%20address%20the%20funds%20should%20arrive%20to.%0AThis%20will%20emit%20%60%3Ctoken%3A%20String%2C%20amount%3A%20u128%2C%20recipient%20address%3A%20EthAddress%3E%60%20(which%20arrives%20to%20%60deposit%60%20on%20Ethereum%20side).%0A%0AAccepts%20%60Unlock(token%3A%20String%2C%20sender_id%3A%20EthAddress%2C%20amount%3A%20u256%2C%20recipient%3A%20String)%60%20event%20from%20Ethereum%20side%20with%20a%20proof%2C%20verifies%20its%20correctness.%0AIf%20%60recipient%60%20contains%20'%3A'%20will%20split%20it%20into%20%60%3Crecipient%2C%20msg%3E%60%20and%20do%20%60ft_transfer_call(recipient%2C%20amount%2C%20None%2C%20msg)%60.%20Otherwise%20will%20%60ft_transfer%60%20to%20%60recipient%60.%0A%0ATo%20get%20metadata%20of%20token%20to%20Ethereum%2C%20need%20to%20call%20%60log_metadata%60%2C%20which%20will%20create%20a%20result%20%60%3Ctoken%3A%20String%2C%20name%3A%20String%2C%20symbol%3A%20String%2C%20decimals%3A%20u8%2C%20blockHeight%3A%20u64%3E%60.%0A%0A2.%20%60erc20-bridge-token%60%20-%20%60BridgeTokenFactory%60%20and%20%60BridgeToken%60%20Ethereum%20contracts.%0A%0A%60BridgeTokenFactory%60%20creates%20new%20%60BridgeToken%60%20that%20correspond%20to%20specific%20token%20account%20id%20on%20NEAR%20side.%0A%0A%60BridgeTokenFactory%60%20receives%20%60deposit%60%20with%20proof%20from%20NEAR%2C%20verify%20them%20and%20mint%20appropriate%20amounts%20on%20recipient%20addresses.%0A%0ACalling%20%60withdraw%60%20will%20burn%20tokens%20of%20this%20user%20and%20will%20generate%20event%20%60%3Ctoken%3A%20String%2C%20sender_id%3A%20EthAddress%2C%20amount%3A%20u256%2C%20recipient%3A%20String%3E%60%20that%20can%20be%20relayed%20to%20%60token-factory%60.%0A%0A**Caveats**%0A%0AGenerally%2C%20this%20connector%20allows%20any%20account%20to%20call%20%60ft_transfer_call%60%20opening%20for%20potential%20malicious%20tokens%20to%20be%20bridged%20to%20Ethereum.%0AThe%20expectation%20here%20is%20that%20on%20Ethereum%20side%2C%20the%20token%20lists%20will%20handle%20this%2C%20as%20it's%20the%20same%20attack%20model%20as%20malicious%20tokens%20on%20Uniswap%20and%20other%20DEXs.%0A%0AUsing%20Ethereum%20%60BridgeTokenFactory%60%20contract%20can%20always%20resolve%20Ethereum%20address%20of%20a%20contract%20back%20to%20NEAR%20one%20to%20check%20that%20it%20is%20indeed%20bridging%20token%20from%20NEAR%20and%20is%20created%20by%20this%20factory.%0A%0A**Testing**%0A%0ATesting%20Ethereum%20side%0A%0A%60%60%60%0Acd%20erc20-connector%0Ayarn%0Ayarn%20run%20test%0A%60%60%60%0A%0ATesting%20NEAR%20side%0A%0A%60%60%60%0Amake%20res%2Fbridge_token_factory.wasm%0Acargo%20test%20--all%0A%60%60%60%0A%0A%23%23%20Multi-chain%20support%0A%0A%23%23%20Economics%0A%0A%23%23%20References%0A%0A-%20Ethereum%202.0%20Specifications%0A%20%20-%20%5BBeacon%20Chain%20Specification%5D(https%3A%2F%2Fgithub.com%2Fethereum%2Fconsensus-specs%2Fblob%2Fmaster%2Fspecs%2Fphase0%2Fbeacon-chain.mdx)%0A%20%20-%20%5BExtended%20light%20client%20protocol%5D(https%3A%2F%2Fnotes.ethereum.org%2F%40vbuterin%2Fextended_light_client_protocol)%0A%20%20-%20%5BAltair%20Light%20Client%20--%20Light%20Client%5D(https%3A%2F%2Fgithub.com%2Fethereum%2Fconsensus-specs%2Fblob%2Fdev%2Fspecs%2Faltair%2Flight-client%2Flight-client.mdx)%0A%20%20-%20%5BAltair%20Light%20Client%20--%20Sync%20Protocol%5D(https%3A%2F%2Fgithub.com%2Fethereum%2Fconsensus-specs%2Fblob%2Fdev%2Fspecs%2Faltair%2Flight-client%2Fsync-protocol.mdx)%0A%20%20-%20%5BBeacon%20Chain%20Fork%20Choice%5D(https%3A%2F%2Fgithub.com%2Fethereum%2Fconsensus-specs%2Fblob%2Fdev%2Fspecs%2Fphase0%2Ffork-choice.mdx)%0A%0A-%20Proving%20Mechanisms%0A%20%20-%20%5BLighthouse%20Documentation%5D(https%3A%2F%2Flighthouse-book.sigmaprime.io%2F)%3A%20ETH%202.0%20Consensus%20Client%20Lighthouse%20documentation%0A%20%20-%20%5BLighthouse%20Github%5D(https%3A%2F%2Fgithub.com%2Fsigp%2Flighthouse)%3A%20ETH%202.0%20Consensus%20Client%20Lighthouse%20Github%0A%20%20-%20%5BLighthouse%3A%20Blog%5D(https%3A%2F%2Flighthouse-blog.sigmaprime.io%2F)%3A%20ETH%202.0%20Consensus%20Client%20Lighthouse%20Blog%0A%20%20-%20%5Beth2near-block-relay-rs%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Ftree%2Fmaster%2Feth2near%2Feth2near-block-relay-rs)%0A%20%20-%20%5Bnearbridge%20contracts%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Ftree%2Fmaster%2Fcontracts%2Feth%2Fnearbridge)%0A%20%20-%20%5Bnearprover%20contracts%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Ftree%2Fmaster%2Fcontracts%2Feth%2Fnearprover)%0A-%20Prysm%20Light%20Client%20Work%0A%20%20-%20%5BPrysm%3A%20Light-client%20(WORK%20IN%20PROGRESS)%5D(https%3A%2F%2Fgithub.com%2Fjinfwhuang%2Fprysm%2Fpull%2F5)%0A%20%20-%20%5BPrysm%3A%20Light-client%20Client%20WIP%5D(https%3A%2F%2Fgithub.com%2Fjinfwhuang%2Fprysm%2Ftree%2Fjin-light%2Fcmd%2Flight-client%23light-client-client)%3A%20An%20independent%20light%20client%20client%0A%20%20-%20%5BPrysm%3A%20light-client%20server%20PR%5D(https%3A%2F%2Fgithub.com%2Fprysmaticlabs%2Fprysm%2Fpull%2F10034)%3A%20a%20feature%20PR%20that%20implements%20the%20basic%20production%20level%20changes%20to%20Prysm%20to%20comply%20as%20a%20light-client%20server%20to%20begin%20serving%20light%20client%20requests%0A-%20Harmony%20Merkle%20Mount%20Range%0A%20%20-%20Harmony%20%5BMMR%20PR%20Review%5D(https%3A%2F%2Fgithub.com%2Fharmony-one%2Fharmony%2Fpull%2F3872)%20and%20%5Blatest%20PR%5D(https%3A%2F%2Fgithub.com%2Fharmony-one%2Fharmony%2Fpull%2F4198%2Ffiles)%20uses%20Merkle%20Mountain%20Ranges%20to%20facilitate%20light%20client%20development%20against%20Harmony's%20sharded%20Proof%20of%20Stake%20Chain%0A%0A%23%23%20Appendices%0A%0A%23%23%23%20Appendix%20A%20-%20Ethereum%20to%20NEAR%20block%20propagation%20components%0A%0A-%20%5BEthClientContract%20Wrapper%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Fblob%2Fmaster%2Feth2near%2Fcontract_wrapper%2Fsrc%2Feth_client_contract.rs)%3A%20supports%20%5Beth2-client%20contract%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Fblob%2Fmaster%2Fcontracts%2Fnear%2Feth2-client%2Fsrc%2Flib.rs)%20functions%20%60impl%20EthClientContractTrait%20for%20EthClientContract%60%0A%20%20-%20%60fn%20get_last_submitted_slot(%26self)%20-%3E%20u64%60%0A%20%20-%20%60fn%20is_known_block(%26self%2C%20execution_block_hash%3A%20%26H256)%20-%3E%20Result%3Cbool%2C%20Box%3Cdyn%20Error%3E%3E%60%0A%20%20-%20%60fn%20send_light_client_update(%26mut%20self%2C%20light_client_update%3A%20LightClientUpdate%2C)%20-%3E%20Result%3CFinalExecutionOutcomeView%2C%20Box%3Cdyn%20Error%3E%3E%60%0A%20%20-%20%60fn%20get_finalized_beacon_block_hash(%26self)%20-%3E%20Result%3CH256%2C%20Box%3Cdyn%20Error%3E%3E%60%0A%20%20-%20%60fn%20get_finalized_beacon_block_slot(%26self)%20-%3E%20Result%3Cu64%2C%20Box%3Cdyn%20Error%3E%3E%60%0A%20%20-%20%60fn%20send_headers(%26mut%20self%2C%20headers%3A%20%26%5BBlockHeader%5D%2C%20end_slot%3A%20u64%2C)%20-%3E%20Result%3CFinalExecutionOutcomeView%2C%20Box%3Cdyn%20std%3A%3Aerror%3A%3AError%3E%3E%60%0A%20%20-%20%60fn%20get_min_deposit(%26self)%20-%3E%20Result%3CBalance%2C%20Box%3Cdyn%20Error%3E%3E%60%0A%20%20-%20%60fn%20register_submitter(%26self)%20-%3E%20Result%3CFinalExecutionOutcomeView%2C%20Box%3Cdyn%20Error%3E%3E%60%0A%20%20-%20%60fn%20is_submitter_registered(%26self%2Caccount_id%3A%20Option%3CAccountId%3E%2C)%20-%3E%20Result%3Cbool%2C%20Box%3Cdyn%20Error%3E%3E%60%0A%20%20-%20%60fn%20get_light_client_state(%26self)%20-%3E%20Result%3CLightClientState%2C%20Box%3Cdyn%20Error%3E%3E%60%0A%20%20-%20%60fn%20get_num_of_submitted_blocks_by_account(%26self)%20-%3E%20Result%3Cu32%2C%20Box%3Cdyn%20Error%3E%3E%60%0A%20%20-%20%60fn%20get_max_submitted_blocks_by_account(%26self)%20-%3E%20Result%3Cu32%2C%20Box%3Cdyn%20Error%3E%3E%60%0A-%20%5Beth2-client%20contract%20storage%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Fblob%2Fmaster%2Fcontracts%2Fnear%2Feth2-client%2Fsrc%2Flib.rs)%3A%0A%20%20-%20High%20level%20storage%20overview%0A%20%20-%20provides%20the%20%60Eth2Client%60%20public%20data%20stucture%0A%0A%20%20%20%20%60%60%60%0A%20%20%20%20pub%20struct%20Eth2Client%20%7B%0A%20%20%20%20%20%20%20%20%2F%2F%2F%20If%20set%2C%20only%20light%20client%20updates%20by%20the%20trusted%20signer%20will%20be%20accepted%0A%20%20%20%20%20%20%20%20trusted_signer%3A%20Option%3CAccountId%3E%2C%0A%20%20%20%20%20%20%20%20%2F%2F%2F%20Mask%20determining%20all%20paused%20functions%0A%20%20%20%20%20%20%20%20paused%3A%20Mask%2C%0A%20%20%20%20%20%20%20%20%2F%2F%2F%20Whether%20the%20client%20validates%20the%20updates.%0A%20%20%20%20%20%20%20%20%2F%2F%2F%20Should%20only%20be%20set%20to%20%60false%60%20for%20debugging%2C%20testing%2C%20and%20diagnostic%20purposes%0A%20%20%20%20%20%20%20%20validate_updates%3A%20bool%2C%0A%20%20%20%20%20%20%20%20%2F%2F%2F%20Whether%20the%20client%20verifies%20BLS%20signatures.%0A%20%20%20%20%20%20%20%20verify_bls_signatures%3A%20bool%2C%0A%20%20%20%20%20%20%20%20%2F%2F%2F%20We%20store%20the%20hashes%20of%20the%20blocks%20for%20the%20past%20%60hashes_gc_threshold%60%20headers.%0A%20%20%20%20%20%20%20%20%2F%2F%2F%20Events%20that%20happen%20past%20this%20threshold%20cannot%20be%20verified%20by%20the%20client.%0A%20%20%20%20%20%20%20%20%2F%2F%2F%20It%20is%20desirable%20that%20this%20number%20is%20larger%20than%207%20days'%20worth%20of%20headers%2C%20which%20is%20roughly%0A%20%20%20%20%20%20%20%20%2F%2F%2F%2051k%20Ethereum%20blocks.%20So%20this%20number%20should%20be%2051k%20in%20production.%0A%20%20%20%20%20%20%20%20hashes_gc_threshold%3A%20u64%2C%0A%20%20%20%20%20%20%20%20%2F%2F%2F%20Network.%20e.g.%20mainnet%2C%20kiln%0A%20%20%20%20%20%20%20%20network%3A%20Network%2C%0A%20%20%20%20%20%20%20%20%2F%2F%2F%20Hashes%20of%20the%20finalized%20execution%20blocks%20mapped%20to%20their%20numbers.%20Stores%20up%20to%20%60hashes_gc_threshold%60%20entries.%0A%20%20%20%20%20%20%20%20%2F%2F%2F%20Execution%20block%20number%20-%3E%20execution%20block%20hash%0A%20%20%20%20%20%20%20%20finalized_execution_blocks%3A%20LookupMap%3Cu64%2C%20H256%3E%2C%0A%20%20%20%20%20%20%20%20%2F%2F%2F%20All%20unfinalized%20execution%20blocks'%20headers%20hashes%20mapped%20to%20their%20%60HeaderInfo%60.%0A%20%20%20%20%20%20%20%20%2F%2F%2F%20Execution%20block%20hash%20-%3E%20ExecutionHeaderInfo%20object%0A%20%20%20%20%20%20%20%20unfinalized_headers%3A%20UnorderedMap%3CH256%2C%20ExecutionHeaderInfo%3E%2C%0A%20%20%20%20%20%20%20%20%2F%2F%2F%20%60AccountId%60s%20mapped%20to%20their%20number%20of%20submitted%20headers.%0A%20%20%20%20%20%20%20%20%2F%2F%2F%20Submitter%20account%20-%3E%20Num%20of%20submitted%20headers%0A%20%20%20%20%20%20%20%20submitters%3A%20LookupMap%3CAccountId%2C%20u32%3E%2C%0A%20%20%20%20%20%20%20%20%2F%2F%2F%20Max%20number%20of%20unfinalized%20blocks%20allowed%20to%20be%20stored%20by%20one%20submitter%20account%0A%20%20%20%20%20%20%20%20%2F%2F%2F%20This%20value%20should%20be%20at%20least%2032%20blocks%20(1%20epoch)%2C%20but%20the%20recommended%20value%20is%201024%20(32%20epochs)%0A%20%20%20%20%20%20%20%20max_submitted_blocks_by_account%3A%20u32%2C%0A%20%20%20%20%20%20%20%20%2F%2F%20The%20minimum%20balance%20that%20should%20be%20attached%20to%20register%20a%20new%20submitter%20account%0A%20%20%20%20%20%20%20%20min_storage_balance_for_submitter%3A%20Balance%2C%0A%20%20%20%20%20%20%20%20%2F%2F%2F%20Light%20client%20state%0A%20%20%20%20%20%20%20%20finalized_beacon_header%3A%20ExtendedBeaconBlockHeader%2C%0A%20%20%20%20%20%20%20%20finalized_execution_header%3A%20LazyOption%3CExecutionHeaderInfo%3E%2C%0A%20%20%20%20%20%20%20%20current_sync_committee%3A%20LazyOption%3CSyncCommittee%3E%2C%0A%20%20%20%20%20%20%20%20next_sync_committee%3A%20LazyOption%3CSyncCommittee%3E%2C%0A%20%20%20%20%7D%0A%20%20%20%20%60%60%60%0A%0A-%20%5Beth2-client%20dependencies%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Fblob%2Fmaster%2Fcontracts%2Fnear%2Feth2-client%2FCargo.toml)%20relys%20heavily%20on%20the%20%5Blighthouse%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Flighthouse)%20codebase%20for%20it's%20consensus%20and%20cryptogrphic%20primitives.%20See%20%5BCryptographic%20Primitives%5D(%23cryptographic-primitives)%20for%20more%20information.%0A%20%20-%20%60ethereum-types%20%3D%20%220.9.2%22%60%0A%20%20-%20%60eth-types%20%3D%20%20%7B%20path%20%3D%20%22..%2Feth-types%22%20%7D%60%0A%20%20-%20%60eth2-utility%20%3D%20%20%7B%20path%20%3D%20%22..%2Feth2-utility%22%20%7D%60%0A%20%20-%20%60tree_hash%20%3D%20%7B%20git%20%3D%20%22https%3A%2F%2Fgithub.com%2Faurora-is-near%2Flighthouse.git%22%2C%20rev%20%3D%20%22b624c3f0d3c5bc9ea46faa14c9cb2d90ee1e1dec%22%20%7D%60%0A%20%20-%20%60merkle_proof%20%3D%20%7B%20git%20%3D%20%22https%3A%2F%2Fgithub.com%2Faurora-is-near%2Flighthouse.git%22%2C%20rev%20%3D%20%22b624c3f0d3c5bc9ea46faa14c9cb2d90ee1e1dec%22%20%7D%60%0A%20%20-%20%60bls%20%3D%20%7B%20git%20%3D%20%22https%3A%2F%2Fgithub.com%2Faurora-is-near%2Flighthouse.git%22%2C%20optional%20%3D%20true%2C%20rev%20%3D%20%22b624c3f0d3c5bc9ea46faa14c9cb2d90ee1e1dec%22%2C%20default-features%20%3D%20false%2C%20features%20%3D%20%5B%22milagro%22%5D%7D%60%0A%20%20-%20%60admin-controlled%20%3D%20%20%7B%20path%20%3D%20%22..%2Fadmin-controlled%22%20%7D%60%0A%20%20-%20%60near-sdk%20%3D%20%224.0.0%22%60%0A%20%20-%20%60borsh%20%3D%20%220.9.3%22%60%0A%20%20-%20%60bitvec%20%3D%20%221.0.0%22%60%0A%0A-%20%5Beth2-client%20contract%20functions%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Fblob%2Fmaster%2Fcontracts%2Fnear%2Feth2-client%2Fsrc%2Flib.rs)%3A%20provides%20the%20following%20functions%20in%20%60impl%20Eth2Client%60%0A%20%20-%20%60fn%20validate_light_client_update(%26self%2C%20update%3A%20%26LightClientUpdate)%60%0A%20%20-%20%60fn%20verify_finality_branch(%26self%2C%20update%3A%20%26LightClientUpdate%2C%20finalized_period%3A%20u64)%60%0A%20%20-%20%60fn%20verify_bls_signatures(%26self%2C%20update%3A%20%26LightClientUpdate%2C%20sync_committee_bits%3A%20BitVec%3Cu8%3E%2C%20finalized_period%3A%20u64%2C)%60%0A%20%20-%20%60fn%20update_finalized_header(%26mut%20self%2C%20finalized_header%3A%20ExtendedBeaconBlockHeader)%60%0A%20%20-%20%60fn%20commit_light_client_update(%26mut%20self%2C%20update%3A%20LightClientUpdate)%60%0A%20%20-%20%60fn%20gc_finalized_execution_blocks(%26mut%20self%2C%20mut%20header_number%3A%20u64)%60%0A%20%20-%20%60fn%20update_submitter(%26mut%20self%2C%20submitter%3A%20%26AccountId%2C%20value%3A%20i64)%60%0A%20%20-%20%60fn%20is_light_client_update_allowed(%26self)%60%0A-%20%5BEth2NearRelay%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Fblob%2Fmaster%2Feth2near%2Feth2near-block-relay-rs%2Fsrc%2Feth2near_relay.rs%23L84)%3A%20has%20the%20following%20public%20structure%0A%0A%20%20%60%60%60%0A%20%20pub%20struct%20Eth2NearRelay%20%7B%0A%20%20%20%20%20%20beacon_rpc_client%3A%20BeaconRPCClient%2C%0A%20%20%20%20%20%20eth1_rpc_client%3A%20Eth1RPCClient%2C%0A%20%20%20%20%20%20near_rpc_client%3A%20NearRPCClient%2C%0A%20%20%20%20%20%20eth_client_contract%3A%20Box%3Cdyn%20EthClientContractTrait%3E%2C%0A%20%20%20%20%20%20headers_batch_size%3A%20u64%2C%0A%20%20%20%20%20%20ethereum_network%3A%20String%2C%0A%20%20%20%20%20%20interval_between_light_client_updates_submission_in_epochs%3A%20u64%2C%0A%20%20%20%20%20%20max_blocks_for_finalization%3A%20u64%2C%0A%20%20%20%20%20%20near_network_name%3A%20String%2C%0A%20%20%20%20%20%20last_slot_searcher%3A%20LastSlotSearcher%2C%0A%20%20%20%20%20%20terminate%3A%20bool%2C%0A%20%20%20%20%20%20submit_only_finalized_blocks%3A%20bool%2C%0A%20%20%20%20%20%20next_light_client_update%3A%20Option%3CLightClientUpdate%3E%2C%0A%20%20%20%20%20%20sleep_time_on_sync_secs%3A%20u64%2C%0A%20%20%20%20%20%20sleep_time_after_submission_secs%3A%20u64%2C%0A%20%20%20%20%20%20max_submitted_blocks_by_account%3A%20u32%2C%0A%20%20%7D%0A%20%20%60%60%60%0A%0A-%20%5BEth2NearRelay%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Fblob%2Fmaster%2Feth2near%2Feth2near-block-relay-rs%2Fsrc%2Feth2near_relay.rs%23L103)%3A%20Implements%20the%20following%20functions%0A%20%20-%20%60fn%20get_max_slot_for_submission(%26self)%20-%3E%20Result%3Cu64%2C%20Box%3Cdyn%20Error%3E%3E%60%0A%20%20-%20%60fn%20get_last_eth2_slot_on_near(%26mut%20self%2C%20max_slot%3A%20u64)%20-%3E%20Result%3Cu64%2C%20Box%3Cdyn%20Error%3E%3E%60%0A%20%20-%20%60fn%20get_last_finalized_slot_on_near(%26self)%20-%3E%20Result%3Cu64%2C%20Box%3Cdyn%20Error%3E%3E%60%0A%20%20-%20%60fn%20get_last_finalized_slot_on_eth(%26self)%20-%3E%20Result%3Cu64%2C%20Box%3Cdyn%20Error%3E%3E%60%0A%20%20-%20**%60pub%20fn%20run(%26mut%20self%2C%20max_iterations%3A%20Option%3Cu64%3E)%60**%0A%20%20-%20%60fn%20wait_for_synchronization(%26self)%20-%3E%20Result%3C()%2C%20Box%3Cdyn%20Error%3E%3E%60%0A%20%20-%20%60fn%20get_light_client_update_from_file(config%3A%20%26Config%2C%20beacon_rpc_client%3A%20%26BeaconRPCClient%2C)%20-%3E%20Result%3COption%3CLightClientUpdate%3E%2C%20Box%3Cdyn%20Error%3E%3E%60%0A%20%20-%20%60fn%20set_terminate(%26mut%20self%2C%20iter_id%3A%20u64%2C%20max_iterations%3A%20Option%3Cu64%3E)%60%0A%20%20-%20%60fn%20get_execution_blocks_between(%26self%2C%20start_slot%3A%20u64%2C%20last_eth2_slot_on_eth_chain%3A%20u64%2C)%20-%3E%20Result%3C(Vec%3CBlockHeader%3E%2C%20u64)%2C%20Box%3Cdyn%20Error%3E%3E%60%0A%20%20-%20%60fn%20submit_execution_blocks(%26mut%20self%2C%20headers%3A%20Vec%3CBlockHeader%3E%2C%20current_slot%3A%20u64%2Clast_eth2_slot_on_near%3A%20%26mut%20u64%2C)%60%0A%20%20-%20%60fn%20verify_bls_signature_for_finality_update(%26mut%20self%2C%20light_client_update%3A%20%26LightClientUpdate%2C)%20-%3E%20Result%3Cbool%2C%20Box%3Cdyn%20Error%3E%3E%60%0A%20%20-%20%60fn%20get_execution_block_by_slot(%26self%2C%20slot%3A%20u64)%20-%3E%20Result%3CBlockHeader%2C%20Box%3Cdyn%20Error%3E%3E%60%0A%0A-%20%5BEth2NearRelay%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Fblob%2Fmaster%2Feth2near%2Feth2near-block-relay-rs%2Fsrc%2Feth2near_relay.rs%23L461)%3A%20has%20a%20second%20implementation%20of%20functions%20for%20submitting%20light%20client%20updates%0A%20%20-%20%60fn%20is_enough_blocks_for_light_client_update(%26self%2C%20last_submitted_slot%3A%20u64%2Clast_finalized_slot_on_near%3A%20u64%2C%20last_finalized_slot_on_eth%3A%20u64%2C)%20-%3E%20bool%60%0A%20%20-%20%60fn%20is_shot_run_mode(%26self)%20-%3E%20bool%60%0A%20%20-%20%60fn%20send_light_client_updates_with_checks(%26mut%20self%2C%20last_submitted_slot%3A%20u64)%20-%3E%20bool%60%0A%20%20-%20%60fn%20send_light_client_updates(%26mut%20self%2C%20last_submitted_slot%3A%20u64%2C%20last_finalized_slot_on_near%3A%20u64%2C%20last_finalized_slot_on_eth%3A%20u64%2C)%60%0A%20%20-%20%60fn%20send_light_client_update_from_file(%26mut%20self%2C%20last_submitted_slot%3A%20u64)%60%0A%20%20-%20%60fn%20send_regular_light_client_update(%26mut%20self%2C%20last_finalized_slot_on_eth%3A%20u64%2Clast_finalized_slot_on_near%3A%20u64%2C)%60%0A%20%20-%20%60fn%20get_attested_slot(%26mut%20self%2C%20last_finalized_slot_on_near%3A%20u64%2C)%20-%3E%20Result%3Cu64%2C%20Box%3Cdyn%20Error%3E%3E%60%0A%20%20-%20%60fn%20send_hand_made_light_client_update(%26mut%20self%2C%20last_finalized_slot_on_near%3A%20u64)%60%0A%20%20-%20%60fn%20send_specific_light_client_update(%26mut%20self%2C%20light_client_update%3A%20LightClientUpdate)%60%0A%0A-%20%5Beth2-contract-init%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Ftree%2Fmaster%2Feth2near%2Feth2-contract-init)%20includes%20(but%20not%20limited%20to)%20the%20following%20additional%20components%0A%20%20-%20%5Binit_contract.rs%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Fblob%2Fmaster%2Feth2near%2Feth2-contract-init%2Fsrc%2Finit_contract.rs)%3A%20Verifies%20light%20client%20snapshot%20and%20initializes%20the%20Ethereum%20Light%20Contract%20on%20Near.%0A%20%20%20%20-%20%60pub%20fn%20verify_light_client_snapshot(block_root%3A%20String%2C%20light_client_snapshot%3A%20%26LightClientSnapshotWithProof%2C)%20-%3E%20bool%60%3A%20Verifies%20the%20light%20client%20by%20checking%20the%20snapshot%20format%20getting%20the%20current%20consensus%20branch%20and%20verifying%20it%20via%20a%20merkle%20proof.%0A%20%20%20%20-%20%60pub%20fn%20init_contract(config%3A%20%26Config%2C%20eth_client_contract%3A%20%26mut%20EthClientContract%2C%20mut%20init_block_root%3A%20String%2C)%20-%3E%20Result%3C()%2C%20Box%3Cdyn%20std%3A%3Aerror%3A%3AError%3E%3E%60%3A%20Initializes%20the%20Ethereum%20Light%20Client%20Contract%20on%20Near.%0A-%20%5Beth_rpc_client%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Ftree%2Fmaster%2Feth2near%2Feth_rpc_client)%20includes%20(but%20not%20limited%20to)%20the%20following%20additional%20components%0A%20%20-%20%5Beth1_rpc_client.rs%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Fblob%2Fmaster%2Feth2near%2Feth2near-block-relay-rs%2Fsrc%2Feth1_rpc_client.rs)%3A%20Is%20used%20to%20get%20block%20headers%20and%20check%20sync%20status.%20It%20has%20the%20following%20functions%0A%20%20%20%20-%20%60pub%20fn%20new(endpoint_url%3A%20%26str)%20-%3E%20Self%60%0A%20%20%20%20-%20%60pub%20fn%20get_block_header_by_number(%26self%2C%20number%3A%20u64)%20-%3E%20Result%3CBlockHeader%2C%20Box%3Cdyn%20Error%3E%3E%60%0A%20%20%20%20-%20%60pub%20fn%20is_syncing(%26self)%20-%3E%20Result%3Cbool%2C%20Box%3Cdyn%20Error%3E%3E%60%0A%20%20-%20%5Bexecution_block_proof.rs%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Fblob%2Fmaster%2Feth2near%2Feth2near-block-relay-rs%2Fsrc%2Fexecution_block_proof.rs)%3A%20%60ExecutionBlockProof%60%20contains%20a%20%60block_hash%60%20(execution%20block)%20and%20a%20proof%20of%20its%20inclusion%20in%20the%20%60BeaconBlockBody%60%20tree%20hash.%20The%20%60block_hash%60%20is%20the%2012th%20field%20in%20execution_payload%2C%20which%20is%20the%209th%20field%20in%20%60BeaconBlockBody%60.%20The%20first%204%20elements%20in%20proof%20correspondent%20to%20the%20proof%20of%20inclusion%20of%20%60block_hash%60%20in%20Merkle%20tree%20built%20for%20%60ExecutionPayload%60.%20The%20last%204%20elements%20of%20the%20proof%20of%20%60ExecutionPayload%60%20in%20the%20Merkle%20tree%20are%20built%20on%20high-level%20%60BeaconBlockBody%60%20fields.%20The%20proof%20starts%20from%20the%20leaf.%20It%20has%20the%20following%20structure%20and%20functions%0A%20%20%20%20-%20%60pub%20struct%20ExecutionBlockProof%20%7Bblock_hash%3A%20H256%2C%20proof%3A%20%5BH256%3B%20Self%3A%3APROOF_SIZE%5D%2C%7D%60%0A%20%20%20%20-%20%60pub%20fn%20construct_from_raw_data(block_hash%3A%20%26H256%2C%20proof%3A%20%26%5BH256%3B%20Self%3A%3APROOF_SIZE%5D)%20-%3E%20Self%60%0A%20%20%20%20-%20%60pub%20fn%20construct_from_beacon_block_body(beacon_block_body%3A%20%26BeaconBlockBody%3CMainnetEthSpec%3E%2C)%20-%3E%20Result%3CSelf%2C%20Box%3Cdyn%20Error%3E%3E%60%0A%20%20%20%20-%20%60pub%20fn%20get_proof(%26self)%20-%3E%20%5BH256%3B%20Self%3A%3APROOF_SIZE%5D%60%0A%20%20%20%20-%20%60pub%20fn%20get_execution_block_hash(%26self)%20-%3E%20H256%60%0A%20%20%20%20-%20%60pub%20fn%20verify_proof_for_hash(%26self%2C%20beacon_block_body_hash%3A%20%26H256%2C)%20-%3E%20Result%3Cbool%2C%20IncorrectBranchLength%3E%60%0A%20%20%20%20-%20%60fn%20merkle_root_from_branch(leaf%3A%20H256%2C%20branch%3A%20%26%5BH256%5D%2C%20depth%3A%20usize%2C%20index%3A%20usize%2C)%20-%3E%20Result%3CH256%2C%20IncorrectBranchLength%3E%60%0A%20%20-%20%5Bbeacon_block_body_merkle_tree.rs%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Fblob%2Fmaster%2Feth2near%2Feth_rpc_client%2Fsrc%2Fbeacon_block_body_merkle_tree.rs)%3A%20implements%20merkle%20trees%20for%20the%20Beacon%20and%20the%20ExecutionPayload%0A%20%20%20%20-%20%60BeaconBlockBodyMerkleTree%60%20is%20built%20on%20the%20%60BeaconBlockBody%60%20data%20structure%2C%20where%20the%20leaves%20of%20the%20Merkle%20Tree%20are%20the%20hashes%20of%20the%20high-level%20fields%20of%20the%20%60BeaconBlockBody%60.%20The%20hashes%20of%20each%20element%20are%20produced%20by%20using%20%60ssz%60%20serialization.%0A%20%20%20%20-%20%60ExecutionPayloadMerkleTree%60%20is%20a%20built%20on%20the%20%60ExecutionPayload%60%20data%20structure%2C%20where%20the%20leaves%20of%20the%20Merkle%20Tree%20are%20the%20hashes%20of%20the%20high-level%20fields%20of%20the%20%60ExecutionPayload%60.%20The%20hashes%20of%20each%20element%20are%20produced%20by%20using%20%60ssz%60%20serialization.%20%60ExecutionPayload%60%20is%20one%20of%20the%20field%20in%20BeaconBlockBody.%20The%20hash%20of%20the%20root%20of%20%60ExecutionPlayloadMerkleTree%60%20is%20the%209th%20leaf%20in%20BeaconBlockBody%20Merkle%20Tree.%0A%20%20-%20%5Bbeacon_rpc_client.rs%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Fblob%2Fmaster%2Feth2near%2Feth_rpc_client%2Fsrc%2Fbeacon_rpc_client.rs)%3A%20allows%20getting%20beacon%20block%20body%2C%20beacon%20block%20header%20and%20light%20client%20updates%20using%20%5BBeacon%20RPC%20API%5D(https%3A%2F%2Fethereum.github.io%2Fbeacon-APIs%2F).%20It%20has%20the%20following%20functions%0A%20%20%20%20-%20%60pub%20fn%20new(endpoint_url%3A%20%26str%2C%20timeout_seconds%3A%20u64%2C%20timeout_state_seconds%3A%20u64)%20-%3E%20Self%60%3A%20Creates%20%60BeaconRPCClient%60%20for%20the%20given%20BeaconAPI%20%60endpoint_url%60%0A%20%20%20%20-%20%60pub%20fn%20get_beacon_block_body_for_block_id(%26self%2C%20block_id%3A%20%26str%2C)%20-%3E%20Result%3CBeaconBlockBody%3CMainnetEthSpec%3E%2C%20Box%3Cdyn%20Error%3E%3E%60%3A%20Returns%20%60BeaconBlockBody%60%20struct%20for%20the%20given%20%60block_id%60.%20It%20uses%20the%20following%20arguments%0A%20%20%20%20%20%20-%20%60block_id%60%20-%20Block%20identifier.%20Can%20be%20one%20of%3A%20%60%22head%22%20(canonical%20head%20in%20node's%20view)%2C%22genesis%22%2C%20%22finalized%22%2C%20%3Cslot%3E%2C%20%3Chex%20encoded%20blockRoot%20with%200x%20prefix%3E%60(see%20%5Bbeacon-APIs%2F%23%2FBeacon%2FgetBlockV2%5D(https%3A%2F%2Fethereum.github.io%2Fbeacon-APIs%2F%23%2FBeacon%2FgetBlockV2)).%0A%20%20%20%20-%20%60pub%20fn%20get_beacon_block_header_for_block_id(%26self%2C%20block_id%3A%20%26str%2C)%20-%3E%20Result%3Ctypes%3A%3ABeaconBlockHeader%2C%20Box%3Cdyn%20Error%3E%3E%60%3A%20Returns%20%60BeaconBlockHeader%60%20struct%20for%20the%20given%20%60block_id%60.%20It%20uses%20the%20following%20arguments%0A%20%20%20%20%20%20-%20%60block_id%60%20-%20Block%20identifier.%20Can%20be%20one%20of%3A%20%60%22head%22%20(canonical%20head%20in%20node's%20view)%2C%22genesis%22%2C%20%22finalized%22%2C%20%3Cslot%3E%2C%20%3Chex%20encoded%20blockRoot%20with%200x%20prefix%3E%60(see%20%5Bbeacon-APIs%2F%23%2FBeacon%2FgetBlockV2%5D(https%3A%2F%2Fethereum.github.io%2Fbeacon-APIs%2F%23%2FBeacon%2FgetBlockV2)).%0A%20%20%20%20-%20%60pub%20fn%20get_light_client_update(%26self%2C%20period%3A%20u64%2C)%20-%3E%20Result%3CLightClientUpdate%2C%20Box%3Cdyn%20Error%3E%3E%60%3A%20Returns%20%60LightClientUpdate%60%20struct%20for%20the%20given%20%60period%60.%20It%20uses%20the%20following%20arguments%0A%20%20%20%20%20%20-%20%60period%60%20-%20period%20id%20for%20which%20%60LightClientUpdate%60%20is%20fetched.%20On%20Mainnet%2C%20one%20period%20consists%20of%20256%20epochs%2C%20and%20one%20epoch%20consists%20of%2032%20slots%0A%20%20%20%20-%20%60pub%20fn%20get_bootstrap(%26self%2C%20block_root%3A%20String%2C)%20-%3E%20Result%3CLightClientSnapshotWithProof%2C%20Box%3Cdyn%20Error%3E%3E%60%3A%20Fetch%20a%20bootstrapping%20state%20with%20a%20proof%20to%20a%20trusted%20block%20root.%20The%20trusted%20block%20root%20should%20be%20fetched%20with%20similar%20means%20to%20a%20weak%20subjectivity%20checkpoint.%20Only%20block%20roots%20for%20checkpoints%20are%20guaranteed%20to%20be%20available.%0A%20%20%20%20-%20%60pub%20fn%20get_checkpoint_root(%26self)%20-%3E%20Result%3CString%2C%20Box%3Cdyn%20Error%3E%3E%60%0A%20%20%20%20-%20%60pub%20fn%20get_last_finalized_slot_number(%26self)%20-%3E%20Result%3Ctypes%3A%3ASlot%2C%20Box%3Cdyn%20Error%3E%3E%60%3A%20Return%20the%20last%20finalized%20slot%20in%20the%20Beacon%20chain%0A%20%20%20%20-%20%60pub%20fn%20get_last_slot_number(%26self)%20-%3E%20Result%3Ctypes%3A%3ASlot%2C%20Box%3Cdyn%20Error%3E%3E%60%3A%20Return%20the%20last%20slot%20in%20the%20Beacon%20chain%0A%20%20%20%20-%20%60pub%20fn%20get_slot_by_beacon_block_root(%26self%2C%20beacon_block_hash%3A%20H256%2C)%20-%3E%20Result%3Cu64%2C%20Box%3Cdyn%20Error%3E%3E%60%0A%20%20%20%20-%20%60pub%20fn%20get_block_number_for_slot(%26self%2C%20slot%3A%20types%3A%3ASlot)%20-%3E%20Result%3Cu64%2C%20Box%3Cdyn%20Error%3E%3E%60%0A%20%20%20%20-%20%60pub%20fn%20get_finality_light_client_update(%26self)%20-%3E%20Result%3CLightClientUpdate%2C%20Box%3Cdyn%20Error%3E%3E%60%0A%20%20%20%20-%20%60pub%20fn%20get_finality_light_client_update_with_sync_commity_update(%26self%2C)%20-%3E%20Result%3CLightClientUpdate%2C%20Box%3Cdyn%20Error%3E%3E%60%0A%20%20%20%20-%20%60pub%20fn%20get_beacon_state(%26self%2C%20state_id%3A%20%26str%2C)%20-%3E%20Result%3CBeaconState%3CMainnetEthSpec%3E%2C%20Box%3Cdyn%20Error%3E%3E%60%0A%20%20%20%20-%20%60pub%20fn%20is_syncing(%26self)%20-%3E%20Result%3Cbool%2C%20Box%3Cdyn%20Error%3E%3E%60%0A%20%20%20%20-%20%60fn%20get_json_from_client(client%3A%20%26Client%2C%20url%3A%20%26str)%20-%3E%20Result%3CString%2C%20Box%3Cdyn%20Error%3E%3E%60%0A%20%20%20%20-%20%60fn%20get_json_from_raw_request(%26self%2C%20url%3A%20%26str)%20-%3E%20Result%3CString%2C%20Box%3Cdyn%20Error%3E%3E%60%0A%20%20%20%20-%20%60fn%20get_body_json_from_rpc_result(block_json_str%3A%20%26str%2C)%20-%3E%20Result%3Cstd%3A%3Astring%3A%3AString%2C%20Box%3Cdyn%20Error%3E%3E%60%0A%20%20%20%20-%20%60fn%20get_header_json_from_rpc_result(json_str%3A%20%26str%2C)%20-%3E%20Result%3Cstd%3A%3Astring%3A%3AString%2C%20Box%3Cdyn%20Error%3E%3E%60%0A%20%20%20%20-%20%60fn%20get_attested_header_from_light_client_update_json_str(light_client_update_json_str%3A%20%26str%2C)%20-%3E%20Result%3CBeaconBlockHeader%2C%20Box%3Cdyn%20Error%3E%3E%60%0A%20%20%20%20-%20%60fn%20get_sync_aggregate_from_light_client_update_json_str(light_client_update_json_str%3A%20%26str%2C)%20-%3E%20Result%3CSyncAggregate%2C%20Box%3Cdyn%20Error%3E%3E%60%0A%20%20%20%20-%20%60fn%20get_signature_slot(%26self%2C%20light_client_update_json_str%3A%20%26str%2C)%20-%3E%20Result%3CSlot%2C%20Box%3Cdyn%20Error%3E%3E%60%3A%20%60signature_slot%60%20is%20not%20provided%20in%20the%20current%20API.%20The%20slot%20is%20brute-forced%20until%20%60SyncAggregate%60%20in%20%60BeconBlockBody%60%20in%20the%20current%20slot%20is%20equal%20to%20%60SyncAggregate%60%20in%20%60LightClientUpdate%60%0A%20%20%20%20-%20%60fn%20get_finality_update_from_light_client_update_json_str(%26self%2C%20light_client_update_json_str%3A%20%26str%2C)%20-%3E%20Result%3CFinalizedHeaderUpdate%2C%20Box%3Cdyn%20Error%3E%3E%60%0A%20%20%20%20-%20%60fn%20get_sync_committee_update_from_light_client_update_json_str(light_client_update_json_str%3A%20%26str%2C)%20-%3E%20Result%3CSyncCommitteeUpdate%2C%20Box%3Cdyn%20Error%3E%3E%60%0A%20%20%20%20-%20%60pub%20fn%20get_period_for_slot(slot%3A%20u64)%20-%3E%20u64%60%0A%20%20%20%20-%20%60pub%20fn%20get_non_empty_beacon_block_header(%26self%2C%20start_slot%3A%20u64%2C)%20-%3E%20Result%3Ctypes%3A%3ABeaconBlockHeader%2C%20Box%3Cdyn%20Error%3E%3E%60%0A%20%20%20%20-%20%60fn%20check_block_found_for_slot(%26self%2C%20json_str%3A%20%26str)%20-%3E%20Result%3C()%2C%20Box%3Cdyn%20Error%3E%3E%60%0A%20%20-%20%5Bhand_made_finality_light_client_update.rs%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Fblob%2Fmaster%2Feth2near%2Feth_rpc_client%2Fsrc%2Fhand_made_finality_light_client_update.rs)%3A%20Has%20two%20implementations%0A%20%20%20%20-%20The%20first%20implementation%20which%20calls%20functions%20in%20the%20second%0A%20%20%20%20%20%20-%20%60pub%20fn%20get_finality_light_client_update(beacon_rpc_client%3A%20%26BeaconRPCClient%2C%20attested_slot%3A%20u64%2C%20include_next_sync_committee%3A%20bool%2C)%20-%3E%20Result%3CLightClientUpdate%2C%20Box%3Cdyn%20Error%3E%3E%60%0A%20%20%20%20%20%20-%20%60pub%20fn%20get_finality_light_client_update_from_file(beacon_rpc_client%3A%20%26BeaconRPCClient%2C%20file_name%3A%20%26str%2C)%20-%3E%20Result%3CLightClientUpdate%2C%20Box%3Cdyn%20Error%3E%3E%60%0A%20%20%20%20%20%20-%20%60pub%20fn%20get_light_client_update_from_file_with_next_sync_committee(beacon_rpc_client%3A%20%26BeaconRPCClient%2C%20attested_state_file_name%3A%20%26str%2C%20finality_state_file_name%3A%20%26str%2C)%20-%3E%20Result%3CLightClientUpdate%2C%20Box%3Cdyn%20Error%3E%3E%60%0A%20%20%20%20-%20The%20second%20implementation%0A%20%20%20%20%20%20-%20%60fn%20get_attested_slot_with_enough_sync_committee_bits_sum(beacon_rpc_client%3A%20%26BeaconRPCClient%2Cattested_slot%3A%20u64%2C)%20-%3E%20Result%3C(u64%2C%20u64)%2C%20Box%3Cdyn%20Error%3E%3E%60%0A%20%20%20%20%20%20-%20%60fn%20get_state_from_file(file_name%3A%20%26str)%20-%3E%20Result%3CBeaconState%3CMainnetEthSpec%3E%2C%20Box%3Cdyn%20Error%3E%3E%60%0A%20%20%20%20%20%20-%20%60fn%20get_finality_light_client_update_for_state(beacon_rpc_client%3A%20%26BeaconRPCClient%2Cattested_slot%3A%20u64%2C%20signature_slot%3A%20u64%2C%20beacon_state%3A%20BeaconState%3CMainnetEthSpec%3E%2C%20finality_beacon_state%3A%20Option%3CBeaconState%3CMainnetEthSpec%3E%3E%2C)%20-%3E%20Result%3CLightClientUpdate%2C%20Box%3Cdyn%20Error%3E%3E%60%0A%20%20%20%20%20%20-%20%60fn%20get_next_sync_committee(beacon_state%3A%20%26BeaconState%3CMainnetEthSpec%3E%2C)%20-%3E%20Result%3CSyncCommitteeUpdate%2C%20Box%3Cdyn%20Error%3E%3E%60%0A%20%20%20%20%20%20-%20%60fn%20from_lighthouse_beacon_header(beacon_header%3A%20%26BeaconBlockHeader%2C)%20-%3E%20eth_types%3A%3Aeth2%3A%3ABeaconBlockHeader%60%0A%20%20%20%20%20%20-%20%60fn%20get_sync_committee_bits(sync_committee_signature%3A%20%26types%3A%3ASyncAggregate%3CMainnetEthSpec%3E%2C)%20-%3E%20Result%3C%5Bu8%3B%2064%5D%2C%20Box%3Cdyn%20Error%3E%3E%60%0A%20%20%20%20%20%20-%20%60fn%20get_finality_branch(beacon_state%3A%20%26BeaconState%3CMainnetEthSpec%3E%2C)%20-%3E%20Result%3CVec%3CH256%3E%2C%20Box%3Cdyn%20Error%3E%3E%60%0A%20%20%20%20%20%20-%20%60fn%20get_finality_update(finality_header%3A%20%26BeaconBlockHeader%2C%20beacon_state%3A%20%26BeaconState%3CMainnetEthSpec%3E%2C%20finalized_block_body%3A%20%26BeaconBlockBody%3CMainnetEthSpec%3E%2C)%20-%3E%20Result%3CFinalizedHeaderUpdate%2C%20Box%3Cdyn%20Error%3E%3E%60%0A%20%20-%20%5Blight_client_snapshot_with_proof.rs%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Fblob%2Fmaster%2Feth2near%2Feth_rpc_client%2Fsrc%2Flight_client_snapshot_with_proof.rs)%3A%20contains%20the%20structure%20for%20%60LightClientSnapshotWithProof%60%0A%0A%20%20%20%20%20%20%20%20%60%60%60%0A%20%20%20%20%20%20%20%20pub%20struct%20LightClientSnapshotWithProof%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20pub%20beacon_header%3A%20BeaconBlockHeader%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20pub%20current_sync_committee%3A%20SyncCommittee%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20pub%20current_sync_committee_branch%3A%20Vec%3CH256%3E%2C%0A%20%20%20%20%20%20%20%20%7D%0A%20%20%20%20%20%20%20%20%60%60%60%0A%0A-%20%5Beth2near-block-relay-rs%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Ftree%2Fmaster%2Feth2near%2Feth2near-block-relay-rs)%20includes%20(but%20not%20limited%20to)%20the%20following%20additional%20components%0A%20%20-%20%5Bconfig.rs%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Fblob%2Fmaster%2Feth2near%2Feth2near-block-relay-rs%2Fsrc%2Fconfig.rs)%3A%0A%20%20-%20%5Blast_slot_searcher.rs%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Fblob%2Fmaster%2Feth2near%2Feth2near-block-relay-rs%2Fsrc%2Flast_slot_searcher.rs)%3A%20Implementation%20of%20functions%20for%20searching%20last%20slot%20on%20NEAR%20contract.%20Supports%20both%20binary%20and%20linear%20searches.%0A%20%20%20%20-%20%60pub%20fn%20get_last_slot(%26mut%20self%2C%20last_eth_slot%3A%20u64%2C%20beacon_rpc_client%3A%20%26BeaconRPCClient%2C%20eth_client_contract%3A%20%26Box%3Cdyn%20EthClientContractTrait%3E%2C)%20-%3E%20Result%3Cu64%2C%20Box%3Cdyn%20Error%3E%3E%60%0A%20%20%20%20-%20%60n%20binary_slot_search(%26self%2C%20slot%3A%20u64%2C%20finalized_slot%3A%20u64%2C%20last_eth_slot%3A%20u64%2C%20beacon_rpc_client%3A%20%26BeaconRPCClient%2C%20eth_client_contract%3A%20%26Box%3Cdyn%20EthClientContractTrait%3E%2C)%20-%3E%20Result%3Cu64%2C%20Box%3Cdyn%20Error%3E%3E%60%20%3A%20Search%20for%20the%20slot%20before%20the%20first%20unknown%20slot%20on%20NEAR.%20Assumptions%3A%20(1)%20start_slot%20is%20known%20on%20NEAR%20(2)%20last_slot%20is%20unknown%20on%20NEAR.%20Return%20error%20in%20case%20of%20problem%20with%20network%20connection.%0A%20%20%20%20-%20%60fn%20binsearch_slot_forward(%26self%2C%20slot%3A%20u64%2C%20max_slot%3A%20u64%2C%20beacon_rpc_client%3A%20%26BeaconRPCClient%2Ceth_client_contract%3A%20%26Box%3Cdyn%20EthClientContractTrait%3E%2C)%20-%3E%20Result%3Cu64%2C%20Box%3Cdyn%20Error%3E%3E%20%7B%60%3A%20Search%20for%20the%20slot%20before%20the%20first%20unknown%20slot%20on%20NEAR.%20Assumptions%3A%20(1)%20start_slot%20is%20known%20on%20NEAR%20(2)%20last_slot%20is%20unknown%20on%20NEAR.%20Return%20error%20in%20case%20of%20problem%20with%20network%20connection.%0A%20%20%20%20-%20%60fn%20binsearch_slot_range(%26self%2C%20start_slot%3A%20u64%2C%20last_slot%3A%20u64%2C%20beacon_rpc_client%3A%20%26BeaconRPCClient%2C%20eth_client_contract%3A%20%26Box%3Cdyn%20EthClientContractTrait%3E%2C)%20-%3E%20Result%3Cu64%2C%20Box%3Cdyn%20Error%3E%3E%60%3A%20Search%20for%20the%20slot%20before%20the%20first%20unknown%20slot%20on%20NEAR.%20Assumptions%3A%20(1)%20start_slot%20is%20known%20on%20NEAR%20(2)%20last_slot%20is%20unknown%20on%20NEAR.%20Return%20error%20in%20case%20of%20problem%20with%20network%20connection.%0A%20%20%20%20-%20%60fn%20linear_slot_search(%26self%2C%20slot%3A%20u64%2C%20finalized_slot%3A%20u64%2C%20last_eth_slot%3A%20u64%2C%20beacon_rpc_client%3A%20%26BeaconRPCClient%2C%20eth_client_contract%3A%20%26Box%3Cdyn%20EthClientContractTrait%3E%2C)%20-%3E%20Result%3Cu64%2C%20Box%3Cdyn%20Error%3E%3E%60%3A%20Returns%20the%20last%20slot%20known%20with%20block%20known%20on%20NEAR.%20%60Slot%60%20--%20expected%20last%20known%20slot.%20%60finalized_slot%60%20--%20last%20finalized%20slot%20on%20NEAR%2C%20assume%20as%20known%20slot.%20%60last_eth_slot%60%20--%20head%20slot%20on%20Eth.%0A%20%20%20%20-%20%60fn%20linear_search_forward(%26self%2C%20slot%3A%20u64%2C%20max_slot%3A%20u64%2C%20beacon_rpc_client%3A%20%26BeaconRPCClient%2Ceth_client_contract%3A%20%26Box%3Cdyn%20EthClientContractTrait%3E%2C)%20-%3E%20Result%3Cu64%2C%20Box%3Cdyn%20Error%3E%3E%60%3A%20Returns%20the%20slot%20before%20the%20first%20unknown%20block%20on%20NEAR.%20The%20search%20range%20is%20%5Bslot%20..%20max_slot).%20If%20there%20is%20no%20unknown%20block%20in%20this%20range%20max_slot%20-%201%20will%20be%20returned.%20Assumptions%3A%20(1)%20block%20for%20slot%20is%20submitted%20to%20NEAR.%20(2)%20block%20for%20max_slot%20is%20not%20submitted%20to%20NEAR.%0A%20%20%20%20-%20%60fn%20linear_search_backward(%26self%2C%20start_slot%3A%20u64%2C%20last_slot%3A%20u64%2C%20beacon_rpc_client%3A%20%26BeaconRPCClient%2C%20eth_client_contract%3A%20%26Box%3Cdyn%20EthClientContractTrait%3E%2C)%20-%3E%20Result%3Cu64%2C%20Box%3Cdyn%20Error%3E%3E%60%3A%20Returns%20the%20slot%20before%20the%20first%20unknown%20block%20on%20NEAR.%20The%20search%20range%20is%20%5Blast_slot%20..%20start_slot).%20If%20no%20such%20block%20are%20found%20the%20start_slot%20will%20be%20returned.%20Assumptions%3A%20(1)%20block%20for%20start_slot%20is%20submitted%20to%20NEAR%20(2)%20block%20for%20last_slot%20%2B%201%20is%20not%20submitted%20to%20NEAR.%0A%20%20%20%20-%20%60fn%20find_left_non_error_slot(%26self%2C%20left_slot%3A%20u64%2C%20right_slot%3A%20u64%2C%20step%3A%20i8%2C%20beacon_rpc_client%3A%20%26BeaconRPCClient%2C%20eth_client_contract%3A%20%26Box%3Cdyn%20EthClientContractTrait%3E%2C)%20-%3E%20(u64%2C%20bool)%60%3A%20Find%20the%20leftmost%20non-empty%20slot.%20Search%20range%3A%20%5Bleft_slot%2C%20right_slot).%20Returns%20pair%3A%20(1)%20slot_id%20and%20(2)%20is%20this%20block%20already%20known%20on%20Eth%20client%20on%20NEAR.%20Assume%20that%20right_slot%20is%20non-empty%20and%20it's%20block%20were%20submitted%20to%20NEAR%2C%20so%20if%20non%20correspondent%20block%20is%20found%20we%20return%20(right_slot%2C%20false).%0A%20%20%20%20-%20%60fn%20block_known_on_near(%20%26self%2C%20slot%3A%20u64%2C%20beacon_rpc_client%3A%20%26BeaconRPCClient%2Ceth_client_contract%3A%20%26Box%3Cdyn%20EthClientContractTrait%3E%2C)%20-%3E%20Result%3Cbool%2C%20Box%3Cdyn%20Error%3E%3E%60%3A%20Check%20if%20the%20block%20for%20current%20slot%20in%20Eth2%20already%20were%20submitted%20to%20NEAR.%20Returns%20Error%20if%20slot%20doesn't%20contain%20any%20block.%0A%20%20-%20%5Bmain.rs%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Fblob%2Fmaster%2Feth2near%2Feth2near-block-relay-rs%2Fsrc%2Fmain.rs)%3A%20%5BCommand%20Line%20Argument%20Parser%5D(https%3A%2F%2Fdocs.rs%2Fclap%2Flatest%2Fclap%2F)%20used%20to%20run%20the%20Ethereum%20to%20Near%20Block%20Relay.%20It%20contains%20the%20following%20functions%0A%20%20%20%20-%20%60fn%20get_eth_contract_wrapper(config%3A%20%26Config)%20-%3E%20Box%3Cdyn%20ContractWrapper%3E%60%0A%20%20%20%20-%20%60fn%20get_dao_contract_wrapper(config%3A%20%26Config)%20-%3E%20Box%3Cdyn%20ContractWrapper%3E%60%0A%20%20%20%20-%20%60fn%20get_eth_client_contract(config%3A%20%26Config)%20-%3E%20Box%3Cdyn%20EthClientContractTrait%3E%60%0A%20%20%20%20-%20%60fn%20init_log(args%3A%20%26Arguments%2C%20config%3A%20%26Config)%60%0A%20%20%20%20-%20%60fn%20main()%20-%3E%20Result%3C()%2C%20Box%3Cdyn%20std%3A%3Aerror%3A%3AError%3E%3E%60%0A%20%20-%20%5Bnear_rpc_client.rs%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Fblob%2Fmaster%2Feth2near%2Feth2near-block-relay-rs%2Fsrc%2Fnear_rpc_client.rs)%0A%20%20%20%20-%20%60pub%20fn%20new(endpoint_url%3A%20%26str)%20-%3E%20Self%60%0A%20%20%20%20-%20%60pub%20fn%20check_account_exists(%26self%2C%20account_id%3A%20%26str)%20-%3E%20Result%3Cbool%2C%20Box%3Cdyn%20Error%3E%3E%60%0A%20%20%20%20-%20%60pub%20fn%20is_syncing(%26self)%20-%3E%20Result%3Cbool%2C%20Box%3Cdyn%20Error%3E%3E%60%0A%0A%23%23%23%20Appendix%20B%20-%20Ethereum%20Light%20Client%20Finality%20Update%20Verify%20Components%0A%0A%5Bfinality-update-verify%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Ftree%2Fmaster%2Feth2near%2Ffinality-update-verify)%20is%20called%20from%20%5Bfn%20verify_bls_signature_for_finality_update%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Fblob%2Fmaster%2Feth2near%2Feth2near-block-relay-rs%2Fsrc%2Feth2near_relay.rs%23L422)%20to%20verify%20signatures%20as%20part%20of%20light_client%20updates.%20It%20relies%20heavily%20on%20the%20%5Blighthouse%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Flighthouse)%20codebase%20for%20it's%20consensus%20and%20cryptogrphic%20primitives.%20See%20%5BCryptographic%20Primitives%5D(%23cryptographic-primitives)%20for%20more%20information.%0A%0A-%20Dependencies%20in%20%5BCargo.toml%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Fblob%2Fmaster%2Feth2near%2Ffinality-update-verify%2FCargo.toml)%0A%20%20-%20%60eth-types%20%3D%20%7B%20path%20%3D%22..%2F..%2Fcontracts%2Fnear%2Feth-types%2F%22%2C%20features%20%3D%20%5B%22eip1559%22%5D%7D%60%0A%20%20-%20%60bls%20%3D%20%7B%20git%20%3D%20%22https%3A%2F%2Fgithub.com%2Faurora-is-near%2Flighthouse.git%22%2C%20rev%20%3D%20%22b624c3f0d3c5bc9ea46faa14c9cb2d90ee1e1dec%22%20%7D%60%0A%20%20-%20%60eth2-utility%20%20%3D%20%7B%20path%20%3D%22..%2F..%2Fcontracts%2Fnear%2Feth2-utility%22%7D%60%0A%20%20-%20%60tree_hash%20%3D%20%7B%20git%20%3D%20%22https%3A%2F%2Fgithub.com%2Faurora-is-near%2Flighthouse.git%22%2C%20rev%20%3D%20%22b624c3f0d3c5bc9ea46faa14c9cb2d90ee1e1dec%22%20%7D%60%0A%20%20-%20%60types%20%3D%20%20%7B%20git%20%3D%20%22https%3A%2F%2Fgithub.com%2Faurora-is-near%2Flighthouse.git%22%2C%20rev%20%3D%20%22b624c3f0d3c5bc9ea46faa14c9cb2d90ee1e1dec%22%20%7D%60%0A%20%20-%20%60bitvec%20%3D%20%221.0.0%22%60%0A%0A-%20Functions%20in%20%5Blib.rs%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Fblob%2Fmaster%2Feth2near%2Ffinality-update-verify%2Fsrc%2Flib.rs)%0A%20%20-%20%60fn%20h256_to_hash256(hash%3A%20H256)%20-%3E%20Hash256%60%0A%20%20-%20%60fn%20tree_hash_h256_to_eth_type_h256(hash%3A%20tree_hash%3A%3AHash256)%20-%3E%20eth_types%3A%3AH256%60%0A%20%20-%20%60fn%20to_lighthouse_beacon_block_header(bridge_beacon_block_header%3A%20%26BeaconBlockHeader%2C)%20-%3E%20types%3A%3ABeaconBlockHeader%60%0A%20%20-%20%60pub%20fn%20is_correct_finality_update(ethereum_network%3A%20%26str%2C%20light_client_update%3A%20%26LightClientUpdate%2C%20%20%20sync_committee%3A%20SyncCommittee%2C)%20-%3E%20Result%3Cbool%2C%20Box%3Cdyn%20Error%3E%3E%60%0A%0A%23%23%23%20Appendix%20C%20-%20Cryptographic%20Primitives%0A%0AFollowing%20are%20cryptographic%20primitives%20used%20in%20the%20%5Beth2-client%20contract%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Ftree%2Fmaster%2Fcontracts%2Fnear%2Feth2-client)%20and%20%5Bfinality-update-verify%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Ftree%2Fmaster%2Feth2near%2Ffinality-update-verify).%20Many%20are%20from%20the%20%5Blighthouse%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Flighthouse)%20codebase.%20Specifically%20%5Bconsensus%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Flighthouse%2Ftree%2Fstable%2Fconsensus)%20and%20%5Bcrypto%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Flighthouse%2Ftree%2Fstable%2Fcrypto)%20functions.%0A%0ASome%20common%20primitives%0A%0A-%20%5Bbitvec%5D(https%3A%2F%2Fdocs.rs%2Fbitvec%2F1.0.1%2Fbitvec%2F)%3A%20Addresses%20memory%20by%20bits%2C%20for%20packed%20collections%20and%20bitfields%0A-%20%5Beth2_serde_utils%5D(https%3A%2F%2Fdocs.rs%2Feth2_serde_utils%2F0.1.0%2Feth2_serde_utils%2F)%3A%20Serialization%20and%20deserialization%20utilities%20useful%20for%20JSON%20representations%20of%20Ethereum%202.0%20types.%0A-%20%5Beth2_hashing%5D(https%3A%2F%2Fdocs.rs%2Feth2_hashing%2F0.2.0%2Feth2_hashing%2F)%3A%20Hashing%20primitives%20used%20in%20Ethereum%202.0%0A-%20%5Bblst%5D(https%3A%2F%2Fdocs.rs%2Fblst%2F0.3.10%2Fblst%2F)%3A%20The%20blst%20crate%20provides%20a%20rust%20interface%20to%20the%20blst%20BLS12-381%20signature%20library.%0A-%20%5Btree_hash%5D(https%3A%2F%2Fdocs.rs%2Ftree_hash%2F0.4.0%2Ftree_hash%2F)%3A%20Efficient%20Merkle-hashing%20as%20used%20in%20Ethereum%202.0%0A-%20%5Beth2_ssz_types%5D(https%3A%2F%2Fdocs.rs%2Feth2_ssz_types%2F0.2.1%2Fssz_types%2F)%3A%20Provides%20types%20with%20unique%20properties%20required%20for%20SSZ%20serialization%20and%20Merklization.%0A%0ASome%20Primitives%20from%20Lighthouse%0A%0A-%20%5Bbls%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Flighthouse%2Ftree%2Fstable%2Fcrypto%2Fbls)%3A%20%5BBoneh%E2%80%93Lynn%E2%80%93Shacham%5D(https%3A%2F%2Fen.wikipedia.org%2Fwiki%2FBLS_digital_signature)%20digital%20signature%20support%0A%20%20-%20%5Bimpls%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Flighthouse%2Ftree%2Fstable%2Fcrypto%2Fbls%2Fsrc%2Fimpls)%3A%20Implementations%0A%20%20%20%20-%20%5Bblst%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Flighthouse%2Fblob%2Fstable%2Fcrypto%2Fbls%2Fsrc%2Fimpls%2Fblst.rs)%0A%20%20%20%20-%20%5Bfake_crypto%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Flighthouse%2Fblob%2Fstable%2Fcrypto%2Fbls%2Fsrc%2Fimpls%2Ffake_crypto.rs)%0A%20%20%20%20-%20%5Bmilagro%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Flighthouse%2Fblob%2Fstable%2Fcrypto%2Fbls%2Fsrc%2Fimpls%2Fmilagro.rs)%3A%20support%20for%20%5BApache%20Milagro%5D(https%3A%2F%2Fmilagro.apache.org%2Fdocs%2Fmilagro-intro%2F)%0A%20%20%20%20-%20%5Bfunctionality%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Flighthouse%2Ftree%2Fstable%2Fcrypto%2Fbls%2Fsrc)%0A%20%20%20%20%20%20-%20%5Bgeneric_aggregate_public_key%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Flighthouse%2Fblob%2Fstable%2Fcrypto%2Fbls%2Fsrc%2Fgeneric_aggregate_public_key.rs)%0A%20%20%20%20%20%20-%20%5Bgeneric_aggregate_signature%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Flighthouse%2Fblob%2Fstable%2Fcrypto%2Fbls%2Fsrc%2Fgeneric_aggregate_signature.rs)%0A%20%20%20%20%20%20-%20%5Bgeneric_keypair%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Flighthouse%2Fblob%2Fstable%2Fcrypto%2Fbls%2Fsrc%2Fgeneric_keypair.rs)%0A%20%20%20%20%20%20-%20%5Bgeneric_public_key%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Flighthouse%2Fblob%2Fstable%2Fcrypto%2Fbls%2Fsrc%2Fgeneric_public_key.rs)%0A%20%20%20%20%20%20-%20%5Bgeneric_public_key_bytes%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Flighthouse%2Fblob%2Fstable%2Fcrypto%2Fbls%2Fsrc%2Fgeneric_public_key_bytes.rs)%0A%20%20%20%20%20%20-%20%5Bgeneric_secret_key%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Flighthouse%2Fblob%2Fstable%2Fcrypto%2Fbls%2Fsrc%2Fgeneric_secret_key.rs)%0A%20%20%20%20%20%20-%20%5Bgeneric_signature%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Flighthouse%2Fblob%2Fstable%2Fcrypto%2Fbls%2Fsrc%2Fgeneric_signature.rs)%0A%20%20%20%20%20%20-%20%5Bgeneric_signature_bytes%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Flighthouse%2Fblob%2Fstable%2Fcrypto%2Fbls%2Fsrc%2Fgeneric_signature_bytes.rs)%0A%20%20%20%20%20%20-%20%5Bgeneric_signature_set%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Flighthouse%2Fblob%2Fstable%2Fcrypto%2Fbls%2Fsrc%2Fgeneric_signature_set.rs)%0A%20%20%20%20%20%20-%20%5Bget_withdrawal_credentials%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Flighthouse%2Fblob%2Fstable%2Fcrypto%2Fbls%2Fsrc%2Fget_withdrawal_credentials.rs)%0A%20%20%20%20%20%20-%20%5Bzeroize_hash%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Flighthouse%2Fblob%2Fstable%2Fcrypto%2Fbls%2Fsrc%2Fzeroize_hash.rs)%0A-%20%5Bmerkle_proof%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Flighthouse%2Ftree%2Fstable%2Fconsensus%2Fmerkle_proof)%0A-%20%5Btree_hash%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Flighthouse%2Ftree%2Fstable%2Fconsensus%2Ftree_hash)%0A-%20%5Btypes%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Flighthouse%2Ftree%2Fstable%2Fconsensus%2Ftypes%2Fsrc)%3A%20Implements%20Ethereum%202.0%20types%20including%20but%20not%20limited%20to%0A%20%20-%20%5Battestation%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Flighthouse%2Fblob%2Fstable%2Fconsensus%2Ftypes%2Fsrc%2Fattestation.rs)%0A%20%20-%20%5Bbeacon_block%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Flighthouse%2Fblob%2Fstable%2Fconsensus%2Ftypes%2Fsrc%2Fbeacon_block.rs)%0A%20%20-%20%5Bbeacon_committee%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Flighthouse%2Fblob%2Fstable%2Fconsensus%2Ftypes%2Fsrc%2Fbeacon_committee.rs)%0A%20%20-%20%5Bbeacon_state%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Flighthouse%2Fblob%2Fstable%2Fconsensus%2Ftypes%2Fsrc%2Fbeacon_state.rs)%0A%20%20-%20%5Bbuilder_bid%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Flighthouse%2Fblob%2Fstable%2Fconsensus%2Ftypes%2Fsrc%2Fbuilder_bid.rs)%0A%20%20-%20%5Bchain_spec%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Flighthouse%2Fblob%2Fstable%2Fconsensus%2Ftypes%2Fsrc%2Fchain_spec.rs)%0A%20%20-%20%5Bcheckpoint%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Flighthouse%2Fblob%2Fstable%2Fconsensus%2Ftypes%2Fsrc%2Fcheckpoint.rs)%0A%20%20-%20%5Bcontribution_and_proof%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Flighthouse%2Fblob%2Fstable%2Fconsensus%2Ftypes%2Fsrc%2Fcontribution_and_proof.rs)%3A%20A%20Validators%20aggregate%20sync%20committee%20contribution%20and%20selection%20proof.%0A%20%20-%20%5Bdeposit%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Flighthouse%2Fblob%2Fstable%2Fconsensus%2Ftypes%2Fsrc%2Fdeposit.rs)%3A%20A%20deposit%20to%20potentially%20become%20a%20beacon%20chain%20validator.%0A%20%20-%20%5Benr_fork_id%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Flighthouse%2Fblob%2Fstable%2Fconsensus%2Ftypes%2Fsrc%2Fenr_fork_id.rs)%3A%20Specifies%20a%20fork%20which%20allows%20nodes%20to%20identify%20each%20other%20on%20the%20network.%20This%20fork%20is%20used%20in%20a%20nodes%20local%20ENR.%0A%20%20-%20%5Beth_spec%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Flighthouse%2Fblob%2Fstable%2Fconsensus%2Ftypes%2Fsrc%2Feth_spec.rs)%3A%20Ethereum%20Foundation%20specifications.%0A%20%20-%20%5Bexecution_block_hash%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Flighthouse%2Fblob%2Fstable%2Fconsensus%2Ftypes%2Fsrc%2Fexecution_block_hash.rs)%0A%20%20-%20%5Bexecution_payload%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Flighthouse%2Fblob%2Fstable%2Fconsensus%2Ftypes%2Fsrc%2Fexecution_payload.rs)%0A%20%20-%20%5Bfork%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Flighthouse%2Fblob%2Fstable%2Fconsensus%2Ftypes%2Fsrc%2Ffork.rs)%3A%20Specifies%20a%20fork%20of%20the%20%60BeaconChain%60%2C%20to%20prevent%20replay%20attacks.%0A%20%20-%20%5Bfree_attestation%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Flighthouse%2Fblob%2Fstable%2Fconsensus%2Ftypes%2Fsrc%2Ffree_attestation.rs)%3A%20Note%3A%20this%20object%20does%20not%20actually%20exist%20in%20the%20spec.%20We%20use%20it%20for%20managing%20attestations%20that%20have%20not%20been%20aggregated.%0A%20%20-%20%5Bpayload%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Flighthouse%2Fblob%2Fstable%2Fconsensus%2Ftypes%2Fsrc%2Fpayload.rs)%0A%20%20-%20%5Bsigned_aggregate_and_proof%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Flighthouse%2Fblob%2Fstable%2Fconsensus%2Ftypes%2Fsrc%2Fsigned_aggregate_and_proof.rs)%3A%20A%20Validators%20signed%20aggregate%20proof%20to%20publish%20on%20the%20%60beacon_aggregate_and_proof%60%20gossipsub%20topic.%0A%20%20-%20%5Bsigned_beacon_block%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Flighthouse%2Fblob%2Fstable%2Fconsensus%2Ftypes%2Fsrc%2Fsigned_beacon_block.rs)%3A%20A%20%60BeaconBlock%60%20and%20a%20signature%20from%20its%20proposer.%0A%20%20-%20%5Bslot_data%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Flighthouse%2Fblob%2Fstable%2Fconsensus%2Ftypes%2Fsrc%2Fslot_data.rs)%3A%20A%20trait%20providing%20a%20%60Slot%60%20getter%20for%20messages%20that%20are%20related%20to%20a%20single%20slot.%20Useful%20in%20making%20parts%20of%20attestation%20and%20sync%20committee%20processing%20generic.%0A%20%20-%20%5Bslot_epoch%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Flighthouse%2Fblob%2Fstable%2Fconsensus%2Ftypes%2Fsrc%2Fslot_epoch.rs)%3A%20The%20%60Slot%60%20and%20%60Epoch%60%20types%20are%20defined%20as%20new%20types%20over%20u64%20to%20enforce%20type-safety%20between%20the%20two%20types.%20Note%3A%20Time%20on%20Ethereum%202.0%20Proof%20of%20Stake%20is%20divided%20into%20slots%20and%20epochs.%20One%20slot%20is%2012%20seconds.%20One%20epoch%20is%206.4%20minutes%2C%20consisting%20of%2032%20slots.%20One%20block%20can%20be%20created%20for%20each%20slot.%0A%20%20-%20%5Bsync_aggregate%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Flighthouse%2Fblob%2Fstable%2Fconsensus%2Ftypes%2Fsrc%2Fsync_aggregate.rs)%3A%20Create%20a%20%60SyncAggregate%60%20from%20a%20slice%20of%20%60SyncCommitteeContribution%60s.%20Equivalent%20to%20%60process_sync_committee_contributions%60%20from%20the%20spec.%0A%20%20-%20%5Bsync_committee%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Flighthouse%2Fblob%2Fstable%2Fconsensus%2Ftypes%2Fsrc%2Fsync_committee.rs)%0A%20%20-%20%5Btree_hash_impls%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Flighthouse%2Fblob%2Fstable%2Fconsensus%2Ftypes%2Fsrc%2Ftree_hash_impls.rs)%3A%20contains%20custom%20implementations%20of%20%60CachedTreeHash%60%20for%20ETH2-specific%20types.%20It%20makes%20some%20assumptions%20about%20the%20layouts%20and%20update%20patterns%20of%20other%20structs%20in%20this%20crate%2C%20and%20should%20be%20updated%20carefully%20whenever%20those%20structs%20are%20changed.%0A%20%20-%20%5Bvalidator%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Flighthouse%2Fblob%2Fstable%2Fconsensus%2Ftypes%2Fsrc%2Fvalidator.rs)%3A%20Information%20about%20a%20%60BeaconChain%60%20validator.%0A%0ASome%20Smart%20Contracts%20deployed%20on%20Ethereum%0A%0A-%20%5Bnearprover%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Ftree%2Fmaster%2Fcontracts%2Feth%2Fnearprover)%0A%20%20-%20%5BProofDecoder.sol%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Fblob%2Fmaster%2Fcontracts%2Feth%2Fnearprover%2Fcontracts%2FProofDecoder.sol)%0A%20%20-%20%5BNearProver.sol%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Fblob%2Fmaster%2Fcontracts%2Feth%2Fnearprover%2Fcontracts%2FNearProver.sol)%0A-%20%5Bnearbridge%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Ftree%2Fmaster%2Fcontracts%2Feth%2Fnearbridge%2Fcontracts)%0A%20%20-%20%5BNearDecoder.sol%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Fblob%2Fmaster%2Fcontracts%2Feth%2Fnearbridge%2Fcontracts%2FNearDecoder.sol)%3A%20handles%20decoing%20of%20Public%20Keys%2C%20Signatures%2C%20BlockProducers%20and%20LightClientBlocks%20using%20%60Borsh.sol%60%0A%20%20-%20%5BUtils.sol%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Fblob%2Fmaster%2Fcontracts%2Feth%2Fnearbridge%2Fcontracts%2FUtils.sol)%3A%20handles%20reading%20and%20writing%20to%20memory%2C%20memoryToBytes%20and%20has%20functions%20such%20as%20%60keccak256Raw%60%20and%20%60sha256Raw%60%0A%20%20-%20%5BBorsh.sol%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Fblob%2Fmaster%2Fcontracts%2Feth%2Fnearbridge%2Fcontracts%2FBorsh.sol)%3A%20%5BBorsh%5D(https%3A%2F%2Fborsh.io%2F)%3A%20Binary%20Object%20Representation%20Serializer%20for%20Hashing.%20It%20is%20meant%20to%20be%20used%20in%20security-critical%20projects%20as%20it%20prioritizes%20consistency%2C%20safety%2C%20speed%3B%20and%20comes%20with%20a%20strict%20specification.%0A%20%20-%20%5BEd25519.sol%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Fblob%2Fmaster%2Fcontracts%2Feth%2Fnearbridge%2Fcontracts%2FEd25519.sol)%3A%20%5BEd25519%5D(https%3A%2F%2Fed25519.cr.yp.to%2F)%20high-speed%20high-security%20signatures%0A%0ASome%20Primitives%20from%20NEAR%20Rainbow%20Bridge%0A%0A-%20%5Beth-types%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Ftree%2Fmaster%2Fcontracts%2Fnear%2Feth-types)%3A%20utilities%20to%20serialize%20and%20encode%20eth2%20types%20using%20%5Bborsh%5D(https%3A%2F%2Fborsh.io%2F)%20and%20%5Brlp%5D(https%3A%2F%2Fethereum.org%2Fen%2Fdevelopers%2Fdocs%2Fdata-structures-and-encoding%2Frlp).%0A-%20%5Beth2-utility%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Ftree%2Fmaster%2Fcontracts%2Fnear%2Feth2-utility)%3A%20Utility%20functions%20used%20for%20Ethereum%202.0%20Consensus.%20Functions%20include%0A%20%20-%20%60fn%20from_str(input%3A%20%26str)%20-%3E%20Result%3CNetwork%2C%20Self%3A%3AErr%3E%60%0A%20%20-%20%60pub%20fn%20new(network%3A%20%26Network)%20-%3E%20Self%60%0A%20%20-%20%60pub%20fn%20compute_fork_version(%26self%2C%20epoch%3A%20Epoch)%20-%3E%20Option%3CForkVersion%3E%60%0A%20%20-%20%60pub%20fn%20compute_fork_version_by_slot(%26self%2C%20slot%3A%20Slot)%20-%3E%20Option%3CForkVersion%3E%60%0A%20%20-%20%60pub%20const%20fn%20compute_epoch_at_slot(slot%3A%20Slot)%20-%3E%20u64%60%0A%20%20-%20%60pub%20const%20fn%20compute_sync_committee_period(slot%3A%20Slot)%20-%3E%20u64%60%0A%20%20-%20%60pub%20const%20fn%20floorlog2(x%3A%20u32)%20-%3E%20u32%60%3A%20Compute%20floor%20of%20log2%20of%20a%20u32.%0A%20%20-%20%60pub%20const%20fn%20get_subtree_index(generalized_index%3A%20u32)%20-%3E%20u32%60%0A%20%20-%20%60pub%20fn%20compute_domain(domain_constant%3A%20DomainType%2C%20fork_version%3A%20ForkVersion%2C%20genesis_validators_root%3A%20H256%2C)%20-%3E%20H256%60%0A%20%20-%20%60pub%20fn%20compute_signing_root(object_root%3A%20H256%2C%20domain%3A%20H256)%20-%3E%20H256%60%0A%20%20-%20%60pub%20fn%20get_participant_pubkeys(public_keys%3A%20%26%5BPublicKeyBytes%5D%2C%20sync_committee_bits%3A%20%26BitVec%3Cu8%2C%20Lsb0%3E%2C)%20-%3E%20Vec%3CPublicKeyBytes%3E%60%0A%20%20-%20%60pub%20fn%20convert_branch(branch%3A%20%26%5BH256%5D)%20-%3E%20Vec%3Cethereum_types%3A%3AH256%3E%60%0A%20%20-%20%60pub%20fn%20validate_beacon_block_header_update(header_update%3A%20%26HeaderUpdate)%20-%3E%20bool%60%0A%20%20-%20%60pub%20fn%20calculate_min_storage_balance_for_submitter(max_submitted_blocks_by_account%3A%20u32%2C)%20-%3E%20Balance%60%0A%0A**Nearbridge%20Cryptographic%20Primitives**%0A%0A-%20%5BEd25519.sol%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Fblob%2Fmaster%2Fcontracts%2Feth%2Fnearbridge%2Fcontracts%2FEd25519.sol)%3A%20Solidity%20implementation%20of%20the%20%5BEd25519%5D(https%3A%2F%2Fen.wikipedia.org%2Fwiki%2FEdDSA)%20which%20is%20the%20EdDSA%20signature%20scheme%20using%20SHA-512%20(SHA-2)%20and%20Curve25519%20(see%20%5Bhere%5D(https%3A%2F%2Fnbeguier.medium.com%2Fa-real-world-comparison-of-the-ssh-key-algorithms-b26b0b31bfd9)).%20It%20has%20the%20following%20functions%0A%20%20-%20%60function%20pow22501(uint256%20v)%20private%20pure%20returns%20(uint256%20p22501%2C%20uint256%20p11)%60%20%3A%20Computes%20(v%5E(2%5E250-1)%2C%20v%5E11)%20mod%20p%0A%20%20-%20%60function%20check(bytes32%20k%2C%20bytes32%20r%2C%20bytes32%20s%2C%20bytes32%20m1%2C%20bytes9%20m2)%60%20%3A%20has%20the%20following%20steps%0A%20%20%20%20-%20Step%201%3A%20compute%20SHA-512(R%2C%20A%2C%20M)%0A%20%20%20%20-%20Step%202%3A%20unpack%20k%0A%20%20%20%20-%20Step%203%3A%20compute%20multiples%20of%20k%0A%20%20%20%20-%20Step%204%3A%20compute%20s*G%20-%20h*A%0A%20%20%20%20-%20Step%205%3A%20compare%20the%20points%0A-%20%5BUtils.sol%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Fblob%2Fmaster%2Fcontracts%2Feth%2Fnearbridge%2Fcontracts%2FUtils.sol)%3A%20A%20set%20of%20utilty%20functions%20for%20byte%20manipulation%2C%20memory%20updates%20and%20%5Bkeccak%5D(https%3A%2F%2Fkeccak.team%2Fkeccak_specs_summary.html)%20functions.%0A%20%20-%20%60function%20swapBytes2(uint16%20v)%20internal%20pure%20returns%20(uint16)%60%0A%20%20-%20%60function%20swapBytes4(uint32%20v)%20internal%20pure%20returns%20(uint32)%60%0A%20%20-%20%60function%20swapBytes8(uint64%20v)%20internal%20pure%20returns%20(uint64)%60%0A%20%20-%20%60function%20swapBytes16(uint128%20v)%20internal%20pure%20returns%20(uint128)%60%0A%20%20-%20%60function%20swapBytes32(uint256%20v)%20internal%20pure%20returns%20(uint256)%60%0A%20%20-%20%60function%20readMemory(uint%20ptr)%20internal%20pure%20returns%20(uint%20res)%60%0A%20%20-%20%60function%20writeMemory(uint%20ptr%2C%20uint%20value)%20internal%20pure%60%0A%20%20-%20%60function%20memoryToBytes(uint%20ptr%2C%20uint%20length)%20internal%20pure%20returns%20(bytes%20memory%20res)%60%0A%20%20-%20%60function%20keccak256Raw(uint%20ptr%2C%20uint%20length)%20internal%20pure%20returns%20(bytes32%20res)%60%0A%20%20-%20%60function%20sha256Raw(uint%20ptr%2C%20uint%20length)%20internal%20view%20returns%20(bytes32%20res)%60%0A-%20%5BBorsh.sol%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Fblob%2Fmaster%2Fcontracts%2Feth%2Fnearbridge%2Fcontracts%2FBorsh.sol)%20provides%20Binary%20Object%20Representation%20Serializer%20for%20Hashing%20%5Bborsh%5D(https%3A%2F%2Fborsh.io%2F)%20functionality%20and%20imports%20%60Utils.sols%60.%20Structures%20and%20functions%20include%0A%20%20-%20%60struct%20Data%20%7Buint%20ptr%3B%20uint%20end%3B%7D%60%0A%20%20-%20%60function%20from(bytes%20memory%20data)%20internal%20pure%20returns%20(Data%20memory%20res)%60%0A%20%20-%20%60function%20requireSpace(Data%20memory%20data%2C%20uint%20length)%20internal%20pure%60%3A%20This%20function%20assumes%20that%20length%20is%20reasonably%20small%2C%20so%20that%20data.ptr%20%2B%20length%20will%20not%20overflow.%20In%20the%20current%20code%2C%20length%20is%20always%20less%20than%202%5E32.%0A%20%20-%20%60function%20read(Data%20memory%20data%2C%20uint%20length)%20internal%20pure%20returns%20(bytes32%20res)%60%0A%20%20-%20%60function%20done(Data%20memory%20data)%20internal%20pure%60%0A%20%20-%20%60function%20peekKeccak256(Data%20memory%20data%2C%20uint%20length)%20internal%20pure%20returns%20(bytes32)%60%3A%20Same%20considerations%20as%20for%20requireSpace.%0A%20%20-%20%60function%20peekSha256(Data%20memory%20data%2C%20uint%20length)%20internal%20view%20returns%20(bytes32)%60%3A%20Same%20considerations%20as%20for%20requireSpace.%0A%20%20-%20%60function%20decodeU8(Data%20memory%20data)%20internal%20pure%20returns%20(uint8)%60%0A%20%20-%20%60function%20decodeU16(Data%20memory%20data)%20internal%20pure%20returns%20(uint16)%60%0A%20%20-%20%60function%20decodeU32(Data%20memory%20data)%20internal%20pure%20returns%20(uint32)%60%0A%20%20-%20%60function%20decodeU64(Data%20memory%20data)%20internal%20pure%20returns%20(uint64)%60%0A%20%20-%20%60function%20decodeU128(Data%20memory%20data)%20internal%20pure%20returns%20(uint128)%60%0A%20%20-%20%60function%20decodeU256(Data%20memory%20data)%20internal%20pure%20returns%20(uint256)%60%0A%20%20-%20%60function%20decodeBytes20(Data%20memory%20data)%20internal%20pure%20returns%20(bytes20)%60%0A%20%20-%20%60function%20decodeBytes32(Data%20memory%20data)%20internal%20pure%20returns%20(bytes32)%60%0A%20%20-%20%60function%20decodeBool(Data%20memory%20data)%20internal%20pure%20returns%20(bool)%60%0A%20%20-%20%60function%20skipBytes(Data%20memory%20data)%20internal%20pure%60%0A%20%20-%20%60function%20decodeBytes(Data%20memory%20data)%20internal%20pure%20returns%20(bytes%20memory%20res)%60%0A-%20%5BNearDecoder.sol%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Fblob%2Fmaster%2Fcontracts%2Feth%2Fnearbridge%2Fcontracts%2FNearDecoder.sol)%3A%20Imports%20%60Borsh.sol%60%20and%20has%20utilities%20for%20decoding%20Public%20Keys%2C%20Signatures%2C%20Block%20Producers%2C%20Block%20Headers%20and%20Light%20Client%20Blocks.%0A%20%20-%20%60function%20decodePublicKey(Borsh.Data%20memory%20data)%20internal%20pure%20returns%20(PublicKey%20memory%20res)%60%0A%20%20-%20%60function%20decodeSignature(Borsh.Data%20memory%20data)%20internal%20pure%20returns%20(Signature%20memory%20res)%60%0A%20%20-%20%60function%20decodeBlockProducer(Borsh.Data%20memory%20data)%20internal%20pure%20returns%20(BlockProducer%20memory%20res)%60%0A%20%20-%20%60function%20decodeBlockProducers(Borsh.Data%20memory%20data)%20internal%20pure%20returns%20(BlockProducer%5B%5D%20memory%20res)%60%0A%20%20-%20%60function%20decodeOptionalBlockProducers(Borsh.Data%20memory%20data)%20internal%20view%20returns%20(OptionalBlockProducers%20memory%20res)%60%0A%20%20-%20%60function%20decodeOptionalSignature(Borsh.Data%20memory%20data)%20internal%20pure%20returns%20(OptionalSignature%20memory%20res)%60%0A%20%20-%20%60function%20decodeBlockHeaderInnerLite(Borsh.Data%20memory%20data)%20internal%20view%20returns%20(BlockHeaderInnerLite%20memory%20res)%60%0A%20%20-%20%60function%20decodeLightClientBlock(Borsh.Data%20memory%20data)%20internal%20view%20returns%20(LightClientBlock%20memory%20res)%60%0A-%20%5BProofDecoder.sol%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Fblob%2Fmaster%2Fcontracts%2Feth%2Fnearprover%2Fcontracts%2FProofDecoder.sol)%3A%20Imports%20%60Borsh.sol%60%20and%20%60NearDecoder.sol%60%20and%20has%20utilities%20for%20decoding%20Proofs%2C%20BlockHeader%2C%20ExecutionStatus%2C%20ExecutionOutcome%20and%20MerklePaths.%20Structures%20and%20functions%20include%0A%20%20-%20%60struct%20FullOutcomeProof%20%7BExecutionOutcomeWithIdAndProof%20outcome_proof%3B%20MerklePath%20outcome_root_proof%3B%20BlockHeaderLight%20block_header_lite%3B%20MerklePath%20block_proof%3B%7D%60%0A%20%20-%20%60function%20decodeFullOutcomeProof(Borsh.Data%20memory%20data)%20internal%20view%20returns%20(FullOutcomeProof%20memory%20proof)%60%0A%20%20-%20%60struct%20BlockHeaderLight%20%7Bbytes32%20prev_block_hash%3B%20bytes32%20inner_rest_hash%3B%20NearDecoder.BlockHeaderInnerLite%20inner_lite%3B%20bytes32%20hash%3B%7D%60%0A%20%20-%20%60function%20decodeBlockHeaderLight(Borsh.Data%20memory%20data)%20internal%20view%20returns%20(BlockHeaderLight%20memory%20header)%60%0A%20%20-%20%60struct%20ExecutionStatus%20%7Buint8%20enumIndex%3B%20bool%20unknown%3B%20bool%20failed%3B%20bytes%20successValue%3B%20bytes32%20successReceiptId%3B%7D%60%0A%20%20%20%20-%20%60successValue%60%20indicates%20if%20the%20final%20action%20succeeded%20and%20returned%20some%20value%20or%20an%20empty%20vec.%0A%20%20%20%20-%20%60successReceiptId%60%20is%20the%20final%20action%20of%20the%20receipt%20returned%20a%20promise%20or%20the%20signed%20transaction%20was%20converted%20to%20a%20receipt.%20Contains%20the%20receipt_id%20of%20the%20generated%20receipt.%0A%20%20-%20%60function%20decodeExecutionStatus(Borsh.Data%20memory%20data)%20internal%20pure%20returns%20(ExecutionStatus%20memory%20executionStatus)%60%0A%20%20-%20%60struct%20ExecutionOutcome%20%7Bbytes%5B%5D%20logs%3B%20bytes32%5B%5D%20receipt_ids%3B%20uint64%20gas_burnt%3B%20uint128%20tokens_burnt%3B%20bytes%20executor_id%3B%20ExecutionStatus%20status%3B%20bytes32%5B%5D%20merkelization_hashes%3B%7D%60%0A%20%20%20%20-%20%60bytes%5B%5D%20logs%3B%60%3A%20Logs%20from%20this%20transaction%20or%20receipt.%0A%20%20%20%20-%20%60bytes32%5B%5D%20receipt_ids%3B%60%3A%20Receipt%20IDs%20generated%20by%20this%20transaction%20or%20receipt.%0A%20%20%20%20-%20%60uint64%20gas_burnt%3B%60%3A%20The%20amount%20of%20the%20gas%20burnt%20by%20the%20given%20transaction%20or%20receipt.%0A%20%20%20%20-%20%60uint128%20tokens_burnt%3B%60%3A%20The%20total%20number%20of%20the%20tokens%20burnt%20by%20the%20given%20transaction%20or%20receipt.%0A%20%20%20%20-%20%60bytes%20executor_id%3B%60%3A%20Hash%20of%20the%20transaction%20or%20receipt%20id%20that%20produced%20this%20outcome.%0A%20%20%20%20-%20%60ExecutionStatus%20status%60%3A%20Execution%20status.%20Contains%20the%20result%20in%20case%20of%20successful%20execution.%0A%20%20%20%20-%20%60bytes32%5B%5D%20merkelization_hashes%3B%60%0A%20%20-%20%60function%20decodeExecutionOutcome(Borsh.Data%20memory%20data)%20internal%20view%20returns%20(ExecutionOutcome%20memory%20outcome)%60%0A%20%20-%20%60struct%20ExecutionOutcomeWithId%20%7Bbytes32%20id%3B%20ExecutionOutcome%20outcome%3B%20bytes32%20hash%3B%7D%60%0A%20%20%20%20-%20%60bytes32%20id%60%3A%20is%20the%20transaction%20hash%20or%20the%20receipt%20ID.%0A%20%20-%20%60function%20decodeExecutionOutcomeWithId(Borsh.Data%20memory%20data)%20internal%20view%20returns%20(ExecutionOutcomeWithId%20memory%20outcome)%60%0A%20%20-%20%60struct%20MerklePathItem%20%7Bbytes32%20hash%3B%20uint8%20direction%3B%7D%60%0A%20%20%20%20-%20%60uint8%20direction%60%3A%20where%200%20%3D%20left%2C%201%20%3D%20right%0A%20%20-%20%60function%20decodeMerklePathItem(Borsh.Data%20memory%20data)%20internal%20pure%20returns%20(MerklePathItem%20memory%20item)%60%0A%20%20-%20%60struct%20MerklePath%20%7BMerklePathItem%5B%5D%20items%3B%7D%60%0A%20%20-%20%60function%20decodeMerklePath(Borsh.Data%20memory%20data)%20internal%20pure%20returns%20(MerklePath%20memory%20path)%60%0A%20%20-%20%60struct%20ExecutionOutcomeWithIdAndProof%20%7BMerklePath%20proof%3B%20bytes32%20block_hash%3B%20ExecutionOutcomeWithId%20outcome_with_id%3B%7D%60%0A%20%20-%20%60function%20decodeExecutionOutcomeWithIdAndProof(Borsh.Data%20memory%20data)internal%20view%20returns%20(ExecutionOutcomeWithIdAndProof%20memory%20outcome)%60%0A%0A%23%23%23%20Appendix%20D%20-%20NEAR%20to%20Ethereum%20block%20propagation%20costing%0A%0AThe%20following%20links%20provide%20the%20production%20Ethereum%20addresses%20and%20blockexplorer%20views%20for%20NearBridge.sol%20and%20the%20ERC20%20Locker%0A%0A-%20%5BEthereum%20Mainnet%20Bridge%20addresses%20and%20parameters%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge-client%2Ftree%2Fmain%2Fpackages%2Fclient%23ethereum-mainnet-bridge-addresses-and-parameters)%0A-%20%5BNearBridge.sol%20on%20Ethereum%20Block%20Explorer%5D(https%3A%2F%2Fetherscan.io%2Faddress%2F0x3fefc5a4b1c02f21cbc8d3613643ba0635b9a873)%0A%20%20-%20%5BSample%20%60addLightClientBlock(bytes%20data)%60%20function%20call%5D(https%3A%2F%2Fetherscan.io%2Ftx%2F0xa0fbf1405747dbc1c1bda1227e46bc7c5feac36c0eeaab051022cfdb268e60cc%2Fadvanced)%0A-%20%5BNEAR%20ERC20Locker%20on%20Ethereum%20Block%20Explorer%5D(https%3A%2F%2Fetherscan.io%2Faddress%2F0x23ddd3e3692d1861ed57ede224608875809e127f%23code)%0A%0AAt%20time%20of%20writing%20(Oct%2026th%2C%202022).%0A%0A-%20NEAR%20Light%20Client%20Blocks%20are%20propogated%20every%20%604%20hours%60%0A-%20Sample%20Transaction%20fee%20%600.061600109576901025%20Ether%20(%2496.56)%60%0A-%20Daily%20Transaction%20fees%20cost%20approximately%20%60%24600%60%0A-%20_Note%3A%20Infrastructure%20costs%20for%20running%20relayer%2C%20watchdog%2C%20etc%20are%20not%20included._%0A%0A%23%23%23%20Appendix%20F%20-%20NEAR%20to%20Ethereum%20block%20propagation%20components%0A%0A-%20%5Beth2near-relay%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Fblob%2Fmaster%2Fcli%2Fcommands%2Fstart%2Feth2near-relay.js)%3A%20Command%20to%20start%20the%20NEAR%20to%20Ethereum%20relay.%20See%20sample%20invocation%20%5Bhere%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Fblob%2Fmaster%2Fdocs%2Fdevelopment.md%23near2eth-relay)%0A-%20%5Bnear2eth-block-relay%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Ftree%2Fmaster%2Fnear2eth%2Fnear2eth-block-relay)%20is%20written%20in%20javascript%0A%20%20-%20Has%20%5Bdependencies%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Fblob%2Fmaster%2Fnear2eth%2Fnear2eth-block-relay%2Fpackage.json)%20including%20%5Brainbow-bridge-utils%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Ftree%2Fmaster%2Futils)%20see%20%5Bhere%5D(near-rainbow-bridge-utils)%20for%20more%20information.%20It's%20other%20dependencies%20are%20also%20included%20in%20%60rainbow-bridge-utils%60.%0A%20%20%20%20-%20%5Bethereumjs-util%5D(https%3A%2F%2Fwww.npmjs.com%2Fpackage%2Fethereumjs-util)%3A%20A%20collection%20of%20utility%20functions%20for%20Ethereum.%0A%20%20-%20Has%20the%20following%20functions%20and%20classes%0A%20%20%20%20-%20%60class%20Near2EthRelay%60%0A%20%20%20%20%20%20-%20%60async%20initialize%20(%7BnearNodeUrl%2C%20nearNetworkId%2C%20ethNodeUrl%2C%20ethMasterSk%2C%20ethClientArtifactPath%2C%20ethClientAddress%2C%20ethGasMultiplier%2C%20metricsPort%20%7D)%60%0A%20%20%20%20%20%20-%20%60async%20withdraw%20(%7BethGasMultiplier%7D)%60%0A%20%20%20%20%20%20-%20%60async%20runInternal%20(%7BsubmitInvalidBlock%2C%20near2ethRelayMinDelay%2C%20near2ethRelayMaxDelay%2C%20near2ethRelayErrorDelay%2C%20near2ethRelayBlockSelectDuration%2C%20near2ethRelayNextBlockSelectDelayMs%2C%20near2ethRelayAfterSubmitDelayMs%2C%20ethGasMultiplier%2C%20ethUseEip1559%2C%20logVerbose%7D)%60%0A%20%20%20%20%20%20-%20%60run%20(options)%20%7Breturn%20this.runInternal(%7B...options%2C%20submitInvalidBlock%3A%20false%7D)%20%7D%60%0A-%20%5BNearBridge.sol%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Fblob%2Fmaster%2Fcontracts%2Feth%2Fnearbridge%2Fcontracts%2FNearBridge.sol)%3A%20Is%20the%20NEAR%20light%20client%20deployed%20on%20ethereum.%0A%20%20-%20It%20imports%20the%20following%20contracts%20(see%20%5Bnearbridge%20cryptographic%20primitives%5D(%23nearbridge-cryptographic-primitives))%0A%20%20%20%20-%20%60import%20%22.%2FAdminControlled.sol%22%3B%60%0A%20%20%20%20-%20%60import%20%22.%2FINearBridge.sol%22%3B%60%0A%20%20%20%20-%20%60import%20%22.%2FNearDecoder.sol%22%3B%60%0A%20%20%20%20-%20%60import%20%22.%2FEd25519.sol%22%3B%60%0A%20%20-%20It%20provides%20the%20following%20structure%20for%20Bridge%20State.%20If%20there%20is%20currently%20no%20unconfirmed%20block%2C%20the%20last%20three%20fields%20are%20zero.%0A%20%20%20%20-%20%60uint%20currentHeight%3B%60%3A%20Height%20of%20the%20current%20confirmed%20block%0A%20%20%20%20-%20%60uint%20nextTimestamp%3B%60%3A%20Timestamp%20of%20the%20current%20unconfirmed%20block%0A%20%20%20%20-%20%60uint%20nextValidAt%3B%60%3A%20Timestamp%20when%20the%20current%20unconfirmed%20block%20will%20be%20confirmed%0A%20%20%20%20-%20%60uint%20numBlockProducers%3B%60%3A%20Number%20of%20block%20producers%20for%20the%20current%20unconfirmed%20block%0A%20%20-%20It%20provides%20the%20following%20storage%0A%20%20%20%20-%20%60uint%20constant%20MAX_BLOCK_PRODUCERS%20%3D%20100%3B%60%3A%20Assumed%20to%20be%20even%20and%20to%20not%20exceed%20256.%0A%20%20%20%20-%20%60struct%20Epoch%20%7Bbytes32%20epochId%3B%20uint%20numBPs%3B%20bytes%20%5BMAX_BLOCK_PRODUCERS%5D%20keys%3B%20bytes32%5BMAX_BLOCK_PRODUCERS%20%2F%202%5D%20packedStakes%3B%20uint256%20stakeThreshold%3B%7D%60%0A%20%20%20%20-%20%60uint256%20public%20lockEthAmount%3B%60%0A%20%20%20%20-%20%60uint256%20public%20lockDuration%3B%60%3A%20lockDuration%20and%20replaceDuration%20shouldn't%20be%20extremely%20big%2C%20so%20adding%20them%20to%20an%20uint64%20timestamp%20should%20not%20overflow%20uint256.%0A%20%20%20%20-%20%60uint256%20public%20replaceDuration%3B%60%3A%20replaceDuration%20is%20in%20nanoseconds%2C%20because%20it%20is%20a%20difference%20between%20NEAR%20timestamps.%0A%20%20%20%20-%20%60Ed25519%20immutable%20edwards%3B%60%0A%20%20%20%20-%20%60uint256%20public%20lastValidAt%3B%60%3A%20End%20of%20challenge%20period.%20If%20zero%2C%20_%60untrusted%60_%20fields%20and%20%60lastSubmitter%60%20are%20not%20meaningful.%0A%20%20%20%20-%20%60uint64%20curHeight%3B%60%0A%20%20%20%20-%20%60uint64%20untrustedHeight%3B%60%3A%20The%20most%20recently%20added%20block.%20May%20still%20be%20in%20its%20challenge%20period%2C%20so%20should%20not%20be%20trusted.%0A%20%20%20%20-%20%60address%20lastSubmitter%3B%60%3A%20Address%20of%20the%20account%20which%20submitted%20the%20last%20block.%0A%20%20%20%20-%20%60bool%20public%20initialized%3B%60%3A%20Whether%20the%20contract%20was%20initialized.%0A%20%20%20%20-%20%60bool%20untrustedNextEpoch%3B%60%0A%20%20%20%20-%20%60bytes32%20untrustedHash%3B%60%0A%20%20%20%20-%20%60bytes32%20untrustedMerkleRoot%3B%60%0A%20%20%20%20-%20%60bytes32%20untrustedNextHash%3B%60%0A%20%20%20%20-%20%60uint256%20untrustedTimestamp%3B%60%0A%20%20%20%20-%20%60uint256%20untrustedSignatureSet%3B%60%0A%20%20%20%20-%20%60NearDecoder.Signature%5BMAX_BLOCK_PRODUCERS%5D%20untrustedSignatures%3B%60%0A%20%20%20%20-%20%60Epoch%5B3%5D%20epochs%3B%60%0A%20%20%20%20-%20%60uint256%20curEpoch%3B%60%0A%20%20%20%20-%20%60mapping(uint64%20%3D%3E%20bytes32)%20blockHashes_%3B%60%0A%20%20%20%20-%20%60mapping(uint64%20%3D%3E%20bytes32)%20blockMerkleRoots_%3B%60%0A%20%20%20%20-%20%60mapping(address%20%3D%3E%20uint256)%20public%20override%20balanceOf%3B%60%0A%20%20-%20It%20provides%20the%20following%20functions%0A%20%20%20%20-%20%60constructor(Ed25519%20ed%2C%20uint256%20lockEthAmount_%2C%20uint256%20lockDuration_%2C%20uint256%20replaceDuration_%2C%20address%20admin_%2C%20uint256%20pausedFlags_)%60%3A%20_Note%3A%20require%20the%20%60lockDuration%60%20(in%20seconds)%20to%20be%20at%20least%20one%20second%20less%20than%20the%20%60replaceDuration%60%20(in%20nanoseconds)%20%60require(replaceDuration*%20%3E%20lockDuration*%20_%201000000000)%3B%60%0A%20%20%20%20%20%20-%20%60ethEd25519Address%60%3A%20The%20address%20of%20the%20ECDSA%20signature%20checker%20using%20Ed25519%20curve%20(see%20%5Bhere%5D(https%3A%2F%2Fnbeguier.medium.com%2Fa-real-world-comparison-of-the-ssh-key-algorithms-b26b0b31bfd9))%0A%20%20%20%20%20%20-%20%60lockEthAmount%60%3A%20The%20amount%20that%20%60BLOCK_PRODUCERS%60%20need%20to%20deposit%20(in%20wei)to%20be%20able%20to%20provide%20blocks.%20This%20amount%20will%20be%20slashed%20if%20the%20block%20is%20challenged%20and%20proven%20not%20to%20have%20a%20valid%20signature.%20Default%20value%20is%20100000000000000000000%20WEI%20%3D%20100%20ETH.%0A%20%20%20%20%20%20-%20%60lockDuration%60%20%3A%2030%20seconds%0A%20%20%20%20%20%20-%20%60replaceDuration%60%3A%2060%20seconds%20it%20is%20passed%20in%20nanoseconds%2C%20because%20it%20is%20a%20difference%20between%20NEAR%20timestamps.%0A%20%20%20%20%20%20-%20%60ethAdminAddress%60%3A%20Bridge%20Administrator%20Address%0A%20%20%20%20%20%20-%20%600%60%20%3A%20Indicates%20nothing%20is%20paused%20%60UNPAUSE_ALL%60%0A%20%20%20%20-%20%60function%20deposit()%20public%20payable%20override%20pausable(PAUSED_DEPOSIT)%60%0A%20%20%20%20-%20%60function%20withdraw()%20public%20override%20pausable(PAUSED_WITHDRAW)%60%0A%20%20%20%20-%20%60function%20challenge(address%20payable%20receiver%2C%20uint%20signatureIndex)%20external%20override%20pausable(PAUSED_CHALLENGE%60%0A%20%20%20%20-%20%60function%20checkBlockProducerSignatureInHead(uint%20signatureIndex)%20public%20view%20override%20returns%20(bool)%60%0A%20%20%20%20-%20%60function%20initWithValidators(bytes%20memory%20data)%20public%20override%20onlyAdmin%60%3A%20The%20first%20part%20of%20initialization%20--%20setting%20the%20validators%20of%20the%20current%20epoch.%0A%20%20%20%20-%20%60function%20initWithBlock(bytes%20memory%20data)%20public%20override%20onlyAdmin%60%3A%20The%20second%20part%20of%20the%20initialization%20--%20setting%20the%20current%20head.%0A%20%20%20%20-%20%60function%20bridgeState()%20public%20view%20returns%20(BridgeState%20memory%20res)%60%0A%20%20%20%20-%20%60function%20bridgeState()%20public%20view%20returns%20(BridgeState%20memory%20res)%60%0A%20%20%20%20-%20%60function%20addLightClientBlock(bytes%20memory%20data)%20public%20override%20pausable(PAUSED_ADD_BLOCK)%60%0A%20%20%20%20-%20%60function%20setBlockProducers(NearDecoder.BlockProducer%5B%5D%20memory%20src%2C%20Epoch%20storage%20epoch)%20internal%60%0A%20%20%20%20-%20%60function%20blockHashes(uint64%20height)%20public%20view%20override%20pausable(PAUSED_VERIFY)%20returns%20(bytes32%20res)%60%0A%20%20%20%20-%20%60function%20blockMerkleRoots(uint64%20height)%20public%20view%20override%20pausable(PAUSED_VERIFY)%20returns%20(bytes32%20res)%60%0A-%20%5BNearProver.sol%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Fblob%2Fmaster%2Fcontracts%2Feth%2Fnearprover%2Fcontracts%2FNearProver.sol)%3A%20Is%20used%20to%20prove%20the%20validity%20of%20NEAR%20blocks%20on%20Ethereum.%0A%20%20-%20It%20imports%20the%20following%20contracts%20(see%20%5Bnearbridge%20cryptographic%20primitives%5D(%23nearbridge-cryptographic-primitives))%0A%20%20%20%20-%20%60import%20%22rainbow-bridge-sol%2Fnearbridge%2Fcontracts%2FNearDecoder.sol%22%3B%60%0A%20%20%20%20-%20%60import%20%22.%2FProofDecoder.sol%22%3B%60%0A%20%20-%20It%20has%20the%20following%20functions%0A%20%20%20%20-%20%60constructor(INearBridge%20_bridge%2C%20address%20_admin%2C%20uint%20_pausedFlags)%60%0A%20%20%20%20%20%20-%20%60_bridge%60%3A%20Interface%20to%20%60NearBridge.sol%60%0A%20%20%20%20%20%20-%20%60_admin%60%3A%20Administrator%20address%0A%20%20%20%20%20%20-%20%60_pausedFlags%60%3A%20paused%20indicator%20defaults%20to%20%60UNPAUSE_ALL%20%3D%200%60%0A%20%20%20%20-%20%60function%20proveOutcome(bytes%20memory%20proofData%2C%20uint64%20blockHeight)%60%0A%20%20%20%20-%20%60function%20_computeRoot(bytes32%20node%2C%20ProofDecoder.MerklePath%20memory%20proof)%20internal%20pure%20returns%20(bytes32%20hash)%60%0A%0A%23%23%23%20Appendix%20G%20-%20NEAR%20Rainbow%20Bridge%20Utils%0A%0A%5Brainbow-bridge-utils%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Ftree%2Fmaster%2Futils)%20provides%20a%20set%20of%20utilities%20for%20the%20near%20rainbow%20bridge%20written%20in%20javascript.%0A%0A-%20It%20has%20the%20following%20%5Bdependencies%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Fblob%2Fmaster%2Futils%2Fpackage.json)%0A%20%20-%20%5Bbn.js%5D(https%3A%2F%2Fwww.npmjs.com%2Fpackage%2Fbn.js)%3A%20Big%20number%20implementation%20in%20pure%20javascript%0A%20%20-%20%5Bbsert%5D(https%3A%2F%2Fwww.npmjs.com%2Fpackage%2Fbsert)%3A%20Minimal%20assert%20with%20type%20checking.%0A%20%20-%20%5Bbs58%5D(https%3A%2F%2Fwww.npmjs.com%2Fpackage%2Fbs58)%3A%20JavaScript%20component%20to%20compute%20base%2058%20encoding%0A%20%20-%20%5Bchange-case%5D(https%3A%2F%2Fwww.npmjs.com%2Fpackage%2Fchange-case)%3A%20Transform%20a%20string%20between%20camelCase%2C%20PascalCase%2C%20Capital%20Case%2C%20snake_case%2C%20param-case%2C%20CONSTANT_CASE%20and%20others.%0A%20%20-%20%5Bconfigstore%5D(https%3A%2F%2Fwww.npmjs.com%2Fpackage%2Fconfigstore)%3A%20Easily%20load%20and%20save%20config%20without%20having%20to%20think%20about%20where%20and%20how%0A%20%20-%20%5Beth-object%5D(https%3A%2F%2Fgithub.com%2Fnear%2Feth-object%23383b6ea68c7050bea4cab6950c1d5a7fa553e72b)%3A%20re-usable%20and%20composable%20objects%20that%20you%20can%20just%20call%20Object.from%20to%20ingest%20new%20data%20to%20serialize%20Ethereum%20Trie%20%2F%20LevelDB%20data%20from%20hex%2C%20buffers%20and%20rpc%20into%20the%20same%20format.%0A%20%20-%20%5Beth-util-lite%5D(https%3A%2F%2Fgithub.com%2Fnear%2Feth-util-lite)%3A%20a%20low-dependency%20utility%20for%20Ethereum.%20It%20replaces%20a%20small%20subset%20of%20the%20ethereumjs-util%20and%20ethjs-util%20APIs.%0A%20%20-%20%5Blodash%5D(https%3A%2F%2Fwww.npmjs.com%2Fpackage%2Flodash)%3A%20A%20set%20of%20utilities%20for%20working%20with%20arrays%2C%20numbers%2C%20objects%2C%20strings%2C%20etc.%0A%20%20-%20%5Bnear-api-js%5D(https%3A%2F%2Fwww.npmjs.com%2Fpackage%2Fnear-api-js)%3A%20JavaScript%20library%20to%20interact%20with%20NEAR%20Protocol%20via%20RPC%20API%0A%20%20-%20%5Bweb3%5D(https%3A%2F%2Fwww.npmjs.com%2Fpackage%2Fweb3)%3A%20Ethereum%20JavaScript%20API%0A-%20It%20provides%20the%20following%20functions%0A%20%20-%20%5Baddress-watcher%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Fblob%2Fmaster%2Futils%2Faddress-watcher.js)%3A%20Watches%20a%20group%20of%20near%20and%20ethereum%20acccounts%20polling%20NEAR%20and%20Ethereum%20every%20second%20and%20updating%20%60nearAccount.balanceGauge%60%2C%20%60nearAccount.stateStorageGauge%60%20and%20%60ethereumAccount.balanceGauge%60.%0A%20%20-%20%5Bborsh%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Fblob%2Fmaster%2Futils%2Fborsh.js)%3A%20provides%20the%20following%20functions%20for%20Binary%20Object%20Representation%20Serializer%20for%20Hashing%20%5Bborsh%5D(https%3A%2F%2Fborsh.io%2F)%0A%20%20%20%20-%20%60function%20serializeField%20(schema%2C%20value%2C%20fieldType%2C%20writer)%60%0A%20%20%20%20-%20%60function%20deserializeField%20(schema%2C%20fieldType%2C%20reader)%60%0A%20%20%20%20-%20%60function%20serialize%20(schema%2C%20fieldType%2C%20obj)%60%3A%20Serialize%20given%20object%20using%20schema%20of%20the%20form%3A%20%60%7B%20class_name%20-%3E%20%5B%20%5Bfield_name%2C%20field_type%5D%2C%20..%20%5D%2C%20..%20%7D%60%0A%20%20%20%20-%20%60class%20BinaryReader%60%3A%20Includes%20utilities%20to%20read%20numbers%2C%20strings%20arrays%20and%20burggers%0A%20%20%20%20-%20%60function%20deserialize%20(schema%2C%20fieldType%2C%20buffer)%60%0A%20%20%20%20-%20%60const%20signAndSendTransactionAsync%20%3D%20async%20(accessKey%2C%20account%2C%20receiverId%2Cactions)%20%3D%3E%60%0A%20%20%20%20-%20%60const%20txnStatus%20%3D%20async%20(account%2C%20txHash%2C%20retries%20%3D%20RETRY_TX_STATUS%2C%20wait%20%3D%201000)%20%3D%3E%60%0A%20%20%20%20-%20%60function%20getBorshTransactionLastResult%20(txResult)%60%0A%20%20%20%20-%20%60class%20BorshContract%20%7B%60%0A%20%20%20%20%20%20-%20%60constructor%20(borshSchema%2C%20account%2C%20contractId%2C%20options)%60%0A%20%20%20%20%20%20-%20%60async%20accessKeyInit%20()%60%0A%20%20%20%20-%20%60function%20borshify%20(block)%60%0A%20%20%20%20-%20%60function%20borshifyInitialValidators%20(initialValidators)%60%0A%20%20%20%20-%20%60const%20hexToBuffer%20%3D%20(hex)%20%3D%3E%60%0A%20%20%20%20-%20%60const%20readerToHex%20%3D%20(len)%20%3D%3E%60%0A%20%20-%20%5Bborshify-proof%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Fblob%2Fmaster%2Futils%2Fborshify-proof.js)%0A%20%20%20%20-%20%60function%20borshifyOutcomeProof%20(proof)%60%0A%20%20-%20%5Brobust%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Fblob%2Fmaster%2Futils%2Frobust.js)%3A%20his%20module%20gives%20a%20few%20utils%20for%20robust%20error%20handling%2C%20and%20wrap%20web3%20with%20error%20handling%20and%20retry%0A%20%20-%20%5Butils%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Fblob%2Fmaster%2Futils%2Futils.js)%0A%20%20%20%20-%20%60async%20function%20setupNear%20(config)%60%0A%20%20%20%20-%20%60async%20function%20setupEth%20(config)%60%0A%20%20%20%20-%20%60async%20function%20setupEthNear%20(config)%60%3A%20Setup%20connection%20to%20NEAR%20and%20Ethereum%20from%20given%20configuration.%0A%20%20%20%20-%20%60function%20remove0x%20(value)%60%3A%20Remove%200x%20if%20prepended%0A%20%20%20%20-%20%60function%20normalizeHex%20(value)%60%0A%20%20%20%20-%20%60async%20function%20accountExists%20(connection%2C%20accountId)%60%0A%20%20%20%20-%20%60async%20function%20createLocalKeyStore%20(networkId%2C%20keyPath)%60%0A%20%20%20%20-%20%60function%20getWeb3%20(config)%60%0A%20%20%20%20-%20%60function%20getEthContract%20(web3%2C%20path%2C%20address)%60%0A%20%20%20%20-%20%60function%20addSecretKey%20(web3%2C%20secretKey)%60%0A%20%20%20%20-%20%60async%20function%20ethCallContract%20(contract%2C%20methodName%2C%20args)%60%3A%20Wrap%20pure%20calls%20to%20Web3%20contract%20to%20handle%20errors%2Freverts%2Fgas%20usage.%0A%0A%23%23%23%20Appendix%20H%20-%20Token%20Transfer%20Components%0A%0A_Note%3A%20This%20uses%20Ethreum%20%5BERC20%5D(https%3A%2F%2Feips.ethereum.org%2FEIPS%2Feip-20)%20and%20NEAR%20%5BNEP-141%5D(https%3A%2F%2Fnomicon.io%2FStandards%2FTokens%2FFungibleToken%2FCore)%20initally%20developed%20for%20%5BNEP-21%5D(https%3A%2F%2Fgithub.com%2Fnear%2FNEPs%2Fpull%2F21)_%0A%0A-%20%5Brainbow-token-connector%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-token-connector)%0A%20%20-%20NEAR%20rust%20based%20contracts%0A%20%20%20%20-%20%5Bbridge-common%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-token-connector%2Ftree%2Fmaster%2Fbridge-common)%3A%20Common%20functions%20for%20NEAR%2C%20currently%20only%20%60pub%20fn%20parse_recipient(recipient%3A%20String)%20-%3E%20Recipient%60%0A%20%20%20%20-%20%5Bbridge-token-factory%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-token-connector%2Ftree%2Fmaster%2Fbridge-token-factory)%3A%20Functions%20for%20managing%20tokens%20on%20NEAR%20including%20but%20not%20limited%20to%20%60update_metadata%60%2C%20%60deposit%60%2C%20%60get_tokens%60%2C%20%60finish_updating_metadata%60%2C%20%60finish_updating_metadata%60%2C%20%60finish_withdraw%60%2C%20%60deploy_bridge_token%60%2C%20%60get_bridge_token_account_id%60%2C%20%60is_used_proof%60%2C%20%60record_proof%60%0A%20%20%20%20-%20%5Bbridge-token%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-token-connector%2Ftree%2Fmaster%2Fbridge-token)%3A%20Token%20functions%20on%20NEAR%20including%20but%20not%20limited%20to%20%60mint%60%20and%20%60withdraw%60%0A%20%20%20%20-%20%5Btoken-locker%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-token-connector%2Ftree%2Fmaster%2Ftoken-locker)%3A%20Token%20Locker%20functions%20on%20NEAR%20including%20but%20not%20limited%20to%20%60withdraw%60%2C%20%60finish_deposit%60%2C%20%60is_used_proof%60%0A%20%20-%20Ethereum%20solidity%20based%20contracts%0A%20%20%20%20-%20%5Berc20-bridge-token%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-token-connector%2Ftree%2Fmaster%2Ferc20-bridge-token)%3A%20Ethereum%20Bridge%20token%20contracts%20including%20but%20not%20limited%20to%0A%20%20%20%20%20%20-%20%5BBridgeToken.sol%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-token-connector%2Fblob%2Fmaster%2Ferc20-bridge-token%2Fcontracts%2FBridgeToken.sol)%0A%20%20%20%20%20%20-%20%5BBridgeTokenFactory.sol%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-token-connector%2Fblob%2Fmaster%2Ferc20-bridge-token%2Fcontracts%2FBridgeTokenFactory.sol)%0A%20%20%20%20%20%20-%20%5BBridgeTokenProxy.sol%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-token-connector%2Fblob%2Fmaster%2Ferc20-bridge-token%2Fcontracts%2FBridgeTokenProxy.sol)%0A%20%20%20%20%20%20-%20%5BProofConsumer.sol%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-token-connector%2Fblob%2Fmaster%2Ferc20-bridge-token%2Fcontracts%2FProofConsumer.sol)%0A%20%20%20%20%20%20-%20%5BResultsDecoder%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-token-connector%2Fblob%2Fmaster%2Ferc20-bridge-token%2Fcontracts%2FResultsDecoder.sol)%0A%20%20%20%20-%20%5Berc20-connector%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-token-connector%2Ftree%2Fmaster%2Ferc20-connector)%3A%20has%20%5BERC20Locker.sol%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-token-connector%2Fblob%2Fmaster%2Ferc20-connector%2Fcontracts%2FERC20Locker.sol)%20which%20is%20used%20to%20lock%20and%20unlock%20tokens.%20It%20is%20linked%20to%20the%20bridge%20token%20factory%20on%20NEAR%20side.%20It%20also%20links%20to%20the%20prover%20that%20it%20uses%20to%20unlock%20the%20tokens.%20(see%20%5Bhere%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Ftree%2Fmaster%2Fcontracts%2Feth%2Fnearbridge%2Fcontracts))%0A%0A%23%23%23%20Appendix%20I%20-%20NEAR%20Rainbow%20Bridge%3A%20Component%20Overview%0A%0AThe%20following%20smart%20contracts%20are%20deployed%20on%20NEAR%20and%20work%20in%20conjunction%20with%20eth2near%20bridging%20functionality%20to%20propogate%20blocks%20from%20Ethereum%20to%20NEAR.%0A%0A**%5C*Note**%20here%20we%20will%20focus%20on%20the%20%60eth2-client%60%20for%20ETH%202.0%20Proof%20of%20Stake%20Bridging%20however%20if%20interested%20in%20however%20there%20is%20also%20an%20%60eth-client%60%20which%20was%20used%20for%20ETH%201.0%20Proof%20of%20Work%20Integration%20using%20%5Brust-ethhash%5D(https%3A%2F%2Fgithub.com%2Fnearprotocol%2Frust-ethash).%5C*%0A%0A-%20%5BSmart%20Contracts%20Deployed%20on%20NEAR%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Ftree%2Fmaster%2Fcontracts%2Fnear)%0A%20%20-%20%5Beth2-client%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Ftree%2Fmaster%2Fcontracts%2Fnear%2Feth2-client)%20implements%20the%20Ethereum%20Light%20Client%20on%20Near%0A%20%20%20%20-%20it%20provides%20functions%20including%20but%20not%20limited%20to%3A%0A%20%20%20%20%20%20-%20validate%20the%20light%20client%0A%20%20%20%20%20%20-%20verify%20the%20finality%20branch%0A%20%20%20%20%20%20-%20verify%20bls%20signatures%0A%20%20%20%20%20%20-%20update%20finalized%20headers%0A%20%20%20%20%20%20-%20updates%20the%20submittes%0A%20%20%20%20%20%20-%20prune%20finalized%20blocks.%0A%20%20%20%20-%20It%20interacts%20with%20the%20beach%20chain%2C%20uses%20%5BBorsh%5D(https%3A%2F%2Fborsh.io%2F)%20for%20serialization%20and%20%5Blighthouse%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Flighthouse)%20for%20Ethereum%202.0%20Consensus%20and%20tree_hash%20functions%20as%20well%20as%20bls%20signatures.%20See%20%5Bhere%5D(https%3A%2F%2Flighthouse-book.sigmaprime.io%2F)%20for%20more%20information%20on%20lighthouse.%20Below%20is%20a%20list%20of%20dependencies%20from%20%5Beth2-client%2FCargo.toml%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Fblob%2Fmaster%2Fcontracts%2Fnear%2Feth2-client%2FCargo.toml)%0A%0A%20%20%20%20%20%20%20%20%20%20%20%20%60%60%60%0A%20%20%20%20%20%20%20%20%20%20%20%20%5Bdependencies%5D%0A%20%20%20%20%20%20%20%20%20%20%20%20ethereum-types%20%3D%20%220.9.2%22%0A%20%20%20%20%20%20%20%20%20%20%20%20eth-types%20%3D%20%20%7B%20path%20%3D%20%22..%2Feth-types%22%20%7D%0A%20%20%20%20%20%20%20%20%20%20%20%20eth2-utility%20%3D%20%20%7B%20path%20%3D%20%22..%2Feth2-utility%22%20%7D%0A%20%20%20%20%20%20%20%20%20%20%20%20tree_hash%20%3D%20%7B%20git%20%3D%20%22https%3A%2F%2Fgithub.com%2Faurora-is-near%2Flighthouse.git%22%2C%20rev%20%3D%20%22b624c3f0d3c5bc9ea46faa14c9cb2d90ee1e1dec%22%20%7D%0A%20%20%20%20%20%20%20%20%20%20%20%20merkle_proof%20%3D%20%7B%20git%20%3D%20%22https%3A%2F%2Fgithub.com%2Faurora-is-near%2Flighthouse.git%22%2C%20rev%20%3D%20%22b624c3f0d3c5bc9ea46faa14c9cb2d90ee1e1dec%22%20%7D%0A%20%20%20%20%20%20%20%20%20%20%20%20bls%20%3D%20%7B%20git%20%3D%20%22https%3A%2F%2Fgithub.com%2Faurora-is-near%2Flighthouse.git%22%2C%20optional%20%3D%20true%2C%20rev%20%3D%20%22b624c3f0d3c5bc9ea46faa14c9cb2d90ee1e1dec%22%2C%20default-features%20%3D%20false%2C%20features%20%3D%20%5B%22milagro%22%5D%7D%0A%20%20%20%20%20%20%20%20%20%20%20%20admin-controlled%20%3D%20%20%7B%20path%20%3D%20%22..%2Fadmin-controlled%22%20%7D%0A%20%20%20%20%20%20%20%20%20%20%20%20near-sdk%20%3D%20%224.0.0%22%0A%20%20%20%20%20%20%20%20%20%20%20%20borsh%20%3D%20%220.9.3%22%0A%20%20%20%20%20%20%20%20%20%20%20%20bitvec%20%3D%20%221.0.0%22%0A%20%20%20%20%20%20%20%20%20%20%20%20%60%60%60%0A%0A-%20%5Beth2near%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Ftree%2Fmaster%2Feth2near)%20supports%20the%20relaying%20of%20blocks%20and%20the%20verification%20of%20finality%20between%20etherum%20and%20Near.%20It%20has%20the%20following%20components%0A%20%20-%20%5Bcontract_wrapper%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Ftree%2Fmaster%2Feth2near%2Fcontract_wrapper)%3A%20provides%20rust%20wrappers%20for%20interacting%20with%20the%20%5Bsolidity%20contracts%20on%20near%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Ftree%2Fmaster%2Fcontracts%2Fnear)%0A%20%20%20%20-%20Contracts%20include%20(from%20%5B%60lib.rs%60%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Fblob%2Fmaster%2Feth2near%2Fcontract_wrapper%2Fsrc%2Flib.rs))%0A%0A%20%20%20%20%20%20%20%20%20%20%20%20%60%60%60%0A%20%20%20%20%20%20%20%20%20%20%20%20pub%20mod%20contract_wrapper_trait%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20pub%20mod%20dao_contract%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20pub%20mod%20dao_eth_client_contract%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20pub%20mod%20dao_types%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20pub%20mod%20errors%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20pub%20mod%20eth_client_contract%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20pub%20mod%20eth_client_contract_trait%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20pub%20mod%20file_eth_client_contract%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20pub%20mod%20near_contract_wrapper%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20pub%20mod%20sandbox_contract_wrapper%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20pub%20mod%20utils%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20%60%60%60%0A%0A%20%20%20%20-%20Dependencies%20include%20(from%20%5Bcontract_wrapper%2FCargo.toml%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Fblob%2Fmaster%2Feth2near%2Fcontract_wrapper%2FCargo.toml))%0A%0A%20%20%20%20%20%20%20%20%20%20%20%20%60%60%60%0A%20%20%20%20%20%20%20%20%20%20%20%20%5Bdependencies%5D%0A%20%20%20%20%20%20%20%20%20%20%20%20borsh%20%3D%20%220.9.3%22%0A%20%20%20%20%20%20%20%20%20%20%20%20futures%20%3D%20%220.3.21%22%0A%20%20%20%20%20%20%20%20%20%20%20%20async-std%20%3D%20%221.12.0%22%0A%20%20%20%20%20%20%20%20%20%20%20%20near-sdk%20%3D%20%224.0.0%22%0A%20%20%20%20%20%20%20%20%20%20%20%20near-jsonrpc-client%20%3D%20%22%3D0.4.0-beta.0%22%0A%20%20%20%20%20%20%20%20%20%20%20%20near-crypto%20%3D%20%220.14.0%22%0A%20%20%20%20%20%20%20%20%20%20%20%20near-primitives%20%3D%20%220.14.0%22%0A%20%20%20%20%20%20%20%20%20%20%20%20near-chain-configs%20%3D%20%220.14.0%22%0A%20%20%20%20%20%20%20%20%20%20%20%20near-jsonrpc-primitives%20%3D%20%220.14.0%22%0A%20%20%20%20%20%20%20%20%20%20%20%20tokio%20%3D%20%7B%20version%20%3D%20%221.1%22%2C%20features%20%3D%20%5B%22rt%22%2C%20%22macros%22%5D%20%7D%0A%20%20%20%20%20%20%20%20%20%20%20%20reqwest%20%3D%20%7B%20version%20%3D%20%220.11%22%2C%20features%20%3D%20%5B%22blocking%22%5D%20%7D%0A%20%20%20%20%20%20%20%20%20%20%20%20serde_json%20%3D%20%221.0.74%22%0A%20%20%20%20%20%20%20%20%20%20%20%20serde%20%3D%20%7B%20version%20%3D%20%221.0%22%2C%20features%20%3D%20%5B%22derive%22%5D%20%7D%0A%20%20%20%20%20%20%20%20%20%20%20%20eth-types%20%3D%20%7B%20path%20%3D%20%22..%2F..%2Fcontracts%2Fnear%2Feth-types%2F%22%2C%20features%20%3D%20%5B%22eip1559%22%5D%7D%0A%20%20%20%20%20%20%20%20%20%20%20%20workspaces%20%3D%20%220.5.0%22%0A%20%20%20%20%20%20%20%20%20%20%20%20anyhow%20%3D%20%221.0%22%0A%20%20%20%20%20%20%20%20%20%20%20%20%60%60%60%0A%0A%20%20-%20%5Beth2near-block-relay-rs%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Ftree%2Fmaster%2Feth2near%2Feth2near-block-relay-rs)%20is%20built%20in%20rust%20and%20integrates%20with%20the%20Ethereum%202.0%20lgihthouse%20consensus%20client%20to%20propogate%20blocks%20to%20near.%0A%20%20%20%20-%20Functionality%20includes%20(from%20%5Blib.rs%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Fblob%2Fmaster%2Feth2near%2Feth2near-block-relay-rs%2Fsrc%2Flib.rs))%0A%0A%20%20%20%20%20%20%20%20%20%20%20%20%60%60%60%0A%20%20%20%20%20%20%20%20%20%20%20%20pub%20mod%20beacon_block_body_merkle_tree%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20pub%20mod%20beacon_rpc_client%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20pub%20mod%20config%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20pub%20mod%20eth1_rpc_client%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20pub%20mod%20eth2near_relay%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20pub%20mod%20execution_block_proof%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20pub%20mod%20hand_made_finality_light_client_update%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20pub%20mod%20init_contract%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20pub%20mod%20last_slot_searcher%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20pub%20mod%20light_client_snapshot_with_proof%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20pub%20mod%20logger%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20pub%20mod%20near_rpc_client%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20pub%20mod%20prometheus_metrics%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20pub%20mod%20relay_errors%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20%60%60%60%0A%0A%20%20%20%20-%20Dependencies%20include%20(from%20%5Beth2near-block-relay-rs%2FCargo.toml%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Fblob%2Fmaster%2Feth2near%2Feth2near-block-relay-rs%2FCargo.toml))%0A%0A%20%20%20%20%20%20%20%20%20%20%20%20%60%60%60%0A%20%20%20%20%20%20%20%20%20%20%20%20types%20%3D%20%20%7B%20git%20%3D%20%22https%3A%2F%2Fgithub.com%2Faurora-is-near%2Flighthouse.git%22%2C%20rev%20%3D%20%22b624c3f0d3c5bc9ea46faa14c9cb2d90ee1e1dec%22%20%7D%0A%20%20%20%20%20%20%20%20%20%20%20%20tree_hash%20%3D%20%7B%20git%20%3D%20%22https%3A%2F%2Fgithub.com%2Faurora-is-near%2Flighthouse.git%22%2C%20%20rev%20%3D%20%22b624c3f0d3c5bc9ea46faa14c9cb2d90ee1e1dec%22%20%7D%0A%20%20%20%20%20%20%20%20%20%20%20%20merkle_proof%20%3D%20%7B%20git%20%3D%20%22https%3A%2F%2Fgithub.com%2Faurora-is-near%2Flighthouse.git%22%2C%20rev%20%3D%20%22b624c3f0d3c5bc9ea46faa14c9cb2d90ee1e1dec%22%20%7D%0A%20%20%20%20%20%20%20%20%20%20%20%20eth2_hashing%20%3D%20%7B%20git%20%3D%20%22https%3A%2F%2Fgithub.com%2Faurora-is-near%2Flighthouse.git%22%2C%20rev%20%3D%20%22b624c3f0d3c5bc9ea46faa14c9cb2d90ee1e1dec%22%20%7D%0A%20%20%20%20%20%20%20%20%20%20%20%20eth2_ssz%20%3D%20%7B%20git%20%3D%20%22https%3A%2F%2Fgithub.com%2Faurora-is-near%2Flighthouse.git%22%2C%20rev%20%3D%20%22b624c3f0d3c5bc9ea46faa14c9cb2d90ee1e1dec%22%20%7D%0A%0A%20%20%20%20%20%20%20%20%20%20%20%20eth-types%20%3D%20%7B%20path%20%3D%20%22..%2F..%2Fcontracts%2Fnear%2Feth-types%2F%22%2C%20features%20%3D%20%5B%22eip1559%22%5D%7D%0A%20%20%20%20%20%20%20%20%20%20%20%20eth2-utility%20%20%3D%20%7B%20path%20%3D%20%22..%2F..%2Fcontracts%2Fnear%2Feth2-utility%22%20%7D%0A%0A%20%20%20%20%20%20%20%20%20%20%20%20contract_wrapper%20%3D%20%7B%20path%20%3D%20%22..%2Fcontract_wrapper%22%20%7D%0A%20%20%20%20%20%20%20%20%20%20%20%20finality-update-verify%20%3D%20%7B%20path%20%3D%20%22..%2Ffinality-update-verify%22%20%7D%0A%0A%20%20%20%20%20%20%20%20%20%20%20%20log%20%3D%20%7B%20version%20%3D%20%220.4%22%2C%20features%20%3D%20%5B%22std%22%2C%20%22serde%22%5D%20%7D%0A%20%20%20%20%20%20%20%20%20%20%20%20serde_json%20%3D%20%221.0.74%22%0A%20%20%20%20%20%20%20%20%20%20%20%20serde%20%3D%20%7B%20version%20%3D%20%221.0%22%2C%20features%20%3D%20%5B%22derive%22%5D%20%7D%0A%20%20%20%20%20%20%20%20%20%20%20%20ethereum-types%20%3D%20%220.9.2%22%0A%20%20%20%20%20%20%20%20%20%20%20%20reqwest%20%3D%20%7B%20version%20%3D%20%220.11%22%2C%20features%20%3D%20%5B%22blocking%22%5D%20%7D%0A%20%20%20%20%20%20%20%20%20%20%20%20clap%20%3D%20%7B%20version%20%3D%20%223.1.6%22%2C%20features%20%3D%20%5B%22derive%22%5D%20%7D%0A%20%20%20%20%20%20%20%20%20%20%20%20tokio%20%3D%20%7B%20version%20%3D%20%221.1%22%2C%20features%20%3D%20%5B%22macros%22%2C%20%22rt%22%2C%20%22time%22%5D%20%7D%0A%20%20%20%20%20%20%20%20%20%20%20%20env_logger%20%3D%20%220.9.0%22%0A%20%20%20%20%20%20%20%20%20%20%20%20borsh%20%3D%20%220.9.3%22%0A%20%20%20%20%20%20%20%20%20%20%20%20near-sdk%20%3D%20%224.0.0%22%0A%20%20%20%20%20%20%20%20%20%20%20%20futures%20%3D%20%7B%20version%20%3D%20%220.3.21%22%2C%20default-features%20%3D%20false%20%7D%0A%20%20%20%20%20%20%20%20%20%20%20%20async-std%20%3D%20%221.12.0%22%0A%20%20%20%20%20%20%20%20%20%20%20%20hex%20%3D%20%22*%22%0A%20%20%20%20%20%20%20%20%20%20%20%20toml%20%3D%20%220.5.9%22%0A%20%20%20%20%20%20%20%20%20%20%20%20atomic_refcell%20%3D%20%220.1.8%22%0A%20%20%20%20%20%20%20%20%20%20%20%20bitvec%20%3D%20%22*%22%0A%20%20%20%20%20%20%20%20%20%20%20%20primitive-types%20%3D%20%220.7.3%22%0A%0A%20%20%20%20%20%20%20%20%20%20%20%20near-jsonrpc-client%20%3D%20%22%3D0.4.0-beta.0%22%0A%20%20%20%20%20%20%20%20%20%20%20%20near-crypto%20%3D%20%220.14.0%22%0A%20%20%20%20%20%20%20%20%20%20%20%20near-primitives%20%3D%20%220.14.0%22%0A%20%20%20%20%20%20%20%20%20%20%20%20near-chain-configs%20%3D%20%220.14.0%22%0A%20%20%20%20%20%20%20%20%20%20%20%20near-jsonrpc-primitives%20%3D%20%220.14.0%22%0A%0A%20%20%20%20%20%20%20%20%20%20%20%20prometheus%20%3D%20%7B%20version%20%3D%20%220.9%22%2C%20features%20%3D%20%5B%22process%22%5D%20%7D%0A%20%20%20%20%20%20%20%20%20%20%20%20lazy_static%20%3D%20%221.4%22%0A%20%20%20%20%20%20%20%20%20%20%20%20warp%20%3D%20%220.2%22%0A%20%20%20%20%20%20%20%20%20%20%20%20thread%20%3D%20%22*%22%0A%0A%20%20%20%20%20%20%20%20%20%20%20%20%60%60%60%0A%0A%20%20-%20%5Beth2near-block-relay%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Ftree%2Fmaster%2Feth2near%2Feth2near-block-relay)%20is%20built%20using%20javascript%20and%20supports%20ETH%201.0%20Proof%20of%20Work%20(%60ethhash%60)%20using%20merkle%20patrica%20trees.%0A%20%20%20%20-%20key%20classes%20from%20%5Bindex.js%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Fblob%2Fmaster%2Feth2near%2Feth2near-block-relay%2Findex.js)%20include%0A%20%20%20%20%20%20-%20%60Ethashproof%60%20%3A%20which%20has%20functions%20to%20%60getParseBlock%60%20and%20%60calculateNextEpoch%60%0A%20%20%20%20%20%20-%20%60Eth2NearRelay%60%20%3A%20which%20interacts%20with%20the%20%60ethClientContract%60%20and%20has%20a%20%60run()%60%20function%20which%20loops%20through%20relaying%20blocks%20and%20includes%20additional%20functions%20such%20as%20%60getParseBlock%60%20%2C%20%60submitBlock%60%0A%20%20%20%20-%20Dependencies%20include%20(from%20%5Bpackage.json%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Fblob%2Fmaster%2Feth2near%2Feth2near-block-relay%2Fpackage.json))%0A%0A%20%20%20%20%20%20%20%20%20%20%20%20%60%60%60%0A%20%20%20%20%20%20%20%20%20%20%20%20%22dependencies%22%3A%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%22bn.js%22%3A%20%22%5E5.1.3%22%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%22eth-object%22%3A%20%22https%3A%2F%2Fgithub.com%2Fnear%2Feth-object%23383b6ea68c7050bea4cab6950c1d5a7fa553e72b%22%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%22eth-util-lite%22%3A%20%22near%2Feth-util-lite%23master%22%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%22%40ethereumjs%2Fblock%22%3A%20%22%5E3.4.0%22%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%22merkle-patricia-tree%22%3A%20%22%5E2.1.2%22%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%22prom-client%22%3A%20%22%5E12.0.0%22%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%22promisfy%22%3A%20%22%5E1.2.0%22%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%22rainbow-bridge-utils%22%3A%20%221.0.0%22%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%22got%22%3A%20%22%5E11.8.5%22%0A%20%20%20%20%20%20%20%20%20%20%20%20%7D%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20%60%60%60%0A%0A%20%20-%20%5Bethhashproof%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Ftree%2Fmaster%2Feth2near%2Fethashproof)%3A%20is%20a%20commandline%20to%20calculate%20proof%20data%20for%20an%20ethash%20POW%2C%20it%20is%20used%20by%20project%20%60SmartPool%60%20and%20a%20decentralizedbridge%20between%20Etherum%20and%20EOS%20developed%20by%20Kyber%20Network%20team.%20It%20is%20written%20in%20%60GO%60.%0A%20%20%20%20-%20Features%20Include%201.%20Calculate%20merkle%20root%20of%20the%20ethash%20dag%20dataset%20with%20given%20epoch%202.%20Calculate%20merkle%20proof%20of%20the%20pow%20(dataset%20elements%20and%20their%20merkle%20proofs)%20given%20the%20pow%20submission%20with%20given%20block%20header%203.%20Generate%20dag%20datase%0A%20%20%20%20-%20Dependencies%20include%20(from%20%5Bethahsproof%2Fgo.mod%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Fblob%2Fmaster%2Feth2near%2Fethashproof%2Fgo.mod))%0A%0A%20%20%20%20%20%20%20%20%20%20%20%20%60%60%60%0A%20%20%20%20%20%20%20%20%20%20%20%20require%20(%0A%20%20%20%20%20%20%20%20%20%20%20%20%20github.com%2Fdeckarep%2Fgolang-set%20v1.7.1%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20github.com%2Fedsrzf%2Fmmap-go%20v1.0.0%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20github.com%2Fethereum%2Fgo-ethereum%20v1.10.4%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20github.com%2Fhashicorp%2Fgolang-lru%20v0.5.5-0.20210104140557-80c98217689d%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20golang.org%2Fx%2Fcrypto%20v0.0.0-20210322153248-0c34fe9e7dc2%0A%20%20%20%20%20%20%20%20%20%20%20%20)%0A%20%20%20%20%20%20%20%20%20%20%20%20%60%60%60%0A%0A%20%20-%20%5Bfinality-update-verify%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Ftree%2Fmaster%2Feth2near%2Ffinality-update-verify)%20checks%20and%20updates%20finality%20using%20the%20lighthouse%20beacon%20blocks.%0A%20%20%20%20-%20Functions%20include%20(from%20%5Blib.rs%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Fblob%2Fmaster%2Feth2near%2Ffinality-update-verify%2Fsrc%2Flib.rs))%0A%20%20%20%20%20%20-%20%60fn%20h256_to_hash256(hash%3A%20H256)%20-%3E%20Hash256%60%0A%20%20%20%20%20%20-%20%60fn%20tree_hash_h256_to_eth_type_h256(hash%3A%20tree_hash%3A%3AHash256)%20-%3E%20eth_types%3A%3AH256%60%0A%20%20%20%20%20%20-%20%60fn%20to_lighthouse_beacon_block_header(bridge_beacon_block_header%3A%20%26BeaconBlockHeader%2C)%20-%3E%20types%3A%3ABeaconBlockHeader%20%7Btypes%3A%3ABeaconBlockHeader%60%0A%20%20%20%20%20%20-%20%60pub%20fn%20is_correct_finality_update(ethereum_network%3A%20%26str%2C%20light_client_update%3A%20%26LightClientUpdate%2C%20sync_committee%3A%20SyncCommittee%2C%20)%20-%3E%20Result%3Cbool%2C%20Box%3Cdyn%20Error%3E%3E%60%0A%20%20%20%20-%20Dependencies%20include%20(from%20%5Bfinality-update-verify%2FCargo.toml%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Fblob%2Fmaster%2Feth2near%2Ffinality-update-verify%2FCargo.toml))%0A%0A%20%20%20%20%20%20%20%20%20%20%20%20%60%60%60%0A%20%20%20%20%20%20%20%20%20%20%20%20%5Bdependencies%5D%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20eth-types%20%3D%20%7B%20path%20%3D%22..%2F..%2Fcontracts%2Fnear%2Feth-types%2F%22%2C%20features%20%3D%20%5B%22eip1559%22%5D%7D%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20bls%20%3D%20%7B%20git%20%3D%20%22https%3A%2F%2Fgithub.com%2Faurora-is-near%2Flighthouse.git%22%2C%20rev%20%3D%20%22b624c3f0d3c5bc9ea46faa14c9cb2d90ee1e1dec%22%20%7D%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20eth2-utility%20%20%3D%20%7B%20path%20%3D%22..%2F..%2Fcontracts%2Fnear%2Feth2-utility%22%7D%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20tree_hash%20%3D%20%7B%20git%20%3D%20%22https%3A%2F%2Fgithub.com%2Faurora-is-near%2Flighthouse.git%22%2C%20rev%20%3D%20%22b624c3f0d3c5bc9ea46faa14c9cb2d90ee1e1dec%22%20%7D%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20types%20%3D%20%20%7B%20git%20%3D%20%22https%3A%2F%2Fgithub.com%2Faurora-is-near%2Flighthouse.git%22%2C%20rev%20%3D%20%22b624c3f0d3c5bc9ea46faa14c9cb2d90ee1e1dec%22%20%7D%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20bitvec%20%3D%20%221.0.0%22%0A%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%5Bdev-dependencies%5D%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20eth2_to_near_relay%20%3D%20%7B%20path%20%3D%20%22..%2Feth2near-block-relay-rs%22%7D%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20serde_json%20%3D%20%221.0.74%22%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20serde%20%3D%20%7B%20version%20%3D%20%221.0%22%2C%20features%20%3D%20%5B%22derive%22%5D%20%7D%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20toml%20%3D%20%220.5.9%22%0A%20%20%20%20%20%20%20%20%20%20%20%20%60%60%60%0A%0AThe%20following%20smart%20contracts%20are%20deployed%20on%20Ethereum%20and%20used%20for%20propogating%20blocks%20from%20NEAR%20to%20Ethereum.%0A%0A-%20%5BSmart%20Contracts%20deployed%20on%20Ethereum%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Ftree%2Fmaster%2Fcontracts%2Feth)%20including%0A%20%20-%20%5BNear%20Bridge%20Contracts%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Ftree%2Fmaster%2Fcontracts%2Feth%2Fnearbridge%2Fcontracts)%20including%20%5BNearBridge.sol%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Fblob%2Fmaster%2Fcontracts%2Feth%2Fnearbridge%2Fcontracts%2FNearBridge.sol)%20which%20the%20interface%20%5BINearBridge.sol%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Fblob%2Fmaster%2Fcontracts%2Feth%2Fnearbridge%2Fcontracts%2FINearBridge.sol)%0A%20%20-%20Interface%20Overview%0A%0A%20%20%20%20%20%20%20%20%60%60%60%0A%20%20%20%20%20%20%20%20interface%20INearBridge%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20event%20BlockHashAdded(uint64%20indexed%20height%2C%20bytes32%20blockHash)%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20event%20BlockHashReverted(uint64%20indexed%20height%2C%20bytes32%20blockHash)%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20function%20blockHashes(uint64%20blockNumber)%20external%20view%20returns%20(bytes32)%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20function%20blockMerkleRoots(uint64%20blockNumber)%20external%20view%20returns%20(bytes32)%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20function%20balanceOf(address%20wallet)%20external%20view%20returns%20(uint256)%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20function%20deposit()%20external%20payable%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20function%20withdraw()%20external%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20function%20initWithValidators(bytes%20calldata%20initialValidators)%20external%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20function%20initWithBlock(bytes%20calldata%20data)%20external%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20function%20addLightClientBlock(bytes%20calldata%20data)%20external%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20function%20challenge(address%20payable%20receiver%2C%20uint256%20signatureIndex)%20external%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20function%20checkBlockProducerSignatureInHead(uint256%20signatureIndex)%20external%20view%20returns%20(bool)%3B%0A%20%20%20%20%20%20%20%20%7D%0A%20%20%20%20%20%20%20%20%60%60%60%0A%0A%20%20-%20Key%20Storage%20items%20for%20epoch%20and%20block%20information%0A%0A%20%20%20%20%20%20%20%20%60%60%60%0A%20%20%20%20%20%20%20%20%20%20%20%20Epoch%5B3%5D%20epochs%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20uint256%20curEpoch%3B%0A%0A%20%20%20%20%20%20%20%20%20%20%20%20mapping(uint64%20%3D%3E%20bytes32)%20blockHashes_%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20mapping(uint64%20%3D%3E%20bytes32)%20blockMerkleRoots_%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20mapping(address%20%3D%3E%20uint256)%20public%20override%20balanceOf%3B%0A%20%20%20%20%20%20%20%20%60%60%60%0A%0A%20%20-%20Signing%20and%20Serializing%20Primitives%0A%20%20%20%20-%20%5BNearDecoder.sol%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Fblob%2Fmaster%2Fcontracts%2Feth%2Fnearbridge%2Fcontracts%2FNearDecoder.sol)%3A%20handles%20decoing%20of%20Public%20Keys%2C%20Signatures%2C%20BlockProducers%20and%20LightClientBlocks%20using%20%60Borsh.sol%60%0A%20%20%20%20-%20%5BUtils.sol%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Fblob%2Fmaster%2Fcontracts%2Feth%2Fnearbridge%2Fcontracts%2FUtils.sol)%3A%20handles%20reading%20and%20writing%20to%20memory%2C%20memoryToBytes%20and%20has%20functions%20such%20as%20%60keccak256Raw%60%20and%20%60sha256Raw%60%0A%20%20%20%20-%20%5BBorsh.sol%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Fblob%2Fmaster%2Fcontracts%2Feth%2Fnearbridge%2Fcontracts%2FBorsh.sol)%3A%20%5BBorsh%5D(https%3A%2F%2Fborsh.io%2F)%3A%20Binary%20Object%20Representation%20Serializer%20for%20Hashing.%20It%20is%20meant%20to%20be%20used%20in%20security-critical%20projects%20as%20it%20prioritizes%20consistency%2C%20safety%2C%20speed%3B%20and%20comes%20with%20a%20strict%20specification.%0A%20%20%20%20-%20%5BEd25519.sol%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Fblob%2Fmaster%2Fcontracts%2Feth%2Fnearbridge%2Fcontracts%2FEd25519.sol)%3A%20%5BEd25519%5D(https%3A%2F%2Fed25519.cr.yp.to%2F)%20high-speed%20high-security%20signatures%0A%0A%20%20-%20%5BNear%20Prover%20Contracts%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Ftree%2Fmaster%2Fcontracts%2Feth%2Fnearprover%2Fcontracts)%0A%20%20%20%20-%20%5BNearProver.sol%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Fblob%2Fmaster%2Fcontracts%2Feth%2Fnearprover%2Fcontracts%2FNearProver.sol)%3A%20Has%20a%20%60proveOutcome%60%20which%20validates%20the%20outcome%20merkle%20proof%20and%20the%20block%20proof%20is%20valid%20using%20%60_computeRoot%60%20which%20is%20passed%20in%20a%20%60bytes32%20node%2C%20ProofDecoder.MerklePath%20memory%20proof%60%0A%20%20%20%20-%20%5BProofDecoder.sol%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Fblob%2Fmaster%2Fcontracts%2Feth%2Fnearprover%2Fcontracts%2FProofDecoder.sol)%3A%20Uses%20MerklePaths%20to%20provide%20decoding%20functions%20such%20as%20%60decodeExecutionStatus%60%2C%20%60decodeExecutionOutcome%60%2C%20%60decodeExecutionOutcomeWithId%60%2C%20%60decodeMerklePathItem%60%2C%20%60decodeMerklePath%60%20and%20%60decodeExecutionOutcomeWithIdAndProof%60.%20It%20relies%20on%20the%20primitives%20%60Borsh.sol%60%20and%20%60NearDecoder.sol%60%20above.%0A%0A%23%23%23%20Appendix%20J%20-%20Ethereum%20to%20NEAR%20Walkthrough%0A%0AFollowing%20is%20a%20walkthough%20of%20a%20funds%20transfer%20from%20Ethereum%20to%20a%20target%20chain%20(In%20this%20example%20Near)%2C%20complete%20with%20light%20client%20updates%2C%20block%20propogation%20and%20proofs%20to%20ensure%20the%20transaction%20validity.%0A%0A!%5BEthereum%20to%20Near%20Funds%20Transfer%5D(%2Fassets%2Fposts%2F2023-02-05-ethereum-bridging-costs%2Feth2NearFundsTransfer.jpg%20%22Ethereum%20to%20NEAR%20Funds%20Transfer%22)%0A%0A**Actors**%0AFrom%20the%20diagram%20above%20you'll%20notice%20that%20there%20are%20many%20actors%20involved%2C%20below%20is%20an%20overview%20of%20the%20actors%20and%20the%20operations%20they%20perform.%0A%0A-%20Accounts%0A%20%20-%20%5BUser%20Account%5D(https%3A%2F%2Fetherscan.io%2Faddress%2F0x29da2ef94deeaf2d2f9003e9354abfcb1ff04b32)%20%3A%20The%20user%20is%20the%20owner%20of%20the%20funds%20being%20transferred%20and%20is%20responsible%20for%20signing%20the%20transactions%20to%20authorize%20bridging%20them%20accross%20chains.%20In%20this%20example%20they%20have%20accounts%20on%20%5BEthereum%5D(https%3A%2F%2Fetherscan.io%2Faddress%2F0x29da2ef94deeaf2d2f9003e9354abfcb1ff04b32)%20and%20%5BNEAR%5D(https%3A%2F%2Fnearblocks.io%2Faddress%2Fjohnrubini.near%23tokentxns)%0A%20%20-%20%5BTarget%20Chain%20Relayer%20Acccount%5D(https%3A%2F%2Fnearblocks.io%2Faddress%2Frelayer.bridge.near)%3A%20The%20relayer%20account%20is%20responsible%20for%20relaying%20messages%20from%20Ethereum%20to%20the%20target%20chain.%20%5C*Note%20this%20is%20connected%20to%20a%20relayer%20which%20is%20responsible%20for%20tasks%20such%20as%20querying%20latest%20block%20headers%20and%20getting%20light%20client%20status%20updates.%20Source%20code%20is%20%5Bhere%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Ftree%2Fmaster%2Feth2near%2Feth2near-block-relay-rs).%0A%20%20-%20%5BTarget%20Chain%20Bridge%20Validator%20Accounts%5D(https%3A%2F%2Fnearblocks.io%2Faddress%2Fbridge-validator1.near)%3A%20are%20responsible%20for%20validating%20light%20client%20update%20proposals%20and%20sending%20approval%20votes%20to%20%5BDAO%20Eth%20Client%20Contract%5D(https%3A%2F%2Fnearblocks.io%2Faddress%2Fbridge-validator.sputnik-dao.near).%0A-%20Ethereum%20Components%0A%20%20-%20%5BERC20%20Token%20Contract%5D(https%3A%2F%2Fetherscan.io%2Faddress%2F0xdac17f958d2ee523a2206206994597c13d831ec7%23code)%3A%20this%20is%20the%20token%20contract%20securing%20the%20funds%20in%20this%20examle%20USDT%20(Tether).%20Source%20code%20is%20%5Bhere%5D(https%3A%2F%2Fgithub.com%2FOpenZeppelin%2Fopenzeppelin-contracts%2Fblob%2Frelease-v4.8%2Fcontracts%2Ftoken%2FERC20%2Fpresets%2FERC20PresetMinterPauser.sol)%0A%20%20-%20%5BBridge%20Contract%5D(https%3A%2F%2Fetherscan.io%2Faddress%2F0x23ddd3e3692d1861ed57ede224608875809e127f%23code)%3A%20Responsible%20for%20deposits%20and%20withdrawals%20of%20tokens%20on%20Ethereum%20as%20well%20as%20various%20proving%20and%20propogation%20mechanisms%20such%20as%20checking%20of%20Signatures%20and%20adding%20Light%20Client%20Blocks.%20Source%20code%20is%20%5Bhere%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Fblob%2Fmaster%2Fcontracts%2Feth%2Fnearbridge%2Fcontracts%2FNearBridge.sol)%0A-%20Target%20Chain%20(NEAR)%20Components%0A%20%20-%20%5BValidator%20DAO%20Contract%5D(https%3A%2F%2Fnearblocks.io%2Faddress%2Fbridge-validator.sputnik-dao.near)%3A%20Responsible%20for%20receivng%20light%20client%20update%20proposals%20from%20the%20relayer%20and%20gathering%20approval%20votes%20for%20these%20propoals%20from%20Validators%20and%20submitting%20light%20client%20updates%20once%20the%20proposal%20is%20approved%20by%20the%20Validators.%20Source%20code%20is%20%5Bhere%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Fblob%2Fmaster%2Feth2near%2Fcontract_wrapper%2Fsrc%2Fdao_eth_client_contract.rs)%0A%20%20-%20%5BEtherum%202%20Client%5D(https%3A%2F%2Fnearblocks.io%2Faddress%2Fclient-eth2.bridge.near)%3A%20The%20Ethereum%202%20client%20is%20responsbile%20for%20processing%20light%20client%20updates%20and%20receiving%20execution%20header%20blocks%20from%20Ethereum%20via%20the%20relayer.%20Source%20code%20is%20%5Bhere%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Fblob%2Fmaster%2Fcontracts%2Fnear%2Feth2-client%2Fsrc%2Flib.rs).%20_Note%3A%20this%20replaced%20the%20%5BEthereum%201%20client%5D(https%3A%2F%2Fnearblocks.io%2Faddress%2Fclient.bridge.near)%20source%20code%20%5Bhere%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Fblob%2Fmaster%2Fcontracts%2Fnear%2Feth-client%2Fsrc%2Flib.rs)_%0A%20%20-%20%5BEthereum%20Prover%5D(https%3A%2F%2Fnearblocks.io%2Faddress%2Fprover.bridge.near)%20%3A%20The%20Ethereum%20Prover%20is%20used%20to%20prove%20transactions%20are%20included%20in%20a%20valid%20block%20Header.%20Source%20code%20is%20%5Bhere%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Fblob%2Fmaster%2Fcontracts%2Fnear%2Feth-prover%2Fsrc%2Flib.rs)%0A%20%20-%20%5BBridge%20Contract%5D(https%3A%2F%2Fnearblocks.io%2Faddress%2Ffactory.bridge.near%23contract)%3A%20The%20Bridge%20contract%20is%20responsible%20for%20managing%20tokens%20including%20creating%20new%20tokens%2C%20setting%20metadata%20and%20depositing%20and%20withdrawal%20of%20tokens.%20Source%20code%20is%20%5Bhere%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-token-connector%2Fblob%2Fmaster%2Fbridge-token-factory%2Fsrc%2Flib.rs).%0A%20%20%20%20-%20%5BNEAR%20Token%20Contract%5D(https%3A%2F%2Fnearblocks.io%2Ftoken%2Fdac17f958d2ee523a2206206994597c13d831ec7.factory.bridge.near%3Fa%3Ddac17f958d2ee523a2206206994597c13d831ec7.factory.bridge.near)%3A%20The%20target%20chain%20representation%20of%20the%20token%20(USDT)%20managed%20by%20the%20target%20chain%20bridge%20contract.%0A%0A**Sample%20TransactionFlow**%0A%0A1.%20Block%20Propogation%0A%20%20%201.%20Get%20the%20Latest%20Slot%3A%20The%20relayer%20loops%20polling%20Ethereum%20every%2012%20seconds%20to%20get%20the%20latest%20slot.%20It%20then%20checks%20if%20it%20is%20for%20a%20new%20epoch%20and%20if%20so%20(every%206%20minutes)%20submits%20an%20execution%20header%20(with%2032%20blocks%20in%20it)%20and%20a%20light%20client%20update%20with%20the%20latest%20approved%20epochs%20and%20updated%20sync_comittee.%20Relayer%20source%20code%20for%20the%20loop%20is%20%5Bhere%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Fblob%2Fmaster%2Feth2near%2Feth2near-block-relay-rs%2Fsrc%2Feth2near_relay.rs%23L258)%20for%20retrieving%20the%20latest%20slot%20is%20%5Bhere%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Fblob%2Fmaster%2Feth2near%2Feth2near-block-relay-rs%2Fsrc%2Feth2near_relay.rs%23L163)%2C%20for%20submitting%20execution%20blocks%20is%20%5Bhere%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Fblob%2Fmaster%2Feth2near%2Feth2near-block-relay-rs%2Fsrc%2Feth2near_relay.rs%23L399)%20and%20for%20sending%20light%20client%20updates%20is%20%5Bhere%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Fblob%2Fmaster%2Feth2near%2Feth2near-block-relay-rs%2Fsrc%2Feth2near_relay.rs%23L489).%0A%20%20%20%20%20%201.%20%5BSend%20Block%20Headers%20(submit_execution_header)%5D(https%3A%2F%2Fnearblocks.io%2Ftxns%2FHaXUxCvA1D87QXJzPzSYXmFYNuSLbTmyuxShzWgSLvPM)%3A%20Batch%20transaction%20which%20submits%2032%20block%20headers%20to%20%5Bclient-eth2.bridge.near%5D(https%3A%2F%2Fnearblocks.io%2Faddress%2Fclient-eth2.bridge.near)%20for%20Ethereum%20Blocks%2016493592%20to%2016493623.%20(The%20second%20slot%20in%20epoch%20%5B176%2C936%5D(https%3A%2F%2Fbeaconcha.in%2Fepoch%2F176936)%20to%20the%20first%20slot%20in%20epoch%20%5B176%2C937%5D(https%3A%2F%2Fbeaconcha.in%2Fepoch%2F176937)).%20**Executed%20every%206%20minutes%20when%20the%20first%20slot%20of%20a%20new%20epoch%20is%20found.**%0A%20%20%20%20%20%202.%20%5BCreate%20Light%20Client%20update%20proposal(add_proposal)%5D(https%3A%2F%2Fnearblocks.io%2Ftxns%2FJ1tQ465Dxt4UhWy9Msn2pZCbdkWatSepqsx9sDZaX35z%23)%3A%20calls%20%5Bbridge-validator.sputnik-dao.near%5D(https%3A%2F%2Fnearblocks.io%2Faddress%2Fbridge-validator.sputnik-dao.near)%20to%20add%20proposal%2017410%20for%20%5Bslot%205%2C661%2C984%5D(https%3A%2F%2Fbeaconcha.in%2Fslot%2F5661984)%20in%20epoch%20%5B176%2C937%5D(https%3A%2F%2Fbeaconcha.in%2Fepoch%2F176937).%0A%20%20%202.%20%5BApprove%20Proposal%20(act_proposal)%5D(https%3A%2F%2Fnearblocks.io%2Ftxns%2FD5uP4BbRSUX4ZGijRfWGkR5KbFb2Kb9q1gSsFVQbYSLt)%3A%20sends%20a%20VoteApprove%20action%20for%20proposal%2017410%20from%20a%20%5Bbridge%20validator%5D(https%3A%2F%2Fnearblocks.io%2Faddress%2Fbridge-validator1.near)%20to%20the%20%5BValidator%20DAO%20Contract%5D(https%3A%2F%2Fnearblocks.io%2Faddress%2Fbridge-validator.sputnik-dao.near).%0A%20%20%20%20%20%201.%20act_proposal%20in%20contract%20%5Bbridge-validator.sputnik-dao.near%5D(https%3A%2F%2Fnearblocks.io%2Faddress%2Fbridge-validator.sputnik-dao.near)%0A%20%20%20%20%20%202.%20submit_beacon_chain_light_client_update%20in%20%5Bclient-eth2.bridge.near%5D(https%3A%2F%2Fnearblocks.io%2Faddress%2Fclient-eth2.bridge.near)%0A%20%20%20%20%20%203.%20on_proposal_callback%20in%20contract%20%5Bbridge-validator.sputnik-dao.near%5D(https%3A%2F%2Fnearblocks.io%2Faddress%2Fbridge-validator.sputnik-dao.near)%0A2.%20Funds%20Transfer%20Transaction%20Flow%0A%20%20%201.%20%5BLock%20Funds%20On%20Ethereum%5D(https%3A%2F%2Fetherscan.io%2Ftx%2F0xa685c59a24cc2056e10e660ce8a8bff7bbc335433698e138c77aaadf20ecb614)%3A%20Locking%2010%2C000%20USDT%20to%20send%20to%20user%20on%20NEAR.%0A%20%20%202.%20%5BDeposit%20Funds%20on%20Target%20Chain%20Bridge%20Contract%20(deposit)%5D(https%3A%2F%2Fnearblocks.io%2Ftxns%2FvniyRR67ndrtvpoQ9c5ACoT4e9c283VSQsrZcN6GGto%23execution)%0A%20%20%20%20%20%201.%20deposit%20in%20contract%20factory.bridge.near%0A%20%20%20%20%20%202.%20verify_log_entry%20in%20contract%20prover.bridge.near%0A%20%20%20%20%20%203.%20block_hash_safe%20in%20contract%20client-eth2.bridge.near%0A%20%20%20%20%20%204.%20finish_deposit%20in%20contract%20factory.bridge.near%20%3A%20mint%20of%2010%2C000%20USDT.%0A%0A**TODO**%0A%0A-%20Find%20and%20review%20the%20source%20code%20for%20the%20%5Bvalidator%20light%20client%20approval%20update%5D(https%3A%2F%2Fnearblocks.io%2Ftxns%2FHnzBR7x5Sxnmcm4MfRt1ghhMjJNspDaygUUKeM9T27Li%23execution).%20_Note%3A%20the%20eth2_client%20has%20a%20%5Bvalidate_light_client_update%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Fblob%2Fmaster%2Fcontracts%2Fnear%2Feth2-client%2Fsrc%2Flib.rs%23L311)%20which%20is%20%5Bconfigurable%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Fblob%2Fmaster%2Fcontracts%2Fnear%2Feth2-client%2Fsrc%2Flib.rs%23L42)%20and%20is%20used%20for%20debugging%20purposes._%0A%0A**Bridging%20Resources%20Required**%0A%0AHere%20is%20the%20storage%20and%20compuational%20costs%20per%20component.%0A%0A%7C%20Component%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7C%20Data%20%20%20%20%20%20%20%20%20%20%20%7C%20Storage%20%7C%20Notes%20%7C%0A%7C%20---------------------------------------------------------------------------------------------------------------------------%20%7C%20--------------%20%7C%20-------%20%7C%20-----%20%7C%0A%7C%20%5BEthereum%202%20Client%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Fblob%2Fmaster%2Fcontracts%2Fnear%2Feth2-client%2Fsrc%2Flib.rs%23L35)%20%7C%20---%20%20%20%20%20%20%20%20%20%20%20%20%7C%20---%20%20%20%20%20%7C%20---%20%20%20%7C%0A%7C%20%5BProver%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Fblob%2Fmaster%2Fcontracts%2Fnear%2Feth-prover%2Fsrc%2Flib.rs)%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7C%20not%20applicable%20%7C%200%20bytes%20%7C%20%20%20%20%20%20%20%7C%0A%7C%20%5BDAO%20Contract%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Fblob%2Fmaster%2Feth2near%2Fcontract_wrapper%2Fsrc%2Fdao_contract.rs)%20%20%7C%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7C%20%20%20%20%20%20%20%20%20%7C%20%20%20%20%20%20%20%7C%0A%0A**TODO**%0AReview%20the%20following%20data%20structure%20and%20elements%20and%20move%20into%20the%20table%20above%20commenting%20on%20any%20mandatory%20requirements%20and%20structures%20that%20can%20be%20improved.%0A%0A%60%60%60%0Apub%20struct%20Eth2Client%20%7B%0A%20%20%20%20%2F%2F%2F%20If%20set%2C%20only%20light%20client%20updates%20by%20the%20trusted%20signer%20will%20be%20accepted%0A%20%20%20%20trusted_signer%3A%20Option%3CAccountId%3E%2C%0A%20%20%20%20%2F%2F%2F%20Mask%20determining%20all%20paused%20functions%0A%20%20%20%20paused%3A%20Mask%2C%0A%20%20%20%20%2F%2F%2F%20Whether%20the%20client%20validates%20the%20updates.%0A%20%20%20%20%2F%2F%2F%20Should%20only%20be%20set%20to%20%60false%60%20for%20debugging%2C%20testing%2C%20and%20diagnostic%20purposes%0A%20%20%20%20validate_updates%3A%20bool%2C%0A%20%20%20%20%2F%2F%2F%20Whether%20the%20client%20verifies%20BLS%20signatures.%0A%20%20%20%20verify_bls_signatures%3A%20bool%2C%0A%20%20%20%20%2F%2F%2F%20We%20store%20the%20hashes%20of%20the%20blocks%20for%20the%20past%20%60hashes_gc_threshold%60%20headers.%0A%20%20%20%20%2F%2F%2F%20Events%20that%20happen%20past%20this%20threshold%20cannot%20be%20verified%20by%20the%20client.%0A%20%20%20%20%2F%2F%2F%20It%20is%20desirable%20that%20this%20number%20is%20larger%20than%207%20days'%20worth%20of%20headers%2C%20which%20is%20roughly%0A%20%20%20%20%2F%2F%2F%2051k%20Ethereum%20blocks.%20So%20this%20number%20should%20be%2051k%20in%20production.%0A%20%20%20%20hashes_gc_threshold%3A%20u64%2C%0A%20%20%20%20%2F%2F%2F%20Network.%20e.g.%20mainnet%2C%20kiln%0A%20%20%20%20network%3A%20Network%2C%0A%20%20%20%20%2F%2F%2F%20Hashes%20of%20the%20finalized%20execution%20blocks%20mapped%20to%20their%20numbers.%20Stores%20up%20to%20%60hashes_gc_threshold%60%20entries.%0A%20%20%20%20%2F%2F%2F%20Execution%20block%20number%20-%3E%20execution%20block%20hash%0A%20%20%20%20finalized_execution_blocks%3A%20LookupMap%3Cu64%2C%20H256%3E%2C%0A%20%20%20%20%2F%2F%2F%20All%20unfinalized%20execution%20blocks'%20headers%20hashes%20mapped%20to%20their%20%60HeaderInfo%60.%0A%20%20%20%20%2F%2F%2F%20Execution%20block%20hash%20-%3E%20ExecutionHeaderInfo%20object%0A%20%20%20%20unfinalized_headers%3A%20UnorderedMap%3CH256%2C%20ExecutionHeaderInfo%3E%2C%0A%20%20%20%20%2F%2F%2F%20%60AccountId%60s%20mapped%20to%20their%20number%20of%20submitted%20headers.%0A%20%20%20%20%2F%2F%2F%20Submitter%20account%20-%3E%20Num%20of%20submitted%20headers%0A%20%20%20%20submitters%3A%20LookupMap%3CAccountId%2C%20u32%3E%2C%0A%20%20%20%20%2F%2F%2F%20Max%20number%20of%20unfinalized%20blocks%20allowed%20to%20be%20stored%20by%20one%20submitter%20account%0A%20%20%20%20%2F%2F%2F%20This%20value%20should%20be%20at%20least%2032%20blocks%20(1%20epoch)%2C%20but%20the%20recommended%20value%20is%201024%20(32%20epochs)%0A%20%20%20%20max_submitted_blocks_by_account%3A%20u32%2C%0A%20%20%20%20%2F%2F%20The%20minimum%20balance%20that%20should%20be%20attached%20to%20register%20a%20new%20submitter%20account%0A%20%20%20%20min_storage_balance_for_submitter%3A%20Balance%2C%0A%20%20%20%20%2F%2F%2F%20Light%20client%20state%0A%20%20%20%20finalized_beacon_header%3A%20ExtendedBeaconBlockHeader%2C%0A%20%20%20%20finalized_execution_header%3A%20LazyOption%3CExecutionHeaderInfo%3E%2C%0A%20%20%20%20current_sync_committee%3A%20LazyOption%3CSyncCommittee%3E%2C%0A%20%20%20%20next_sync_committee%3A%20LazyOption%3CSyncCommittee%3E%2C%0A%7D%0A%60%60%60%0A%0A%23%23%23%20Appendix%20K%20-%20Explorer%20and%20Interactive%20Links%0A%0A-%20Near%0A%20%20-%20eth-prover%0A%20%20%20%20-%20%5Bhttps%3A%2F%2Fnearblocks.io%2Faddress%2Frelayer.bridge.near%5D(https%3A%2F%2Fnearblocks.io%2Faddress%2Frelayer.bridge.near)%0A%20%20%20%20-%20%5Bhttps%3A%2F%2Fnearblocks.io%2Faddress%2Fclient-eth2.bridge.near%5D(https%3A%2F%2Fnearblocks.io%2Faddress%2Fclient-eth2.bridge.near)%0A%20%20%20%20-%20%5Bhttps%3A%2F%2Fnearblocks.io%2Faddress%2Fclient.bridge.near%5D(https%3A%2F%2Fnearblocks.io%2Faddress%2Fclient.bridge.near)%0A%20%20-%20eth-client%0A%20%20%20%20-%20%5Bhttps%3A%2F%2Fnearblocks.io%2Faddress%2Fprover.bridge.near%5D(https%3A%2F%2Fnearblocks.io%2Faddress%2Fprover.bridge.near)%0A%20%20%20%20-%20%5Bhttps%3A%2F%2Fnearblocks.io%2Faddress%2Fclient.bridge.near%5D(https%3A%2F%2Fnearblocks.io%2Faddress%2Fclient.bridge.near)%0A%20%20-%20factory%20(manages%20tokens)%0A%20%20%20%20-%20%5Bhttps%3A%2F%2Fnearblocks.io%2Faddress%2Ffactory.bridge.near%5D(https%3A%2F%2Fnearblocks.io%2Faddress%2Ffactory.bridge.near)%0A%20%20-%20dao%0A%20%20%20%20-%20%5Bhttps%3A%2F%2Fnearblocks.io%2Faddress%2Fbridge-validator.sputnik-dao.near%5D(https%3A%2F%2Fnearblocks.io%2Faddress%2Fbridge-validator.sputnik-dao.near)%0A%20%20-%20aurora%0A%20%20%20%20-%20%5Bhttps%3A%2F%2Fnearblocks.io%2Faddress%2Faurora%5D(https%3A%2F%2Fnearblocks.io%2Faddress%2Faurora)%0A%20%20%20%20-%20%5Bhttps%3A%2F%2Fnearblocks.io%2Faddress%2Frelay.aurora%5D(https%3A%2F%2Fnearblocks.io%2Faddress%2Frelay.aurora)%0A%0A-%20Ethereum%0A%20%20-%20%5Bbeaconcha.in%5D(https%3A%2F%2Fbeaconcha.in%2F)%0A%20%20%20%20-%20%5Bvalidators%5D(https%3A%2F%2Fbeaconcha.in%2Fvalidators)%0A%20%20%20%20-%20%5Bepochs%5D(https%3A%2F%2Fbeaconcha.in%2Fepochs)%0A%20%20%20%20-%20%5Bslots%5D(https%3A%2F%2Fbeaconcha.in%2Fslots)%0A%20%20%20%20-%20%5Bblocks%5D(https%3A%2F%2Fbeaconcha.in%2Fblocks)%0A%20%20%20%20-%20%5Btransactions%5D(https%3A%2F%2Fbeaconcha.in%2Ftransactions)%0A%20%20-%20Near%20Bridge%0A%20%20%20%20-%20%5BNearBridge%5D(https%3A%2F%2Fetherscan.io%2Faddress%2F0x3fefc5a4b1c02f21cbc8d3613643ba0635b9a873)%0A%20%20%20%20-%20%5BERC20Locker%5D(https%3A%2F%2Fetherscan.io%2Ftx%2F0xa685c59a24cc2056e10e660ce8a8bff7bbc335433698e138c77aaadf20ecb614)%0A",lastUpdatedAt:1753129136e3},{lazy:()=>o2(()=>import("./near-rainbow-BcHptKHR.js"),[]),path:"/research/bridge/near-rainbow.html",type:"mdx",filePath:"research/bridge/near-rainbow.mdx",content:"%23%20Near%20Rainbow%20Bridge%0A%0A-%20date%3A%202023-02-24%0A-%20last%20updated%3A%202023-02-24%0A%0A%23%23%20Overview%0A%0ANEAR%20Rainbow%20bridge%20was%20enhanced%20to%20support%20Ethereum%202.0%20leveraging%20Ethereum%20Light%20Clients.%20This%20document%20is%20a%20review%20of%20the%20design.%0A%0AKey%20differences%20in%20supporting%20Ethereum%202.0%20(Proof%20of%20Stake)%20vs%20Proof%20of%20Work%20involves%20removing%20the%20ETHHASH%20logic%20and%20SPV%20client%20and%20potentially%20replacing%20with%20MMR%20trees%20per%20epoch%20and%20checkpoints%20similar%20to%20Harmony%20Light%20Client%20on%20Ethereum.%0A%0AThe%20%5BNEAR%20Rainbow%20bridge%5D(https%3A%2F%2Fnear.org%2Fbridge%2F)%20is%20in%20%5Bthis%20github%20repository%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge)%20and%20is%20supported%20by%20%5BAurora-labs%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near).%0A%0AIt%20recently%20provided%20support%20for%20ETH%202.0%20in%20this%20%5BPull%20Request%20(762)%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Fpull%2F762).%0A%0AIt%20interacts%20%5Blighthouse%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Flighthouse)%20for%20Ethereum%202.0%20Consensus%20and%20tree_hash%20functions%20as%20well%20as%20bls%20signatures.%0A%0AHigh%20Level%20their%20architecture%20is%20similar%20to%20the%20Horizon%20Bridge%20but%20with%20some%20key%20differences%2C%20including%20but%20not%20limited%20to%0A%0A-%20interacting%20with%20the%20beacon%20chain%20now%20for%20finality%20%60is_correct_finality_update%60%20%5Bsee%20finality-update-verify%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Fblob%2Fmaster%2Feth2near%2Ffinality-update-verify%2Fsrc%2Flib.rs%23L36)%0A-%20Updated%20execution%20block%20proof%20to%20use%20the%20BEACONRPCClient%20and%20with%20an%20updated%20merkle%20tree%0A%20%20-%20Design%20can%20be%20found%20in%20%5BPR-762%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Fpull%2F762)%0A%0A%23%23%20Approach%0A%0ANear%20Rainbow%20bridge%20uses%20a%20fradu%20proof%20approach.%0A%0A%23%23%20Proving%20Mechanisms%0A%0A%23%23%23%20NEAR%20to%20Ethereum%20watchdog%0A%0AThe%20%5Bwatchdog%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Fblob%2Fmaster%2Fnear2eth%2Fwatchdog%2Findex.js)%20runs%20every%2010%20seconds%20and%20validates%20blocks%20on%20%60NearBridge.sol%60%20challenging%20blocks%20with%20incorrect%20signatures.%20_Note%3A%20It%20uses%20%5Bheep-prometheus%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Fblob%2Fmaster%2Futils%2Fhttp-prometheus.js)%20for%20monitoring%20and%20storing%20block%20and%20producer%20information%20using%20%60gauges%60%20and%20%60counters%60._%0A%0A-%20%5Bwatchdog%20is%20started%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Fblob%2Fmaster%2Fcli%2Fcommands%2Fstart%2Fwatchdog.js)%20from%20the%20CLI%0A-%20%5Bwatchdog%20logic%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Fblob%2Fmaster%2Fnear2eth%2Fwatchdog%2Findex.js)%0A%20%20-%20Initializes%20monitoring%20information%20on%20%60Prometheus%60%0A%20%20%20%20-%20%60const%20httpPrometheus%20%3D%20new%20HttpPrometheus(this.metricsPort%2C%20'near_bridge_watchdog_')%60%0A%20%20%20%20-%20%60const%20lastBlockVerified%20%3D%20httpPrometheus.gauge('last_block_verified'%2C%20'last%20block%20that%20was%20already%20verified')%60%0A%20%20%20%20-%20%60const%20totBlockProducers%20%3D%20httpPrometheus.gauge('block_producers'%2C%20'number%20of%20block%20producers%20for%20current%20block')%60%0A%20%20%20%20-%20%60const%20incorrectBlocks%20%3D%20httpPrometheus.counter('incorrect_blocks'%2C%20'number%20of%20incorrect%20blocks%20found')%60%0A%20%20%20%20-%20%60const%20challengesSubmitted%20%3D%20httpPrometheus.counter('challenges_submitted'%2C%20'number%20of%20blocks%20challenged')%60%0A%20%20-%20Loops%20%60while%20(true)%60%0A%20%20%20%20-%20Gets%20the%20%60bridgeState%60%0A%20%20%20%20-%20Loops%20through%20all%20blockProducers%20checking%20their%20signatures%0A%20%20%20%20-%20%60for%20(let%20i%20%3D%200%3B%20i%20%3C%20numBlockProducers%3B%20i%2B%2B)%60%0A%20%20%20%20%20%20-%20Check%20each%20signature%20%60this.clientContract.methods.checkBlockProducerSignatureInHead(i).call()%60%0A%20%20%20%20%20%20-%20If%20invalid%20challenge%20the%20signature%3A%20%60this.clientContract.methods.challenge(this.ethMasterAccount%2C%20i).encodeABI()%60%20calls%20%5Bchallenge%20function%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Fblob%2Fmaster%2Fcontracts%2Feth%2Fnearbridge%2Fcontracts%2FNearBridge.sol%23L93)%0A%20%20%20%20%20%20%20%20-%20%60function%20challenge(address%20payable%20receiver%2C%20uint%20signatureIndex)%20external%20override%20pausable(PAUSED_CHALLENGE)%60%0A%20%20%20%20%20%20%20%20%20%20-%20checks%20block.timestamp%20is%20less%20than%20lastValidAt%20%60block.timestamp%20%3C%20lastValidAt%2C%60%0A%20%20%20%20%20%20%20%20%20%20-%20Check%20if%20the%20signature%20is%20valid%20%60!checkBlockProducerSignatureInHead(signatureIndex)%60%0A%20%20%20%20%20%20%20%20%20%20-%20slashes%20the%20last%20submitter%20%60balanceOf%5BlastSubmitter%5D%20%3D%20balanceOf%5BlastSubmitter%5D%20-%20lockEthAmount%3B%60%0A%20%20%20%20%20%20%20%20%20%20-%20resets%20lastValidAt%20%60lastValidAt%20%3D%200%3B%60%0A%20%20%20%20%20%20%20%20%20%20-%20Refunds%20half%20of%20the%20funds%20to%20the%20watchdog%20account%20%60receiver.call%7Bvalue%3A%20lockEthAmount%20%2F%202%7D(%22%22)%3B%60%0A%20%20%20%20%20%20-%20Sleeps%20for%20watchdog%20Delay%20seconds%20%60await%20sleep(watchdogDelay%20*%201000)%60%0A%0A%23%23%20Relayer%20Mechanisms%0A%0A%23%23%23%20Ethereum%20to%20NEAR%20block%20propagation%20flow%0A%0AFollowing%20is%20a%20walkthough%20of%20block%20propogation%20from%20Ethereum%20to%20NEAR.%20For%20a%20better%20understanding%20of%20the%20technical%20components%20see%20%5BAppendix%20A%5D(%23appendix-a-ethereum-to-near-block-propagation-components).%0A%0A-%20%5BLight%20Clients%20are%20deployed%20on%20Near%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Fblob%2Fmaster%2Feth2near%2Feth2near-block-relay-rs%2Fsrc%2Fmain.rs%23L107)%3A%0A%20%20-%20%5Binit_contract%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Fblob%2Fmaster%2Feth2near%2Feth2near-block-relay-rs%2Fsrc%2Fmain.rs%23L107)%3A%20The%20eth2near%20relayer%20is%20called%20with%20an%20argument%20to%20initialize%20the%20%5Beth2-client%20contract%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Fblob%2Fmaster%2Fcontracts%2Fnear%2Feth2-client%2Fsrc%2Flib.rs)%0A%20%20%20%20-%20%5Beth_client_contract%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Fblob%2Fmaster%2Feth2near%2Feth2near-block-relay-rs%2Fsrc%2Fmain.rs%23L108)%3A%20is%20created%20using%20a%20contract_wrapper%0A%20%20%20%20%20%20-%20%60let%20mut%20eth_client_contract%20%3D%20EthClientContract%3A%3Anew(get_eth_contract_wrapper(%26config))%3B%60%0A%20%20%20%20-%20%5BEthClientContract%20Wrapper%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Fblob%2Fmaster%2Feth2near%2Fcontract_wrapper%2Fsrc%2Feth_client_contract.rs)%3A%20creates%20an%20instance%20of%20%5Beth2-client%20contract%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Fblob%2Fmaster%2Fcontracts%2Fnear%2Feth2-client%2Fsrc%2Flib.rs)%20with%20the%20following%20arguments%0A%20%20%20%20%20%20-%20%60network%60%20-%20the%20name%20of%20Ethereum%20network%20such%20as%20%60mainnet%60%2C%20%60goerli%60%2C%20%60kiln%60%2C%20etc.%0A%20%20%20%20%20%20-%20%60finalized_execution_header%60%20-%20the%20finalized%20execution%20header%20to%20start%20initialization%20with.%0A%20%20%20%20%20%20-%20%60finalized_beacon_header%60%20-%20correspondent%20finalized%20beacon%20header.%0A%20%20%20%20%20%20-%20%60current_sync_committee%60%20-%20sync%20committee%20correspondent%20for%20finalized%20block.%0A%20%20%20%20%20%20-%20%60next_sync_committee%60%20-%20sync%20committee%20for%20the%20next%20period%20after%20period%20for%20finalized%20block.%0A%20%20%20%20%20%20-%20%60hashes_gs_threshold%60%20-%20the%20maximum%20number%20of%20stored%20finalized%20blocks.%0A%20%20%20%20%20%20-%20%60max_submitted_block_by_account%60%20-%20the%20maximum%20number%20of%20unfinalized%20blocks%20which%20one%20relay%20can%20store%20in%20the%20client's%20storage.%0A%20%20%20%20%20%20-%20%60trusted_signer%60%20-%20the%20account%20address%20of%20the%20trusted%20signer%20which%20is%20allowed%20to%20submit%20light%20client%20updates.%0A-%20%5BRelayer%20is%20Created%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Fblob%2Fmaster%2Feth2near%2Feth2near-block-relay-rs%2Fsrc%2Fmain.rs%23L111)%3A%0A%20%20-%20%5Beth2near_relay%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Fblob%2Fmaster%2Feth2near%2Feth2near-block-relay-rs%2Fsrc%2Fmain.rs%23L111)%20is%20created%20using%20the%20following%20arguments%0A%20%20%20%20-%20%60let%20mut%20eth2near_relay%20%3D%20Eth2NearRelay%3A%3Ainit(%26config%2C%20get_eth_client_contract(%26config)%2C%20args.enable_binary_search%2C%20args.submit_only_finalized_blocks%2C)%3B%60%0A-%20%5BRelayer%20is%20Started%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Fblob%2Fmaster%2Feth2near%2Feth2near-block-relay-rs%2Fsrc%2Fmain.rs)%3A%0A%20%20-%20The%20relayer%20is%20started%20using%20%60eth2near_relay.run(None)%3B%60%0A%20%20-%20This%20executes%20the%20%5Beth2near_relay%20run%20function%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Fblob%2Fmaster%2Feth2near%2Feth2near-block-relay-rs%2Fsrc%2Feth2near_relay.rs%23L257)%20%60pub%20fn%20run(%26mut%20self%2C%20max_iterations%3A%20Option%3Cu64%3E)%60%20which%20runs%20until%20terminated%20doing%20using%20the%20following%20loop%20%60while%20!self.terminate%60%0A%20%20%20%20-%20%60self.wait_for_synchronization()%2C%60%3A%20gets%20the%20sync%20status%0A%20%20%20%20-%20%60sleep(Duration%3A%3Afrom_secs(12))%3B%60%3A%20waits%20for%2012%20seconds%0A%20%20%20%20-%20%60self.get_max_slot_for_submission()%60%3A%20gets%20the%20maximum%20slot%20for%20submission%20from%20Ethereum%0A%20%20%20%20-%20%60self.get_last_eth2_slot_on_near%60%3A%20gets%20the%20latest%20slot%20propogated%20from%20Ethereum%20to%20NEAR%0A%20%20%20%20-%20%60if%20last_eth2_slot_on_near%20%3C%20max_slot_for_submission%60%3A%20If%20there%20are%20slots%20to%20process%0A%20%20%20%20%20%20-%20%60self.get_execution_blocks_between(last_eth2_slot_on_near%20%2B%201%2C%20max_slot_for_submission%2C)%2C%60%3A%20Get%20the%20execution%20blocks%20to%20be%20processed%0A%20%20%20%20%20%20-%20%60self.submit_execution_blocks(headers%2C%20current_slot%2C%20%26mut%20last_eth2_slot_on_near)%60%3A%20submit%20them%0A%20%20%20%20%20%20-%20%60were_submission_on_iter%20%3D%20true%3B%60%3A%20flags%20that%20there%20were%20submissions%0A%20%20%20%20-%20%60were_submission_on_iter%20%7C%3D%20self.send_light_client_updates_with_checks(last_eth2_slot_on_near)%3B%60%3A%20send%20light_client%20updates%20with%20checks%20and%20updates%20the%20submission%20flag%20to%20true%20if%20if%20passes.%20Following%20is%20some%20key%20logic%0A%20%20%20%20%20%20-%20%60self.is_enough_blocks_for_light_client_update%60%3A%20Checks%20if%20there%20are%20enough%20blocks%20for%20a%20light%20client%20update%0A%20%20%20%20%20%20%20%20-%20%60self.send_light_client_updates%60%20calls%20%60send_light_client_update%60%20which%0A%20%20%20%20%20%20%20%20%20%20-%20%60if%20last_finalized_slot_on_eth%20%3E%3D%20last_finalized_slot_on_near%20%2B%20self.max_blocks_for_finalization%60%3A%20checks%20if%20the%20gap%20is%20too%20big%20(i.e.%20we%20are%20at%20a%20new%20slot)%20between%20slot%20of%20finalized%20block%20on%20NEAR%20and%20ETH.%20If%20it%20is%20it%20sends%20a%20hand%20made%20client%20update%20(which%20will%20loop%20getting%20the%20new%20slots%20sync%20committees)%20otherwise%20it%20sends%20a%20regular%20client%20update%20(which%20propogates%20the%20block%20headers)%0A%20%20%20%20%20%20%20%20%20%20%20%20-%20%60self.send_hand_made_light_client_update(last_finalized_slot_on_near)%3B%60%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20-%20%60let%20include_next_sync_committee%20%3D%20BeaconRPCClient%3A%3Aget_period_for_slot%20(last_finalized_slot_on_near)%20!%3D%20BeaconRPCClient%3A%3Aget_period_for_slot(attested_slot)%3B%60%0A%20%20%20%20%20%20%20%20%20%20%20%20-%20%60self.send_regular_light_client_update(last_finalized_slot_on_eth%2C%20last_finalized_slot_on_near%2C)%3B%60%0A%20%20%20%20%20%20%20%20%20%20-%20%60self.send_specific_light_client_update(light_client_update)%60%20is%20called%20for%20both%20regular%20and%20hand%20made%20updates.%0A%20%20%20%20%20%20%20%20%20%20%20%20-%20%60self.eth_client_contract.is_known_block%60%3A%20Checks%20if%20the%20block%20is%20already%20known%20on%20the%20Etherum%20Client%20Contract%20on%20NEAR%0A%20%20%20%20%20%20%20%20%20%20%20%20-%20%60self.verify_bls_signature_for_finality_update(%26light_client_update)%60%3A%20Verifies%20the%20BLS%20signatures.%20This%20calls%20%60is_correct_finality_update%60%20in%20%60eth2near%2Ffinality-update-verify%2Fsrc%2Flib.rs%60%20%5C*%0A%20%20%20%20%20%20%20%20%20%20%20%20-%20%60self.eth_client_contract.send_light_client_update(light_client_update.clone())%60%3A%20Updates%20the%20light%20client%20with%20the%20finalized%20block%0A%20%20%20%20%20%20%20%20%20%20%20%20-%20%60self.beacon_rpc_client.get_block_number_for_slot(types%3A%3ASlot%3A%3Anew(light_client_update.finality_update.header_update.beacon_header.slot.as_u64()))%2C%60%3A%20Validates%20Finalized%20block%20number%20is%20correct%20on%20Ethereum%20usng%20the%20%60beacon_rpc_client%60.%0A%20%20%20%20%20%20%20%20%20%20%20%20-%20%60sleep(Duration%3A%3Afrom_secs(self.sleep_time_after_submission_secs))%3B%60%3A%20sleeps%20for%20the%20configured%20submission%20sleep%20time.%0A%20%20%20%20-%20%60if%20!were_submission_on_iter%20%7Bthread%3A%3Asleep(Duration%3A%3Afrom_secs(self.sleep_time_on_sync_secs))%3B%7D%60%3A%20if%20there%20were%20submissions%20sleep%20for%20however%20many%20seconds%20were%20configured%20for%20sync%20sleep%20time.%0A%0A%23%23%23%20NEAR%20to%20Ethereum%20block%20propagation%20flow%0A%0A%5BNEAR%20Light%20Client%20Documentation%5D(https%3A%2F%2Fnomicon.io%2FChainSpec%2FLightClient)%20gives%20an%20overview%20of%20how%20light%20clients%20work.%20At%20a%20high%20level%20the%20light%20client%20needs%20to%20fetch%20at%20least%20one%20block%20per%20%5Bepoch%5D(https%3A%2F%2Fdocs.near.org%2Fconcepts%2Fbasics%2Fepoch)%20i.e.%20every%2042%2C200%20blocks%20or%20approxmiately%2012%20hours.%20Also%20Having%20the%20LightClientBlockView%20for%20block%20B%20is%20sufficient%20to%20be%20able%20to%20verify%20any%20statement%20about%20state%20or%20outcomes%20in%20any%20block%20in%20the%20ancestry%20of%20B%20(including%20B%20itself).%0A%0AThe%20current%20scripts%20and%20codebase%20indicates%20that%20a%20block%20would%20be%20fetched%20every%2030%20seconds%20with%20a%20max%20delay%20of%2010%20seconds.%20It%20feels%20that%20this%20would%20be%20expensive%20to%20update%20Ethereum%20so%20frequently.%20%5BNEAR's%20bridge%20documentation%5D(https%3A%2F%2Fnear.org%2Fbridge%2F)%20states%20_Sending%20assets%20from%20NEAR%20back%20to%20Ethereum%20currently%20takes%20a%20maximum%20of%20sixteen%20hours%20(due%20to%20Ethereum%20finality%20times)_.%20This%20seems%20to%20align%20with%20sending%20light%20client%20updates%20once%20per%20NEAR%20epoch.%20The%20block%20fetch%20period%20is%20configurable%20in%20the%20relayer.%0A%0A%3E%20The%20RPC%20returns%20the%20LightClientBlock%20for%20the%20block%20as%20far%20into%20the%20future%20from%20the%20last%20known%20hash%20as%20possible%20for%20the%20light%20client%20to%20still%20accept%20it.%20Specifically%2C%20it%20either%20returns%20the%20last%20final%20block%20of%20the%20next%20epoch%2C%20or%20the%20last%20final%20known%20block.%20If%20there's%20no%20newer%20final%20block%20than%20the%20one%20the%20light%20client%20knows%20about%2C%20the%20RPC%20returns%20an%20empty%20result.%0A%3E%0A%3E%20A%20standalone%20light%20client%20would%20bootstrap%20by%20requesting%20next%20blocks%20until%20it%20receives%20an%20empty%20result%2C%20and%20then%20periodically%20request%20the%20next%20light%20client%20block.%0A%3E%0A%3E%20A%20smart%20contract-based%20light%20client%20that%20enables%20a%20bridge%20to%20NEAR%20on%20a%20different%20blockchain%20naturally%20cannot%20request%20blocks%20itself.%20Instead%20external%20oracles%20query%20the%20next%20light%20client%20block%20from%20one%20of%20the%20full%20nodes%2C%20and%20submit%20it%20to%20the%20light%20client%20smart%20contract.%20The%20smart%20contract-based%20light%20client%20performs%20the%20same%20checks%20described%20above%2C%20so%20the%20oracle%20doesn't%20need%20to%20be%20trusted.%0A%0ABlock%20Submitters%20stake%20ETH%20to%20be%20allowed%20to%20submit%20blocks%20which%20get's%20slashed%20if%20the%20watchdog%20identifies%20blocks%20with%20invalid%20signatures.%0A%0A_Note%3A%20Have%20not%20identified%20how%20the%20block%20submitters%20are%20rewarded%20for%20submitting%20blocks.%20Currently%20have%20only%20identified%20them%20locking%20ETH%20to%20be%20able%20to%20submit%20blocks%20and%20being%20slashed%20if%20they%20submit%20blocks%20with%20invalid%20signatures._%0A%0A-%20%5BLight%20Clients%20are%20deployed%20on%20Ethereum%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Fblob%2Fmaster%2Fcli%2Findex.js%23L518)%20via%20the%20CLI%20using%20%5Beth-contracts.js%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Fblob%2Fmaster%2Fcli%2Finit%2Feth-contracts.js)%0A%20%20-%20%5Binit-eth-ed25519%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Fblob%2Fmaster%2Fcli%2Findex.js%23L505)%3A%20Deploys%20%60Ed25519.sol%60%20see%20more%20information%20under%20%5Bnearbridge%20Cryptographic%20Primitives%5D(%23nearbridge-cryptographic-primitives)%0A%20%20-%20%5Binit-eth-client%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Fblob%2Fmaster%2Fcli%2Findex.js%23L520)%3A%20Deploys%20%60NearBridge.sol%60%20see%20more%20information%20under%20%5BNEAR%20to%20Ethereum%20block%20propagation%20components%5D(%23near-to-ethereum-block-propagation-components).%20It%20takes%20the%20following%20arguments%0A%20%20%20%20-%20%60ethEd25519Address%60%3A%20The%20address%20of%20the%20ECDSA%20signature%20checker%20using%20Ed25519%20curve%20(see%20%5Bhere%5D(https%3A%2F%2Fnbeguier.medium.com%2Fa-real-world-comparison-of-the-ssh-key-algorithms-b26b0b31bfd9))%0A%20%20%20%20-%20%60lockEthAmount%60%3A%20The%20amount%20that%20%60BLOCK_PRODUCERS%60%20need%20to%20deposit%20(in%20wei)to%20be%20able%20to%20provide%20blocks.%20This%20amount%20will%20be%20slashed%20if%20the%20block%20is%20challenged%20and%20proven%20not%20to%20have%20a%20valid%20signature.%20Default%20value%20is%20100000000000000000000%20WEI%20%3D%20100%20ETH.%0A%20%20%20%20-%20%60lockDuration%60%20%3A%2030%20seconds%0A%20%20%20%20-%20%60replaceDuration%60%3A%2060%20seconds%20it%20is%20passed%20in%20nanoseconds%2C%20because%20it%20is%20a%20difference%20between%20NEAR%20timestamps.%0A%20%20%20%20-%20%60ethAdminAddress%60%3A%20Bridge%20Administrator%20Address%0A%20%20%20%20-%20%600%60%20%3A%20Indicates%20nothing%20is%20paused%20%60UNPAUSE_ALL%60%0A%20%20-%20%5Binit-eth-prover%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Fblob%2Fmaster%2Fcli%2Findex.js%23L538)%3A%20Deploys%20%60NearProver.sol%60%20see%20more%20information%20under%20%5BNEAR%20to%20Ethereum%20block%20propagation%20components%5D(%23near-to-ethereum-block-propagation-components).%20It%20takes%20the%20following%20arguments%0A%20%20%20%20-%20%60ethClientAddress%60%3A%20Interface%20to%20%60NearBridge.sol%60%0A%20%20%20%20-%20%60ethAdminAddress%60%3A%20Administrator%20address%0A%20%20%20%20-%20%600%60%3A%20paused%20indicator%20defaults%20to%20%60UNPAUSE_ALL%20%3D%200%60%0A-%20%5BRelayer%20is%20Started%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Fblob%2Fmaster%2Fcli%2Fcommands%2Fstart%2Fnear2eth-relay.js)%0A%20%20-%20Relayer%20is%20started%20using%20the%20following%20command%0A%0A%20%20%20%20%20%20%20%20%60%60%60%0A%20%20%20%20%20%20%20%20cli%2Findex.js%20start%20near2eth-relay%20%5C%0A%20%20%20%20%20%20%20%20--eth-node-url%20http%3A%2F%2F127.0.0.1%3A8545%2F%20%5C%0A%20%20%20%20%20%20%20%20--eth-master-sk%200xac0974bec39a17e36ba4a6b4d238ff944bacb478cbed5efcae784d7bf4f2ff80%20%5C%0A%20%20%20%20%20%20%20%20--near-node-url%20https%3A%2F%2Frpc.testnet.near.org%2F%20%5C%0A%20%20%20%20%20%20%20%20--near-network-id%20testnet%20%5C%0A%20%20%20%20%20%20%20%20--eth-client-address%200xe7f1725e7734ce288f8367e1bb143e90bb3f0512%20%5C%0A%20%20%20%20%20%20%20%20--eth-use-eip-1559%20true%20%5C%0A%20%20%20%20%20%20%20%20--near2eth-relay-max-delay%2010%20%5C%0A%20%20%20%20%20%20%20%20--near2eth-relay-block-select-duration%2030%20%5C%0A%20%20%20%20%20%20%20%20--near2eth-relay-after-submit-delay-ms%201000%20%5C%0A%20%20%20%20%20%20%20%20--log-verbose%20true%20%5C%0A%20%20%20%20%20%20%20%20--daemon%20false%0A%20%20%20%20%20%20%20%20%60%60%60%0A%0A-%20%5BRelayer%20Logic%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Fblob%2Fmaster%2Fnear2eth%2Fnear2eth-block-relay%2Findex.js)%0A%20%20-%20Loops%20%60while%20(true)%60%0A%20%20%20%20-%20Get%20the%20bridge%20state%20(including%20%60currentHeight%60%2C%20%60nextTimestamp%60%2C%20%60nextValidAt%60%2C%20%60numBlockProducers%60%20)%0A%20%20%20%20-%20Get%20the%20%60currentBlockHash%60%20the%20hash%20of%20the%20current%20untrursted%20block%20based%20on%20%60lastValidAt%60%0A%20%20%20%20-%20Gets%20the%20%60lastBlock%60%20by%20calling%20the%20NEAR%20rpc%20%60next_light_client_block%60%20using%20the%20hash%20of%20last%20untrusted%20block%20%60bs58.encode(currentBlockHash)%60%0A%20%20%20%20-%20Get's%20the%20%60replaceDuration%60%20by%20%60clientContract.methods.replaceDuration().call()%60%20this%20will%20be%2060%20seconds%20if%20we%20deployed%20%60NearBridge.sol%60%20with%20the%20default%20values%20above%0A%20%20%20%20-%20Sets%20%60nextValidAt%60%20from%20the%20bridge%20state%20%60web3.utils.toBN(bridgeState.nextValidAt)%60%0A%20%20%20%20-%20Sets%20%60replaceDelay%60%20to%200%20then%20updates%20it%20to%20the%20%60nextTimestamp%60%20%2B%20%60replaceDuration%60%20-%20%60lastBlock.inner_lite.timestamp%60%20i.e.%20The%20new%20block%20has%20to%20be%20at%20least%2060%20seconds%20after%20the%20current%20block%20stored%20on%20the%20light%20client.%0A%20%20%20%20-%20Checks%20the%20height%20of%20the%20%60currentHeight%60%20of%20the%20bridge%20is%20less%20than%20the%20%60lastblock%60%20from%20the%20near%20light%20client%20%60(bridgeState.currentHeight%20%3C%20lastBlock.inner_lite.height)%60%0A%20%20%20%20-%20Serializes%20the%20%60lastBlock%60%20using%20Borsh%20and%20check%20that%20the%20block%20is%20suitable%0A%20%20%20%20-%20Checks%20that%20the%20%60replaceDelay%60%20has%20been%20met%2C%20if%20not%20sleeps%20until%20it%20has%0A%20%20%20%20-%20Checks%20that%20the%20Master%20Account%20(the%20one%20submitting%20the%20block)%20has%20enough%20locked%20ETH%20(if%20not%20tries%20to%20deposit%20more).%20So%20that%20it%20can%20be%20slashed%20if%20the%20block%20proposed%20is%20invalid.%0A%20%20%20%20-%20Adds%20the%20light%20client%20block%20%60await%20clientContract.methods.addLightClientBlock(nextBlockSelection.borshBlock).send%60%0A%20%20%20%20%20%20-%20Checks%20%60NearBridge.sol%60%20(the%20light%20client)%20has%20been%20initialized%0A%20%20%20%20%20%20-%20Checks%20%60balanceOf%5Bmsg.sender%5D%20%3E%3D%20lockEthAmount%60%20that%20the%20sender%20has%20locked%20enough%20Eth%20to%20allow%20them%20to%20submit%20blocks%0A%20%20%20%20%20%20-%20Decodes%20the%20nearBlock%20using%20%60Borsh.from(data)%60%20and%20%60borsh.decodeLightClientBlock()%60%0A%20%20%20%20%20%20-%20Commis%20the%20previous%20block%2C%20or%20make%20sure%20that%20it%20is%20OK%20to%20replace%20it%20using%0A%20%20%20%20%20%20%20%20-%20%60lastValidAt%20%3D%200%3B%60%0A%20%20%20%20%20%20%20%20-%20%60blockHashes_%5BcurHeight%5D%20%3D%20untrustedHash%3B%60%0A%20%20%20%20%20%20%20%20-%20%60blockMerkleRoots_%5BcurHeight%5D%20%3D%20untrustedMerkleRoot%3B%60%0A%20%20%20%20%20%20-%20Check%20that%20the%20new%20block's%20height%20is%20greater%20than%20the%20current%20one's.%20%60nearBlock.inner_lite.height%20%3E%20curHeight%60%0A%20%20%20%20%20%20-%20Check%20that%20the%20new%20block%20is%20from%20the%20same%20epoch%20as%20the%20current%20one%2C%20or%20from%20the%20next%20one.%0A%20%20%20%20%20%20-%20Check%20that%20the%20new%20block%20is%20signed%20by%20more%20than%202%2F3%20of%20the%20validators.%0A%20%20%20%20%20%20-%20If%20the%20block%20is%20from%20the%20next%20epoch%2C%20make%20sure%20that%20the%20Block%20producers%20%60next_bps%60%20are%20supplied%20and%20have%20a%20correct%20hash.%0A%20%20%20%20%20%20-%20Add%20the%20Block%20to%20the%20Light%20client%0A%20%20%20%20%20%20%20%20-%20Updates%20untrusted%20information%20to%20this%20block%20including%20%60untrustedHeight%60%2C%20%60untrustedTimestamp%60%2C%20%60untrustedHash%60%2C%20%60untrustedMerkleRoot%60%2C%20%60untrustedNextHash%60%2C%20%60untrustedSignatureSet%60%2C%20%60untrustedNextEpoch%60%0A%20%20%20%20%20%20%20%20-%20If%20%60fromNextEpoch%60%20also%20update%20the%20Block%20Producers%0A%20%20%20%20%20%20%20%20-%20Updates%20the%20%60lastSubmitter%60%20and%20%60lastValidAt%60%0A%20%20%20%20-%20Cleans%20up%20the%20selected%20block%20to%20prevent%20submitting%20the%20same%20block%20again%20%60await%20sleep(afterSubmitDelayMs)%60%0A%20%20%20%20-%20Sets%20the%20HeightGauuges%20to%20the%20correct%20block%20height%0A%20%20%20%20%20%20-%20%60clientHeightGauge.set(Number(BigInt(bridgeState.currentHeight))%60%0A%20%20%20%20%20%20-%20%60chainHeightGauge.set(Number(BigInt(lastBlock.inner_lite.height)))%60%0A%20%20%20%20-%20Sleeps%20for%20delay%20calculated%20from%20the%20maximum%20of%20the%20relayer%20days%20(10%20seconds)%20and%20differnce%20between%20the%20current%20and%20next%20block%20time%20stamps%20and%20%60await%20sleep(1000%20*%20delay)%60%0A%0A%23%23%20Light%20Client%20Functionality%0A%0A%23%23%23%20Near%20Rainbow%20Bridge%20Ethereum%20Light%20Client%20Walkthrough%0A%0AThe%20following%20is%20a%20walkthrough%20of%20how%20a%20transaction%20executed%20on%20Ethereum%20is%20propogated%20to%20NEAR's%20%5Beth2-client%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Ftree%2Fmaster%2Fcontracts%2Fnear%2Feth2-client).%20See%20%5BCryptographic%20Primitives%5D(%23cryptographic-primitives)%20for%20more%20information%20on%20the%20cryptography%20used.%20and%20%5BAppendix%20B%5D(%23appendix-b-ethereum-light-client-finality-update-verify-components)%20for%20verification%20components.%0A%0A**At%20a%20high%20level%20the%20ethereum%20light%20client%20contract**%0A%0A-%20Optionally%20accepts%20client%20updates%20only%20from%20a%20trusted%20client%0A-%20Can%20pause%20functions%0A-%20Validates%20a%20sync%20committee%20exists%20for%20the%20curremt%20slot%0A-%20Validates%20sync%20committe%20has%20greater%20than%20the%20minimum%20required%20sync%20committee%20members%0A-%20Validates%202%2F3%20or%20more%20of%20the%20committe%20members%20have%20signed%20the%20blocks%0A-%20Validates%20bls%20signatures%20(i.e.%20the%20bls%20signatures%20of%20the%20sync%20comittee%20for%20the%20blocks%20propogated)%0A-%20Stores%20the%20hashes%20of%20the%20blocks%20for%20the%20past%20%60hashes_gc_threshold%60%20headers.%20Events%20that%20happen%20past%20this%20threshold%20cannot%20be%20verified%20by%20the%20client.%20It%20is%20desirable%20that%20this%20number%20is%20larger%20than%207%20days'%20worth%20of%20headers%2C%20which%20is%20roughly%2051k%20Ethereum%20blocks.%20So%20this%20number%20should%20be%2051k%20in%20production.%0A-%20Stores%20the%20Ethereum%20Network%20(e.g.%20mainnet%2C%20kiln)%0A-%20Stores%20Hashes%20of%20the%20finalized%20execution%20blocks%20mapped%20to%20their%20numbers.%0A-%20Stores%20All%20unfinalized%20execution%20blocks'%20headers%20hashes%20mapped%20to%20their%20%60HeaderInfo%60.%0A-%20Stores%20%60AccountId%60s%20mapped%20to%20their%20number%20of%20submitted%20headers.%0A-%20Stores%20Max%20number%20of%20unfinalized%20blocks%20allowed%20to%20be%20stored%20by%20one%20submitter%20account.%20This%20value%20should%20be%20at%20least%2032%20blocks%20(1%20epoch)%2C%20but%20the%20recommended%20value%20is%201024%20(32%20epochs)%0A-%20Stores%20minimum%20balance%20that%20should%20be%20attached%20to%20register%20a%20new%20submitter%20account.%0A-%20Stores%20finalized%20beacon%20header%0A-%20Stores%20finalized%20execution%20header%0A-%20Stores%20current_sync_committee%0A-%20Stores%20next_sync_committee%0A%0A%23%23%23%20Near%20Rainbow%20Bridge%20Near%20Light%20Client%20Walkthrough%0A%0AThe%20following%20is%20a%20walkthrough%20of%20how%20a%20transaction%20executed%20on%20NEAR%20is%20propogated%20to%20Ethereum's%20%5Bnearbridge%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Ftree%2Fmaster%2Fcontracts%2Feth%2Fnearbridge).%20See%20%5Bnearbridge%20Cryptographic%20Primitives%5D(%23nearbridge-cryptographic-primitives)%20for%20more%20information%20on%20the%20cryptography%20used.%0A%0A**NearOnEthClient%20Overview**%0A%0A_The%20following%20is%20an%20excerpt%20from%20a%20blog%20by%20near%20on%20%5Beth-near-rainbow-bridge%5D(https%3A%2F%2Fnear.org%2Fblog%2Feth-near-rainbow-bridge%2F)_%0A%0A%3E%20NearOnEthClient%20is%20an%20implementation%20of%20the%20NEAR%20light%20client%20in%20Solidity%20as%20an%20Ethereum%20contract.%20Unlike%20EthOnNearClient%20it%20does%20not%20need%20to%20verify%20every%20single%20NEAR%20header%20and%20can%20skip%20most%20of%20them%20as%20long%20as%20it%20verifies%20at%20least%20one%20header%20per%20NEAR%20epoch%2C%20which%20is%20about%2043k%20blocks%20and%20lasts%20about%20half%20a%20day.%20As%20a%20result%2C%20NearOnEthClient%20can%20memorize%20hashes%20of%20all%20submitted%20NEAR%20headers%20in%20history%2C%20so%20if%20you%20are%20making%20a%20transfer%20from%20NEAR%20to%20Ethereum%20and%20it%20gets%20interrupted%20you%20don%E2%80%99t%20need%20to%20worry%20and%20you%20can%20resume%20it%20any%20time%2C%20even%20months%20later.%20Another%20useful%20property%20of%20the%20NEAR%20light%20client%20is%20that%20every%20NEAR%20header%20contains%20a%20root%20of%20the%20merkle%20tree%20computed%20from%20all%20headers%20before%20it.%20As%20a%20result%2C%20if%20you%20have%20one%20NEAR%20header%20you%20can%20efficiently%20verify%20any%20event%20that%20happened%20in%20any%20header%20before%20it.%0A%3E%0A%3E%20Another%20useful%20property%20of%20the%20NEAR%20light%20client%20is%20that%20it%20only%20accepts%20final%20blocks%2C%20and%20final%20blocks%20cannot%20leave%20the%20canonical%20chain%20in%20NEAR.%20This%20means%20that%20NearOnEthClient%20does%20not%20need%20to%20worry%20about%20forks.%0A%3E%0A%3E%20However%2C%20unfortunately%2C%20NEAR%20uses%20%5BEd25519%5D(https%3A%2F%2Fgithub.com%2Fethereum%2FEIPs%2Fblob%2Fmaster%2FEIPS%2Feip-665.mdx)%20to%20sign%20messages%20of%20the%20validators%20who%20approve%20the%20blocks%2C%20and%20this%20signature%20is%20not%20available%20as%20an%20EVM%20precompile.%20It%20makes%20verification%20of%20all%20signatures%20of%20a%20single%20NEAR%20header%20prohibitively%20expensive.%20So%20technically%2C%20we%20cannot%20verify%20one%20NEAR%20header%20within%20one%20contract%20call%20to%20NearOnEthClient.%20Therefore%20we%20adopt%20the%20%5Boptimistic%20approach%5D(https%3A%2F%2Fmedium.com%2F%40deaneigenmann%2Foptimistic-contracts-fb75efa7ca84)%20where%20NearOnEthClient%20verifies%20everything%20in%20the%20NEAR%20header%20except%20the%20signatures.%20Then%20anyone%20can%20challenge%20a%20signature%20in%20a%20submitted%20header%20within%20a%204-hour%20challenge%20window.%20The%20challenge%20requires%20verification%20of%20a%20single%20Ed25519%20signature%20which%20would%20cost%20about%20500k%20Ethereum%20gas%20(expensive%2C%20but%20possible).%20The%20user%20submitting%20the%20NEAR%20header%20would%20have%20to%20post%20a%20bond%20in%20Ethereum%20tokens%2C%20and%20a%20successful%20challenge%20would%20burn%20half%20of%20the%20bond%20and%20return%20the%20other%20half%20to%20the%20challenger.%20The%20bond%20should%20be%20large%20enough%20to%20pay%20for%20the%20gas%20even%20if%20the%20gas%20price%20increases%20exponentially%20during%20the%204%20hours.%20For%20instance%2C%20a%2020%20ETH%20bond%20would%20cover%20gas%20price%20hikes%20up%20to%2020000%20Gwei.%20This%20optimistic%20approach%20requires%20having%20a%20watchdog%20service%20that%20monitors%20submitted%20NEAR%20headers%20and%20challenges%20any%20headers%20with%20invalid%20signatures.%20For%20added%20security%2C%20independent%20users%20can%20run%20several%20watchdog%20services.%0A%3E%0A%3E%20Once%20EIP665%20is%20accepted%2C%20Ethereum%20will%20have%20the%20Ed25519%20signature%20available%20as%20an%20EVM%20precompile.%20This%20will%20make%20watchdog%20services%20and%20the%204-hour%20challenge%20window%20unnecessary.%0A%3E%0A%3E%20At%20its%20bare%20minimum%2C%20Rainbow%20Bridge%20consists%20of%20EthOnNearClient%20and%20NearOnEthClient%20contracts%2C%20and%20three%20services%3A%20Eth2NearRelay%2C%20Near2EthRelay%2C%20and%20the%20Watchdog.%20We%20might%20argue%20that%20this%20already%20constitutes%20a%20bridge%20since%20we%20have%20established%20a%20cryptographic%20link%20between%20two%20blockchains%2C%20but%20practically%20speaking%20it%20requires%20a%20large%20portion%20of%20additional%20code%20to%20make%20application%20developers%20even%20consider%20using%20the%20Rainbow%20Bridge%20for%20their%20applications.%0A%0A_The%20following%20information%20on%20sending%20assets%20from%20NEAR%20back%20to%20Ethereum%20is%20an%20excerpt%20from%20%5Bhttps%3A%2F%2Fnear.org%2Fbridge%2F%5D(https%3A%2F%2Fnear.org%2Fbridge%2F)._%0A%0A%3E%20Sending%20assets%20from%20NEAR%20back%20to%20Ethereum%20currently%20takes%20a%20maximum%20of%20sixteen%20hours%20(due%20to%20Ethereum%20finality%20times)%20and%20costs%20around%20%2460%20(due%20to%20ETH%20gas%20costs%20and%20at%20current%20ETH%20price).%20These%20costs%20and%20speeds%20will%20improve%20in%20the%20near%20future.%0A%0A%23%23%20Token%20Lockers%0A%0A%23%23%23%20Token%20Transfer%20Process%20Flow%0A%0AThe%20%5BNEAR%20Rainbow%20Bridge%5D(https%3A%2F%2Fnear.org%2Fbridge%2F)%20uses%20ERC-20%20connectors%20which%20are%20developed%20in%20%5Brainbow-token-connector%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-token-connector)%20and%20%5Brainbow-bridge-client%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge-client).%20Also%20see%20%5Beth2near-fun-transfer.md%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Fblob%2Fmaster%2Fdocs%2Fworkflows%2Feth2near-fun-transfer.mdx).%0A%0AFollowing%20is%20an%20overview%20of%20timing%20and%20anticipated%20costs%0A%0A-%20Once%20on%20NEAR%2C%20transactions%20will%20confirm%20in%201-2%20seconds%20and%20cost%20well%20under%20%241%20in%20most%20cases.%0A-%20Since%20the%20Bridge%20requires%20transactions%20on%20Ethereum%20for%20NEAR%20and%20Ethereum%2C%20the%20following%20costs%20are%20expected.%0A-%20Sending%20assets%20from%20Ethereum%20to%20NEAR%20takes%20about%20six%20minutes%20(20%20blocks)%20and%20for%20ERC-20%20costs%20about%20%2410%20on%20average.%0A-%20Sending%20assets%20from%20NEAR%20back%20to%20Ethereum%20currently%20takes%20a%20maximum%20of%20sixteen%20hours%20(due%20to%20Ethereum%20finality%20times)%20and%20costs%20around%20%2460%20(due%20to%20ETH%20gas%20costs%20and%20at%20current%20ETH%20price).%20These%20costs%20and%20speeds%20will%20improve%20in%20the%20near%20future.%0A%0A_Note%3A%20This%20uses%20Ethreum%20%5BERC20%5D(https%3A%2F%2Feips.ethereum.org%2FEIPS%2Feip-20)%20and%20NEAR%20%5BNEP-141%5D(https%3A%2F%2Fnomicon.io%2FStandards%2FTokens%2FFungibleToken%2FCore)%20initally%20developed%20for%20%5BNEP-21%5D(https%3A%2F%2Fgithub.com%2Fnear%2FNEPs%2Fpull%2F21)_%0A%0A**%5BGeneric%20ERC-20%2FNEP-141%20connector%20for%20Rainbow%20Bridge%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-token-connector%2Fblob%2Fmaster%2FREADME.mdx)**%0A%0A**Specification**%0A%0A**Ethereum's%20side**%0A%0A%60%60%60solidity%0Acontract%20ERC20Locker%20%7B%0A%20%20constructor(bytes%20memory%20nearTokenFactory%2C%20INearProver%20prover)%20public%3B%0A%20%20function%20lockToken(IERC20%20token%2C%20uint256%20amount%2C%20string%20memory%20accountId)%20public%3B%0A%20%20function%20unlockToken(bytes%20memory%20proofData%2C%20uint64%20proofBlockHeader)%20public%3B%0A%7D%0A%60%60%60%0A%0A**NEAR's%20side**%0A%0A%60%60%60rust%0Astruct%20BridgeTokenFactory%20%7B%0A%20%20%20%20%2F%2F%2F%20The%20account%20of%20the%20prover%20that%20we%20can%20use%20to%20prove%0A%20%20%20%20pub%20prover_account%3A%20AccountId%2C%0A%20%20%20%20%2F%2F%2F%20Address%20of%20the%20Ethereum%20locker%20contract.%0A%20%20%20%20pub%20locker_address%3A%20%5Bu8%3B%2020%5D%2C%0A%20%20%20%20%2F%2F%2F%20Hashes%20of%20the%20events%20that%20were%20already%20used.%0A%20%20%20%20pub%20used_events%3A%20UnorderedSet%3CVec%3Cu8%3E%3E%2C%0A%20%20%20%20%2F%2F%2F%20Mapping%20from%20Ethereum%20tokens%20to%20NEAR%20tokens.%0A%20%20%20%20pub%20tokens%3A%20UnorderedMap%3CEvmAddress%2C%20AccountId%3E%3B%0A%7D%0A%0Aimpl%20BridgeTokenFactory%20%7B%0A%20%20%20%20%2F%2F%2F%20Initializes%20the%20contract.%0A%20%20%20%20%2F%2F%2F%20%60prover_account%60%3A%20NEAR%20account%20of%20the%20Near%20Prover%20contract%3B%0A%20%20%20%20%2F%2F%2F%20%60locker_address%60%3A%20Ethereum%20address%20of%20the%20locker%20contract%2C%20in%20hex.%0A%20%20%20%20%23%5Binit%5D%0A%20%20%20%20pub%20fn%20new(prover_account%3A%20AccountId%2C%20locker_address%3A%20String)%20-%3E%20Self%3B%0A%0A%20%20%20%20%2F%2F%2F%20Relays%20the%20lock%20event%20from%20Ethereum.%0A%20%20%20%20%2F%2F%2F%20Uses%20prover%20to%20validate%20that%20proof%20is%20correct%20and%20relies%20on%20a%20canonical%20Ethereum%20chain.%0A%20%20%20%20%2F%2F%2F%20Send%20%60mint%60%20action%20to%20the%20token%20that%20is%20specified%20in%20the%20proof.%0A%20%20%20%20%23%5Bpayable%5D%0A%20%20%20%20pub%20fn%20deposit(%26mut%20self%2C%20proof%3A%20Proof)%3B%0A%0A%20%20%20%20%2F%2F%2F%20A%20callback%20from%20BridgeToken%20contract%20deployed%20under%20this%20factory.%0A%20%20%20%20%2F%2F%2F%20Is%20called%20after%20tokens%20are%20burned%20there%20to%20create%20an%20receipt%20result%20%60(amount%2C%20token_address%2C%20recipient_address)%60%20for%20Ethereum%20to%20unlock%20the%20token.%0A%20%20%20%20pub%20fn%20finish_withdraw(token_account%3A%20AccountId%2C%20amount%3A%20Balance%2C%20recipient%3A%20EvmAddress)%3B%0A%0A%20%20%20%20%2F%2F%2F%20Transfers%20given%20NEP-21%20token%20from%20%60predecessor_id%60%20to%20factory%20to%20lock.%0A%20%20%20%20%2F%2F%2F%20On%20success%2C%20leaves%20a%20receipt%20result%20%60(amount%2C%20token_address%2C%20recipient_address)%60.%0A%20%20%20%20%23%5Bpayable%5D%0A%20%20%20%20pub%20fn%20lock(%26mut%20self%2C%20token%3A%20AccountId%2C%20amount%3A%20Balance%2C%20recipient%3A%20String)%3B%0A%0A%20%20%20%20%2F%2F%2F%20Relays%20the%20unlock%20event%20from%20Ethereum.%0A%20%20%20%20%2F%2F%2F%20Uses%20prover%20to%20validate%20that%20proof%20is%20correct%20and%20relies%20on%20a%20canonical%20Ethereum%20chain.%0A%20%20%20%20%2F%2F%2F%20Uses%20NEP-21%20%60transfer%60%20action%20to%20move%20funds%20to%20%60recipient%60%20account.%0A%20%20%20%20%23%5Bpayable%5D%0A%20%20%20%20pub%20fn%20unlock(%26mut%20self%2C%20proof%3A%20Proof)%3B%0A%0A%20%20%20%20%2F%2F%2F%20Deploys%20BridgeToken%20contract%20for%20the%20given%20EVM%20address%20in%20hex%20code.%0A%20%20%20%20%2F%2F%2F%20The%20name%20of%20new%20NEP21%20compatible%20contract%20will%20be%20%3Chex(evm_address)%3E.%3Ccurrent_id%3E.%0A%20%20%20%20%2F%2F%2F%20Expects%20~35N%20attached%20to%20cover%20storage%20for%20BridgeToken.%0A%20%20%20%20%23%5Bpayable%5D%0A%20%20%20%20pub%20fn%20deploy_bridge_token(address%3A%20String)%3B%0A%0A%20%20%20%20%2F%2F%2F%20Checks%20if%20Bridge%20Token%20has%20been%20successfully%20deployed%20with%20%60deploy_bridge_token%60.%0A%20%20%20%20%2F%2F%2F%20On%20success%2C%20returns%20the%20name%20of%20NEP21%20contract%20associated%20with%20given%20address%20(%3Chex(evm_address)%3E.%3Ccurrent_id%3E).%0A%20%20%20%20%2F%2F%2F%20Otherwise%2C%20returns%20%22token%20do%20not%20exists%22%20error.%0A%20%20%20%20pub%20fn%20get_bridge_token_account_id(%26self%2C%20address%3A%20String)%20-%3E%20AccountId%3B%0A%7D%0A%0Astruct%20BridgeToken%20%7B%0A%20%20%20controller%3A%20AccountId%2C%0A%20%20%20token%3A%20Token%2C%20%2F%2F%20uses%20https%3A%2F%2Fgithub.com%2Filblackdragon%2Fbalancer-near%2Ftree%2Fmaster%2Fnear-lib-rs%0A%7D%0A%0Aimpl%20BridgeToken%20%7B%0A%20%20%20%20%2F%2F%2F%20Setup%20the%20Token%20contract%20with%20given%20factory%2Fcontroller.%0A%20%20%20%20pub%20fn%20new(controller%3A%20AccountId)%20-%3E%20Self%3B%0A%0A%20%20%20%20%2F%2F%2F%20Mint%20tokens%20to%20given%20user.%20Only%20can%20be%20called%20by%20the%20controller.%0A%20%20%20%20pub%20fn%20mint(%26mut%20self%2C%20account_id%3A%20AccountId%2C%20amount%3A%20Balance)%3B%0A%0A%20%20%20%20%2F%2F%2F%20Withdraw%20tokens%20from%20this%20contract.%0A%20%20%20%20%2F%2F%2F%20Burns%20sender's%20tokens%20and%20calls%20controller%20to%20create%20event%20for%20relaying.%0A%20%20%20%20pub%20fn%20withdraw(%26mut%20self%2C%20amount%3A%20U128%2C%20recipient%3A%20String)%20-%3E%20Promise%3B%0A%7D%0A%0Aimpl%20FungibleToken%20for%20BridgeToken%20%7B%0A%20%20%20%2F%2F%20see%20example%20https%3A%2F%2Fgithub.com%2Filblackdragon%2Fbalancer-near%2Fblob%2Fmaster%2Fbalancer-pool%2Fsrc%2Flib.rs%23L329%0A%7D%0A%60%60%60%0A%0A**Setup%20new%20ERC-20%20on%20NEAR**%0A%0ATo%20setup%20token%20contract%20on%20NEAR%20side%2C%20anyone%20can%20call%20%60%3Cbridge_token_factory%3E.deploy_bridge_token(%3Cerc20%3E)%60%20where%20%60%3Cerc20%3E%60%20is%20the%20address%20of%20the%20token.%0AWith%20this%20call%20must%20attach%20the%20amount%20of%20%24NEAR%20to%20cover%20storage%20for%20(at%20least%2030%20%24NEAR%20currently).%0A%0AThis%20will%20create%20%60%3C%3Chex(erc20)%3E.%3Cbridge_token_factory%3E%3E%60%20NEP141-compatible%20contract.%0A%0A**Usage%20flow%20Ethereum%20-%3E%20NEAR**%0A%0A1.%20User%20sends%20%60%3Cerc20%3E.approve(%3Cerc20locker%3E%2C%20%3Camount%3E)%60%20Ethereum%20transaction.%0A2.%20User%20sends%20%60%3Cerc20locker%3E.lock(%3Cerc20%3E%2C%20%3Camount%3E%2C%20%3Cdestination%3E)%60%20Ethereum%20transaction.%20This%20transaction%20will%20create%20%60Locked%60%20event.%0A3.%20Relayers%20will%20be%20sending%20Ethereum%20blocks%20to%20the%20%60EthClient%60%20on%20NEAR%20side.%0A4.%20After%20sufficient%20number%20of%20confirmations%20on%20top%20of%20the%20mined%20Ethereum%20block%20that%20contain%20the%20%60lock%60%20transaction%2C%20user%20or%20relayer%20can%20call%20%60BridgeTokenFactory.deposit(proof)%60.%20Proof%20is%20the%20extracted%20information%20from%20the%20event%20on%20Ethereum%20side.%0A5.%20%60BridgeTokenFactory.deposit%60%20function%20will%20call%20%60EthProver%60%20and%20verify%20that%20proof%20is%20correct%20and%20relies%20on%20a%20block%20with%20sufficient%20number%20of%20confirmations.%0A6.%20%60EthProver%60%20will%20return%20callback%20to%20%60BridgeTokenFactory%60%20confirming%20that%20proof%20is%20correct.%0A7.%20%60BridgeTokenFactory%60%20will%20call%20%60%3C%3Chex(erc20)%3E.%3Cbridge_token_factory%3E%3E.mint(%3Cnear_account_id%3E%2C%20%3Camount%3E)%60.%0A8.%20User%20can%20use%20%60%3C%3Chex(erc20)%3E.%3Cbridge_token_factory%3E%3E%60%20token%20in%20other%20applications%20now%20on%20NEAR.%0A%0A**Usage%20flow%20NEAR%20-%3E%20Ethereum**%0A%0A1.%20%60token-locker%60%20locks%20NEP141%20tokens%20on%20NEAR%20side.%0A%0ATo%20deposit%20funds%20into%20the%20locker%2C%20call%20%60ft_transfer_call%60%20where%20%60msg%60%20contains%20Ethereum%20address%20the%20funds%20should%20arrive%20to.%0AThis%20will%20emit%20%60%3Ctoken%3A%20String%2C%20amount%3A%20u128%2C%20recipient%20address%3A%20EthAddress%3E%60%20(which%20arrives%20to%20%60deposit%60%20on%20Ethereum%20side).%0A%0AAccepts%20%60Unlock(token%3A%20String%2C%20sender_id%3A%20EthAddress%2C%20amount%3A%20u256%2C%20recipient%3A%20String)%60%20event%20from%20Ethereum%20side%20with%20a%20proof%2C%20verifies%20its%20correctness.%0AIf%20%60recipient%60%20contains%20'%3A'%20will%20split%20it%20into%20%60%3Crecipient%2C%20msg%3E%60%20and%20do%20%60ft_transfer_call(recipient%2C%20amount%2C%20None%2C%20msg)%60.%20Otherwise%20will%20%60ft_transfer%60%20to%20%60recipient%60.%0A%0ATo%20get%20metadata%20of%20token%20to%20Ethereum%2C%20need%20to%20call%20%60log_metadata%60%2C%20which%20will%20create%20a%20result%20%60%3Ctoken%3A%20String%2C%20name%3A%20String%2C%20symbol%3A%20String%2C%20decimals%3A%20u8%2C%20blockHeight%3A%20u64%3E%60.%0A%0A2.%20%60erc20-bridge-token%60%20-%20%60BridgeTokenFactory%60%20and%20%60BridgeToken%60%20Ethereum%20contracts.%0A%0A%60BridgeTokenFactory%60%20creates%20new%20%60BridgeToken%60%20that%20correspond%20to%20specific%20token%20account%20id%20on%20NEAR%20side.%0A%0A%60BridgeTokenFactory%60%20receives%20%60deposit%60%20with%20proof%20from%20NEAR%2C%20verify%20them%20and%20mint%20appropriate%20amounts%20on%20recipient%20addresses.%0A%0ACalling%20%60withdraw%60%20will%20burn%20tokens%20of%20this%20user%20and%20will%20generate%20event%20%60%3Ctoken%3A%20String%2C%20sender_id%3A%20EthAddress%2C%20amount%3A%20u256%2C%20recipient%3A%20String%3E%60%20that%20can%20be%20relayed%20to%20%60token-factory%60.%0A%0A**Caveats**%0A%0AGenerally%2C%20this%20connector%20allows%20any%20account%20to%20call%20%60ft_transfer_call%60%20opening%20for%20potential%20malicious%20tokens%20to%20be%20bridged%20to%20Ethereum.%0AThe%20expectation%20here%20is%20that%20on%20Ethereum%20side%2C%20the%20token%20lists%20will%20handle%20this%2C%20as%20it's%20the%20same%20attack%20model%20as%20malicious%20tokens%20on%20Uniswap%20and%20other%20DEXs.%0A%0AUsing%20Ethereum%20%60BridgeTokenFactory%60%20contract%20can%20always%20resolve%20Ethereum%20address%20of%20a%20contract%20back%20to%20NEAR%20one%20to%20check%20that%20it%20is%20indeed%20bridging%20token%20from%20NEAR%20and%20is%20created%20by%20this%20factory.%0A%0A**Testing**%0A%0ATesting%20Ethereum%20side%0A%0A%60%60%60%0Acd%20erc20-connector%0Ayarn%0Ayarn%20run%20test%0A%60%60%60%0A%0ATesting%20NEAR%20side%0A%0A%60%60%60%0Amake%20res%2Fbridge_token_factory.wasm%0Acargo%20test%20--all%0A%60%60%60%0A%0A%23%23%20Multi-chain%20support%0A%0A%23%23%20Economics%0A%0A%23%23%20References%0A%0A-%20Ethereum%202.0%20Specifications%0A%20%20-%20%5BBeacon%20Chain%20Specification%5D(https%3A%2F%2Fgithub.com%2Fethereum%2Fconsensus-specs%2Fblob%2Fmaster%2Fspecs%2Fphase0%2Fbeacon-chain.mdx)%0A%20%20-%20%5BExtended%20light%20client%20protocol%5D(https%3A%2F%2Fnotes.ethereum.org%2F%40vbuterin%2Fextended_light_client_protocol)%0A%20%20-%20%5BAltair%20Light%20Client%20--%20Light%20Client%5D(https%3A%2F%2Fgithub.com%2Fethereum%2Fconsensus-specs%2Fblob%2Fdev%2Fspecs%2Faltair%2Flight-client%2Flight-client.mdx)%0A%20%20-%20%5BAltair%20Light%20Client%20--%20Sync%20Protocol%5D(https%3A%2F%2Fgithub.com%2Fethereum%2Fconsensus-specs%2Fblob%2Fdev%2Fspecs%2Faltair%2Flight-client%2Fsync-protocol.mdx)%0A%20%20-%20%5BBeacon%20Chain%20Fork%20Choice%5D(https%3A%2F%2Fgithub.com%2Fethereum%2Fconsensus-specs%2Fblob%2Fdev%2Fspecs%2Fphase0%2Ffork-choice.mdx)%0A%0A-%20Proving%20Mechanisms%0A%20%20-%20%5BLighthouse%20Documentation%5D(https%3A%2F%2Flighthouse-book.sigmaprime.io%2F)%3A%20ETH%202.0%20Consensus%20Client%20Lighthouse%20documentation%0A%20%20-%20%5BLighthouse%20Github%5D(https%3A%2F%2Fgithub.com%2Fsigp%2Flighthouse)%3A%20ETH%202.0%20Consensus%20Client%20Lighthouse%20Github%0A%20%20-%20%5BLighthouse%3A%20Blog%5D(https%3A%2F%2Flighthouse-blog.sigmaprime.io%2F)%3A%20ETH%202.0%20Consensus%20Client%20Lighthouse%20Blog%0A%20%20-%20%5Beth2near-block-relay-rs%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Ftree%2Fmaster%2Feth2near%2Feth2near-block-relay-rs)%0A%20%20-%20%5Bnearbridge%20contracts%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Ftree%2Fmaster%2Fcontracts%2Feth%2Fnearbridge)%0A%20%20-%20%5Bnearprover%20contracts%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Ftree%2Fmaster%2Fcontracts%2Feth%2Fnearprover)%0A-%20Prysm%20Light%20Client%20Work%0A%20%20-%20%5BPrysm%3A%20Light-client%20(WORK%20IN%20PROGRESS)%5D(https%3A%2F%2Fgithub.com%2Fjinfwhuang%2Fprysm%2Fpull%2F5)%0A%20%20-%20%5BPrysm%3A%20Light-client%20Client%20WIP%5D(https%3A%2F%2Fgithub.com%2Fjinfwhuang%2Fprysm%2Ftree%2Fjin-light%2Fcmd%2Flight-client%23light-client-client)%3A%20An%20independent%20light%20client%20client%0A%20%20-%20%5BPrysm%3A%20light-client%20server%20PR%5D(https%3A%2F%2Fgithub.com%2Fprysmaticlabs%2Fprysm%2Fpull%2F10034)%3A%20a%20feature%20PR%20that%20implements%20the%20basic%20production%20level%20changes%20to%20Prysm%20to%20comply%20as%20a%20light-client%20server%20to%20begin%20serving%20light%20client%20requests%0A-%20Harmony%20Merkle%20Mount%20Range%0A%20%20-%20Harmony%20%5BMMR%20PR%20Review%5D(https%3A%2F%2Fgithub.com%2Fharmony-one%2Fharmony%2Fpull%2F3872)%20and%20%5Blatest%20PR%5D(https%3A%2F%2Fgithub.com%2Fharmony-one%2Fharmony%2Fpull%2F4198%2Ffiles)%20uses%20Merkle%20Mountain%20Ranges%20to%20facilitate%20light%20client%20development%20against%20Harmony's%20sharded%20Proof%20of%20Stake%20Chain%0A%0A%23%23%20Appendices%0A%0A%23%23%23%20Appendix%20A%20-%20Ethereum%20to%20NEAR%20block%20propagation%20components%0A%0A-%20%5BEthClientContract%20Wrapper%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Fblob%2Fmaster%2Feth2near%2Fcontract_wrapper%2Fsrc%2Feth_client_contract.rs)%3A%20supports%20%5Beth2-client%20contract%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Fblob%2Fmaster%2Fcontracts%2Fnear%2Feth2-client%2Fsrc%2Flib.rs)%20functions%20%60impl%20EthClientContractTrait%20for%20EthClientContract%60%0A%20%20-%20%60fn%20get_last_submitted_slot(%26self)%20-%3E%20u64%60%0A%20%20-%20%60fn%20is_known_block(%26self%2C%20execution_block_hash%3A%20%26H256)%20-%3E%20Result%3Cbool%2C%20Box%3Cdyn%20Error%3E%3E%60%0A%20%20-%20%60fn%20send_light_client_update(%26mut%20self%2C%20light_client_update%3A%20LightClientUpdate%2C)%20-%3E%20Result%3CFinalExecutionOutcomeView%2C%20Box%3Cdyn%20Error%3E%3E%60%0A%20%20-%20%60fn%20get_finalized_beacon_block_hash(%26self)%20-%3E%20Result%3CH256%2C%20Box%3Cdyn%20Error%3E%3E%60%0A%20%20-%20%60fn%20get_finalized_beacon_block_slot(%26self)%20-%3E%20Result%3Cu64%2C%20Box%3Cdyn%20Error%3E%3E%60%0A%20%20-%20%60fn%20send_headers(%26mut%20self%2C%20headers%3A%20%26%5BBlockHeader%5D%2C%20end_slot%3A%20u64%2C)%20-%3E%20Result%3CFinalExecutionOutcomeView%2C%20Box%3Cdyn%20std%3A%3Aerror%3A%3AError%3E%3E%60%0A%20%20-%20%60fn%20get_min_deposit(%26self)%20-%3E%20Result%3CBalance%2C%20Box%3Cdyn%20Error%3E%3E%60%0A%20%20-%20%60fn%20register_submitter(%26self)%20-%3E%20Result%3CFinalExecutionOutcomeView%2C%20Box%3Cdyn%20Error%3E%3E%60%0A%20%20-%20%60fn%20is_submitter_registered(%26self%2Caccount_id%3A%20Option%3CAccountId%3E%2C)%20-%3E%20Result%3Cbool%2C%20Box%3Cdyn%20Error%3E%3E%60%0A%20%20-%20%60fn%20get_light_client_state(%26self)%20-%3E%20Result%3CLightClientState%2C%20Box%3Cdyn%20Error%3E%3E%60%0A%20%20-%20%60fn%20get_num_of_submitted_blocks_by_account(%26self)%20-%3E%20Result%3Cu32%2C%20Box%3Cdyn%20Error%3E%3E%60%0A%20%20-%20%60fn%20get_max_submitted_blocks_by_account(%26self)%20-%3E%20Result%3Cu32%2C%20Box%3Cdyn%20Error%3E%3E%60%0A-%20%5Beth2-client%20contract%20storage%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Fblob%2Fmaster%2Fcontracts%2Fnear%2Feth2-client%2Fsrc%2Flib.rs)%3A%0A%20%20-%20High%20level%20storage%20overview%0A%20%20-%20provides%20the%20%60Eth2Client%60%20public%20data%20stucture%0A%0A%20%20%20%20%60%60%60%0A%20%20%20%20pub%20struct%20Eth2Client%20%7B%0A%20%20%20%20%20%20%20%20%2F%2F%2F%20If%20set%2C%20only%20light%20client%20updates%20by%20the%20trusted%20signer%20will%20be%20accepted%0A%20%20%20%20%20%20%20%20trusted_signer%3A%20Option%3CAccountId%3E%2C%0A%20%20%20%20%20%20%20%20%2F%2F%2F%20Mask%20determining%20all%20paused%20functions%0A%20%20%20%20%20%20%20%20paused%3A%20Mask%2C%0A%20%20%20%20%20%20%20%20%2F%2F%2F%20Whether%20the%20client%20validates%20the%20updates.%0A%20%20%20%20%20%20%20%20%2F%2F%2F%20Should%20only%20be%20set%20to%20%60false%60%20for%20debugging%2C%20testing%2C%20and%20diagnostic%20purposes%0A%20%20%20%20%20%20%20%20validate_updates%3A%20bool%2C%0A%20%20%20%20%20%20%20%20%2F%2F%2F%20Whether%20the%20client%20verifies%20BLS%20signatures.%0A%20%20%20%20%20%20%20%20verify_bls_signatures%3A%20bool%2C%0A%20%20%20%20%20%20%20%20%2F%2F%2F%20We%20store%20the%20hashes%20of%20the%20blocks%20for%20the%20past%20%60hashes_gc_threshold%60%20headers.%0A%20%20%20%20%20%20%20%20%2F%2F%2F%20Events%20that%20happen%20past%20this%20threshold%20cannot%20be%20verified%20by%20the%20client.%0A%20%20%20%20%20%20%20%20%2F%2F%2F%20It%20is%20desirable%20that%20this%20number%20is%20larger%20than%207%20days'%20worth%20of%20headers%2C%20which%20is%20roughly%0A%20%20%20%20%20%20%20%20%2F%2F%2F%2051k%20Ethereum%20blocks.%20So%20this%20number%20should%20be%2051k%20in%20production.%0A%20%20%20%20%20%20%20%20hashes_gc_threshold%3A%20u64%2C%0A%20%20%20%20%20%20%20%20%2F%2F%2F%20Network.%20e.g.%20mainnet%2C%20kiln%0A%20%20%20%20%20%20%20%20network%3A%20Network%2C%0A%20%20%20%20%20%20%20%20%2F%2F%2F%20Hashes%20of%20the%20finalized%20execution%20blocks%20mapped%20to%20their%20numbers.%20Stores%20up%20to%20%60hashes_gc_threshold%60%20entries.%0A%20%20%20%20%20%20%20%20%2F%2F%2F%20Execution%20block%20number%20-%3E%20execution%20block%20hash%0A%20%20%20%20%20%20%20%20finalized_execution_blocks%3A%20LookupMap%3Cu64%2C%20H256%3E%2C%0A%20%20%20%20%20%20%20%20%2F%2F%2F%20All%20unfinalized%20execution%20blocks'%20headers%20hashes%20mapped%20to%20their%20%60HeaderInfo%60.%0A%20%20%20%20%20%20%20%20%2F%2F%2F%20Execution%20block%20hash%20-%3E%20ExecutionHeaderInfo%20object%0A%20%20%20%20%20%20%20%20unfinalized_headers%3A%20UnorderedMap%3CH256%2C%20ExecutionHeaderInfo%3E%2C%0A%20%20%20%20%20%20%20%20%2F%2F%2F%20%60AccountId%60s%20mapped%20to%20their%20number%20of%20submitted%20headers.%0A%20%20%20%20%20%20%20%20%2F%2F%2F%20Submitter%20account%20-%3E%20Num%20of%20submitted%20headers%0A%20%20%20%20%20%20%20%20submitters%3A%20LookupMap%3CAccountId%2C%20u32%3E%2C%0A%20%20%20%20%20%20%20%20%2F%2F%2F%20Max%20number%20of%20unfinalized%20blocks%20allowed%20to%20be%20stored%20by%20one%20submitter%20account%0A%20%20%20%20%20%20%20%20%2F%2F%2F%20This%20value%20should%20be%20at%20least%2032%20blocks%20(1%20epoch)%2C%20but%20the%20recommended%20value%20is%201024%20(32%20epochs)%0A%20%20%20%20%20%20%20%20max_submitted_blocks_by_account%3A%20u32%2C%0A%20%20%20%20%20%20%20%20%2F%2F%20The%20minimum%20balance%20that%20should%20be%20attached%20to%20register%20a%20new%20submitter%20account%0A%20%20%20%20%20%20%20%20min_storage_balance_for_submitter%3A%20Balance%2C%0A%20%20%20%20%20%20%20%20%2F%2F%2F%20Light%20client%20state%0A%20%20%20%20%20%20%20%20finalized_beacon_header%3A%20ExtendedBeaconBlockHeader%2C%0A%20%20%20%20%20%20%20%20finalized_execution_header%3A%20LazyOption%3CExecutionHeaderInfo%3E%2C%0A%20%20%20%20%20%20%20%20current_sync_committee%3A%20LazyOption%3CSyncCommittee%3E%2C%0A%20%20%20%20%20%20%20%20next_sync_committee%3A%20LazyOption%3CSyncCommittee%3E%2C%0A%20%20%20%20%7D%0A%20%20%20%20%60%60%60%0A%0A-%20%5Beth2-client%20dependencies%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Fblob%2Fmaster%2Fcontracts%2Fnear%2Feth2-client%2FCargo.toml)%20relys%20heavily%20on%20the%20%5Blighthouse%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Flighthouse)%20codebase%20for%20it's%20consensus%20and%20cryptogrphic%20primitives.%20See%20%5BCryptographic%20Primitives%5D(%23cryptographic-primitives)%20for%20more%20information.%0A%20%20-%20%60ethereum-types%20%3D%20%220.9.2%22%60%0A%20%20-%20%60eth-types%20%3D%20%20%7B%20path%20%3D%20%22..%2Feth-types%22%20%7D%60%0A%20%20-%20%60eth2-utility%20%3D%20%20%7B%20path%20%3D%20%22..%2Feth2-utility%22%20%7D%60%0A%20%20-%20%60tree_hash%20%3D%20%7B%20git%20%3D%20%22https%3A%2F%2Fgithub.com%2Faurora-is-near%2Flighthouse.git%22%2C%20rev%20%3D%20%22b624c3f0d3c5bc9ea46faa14c9cb2d90ee1e1dec%22%20%7D%60%0A%20%20-%20%60merkle_proof%20%3D%20%7B%20git%20%3D%20%22https%3A%2F%2Fgithub.com%2Faurora-is-near%2Flighthouse.git%22%2C%20rev%20%3D%20%22b624c3f0d3c5bc9ea46faa14c9cb2d90ee1e1dec%22%20%7D%60%0A%20%20-%20%60bls%20%3D%20%7B%20git%20%3D%20%22https%3A%2F%2Fgithub.com%2Faurora-is-near%2Flighthouse.git%22%2C%20optional%20%3D%20true%2C%20rev%20%3D%20%22b624c3f0d3c5bc9ea46faa14c9cb2d90ee1e1dec%22%2C%20default-features%20%3D%20false%2C%20features%20%3D%20%5B%22milagro%22%5D%7D%60%0A%20%20-%20%60admin-controlled%20%3D%20%20%7B%20path%20%3D%20%22..%2Fadmin-controlled%22%20%7D%60%0A%20%20-%20%60near-sdk%20%3D%20%224.0.0%22%60%0A%20%20-%20%60borsh%20%3D%20%220.9.3%22%60%0A%20%20-%20%60bitvec%20%3D%20%221.0.0%22%60%0A%0A-%20%5Beth2-client%20contract%20functions%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Fblob%2Fmaster%2Fcontracts%2Fnear%2Feth2-client%2Fsrc%2Flib.rs)%3A%20provides%20the%20following%20functions%20in%20%60impl%20Eth2Client%60%0A%20%20-%20%60fn%20validate_light_client_update(%26self%2C%20update%3A%20%26LightClientUpdate)%60%0A%20%20-%20%60fn%20verify_finality_branch(%26self%2C%20update%3A%20%26LightClientUpdate%2C%20finalized_period%3A%20u64)%60%0A%20%20-%20%60fn%20verify_bls_signatures(%26self%2C%20update%3A%20%26LightClientUpdate%2C%20sync_committee_bits%3A%20BitVec%3Cu8%3E%2C%20finalized_period%3A%20u64%2C)%60%0A%20%20-%20%60fn%20update_finalized_header(%26mut%20self%2C%20finalized_header%3A%20ExtendedBeaconBlockHeader)%60%0A%20%20-%20%60fn%20commit_light_client_update(%26mut%20self%2C%20update%3A%20LightClientUpdate)%60%0A%20%20-%20%60fn%20gc_finalized_execution_blocks(%26mut%20self%2C%20mut%20header_number%3A%20u64)%60%0A%20%20-%20%60fn%20update_submitter(%26mut%20self%2C%20submitter%3A%20%26AccountId%2C%20value%3A%20i64)%60%0A%20%20-%20%60fn%20is_light_client_update_allowed(%26self)%60%0A-%20%5BEth2NearRelay%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Fblob%2Fmaster%2Feth2near%2Feth2near-block-relay-rs%2Fsrc%2Feth2near_relay.rs%23L84)%3A%20has%20the%20following%20public%20structure%0A%0A%20%20%60%60%60%0A%20%20pub%20struct%20Eth2NearRelay%20%7B%0A%20%20%20%20%20%20beacon_rpc_client%3A%20BeaconRPCClient%2C%0A%20%20%20%20%20%20eth1_rpc_client%3A%20Eth1RPCClient%2C%0A%20%20%20%20%20%20near_rpc_client%3A%20NearRPCClient%2C%0A%20%20%20%20%20%20eth_client_contract%3A%20Box%3Cdyn%20EthClientContractTrait%3E%2C%0A%20%20%20%20%20%20headers_batch_size%3A%20u64%2C%0A%20%20%20%20%20%20ethereum_network%3A%20String%2C%0A%20%20%20%20%20%20interval_between_light_client_updates_submission_in_epochs%3A%20u64%2C%0A%20%20%20%20%20%20max_blocks_for_finalization%3A%20u64%2C%0A%20%20%20%20%20%20near_network_name%3A%20String%2C%0A%20%20%20%20%20%20last_slot_searcher%3A%20LastSlotSearcher%2C%0A%20%20%20%20%20%20terminate%3A%20bool%2C%0A%20%20%20%20%20%20submit_only_finalized_blocks%3A%20bool%2C%0A%20%20%20%20%20%20next_light_client_update%3A%20Option%3CLightClientUpdate%3E%2C%0A%20%20%20%20%20%20sleep_time_on_sync_secs%3A%20u64%2C%0A%20%20%20%20%20%20sleep_time_after_submission_secs%3A%20u64%2C%0A%20%20%20%20%20%20max_submitted_blocks_by_account%3A%20u32%2C%0A%20%20%7D%0A%20%20%60%60%60%0A%0A-%20%5BEth2NearRelay%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Fblob%2Fmaster%2Feth2near%2Feth2near-block-relay-rs%2Fsrc%2Feth2near_relay.rs%23L103)%3A%20Implements%20the%20following%20functions%0A%20%20-%20%60fn%20get_max_slot_for_submission(%26self)%20-%3E%20Result%3Cu64%2C%20Box%3Cdyn%20Error%3E%3E%60%0A%20%20-%20%60fn%20get_last_eth2_slot_on_near(%26mut%20self%2C%20max_slot%3A%20u64)%20-%3E%20Result%3Cu64%2C%20Box%3Cdyn%20Error%3E%3E%60%0A%20%20-%20%60fn%20get_last_finalized_slot_on_near(%26self)%20-%3E%20Result%3Cu64%2C%20Box%3Cdyn%20Error%3E%3E%60%0A%20%20-%20%60fn%20get_last_finalized_slot_on_eth(%26self)%20-%3E%20Result%3Cu64%2C%20Box%3Cdyn%20Error%3E%3E%60%0A%20%20-%20**%60pub%20fn%20run(%26mut%20self%2C%20max_iterations%3A%20Option%3Cu64%3E)%60**%0A%20%20-%20%60fn%20wait_for_synchronization(%26self)%20-%3E%20Result%3C()%2C%20Box%3Cdyn%20Error%3E%3E%60%0A%20%20-%20%60fn%20get_light_client_update_from_file(config%3A%20%26Config%2C%20beacon_rpc_client%3A%20%26BeaconRPCClient%2C)%20-%3E%20Result%3COption%3CLightClientUpdate%3E%2C%20Box%3Cdyn%20Error%3E%3E%60%0A%20%20-%20%60fn%20set_terminate(%26mut%20self%2C%20iter_id%3A%20u64%2C%20max_iterations%3A%20Option%3Cu64%3E)%60%0A%20%20-%20%60fn%20get_execution_blocks_between(%26self%2C%20start_slot%3A%20u64%2C%20last_eth2_slot_on_eth_chain%3A%20u64%2C)%20-%3E%20Result%3C(Vec%3CBlockHeader%3E%2C%20u64)%2C%20Box%3Cdyn%20Error%3E%3E%60%0A%20%20-%20%60fn%20submit_execution_blocks(%26mut%20self%2C%20headers%3A%20Vec%3CBlockHeader%3E%2C%20current_slot%3A%20u64%2Clast_eth2_slot_on_near%3A%20%26mut%20u64%2C)%60%0A%20%20-%20%60fn%20verify_bls_signature_for_finality_update(%26mut%20self%2C%20light_client_update%3A%20%26LightClientUpdate%2C)%20-%3E%20Result%3Cbool%2C%20Box%3Cdyn%20Error%3E%3E%60%0A%20%20-%20%60fn%20get_execution_block_by_slot(%26self%2C%20slot%3A%20u64)%20-%3E%20Result%3CBlockHeader%2C%20Box%3Cdyn%20Error%3E%3E%60%0A%0A-%20%5BEth2NearRelay%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Fblob%2Fmaster%2Feth2near%2Feth2near-block-relay-rs%2Fsrc%2Feth2near_relay.rs%23L461)%3A%20has%20a%20second%20implementation%20of%20functions%20for%20submitting%20light%20client%20updates%0A%20%20-%20%60fn%20is_enough_blocks_for_light_client_update(%26self%2C%20last_submitted_slot%3A%20u64%2Clast_finalized_slot_on_near%3A%20u64%2C%20last_finalized_slot_on_eth%3A%20u64%2C)%20-%3E%20bool%60%0A%20%20-%20%60fn%20is_shot_run_mode(%26self)%20-%3E%20bool%60%0A%20%20-%20%60fn%20send_light_client_updates_with_checks(%26mut%20self%2C%20last_submitted_slot%3A%20u64)%20-%3E%20bool%60%0A%20%20-%20%60fn%20send_light_client_updates(%26mut%20self%2C%20last_submitted_slot%3A%20u64%2C%20last_finalized_slot_on_near%3A%20u64%2C%20last_finalized_slot_on_eth%3A%20u64%2C)%60%0A%20%20-%20%60fn%20send_light_client_update_from_file(%26mut%20self%2C%20last_submitted_slot%3A%20u64)%60%0A%20%20-%20%60fn%20send_regular_light_client_update(%26mut%20self%2C%20last_finalized_slot_on_eth%3A%20u64%2Clast_finalized_slot_on_near%3A%20u64%2C)%60%0A%20%20-%20%60fn%20get_attested_slot(%26mut%20self%2C%20last_finalized_slot_on_near%3A%20u64%2C)%20-%3E%20Result%3Cu64%2C%20Box%3Cdyn%20Error%3E%3E%60%0A%20%20-%20%60fn%20send_hand_made_light_client_update(%26mut%20self%2C%20last_finalized_slot_on_near%3A%20u64)%60%0A%20%20-%20%60fn%20send_specific_light_client_update(%26mut%20self%2C%20light_client_update%3A%20LightClientUpdate)%60%0A%0A-%20%5Beth2-contract-init%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Ftree%2Fmaster%2Feth2near%2Feth2-contract-init)%20includes%20(but%20not%20limited%20to)%20the%20following%20additional%20components%0A%20%20-%20%5Binit_contract.rs%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Fblob%2Fmaster%2Feth2near%2Feth2-contract-init%2Fsrc%2Finit_contract.rs)%3A%20Verifies%20light%20client%20snapshot%20and%20initializes%20the%20Ethereum%20Light%20Contract%20on%20Near.%0A%20%20%20%20-%20%60pub%20fn%20verify_light_client_snapshot(block_root%3A%20String%2C%20light_client_snapshot%3A%20%26LightClientSnapshotWithProof%2C)%20-%3E%20bool%60%3A%20Verifies%20the%20light%20client%20by%20checking%20the%20snapshot%20format%20getting%20the%20current%20consensus%20branch%20and%20verifying%20it%20via%20a%20merkle%20proof.%0A%20%20%20%20-%20%60pub%20fn%20init_contract(config%3A%20%26Config%2C%20eth_client_contract%3A%20%26mut%20EthClientContract%2C%20mut%20init_block_root%3A%20String%2C)%20-%3E%20Result%3C()%2C%20Box%3Cdyn%20std%3A%3Aerror%3A%3AError%3E%3E%60%3A%20Initializes%20the%20Ethereum%20Light%20Client%20Contract%20on%20Near.%0A-%20%5Beth_rpc_client%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Ftree%2Fmaster%2Feth2near%2Feth_rpc_client)%20includes%20(but%20not%20limited%20to)%20the%20following%20additional%20components%0A%20%20-%20%5Beth1_rpc_client.rs%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Fblob%2Fmaster%2Feth2near%2Feth2near-block-relay-rs%2Fsrc%2Feth1_rpc_client.rs)%3A%20Is%20used%20to%20get%20block%20headers%20and%20check%20sync%20status.%20It%20has%20the%20following%20functions%0A%20%20%20%20-%20%60pub%20fn%20new(endpoint_url%3A%20%26str)%20-%3E%20Self%60%0A%20%20%20%20-%20%60pub%20fn%20get_block_header_by_number(%26self%2C%20number%3A%20u64)%20-%3E%20Result%3CBlockHeader%2C%20Box%3Cdyn%20Error%3E%3E%60%0A%20%20%20%20-%20%60pub%20fn%20is_syncing(%26self)%20-%3E%20Result%3Cbool%2C%20Box%3Cdyn%20Error%3E%3E%60%0A%20%20-%20%5Bexecution_block_proof.rs%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Fblob%2Fmaster%2Feth2near%2Feth2near-block-relay-rs%2Fsrc%2Fexecution_block_proof.rs)%3A%20%60ExecutionBlockProof%60%20contains%20a%20%60block_hash%60%20(execution%20block)%20and%20a%20proof%20of%20its%20inclusion%20in%20the%20%60BeaconBlockBody%60%20tree%20hash.%20The%20%60block_hash%60%20is%20the%2012th%20field%20in%20execution_payload%2C%20which%20is%20the%209th%20field%20in%20%60BeaconBlockBody%60.%20The%20first%204%20elements%20in%20proof%20correspondent%20to%20the%20proof%20of%20inclusion%20of%20%60block_hash%60%20in%20Merkle%20tree%20built%20for%20%60ExecutionPayload%60.%20The%20last%204%20elements%20of%20the%20proof%20of%20%60ExecutionPayload%60%20in%20the%20Merkle%20tree%20are%20built%20on%20high-level%20%60BeaconBlockBody%60%20fields.%20The%20proof%20starts%20from%20the%20leaf.%20It%20has%20the%20following%20structure%20and%20functions%0A%20%20%20%20-%20%60pub%20struct%20ExecutionBlockProof%20%7Bblock_hash%3A%20H256%2C%20proof%3A%20%5BH256%3B%20Self%3A%3APROOF_SIZE%5D%2C%7D%60%0A%20%20%20%20-%20%60pub%20fn%20construct_from_raw_data(block_hash%3A%20%26H256%2C%20proof%3A%20%26%5BH256%3B%20Self%3A%3APROOF_SIZE%5D)%20-%3E%20Self%60%0A%20%20%20%20-%20%60pub%20fn%20construct_from_beacon_block_body(beacon_block_body%3A%20%26BeaconBlockBody%3CMainnetEthSpec%3E%2C)%20-%3E%20Result%3CSelf%2C%20Box%3Cdyn%20Error%3E%3E%60%0A%20%20%20%20-%20%60pub%20fn%20get_proof(%26self)%20-%3E%20%5BH256%3B%20Self%3A%3APROOF_SIZE%5D%60%0A%20%20%20%20-%20%60pub%20fn%20get_execution_block_hash(%26self)%20-%3E%20H256%60%0A%20%20%20%20-%20%60pub%20fn%20verify_proof_for_hash(%26self%2C%20beacon_block_body_hash%3A%20%26H256%2C)%20-%3E%20Result%3Cbool%2C%20IncorrectBranchLength%3E%60%0A%20%20%20%20-%20%60fn%20merkle_root_from_branch(leaf%3A%20H256%2C%20branch%3A%20%26%5BH256%5D%2C%20depth%3A%20usize%2C%20index%3A%20usize%2C)%20-%3E%20Result%3CH256%2C%20IncorrectBranchLength%3E%60%0A%20%20-%20%5Bbeacon_block_body_merkle_tree.rs%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Fblob%2Fmaster%2Feth2near%2Feth_rpc_client%2Fsrc%2Fbeacon_block_body_merkle_tree.rs)%3A%20implements%20merkle%20trees%20for%20the%20Beacon%20and%20the%20ExecutionPayload%0A%20%20%20%20-%20%60BeaconBlockBodyMerkleTree%60%20is%20built%20on%20the%20%60BeaconBlockBody%60%20data%20structure%2C%20where%20the%20leaves%20of%20the%20Merkle%20Tree%20are%20the%20hashes%20of%20the%20high-level%20fields%20of%20the%20%60BeaconBlockBody%60.%20The%20hashes%20of%20each%20element%20are%20produced%20by%20using%20%60ssz%60%20serialization.%0A%20%20%20%20-%20%60ExecutionPayloadMerkleTree%60%20is%20a%20built%20on%20the%20%60ExecutionPayload%60%20data%20structure%2C%20where%20the%20leaves%20of%20the%20Merkle%20Tree%20are%20the%20hashes%20of%20the%20high-level%20fields%20of%20the%20%60ExecutionPayload%60.%20The%20hashes%20of%20each%20element%20are%20produced%20by%20using%20%60ssz%60%20serialization.%20%60ExecutionPayload%60%20is%20one%20of%20the%20field%20in%20BeaconBlockBody.%20The%20hash%20of%20the%20root%20of%20%60ExecutionPlayloadMerkleTree%60%20is%20the%209th%20leaf%20in%20BeaconBlockBody%20Merkle%20Tree.%0A%20%20-%20%5Bbeacon_rpc_client.rs%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Fblob%2Fmaster%2Feth2near%2Feth_rpc_client%2Fsrc%2Fbeacon_rpc_client.rs)%3A%20allows%20getting%20beacon%20block%20body%2C%20beacon%20block%20header%20and%20light%20client%20updates%20using%20%5BBeacon%20RPC%20API%5D(https%3A%2F%2Fethereum.github.io%2Fbeacon-APIs%2F).%20It%20has%20the%20following%20functions%0A%20%20%20%20-%20%60pub%20fn%20new(endpoint_url%3A%20%26str%2C%20timeout_seconds%3A%20u64%2C%20timeout_state_seconds%3A%20u64)%20-%3E%20Self%60%3A%20Creates%20%60BeaconRPCClient%60%20for%20the%20given%20BeaconAPI%20%60endpoint_url%60%0A%20%20%20%20-%20%60pub%20fn%20get_beacon_block_body_for_block_id(%26self%2C%20block_id%3A%20%26str%2C)%20-%3E%20Result%3CBeaconBlockBody%3CMainnetEthSpec%3E%2C%20Box%3Cdyn%20Error%3E%3E%60%3A%20Returns%20%60BeaconBlockBody%60%20struct%20for%20the%20given%20%60block_id%60.%20It%20uses%20the%20following%20arguments%0A%20%20%20%20%20%20-%20%60block_id%60%20-%20Block%20identifier.%20Can%20be%20one%20of%3A%20%60%22head%22%20(canonical%20head%20in%20node's%20view)%2C%22genesis%22%2C%20%22finalized%22%2C%20%3Cslot%3E%2C%20%3Chex%20encoded%20blockRoot%20with%200x%20prefix%3E%60(see%20%5Bbeacon-APIs%2F%23%2FBeacon%2FgetBlockV2%5D(https%3A%2F%2Fethereum.github.io%2Fbeacon-APIs%2F%23%2FBeacon%2FgetBlockV2)).%0A%20%20%20%20-%20%60pub%20fn%20get_beacon_block_header_for_block_id(%26self%2C%20block_id%3A%20%26str%2C)%20-%3E%20Result%3Ctypes%3A%3ABeaconBlockHeader%2C%20Box%3Cdyn%20Error%3E%3E%60%3A%20Returns%20%60BeaconBlockHeader%60%20struct%20for%20the%20given%20%60block_id%60.%20It%20uses%20the%20following%20arguments%0A%20%20%20%20%20%20-%20%60block_id%60%20-%20Block%20identifier.%20Can%20be%20one%20of%3A%20%60%22head%22%20(canonical%20head%20in%20node's%20view)%2C%22genesis%22%2C%20%22finalized%22%2C%20%3Cslot%3E%2C%20%3Chex%20encoded%20blockRoot%20with%200x%20prefix%3E%60(see%20%5Bbeacon-APIs%2F%23%2FBeacon%2FgetBlockV2%5D(https%3A%2F%2Fethereum.github.io%2Fbeacon-APIs%2F%23%2FBeacon%2FgetBlockV2)).%0A%20%20%20%20-%20%60pub%20fn%20get_light_client_update(%26self%2C%20period%3A%20u64%2C)%20-%3E%20Result%3CLightClientUpdate%2C%20Box%3Cdyn%20Error%3E%3E%60%3A%20Returns%20%60LightClientUpdate%60%20struct%20for%20the%20given%20%60period%60.%20It%20uses%20the%20following%20arguments%0A%20%20%20%20%20%20-%20%60period%60%20-%20period%20id%20for%20which%20%60LightClientUpdate%60%20is%20fetched.%20On%20Mainnet%2C%20one%20period%20consists%20of%20256%20epochs%2C%20and%20one%20epoch%20consists%20of%2032%20slots%0A%20%20%20%20-%20%60pub%20fn%20get_bootstrap(%26self%2C%20block_root%3A%20String%2C)%20-%3E%20Result%3CLightClientSnapshotWithProof%2C%20Box%3Cdyn%20Error%3E%3E%60%3A%20Fetch%20a%20bootstrapping%20state%20with%20a%20proof%20to%20a%20trusted%20block%20root.%20The%20trusted%20block%20root%20should%20be%20fetched%20with%20similar%20means%20to%20a%20weak%20subjectivity%20checkpoint.%20Only%20block%20roots%20for%20checkpoints%20are%20guaranteed%20to%20be%20available.%0A%20%20%20%20-%20%60pub%20fn%20get_checkpoint_root(%26self)%20-%3E%20Result%3CString%2C%20Box%3Cdyn%20Error%3E%3E%60%0A%20%20%20%20-%20%60pub%20fn%20get_last_finalized_slot_number(%26self)%20-%3E%20Result%3Ctypes%3A%3ASlot%2C%20Box%3Cdyn%20Error%3E%3E%60%3A%20Return%20the%20last%20finalized%20slot%20in%20the%20Beacon%20chain%0A%20%20%20%20-%20%60pub%20fn%20get_last_slot_number(%26self)%20-%3E%20Result%3Ctypes%3A%3ASlot%2C%20Box%3Cdyn%20Error%3E%3E%60%3A%20Return%20the%20last%20slot%20in%20the%20Beacon%20chain%0A%20%20%20%20-%20%60pub%20fn%20get_slot_by_beacon_block_root(%26self%2C%20beacon_block_hash%3A%20H256%2C)%20-%3E%20Result%3Cu64%2C%20Box%3Cdyn%20Error%3E%3E%60%0A%20%20%20%20-%20%60pub%20fn%20get_block_number_for_slot(%26self%2C%20slot%3A%20types%3A%3ASlot)%20-%3E%20Result%3Cu64%2C%20Box%3Cdyn%20Error%3E%3E%60%0A%20%20%20%20-%20%60pub%20fn%20get_finality_light_client_update(%26self)%20-%3E%20Result%3CLightClientUpdate%2C%20Box%3Cdyn%20Error%3E%3E%60%0A%20%20%20%20-%20%60pub%20fn%20get_finality_light_client_update_with_sync_commity_update(%26self%2C)%20-%3E%20Result%3CLightClientUpdate%2C%20Box%3Cdyn%20Error%3E%3E%60%0A%20%20%20%20-%20%60pub%20fn%20get_beacon_state(%26self%2C%20state_id%3A%20%26str%2C)%20-%3E%20Result%3CBeaconState%3CMainnetEthSpec%3E%2C%20Box%3Cdyn%20Error%3E%3E%60%0A%20%20%20%20-%20%60pub%20fn%20is_syncing(%26self)%20-%3E%20Result%3Cbool%2C%20Box%3Cdyn%20Error%3E%3E%60%0A%20%20%20%20-%20%60fn%20get_json_from_client(client%3A%20%26Client%2C%20url%3A%20%26str)%20-%3E%20Result%3CString%2C%20Box%3Cdyn%20Error%3E%3E%60%0A%20%20%20%20-%20%60fn%20get_json_from_raw_request(%26self%2C%20url%3A%20%26str)%20-%3E%20Result%3CString%2C%20Box%3Cdyn%20Error%3E%3E%60%0A%20%20%20%20-%20%60fn%20get_body_json_from_rpc_result(block_json_str%3A%20%26str%2C)%20-%3E%20Result%3Cstd%3A%3Astring%3A%3AString%2C%20Box%3Cdyn%20Error%3E%3E%60%0A%20%20%20%20-%20%60fn%20get_header_json_from_rpc_result(json_str%3A%20%26str%2C)%20-%3E%20Result%3Cstd%3A%3Astring%3A%3AString%2C%20Box%3Cdyn%20Error%3E%3E%60%0A%20%20%20%20-%20%60fn%20get_attested_header_from_light_client_update_json_str(light_client_update_json_str%3A%20%26str%2C)%20-%3E%20Result%3CBeaconBlockHeader%2C%20Box%3Cdyn%20Error%3E%3E%60%0A%20%20%20%20-%20%60fn%20get_sync_aggregate_from_light_client_update_json_str(light_client_update_json_str%3A%20%26str%2C)%20-%3E%20Result%3CSyncAggregate%2C%20Box%3Cdyn%20Error%3E%3E%60%0A%20%20%20%20-%20%60fn%20get_signature_slot(%26self%2C%20light_client_update_json_str%3A%20%26str%2C)%20-%3E%20Result%3CSlot%2C%20Box%3Cdyn%20Error%3E%3E%60%3A%20%60signature_slot%60%20is%20not%20provided%20in%20the%20current%20API.%20The%20slot%20is%20brute-forced%20until%20%60SyncAggregate%60%20in%20%60BeconBlockBody%60%20in%20the%20current%20slot%20is%20equal%20to%20%60SyncAggregate%60%20in%20%60LightClientUpdate%60%0A%20%20%20%20-%20%60fn%20get_finality_update_from_light_client_update_json_str(%26self%2C%20light_client_update_json_str%3A%20%26str%2C)%20-%3E%20Result%3CFinalizedHeaderUpdate%2C%20Box%3Cdyn%20Error%3E%3E%60%0A%20%20%20%20-%20%60fn%20get_sync_committee_update_from_light_client_update_json_str(light_client_update_json_str%3A%20%26str%2C)%20-%3E%20Result%3CSyncCommitteeUpdate%2C%20Box%3Cdyn%20Error%3E%3E%60%0A%20%20%20%20-%20%60pub%20fn%20get_period_for_slot(slot%3A%20u64)%20-%3E%20u64%60%0A%20%20%20%20-%20%60pub%20fn%20get_non_empty_beacon_block_header(%26self%2C%20start_slot%3A%20u64%2C)%20-%3E%20Result%3Ctypes%3A%3ABeaconBlockHeader%2C%20Box%3Cdyn%20Error%3E%3E%60%0A%20%20%20%20-%20%60fn%20check_block_found_for_slot(%26self%2C%20json_str%3A%20%26str)%20-%3E%20Result%3C()%2C%20Box%3Cdyn%20Error%3E%3E%60%0A%20%20-%20%5Bhand_made_finality_light_client_update.rs%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Fblob%2Fmaster%2Feth2near%2Feth_rpc_client%2Fsrc%2Fhand_made_finality_light_client_update.rs)%3A%20Has%20two%20implementations%0A%20%20%20%20-%20The%20first%20implementation%20which%20calls%20functions%20in%20the%20second%0A%20%20%20%20%20%20-%20%60pub%20fn%20get_finality_light_client_update(beacon_rpc_client%3A%20%26BeaconRPCClient%2C%20attested_slot%3A%20u64%2C%20include_next_sync_committee%3A%20bool%2C)%20-%3E%20Result%3CLightClientUpdate%2C%20Box%3Cdyn%20Error%3E%3E%60%0A%20%20%20%20%20%20-%20%60pub%20fn%20get_finality_light_client_update_from_file(beacon_rpc_client%3A%20%26BeaconRPCClient%2C%20file_name%3A%20%26str%2C)%20-%3E%20Result%3CLightClientUpdate%2C%20Box%3Cdyn%20Error%3E%3E%60%0A%20%20%20%20%20%20-%20%60pub%20fn%20get_light_client_update_from_file_with_next_sync_committee(beacon_rpc_client%3A%20%26BeaconRPCClient%2C%20attested_state_file_name%3A%20%26str%2C%20finality_state_file_name%3A%20%26str%2C)%20-%3E%20Result%3CLightClientUpdate%2C%20Box%3Cdyn%20Error%3E%3E%60%0A%20%20%20%20-%20The%20second%20implementation%0A%20%20%20%20%20%20-%20%60fn%20get_attested_slot_with_enough_sync_committee_bits_sum(beacon_rpc_client%3A%20%26BeaconRPCClient%2Cattested_slot%3A%20u64%2C)%20-%3E%20Result%3C(u64%2C%20u64)%2C%20Box%3Cdyn%20Error%3E%3E%60%0A%20%20%20%20%20%20-%20%60fn%20get_state_from_file(file_name%3A%20%26str)%20-%3E%20Result%3CBeaconState%3CMainnetEthSpec%3E%2C%20Box%3Cdyn%20Error%3E%3E%60%0A%20%20%20%20%20%20-%20%60fn%20get_finality_light_client_update_for_state(beacon_rpc_client%3A%20%26BeaconRPCClient%2Cattested_slot%3A%20u64%2C%20signature_slot%3A%20u64%2C%20beacon_state%3A%20BeaconState%3CMainnetEthSpec%3E%2C%20finality_beacon_state%3A%20Option%3CBeaconState%3CMainnetEthSpec%3E%3E%2C)%20-%3E%20Result%3CLightClientUpdate%2C%20Box%3Cdyn%20Error%3E%3E%60%0A%20%20%20%20%20%20-%20%60fn%20get_next_sync_committee(beacon_state%3A%20%26BeaconState%3CMainnetEthSpec%3E%2C)%20-%3E%20Result%3CSyncCommitteeUpdate%2C%20Box%3Cdyn%20Error%3E%3E%60%0A%20%20%20%20%20%20-%20%60fn%20from_lighthouse_beacon_header(beacon_header%3A%20%26BeaconBlockHeader%2C)%20-%3E%20eth_types%3A%3Aeth2%3A%3ABeaconBlockHeader%60%0A%20%20%20%20%20%20-%20%60fn%20get_sync_committee_bits(sync_committee_signature%3A%20%26types%3A%3ASyncAggregate%3CMainnetEthSpec%3E%2C)%20-%3E%20Result%3C%5Bu8%3B%2064%5D%2C%20Box%3Cdyn%20Error%3E%3E%60%0A%20%20%20%20%20%20-%20%60fn%20get_finality_branch(beacon_state%3A%20%26BeaconState%3CMainnetEthSpec%3E%2C)%20-%3E%20Result%3CVec%3CH256%3E%2C%20Box%3Cdyn%20Error%3E%3E%60%0A%20%20%20%20%20%20-%20%60fn%20get_finality_update(finality_header%3A%20%26BeaconBlockHeader%2C%20beacon_state%3A%20%26BeaconState%3CMainnetEthSpec%3E%2C%20finalized_block_body%3A%20%26BeaconBlockBody%3CMainnetEthSpec%3E%2C)%20-%3E%20Result%3CFinalizedHeaderUpdate%2C%20Box%3Cdyn%20Error%3E%3E%60%0A%20%20-%20%5Blight_client_snapshot_with_proof.rs%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Fblob%2Fmaster%2Feth2near%2Feth_rpc_client%2Fsrc%2Flight_client_snapshot_with_proof.rs)%3A%20contains%20the%20structure%20for%20%60LightClientSnapshotWithProof%60%0A%0A%20%20%20%20%20%20%20%20%60%60%60%0A%20%20%20%20%20%20%20%20pub%20struct%20LightClientSnapshotWithProof%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20pub%20beacon_header%3A%20BeaconBlockHeader%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20pub%20current_sync_committee%3A%20SyncCommittee%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20pub%20current_sync_committee_branch%3A%20Vec%3CH256%3E%2C%0A%20%20%20%20%20%20%20%20%7D%0A%20%20%20%20%20%20%20%20%60%60%60%0A%0A-%20%5Beth2near-block-relay-rs%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Ftree%2Fmaster%2Feth2near%2Feth2near-block-relay-rs)%20includes%20(but%20not%20limited%20to)%20the%20following%20additional%20components%0A%20%20-%20%5Bconfig.rs%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Fblob%2Fmaster%2Feth2near%2Feth2near-block-relay-rs%2Fsrc%2Fconfig.rs)%3A%0A%20%20-%20%5Blast_slot_searcher.rs%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Fblob%2Fmaster%2Feth2near%2Feth2near-block-relay-rs%2Fsrc%2Flast_slot_searcher.rs)%3A%20Implementation%20of%20functions%20for%20searching%20last%20slot%20on%20NEAR%20contract.%20Supports%20both%20binary%20and%20linear%20searches.%0A%20%20%20%20-%20%60pub%20fn%20get_last_slot(%26mut%20self%2C%20last_eth_slot%3A%20u64%2C%20beacon_rpc_client%3A%20%26BeaconRPCClient%2C%20eth_client_contract%3A%20%26Box%3Cdyn%20EthClientContractTrait%3E%2C)%20-%3E%20Result%3Cu64%2C%20Box%3Cdyn%20Error%3E%3E%60%0A%20%20%20%20-%20%60n%20binary_slot_search(%26self%2C%20slot%3A%20u64%2C%20finalized_slot%3A%20u64%2C%20last_eth_slot%3A%20u64%2C%20beacon_rpc_client%3A%20%26BeaconRPCClient%2C%20eth_client_contract%3A%20%26Box%3Cdyn%20EthClientContractTrait%3E%2C)%20-%3E%20Result%3Cu64%2C%20Box%3Cdyn%20Error%3E%3E%60%20%3A%20Search%20for%20the%20slot%20before%20the%20first%20unknown%20slot%20on%20NEAR.%20Assumptions%3A%20(1)%20start_slot%20is%20known%20on%20NEAR%20(2)%20last_slot%20is%20unknown%20on%20NEAR.%20Return%20error%20in%20case%20of%20problem%20with%20network%20connection.%0A%20%20%20%20-%20%60fn%20binsearch_slot_forward(%26self%2C%20slot%3A%20u64%2C%20max_slot%3A%20u64%2C%20beacon_rpc_client%3A%20%26BeaconRPCClient%2Ceth_client_contract%3A%20%26Box%3Cdyn%20EthClientContractTrait%3E%2C)%20-%3E%20Result%3Cu64%2C%20Box%3Cdyn%20Error%3E%3E%20%7B%60%3A%20Search%20for%20the%20slot%20before%20the%20first%20unknown%20slot%20on%20NEAR.%20Assumptions%3A%20(1)%20start_slot%20is%20known%20on%20NEAR%20(2)%20last_slot%20is%20unknown%20on%20NEAR.%20Return%20error%20in%20case%20of%20problem%20with%20network%20connection.%0A%20%20%20%20-%20%60fn%20binsearch_slot_range(%26self%2C%20start_slot%3A%20u64%2C%20last_slot%3A%20u64%2C%20beacon_rpc_client%3A%20%26BeaconRPCClient%2C%20eth_client_contract%3A%20%26Box%3Cdyn%20EthClientContractTrait%3E%2C)%20-%3E%20Result%3Cu64%2C%20Box%3Cdyn%20Error%3E%3E%60%3A%20Search%20for%20the%20slot%20before%20the%20first%20unknown%20slot%20on%20NEAR.%20Assumptions%3A%20(1)%20start_slot%20is%20known%20on%20NEAR%20(2)%20last_slot%20is%20unknown%20on%20NEAR.%20Return%20error%20in%20case%20of%20problem%20with%20network%20connection.%0A%20%20%20%20-%20%60fn%20linear_slot_search(%26self%2C%20slot%3A%20u64%2C%20finalized_slot%3A%20u64%2C%20last_eth_slot%3A%20u64%2C%20beacon_rpc_client%3A%20%26BeaconRPCClient%2C%20eth_client_contract%3A%20%26Box%3Cdyn%20EthClientContractTrait%3E%2C)%20-%3E%20Result%3Cu64%2C%20Box%3Cdyn%20Error%3E%3E%60%3A%20Returns%20the%20last%20slot%20known%20with%20block%20known%20on%20NEAR.%20%60Slot%60%20--%20expected%20last%20known%20slot.%20%60finalized_slot%60%20--%20last%20finalized%20slot%20on%20NEAR%2C%20assume%20as%20known%20slot.%20%60last_eth_slot%60%20--%20head%20slot%20on%20Eth.%0A%20%20%20%20-%20%60fn%20linear_search_forward(%26self%2C%20slot%3A%20u64%2C%20max_slot%3A%20u64%2C%20beacon_rpc_client%3A%20%26BeaconRPCClient%2Ceth_client_contract%3A%20%26Box%3Cdyn%20EthClientContractTrait%3E%2C)%20-%3E%20Result%3Cu64%2C%20Box%3Cdyn%20Error%3E%3E%60%3A%20Returns%20the%20slot%20before%20the%20first%20unknown%20block%20on%20NEAR.%20The%20search%20range%20is%20%5Bslot%20..%20max_slot).%20If%20there%20is%20no%20unknown%20block%20in%20this%20range%20max_slot%20-%201%20will%20be%20returned.%20Assumptions%3A%20(1)%20block%20for%20slot%20is%20submitted%20to%20NEAR.%20(2)%20block%20for%20max_slot%20is%20not%20submitted%20to%20NEAR.%0A%20%20%20%20-%20%60fn%20linear_search_backward(%26self%2C%20start_slot%3A%20u64%2C%20last_slot%3A%20u64%2C%20beacon_rpc_client%3A%20%26BeaconRPCClient%2C%20eth_client_contract%3A%20%26Box%3Cdyn%20EthClientContractTrait%3E%2C)%20-%3E%20Result%3Cu64%2C%20Box%3Cdyn%20Error%3E%3E%60%3A%20Returns%20the%20slot%20before%20the%20first%20unknown%20block%20on%20NEAR.%20The%20search%20range%20is%20%5Blast_slot%20..%20start_slot).%20If%20no%20such%20block%20are%20found%20the%20start_slot%20will%20be%20returned.%20Assumptions%3A%20(1)%20block%20for%20start_slot%20is%20submitted%20to%20NEAR%20(2)%20block%20for%20last_slot%20%2B%201%20is%20not%20submitted%20to%20NEAR.%0A%20%20%20%20-%20%60fn%20find_left_non_error_slot(%26self%2C%20left_slot%3A%20u64%2C%20right_slot%3A%20u64%2C%20step%3A%20i8%2C%20beacon_rpc_client%3A%20%26BeaconRPCClient%2C%20eth_client_contract%3A%20%26Box%3Cdyn%20EthClientContractTrait%3E%2C)%20-%3E%20(u64%2C%20bool)%60%3A%20Find%20the%20leftmost%20non-empty%20slot.%20Search%20range%3A%20%5Bleft_slot%2C%20right_slot).%20Returns%20pair%3A%20(1)%20slot_id%20and%20(2)%20is%20this%20block%20already%20known%20on%20Eth%20client%20on%20NEAR.%20Assume%20that%20right_slot%20is%20non-empty%20and%20it's%20block%20were%20submitted%20to%20NEAR%2C%20so%20if%20non%20correspondent%20block%20is%20found%20we%20return%20(right_slot%2C%20false).%0A%20%20%20%20-%20%60fn%20block_known_on_near(%20%26self%2C%20slot%3A%20u64%2C%20beacon_rpc_client%3A%20%26BeaconRPCClient%2Ceth_client_contract%3A%20%26Box%3Cdyn%20EthClientContractTrait%3E%2C)%20-%3E%20Result%3Cbool%2C%20Box%3Cdyn%20Error%3E%3E%60%3A%20Check%20if%20the%20block%20for%20current%20slot%20in%20Eth2%20already%20were%20submitted%20to%20NEAR.%20Returns%20Error%20if%20slot%20doesn't%20contain%20any%20block.%0A%20%20-%20%5Bmain.rs%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Fblob%2Fmaster%2Feth2near%2Feth2near-block-relay-rs%2Fsrc%2Fmain.rs)%3A%20%5BCommand%20Line%20Argument%20Parser%5D(https%3A%2F%2Fdocs.rs%2Fclap%2Flatest%2Fclap%2F)%20used%20to%20run%20the%20Ethereum%20to%20Near%20Block%20Relay.%20It%20contains%20the%20following%20functions%0A%20%20%20%20-%20%60fn%20get_eth_contract_wrapper(config%3A%20%26Config)%20-%3E%20Box%3Cdyn%20ContractWrapper%3E%60%0A%20%20%20%20-%20%60fn%20get_dao_contract_wrapper(config%3A%20%26Config)%20-%3E%20Box%3Cdyn%20ContractWrapper%3E%60%0A%20%20%20%20-%20%60fn%20get_eth_client_contract(config%3A%20%26Config)%20-%3E%20Box%3Cdyn%20EthClientContractTrait%3E%60%0A%20%20%20%20-%20%60fn%20init_log(args%3A%20%26Arguments%2C%20config%3A%20%26Config)%60%0A%20%20%20%20-%20%60fn%20main()%20-%3E%20Result%3C()%2C%20Box%3Cdyn%20std%3A%3Aerror%3A%3AError%3E%3E%60%0A%20%20-%20%5Bnear_rpc_client.rs%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Fblob%2Fmaster%2Feth2near%2Feth2near-block-relay-rs%2Fsrc%2Fnear_rpc_client.rs)%0A%20%20%20%20-%20%60pub%20fn%20new(endpoint_url%3A%20%26str)%20-%3E%20Self%60%0A%20%20%20%20-%20%60pub%20fn%20check_account_exists(%26self%2C%20account_id%3A%20%26str)%20-%3E%20Result%3Cbool%2C%20Box%3Cdyn%20Error%3E%3E%60%0A%20%20%20%20-%20%60pub%20fn%20is_syncing(%26self)%20-%3E%20Result%3Cbool%2C%20Box%3Cdyn%20Error%3E%3E%60%0A%0A%23%23%23%20Appendix%20B%20-%20Ethereum%20Light%20Client%20Finality%20Update%20Verify%20Components%0A%0A%5Bfinality-update-verify%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Ftree%2Fmaster%2Feth2near%2Ffinality-update-verify)%20is%20called%20from%20%5Bfn%20verify_bls_signature_for_finality_update%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Fblob%2Fmaster%2Feth2near%2Feth2near-block-relay-rs%2Fsrc%2Feth2near_relay.rs%23L422)%20to%20verify%20signatures%20as%20part%20of%20light_client%20updates.%20It%20relies%20heavily%20on%20the%20%5Blighthouse%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Flighthouse)%20codebase%20for%20it's%20consensus%20and%20cryptogrphic%20primitives.%20See%20%5BCryptographic%20Primitives%5D(%23cryptographic-primitives)%20for%20more%20information.%0A%0A-%20Dependencies%20in%20%5BCargo.toml%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Fblob%2Fmaster%2Feth2near%2Ffinality-update-verify%2FCargo.toml)%0A%20%20-%20%60eth-types%20%3D%20%7B%20path%20%3D%22..%2F..%2Fcontracts%2Fnear%2Feth-types%2F%22%2C%20features%20%3D%20%5B%22eip1559%22%5D%7D%60%0A%20%20-%20%60bls%20%3D%20%7B%20git%20%3D%20%22https%3A%2F%2Fgithub.com%2Faurora-is-near%2Flighthouse.git%22%2C%20rev%20%3D%20%22b624c3f0d3c5bc9ea46faa14c9cb2d90ee1e1dec%22%20%7D%60%0A%20%20-%20%60eth2-utility%20%20%3D%20%7B%20path%20%3D%22..%2F..%2Fcontracts%2Fnear%2Feth2-utility%22%7D%60%0A%20%20-%20%60tree_hash%20%3D%20%7B%20git%20%3D%20%22https%3A%2F%2Fgithub.com%2Faurora-is-near%2Flighthouse.git%22%2C%20rev%20%3D%20%22b624c3f0d3c5bc9ea46faa14c9cb2d90ee1e1dec%22%20%7D%60%0A%20%20-%20%60types%20%3D%20%20%7B%20git%20%3D%20%22https%3A%2F%2Fgithub.com%2Faurora-is-near%2Flighthouse.git%22%2C%20rev%20%3D%20%22b624c3f0d3c5bc9ea46faa14c9cb2d90ee1e1dec%22%20%7D%60%0A%20%20-%20%60bitvec%20%3D%20%221.0.0%22%60%0A%0A-%20Functions%20in%20%5Blib.rs%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Fblob%2Fmaster%2Feth2near%2Ffinality-update-verify%2Fsrc%2Flib.rs)%0A%20%20-%20%60fn%20h256_to_hash256(hash%3A%20H256)%20-%3E%20Hash256%60%0A%20%20-%20%60fn%20tree_hash_h256_to_eth_type_h256(hash%3A%20tree_hash%3A%3AHash256)%20-%3E%20eth_types%3A%3AH256%60%0A%20%20-%20%60fn%20to_lighthouse_beacon_block_header(bridge_beacon_block_header%3A%20%26BeaconBlockHeader%2C)%20-%3E%20types%3A%3ABeaconBlockHeader%60%0A%20%20-%20%60pub%20fn%20is_correct_finality_update(ethereum_network%3A%20%26str%2C%20light_client_update%3A%20%26LightClientUpdate%2C%20%20%20sync_committee%3A%20SyncCommittee%2C)%20-%3E%20Result%3Cbool%2C%20Box%3Cdyn%20Error%3E%3E%60%0A%0A%23%23%23%20Appendix%20C%20-%20Cryptographic%20Primitives%0A%0AFollowing%20are%20cryptographic%20primitives%20used%20in%20the%20%5Beth2-client%20contract%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Ftree%2Fmaster%2Fcontracts%2Fnear%2Feth2-client)%20and%20%5Bfinality-update-verify%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Ftree%2Fmaster%2Feth2near%2Ffinality-update-verify).%20Many%20are%20from%20the%20%5Blighthouse%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Flighthouse)%20codebase.%20Specifically%20%5Bconsensus%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Flighthouse%2Ftree%2Fstable%2Fconsensus)%20and%20%5Bcrypto%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Flighthouse%2Ftree%2Fstable%2Fcrypto)%20functions.%0A%0ASome%20common%20primitives%0A%0A-%20%5Bbitvec%5D(https%3A%2F%2Fdocs.rs%2Fbitvec%2F1.0.1%2Fbitvec%2F)%3A%20Addresses%20memory%20by%20bits%2C%20for%20packed%20collections%20and%20bitfields%0A-%20%5Beth2_serde_utils%5D(https%3A%2F%2Fdocs.rs%2Feth2_serde_utils%2F0.1.0%2Feth2_serde_utils%2F)%3A%20Serialization%20and%20deserialization%20utilities%20useful%20for%20JSON%20representations%20of%20Ethereum%202.0%20types.%0A-%20%5Beth2_hashing%5D(https%3A%2F%2Fdocs.rs%2Feth2_hashing%2F0.2.0%2Feth2_hashing%2F)%3A%20Hashing%20primitives%20used%20in%20Ethereum%202.0%0A-%20%5Bblst%5D(https%3A%2F%2Fdocs.rs%2Fblst%2F0.3.10%2Fblst%2F)%3A%20The%20blst%20crate%20provides%20a%20rust%20interface%20to%20the%20blst%20BLS12-381%20signature%20library.%0A-%20%5Btree_hash%5D(https%3A%2F%2Fdocs.rs%2Ftree_hash%2F0.4.0%2Ftree_hash%2F)%3A%20Efficient%20Merkle-hashing%20as%20used%20in%20Ethereum%202.0%0A-%20%5Beth2_ssz_types%5D(https%3A%2F%2Fdocs.rs%2Feth2_ssz_types%2F0.2.1%2Fssz_types%2F)%3A%20Provides%20types%20with%20unique%20properties%20required%20for%20SSZ%20serialization%20and%20Merklization.%0A%0ASome%20Primitives%20from%20Lighthouse%0A%0A-%20%5Bbls%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Flighthouse%2Ftree%2Fstable%2Fcrypto%2Fbls)%3A%20%5BBoneh%E2%80%93Lynn%E2%80%93Shacham%5D(https%3A%2F%2Fen.wikipedia.org%2Fwiki%2FBLS_digital_signature)%20digital%20signature%20support%0A%20%20-%20%5Bimpls%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Flighthouse%2Ftree%2Fstable%2Fcrypto%2Fbls%2Fsrc%2Fimpls)%3A%20Implementations%0A%20%20%20%20-%20%5Bblst%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Flighthouse%2Fblob%2Fstable%2Fcrypto%2Fbls%2Fsrc%2Fimpls%2Fblst.rs)%0A%20%20%20%20-%20%5Bfake_crypto%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Flighthouse%2Fblob%2Fstable%2Fcrypto%2Fbls%2Fsrc%2Fimpls%2Ffake_crypto.rs)%0A%20%20%20%20-%20%5Bmilagro%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Flighthouse%2Fblob%2Fstable%2Fcrypto%2Fbls%2Fsrc%2Fimpls%2Fmilagro.rs)%3A%20support%20for%20%5BApache%20Milagro%5D(https%3A%2F%2Fmilagro.apache.org%2Fdocs%2Fmilagro-intro%2F)%0A%20%20%20%20-%20%5Bfunctionality%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Flighthouse%2Ftree%2Fstable%2Fcrypto%2Fbls%2Fsrc)%0A%20%20%20%20%20%20-%20%5Bgeneric_aggregate_public_key%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Flighthouse%2Fblob%2Fstable%2Fcrypto%2Fbls%2Fsrc%2Fgeneric_aggregate_public_key.rs)%0A%20%20%20%20%20%20-%20%5Bgeneric_aggregate_signature%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Flighthouse%2Fblob%2Fstable%2Fcrypto%2Fbls%2Fsrc%2Fgeneric_aggregate_signature.rs)%0A%20%20%20%20%20%20-%20%5Bgeneric_keypair%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Flighthouse%2Fblob%2Fstable%2Fcrypto%2Fbls%2Fsrc%2Fgeneric_keypair.rs)%0A%20%20%20%20%20%20-%20%5Bgeneric_public_key%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Flighthouse%2Fblob%2Fstable%2Fcrypto%2Fbls%2Fsrc%2Fgeneric_public_key.rs)%0A%20%20%20%20%20%20-%20%5Bgeneric_public_key_bytes%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Flighthouse%2Fblob%2Fstable%2Fcrypto%2Fbls%2Fsrc%2Fgeneric_public_key_bytes.rs)%0A%20%20%20%20%20%20-%20%5Bgeneric_secret_key%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Flighthouse%2Fblob%2Fstable%2Fcrypto%2Fbls%2Fsrc%2Fgeneric_secret_key.rs)%0A%20%20%20%20%20%20-%20%5Bgeneric_signature%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Flighthouse%2Fblob%2Fstable%2Fcrypto%2Fbls%2Fsrc%2Fgeneric_signature.rs)%0A%20%20%20%20%20%20-%20%5Bgeneric_signature_bytes%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Flighthouse%2Fblob%2Fstable%2Fcrypto%2Fbls%2Fsrc%2Fgeneric_signature_bytes.rs)%0A%20%20%20%20%20%20-%20%5Bgeneric_signature_set%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Flighthouse%2Fblob%2Fstable%2Fcrypto%2Fbls%2Fsrc%2Fgeneric_signature_set.rs)%0A%20%20%20%20%20%20-%20%5Bget_withdrawal_credentials%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Flighthouse%2Fblob%2Fstable%2Fcrypto%2Fbls%2Fsrc%2Fget_withdrawal_credentials.rs)%0A%20%20%20%20%20%20-%20%5Bzeroize_hash%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Flighthouse%2Fblob%2Fstable%2Fcrypto%2Fbls%2Fsrc%2Fzeroize_hash.rs)%0A-%20%5Bmerkle_proof%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Flighthouse%2Ftree%2Fstable%2Fconsensus%2Fmerkle_proof)%0A-%20%5Btree_hash%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Flighthouse%2Ftree%2Fstable%2Fconsensus%2Ftree_hash)%0A-%20%5Btypes%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Flighthouse%2Ftree%2Fstable%2Fconsensus%2Ftypes%2Fsrc)%3A%20Implements%20Ethereum%202.0%20types%20including%20but%20not%20limited%20to%0A%20%20-%20%5Battestation%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Flighthouse%2Fblob%2Fstable%2Fconsensus%2Ftypes%2Fsrc%2Fattestation.rs)%0A%20%20-%20%5Bbeacon_block%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Flighthouse%2Fblob%2Fstable%2Fconsensus%2Ftypes%2Fsrc%2Fbeacon_block.rs)%0A%20%20-%20%5Bbeacon_committee%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Flighthouse%2Fblob%2Fstable%2Fconsensus%2Ftypes%2Fsrc%2Fbeacon_committee.rs)%0A%20%20-%20%5Bbeacon_state%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Flighthouse%2Fblob%2Fstable%2Fconsensus%2Ftypes%2Fsrc%2Fbeacon_state.rs)%0A%20%20-%20%5Bbuilder_bid%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Flighthouse%2Fblob%2Fstable%2Fconsensus%2Ftypes%2Fsrc%2Fbuilder_bid.rs)%0A%20%20-%20%5Bchain_spec%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Flighthouse%2Fblob%2Fstable%2Fconsensus%2Ftypes%2Fsrc%2Fchain_spec.rs)%0A%20%20-%20%5Bcheckpoint%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Flighthouse%2Fblob%2Fstable%2Fconsensus%2Ftypes%2Fsrc%2Fcheckpoint.rs)%0A%20%20-%20%5Bcontribution_and_proof%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Flighthouse%2Fblob%2Fstable%2Fconsensus%2Ftypes%2Fsrc%2Fcontribution_and_proof.rs)%3A%20A%20Validators%20aggregate%20sync%20committee%20contribution%20and%20selection%20proof.%0A%20%20-%20%5Bdeposit%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Flighthouse%2Fblob%2Fstable%2Fconsensus%2Ftypes%2Fsrc%2Fdeposit.rs)%3A%20A%20deposit%20to%20potentially%20become%20a%20beacon%20chain%20validator.%0A%20%20-%20%5Benr_fork_id%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Flighthouse%2Fblob%2Fstable%2Fconsensus%2Ftypes%2Fsrc%2Fenr_fork_id.rs)%3A%20Specifies%20a%20fork%20which%20allows%20nodes%20to%20identify%20each%20other%20on%20the%20network.%20This%20fork%20is%20used%20in%20a%20nodes%20local%20ENR.%0A%20%20-%20%5Beth_spec%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Flighthouse%2Fblob%2Fstable%2Fconsensus%2Ftypes%2Fsrc%2Feth_spec.rs)%3A%20Ethereum%20Foundation%20specifications.%0A%20%20-%20%5Bexecution_block_hash%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Flighthouse%2Fblob%2Fstable%2Fconsensus%2Ftypes%2Fsrc%2Fexecution_block_hash.rs)%0A%20%20-%20%5Bexecution_payload%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Flighthouse%2Fblob%2Fstable%2Fconsensus%2Ftypes%2Fsrc%2Fexecution_payload.rs)%0A%20%20-%20%5Bfork%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Flighthouse%2Fblob%2Fstable%2Fconsensus%2Ftypes%2Fsrc%2Ffork.rs)%3A%20Specifies%20a%20fork%20of%20the%20%60BeaconChain%60%2C%20to%20prevent%20replay%20attacks.%0A%20%20-%20%5Bfree_attestation%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Flighthouse%2Fblob%2Fstable%2Fconsensus%2Ftypes%2Fsrc%2Ffree_attestation.rs)%3A%20Note%3A%20this%20object%20does%20not%20actually%20exist%20in%20the%20spec.%20We%20use%20it%20for%20managing%20attestations%20that%20have%20not%20been%20aggregated.%0A%20%20-%20%5Bpayload%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Flighthouse%2Fblob%2Fstable%2Fconsensus%2Ftypes%2Fsrc%2Fpayload.rs)%0A%20%20-%20%5Bsigned_aggregate_and_proof%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Flighthouse%2Fblob%2Fstable%2Fconsensus%2Ftypes%2Fsrc%2Fsigned_aggregate_and_proof.rs)%3A%20A%20Validators%20signed%20aggregate%20proof%20to%20publish%20on%20the%20%60beacon_aggregate_and_proof%60%20gossipsub%20topic.%0A%20%20-%20%5Bsigned_beacon_block%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Flighthouse%2Fblob%2Fstable%2Fconsensus%2Ftypes%2Fsrc%2Fsigned_beacon_block.rs)%3A%20A%20%60BeaconBlock%60%20and%20a%20signature%20from%20its%20proposer.%0A%20%20-%20%5Bslot_data%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Flighthouse%2Fblob%2Fstable%2Fconsensus%2Ftypes%2Fsrc%2Fslot_data.rs)%3A%20A%20trait%20providing%20a%20%60Slot%60%20getter%20for%20messages%20that%20are%20related%20to%20a%20single%20slot.%20Useful%20in%20making%20parts%20of%20attestation%20and%20sync%20committee%20processing%20generic.%0A%20%20-%20%5Bslot_epoch%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Flighthouse%2Fblob%2Fstable%2Fconsensus%2Ftypes%2Fsrc%2Fslot_epoch.rs)%3A%20The%20%60Slot%60%20and%20%60Epoch%60%20types%20are%20defined%20as%20new%20types%20over%20u64%20to%20enforce%20type-safety%20between%20the%20two%20types.%20Note%3A%20Time%20on%20Ethereum%202.0%20Proof%20of%20Stake%20is%20divided%20into%20slots%20and%20epochs.%20One%20slot%20is%2012%20seconds.%20One%20epoch%20is%206.4%20minutes%2C%20consisting%20of%2032%20slots.%20One%20block%20can%20be%20created%20for%20each%20slot.%0A%20%20-%20%5Bsync_aggregate%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Flighthouse%2Fblob%2Fstable%2Fconsensus%2Ftypes%2Fsrc%2Fsync_aggregate.rs)%3A%20Create%20a%20%60SyncAggregate%60%20from%20a%20slice%20of%20%60SyncCommitteeContribution%60s.%20Equivalent%20to%20%60process_sync_committee_contributions%60%20from%20the%20spec.%0A%20%20-%20%5Bsync_committee%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Flighthouse%2Fblob%2Fstable%2Fconsensus%2Ftypes%2Fsrc%2Fsync_committee.rs)%0A%20%20-%20%5Btree_hash_impls%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Flighthouse%2Fblob%2Fstable%2Fconsensus%2Ftypes%2Fsrc%2Ftree_hash_impls.rs)%3A%20contains%20custom%20implementations%20of%20%60CachedTreeHash%60%20for%20ETH2-specific%20types.%20It%20makes%20some%20assumptions%20about%20the%20layouts%20and%20update%20patterns%20of%20other%20structs%20in%20this%20crate%2C%20and%20should%20be%20updated%20carefully%20whenever%20those%20structs%20are%20changed.%0A%20%20-%20%5Bvalidator%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Flighthouse%2Fblob%2Fstable%2Fconsensus%2Ftypes%2Fsrc%2Fvalidator.rs)%3A%20Information%20about%20a%20%60BeaconChain%60%20validator.%0A%0ASome%20Smart%20Contracts%20deployed%20on%20Ethereum%0A%0A-%20%5Bnearprover%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Ftree%2Fmaster%2Fcontracts%2Feth%2Fnearprover)%0A%20%20-%20%5BProofDecoder.sol%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Fblob%2Fmaster%2Fcontracts%2Feth%2Fnearprover%2Fcontracts%2FProofDecoder.sol)%0A%20%20-%20%5BNearProver.sol%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Fblob%2Fmaster%2Fcontracts%2Feth%2Fnearprover%2Fcontracts%2FNearProver.sol)%0A-%20%5Bnearbridge%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Ftree%2Fmaster%2Fcontracts%2Feth%2Fnearbridge%2Fcontracts)%0A%20%20-%20%5BNearDecoder.sol%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Fblob%2Fmaster%2Fcontracts%2Feth%2Fnearbridge%2Fcontracts%2FNearDecoder.sol)%3A%20handles%20decoing%20of%20Public%20Keys%2C%20Signatures%2C%20BlockProducers%20and%20LightClientBlocks%20using%20%60Borsh.sol%60%0A%20%20-%20%5BUtils.sol%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Fblob%2Fmaster%2Fcontracts%2Feth%2Fnearbridge%2Fcontracts%2FUtils.sol)%3A%20handles%20reading%20and%20writing%20to%20memory%2C%20memoryToBytes%20and%20has%20functions%20such%20as%20%60keccak256Raw%60%20and%20%60sha256Raw%60%0A%20%20-%20%5BBorsh.sol%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Fblob%2Fmaster%2Fcontracts%2Feth%2Fnearbridge%2Fcontracts%2FBorsh.sol)%3A%20%5BBorsh%5D(https%3A%2F%2Fborsh.io%2F)%3A%20Binary%20Object%20Representation%20Serializer%20for%20Hashing.%20It%20is%20meant%20to%20be%20used%20in%20security-critical%20projects%20as%20it%20prioritizes%20consistency%2C%20safety%2C%20speed%3B%20and%20comes%20with%20a%20strict%20specification.%0A%20%20-%20%5BEd25519.sol%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Fblob%2Fmaster%2Fcontracts%2Feth%2Fnearbridge%2Fcontracts%2FEd25519.sol)%3A%20%5BEd25519%5D(https%3A%2F%2Fed25519.cr.yp.to%2F)%20high-speed%20high-security%20signatures%0A%0ASome%20Primitives%20from%20NEAR%20Rainbow%20Bridge%0A%0A-%20%5Beth-types%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Ftree%2Fmaster%2Fcontracts%2Fnear%2Feth-types)%3A%20utilities%20to%20serialize%20and%20encode%20eth2%20types%20using%20%5Bborsh%5D(https%3A%2F%2Fborsh.io%2F)%20and%20%5Brlp%5D(https%3A%2F%2Fethereum.org%2Fen%2Fdevelopers%2Fdocs%2Fdata-structures-and-encoding%2Frlp).%0A-%20%5Beth2-utility%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Ftree%2Fmaster%2Fcontracts%2Fnear%2Feth2-utility)%3A%20Utility%20functions%20used%20for%20Ethereum%202.0%20Consensus.%20Functions%20include%0A%20%20-%20%60fn%20from_str(input%3A%20%26str)%20-%3E%20Result%3CNetwork%2C%20Self%3A%3AErr%3E%60%0A%20%20-%20%60pub%20fn%20new(network%3A%20%26Network)%20-%3E%20Self%60%0A%20%20-%20%60pub%20fn%20compute_fork_version(%26self%2C%20epoch%3A%20Epoch)%20-%3E%20Option%3CForkVersion%3E%60%0A%20%20-%20%60pub%20fn%20compute_fork_version_by_slot(%26self%2C%20slot%3A%20Slot)%20-%3E%20Option%3CForkVersion%3E%60%0A%20%20-%20%60pub%20const%20fn%20compute_epoch_at_slot(slot%3A%20Slot)%20-%3E%20u64%60%0A%20%20-%20%60pub%20const%20fn%20compute_sync_committee_period(slot%3A%20Slot)%20-%3E%20u64%60%0A%20%20-%20%60pub%20const%20fn%20floorlog2(x%3A%20u32)%20-%3E%20u32%60%3A%20Compute%20floor%20of%20log2%20of%20a%20u32.%0A%20%20-%20%60pub%20const%20fn%20get_subtree_index(generalized_index%3A%20u32)%20-%3E%20u32%60%0A%20%20-%20%60pub%20fn%20compute_domain(domain_constant%3A%20DomainType%2C%20fork_version%3A%20ForkVersion%2C%20genesis_validators_root%3A%20H256%2C)%20-%3E%20H256%60%0A%20%20-%20%60pub%20fn%20compute_signing_root(object_root%3A%20H256%2C%20domain%3A%20H256)%20-%3E%20H256%60%0A%20%20-%20%60pub%20fn%20get_participant_pubkeys(public_keys%3A%20%26%5BPublicKeyBytes%5D%2C%20sync_committee_bits%3A%20%26BitVec%3Cu8%2C%20Lsb0%3E%2C)%20-%3E%20Vec%3CPublicKeyBytes%3E%60%0A%20%20-%20%60pub%20fn%20convert_branch(branch%3A%20%26%5BH256%5D)%20-%3E%20Vec%3Cethereum_types%3A%3AH256%3E%60%0A%20%20-%20%60pub%20fn%20validate_beacon_block_header_update(header_update%3A%20%26HeaderUpdate)%20-%3E%20bool%60%0A%20%20-%20%60pub%20fn%20calculate_min_storage_balance_for_submitter(max_submitted_blocks_by_account%3A%20u32%2C)%20-%3E%20Balance%60%0A%0A**Nearbridge%20Cryptographic%20Primitives**%0A%0A-%20%5BEd25519.sol%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Fblob%2Fmaster%2Fcontracts%2Feth%2Fnearbridge%2Fcontracts%2FEd25519.sol)%3A%20Solidity%20implementation%20of%20the%20%5BEd25519%5D(https%3A%2F%2Fen.wikipedia.org%2Fwiki%2FEdDSA)%20which%20is%20the%20EdDSA%20signature%20scheme%20using%20SHA-512%20(SHA-2)%20and%20Curve25519%20(see%20%5Bhere%5D(https%3A%2F%2Fnbeguier.medium.com%2Fa-real-world-comparison-of-the-ssh-key-algorithms-b26b0b31bfd9)).%20It%20has%20the%20following%20functions%0A%20%20-%20%60function%20pow22501(uint256%20v)%20private%20pure%20returns%20(uint256%20p22501%2C%20uint256%20p11)%60%20%3A%20Computes%20(v%5E(2%5E250-1)%2C%20v%5E11)%20mod%20p%0A%20%20-%20%60function%20check(bytes32%20k%2C%20bytes32%20r%2C%20bytes32%20s%2C%20bytes32%20m1%2C%20bytes9%20m2)%60%20%3A%20has%20the%20following%20steps%0A%20%20%20%20-%20Step%201%3A%20compute%20SHA-512(R%2C%20A%2C%20M)%0A%20%20%20%20-%20Step%202%3A%20unpack%20k%0A%20%20%20%20-%20Step%203%3A%20compute%20multiples%20of%20k%0A%20%20%20%20-%20Step%204%3A%20compute%20s*G%20-%20h*A%0A%20%20%20%20-%20Step%205%3A%20compare%20the%20points%0A-%20%5BUtils.sol%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Fblob%2Fmaster%2Fcontracts%2Feth%2Fnearbridge%2Fcontracts%2FUtils.sol)%3A%20A%20set%20of%20utilty%20functions%20for%20byte%20manipulation%2C%20memory%20updates%20and%20%5Bkeccak%5D(https%3A%2F%2Fkeccak.team%2Fkeccak_specs_summary.html)%20functions.%0A%20%20-%20%60function%20swapBytes2(uint16%20v)%20internal%20pure%20returns%20(uint16)%60%0A%20%20-%20%60function%20swapBytes4(uint32%20v)%20internal%20pure%20returns%20(uint32)%60%0A%20%20-%20%60function%20swapBytes8(uint64%20v)%20internal%20pure%20returns%20(uint64)%60%0A%20%20-%20%60function%20swapBytes16(uint128%20v)%20internal%20pure%20returns%20(uint128)%60%0A%20%20-%20%60function%20swapBytes32(uint256%20v)%20internal%20pure%20returns%20(uint256)%60%0A%20%20-%20%60function%20readMemory(uint%20ptr)%20internal%20pure%20returns%20(uint%20res)%60%0A%20%20-%20%60function%20writeMemory(uint%20ptr%2C%20uint%20value)%20internal%20pure%60%0A%20%20-%20%60function%20memoryToBytes(uint%20ptr%2C%20uint%20length)%20internal%20pure%20returns%20(bytes%20memory%20res)%60%0A%20%20-%20%60function%20keccak256Raw(uint%20ptr%2C%20uint%20length)%20internal%20pure%20returns%20(bytes32%20res)%60%0A%20%20-%20%60function%20sha256Raw(uint%20ptr%2C%20uint%20length)%20internal%20view%20returns%20(bytes32%20res)%60%0A-%20%5BBorsh.sol%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Fblob%2Fmaster%2Fcontracts%2Feth%2Fnearbridge%2Fcontracts%2FBorsh.sol)%20provides%20Binary%20Object%20Representation%20Serializer%20for%20Hashing%20%5Bborsh%5D(https%3A%2F%2Fborsh.io%2F)%20functionality%20and%20imports%20%60Utils.sols%60.%20Structures%20and%20functions%20include%0A%20%20-%20%60struct%20Data%20%7Buint%20ptr%3B%20uint%20end%3B%7D%60%0A%20%20-%20%60function%20from(bytes%20memory%20data)%20internal%20pure%20returns%20(Data%20memory%20res)%60%0A%20%20-%20%60function%20requireSpace(Data%20memory%20data%2C%20uint%20length)%20internal%20pure%60%3A%20This%20function%20assumes%20that%20length%20is%20reasonably%20small%2C%20so%20that%20data.ptr%20%2B%20length%20will%20not%20overflow.%20In%20the%20current%20code%2C%20length%20is%20always%20less%20than%202%5E32.%0A%20%20-%20%60function%20read(Data%20memory%20data%2C%20uint%20length)%20internal%20pure%20returns%20(bytes32%20res)%60%0A%20%20-%20%60function%20done(Data%20memory%20data)%20internal%20pure%60%0A%20%20-%20%60function%20peekKeccak256(Data%20memory%20data%2C%20uint%20length)%20internal%20pure%20returns%20(bytes32)%60%3A%20Same%20considerations%20as%20for%20requireSpace.%0A%20%20-%20%60function%20peekSha256(Data%20memory%20data%2C%20uint%20length)%20internal%20view%20returns%20(bytes32)%60%3A%20Same%20considerations%20as%20for%20requireSpace.%0A%20%20-%20%60function%20decodeU8(Data%20memory%20data)%20internal%20pure%20returns%20(uint8)%60%0A%20%20-%20%60function%20decodeU16(Data%20memory%20data)%20internal%20pure%20returns%20(uint16)%60%0A%20%20-%20%60function%20decodeU32(Data%20memory%20data)%20internal%20pure%20returns%20(uint32)%60%0A%20%20-%20%60function%20decodeU64(Data%20memory%20data)%20internal%20pure%20returns%20(uint64)%60%0A%20%20-%20%60function%20decodeU128(Data%20memory%20data)%20internal%20pure%20returns%20(uint128)%60%0A%20%20-%20%60function%20decodeU256(Data%20memory%20data)%20internal%20pure%20returns%20(uint256)%60%0A%20%20-%20%60function%20decodeBytes20(Data%20memory%20data)%20internal%20pure%20returns%20(bytes20)%60%0A%20%20-%20%60function%20decodeBytes32(Data%20memory%20data)%20internal%20pure%20returns%20(bytes32)%60%0A%20%20-%20%60function%20decodeBool(Data%20memory%20data)%20internal%20pure%20returns%20(bool)%60%0A%20%20-%20%60function%20skipBytes(Data%20memory%20data)%20internal%20pure%60%0A%20%20-%20%60function%20decodeBytes(Data%20memory%20data)%20internal%20pure%20returns%20(bytes%20memory%20res)%60%0A-%20%5BNearDecoder.sol%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Fblob%2Fmaster%2Fcontracts%2Feth%2Fnearbridge%2Fcontracts%2FNearDecoder.sol)%3A%20Imports%20%60Borsh.sol%60%20and%20has%20utilities%20for%20decoding%20Public%20Keys%2C%20Signatures%2C%20Block%20Producers%2C%20Block%20Headers%20and%20Light%20Client%20Blocks.%0A%20%20-%20%60function%20decodePublicKey(Borsh.Data%20memory%20data)%20internal%20pure%20returns%20(PublicKey%20memory%20res)%60%0A%20%20-%20%60function%20decodeSignature(Borsh.Data%20memory%20data)%20internal%20pure%20returns%20(Signature%20memory%20res)%60%0A%20%20-%20%60function%20decodeBlockProducer(Borsh.Data%20memory%20data)%20internal%20pure%20returns%20(BlockProducer%20memory%20res)%60%0A%20%20-%20%60function%20decodeBlockProducers(Borsh.Data%20memory%20data)%20internal%20pure%20returns%20(BlockProducer%5B%5D%20memory%20res)%60%0A%20%20-%20%60function%20decodeOptionalBlockProducers(Borsh.Data%20memory%20data)%20internal%20view%20returns%20(OptionalBlockProducers%20memory%20res)%60%0A%20%20-%20%60function%20decodeOptionalSignature(Borsh.Data%20memory%20data)%20internal%20pure%20returns%20(OptionalSignature%20memory%20res)%60%0A%20%20-%20%60function%20decodeBlockHeaderInnerLite(Borsh.Data%20memory%20data)%20internal%20view%20returns%20(BlockHeaderInnerLite%20memory%20res)%60%0A%20%20-%20%60function%20decodeLightClientBlock(Borsh.Data%20memory%20data)%20internal%20view%20returns%20(LightClientBlock%20memory%20res)%60%0A-%20%5BProofDecoder.sol%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Fblob%2Fmaster%2Fcontracts%2Feth%2Fnearprover%2Fcontracts%2FProofDecoder.sol)%3A%20Imports%20%60Borsh.sol%60%20and%20%60NearDecoder.sol%60%20and%20has%20utilities%20for%20decoding%20Proofs%2C%20BlockHeader%2C%20ExecutionStatus%2C%20ExecutionOutcome%20and%20MerklePaths.%20Structures%20and%20functions%20include%0A%20%20-%20%60struct%20FullOutcomeProof%20%7BExecutionOutcomeWithIdAndProof%20outcome_proof%3B%20MerklePath%20outcome_root_proof%3B%20BlockHeaderLight%20block_header_lite%3B%20MerklePath%20block_proof%3B%7D%60%0A%20%20-%20%60function%20decodeFullOutcomeProof(Borsh.Data%20memory%20data)%20internal%20view%20returns%20(FullOutcomeProof%20memory%20proof)%60%0A%20%20-%20%60struct%20BlockHeaderLight%20%7Bbytes32%20prev_block_hash%3B%20bytes32%20inner_rest_hash%3B%20NearDecoder.BlockHeaderInnerLite%20inner_lite%3B%20bytes32%20hash%3B%7D%60%0A%20%20-%20%60function%20decodeBlockHeaderLight(Borsh.Data%20memory%20data)%20internal%20view%20returns%20(BlockHeaderLight%20memory%20header)%60%0A%20%20-%20%60struct%20ExecutionStatus%20%7Buint8%20enumIndex%3B%20bool%20unknown%3B%20bool%20failed%3B%20bytes%20successValue%3B%20bytes32%20successReceiptId%3B%7D%60%0A%20%20%20%20-%20%60successValue%60%20indicates%20if%20the%20final%20action%20succeeded%20and%20returned%20some%20value%20or%20an%20empty%20vec.%0A%20%20%20%20-%20%60successReceiptId%60%20is%20the%20final%20action%20of%20the%20receipt%20returned%20a%20promise%20or%20the%20signed%20transaction%20was%20converted%20to%20a%20receipt.%20Contains%20the%20receipt_id%20of%20the%20generated%20receipt.%0A%20%20-%20%60function%20decodeExecutionStatus(Borsh.Data%20memory%20data)%20internal%20pure%20returns%20(ExecutionStatus%20memory%20executionStatus)%60%0A%20%20-%20%60struct%20ExecutionOutcome%20%7Bbytes%5B%5D%20logs%3B%20bytes32%5B%5D%20receipt_ids%3B%20uint64%20gas_burnt%3B%20uint128%20tokens_burnt%3B%20bytes%20executor_id%3B%20ExecutionStatus%20status%3B%20bytes32%5B%5D%20merkelization_hashes%3B%7D%60%0A%20%20%20%20-%20%60bytes%5B%5D%20logs%3B%60%3A%20Logs%20from%20this%20transaction%20or%20receipt.%0A%20%20%20%20-%20%60bytes32%5B%5D%20receipt_ids%3B%60%3A%20Receipt%20IDs%20generated%20by%20this%20transaction%20or%20receipt.%0A%20%20%20%20-%20%60uint64%20gas_burnt%3B%60%3A%20The%20amount%20of%20the%20gas%20burnt%20by%20the%20given%20transaction%20or%20receipt.%0A%20%20%20%20-%20%60uint128%20tokens_burnt%3B%60%3A%20The%20total%20number%20of%20the%20tokens%20burnt%20by%20the%20given%20transaction%20or%20receipt.%0A%20%20%20%20-%20%60bytes%20executor_id%3B%60%3A%20Hash%20of%20the%20transaction%20or%20receipt%20id%20that%20produced%20this%20outcome.%0A%20%20%20%20-%20%60ExecutionStatus%20status%60%3A%20Execution%20status.%20Contains%20the%20result%20in%20case%20of%20successful%20execution.%0A%20%20%20%20-%20%60bytes32%5B%5D%20merkelization_hashes%3B%60%0A%20%20-%20%60function%20decodeExecutionOutcome(Borsh.Data%20memory%20data)%20internal%20view%20returns%20(ExecutionOutcome%20memory%20outcome)%60%0A%20%20-%20%60struct%20ExecutionOutcomeWithId%20%7Bbytes32%20id%3B%20ExecutionOutcome%20outcome%3B%20bytes32%20hash%3B%7D%60%0A%20%20%20%20-%20%60bytes32%20id%60%3A%20is%20the%20transaction%20hash%20or%20the%20receipt%20ID.%0A%20%20-%20%60function%20decodeExecutionOutcomeWithId(Borsh.Data%20memory%20data)%20internal%20view%20returns%20(ExecutionOutcomeWithId%20memory%20outcome)%60%0A%20%20-%20%60struct%20MerklePathItem%20%7Bbytes32%20hash%3B%20uint8%20direction%3B%7D%60%0A%20%20%20%20-%20%60uint8%20direction%60%3A%20where%200%20%3D%20left%2C%201%20%3D%20right%0A%20%20-%20%60function%20decodeMerklePathItem(Borsh.Data%20memory%20data)%20internal%20pure%20returns%20(MerklePathItem%20memory%20item)%60%0A%20%20-%20%60struct%20MerklePath%20%7BMerklePathItem%5B%5D%20items%3B%7D%60%0A%20%20-%20%60function%20decodeMerklePath(Borsh.Data%20memory%20data)%20internal%20pure%20returns%20(MerklePath%20memory%20path)%60%0A%20%20-%20%60struct%20ExecutionOutcomeWithIdAndProof%20%7BMerklePath%20proof%3B%20bytes32%20block_hash%3B%20ExecutionOutcomeWithId%20outcome_with_id%3B%7D%60%0A%20%20-%20%60function%20decodeExecutionOutcomeWithIdAndProof(Borsh.Data%20memory%20data)internal%20view%20returns%20(ExecutionOutcomeWithIdAndProof%20memory%20outcome)%60%0A%0A%23%23%23%20Appendix%20D%20-%20NEAR%20to%20Ethereum%20block%20propagation%20costing%0A%0AThe%20following%20links%20provide%20the%20production%20Ethereum%20addresses%20and%20blockexplorer%20views%20for%20NearBridge.sol%20and%20the%20ERC20%20Locker%0A%0A-%20%5BEthereum%20Mainnet%20Bridge%20addresses%20and%20parameters%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge-client%2Ftree%2Fmain%2Fpackages%2Fclient%23ethereum-mainnet-bridge-addresses-and-parameters)%0A-%20%5BNearBridge.sol%20on%20Ethereum%20Block%20Explorer%5D(https%3A%2F%2Fetherscan.io%2Faddress%2F0x3fefc5a4b1c02f21cbc8d3613643ba0635b9a873)%0A%20%20-%20%5BSample%20%60addLightClientBlock(bytes%20data)%60%20function%20call%5D(https%3A%2F%2Fetherscan.io%2Ftx%2F0xa0fbf1405747dbc1c1bda1227e46bc7c5feac36c0eeaab051022cfdb268e60cc%2Fadvanced)%0A-%20%5BNEAR%20ERC20Locker%20on%20Ethereum%20Block%20Explorer%5D(https%3A%2F%2Fetherscan.io%2Faddress%2F0x23ddd3e3692d1861ed57ede224608875809e127f%23code)%0A%0AAt%20time%20of%20writing%20(Oct%2026th%2C%202022).%0A%0A-%20NEAR%20Light%20Client%20Blocks%20are%20propogated%20every%20%604%20hours%60%0A-%20Sample%20Transaction%20fee%20%600.061600109576901025%20Ether%20(%2496.56)%60%0A-%20Daily%20Transaction%20fees%20cost%20approximately%20%60%24600%60%0A-%20_Note%3A%20Infrastructure%20costs%20for%20running%20relayer%2C%20watchdog%2C%20etc%20are%20not%20included._%0A%0A%23%23%23%20Appendix%20F%20-%20NEAR%20to%20Ethereum%20block%20propagation%20components%0A%0A-%20%5Beth2near-relay%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Fblob%2Fmaster%2Fcli%2Fcommands%2Fstart%2Feth2near-relay.js)%3A%20Command%20to%20start%20the%20NEAR%20to%20Ethereum%20relay.%20See%20sample%20invocation%20%5Bhere%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Fblob%2Fmaster%2Fdocs%2Fdevelopment.md%23near2eth-relay)%0A-%20%5Bnear2eth-block-relay%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Ftree%2Fmaster%2Fnear2eth%2Fnear2eth-block-relay)%20is%20written%20in%20javascript%0A%20%20-%20Has%20%5Bdependencies%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Fblob%2Fmaster%2Fnear2eth%2Fnear2eth-block-relay%2Fpackage.json)%20including%20%5Brainbow-bridge-utils%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Ftree%2Fmaster%2Futils)%20see%20%5Bhere%5D(near-rainbow-bridge-utils)%20for%20more%20information.%20It's%20other%20dependencies%20are%20also%20included%20in%20%60rainbow-bridge-utils%60.%0A%20%20%20%20-%20%5Bethereumjs-util%5D(https%3A%2F%2Fwww.npmjs.com%2Fpackage%2Fethereumjs-util)%3A%20A%20collection%20of%20utility%20functions%20for%20Ethereum.%0A%20%20-%20Has%20the%20following%20functions%20and%20classes%0A%20%20%20%20-%20%60class%20Near2EthRelay%60%0A%20%20%20%20%20%20-%20%60async%20initialize%20(%7BnearNodeUrl%2C%20nearNetworkId%2C%20ethNodeUrl%2C%20ethMasterSk%2C%20ethClientArtifactPath%2C%20ethClientAddress%2C%20ethGasMultiplier%2C%20metricsPort%20%7D)%60%0A%20%20%20%20%20%20-%20%60async%20withdraw%20(%7BethGasMultiplier%7D)%60%0A%20%20%20%20%20%20-%20%60async%20runInternal%20(%7BsubmitInvalidBlock%2C%20near2ethRelayMinDelay%2C%20near2ethRelayMaxDelay%2C%20near2ethRelayErrorDelay%2C%20near2ethRelayBlockSelectDuration%2C%20near2ethRelayNextBlockSelectDelayMs%2C%20near2ethRelayAfterSubmitDelayMs%2C%20ethGasMultiplier%2C%20ethUseEip1559%2C%20logVerbose%7D)%60%0A%20%20%20%20%20%20-%20%60run%20(options)%20%7Breturn%20this.runInternal(%7B...options%2C%20submitInvalidBlock%3A%20false%7D)%20%7D%60%0A-%20%5BNearBridge.sol%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Fblob%2Fmaster%2Fcontracts%2Feth%2Fnearbridge%2Fcontracts%2FNearBridge.sol)%3A%20Is%20the%20NEAR%20light%20client%20deployed%20on%20ethereum.%0A%20%20-%20It%20imports%20the%20following%20contracts%20(see%20%5Bnearbridge%20cryptographic%20primitives%5D(%23nearbridge-cryptographic-primitives))%0A%20%20%20%20-%20%60import%20%22.%2FAdminControlled.sol%22%3B%60%0A%20%20%20%20-%20%60import%20%22.%2FINearBridge.sol%22%3B%60%0A%20%20%20%20-%20%60import%20%22.%2FNearDecoder.sol%22%3B%60%0A%20%20%20%20-%20%60import%20%22.%2FEd25519.sol%22%3B%60%0A%20%20-%20It%20provides%20the%20following%20structure%20for%20Bridge%20State.%20If%20there%20is%20currently%20no%20unconfirmed%20block%2C%20the%20last%20three%20fields%20are%20zero.%0A%20%20%20%20-%20%60uint%20currentHeight%3B%60%3A%20Height%20of%20the%20current%20confirmed%20block%0A%20%20%20%20-%20%60uint%20nextTimestamp%3B%60%3A%20Timestamp%20of%20the%20current%20unconfirmed%20block%0A%20%20%20%20-%20%60uint%20nextValidAt%3B%60%3A%20Timestamp%20when%20the%20current%20unconfirmed%20block%20will%20be%20confirmed%0A%20%20%20%20-%20%60uint%20numBlockProducers%3B%60%3A%20Number%20of%20block%20producers%20for%20the%20current%20unconfirmed%20block%0A%20%20-%20It%20provides%20the%20following%20storage%0A%20%20%20%20-%20%60uint%20constant%20MAX_BLOCK_PRODUCERS%20%3D%20100%3B%60%3A%20Assumed%20to%20be%20even%20and%20to%20not%20exceed%20256.%0A%20%20%20%20-%20%60struct%20Epoch%20%7Bbytes32%20epochId%3B%20uint%20numBPs%3B%20bytes%20%5BMAX_BLOCK_PRODUCERS%5D%20keys%3B%20bytes32%5BMAX_BLOCK_PRODUCERS%20%2F%202%5D%20packedStakes%3B%20uint256%20stakeThreshold%3B%7D%60%0A%20%20%20%20-%20%60uint256%20public%20lockEthAmount%3B%60%0A%20%20%20%20-%20%60uint256%20public%20lockDuration%3B%60%3A%20lockDuration%20and%20replaceDuration%20shouldn't%20be%20extremely%20big%2C%20so%20adding%20them%20to%20an%20uint64%20timestamp%20should%20not%20overflow%20uint256.%0A%20%20%20%20-%20%60uint256%20public%20replaceDuration%3B%60%3A%20replaceDuration%20is%20in%20nanoseconds%2C%20because%20it%20is%20a%20difference%20between%20NEAR%20timestamps.%0A%20%20%20%20-%20%60Ed25519%20immutable%20edwards%3B%60%0A%20%20%20%20-%20%60uint256%20public%20lastValidAt%3B%60%3A%20End%20of%20challenge%20period.%20If%20zero%2C%20_%60untrusted%60_%20fields%20and%20%60lastSubmitter%60%20are%20not%20meaningful.%0A%20%20%20%20-%20%60uint64%20curHeight%3B%60%0A%20%20%20%20-%20%60uint64%20untrustedHeight%3B%60%3A%20The%20most%20recently%20added%20block.%20May%20still%20be%20in%20its%20challenge%20period%2C%20so%20should%20not%20be%20trusted.%0A%20%20%20%20-%20%60address%20lastSubmitter%3B%60%3A%20Address%20of%20the%20account%20which%20submitted%20the%20last%20block.%0A%20%20%20%20-%20%60bool%20public%20initialized%3B%60%3A%20Whether%20the%20contract%20was%20initialized.%0A%20%20%20%20-%20%60bool%20untrustedNextEpoch%3B%60%0A%20%20%20%20-%20%60bytes32%20untrustedHash%3B%60%0A%20%20%20%20-%20%60bytes32%20untrustedMerkleRoot%3B%60%0A%20%20%20%20-%20%60bytes32%20untrustedNextHash%3B%60%0A%20%20%20%20-%20%60uint256%20untrustedTimestamp%3B%60%0A%20%20%20%20-%20%60uint256%20untrustedSignatureSet%3B%60%0A%20%20%20%20-%20%60NearDecoder.Signature%5BMAX_BLOCK_PRODUCERS%5D%20untrustedSignatures%3B%60%0A%20%20%20%20-%20%60Epoch%5B3%5D%20epochs%3B%60%0A%20%20%20%20-%20%60uint256%20curEpoch%3B%60%0A%20%20%20%20-%20%60mapping(uint64%20%3D%3E%20bytes32)%20blockHashes_%3B%60%0A%20%20%20%20-%20%60mapping(uint64%20%3D%3E%20bytes32)%20blockMerkleRoots_%3B%60%0A%20%20%20%20-%20%60mapping(address%20%3D%3E%20uint256)%20public%20override%20balanceOf%3B%60%0A%20%20-%20It%20provides%20the%20following%20functions%0A%20%20%20%20-%20%60constructor(Ed25519%20ed%2C%20uint256%20lockEthAmount_%2C%20uint256%20lockDuration_%2C%20uint256%20replaceDuration_%2C%20address%20admin_%2C%20uint256%20pausedFlags_)%60%3A%20_Note%3A%20require%20the%20%60lockDuration%60%20(in%20seconds)%20to%20be%20at%20least%20one%20second%20less%20than%20the%20%60replaceDuration%60%20(in%20nanoseconds)%20%60require(replaceDuration*%20%3E%20lockDuration*%20_%201000000000)%3B%60%0A%20%20%20%20%20%20-%20%60ethEd25519Address%60%3A%20The%20address%20of%20the%20ECDSA%20signature%20checker%20using%20Ed25519%20curve%20(see%20%5Bhere%5D(https%3A%2F%2Fnbeguier.medium.com%2Fa-real-world-comparison-of-the-ssh-key-algorithms-b26b0b31bfd9))%0A%20%20%20%20%20%20-%20%60lockEthAmount%60%3A%20The%20amount%20that%20%60BLOCK_PRODUCERS%60%20need%20to%20deposit%20(in%20wei)to%20be%20able%20to%20provide%20blocks.%20This%20amount%20will%20be%20slashed%20if%20the%20block%20is%20challenged%20and%20proven%20not%20to%20have%20a%20valid%20signature.%20Default%20value%20is%20100000000000000000000%20WEI%20%3D%20100%20ETH.%0A%20%20%20%20%20%20-%20%60lockDuration%60%20%3A%2030%20seconds%0A%20%20%20%20%20%20-%20%60replaceDuration%60%3A%2060%20seconds%20it%20is%20passed%20in%20nanoseconds%2C%20because%20it%20is%20a%20difference%20between%20NEAR%20timestamps.%0A%20%20%20%20%20%20-%20%60ethAdminAddress%60%3A%20Bridge%20Administrator%20Address%0A%20%20%20%20%20%20-%20%600%60%20%3A%20Indicates%20nothing%20is%20paused%20%60UNPAUSE_ALL%60%0A%20%20%20%20-%20%60function%20deposit()%20public%20payable%20override%20pausable(PAUSED_DEPOSIT)%60%0A%20%20%20%20-%20%60function%20withdraw()%20public%20override%20pausable(PAUSED_WITHDRAW)%60%0A%20%20%20%20-%20%60function%20challenge(address%20payable%20receiver%2C%20uint%20signatureIndex)%20external%20override%20pausable(PAUSED_CHALLENGE%60%0A%20%20%20%20-%20%60function%20checkBlockProducerSignatureInHead(uint%20signatureIndex)%20public%20view%20override%20returns%20(bool)%60%0A%20%20%20%20-%20%60function%20initWithValidators(bytes%20memory%20data)%20public%20override%20onlyAdmin%60%3A%20The%20first%20part%20of%20initialization%20--%20setting%20the%20validators%20of%20the%20current%20epoch.%0A%20%20%20%20-%20%60function%20initWithBlock(bytes%20memory%20data)%20public%20override%20onlyAdmin%60%3A%20The%20second%20part%20of%20the%20initialization%20--%20setting%20the%20current%20head.%0A%20%20%20%20-%20%60function%20bridgeState()%20public%20view%20returns%20(BridgeState%20memory%20res)%60%0A%20%20%20%20-%20%60function%20bridgeState()%20public%20view%20returns%20(BridgeState%20memory%20res)%60%0A%20%20%20%20-%20%60function%20addLightClientBlock(bytes%20memory%20data)%20public%20override%20pausable(PAUSED_ADD_BLOCK)%60%0A%20%20%20%20-%20%60function%20setBlockProducers(NearDecoder.BlockProducer%5B%5D%20memory%20src%2C%20Epoch%20storage%20epoch)%20internal%60%0A%20%20%20%20-%20%60function%20blockHashes(uint64%20height)%20public%20view%20override%20pausable(PAUSED_VERIFY)%20returns%20(bytes32%20res)%60%0A%20%20%20%20-%20%60function%20blockMerkleRoots(uint64%20height)%20public%20view%20override%20pausable(PAUSED_VERIFY)%20returns%20(bytes32%20res)%60%0A-%20%5BNearProver.sol%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Fblob%2Fmaster%2Fcontracts%2Feth%2Fnearprover%2Fcontracts%2FNearProver.sol)%3A%20Is%20used%20to%20prove%20the%20validity%20of%20NEAR%20blocks%20on%20Ethereum.%0A%20%20-%20It%20imports%20the%20following%20contracts%20(see%20%5Bnearbridge%20cryptographic%20primitives%5D(%23nearbridge-cryptographic-primitives))%0A%20%20%20%20-%20%60import%20%22rainbow-bridge-sol%2Fnearbridge%2Fcontracts%2FNearDecoder.sol%22%3B%60%0A%20%20%20%20-%20%60import%20%22.%2FProofDecoder.sol%22%3B%60%0A%20%20-%20It%20has%20the%20following%20functions%0A%20%20%20%20-%20%60constructor(INearBridge%20_bridge%2C%20address%20_admin%2C%20uint%20_pausedFlags)%60%0A%20%20%20%20%20%20-%20%60_bridge%60%3A%20Interface%20to%20%60NearBridge.sol%60%0A%20%20%20%20%20%20-%20%60_admin%60%3A%20Administrator%20address%0A%20%20%20%20%20%20-%20%60_pausedFlags%60%3A%20paused%20indicator%20defaults%20to%20%60UNPAUSE_ALL%20%3D%200%60%0A%20%20%20%20-%20%60function%20proveOutcome(bytes%20memory%20proofData%2C%20uint64%20blockHeight)%60%0A%20%20%20%20-%20%60function%20_computeRoot(bytes32%20node%2C%20ProofDecoder.MerklePath%20memory%20proof)%20internal%20pure%20returns%20(bytes32%20hash)%60%0A%0A%23%23%23%20Appendix%20G%20-%20NEAR%20Rainbow%20Bridge%20Utils%0A%0A%5Brainbow-bridge-utils%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Ftree%2Fmaster%2Futils)%20provides%20a%20set%20of%20utilities%20for%20the%20near%20rainbow%20bridge%20written%20in%20javascript.%0A%0A-%20It%20has%20the%20following%20%5Bdependencies%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Fblob%2Fmaster%2Futils%2Fpackage.json)%0A%20%20-%20%5Bbn.js%5D(https%3A%2F%2Fwww.npmjs.com%2Fpackage%2Fbn.js)%3A%20Big%20number%20implementation%20in%20pure%20javascript%0A%20%20-%20%5Bbsert%5D(https%3A%2F%2Fwww.npmjs.com%2Fpackage%2Fbsert)%3A%20Minimal%20assert%20with%20type%20checking.%0A%20%20-%20%5Bbs58%5D(https%3A%2F%2Fwww.npmjs.com%2Fpackage%2Fbs58)%3A%20JavaScript%20component%20to%20compute%20base%2058%20encoding%0A%20%20-%20%5Bchange-case%5D(https%3A%2F%2Fwww.npmjs.com%2Fpackage%2Fchange-case)%3A%20Transform%20a%20string%20between%20camelCase%2C%20PascalCase%2C%20Capital%20Case%2C%20snake_case%2C%20param-case%2C%20CONSTANT_CASE%20and%20others.%0A%20%20-%20%5Bconfigstore%5D(https%3A%2F%2Fwww.npmjs.com%2Fpackage%2Fconfigstore)%3A%20Easily%20load%20and%20save%20config%20without%20having%20to%20think%20about%20where%20and%20how%0A%20%20-%20%5Beth-object%5D(https%3A%2F%2Fgithub.com%2Fnear%2Feth-object%23383b6ea68c7050bea4cab6950c1d5a7fa553e72b)%3A%20re-usable%20and%20composable%20objects%20that%20you%20can%20just%20call%20Object.from%20to%20ingest%20new%20data%20to%20serialize%20Ethereum%20Trie%20%2F%20LevelDB%20data%20from%20hex%2C%20buffers%20and%20rpc%20into%20the%20same%20format.%0A%20%20-%20%5Beth-util-lite%5D(https%3A%2F%2Fgithub.com%2Fnear%2Feth-util-lite)%3A%20a%20low-dependency%20utility%20for%20Ethereum.%20It%20replaces%20a%20small%20subset%20of%20the%20ethereumjs-util%20and%20ethjs-util%20APIs.%0A%20%20-%20%5Blodash%5D(https%3A%2F%2Fwww.npmjs.com%2Fpackage%2Flodash)%3A%20A%20set%20of%20utilities%20for%20working%20with%20arrays%2C%20numbers%2C%20objects%2C%20strings%2C%20etc.%0A%20%20-%20%5Bnear-api-js%5D(https%3A%2F%2Fwww.npmjs.com%2Fpackage%2Fnear-api-js)%3A%20JavaScript%20library%20to%20interact%20with%20NEAR%20Protocol%20via%20RPC%20API%0A%20%20-%20%5Bweb3%5D(https%3A%2F%2Fwww.npmjs.com%2Fpackage%2Fweb3)%3A%20Ethereum%20JavaScript%20API%0A-%20It%20provides%20the%20following%20functions%0A%20%20-%20%5Baddress-watcher%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Fblob%2Fmaster%2Futils%2Faddress-watcher.js)%3A%20Watches%20a%20group%20of%20near%20and%20ethereum%20acccounts%20polling%20NEAR%20and%20Ethereum%20every%20second%20and%20updating%20%60nearAccount.balanceGauge%60%2C%20%60nearAccount.stateStorageGauge%60%20and%20%60ethereumAccount.balanceGauge%60.%0A%20%20-%20%5Bborsh%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Fblob%2Fmaster%2Futils%2Fborsh.js)%3A%20provides%20the%20following%20functions%20for%20Binary%20Object%20Representation%20Serializer%20for%20Hashing%20%5Bborsh%5D(https%3A%2F%2Fborsh.io%2F)%0A%20%20%20%20-%20%60function%20serializeField%20(schema%2C%20value%2C%20fieldType%2C%20writer)%60%0A%20%20%20%20-%20%60function%20deserializeField%20(schema%2C%20fieldType%2C%20reader)%60%0A%20%20%20%20-%20%60function%20serialize%20(schema%2C%20fieldType%2C%20obj)%60%3A%20Serialize%20given%20object%20using%20schema%20of%20the%20form%3A%20%60%7B%20class_name%20-%3E%20%5B%20%5Bfield_name%2C%20field_type%5D%2C%20..%20%5D%2C%20..%20%7D%60%0A%20%20%20%20-%20%60class%20BinaryReader%60%3A%20Includes%20utilities%20to%20read%20numbers%2C%20strings%20arrays%20and%20burggers%0A%20%20%20%20-%20%60function%20deserialize%20(schema%2C%20fieldType%2C%20buffer)%60%0A%20%20%20%20-%20%60const%20signAndSendTransactionAsync%20%3D%20async%20(accessKey%2C%20account%2C%20receiverId%2Cactions)%20%3D%3E%60%0A%20%20%20%20-%20%60const%20txnStatus%20%3D%20async%20(account%2C%20txHash%2C%20retries%20%3D%20RETRY_TX_STATUS%2C%20wait%20%3D%201000)%20%3D%3E%60%0A%20%20%20%20-%20%60function%20getBorshTransactionLastResult%20(txResult)%60%0A%20%20%20%20-%20%60class%20BorshContract%20%7B%60%0A%20%20%20%20%20%20-%20%60constructor%20(borshSchema%2C%20account%2C%20contractId%2C%20options)%60%0A%20%20%20%20%20%20-%20%60async%20accessKeyInit%20()%60%0A%20%20%20%20-%20%60function%20borshify%20(block)%60%0A%20%20%20%20-%20%60function%20borshifyInitialValidators%20(initialValidators)%60%0A%20%20%20%20-%20%60const%20hexToBuffer%20%3D%20(hex)%20%3D%3E%60%0A%20%20%20%20-%20%60const%20readerToHex%20%3D%20(len)%20%3D%3E%60%0A%20%20-%20%5Bborshify-proof%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Fblob%2Fmaster%2Futils%2Fborshify-proof.js)%0A%20%20%20%20-%20%60function%20borshifyOutcomeProof%20(proof)%60%0A%20%20-%20%5Brobust%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Fblob%2Fmaster%2Futils%2Frobust.js)%3A%20his%20module%20gives%20a%20few%20utils%20for%20robust%20error%20handling%2C%20and%20wrap%20web3%20with%20error%20handling%20and%20retry%0A%20%20-%20%5Butils%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Fblob%2Fmaster%2Futils%2Futils.js)%0A%20%20%20%20-%20%60async%20function%20setupNear%20(config)%60%0A%20%20%20%20-%20%60async%20function%20setupEth%20(config)%60%0A%20%20%20%20-%20%60async%20function%20setupEthNear%20(config)%60%3A%20Setup%20connection%20to%20NEAR%20and%20Ethereum%20from%20given%20configuration.%0A%20%20%20%20-%20%60function%20remove0x%20(value)%60%3A%20Remove%200x%20if%20prepended%0A%20%20%20%20-%20%60function%20normalizeHex%20(value)%60%0A%20%20%20%20-%20%60async%20function%20accountExists%20(connection%2C%20accountId)%60%0A%20%20%20%20-%20%60async%20function%20createLocalKeyStore%20(networkId%2C%20keyPath)%60%0A%20%20%20%20-%20%60function%20getWeb3%20(config)%60%0A%20%20%20%20-%20%60function%20getEthContract%20(web3%2C%20path%2C%20address)%60%0A%20%20%20%20-%20%60function%20addSecretKey%20(web3%2C%20secretKey)%60%0A%20%20%20%20-%20%60async%20function%20ethCallContract%20(contract%2C%20methodName%2C%20args)%60%3A%20Wrap%20pure%20calls%20to%20Web3%20contract%20to%20handle%20errors%2Freverts%2Fgas%20usage.%0A%0A%23%23%23%20Appendix%20H%20-%20Token%20Transfer%20Components%0A%0A_Note%3A%20This%20uses%20Ethreum%20%5BERC20%5D(https%3A%2F%2Feips.ethereum.org%2FEIPS%2Feip-20)%20and%20NEAR%20%5BNEP-141%5D(https%3A%2F%2Fnomicon.io%2FStandards%2FTokens%2FFungibleToken%2FCore)%20initally%20developed%20for%20%5BNEP-21%5D(https%3A%2F%2Fgithub.com%2Fnear%2FNEPs%2Fpull%2F21)_%0A%0A-%20%5Brainbow-token-connector%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-token-connector)%0A%20%20-%20NEAR%20rust%20based%20contracts%0A%20%20%20%20-%20%5Bbridge-common%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-token-connector%2Ftree%2Fmaster%2Fbridge-common)%3A%20Common%20functions%20for%20NEAR%2C%20currently%20only%20%60pub%20fn%20parse_recipient(recipient%3A%20String)%20-%3E%20Recipient%60%0A%20%20%20%20-%20%5Bbridge-token-factory%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-token-connector%2Ftree%2Fmaster%2Fbridge-token-factory)%3A%20Functions%20for%20managing%20tokens%20on%20NEAR%20including%20but%20not%20limited%20to%20%60update_metadata%60%2C%20%60deposit%60%2C%20%60get_tokens%60%2C%20%60finish_updating_metadata%60%2C%20%60finish_updating_metadata%60%2C%20%60finish_withdraw%60%2C%20%60deploy_bridge_token%60%2C%20%60get_bridge_token_account_id%60%2C%20%60is_used_proof%60%2C%20%60record_proof%60%0A%20%20%20%20-%20%5Bbridge-token%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-token-connector%2Ftree%2Fmaster%2Fbridge-token)%3A%20Token%20functions%20on%20NEAR%20including%20but%20not%20limited%20to%20%60mint%60%20and%20%60withdraw%60%0A%20%20%20%20-%20%5Btoken-locker%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-token-connector%2Ftree%2Fmaster%2Ftoken-locker)%3A%20Token%20Locker%20functions%20on%20NEAR%20including%20but%20not%20limited%20to%20%60withdraw%60%2C%20%60finish_deposit%60%2C%20%60is_used_proof%60%0A%20%20-%20Ethereum%20solidity%20based%20contracts%0A%20%20%20%20-%20%5Berc20-bridge-token%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-token-connector%2Ftree%2Fmaster%2Ferc20-bridge-token)%3A%20Ethereum%20Bridge%20token%20contracts%20including%20but%20not%20limited%20to%0A%20%20%20%20%20%20-%20%5BBridgeToken.sol%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-token-connector%2Fblob%2Fmaster%2Ferc20-bridge-token%2Fcontracts%2FBridgeToken.sol)%0A%20%20%20%20%20%20-%20%5BBridgeTokenFactory.sol%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-token-connector%2Fblob%2Fmaster%2Ferc20-bridge-token%2Fcontracts%2FBridgeTokenFactory.sol)%0A%20%20%20%20%20%20-%20%5BBridgeTokenProxy.sol%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-token-connector%2Fblob%2Fmaster%2Ferc20-bridge-token%2Fcontracts%2FBridgeTokenProxy.sol)%0A%20%20%20%20%20%20-%20%5BProofConsumer.sol%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-token-connector%2Fblob%2Fmaster%2Ferc20-bridge-token%2Fcontracts%2FProofConsumer.sol)%0A%20%20%20%20%20%20-%20%5BResultsDecoder%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-token-connector%2Fblob%2Fmaster%2Ferc20-bridge-token%2Fcontracts%2FResultsDecoder.sol)%0A%20%20%20%20-%20%5Berc20-connector%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-token-connector%2Ftree%2Fmaster%2Ferc20-connector)%3A%20has%20%5BERC20Locker.sol%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-token-connector%2Fblob%2Fmaster%2Ferc20-connector%2Fcontracts%2FERC20Locker.sol)%20which%20is%20used%20to%20lock%20and%20unlock%20tokens.%20It%20is%20linked%20to%20the%20bridge%20token%20factory%20on%20NEAR%20side.%20It%20also%20links%20to%20the%20prover%20that%20it%20uses%20to%20unlock%20the%20tokens.%20(see%20%5Bhere%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Ftree%2Fmaster%2Fcontracts%2Feth%2Fnearbridge%2Fcontracts))%0A%0A%23%23%23%20Appendix%20I%20-%20NEAR%20Rainbow%20Bridge%3A%20Component%20Overview%0A%0AThe%20following%20smart%20contracts%20are%20deployed%20on%20NEAR%20and%20work%20in%20conjunction%20with%20eth2near%20bridging%20functionality%20to%20propogate%20blocks%20from%20Ethereum%20to%20NEAR.%0A%0A**%5C*Note**%20here%20we%20will%20focus%20on%20the%20%60eth2-client%60%20for%20ETH%202.0%20Proof%20of%20Stake%20Bridging%20however%20if%20interested%20in%20however%20there%20is%20also%20an%20%60eth-client%60%20which%20was%20used%20for%20ETH%201.0%20Proof%20of%20Work%20Integration%20using%20%5Brust-ethhash%5D(https%3A%2F%2Fgithub.com%2Fnearprotocol%2Frust-ethash).%5C*%0A%0A-%20%5BSmart%20Contracts%20Deployed%20on%20NEAR%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Ftree%2Fmaster%2Fcontracts%2Fnear)%0A%20%20-%20%5Beth2-client%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Ftree%2Fmaster%2Fcontracts%2Fnear%2Feth2-client)%20implements%20the%20Ethereum%20Light%20Client%20on%20Near%0A%20%20%20%20-%20it%20provides%20functions%20including%20but%20not%20limited%20to%3A%0A%20%20%20%20%20%20-%20validate%20the%20light%20client%0A%20%20%20%20%20%20-%20verify%20the%20finality%20branch%0A%20%20%20%20%20%20-%20verify%20bls%20signatures%0A%20%20%20%20%20%20-%20update%20finalized%20headers%0A%20%20%20%20%20%20-%20updates%20the%20submittes%0A%20%20%20%20%20%20-%20prune%20finalized%20blocks.%0A%20%20%20%20-%20It%20interacts%20with%20the%20beach%20chain%2C%20uses%20%5BBorsh%5D(https%3A%2F%2Fborsh.io%2F)%20for%20serialization%20and%20%5Blighthouse%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Flighthouse)%20for%20Ethereum%202.0%20Consensus%20and%20tree_hash%20functions%20as%20well%20as%20bls%20signatures.%20See%20%5Bhere%5D(https%3A%2F%2Flighthouse-book.sigmaprime.io%2F)%20for%20more%20information%20on%20lighthouse.%20Below%20is%20a%20list%20of%20dependencies%20from%20%5Beth2-client%2FCargo.toml%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Fblob%2Fmaster%2Fcontracts%2Fnear%2Feth2-client%2FCargo.toml)%0A%0A%20%20%20%20%20%20%20%20%20%20%20%20%60%60%60%0A%20%20%20%20%20%20%20%20%20%20%20%20%5Bdependencies%5D%0A%20%20%20%20%20%20%20%20%20%20%20%20ethereum-types%20%3D%20%220.9.2%22%0A%20%20%20%20%20%20%20%20%20%20%20%20eth-types%20%3D%20%20%7B%20path%20%3D%20%22..%2Feth-types%22%20%7D%0A%20%20%20%20%20%20%20%20%20%20%20%20eth2-utility%20%3D%20%20%7B%20path%20%3D%20%22..%2Feth2-utility%22%20%7D%0A%20%20%20%20%20%20%20%20%20%20%20%20tree_hash%20%3D%20%7B%20git%20%3D%20%22https%3A%2F%2Fgithub.com%2Faurora-is-near%2Flighthouse.git%22%2C%20rev%20%3D%20%22b624c3f0d3c5bc9ea46faa14c9cb2d90ee1e1dec%22%20%7D%0A%20%20%20%20%20%20%20%20%20%20%20%20merkle_proof%20%3D%20%7B%20git%20%3D%20%22https%3A%2F%2Fgithub.com%2Faurora-is-near%2Flighthouse.git%22%2C%20rev%20%3D%20%22b624c3f0d3c5bc9ea46faa14c9cb2d90ee1e1dec%22%20%7D%0A%20%20%20%20%20%20%20%20%20%20%20%20bls%20%3D%20%7B%20git%20%3D%20%22https%3A%2F%2Fgithub.com%2Faurora-is-near%2Flighthouse.git%22%2C%20optional%20%3D%20true%2C%20rev%20%3D%20%22b624c3f0d3c5bc9ea46faa14c9cb2d90ee1e1dec%22%2C%20default-features%20%3D%20false%2C%20features%20%3D%20%5B%22milagro%22%5D%7D%0A%20%20%20%20%20%20%20%20%20%20%20%20admin-controlled%20%3D%20%20%7B%20path%20%3D%20%22..%2Fadmin-controlled%22%20%7D%0A%20%20%20%20%20%20%20%20%20%20%20%20near-sdk%20%3D%20%224.0.0%22%0A%20%20%20%20%20%20%20%20%20%20%20%20borsh%20%3D%20%220.9.3%22%0A%20%20%20%20%20%20%20%20%20%20%20%20bitvec%20%3D%20%221.0.0%22%0A%20%20%20%20%20%20%20%20%20%20%20%20%60%60%60%0A%0A-%20%5Beth2near%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Ftree%2Fmaster%2Feth2near)%20supports%20the%20relaying%20of%20blocks%20and%20the%20verification%20of%20finality%20between%20etherum%20and%20Near.%20It%20has%20the%20following%20components%0A%20%20-%20%5Bcontract_wrapper%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Ftree%2Fmaster%2Feth2near%2Fcontract_wrapper)%3A%20provides%20rust%20wrappers%20for%20interacting%20with%20the%20%5Bsolidity%20contracts%20on%20near%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Ftree%2Fmaster%2Fcontracts%2Fnear)%0A%20%20%20%20-%20Contracts%20include%20(from%20%5B%60lib.rs%60%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Fblob%2Fmaster%2Feth2near%2Fcontract_wrapper%2Fsrc%2Flib.rs))%0A%0A%20%20%20%20%20%20%20%20%20%20%20%20%60%60%60%0A%20%20%20%20%20%20%20%20%20%20%20%20pub%20mod%20contract_wrapper_trait%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20pub%20mod%20dao_contract%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20pub%20mod%20dao_eth_client_contract%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20pub%20mod%20dao_types%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20pub%20mod%20errors%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20pub%20mod%20eth_client_contract%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20pub%20mod%20eth_client_contract_trait%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20pub%20mod%20file_eth_client_contract%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20pub%20mod%20near_contract_wrapper%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20pub%20mod%20sandbox_contract_wrapper%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20pub%20mod%20utils%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20%60%60%60%0A%0A%20%20%20%20-%20Dependencies%20include%20(from%20%5Bcontract_wrapper%2FCargo.toml%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Fblob%2Fmaster%2Feth2near%2Fcontract_wrapper%2FCargo.toml))%0A%0A%20%20%20%20%20%20%20%20%20%20%20%20%60%60%60%0A%20%20%20%20%20%20%20%20%20%20%20%20%5Bdependencies%5D%0A%20%20%20%20%20%20%20%20%20%20%20%20borsh%20%3D%20%220.9.3%22%0A%20%20%20%20%20%20%20%20%20%20%20%20futures%20%3D%20%220.3.21%22%0A%20%20%20%20%20%20%20%20%20%20%20%20async-std%20%3D%20%221.12.0%22%0A%20%20%20%20%20%20%20%20%20%20%20%20near-sdk%20%3D%20%224.0.0%22%0A%20%20%20%20%20%20%20%20%20%20%20%20near-jsonrpc-client%20%3D%20%22%3D0.4.0-beta.0%22%0A%20%20%20%20%20%20%20%20%20%20%20%20near-crypto%20%3D%20%220.14.0%22%0A%20%20%20%20%20%20%20%20%20%20%20%20near-primitives%20%3D%20%220.14.0%22%0A%20%20%20%20%20%20%20%20%20%20%20%20near-chain-configs%20%3D%20%220.14.0%22%0A%20%20%20%20%20%20%20%20%20%20%20%20near-jsonrpc-primitives%20%3D%20%220.14.0%22%0A%20%20%20%20%20%20%20%20%20%20%20%20tokio%20%3D%20%7B%20version%20%3D%20%221.1%22%2C%20features%20%3D%20%5B%22rt%22%2C%20%22macros%22%5D%20%7D%0A%20%20%20%20%20%20%20%20%20%20%20%20reqwest%20%3D%20%7B%20version%20%3D%20%220.11%22%2C%20features%20%3D%20%5B%22blocking%22%5D%20%7D%0A%20%20%20%20%20%20%20%20%20%20%20%20serde_json%20%3D%20%221.0.74%22%0A%20%20%20%20%20%20%20%20%20%20%20%20serde%20%3D%20%7B%20version%20%3D%20%221.0%22%2C%20features%20%3D%20%5B%22derive%22%5D%20%7D%0A%20%20%20%20%20%20%20%20%20%20%20%20eth-types%20%3D%20%7B%20path%20%3D%20%22..%2F..%2Fcontracts%2Fnear%2Feth-types%2F%22%2C%20features%20%3D%20%5B%22eip1559%22%5D%7D%0A%20%20%20%20%20%20%20%20%20%20%20%20workspaces%20%3D%20%220.5.0%22%0A%20%20%20%20%20%20%20%20%20%20%20%20anyhow%20%3D%20%221.0%22%0A%20%20%20%20%20%20%20%20%20%20%20%20%60%60%60%0A%0A%20%20-%20%5Beth2near-block-relay-rs%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Ftree%2Fmaster%2Feth2near%2Feth2near-block-relay-rs)%20is%20built%20in%20rust%20and%20integrates%20with%20the%20Ethereum%202.0%20lgihthouse%20consensus%20client%20to%20propogate%20blocks%20to%20near.%0A%20%20%20%20-%20Functionality%20includes%20(from%20%5Blib.rs%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Fblob%2Fmaster%2Feth2near%2Feth2near-block-relay-rs%2Fsrc%2Flib.rs))%0A%0A%20%20%20%20%20%20%20%20%20%20%20%20%60%60%60%0A%20%20%20%20%20%20%20%20%20%20%20%20pub%20mod%20beacon_block_body_merkle_tree%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20pub%20mod%20beacon_rpc_client%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20pub%20mod%20config%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20pub%20mod%20eth1_rpc_client%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20pub%20mod%20eth2near_relay%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20pub%20mod%20execution_block_proof%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20pub%20mod%20hand_made_finality_light_client_update%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20pub%20mod%20init_contract%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20pub%20mod%20last_slot_searcher%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20pub%20mod%20light_client_snapshot_with_proof%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20pub%20mod%20logger%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20pub%20mod%20near_rpc_client%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20pub%20mod%20prometheus_metrics%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20pub%20mod%20relay_errors%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20%60%60%60%0A%0A%20%20%20%20-%20Dependencies%20include%20(from%20%5Beth2near-block-relay-rs%2FCargo.toml%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Fblob%2Fmaster%2Feth2near%2Feth2near-block-relay-rs%2FCargo.toml))%0A%0A%20%20%20%20%20%20%20%20%20%20%20%20%60%60%60%0A%20%20%20%20%20%20%20%20%20%20%20%20types%20%3D%20%20%7B%20git%20%3D%20%22https%3A%2F%2Fgithub.com%2Faurora-is-near%2Flighthouse.git%22%2C%20rev%20%3D%20%22b624c3f0d3c5bc9ea46faa14c9cb2d90ee1e1dec%22%20%7D%0A%20%20%20%20%20%20%20%20%20%20%20%20tree_hash%20%3D%20%7B%20git%20%3D%20%22https%3A%2F%2Fgithub.com%2Faurora-is-near%2Flighthouse.git%22%2C%20%20rev%20%3D%20%22b624c3f0d3c5bc9ea46faa14c9cb2d90ee1e1dec%22%20%7D%0A%20%20%20%20%20%20%20%20%20%20%20%20merkle_proof%20%3D%20%7B%20git%20%3D%20%22https%3A%2F%2Fgithub.com%2Faurora-is-near%2Flighthouse.git%22%2C%20rev%20%3D%20%22b624c3f0d3c5bc9ea46faa14c9cb2d90ee1e1dec%22%20%7D%0A%20%20%20%20%20%20%20%20%20%20%20%20eth2_hashing%20%3D%20%7B%20git%20%3D%20%22https%3A%2F%2Fgithub.com%2Faurora-is-near%2Flighthouse.git%22%2C%20rev%20%3D%20%22b624c3f0d3c5bc9ea46faa14c9cb2d90ee1e1dec%22%20%7D%0A%20%20%20%20%20%20%20%20%20%20%20%20eth2_ssz%20%3D%20%7B%20git%20%3D%20%22https%3A%2F%2Fgithub.com%2Faurora-is-near%2Flighthouse.git%22%2C%20rev%20%3D%20%22b624c3f0d3c5bc9ea46faa14c9cb2d90ee1e1dec%22%20%7D%0A%0A%20%20%20%20%20%20%20%20%20%20%20%20eth-types%20%3D%20%7B%20path%20%3D%20%22..%2F..%2Fcontracts%2Fnear%2Feth-types%2F%22%2C%20features%20%3D%20%5B%22eip1559%22%5D%7D%0A%20%20%20%20%20%20%20%20%20%20%20%20eth2-utility%20%20%3D%20%7B%20path%20%3D%20%22..%2F..%2Fcontracts%2Fnear%2Feth2-utility%22%20%7D%0A%0A%20%20%20%20%20%20%20%20%20%20%20%20contract_wrapper%20%3D%20%7B%20path%20%3D%20%22..%2Fcontract_wrapper%22%20%7D%0A%20%20%20%20%20%20%20%20%20%20%20%20finality-update-verify%20%3D%20%7B%20path%20%3D%20%22..%2Ffinality-update-verify%22%20%7D%0A%0A%20%20%20%20%20%20%20%20%20%20%20%20log%20%3D%20%7B%20version%20%3D%20%220.4%22%2C%20features%20%3D%20%5B%22std%22%2C%20%22serde%22%5D%20%7D%0A%20%20%20%20%20%20%20%20%20%20%20%20serde_json%20%3D%20%221.0.74%22%0A%20%20%20%20%20%20%20%20%20%20%20%20serde%20%3D%20%7B%20version%20%3D%20%221.0%22%2C%20features%20%3D%20%5B%22derive%22%5D%20%7D%0A%20%20%20%20%20%20%20%20%20%20%20%20ethereum-types%20%3D%20%220.9.2%22%0A%20%20%20%20%20%20%20%20%20%20%20%20reqwest%20%3D%20%7B%20version%20%3D%20%220.11%22%2C%20features%20%3D%20%5B%22blocking%22%5D%20%7D%0A%20%20%20%20%20%20%20%20%20%20%20%20clap%20%3D%20%7B%20version%20%3D%20%223.1.6%22%2C%20features%20%3D%20%5B%22derive%22%5D%20%7D%0A%20%20%20%20%20%20%20%20%20%20%20%20tokio%20%3D%20%7B%20version%20%3D%20%221.1%22%2C%20features%20%3D%20%5B%22macros%22%2C%20%22rt%22%2C%20%22time%22%5D%20%7D%0A%20%20%20%20%20%20%20%20%20%20%20%20env_logger%20%3D%20%220.9.0%22%0A%20%20%20%20%20%20%20%20%20%20%20%20borsh%20%3D%20%220.9.3%22%0A%20%20%20%20%20%20%20%20%20%20%20%20near-sdk%20%3D%20%224.0.0%22%0A%20%20%20%20%20%20%20%20%20%20%20%20futures%20%3D%20%7B%20version%20%3D%20%220.3.21%22%2C%20default-features%20%3D%20false%20%7D%0A%20%20%20%20%20%20%20%20%20%20%20%20async-std%20%3D%20%221.12.0%22%0A%20%20%20%20%20%20%20%20%20%20%20%20hex%20%3D%20%22*%22%0A%20%20%20%20%20%20%20%20%20%20%20%20toml%20%3D%20%220.5.9%22%0A%20%20%20%20%20%20%20%20%20%20%20%20atomic_refcell%20%3D%20%220.1.8%22%0A%20%20%20%20%20%20%20%20%20%20%20%20bitvec%20%3D%20%22*%22%0A%20%20%20%20%20%20%20%20%20%20%20%20primitive-types%20%3D%20%220.7.3%22%0A%0A%20%20%20%20%20%20%20%20%20%20%20%20near-jsonrpc-client%20%3D%20%22%3D0.4.0-beta.0%22%0A%20%20%20%20%20%20%20%20%20%20%20%20near-crypto%20%3D%20%220.14.0%22%0A%20%20%20%20%20%20%20%20%20%20%20%20near-primitives%20%3D%20%220.14.0%22%0A%20%20%20%20%20%20%20%20%20%20%20%20near-chain-configs%20%3D%20%220.14.0%22%0A%20%20%20%20%20%20%20%20%20%20%20%20near-jsonrpc-primitives%20%3D%20%220.14.0%22%0A%0A%20%20%20%20%20%20%20%20%20%20%20%20prometheus%20%3D%20%7B%20version%20%3D%20%220.9%22%2C%20features%20%3D%20%5B%22process%22%5D%20%7D%0A%20%20%20%20%20%20%20%20%20%20%20%20lazy_static%20%3D%20%221.4%22%0A%20%20%20%20%20%20%20%20%20%20%20%20warp%20%3D%20%220.2%22%0A%20%20%20%20%20%20%20%20%20%20%20%20thread%20%3D%20%22*%22%0A%0A%20%20%20%20%20%20%20%20%20%20%20%20%60%60%60%0A%0A%20%20-%20%5Beth2near-block-relay%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Ftree%2Fmaster%2Feth2near%2Feth2near-block-relay)%20is%20built%20using%20javascript%20and%20supports%20ETH%201.0%20Proof%20of%20Work%20(%60ethhash%60)%20using%20merkle%20patrica%20trees.%0A%20%20%20%20-%20key%20classes%20from%20%5Bindex.js%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Fblob%2Fmaster%2Feth2near%2Feth2near-block-relay%2Findex.js)%20include%0A%20%20%20%20%20%20-%20%60Ethashproof%60%20%3A%20which%20has%20functions%20to%20%60getParseBlock%60%20and%20%60calculateNextEpoch%60%0A%20%20%20%20%20%20-%20%60Eth2NearRelay%60%20%3A%20which%20interacts%20with%20the%20%60ethClientContract%60%20and%20has%20a%20%60run()%60%20function%20which%20loops%20through%20relaying%20blocks%20and%20includes%20additional%20functions%20such%20as%20%60getParseBlock%60%20%2C%20%60submitBlock%60%0A%20%20%20%20-%20Dependencies%20include%20(from%20%5Bpackage.json%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Fblob%2Fmaster%2Feth2near%2Feth2near-block-relay%2Fpackage.json))%0A%0A%20%20%20%20%20%20%20%20%20%20%20%20%60%60%60%0A%20%20%20%20%20%20%20%20%20%20%20%20%22dependencies%22%3A%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%22bn.js%22%3A%20%22%5E5.1.3%22%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%22eth-object%22%3A%20%22https%3A%2F%2Fgithub.com%2Fnear%2Feth-object%23383b6ea68c7050bea4cab6950c1d5a7fa553e72b%22%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%22eth-util-lite%22%3A%20%22near%2Feth-util-lite%23master%22%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%22%40ethereumjs%2Fblock%22%3A%20%22%5E3.4.0%22%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%22merkle-patricia-tree%22%3A%20%22%5E2.1.2%22%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%22prom-client%22%3A%20%22%5E12.0.0%22%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%22promisfy%22%3A%20%22%5E1.2.0%22%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%22rainbow-bridge-utils%22%3A%20%221.0.0%22%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%22got%22%3A%20%22%5E11.8.5%22%0A%20%20%20%20%20%20%20%20%20%20%20%20%7D%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20%60%60%60%0A%0A%20%20-%20%5Bethhashproof%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Ftree%2Fmaster%2Feth2near%2Fethashproof)%3A%20is%20a%20commandline%20to%20calculate%20proof%20data%20for%20an%20ethash%20POW%2C%20it%20is%20used%20by%20project%20%60SmartPool%60%20and%20a%20decentralizedbridge%20between%20Etherum%20and%20EOS%20developed%20by%20Kyber%20Network%20team.%20It%20is%20written%20in%20%60GO%60.%0A%20%20%20%20-%20Features%20Include%201.%20Calculate%20merkle%20root%20of%20the%20ethash%20dag%20dataset%20with%20given%20epoch%202.%20Calculate%20merkle%20proof%20of%20the%20pow%20(dataset%20elements%20and%20their%20merkle%20proofs)%20given%20the%20pow%20submission%20with%20given%20block%20header%203.%20Generate%20dag%20datase%0A%20%20%20%20-%20Dependencies%20include%20(from%20%5Bethahsproof%2Fgo.mod%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Fblob%2Fmaster%2Feth2near%2Fethashproof%2Fgo.mod))%0A%0A%20%20%20%20%20%20%20%20%20%20%20%20%60%60%60%0A%20%20%20%20%20%20%20%20%20%20%20%20require%20(%0A%20%20%20%20%20%20%20%20%20%20%20%20%20github.com%2Fdeckarep%2Fgolang-set%20v1.7.1%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20github.com%2Fedsrzf%2Fmmap-go%20v1.0.0%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20github.com%2Fethereum%2Fgo-ethereum%20v1.10.4%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20github.com%2Fhashicorp%2Fgolang-lru%20v0.5.5-0.20210104140557-80c98217689d%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20golang.org%2Fx%2Fcrypto%20v0.0.0-20210322153248-0c34fe9e7dc2%0A%20%20%20%20%20%20%20%20%20%20%20%20)%0A%20%20%20%20%20%20%20%20%20%20%20%20%60%60%60%0A%0A%20%20-%20%5Bfinality-update-verify%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Ftree%2Fmaster%2Feth2near%2Ffinality-update-verify)%20checks%20and%20updates%20finality%20using%20the%20lighthouse%20beacon%20blocks.%0A%20%20%20%20-%20Functions%20include%20(from%20%5Blib.rs%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Fblob%2Fmaster%2Feth2near%2Ffinality-update-verify%2Fsrc%2Flib.rs))%0A%20%20%20%20%20%20-%20%60fn%20h256_to_hash256(hash%3A%20H256)%20-%3E%20Hash256%60%0A%20%20%20%20%20%20-%20%60fn%20tree_hash_h256_to_eth_type_h256(hash%3A%20tree_hash%3A%3AHash256)%20-%3E%20eth_types%3A%3AH256%60%0A%20%20%20%20%20%20-%20%60fn%20to_lighthouse_beacon_block_header(bridge_beacon_block_header%3A%20%26BeaconBlockHeader%2C)%20-%3E%20types%3A%3ABeaconBlockHeader%20%7Btypes%3A%3ABeaconBlockHeader%60%0A%20%20%20%20%20%20-%20%60pub%20fn%20is_correct_finality_update(ethereum_network%3A%20%26str%2C%20light_client_update%3A%20%26LightClientUpdate%2C%20sync_committee%3A%20SyncCommittee%2C%20)%20-%3E%20Result%3Cbool%2C%20Box%3Cdyn%20Error%3E%3E%60%0A%20%20%20%20-%20Dependencies%20include%20(from%20%5Bfinality-update-verify%2FCargo.toml%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Fblob%2Fmaster%2Feth2near%2Ffinality-update-verify%2FCargo.toml))%0A%0A%20%20%20%20%20%20%20%20%20%20%20%20%60%60%60%0A%20%20%20%20%20%20%20%20%20%20%20%20%5Bdependencies%5D%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20eth-types%20%3D%20%7B%20path%20%3D%22..%2F..%2Fcontracts%2Fnear%2Feth-types%2F%22%2C%20features%20%3D%20%5B%22eip1559%22%5D%7D%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20bls%20%3D%20%7B%20git%20%3D%20%22https%3A%2F%2Fgithub.com%2Faurora-is-near%2Flighthouse.git%22%2C%20rev%20%3D%20%22b624c3f0d3c5bc9ea46faa14c9cb2d90ee1e1dec%22%20%7D%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20eth2-utility%20%20%3D%20%7B%20path%20%3D%22..%2F..%2Fcontracts%2Fnear%2Feth2-utility%22%7D%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20tree_hash%20%3D%20%7B%20git%20%3D%20%22https%3A%2F%2Fgithub.com%2Faurora-is-near%2Flighthouse.git%22%2C%20rev%20%3D%20%22b624c3f0d3c5bc9ea46faa14c9cb2d90ee1e1dec%22%20%7D%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20types%20%3D%20%20%7B%20git%20%3D%20%22https%3A%2F%2Fgithub.com%2Faurora-is-near%2Flighthouse.git%22%2C%20rev%20%3D%20%22b624c3f0d3c5bc9ea46faa14c9cb2d90ee1e1dec%22%20%7D%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20bitvec%20%3D%20%221.0.0%22%0A%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%5Bdev-dependencies%5D%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20eth2_to_near_relay%20%3D%20%7B%20path%20%3D%20%22..%2Feth2near-block-relay-rs%22%7D%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20serde_json%20%3D%20%221.0.74%22%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20serde%20%3D%20%7B%20version%20%3D%20%221.0%22%2C%20features%20%3D%20%5B%22derive%22%5D%20%7D%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20toml%20%3D%20%220.5.9%22%0A%20%20%20%20%20%20%20%20%20%20%20%20%60%60%60%0A%0AThe%20following%20smart%20contracts%20are%20deployed%20on%20Ethereum%20and%20used%20for%20propogating%20blocks%20from%20NEAR%20to%20Ethereum.%0A%0A-%20%5BSmart%20Contracts%20deployed%20on%20Ethereum%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Ftree%2Fmaster%2Fcontracts%2Feth)%20including%0A%20%20-%20%5BNear%20Bridge%20Contracts%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Ftree%2Fmaster%2Fcontracts%2Feth%2Fnearbridge%2Fcontracts)%20including%20%5BNearBridge.sol%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Fblob%2Fmaster%2Fcontracts%2Feth%2Fnearbridge%2Fcontracts%2FNearBridge.sol)%20which%20the%20interface%20%5BINearBridge.sol%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Fblob%2Fmaster%2Fcontracts%2Feth%2Fnearbridge%2Fcontracts%2FINearBridge.sol)%0A%20%20-%20Interface%20Overview%0A%0A%20%20%20%20%20%20%20%20%60%60%60%0A%20%20%20%20%20%20%20%20interface%20INearBridge%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20event%20BlockHashAdded(uint64%20indexed%20height%2C%20bytes32%20blockHash)%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20event%20BlockHashReverted(uint64%20indexed%20height%2C%20bytes32%20blockHash)%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20function%20blockHashes(uint64%20blockNumber)%20external%20view%20returns%20(bytes32)%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20function%20blockMerkleRoots(uint64%20blockNumber)%20external%20view%20returns%20(bytes32)%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20function%20balanceOf(address%20wallet)%20external%20view%20returns%20(uint256)%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20function%20deposit()%20external%20payable%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20function%20withdraw()%20external%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20function%20initWithValidators(bytes%20calldata%20initialValidators)%20external%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20function%20initWithBlock(bytes%20calldata%20data)%20external%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20function%20addLightClientBlock(bytes%20calldata%20data)%20external%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20function%20challenge(address%20payable%20receiver%2C%20uint256%20signatureIndex)%20external%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20function%20checkBlockProducerSignatureInHead(uint256%20signatureIndex)%20external%20view%20returns%20(bool)%3B%0A%20%20%20%20%20%20%20%20%7D%0A%20%20%20%20%20%20%20%20%60%60%60%0A%0A%20%20-%20Key%20Storage%20items%20for%20epoch%20and%20block%20information%0A%0A%20%20%20%20%20%20%20%20%60%60%60%0A%20%20%20%20%20%20%20%20%20%20%20%20Epoch%5B3%5D%20epochs%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20uint256%20curEpoch%3B%0A%0A%20%20%20%20%20%20%20%20%20%20%20%20mapping(uint64%20%3D%3E%20bytes32)%20blockHashes_%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20mapping(uint64%20%3D%3E%20bytes32)%20blockMerkleRoots_%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20mapping(address%20%3D%3E%20uint256)%20public%20override%20balanceOf%3B%0A%20%20%20%20%20%20%20%20%60%60%60%0A%0A%20%20-%20Signing%20and%20Serializing%20Primitives%0A%20%20%20%20-%20%5BNearDecoder.sol%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Fblob%2Fmaster%2Fcontracts%2Feth%2Fnearbridge%2Fcontracts%2FNearDecoder.sol)%3A%20handles%20decoing%20of%20Public%20Keys%2C%20Signatures%2C%20BlockProducers%20and%20LightClientBlocks%20using%20%60Borsh.sol%60%0A%20%20%20%20-%20%5BUtils.sol%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Fblob%2Fmaster%2Fcontracts%2Feth%2Fnearbridge%2Fcontracts%2FUtils.sol)%3A%20handles%20reading%20and%20writing%20to%20memory%2C%20memoryToBytes%20and%20has%20functions%20such%20as%20%60keccak256Raw%60%20and%20%60sha256Raw%60%0A%20%20%20%20-%20%5BBorsh.sol%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Fblob%2Fmaster%2Fcontracts%2Feth%2Fnearbridge%2Fcontracts%2FBorsh.sol)%3A%20%5BBorsh%5D(https%3A%2F%2Fborsh.io%2F)%3A%20Binary%20Object%20Representation%20Serializer%20for%20Hashing.%20It%20is%20meant%20to%20be%20used%20in%20security-critical%20projects%20as%20it%20prioritizes%20consistency%2C%20safety%2C%20speed%3B%20and%20comes%20with%20a%20strict%20specification.%0A%20%20%20%20-%20%5BEd25519.sol%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Fblob%2Fmaster%2Fcontracts%2Feth%2Fnearbridge%2Fcontracts%2FEd25519.sol)%3A%20%5BEd25519%5D(https%3A%2F%2Fed25519.cr.yp.to%2F)%20high-speed%20high-security%20signatures%0A%0A%20%20-%20%5BNear%20Prover%20Contracts%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Ftree%2Fmaster%2Fcontracts%2Feth%2Fnearprover%2Fcontracts)%0A%20%20%20%20-%20%5BNearProver.sol%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Fblob%2Fmaster%2Fcontracts%2Feth%2Fnearprover%2Fcontracts%2FNearProver.sol)%3A%20Has%20a%20%60proveOutcome%60%20which%20validates%20the%20outcome%20merkle%20proof%20and%20the%20block%20proof%20is%20valid%20using%20%60_computeRoot%60%20which%20is%20passed%20in%20a%20%60bytes32%20node%2C%20ProofDecoder.MerklePath%20memory%20proof%60%0A%20%20%20%20-%20%5BProofDecoder.sol%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Fblob%2Fmaster%2Fcontracts%2Feth%2Fnearprover%2Fcontracts%2FProofDecoder.sol)%3A%20Uses%20MerklePaths%20to%20provide%20decoding%20functions%20such%20as%20%60decodeExecutionStatus%60%2C%20%60decodeExecutionOutcome%60%2C%20%60decodeExecutionOutcomeWithId%60%2C%20%60decodeMerklePathItem%60%2C%20%60decodeMerklePath%60%20and%20%60decodeExecutionOutcomeWithIdAndProof%60.%20It%20relies%20on%20the%20primitives%20%60Borsh.sol%60%20and%20%60NearDecoder.sol%60%20above.%0A%0A%23%23%23%20Appendix%20J%20-%20Ethereum%20to%20NEAR%20Walkthrough%0A%0AFollowing%20is%20a%20walkthough%20of%20a%20funds%20transfer%20from%20Ethereum%20to%20a%20target%20chain%20(In%20this%20example%20Near)%2C%20complete%20with%20light%20client%20updates%2C%20block%20propogation%20and%20proofs%20to%20ensure%20the%20transaction%20validity.%0A%0A!%5BEthereum%20to%20Near%20Funds%20Transfer%5D(%2Fassets%2Fposts%2F2023-02-05-ethereum-bridging-costs%2Feth2NearFundsTransfer.jpg%20%22Ethereum%20to%20NEAR%20Funds%20Transfer%22)%0A%0A**Actors**%0AFrom%20the%20diagram%20above%20you'll%20notice%20that%20there%20are%20many%20actors%20involved%2C%20below%20is%20an%20overview%20of%20the%20actors%20and%20the%20operations%20they%20perform.%0A%0A-%20Accounts%0A%20%20-%20%5BUser%20Account%5D(https%3A%2F%2Fetherscan.io%2Faddress%2F0x29da2ef94deeaf2d2f9003e9354abfcb1ff04b32)%20%3A%20The%20user%20is%20the%20owner%20of%20the%20funds%20being%20transferred%20and%20is%20responsible%20for%20signing%20the%20transactions%20to%20authorize%20bridging%20them%20accross%20chains.%20In%20this%20example%20they%20have%20accounts%20on%20%5BEthereum%5D(https%3A%2F%2Fetherscan.io%2Faddress%2F0x29da2ef94deeaf2d2f9003e9354abfcb1ff04b32)%20and%20%5BNEAR%5D(https%3A%2F%2Fnearblocks.io%2Faddress%2Fjohnrubini.near%23tokentxns)%0A%20%20-%20%5BTarget%20Chain%20Relayer%20Acccount%5D(https%3A%2F%2Fnearblocks.io%2Faddress%2Frelayer.bridge.near)%3A%20The%20relayer%20account%20is%20responsible%20for%20relaying%20messages%20from%20Ethereum%20to%20the%20target%20chain.%20%5C*Note%20this%20is%20connected%20to%20a%20relayer%20which%20is%20responsible%20for%20tasks%20such%20as%20querying%20latest%20block%20headers%20and%20getting%20light%20client%20status%20updates.%20Source%20code%20is%20%5Bhere%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Ftree%2Fmaster%2Feth2near%2Feth2near-block-relay-rs).%0A%20%20-%20%5BTarget%20Chain%20Bridge%20Validator%20Accounts%5D(https%3A%2F%2Fnearblocks.io%2Faddress%2Fbridge-validator1.near)%3A%20are%20responsible%20for%20validating%20light%20client%20update%20proposals%20and%20sending%20approval%20votes%20to%20%5BDAO%20Eth%20Client%20Contract%5D(https%3A%2F%2Fnearblocks.io%2Faddress%2Fbridge-validator.sputnik-dao.near).%0A-%20Ethereum%20Components%0A%20%20-%20%5BERC20%20Token%20Contract%5D(https%3A%2F%2Fetherscan.io%2Faddress%2F0xdac17f958d2ee523a2206206994597c13d831ec7%23code)%3A%20this%20is%20the%20token%20contract%20securing%20the%20funds%20in%20this%20examle%20USDT%20(Tether).%20Source%20code%20is%20%5Bhere%5D(https%3A%2F%2Fgithub.com%2FOpenZeppelin%2Fopenzeppelin-contracts%2Fblob%2Frelease-v4.8%2Fcontracts%2Ftoken%2FERC20%2Fpresets%2FERC20PresetMinterPauser.sol)%0A%20%20-%20%5BBridge%20Contract%5D(https%3A%2F%2Fetherscan.io%2Faddress%2F0x23ddd3e3692d1861ed57ede224608875809e127f%23code)%3A%20Responsible%20for%20deposits%20and%20withdrawals%20of%20tokens%20on%20Ethereum%20as%20well%20as%20various%20proving%20and%20propogation%20mechanisms%20such%20as%20checking%20of%20Signatures%20and%20adding%20Light%20Client%20Blocks.%20Source%20code%20is%20%5Bhere%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Fblob%2Fmaster%2Fcontracts%2Feth%2Fnearbridge%2Fcontracts%2FNearBridge.sol)%0A-%20Target%20Chain%20(NEAR)%20Components%0A%20%20-%20%5BValidator%20DAO%20Contract%5D(https%3A%2F%2Fnearblocks.io%2Faddress%2Fbridge-validator.sputnik-dao.near)%3A%20Responsible%20for%20receivng%20light%20client%20update%20proposals%20from%20the%20relayer%20and%20gathering%20approval%20votes%20for%20these%20propoals%20from%20Validators%20and%20submitting%20light%20client%20updates%20once%20the%20proposal%20is%20approved%20by%20the%20Validators.%20Source%20code%20is%20%5Bhere%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Fblob%2Fmaster%2Feth2near%2Fcontract_wrapper%2Fsrc%2Fdao_eth_client_contract.rs)%0A%20%20-%20%5BEtherum%202%20Client%5D(https%3A%2F%2Fnearblocks.io%2Faddress%2Fclient-eth2.bridge.near)%3A%20The%20Ethereum%202%20client%20is%20responsbile%20for%20processing%20light%20client%20updates%20and%20receiving%20execution%20header%20blocks%20from%20Ethereum%20via%20the%20relayer.%20Source%20code%20is%20%5Bhere%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Fblob%2Fmaster%2Fcontracts%2Fnear%2Feth2-client%2Fsrc%2Flib.rs).%20_Note%3A%20this%20replaced%20the%20%5BEthereum%201%20client%5D(https%3A%2F%2Fnearblocks.io%2Faddress%2Fclient.bridge.near)%20source%20code%20%5Bhere%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Fblob%2Fmaster%2Fcontracts%2Fnear%2Feth-client%2Fsrc%2Flib.rs)_%0A%20%20-%20%5BEthereum%20Prover%5D(https%3A%2F%2Fnearblocks.io%2Faddress%2Fprover.bridge.near)%20%3A%20The%20Ethereum%20Prover%20is%20used%20to%20prove%20transactions%20are%20included%20in%20a%20valid%20block%20Header.%20Source%20code%20is%20%5Bhere%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Fblob%2Fmaster%2Fcontracts%2Fnear%2Feth-prover%2Fsrc%2Flib.rs)%0A%20%20-%20%5BBridge%20Contract%5D(https%3A%2F%2Fnearblocks.io%2Faddress%2Ffactory.bridge.near%23contract)%3A%20The%20Bridge%20contract%20is%20responsible%20for%20managing%20tokens%20including%20creating%20new%20tokens%2C%20setting%20metadata%20and%20depositing%20and%20withdrawal%20of%20tokens.%20Source%20code%20is%20%5Bhere%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-token-connector%2Fblob%2Fmaster%2Fbridge-token-factory%2Fsrc%2Flib.rs).%0A%20%20%20%20-%20%5BNEAR%20Token%20Contract%5D(https%3A%2F%2Fnearblocks.io%2Ftoken%2Fdac17f958d2ee523a2206206994597c13d831ec7.factory.bridge.near%3Fa%3Ddac17f958d2ee523a2206206994597c13d831ec7.factory.bridge.near)%3A%20The%20target%20chain%20representation%20of%20the%20token%20(USDT)%20managed%20by%20the%20target%20chain%20bridge%20contract.%0A%0A**Sample%20TransactionFlow**%0A%0A1.%20Block%20Propogation%0A%20%20%201.%20Get%20the%20Latest%20Slot%3A%20The%20relayer%20loops%20polling%20Ethereum%20every%2012%20seconds%20to%20get%20the%20latest%20slot.%20It%20then%20checks%20if%20it%20is%20for%20a%20new%20epoch%20and%20if%20so%20(every%206%20minutes)%20submits%20an%20execution%20header%20(with%2032%20blocks%20in%20it)%20and%20a%20light%20client%20update%20with%20the%20latest%20approved%20epochs%20and%20updated%20sync_comittee.%20Relayer%20source%20code%20for%20the%20loop%20is%20%5Bhere%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Fblob%2Fmaster%2Feth2near%2Feth2near-block-relay-rs%2Fsrc%2Feth2near_relay.rs%23L258)%20for%20retrieving%20the%20latest%20slot%20is%20%5Bhere%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Fblob%2Fmaster%2Feth2near%2Feth2near-block-relay-rs%2Fsrc%2Feth2near_relay.rs%23L163)%2C%20for%20submitting%20execution%20blocks%20is%20%5Bhere%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Fblob%2Fmaster%2Feth2near%2Feth2near-block-relay-rs%2Fsrc%2Feth2near_relay.rs%23L399)%20and%20for%20sending%20light%20client%20updates%20is%20%5Bhere%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Fblob%2Fmaster%2Feth2near%2Feth2near-block-relay-rs%2Fsrc%2Feth2near_relay.rs%23L489).%0A%20%20%20%20%20%201.%20%5BSend%20Block%20Headers%20(submit_execution_header)%5D(https%3A%2F%2Fnearblocks.io%2Ftxns%2FHaXUxCvA1D87QXJzPzSYXmFYNuSLbTmyuxShzWgSLvPM)%3A%20Batch%20transaction%20which%20submits%2032%20block%20headers%20to%20%5Bclient-eth2.bridge.near%5D(https%3A%2F%2Fnearblocks.io%2Faddress%2Fclient-eth2.bridge.near)%20for%20Ethereum%20Blocks%2016493592%20to%2016493623.%20(The%20second%20slot%20in%20epoch%20%5B176%2C936%5D(https%3A%2F%2Fbeaconcha.in%2Fepoch%2F176936)%20to%20the%20first%20slot%20in%20epoch%20%5B176%2C937%5D(https%3A%2F%2Fbeaconcha.in%2Fepoch%2F176937)).%20**Executed%20every%206%20minutes%20when%20the%20first%20slot%20of%20a%20new%20epoch%20is%20found.**%0A%20%20%20%20%20%202.%20%5BCreate%20Light%20Client%20update%20proposal(add_proposal)%5D(https%3A%2F%2Fnearblocks.io%2Ftxns%2FJ1tQ465Dxt4UhWy9Msn2pZCbdkWatSepqsx9sDZaX35z%23)%3A%20calls%20%5Bbridge-validator.sputnik-dao.near%5D(https%3A%2F%2Fnearblocks.io%2Faddress%2Fbridge-validator.sputnik-dao.near)%20to%20add%20proposal%2017410%20for%20%5Bslot%205%2C661%2C984%5D(https%3A%2F%2Fbeaconcha.in%2Fslot%2F5661984)%20in%20epoch%20%5B176%2C937%5D(https%3A%2F%2Fbeaconcha.in%2Fepoch%2F176937).%0A%20%20%202.%20%5BApprove%20Proposal%20(act_proposal)%5D(https%3A%2F%2Fnearblocks.io%2Ftxns%2FD5uP4BbRSUX4ZGijRfWGkR5KbFb2Kb9q1gSsFVQbYSLt)%3A%20sends%20a%20VoteApprove%20action%20for%20proposal%2017410%20from%20a%20%5Bbridge%20validator%5D(https%3A%2F%2Fnearblocks.io%2Faddress%2Fbridge-validator1.near)%20to%20the%20%5BValidator%20DAO%20Contract%5D(https%3A%2F%2Fnearblocks.io%2Faddress%2Fbridge-validator.sputnik-dao.near).%0A%20%20%20%20%20%201.%20act_proposal%20in%20contract%20%5Bbridge-validator.sputnik-dao.near%5D(https%3A%2F%2Fnearblocks.io%2Faddress%2Fbridge-validator.sputnik-dao.near)%0A%20%20%20%20%20%202.%20submit_beacon_chain_light_client_update%20in%20%5Bclient-eth2.bridge.near%5D(https%3A%2F%2Fnearblocks.io%2Faddress%2Fclient-eth2.bridge.near)%0A%20%20%20%20%20%203.%20on_proposal_callback%20in%20contract%20%5Bbridge-validator.sputnik-dao.near%5D(https%3A%2F%2Fnearblocks.io%2Faddress%2Fbridge-validator.sputnik-dao.near)%0A2.%20Funds%20Transfer%20Transaction%20Flow%0A%20%20%201.%20%5BLock%20Funds%20On%20Ethereum%5D(https%3A%2F%2Fetherscan.io%2Ftx%2F0xa685c59a24cc2056e10e660ce8a8bff7bbc335433698e138c77aaadf20ecb614)%3A%20Locking%2010%2C000%20USDT%20to%20send%20to%20user%20on%20NEAR.%0A%20%20%202.%20%5BDeposit%20Funds%20on%20Target%20Chain%20Bridge%20Contract%20(deposit)%5D(https%3A%2F%2Fnearblocks.io%2Ftxns%2FvniyRR67ndrtvpoQ9c5ACoT4e9c283VSQsrZcN6GGto%23execution)%0A%20%20%20%20%20%201.%20deposit%20in%20contract%20factory.bridge.near%0A%20%20%20%20%20%202.%20verify_log_entry%20in%20contract%20prover.bridge.near%0A%20%20%20%20%20%203.%20block_hash_safe%20in%20contract%20client-eth2.bridge.near%0A%20%20%20%20%20%204.%20finish_deposit%20in%20contract%20factory.bridge.near%20%3A%20mint%20of%2010%2C000%20USDT.%0A%0A**TODO**%0A%0A-%20Find%20and%20review%20the%20source%20code%20for%20the%20%5Bvalidator%20light%20client%20approval%20update%5D(https%3A%2F%2Fnearblocks.io%2Ftxns%2FHnzBR7x5Sxnmcm4MfRt1ghhMjJNspDaygUUKeM9T27Li%23execution).%20_Note%3A%20the%20eth2_client%20has%20a%20%5Bvalidate_light_client_update%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Fblob%2Fmaster%2Fcontracts%2Fnear%2Feth2-client%2Fsrc%2Flib.rs%23L311)%20which%20is%20%5Bconfigurable%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Fblob%2Fmaster%2Fcontracts%2Fnear%2Feth2-client%2Fsrc%2Flib.rs%23L42)%20and%20is%20used%20for%20debugging%20purposes._%0A%0A**Bridging%20Resources%20Required**%0A%0AHere%20is%20the%20storage%20and%20compuational%20costs%20per%20component.%0A%0A%7C%20Component%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7C%20Data%20%20%20%20%20%20%20%20%20%20%20%7C%20Storage%20%7C%20Notes%20%7C%0A%7C%20---------------------------------------------------------------------------------------------------------------------------%20%7C%20--------------%20%7C%20-------%20%7C%20-----%20%7C%0A%7C%20%5BEthereum%202%20Client%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Fblob%2Fmaster%2Fcontracts%2Fnear%2Feth2-client%2Fsrc%2Flib.rs%23L35)%20%7C%20---%20%20%20%20%20%20%20%20%20%20%20%20%7C%20---%20%20%20%20%20%7C%20---%20%20%20%7C%0A%7C%20%5BProver%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Fblob%2Fmaster%2Fcontracts%2Fnear%2Feth-prover%2Fsrc%2Flib.rs)%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7C%20not%20applicable%20%7C%200%20bytes%20%7C%20%20%20%20%20%20%20%7C%0A%7C%20%5BDAO%20Contract%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Fblob%2Fmaster%2Feth2near%2Fcontract_wrapper%2Fsrc%2Fdao_contract.rs)%20%20%7C%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7C%20%20%20%20%20%20%20%20%20%7C%20%20%20%20%20%20%20%7C%0A%0A**TODO**%0AReview%20the%20following%20data%20structure%20and%20elements%20and%20move%20into%20the%20table%20above%20commenting%20on%20any%20mandatory%20requirements%20and%20structures%20that%20can%20be%20improved.%0A%0A%60%60%60%0Apub%20struct%20Eth2Client%20%7B%0A%20%20%20%20%2F%2F%2F%20If%20set%2C%20only%20light%20client%20updates%20by%20the%20trusted%20signer%20will%20be%20accepted%0A%20%20%20%20trusted_signer%3A%20Option%3CAccountId%3E%2C%0A%20%20%20%20%2F%2F%2F%20Mask%20determining%20all%20paused%20functions%0A%20%20%20%20paused%3A%20Mask%2C%0A%20%20%20%20%2F%2F%2F%20Whether%20the%20client%20validates%20the%20updates.%0A%20%20%20%20%2F%2F%2F%20Should%20only%20be%20set%20to%20%60false%60%20for%20debugging%2C%20testing%2C%20and%20diagnostic%20purposes%0A%20%20%20%20validate_updates%3A%20bool%2C%0A%20%20%20%20%2F%2F%2F%20Whether%20the%20client%20verifies%20BLS%20signatures.%0A%20%20%20%20verify_bls_signatures%3A%20bool%2C%0A%20%20%20%20%2F%2F%2F%20We%20store%20the%20hashes%20of%20the%20blocks%20for%20the%20past%20%60hashes_gc_threshold%60%20headers.%0A%20%20%20%20%2F%2F%2F%20Events%20that%20happen%20past%20this%20threshold%20cannot%20be%20verified%20by%20the%20client.%0A%20%20%20%20%2F%2F%2F%20It%20is%20desirable%20that%20this%20number%20is%20larger%20than%207%20days'%20worth%20of%20headers%2C%20which%20is%20roughly%0A%20%20%20%20%2F%2F%2F%2051k%20Ethereum%20blocks.%20So%20this%20number%20should%20be%2051k%20in%20production.%0A%20%20%20%20hashes_gc_threshold%3A%20u64%2C%0A%20%20%20%20%2F%2F%2F%20Network.%20e.g.%20mainnet%2C%20kiln%0A%20%20%20%20network%3A%20Network%2C%0A%20%20%20%20%2F%2F%2F%20Hashes%20of%20the%20finalized%20execution%20blocks%20mapped%20to%20their%20numbers.%20Stores%20up%20to%20%60hashes_gc_threshold%60%20entries.%0A%20%20%20%20%2F%2F%2F%20Execution%20block%20number%20-%3E%20execution%20block%20hash%0A%20%20%20%20finalized_execution_blocks%3A%20LookupMap%3Cu64%2C%20H256%3E%2C%0A%20%20%20%20%2F%2F%2F%20All%20unfinalized%20execution%20blocks'%20headers%20hashes%20mapped%20to%20their%20%60HeaderInfo%60.%0A%20%20%20%20%2F%2F%2F%20Execution%20block%20hash%20-%3E%20ExecutionHeaderInfo%20object%0A%20%20%20%20unfinalized_headers%3A%20UnorderedMap%3CH256%2C%20ExecutionHeaderInfo%3E%2C%0A%20%20%20%20%2F%2F%2F%20%60AccountId%60s%20mapped%20to%20their%20number%20of%20submitted%20headers.%0A%20%20%20%20%2F%2F%2F%20Submitter%20account%20-%3E%20Num%20of%20submitted%20headers%0A%20%20%20%20submitters%3A%20LookupMap%3CAccountId%2C%20u32%3E%2C%0A%20%20%20%20%2F%2F%2F%20Max%20number%20of%20unfinalized%20blocks%20allowed%20to%20be%20stored%20by%20one%20submitter%20account%0A%20%20%20%20%2F%2F%2F%20This%20value%20should%20be%20at%20least%2032%20blocks%20(1%20epoch)%2C%20but%20the%20recommended%20value%20is%201024%20(32%20epochs)%0A%20%20%20%20max_submitted_blocks_by_account%3A%20u32%2C%0A%20%20%20%20%2F%2F%20The%20minimum%20balance%20that%20should%20be%20attached%20to%20register%20a%20new%20submitter%20account%0A%20%20%20%20min_storage_balance_for_submitter%3A%20Balance%2C%0A%20%20%20%20%2F%2F%2F%20Light%20client%20state%0A%20%20%20%20finalized_beacon_header%3A%20ExtendedBeaconBlockHeader%2C%0A%20%20%20%20finalized_execution_header%3A%20LazyOption%3CExecutionHeaderInfo%3E%2C%0A%20%20%20%20current_sync_committee%3A%20LazyOption%3CSyncCommittee%3E%2C%0A%20%20%20%20next_sync_committee%3A%20LazyOption%3CSyncCommittee%3E%2C%0A%7D%0A%60%60%60%0A%0A%23%23%23%20Appendix%20K%20-%20Explorer%20and%20Interactive%20Links%0A%0A-%20Near%0A%20%20-%20eth-prover%0A%20%20%20%20-%20%5Bhttps%3A%2F%2Fnearblocks.io%2Faddress%2Frelayer.bridge.near%5D(https%3A%2F%2Fnearblocks.io%2Faddress%2Frelayer.bridge.near)%0A%20%20%20%20-%20%5Bhttps%3A%2F%2Fnearblocks.io%2Faddress%2Fclient-eth2.bridge.near%5D(https%3A%2F%2Fnearblocks.io%2Faddress%2Fclient-eth2.bridge.near)%0A%20%20%20%20-%20%5Bhttps%3A%2F%2Fnearblocks.io%2Faddress%2Fclient.bridge.near%5D(https%3A%2F%2Fnearblocks.io%2Faddress%2Fclient.bridge.near)%0A%20%20-%20eth-client%0A%20%20%20%20-%20%5Bhttps%3A%2F%2Fnearblocks.io%2Faddress%2Fprover.bridge.near%5D(https%3A%2F%2Fnearblocks.io%2Faddress%2Fprover.bridge.near)%0A%20%20%20%20-%20%5Bhttps%3A%2F%2Fnearblocks.io%2Faddress%2Fclient.bridge.near%5D(https%3A%2F%2Fnearblocks.io%2Faddress%2Fclient.bridge.near)%0A%20%20-%20factory%20(manages%20tokens)%0A%20%20%20%20-%20%5Bhttps%3A%2F%2Fnearblocks.io%2Faddress%2Ffactory.bridge.near%5D(https%3A%2F%2Fnearblocks.io%2Faddress%2Ffactory.bridge.near)%0A%20%20-%20dao%0A%20%20%20%20-%20%5Bhttps%3A%2F%2Fnearblocks.io%2Faddress%2Fbridge-validator.sputnik-dao.near%5D(https%3A%2F%2Fnearblocks.io%2Faddress%2Fbridge-validator.sputnik-dao.near)%0A%20%20-%20aurora%0A%20%20%20%20-%20%5Bhttps%3A%2F%2Fnearblocks.io%2Faddress%2Faurora%5D(https%3A%2F%2Fnearblocks.io%2Faddress%2Faurora)%0A%20%20%20%20-%20%5Bhttps%3A%2F%2Fnearblocks.io%2Faddress%2Frelay.aurora%5D(https%3A%2F%2Fnearblocks.io%2Faddress%2Frelay.aurora)%0A%0A-%20Ethereum%0A%20%20-%20%5Bbeaconcha.in%5D(https%3A%2F%2Fbeaconcha.in%2F)%0A%20%20%20%20-%20%5Bvalidators%5D(https%3A%2F%2Fbeaconcha.in%2Fvalidators)%0A%20%20%20%20-%20%5Bepochs%5D(https%3A%2F%2Fbeaconcha.in%2Fepochs)%0A%20%20%20%20-%20%5Bslots%5D(https%3A%2F%2Fbeaconcha.in%2Fslots)%0A%20%20%20%20-%20%5Bblocks%5D(https%3A%2F%2Fbeaconcha.in%2Fblocks)%0A%20%20%20%20-%20%5Btransactions%5D(https%3A%2F%2Fbeaconcha.in%2Ftransactions)%0A%20%20-%20Near%20Bridge%0A%20%20%20%20-%20%5BNearBridge%5D(https%3A%2F%2Fetherscan.io%2Faddress%2F0x3fefc5a4b1c02f21cbc8d3613643ba0635b9a873)%0A%20%20%20%20-%20%5BERC20Locker%5D(https%3A%2F%2Fetherscan.io%2Ftx%2F0xa685c59a24cc2056e10e660ce8a8bff7bbc335433698e138c77aaadf20ecb614)%0A",lastUpdatedAt:1753129136e3},{lazy:()=>o2(()=>import("./polymerlabs-BqKpsA9p.js"),[]),path:"/research/bridge/polymerlabs",type:"mdx",filePath:"research/bridge/polymerlabs.mdx",content:"%23%20Polymer%20Labs%0A%0A-%20date%3A%202023-02-24%0A-%20last%20updated%3A%202023-02-24%0A%0A%23%23%20Overview%0A%0APolymer%E2%80%99s%5B%5Eov-1%5D%20modular%20IBC%5B%5Eov-2%5D%20design%20allows%20for%20chains%2C%20like%20Ethereum%5B%5Eov-3%5D%2C%20to%20easily%20integrate%20IBC%20transport%20and%20become%20interoperable%20across%20all%20ecosystems%20in%20a%20decentralized%20manner.%0A%0AOur%20protocol%20combines%20a%20novel%20consensus%20engine%5B%5Eov-4%5D%2C%20zero%20knowledge%20technology%5B%5Eov-5%5D%2C%20and%20modular%20IBC%5B%5Eov-6%5D%20to%20create%20the%20most%20efficient%20and%20scalable%20IBC%20routing%20solution.%0APolymer%20is%20the%20first%20chain%20dedicated%20to%20the%20routing%20of%20IBC%20packets.%0A%0A%23%23%20Approach%0A%0A%23%23%20Sample%20Process%20Flow%0A%0A%23%23%20Design%20Notes%0A%0A%23%23%20Code%20Review%0A%0A-%20%5Bplonky2%5D(https%3A%2F%2Fgithub.com%2Fmir-protocol%2Fplonky2)%3A%20a%20SNARK%20implementation%20based%20on%20techniques%20from%20PLONK%20and%20FRI.%20It%20has%20since%20expanded%20to%20include%20tools%20such%20as%20Starky%2C%20a%20highly%20performant%20STARK%20implementation.%0A%20%20-%20%5Bplonky2-solidity-verifier%5D(https%3A%2F%2Fgithub.com%2Fpolymerdao%2Fplonky2-solidity-verifier)%0A%20%20-%20%5Bplonky2-circom%5D(https%3A%2F%2Fgithub.com%2Fpolymerdao%2Fplonky2-circom)%3A%20Plonky2%20verifier%20in%20Circom%0A%20%20-%20%5Bplonky2-ed25519%5D(https%3A%2F%2Fgithub.com%2Fpolymerdao%2Fplonky2-ed25519)%3A%20SNARK%20verification%20circuits%20of%20a%20digital%20signature%20scheme%20Ed25519%20implemented%20with%20Plonky2.%0A%20%20-%20%5Bplonky2-sha256%5D(https%3A%2F%2Fgithub.com%2Fpolymerdao%2Fplonky2-sha256)%3A%20SNARK%20circuits%20of%20a%20cryptographic%20hash%20function%20SHA-256%20implemented%20with%20Plonky2.%0A%20%20-%20%5Bplonky2-sha512%5D(https%3A%2F%2Fgithub.com%2Fpolymerdao%2Fplonky2-sha512)%3A%20SNARK%20circuits%20of%20a%20cryptographic%20hash%20function%20SHA-512%20implemented%20with%20Plonky2.%0A%20%20-%20%5Bplonky2-pairing%5D(https%3A%2F%2Fgithub.com%2Fpolymerdao%2Fplonky2-pairing)%0A%0A%23%23%23%20Signing%20Mechanisms%0A%0A%23%23%23%20Cryptographic%20Primitives%0A%0A%23%23%23%20Proving%20Mechanisms%0A%0A%23%23%23%20Relayer%20Mechanisms%0A%0A%23%23%23%20Light%20Client%20Functionality%0A%0A%23%23%23%20Token%20Lockers%0A%0A%23%23%20References%0A%0A%23%23%20Appendices%0A%0A%23%23%20Footnotes%0A%0A%5B%5Eov-1%5D%3A%20%5BAn%20Introduction%20to%20Polymer%20Labs%2C%20Cosmos%2C%20and%20IBC%20(Inter-Blockchain%20Communication)%5D(https%3A%2F%2Fpolymerlabs.medium.com%2Fan-introduction-to-polymer-labs-cosmos-and-ibc-inter-blockchain-communication-b9f941ee2cdb)%3A%20Polymer%20Chain%20provides%20a%20seamless%20way%20to%20provide%20cross%20chain%20communication%20by%20utilizing%20IBC%20to%20connect%20chains%20even%20when%20they%20may%20not%20support%20IBC%20natively.%0A%0A%5B%5Eov-2%5D%3A%20%5BINTER%E2%80%91BLOCKCHAIN%20COMMUNICATION%20PROTOCOL%5D(https%3A%2F%2Fibcprotocol.org%2F)%3A%20IBC%20is%20an%20interoperability%20protocol%20for%20communicating%20arbitrary%20data%20between%20arbitrary%20state%20machines.%0A%0A%5B%5Eov-3%5D%3A%20%5BThe%20Multi-hop%20IBC%20upgrade%20will%20take%20IBC%20to%20Ethereum%20and%20beyond%5D(https%3A%2F%2Fpolymerlabs.medium.com%2Fthe-multi-hop-ibc-upgrade-will-take-ibc-to-ethereum-and-beyond-b4bee43523e)%3A%20A%20discussion%20on%20some%20key%20areas%20of%20improvement%20that%20Polymer%20is%20tackling%20to%20upgrade%20IBC%20functionality%20and%20expand%20the%20IBC%20network%20across%20the%20industry.%0A%0A%5B%5Eov-4%5D%3A%20%5BzkMint%3A%20The%20First%20ZK-friendly%20Tendermint%20Consensus%20Engine%5D(https%3A%2F%2Fpolymerlabs.medium.com%2Fzkmint-the-first-zk-friendly-tendermint-consensus-engine-116000b9d4f9)%3A%20Polymer%E2%80%99s%20solution%20that%20optimizes%20IBC%20across%20all%20major%20chains.%0A%0A%5B%5Eov-5%5D%3A%20%5BDeveloping%20the%20Most%20Truly%20Decentralized%20Interoperability%20Solution%20%3A%20Polymer%20ZK-IBC%5D(https%3A%2F%2Fpolymerlabs.medium.com%2Fdeveloping-the-most-truly-decentralized-interoperability-solution-polymer-zk-ibc-f0287ea84a2b)%3A%20ZK-IBC%20allows%20different%20blockchain%20protocols%20to%20communicate%20with%20each%20other%20without%20trusting%20third%20parties.%20It%20does%20this%20by%20verifying%20the%20blockchain%20consensus%20on-chain.%0A%0A%5B%5Eov-6%5D%3A%20%5BModular%20IBC%20for%20the%20Modular%20World%5D(https%3A%2F%2Fpolymerlabs.medium.com%2Fmodular-ibc-for-the-modular-world-9fc021f6322e)%3A%20IBC%20network%20topology%20is%20changing%20from%20a%20homogenous%20and%20densely%20connected%20network%20to%20a%20heterogenous%20and%20sparsely%20connected%20network.%20Modular%20IBC%20adapts%20the%20IBC%20protocol%20to%20this%20dynamic%20environment.%0A",lastUpdatedAt:1753129136e3},{lazy:()=>o2(()=>import("./polymerlabs-BqKpsA9p.js"),[]),path:"/research/bridge/polymerlabs.html",type:"mdx",filePath:"research/bridge/polymerlabs.mdx",content:"%23%20Polymer%20Labs%0A%0A-%20date%3A%202023-02-24%0A-%20last%20updated%3A%202023-02-24%0A%0A%23%23%20Overview%0A%0APolymer%E2%80%99s%5B%5Eov-1%5D%20modular%20IBC%5B%5Eov-2%5D%20design%20allows%20for%20chains%2C%20like%20Ethereum%5B%5Eov-3%5D%2C%20to%20easily%20integrate%20IBC%20transport%20and%20become%20interoperable%20across%20all%20ecosystems%20in%20a%20decentralized%20manner.%0A%0AOur%20protocol%20combines%20a%20novel%20consensus%20engine%5B%5Eov-4%5D%2C%20zero%20knowledge%20technology%5B%5Eov-5%5D%2C%20and%20modular%20IBC%5B%5Eov-6%5D%20to%20create%20the%20most%20efficient%20and%20scalable%20IBC%20routing%20solution.%0APolymer%20is%20the%20first%20chain%20dedicated%20to%20the%20routing%20of%20IBC%20packets.%0A%0A%23%23%20Approach%0A%0A%23%23%20Sample%20Process%20Flow%0A%0A%23%23%20Design%20Notes%0A%0A%23%23%20Code%20Review%0A%0A-%20%5Bplonky2%5D(https%3A%2F%2Fgithub.com%2Fmir-protocol%2Fplonky2)%3A%20a%20SNARK%20implementation%20based%20on%20techniques%20from%20PLONK%20and%20FRI.%20It%20has%20since%20expanded%20to%20include%20tools%20such%20as%20Starky%2C%20a%20highly%20performant%20STARK%20implementation.%0A%20%20-%20%5Bplonky2-solidity-verifier%5D(https%3A%2F%2Fgithub.com%2Fpolymerdao%2Fplonky2-solidity-verifier)%0A%20%20-%20%5Bplonky2-circom%5D(https%3A%2F%2Fgithub.com%2Fpolymerdao%2Fplonky2-circom)%3A%20Plonky2%20verifier%20in%20Circom%0A%20%20-%20%5Bplonky2-ed25519%5D(https%3A%2F%2Fgithub.com%2Fpolymerdao%2Fplonky2-ed25519)%3A%20SNARK%20verification%20circuits%20of%20a%20digital%20signature%20scheme%20Ed25519%20implemented%20with%20Plonky2.%0A%20%20-%20%5Bplonky2-sha256%5D(https%3A%2F%2Fgithub.com%2Fpolymerdao%2Fplonky2-sha256)%3A%20SNARK%20circuits%20of%20a%20cryptographic%20hash%20function%20SHA-256%20implemented%20with%20Plonky2.%0A%20%20-%20%5Bplonky2-sha512%5D(https%3A%2F%2Fgithub.com%2Fpolymerdao%2Fplonky2-sha512)%3A%20SNARK%20circuits%20of%20a%20cryptographic%20hash%20function%20SHA-512%20implemented%20with%20Plonky2.%0A%20%20-%20%5Bplonky2-pairing%5D(https%3A%2F%2Fgithub.com%2Fpolymerdao%2Fplonky2-pairing)%0A%0A%23%23%23%20Signing%20Mechanisms%0A%0A%23%23%23%20Cryptographic%20Primitives%0A%0A%23%23%23%20Proving%20Mechanisms%0A%0A%23%23%23%20Relayer%20Mechanisms%0A%0A%23%23%23%20Light%20Client%20Functionality%0A%0A%23%23%23%20Token%20Lockers%0A%0A%23%23%20References%0A%0A%23%23%20Appendices%0A%0A%23%23%20Footnotes%0A%0A%5B%5Eov-1%5D%3A%20%5BAn%20Introduction%20to%20Polymer%20Labs%2C%20Cosmos%2C%20and%20IBC%20(Inter-Blockchain%20Communication)%5D(https%3A%2F%2Fpolymerlabs.medium.com%2Fan-introduction-to-polymer-labs-cosmos-and-ibc-inter-blockchain-communication-b9f941ee2cdb)%3A%20Polymer%20Chain%20provides%20a%20seamless%20way%20to%20provide%20cross%20chain%20communication%20by%20utilizing%20IBC%20to%20connect%20chains%20even%20when%20they%20may%20not%20support%20IBC%20natively.%0A%0A%5B%5Eov-2%5D%3A%20%5BINTER%E2%80%91BLOCKCHAIN%20COMMUNICATION%20PROTOCOL%5D(https%3A%2F%2Fibcprotocol.org%2F)%3A%20IBC%20is%20an%20interoperability%20protocol%20for%20communicating%20arbitrary%20data%20between%20arbitrary%20state%20machines.%0A%0A%5B%5Eov-3%5D%3A%20%5BThe%20Multi-hop%20IBC%20upgrade%20will%20take%20IBC%20to%20Ethereum%20and%20beyond%5D(https%3A%2F%2Fpolymerlabs.medium.com%2Fthe-multi-hop-ibc-upgrade-will-take-ibc-to-ethereum-and-beyond-b4bee43523e)%3A%20A%20discussion%20on%20some%20key%20areas%20of%20improvement%20that%20Polymer%20is%20tackling%20to%20upgrade%20IBC%20functionality%20and%20expand%20the%20IBC%20network%20across%20the%20industry.%0A%0A%5B%5Eov-4%5D%3A%20%5BzkMint%3A%20The%20First%20ZK-friendly%20Tendermint%20Consensus%20Engine%5D(https%3A%2F%2Fpolymerlabs.medium.com%2Fzkmint-the-first-zk-friendly-tendermint-consensus-engine-116000b9d4f9)%3A%20Polymer%E2%80%99s%20solution%20that%20optimizes%20IBC%20across%20all%20major%20chains.%0A%0A%5B%5Eov-5%5D%3A%20%5BDeveloping%20the%20Most%20Truly%20Decentralized%20Interoperability%20Solution%20%3A%20Polymer%20ZK-IBC%5D(https%3A%2F%2Fpolymerlabs.medium.com%2Fdeveloping-the-most-truly-decentralized-interoperability-solution-polymer-zk-ibc-f0287ea84a2b)%3A%20ZK-IBC%20allows%20different%20blockchain%20protocols%20to%20communicate%20with%20each%20other%20without%20trusting%20third%20parties.%20It%20does%20this%20by%20verifying%20the%20blockchain%20consensus%20on-chain.%0A%0A%5B%5Eov-6%5D%3A%20%5BModular%20IBC%20for%20the%20Modular%20World%5D(https%3A%2F%2Fpolymerlabs.medium.com%2Fmodular-ibc-for-the-modular-world-9fc021f6322e)%3A%20IBC%20network%20topology%20is%20changing%20from%20a%20homogenous%20and%20densely%20connected%20network%20to%20a%20heterogenous%20and%20sparsely%20connected%20network.%20Modular%20IBC%20adapts%20the%20IBC%20protocol%20to%20this%20dynamic%20environment.%0A",lastUpdatedAt:1753129136e3},{lazy:()=>o2(()=>import("./snowbridge-CG4ufEna.js"),[]),path:"/research/bridge/snowbridge",type:"mdx",filePath:"research/bridge/snowbridge.mdx",content:"%23%20Snowbridge%0A%0A-%20date%3A%202023-02-24%0A-%20last-updated%3A%202023-02-24%0A%0A%23%23%20Overview%0A%0ASnowbridge%20is%20a%20general%20purpose%2C%20trustless%20and%20decentralized%20bridge%20between%20Polkadot%20and%20Ethereum.%20The%20goal%20is%20to%20launch%20as%20common-good%20bridge%20on%20the%20proposed%20BridgeHub%20parachain.%0A**Quick%20Links**%0A%0A-%20Bridge%20Type%20%3A%20Proof%20Based%20Validity%20Proofs%0A-%20%5BDesign%5D(https%3A%2F%2Fdocs.snowbridge.network%2Farchitecture%2Foverview)%3A%20bridge%20has%20a%20layered%20architecture%2C%20inspired%20by%20networking%20protocols%20such%20as%20TCP%2FIP.%20At%20the%20lowest%20level%20we%20have%20channels%2C%20which%20send%20messages%20across%20the%20bridge.%20At%20the%20highest%20level%2C%20we%20have%20apps%2C%20which%20can%20invoke%20methods%20on%20apps%20living%20on%20foreign%20chains.%0A-%20%5BDocs%5D(https%3A%2F%2Fdocs.snowbridge.network%2F)%3A%20Snowbridge%20documentation%0A-%20%5BImplementation%20snowfork%20snowbridge%5D(https%3A%2F%2Fgithub.com%2FSnowfork%2Fsnowbridge)%3A%20A%20trustless%20bridge%20between%20Polkadot%20and%20Ethereum.%0A-%20FronteEnd%3A%20Still%20Under%20Development%0A-%20%5BExplorer%5D(https%3A%2F%2Fpolkadot.subscan.io%2Fparachain)%3A%20Can%20be%20used%20to%20review%20if%20a%20common%20good%20parachain%20is%20deployed.%20Bridge%20messages%20will%20be%20displayed%20as%20Cross%20Chain%20Messages%20(XCM)%20on%20this%20%5Bxcm%20dashboard%5D(https%3A%2F%2Fpolkadot.subscan.io%2Fxcm_dashboard).%0A-%20%5BRoadmap%5D(https%3A%2F%2Fgateway.pinata.cloud%2Fipfs%2FQmfYGxQvyjVrgm9ajfzCysbuvLXdsRxP5R5HFjWcrj2yYY)%3A%20The%20%5BSnowbridge%20Funding%20Proposal%5D(https%3A%2F%2Fpolkadot.polkassembly.io%2Fpost%2F1341)%20includes%20a%20link%20to%20the%20%5Broadmap%5D(https%3A%2F%2Fgateway.pinata.cloud%2Fipfs%2FQmfYGxQvyjVrgm9ajfzCysbuvLXdsRxP5R5HFjWcrj2yYY)%20which%20details%20the%20milestones%20and%20rollout.%0A%0A%23%23%20Design%20Notes%0A%0A**%5Blight-client%20verification%20polkadot%5D(https%3A%2F%2Fdocs.snowbridge.network%2Farchitecture%2Fverification%2Fpolkadot)**%0A%0AWe%20use%20Polkadot%E2%80%99s%20BEEFY%20gadget%20to%20implement%20an%20efficient%20light%20client%20that%20only%20needs%20to%20verify%20a%20very%20small%20subset%20of%20relay%20chain%20validator%20signatures.%20BEEFY%20is%20live%20on%20Rococo%2C%20and%20is%20awaiting%20deployment%20on%20Kusama%20and%20Polkadot.%0AFundamentally%2C%20the%20BEEFY%20light%20client%20allows%20the%20bridge%20to%20prove%20that%20a%20specified%20parachain%20header%20was%20finalized%20by%20the%20relay%20chain.%0A%0A**%5BBEEFY%20light%20client%5D(https%3A%2F%2Fgithub.com%2Fparitytech%2Fparity-bridges-common%2Fblob%2Fmaster%2Fmodules%2Fbeefy%2Fsrc%2Flib.rs)**%0A%0A%3E%20BEEFY%20bridge%20pallet.%0A%3E%0A%3E%20This%20pallet%20is%20an%20on-chain%20BEEFY%20light%20client%20for%20Substrate-based%20chains%20that%20are%20using%20the%20following%20pallets%20bundle%3A%20%60pallet-mmr%60%2C%20%60pallet-beefy%60%20and%20%60pallet-beefy-mmr%60.%0A%3E%0A%3E%20The%20pallet%20is%20able%20to%20verify%20MMR%20leaf%20proofs%20and%20BEEFY%20commitments%2C%20so%20it%20has%20access%20to%20the%20following%20data%20of%20the%20bridged%20chain%3A%0A%3E%0A%3E%20-%20header%20hashes%0A%3E%20-%20changes%20of%20BEEFY%20authorities%0A%3E%20-%20extra%20data%20of%20MMR%20leafs%0A%3E%0A%3E%20Given%20the%20header%20hash%2C%20other%20pallets%20are%20able%20to%20verify%20header-based%20proofs%20(e.g.%20storage%20proofs%2C%20transaction%20inclusion%20proofs%2C%20etc.).%0A%0A**%5Blight-client%20verification%20ethereum%5D(https%3A%2F%2Fdocs.snowbridge.network%2Farchitecture%2Fverification%2Fethereum)**%0A%0AWe%20have%20implemented%20a%20Proof-of-Stake%20(PoS)%20light%20client%20for%20the%20Beacon%20chain.%20This%20client%20deprecates%20the%20older%20PoW%20light%20client%20we%20developed%20in%202020.%0A%0AThe%20beacon%20client%20tracks%20the%20beacon%20chain%2C%20the%20new%20Ethereum%20chain%20that%20will%20replace%20Ethereum's%20Proof-of-Work%20consensus%20method%20around%20mid-September%2C%20called%20the%20Merge.%20The%20work%20we%20have%20done%20consists%20of%20the%20following%20parts%3A%0A%0A-%20Beacon%20Client%20pallet%0A%20%20-%20Initial%20chain%20snapshot%20(forms%20part%20of%20the%20Genesis%20Config)%0A%20%20-%20Sync%20committee%20updates%0A%20%20-%20Finalized%20beacon%20header%20updates%0A%20%20-%20Execution%20header%20updates%0A%20%20-%20Message%20verification%0A-%20Beacon%20Relayer%0A%20%20-%20Sends%20data%20from%20a%20beacon%20node%20to%20the%20beacon%20client%0A%0A%23%23%20Code%20Review%0A%0A%23%23%23%20Signing%20Mechanisms%0A%0A-%20%5Bsecp256k1%5D(https%3A%2F%2Fwww.secg.org%2Fsec2-v2.pdf)%0A%20%20-%20%5Bsnowbridge%20secp256k1%5D(https%3A%2F%2Fgithub.com%2FSnowfork%2Fsnowbridge%2Ftree%2Fmain%2Frelayer%2Fcrypto%2Fsecp256k1)%0A-%20%5Bsr25519%5D(https%3A%2F%2Fwiki.polkadot.network%2Fdocs%2Flearn-cryptography%23what-is-sr25519-and-where-did-it-come-from)%3A%20schnorr%20over%20ristretto25519%0A%20%20-%20%5Bsnowbridge%20sr25519%5D(https%3A%2F%2Fgithub.com%2FSnowfork%2Fsnowbridge%2Ftree%2Fmain%2Frelayer%2Fcrypto%2Fsecp256k1)%0A%0A%23%23%23%20Cryptographic%20Primitives%0A%0A-%20%5Bkeccak256%5D(https%3A%2F%2Fkeccak.team%2Fkeccak.html)%20hash%20function%0A%20%20-%20%5Bsnowbridge%20keccak%5D(https%3A%2F%2Fgithub.com%2FSnowfork%2Fsnowbridge%2Fblob%2Fmain%2Frelayer%2Fcrypto%2Fkeccak%2Fkeccak.go)%0A-%20%5Bmerkle%20trees%5D(https%3A%2F%2Fen.wikipedia.org%2Fwiki%2FMerkle_tree)%0A%20%20-%20%5Bsnowbridge%20merkle.go%5D(https%3A%2F%2Fgithub.com%2FSnowfork%2Fsnowbridge%2Fblob%2Fmain%2Frelayer%2Fcrypto%2Fmerkle%2Fmerkle.go)%0A%20%20-%20%5Bsnowbridge%20merkleization.rs%5D(https%3A%2F%2Fgithub.com%2FSnowfork%2Fsnowbridge%2Fblob%2Fmain%2Fparachain%2Fpallets%2Fethereum-beacon-client%2Fsrc%2Fmerkleization.rs)%0A-%20%5Bmerkle_proof%5D(https%3A%2F%2Fgithub.com%2Fethereum%2Fconsensus-specs%2Fblob%2Fdev%2Fssz%2Fmerkle-proofs.mdx)%20%5Bexplainer%5D(https%3A%2F%2Fsoliditydeveloper.com%2Fmerkle-tree)%0A%20%20-%20%5Bsnowbridge%20simplified_mmr_proof.go%5D(https%3A%2F%2Fgithub.com%2FSnowfork%2Fsnowbridge%2Fblob%2Fmain%2Frelayer%2Fcrypto%2Fmerkle%2Fsimplified_mmr_proof.go)%0A%20%20-%20%5Bsnowbridge%20merkle-proof%20rust%5D(https%3A%2F%2Fgithub.com%2FSnowfork%2Fsnowbridge%2Ftree%2Fmain%2Fparachain%2Fpallets%2Fbasic-channel%2Fmerkle-proof)%0A%20%20-%20%5Bsnowbridge%20MerkleProof.sol%5D(https%3A%2F%2Fgithub.com%2FSnowfork%2Fsnowbridge%2Fblob%2Fmain%2Fcore%2Fpackages%2Fcontracts%2Fcontracts%2Futils%2FMerkleProof.sol)%0A-%20%5BMerkle%20Mountain%20Range%5D(https%3A%2F%2Fdocs.grin.mw%2Fwiki%2Fchain-state%2Fmerkle-mountain-range%2F)%0A%20%20-%20%5Bsnowbridge%20MMRProof.sol%5D(https%3A%2F%2Fgithub.com%2FSnowfork%2Fsnowbridge%2Fblob%2Fmain%2Fcore%2Fpackages%2Fcontracts%2Fcontracts%2Futils%2FMMRProof.sol)%0A%20%20-%20%5Bsnowfork%20merkle-mountain-range%5D(https%3A%2F%2Fgithub.com%2FSnowfork%2Fmerkle-mountain-range)%0A-%20%5BSimple%20Serialize%5D(https%3A%2F%2Fethereum.org%2Fen%2Fdevelopers%2Fdocs%2Fdata-structures-and-encoding%2Fssz%2F)%0A%20%20-%20%5Bsnowbridge%20ssz.rs%5D(https%3A%2F%2Fgithub.com%2FSnowfork%2Fsnowbridge%2Fblob%2Fmain%2Fparachain%2Fpallets%2Fethereum-beacon-client%2Fsrc%2Fssz.rs)%0A%0A%23%23%23%20Proving%20Mechanisms%0A%0A-%20%5BBeefy%5D(https%3A%2F%2Fwiki.polkadot.network%2Fdocs%2Flearn-consensus%23bridging-beefy)%0A%20%20-%20%5Bsnowbridge%20BeefyClient.sol%5D(https%3A%2F%2Fgithub.com%2FSnowfork%2Fsnowbridge%2Fblob%2Fmain%2Fcore%2Fpackages%2Fcontracts%2Fcontracts%2FBeefyClient.sol)%0A%0A-%20%5Bsnowbridge%20ethereum-beacon-client%20rust%5D(https%3A%2F%2Fgithub.com%2FSnowfork%2Fsnowbridge%2Ftree%2Fmain%2Fparachain%2Fpallets%2Fethereum-beacon-client)%0A-%20%5Bsnowbridge%20ethereum-light-client%20rust%5D(https%3A%2F%2Fgithub.com%2FSnowfork%2Fsnowbridge%2Ftree%2Fmain%2Fparachain%2Fpallets%2Fethereum-light-client)%0A%0A%23%23%23%20Relayer%20Mechanisms%0A%0AThe%20%5Brelays%20folder%5D(https%3A%2F%2Fgithub.com%2FSnowfork%2Fsnowbridge%2Ftree%2Fmain%2Frelayer%2Frelays)%20has%20multiple%20relayers%20controlled%20by%20%5Bexecution%5D(https%3A%2F%2Fgithub.com%2FSnowfork%2Fsnowbridge%2Fblob%2Fmain%2Frelayer%2Frelays%2Fexecution%2Fmain.go).%20All%20written%20in%20go.%0A%0A-%20Relaying%20from%20Ethereum%20to%20Polkadot%0A%20%20-%20%5Bbeacon%5D(https%3A%2F%2Fgithub.com%2FSnowfork%2Fsnowbridge%2Ftree%2Fmain%2Frelayer%2Frelays%2Fbeacon)%3A%20Responsible%20for%20retrieving%20state%20from%20the%20beacon%20chain%20including%0A%20%20%20%20-%20%5Bsynching%5D(https%3A%2F%2Fgithub.com%2FSnowfork%2Fsnowbridge%2Fblob%2Fmain%2Frelayer%2Frelays%2Fbeacon%2Fheader%2Fsyncer%2Fsyncer.go)%3A%0A%20%20%20%20%20%20-%20%5BHeader%5D(https%3A%2F%2Fgithub.com%2FSnowfork%2Fsnowbridge%2Fblob%2Fmain%2Frelayer%2Frelays%2Fbeacon%2Fheader%2Fsyncer%2Fsyncer.go%23L47)%0A%20%20%20%20%20%20-%20%5BCurrentSyncCommittee%5D(https%3A%2F%2Fgithub.com%2FSnowfork%2Fsnowbridge%2Fblob%2Fmain%2Frelayer%2Frelays%2Fbeacon%2Fheader%2Fsyncer%2Fsyncer.go%23L55)%0A%20%20%20%20%20%20-%20%5BSyncAggregate%5D(https%3A%2F%2Fgithub.com%2FSnowfork%2Fsnowbridge%2Fblob%2Fmain%2Frelayer%2Frelays%2Fbeacon%2Fheader%2Fsyncer%2Fsyncer.go%23LL60C12-L60C12)%0A%20%20%20%20-%20functions%20include%0A%20%20%20%20%20%20-%20%5BGetSyncPeriodsToFetch%5D(https%3A%2F%2Fgithub.com%2FSnowfork%2Fsnowbridge%2Fblob%2Fmain%2Frelayer%2Frelays%2Fbeacon%2Fheader%2Fsyncer%2Fsyncer.go%23L65)%0A%20%20%20%20%20%20-%20%5BGetInitialSync%5D(https%3A%2F%2Fgithub.com%2FSnowfork%2Fsnowbridge%2Fblob%2Fmain%2Frelayer%2Frelays%2Fbeacon%2Fheader%2Fsyncer%2Fsyncer.go%23L83)%0A%20%20%20%20%20%20-%20%5BGetSyncCommitteePeriodUpdate%5D(https%3A%2F%2Fgithub.com%2FSnowfork%2Fsnowbridge%2Fblob%2Fmain%2Frelayer%2Frelays%2Fbeacon%2Fheader%2Fsyncer%2Fsyncer.go%23L118)%0A%20%20%20%20%20%20-%20%5BGetBlockRoots%5D(https%3A%2F%2Fgithub.com%2FSnowfork%2Fsnowbridge%2Fblob%2Fmain%2Frelayer%2Frelays%2Fbeacon%2Fheader%2Fsyncer%2Fsyncer.go%23L187)%0A%20%20%20%20%20%20-%20%5BGetFinalizedUpdate%5D(https%3A%2F%2Fgithub.com%2FSnowfork%2Fsnowbridge%2Fblob%2Fmain%2Frelayer%2Frelays%2Fbeacon%2Fheader%2Fsyncer%2Fsyncer.go%23L252)%0A%20%20%20%20%20%20-%20%5BHasFinalizedHeaderChanged%5D(https%3A%2F%2Fgithub.com%2FSnowfork%2Fsnowbridge%2Fblob%2Fmain%2Frelayer%2Frelays%2Fbeacon%2Fheader%2Fsyncer%2Fsyncer.go%23L305)%0A%20%20%20%20%20%20-%20%5BGetLatestFinalizedHeader%5D(https%3A%2F%2Fgithub.com%2FSnowfork%2Fsnowbridge%2Fblob%2Fmain%2Frelayer%2Frelays%2Fbeacon%2Fheader%2Fsyncer%2Fsyncer.go%23L326)%0A%20%20%20%20%20%20-%20%5BgetNextBlockRootBySlot%5D(https%3A%2F%2Fgithub.com%2FSnowfork%2Fsnowbridge%2Fblob%2Fmain%2Frelayer%2Frelays%2Fbeacon%2Fheader%2Fsyncer%2Fsyncer.go%23L379)%0A%20%20%20%20%20%20-%20%5BGetNextHeaderUpdateBySlotWithAncestryProof%5D(https%3A%2F%2Fgithub.com%2FSnowfork%2Fsnowbridge%2Fblob%2Fmain%2Frelayer%2Frelays%2Fbeacon%2Fheader%2Fsyncer%2Fsyncer.go%23L425)%0A%20%20%20%20%20%20-%20%5BGetNextHeaderUpdateBySlot%5D(https%3A%2F%2Fgithub.com%2FSnowfork%2Fsnowbridge%2Fblob%2Fmain%2Frelayer%2Frelays%2Fbeacon%2Fheader%2Fsyncer%2Fsyncer.go%23L434)%0A%20%20%20%20%20%20-%20%5BGetHeaderUpdateWithAncestryProof%5D(https%3A%2F%2Fgithub.com%2FSnowfork%2Fsnowbridge%2Fblob%2Fmain%2Frelayer%2Frelays%2Fbeacon%2Fheader%2Fsyncer%2Fsyncer.go%23L457)%0A%20%20%20%20%20%20-%20%5BgetBlockHeaderAncestryProof%5D(https%3A%2F%2Fgithub.com%2FSnowfork%2Fsnowbridge%2Fblob%2Fmain%2Frelayer%2Frelays%2Fbeacon%2Fheader%2Fsyncer%2Fsyncer.go%23L495)%0A%20%20%20%20%20%20-%20%5BGetSyncAggregate%5D(https%3A%2F%2Fgithub.com%2FSnowfork%2Fsnowbridge%2Fblob%2Fmain%2Frelayer%2Frelays%2Fbeacon%2Fheader%2Fsyncer%2Fsyncer.go%23L520)%0A%20%20%20%20%20%20-%20%5BGetSyncAggregateForSlot%5D(https%3A%2F%2Fgithub.com%2FSnowfork%2Fsnowbridge%2Fblob%2Fmain%2Frelayer%2Frelays%2Fbeacon%2Fheader%2Fsyncer%2Fsyncer.go%23L534)%0A%20%20-%20%5Bethereum%5D(https%3A%2F%2Fgithub.com%2FSnowfork%2Fsnowbridge%2Ftree%2Fmain%2Frelayer%2Frelays%2Fethereum)%3A%20Responsible%20for%20retreiving%20block%20headers%20from%20the%20execution%20chain.%0A-%20Relaying%20from%20Polkadot%20to%20Etherem%0A%20%20-%20%5Bparachain%5D(https%3A%2F%2Fgithub.com%2FSnowfork%2Fsnowbridge%2Ftree%2Fmain%2Frelayer%2Frelays%2Fparachain)%0A%20%20-%20%5Bbeefy%5D(https%3A%2F%2Fgithub.com%2FSnowfork%2Fsnowbridge%2Ftree%2Fmain%2Frelayer%2Frelays%2Fbeefy)%0A%0A%23%23%23%20Light%20Client%20Functionality%0A%0A-%20%5BBeefy%5D(https%3A%2F%2Fwiki.polkadot.network%2Fdocs%2Flearn-consensus%23bridging-beefy)%0A%20%20-%20%5Bsnowbridge%20BeefyClient.sol%5D(https%3A%2F%2Fgithub.com%2FSnowfork%2Fsnowbridge%2Fblob%2Fmain%2Fcore%2Fpackages%2Fcontracts%2Fcontracts%2FBeefyClient.sol)%0A%0A-%20%5Bsnowbridge%20ethereum-beacon-client%20rust%5D(https%3A%2F%2Fgithub.com%2FSnowfork%2Fsnowbridge%2Ftree%2Fmain%2Fparachain%2Fpallets%2Fethereum-beacon-client)%0A-%20%5Bsnowbridge%20ethereum-light-client%20rust%5D(https%3A%2F%2Fgithub.com%2FSnowfork%2Fsnowbridge%2Ftree%2Fmain%2Fparachain%2Fpallets%2Fethereum-light-client)%0A%0A%23%23%23%20Token%20Lockers%0A%0A-%20%5Bsnowbridge%20ERC20Vault.sol%5D(https%3A%2F%2Fgithub.com%2FSnowfork%2Fsnowbridge%2Fblob%2Fmain%2Fcore%2Fpackages%2Fcontracts%2Fcontracts%2FERC20Vault.sol)%0A%0A%23%23%20References%0A%0A%23%23%20Appendices%0A",lastUpdatedAt:1753125084e3},{lazy:()=>o2(()=>import("./snowbridge-CG4ufEna.js"),[]),path:"/research/bridge/snowbridge.html",type:"mdx",filePath:"research/bridge/snowbridge.mdx",content:"%23%20Snowbridge%0A%0A-%20date%3A%202023-02-24%0A-%20last-updated%3A%202023-02-24%0A%0A%23%23%20Overview%0A%0ASnowbridge%20is%20a%20general%20purpose%2C%20trustless%20and%20decentralized%20bridge%20between%20Polkadot%20and%20Ethereum.%20The%20goal%20is%20to%20launch%20as%20common-good%20bridge%20on%20the%20proposed%20BridgeHub%20parachain.%0A**Quick%20Links**%0A%0A-%20Bridge%20Type%20%3A%20Proof%20Based%20Validity%20Proofs%0A-%20%5BDesign%5D(https%3A%2F%2Fdocs.snowbridge.network%2Farchitecture%2Foverview)%3A%20bridge%20has%20a%20layered%20architecture%2C%20inspired%20by%20networking%20protocols%20such%20as%20TCP%2FIP.%20At%20the%20lowest%20level%20we%20have%20channels%2C%20which%20send%20messages%20across%20the%20bridge.%20At%20the%20highest%20level%2C%20we%20have%20apps%2C%20which%20can%20invoke%20methods%20on%20apps%20living%20on%20foreign%20chains.%0A-%20%5BDocs%5D(https%3A%2F%2Fdocs.snowbridge.network%2F)%3A%20Snowbridge%20documentation%0A-%20%5BImplementation%20snowfork%20snowbridge%5D(https%3A%2F%2Fgithub.com%2FSnowfork%2Fsnowbridge)%3A%20A%20trustless%20bridge%20between%20Polkadot%20and%20Ethereum.%0A-%20FronteEnd%3A%20Still%20Under%20Development%0A-%20%5BExplorer%5D(https%3A%2F%2Fpolkadot.subscan.io%2Fparachain)%3A%20Can%20be%20used%20to%20review%20if%20a%20common%20good%20parachain%20is%20deployed.%20Bridge%20messages%20will%20be%20displayed%20as%20Cross%20Chain%20Messages%20(XCM)%20on%20this%20%5Bxcm%20dashboard%5D(https%3A%2F%2Fpolkadot.subscan.io%2Fxcm_dashboard).%0A-%20%5BRoadmap%5D(https%3A%2F%2Fgateway.pinata.cloud%2Fipfs%2FQmfYGxQvyjVrgm9ajfzCysbuvLXdsRxP5R5HFjWcrj2yYY)%3A%20The%20%5BSnowbridge%20Funding%20Proposal%5D(https%3A%2F%2Fpolkadot.polkassembly.io%2Fpost%2F1341)%20includes%20a%20link%20to%20the%20%5Broadmap%5D(https%3A%2F%2Fgateway.pinata.cloud%2Fipfs%2FQmfYGxQvyjVrgm9ajfzCysbuvLXdsRxP5R5HFjWcrj2yYY)%20which%20details%20the%20milestones%20and%20rollout.%0A%0A%23%23%20Design%20Notes%0A%0A**%5Blight-client%20verification%20polkadot%5D(https%3A%2F%2Fdocs.snowbridge.network%2Farchitecture%2Fverification%2Fpolkadot)**%0A%0AWe%20use%20Polkadot%E2%80%99s%20BEEFY%20gadget%20to%20implement%20an%20efficient%20light%20client%20that%20only%20needs%20to%20verify%20a%20very%20small%20subset%20of%20relay%20chain%20validator%20signatures.%20BEEFY%20is%20live%20on%20Rococo%2C%20and%20is%20awaiting%20deployment%20on%20Kusama%20and%20Polkadot.%0AFundamentally%2C%20the%20BEEFY%20light%20client%20allows%20the%20bridge%20to%20prove%20that%20a%20specified%20parachain%20header%20was%20finalized%20by%20the%20relay%20chain.%0A%0A**%5BBEEFY%20light%20client%5D(https%3A%2F%2Fgithub.com%2Fparitytech%2Fparity-bridges-common%2Fblob%2Fmaster%2Fmodules%2Fbeefy%2Fsrc%2Flib.rs)**%0A%0A%3E%20BEEFY%20bridge%20pallet.%0A%3E%0A%3E%20This%20pallet%20is%20an%20on-chain%20BEEFY%20light%20client%20for%20Substrate-based%20chains%20that%20are%20using%20the%20following%20pallets%20bundle%3A%20%60pallet-mmr%60%2C%20%60pallet-beefy%60%20and%20%60pallet-beefy-mmr%60.%0A%3E%0A%3E%20The%20pallet%20is%20able%20to%20verify%20MMR%20leaf%20proofs%20and%20BEEFY%20commitments%2C%20so%20it%20has%20access%20to%20the%20following%20data%20of%20the%20bridged%20chain%3A%0A%3E%0A%3E%20-%20header%20hashes%0A%3E%20-%20changes%20of%20BEEFY%20authorities%0A%3E%20-%20extra%20data%20of%20MMR%20leafs%0A%3E%0A%3E%20Given%20the%20header%20hash%2C%20other%20pallets%20are%20able%20to%20verify%20header-based%20proofs%20(e.g.%20storage%20proofs%2C%20transaction%20inclusion%20proofs%2C%20etc.).%0A%0A**%5Blight-client%20verification%20ethereum%5D(https%3A%2F%2Fdocs.snowbridge.network%2Farchitecture%2Fverification%2Fethereum)**%0A%0AWe%20have%20implemented%20a%20Proof-of-Stake%20(PoS)%20light%20client%20for%20the%20Beacon%20chain.%20This%20client%20deprecates%20the%20older%20PoW%20light%20client%20we%20developed%20in%202020.%0A%0AThe%20beacon%20client%20tracks%20the%20beacon%20chain%2C%20the%20new%20Ethereum%20chain%20that%20will%20replace%20Ethereum's%20Proof-of-Work%20consensus%20method%20around%20mid-September%2C%20called%20the%20Merge.%20The%20work%20we%20have%20done%20consists%20of%20the%20following%20parts%3A%0A%0A-%20Beacon%20Client%20pallet%0A%20%20-%20Initial%20chain%20snapshot%20(forms%20part%20of%20the%20Genesis%20Config)%0A%20%20-%20Sync%20committee%20updates%0A%20%20-%20Finalized%20beacon%20header%20updates%0A%20%20-%20Execution%20header%20updates%0A%20%20-%20Message%20verification%0A-%20Beacon%20Relayer%0A%20%20-%20Sends%20data%20from%20a%20beacon%20node%20to%20the%20beacon%20client%0A%0A%23%23%20Code%20Review%0A%0A%23%23%23%20Signing%20Mechanisms%0A%0A-%20%5Bsecp256k1%5D(https%3A%2F%2Fwww.secg.org%2Fsec2-v2.pdf)%0A%20%20-%20%5Bsnowbridge%20secp256k1%5D(https%3A%2F%2Fgithub.com%2FSnowfork%2Fsnowbridge%2Ftree%2Fmain%2Frelayer%2Fcrypto%2Fsecp256k1)%0A-%20%5Bsr25519%5D(https%3A%2F%2Fwiki.polkadot.network%2Fdocs%2Flearn-cryptography%23what-is-sr25519-and-where-did-it-come-from)%3A%20schnorr%20over%20ristretto25519%0A%20%20-%20%5Bsnowbridge%20sr25519%5D(https%3A%2F%2Fgithub.com%2FSnowfork%2Fsnowbridge%2Ftree%2Fmain%2Frelayer%2Fcrypto%2Fsecp256k1)%0A%0A%23%23%23%20Cryptographic%20Primitives%0A%0A-%20%5Bkeccak256%5D(https%3A%2F%2Fkeccak.team%2Fkeccak.html)%20hash%20function%0A%20%20-%20%5Bsnowbridge%20keccak%5D(https%3A%2F%2Fgithub.com%2FSnowfork%2Fsnowbridge%2Fblob%2Fmain%2Frelayer%2Fcrypto%2Fkeccak%2Fkeccak.go)%0A-%20%5Bmerkle%20trees%5D(https%3A%2F%2Fen.wikipedia.org%2Fwiki%2FMerkle_tree)%0A%20%20-%20%5Bsnowbridge%20merkle.go%5D(https%3A%2F%2Fgithub.com%2FSnowfork%2Fsnowbridge%2Fblob%2Fmain%2Frelayer%2Fcrypto%2Fmerkle%2Fmerkle.go)%0A%20%20-%20%5Bsnowbridge%20merkleization.rs%5D(https%3A%2F%2Fgithub.com%2FSnowfork%2Fsnowbridge%2Fblob%2Fmain%2Fparachain%2Fpallets%2Fethereum-beacon-client%2Fsrc%2Fmerkleization.rs)%0A-%20%5Bmerkle_proof%5D(https%3A%2F%2Fgithub.com%2Fethereum%2Fconsensus-specs%2Fblob%2Fdev%2Fssz%2Fmerkle-proofs.mdx)%20%5Bexplainer%5D(https%3A%2F%2Fsoliditydeveloper.com%2Fmerkle-tree)%0A%20%20-%20%5Bsnowbridge%20simplified_mmr_proof.go%5D(https%3A%2F%2Fgithub.com%2FSnowfork%2Fsnowbridge%2Fblob%2Fmain%2Frelayer%2Fcrypto%2Fmerkle%2Fsimplified_mmr_proof.go)%0A%20%20-%20%5Bsnowbridge%20merkle-proof%20rust%5D(https%3A%2F%2Fgithub.com%2FSnowfork%2Fsnowbridge%2Ftree%2Fmain%2Fparachain%2Fpallets%2Fbasic-channel%2Fmerkle-proof)%0A%20%20-%20%5Bsnowbridge%20MerkleProof.sol%5D(https%3A%2F%2Fgithub.com%2FSnowfork%2Fsnowbridge%2Fblob%2Fmain%2Fcore%2Fpackages%2Fcontracts%2Fcontracts%2Futils%2FMerkleProof.sol)%0A-%20%5BMerkle%20Mountain%20Range%5D(https%3A%2F%2Fdocs.grin.mw%2Fwiki%2Fchain-state%2Fmerkle-mountain-range%2F)%0A%20%20-%20%5Bsnowbridge%20MMRProof.sol%5D(https%3A%2F%2Fgithub.com%2FSnowfork%2Fsnowbridge%2Fblob%2Fmain%2Fcore%2Fpackages%2Fcontracts%2Fcontracts%2Futils%2FMMRProof.sol)%0A%20%20-%20%5Bsnowfork%20merkle-mountain-range%5D(https%3A%2F%2Fgithub.com%2FSnowfork%2Fmerkle-mountain-range)%0A-%20%5BSimple%20Serialize%5D(https%3A%2F%2Fethereum.org%2Fen%2Fdevelopers%2Fdocs%2Fdata-structures-and-encoding%2Fssz%2F)%0A%20%20-%20%5Bsnowbridge%20ssz.rs%5D(https%3A%2F%2Fgithub.com%2FSnowfork%2Fsnowbridge%2Fblob%2Fmain%2Fparachain%2Fpallets%2Fethereum-beacon-client%2Fsrc%2Fssz.rs)%0A%0A%23%23%23%20Proving%20Mechanisms%0A%0A-%20%5BBeefy%5D(https%3A%2F%2Fwiki.polkadot.network%2Fdocs%2Flearn-consensus%23bridging-beefy)%0A%20%20-%20%5Bsnowbridge%20BeefyClient.sol%5D(https%3A%2F%2Fgithub.com%2FSnowfork%2Fsnowbridge%2Fblob%2Fmain%2Fcore%2Fpackages%2Fcontracts%2Fcontracts%2FBeefyClient.sol)%0A%0A-%20%5Bsnowbridge%20ethereum-beacon-client%20rust%5D(https%3A%2F%2Fgithub.com%2FSnowfork%2Fsnowbridge%2Ftree%2Fmain%2Fparachain%2Fpallets%2Fethereum-beacon-client)%0A-%20%5Bsnowbridge%20ethereum-light-client%20rust%5D(https%3A%2F%2Fgithub.com%2FSnowfork%2Fsnowbridge%2Ftree%2Fmain%2Fparachain%2Fpallets%2Fethereum-light-client)%0A%0A%23%23%23%20Relayer%20Mechanisms%0A%0AThe%20%5Brelays%20folder%5D(https%3A%2F%2Fgithub.com%2FSnowfork%2Fsnowbridge%2Ftree%2Fmain%2Frelayer%2Frelays)%20has%20multiple%20relayers%20controlled%20by%20%5Bexecution%5D(https%3A%2F%2Fgithub.com%2FSnowfork%2Fsnowbridge%2Fblob%2Fmain%2Frelayer%2Frelays%2Fexecution%2Fmain.go).%20All%20written%20in%20go.%0A%0A-%20Relaying%20from%20Ethereum%20to%20Polkadot%0A%20%20-%20%5Bbeacon%5D(https%3A%2F%2Fgithub.com%2FSnowfork%2Fsnowbridge%2Ftree%2Fmain%2Frelayer%2Frelays%2Fbeacon)%3A%20Responsible%20for%20retrieving%20state%20from%20the%20beacon%20chain%20including%0A%20%20%20%20-%20%5Bsynching%5D(https%3A%2F%2Fgithub.com%2FSnowfork%2Fsnowbridge%2Fblob%2Fmain%2Frelayer%2Frelays%2Fbeacon%2Fheader%2Fsyncer%2Fsyncer.go)%3A%0A%20%20%20%20%20%20-%20%5BHeader%5D(https%3A%2F%2Fgithub.com%2FSnowfork%2Fsnowbridge%2Fblob%2Fmain%2Frelayer%2Frelays%2Fbeacon%2Fheader%2Fsyncer%2Fsyncer.go%23L47)%0A%20%20%20%20%20%20-%20%5BCurrentSyncCommittee%5D(https%3A%2F%2Fgithub.com%2FSnowfork%2Fsnowbridge%2Fblob%2Fmain%2Frelayer%2Frelays%2Fbeacon%2Fheader%2Fsyncer%2Fsyncer.go%23L55)%0A%20%20%20%20%20%20-%20%5BSyncAggregate%5D(https%3A%2F%2Fgithub.com%2FSnowfork%2Fsnowbridge%2Fblob%2Fmain%2Frelayer%2Frelays%2Fbeacon%2Fheader%2Fsyncer%2Fsyncer.go%23LL60C12-L60C12)%0A%20%20%20%20-%20functions%20include%0A%20%20%20%20%20%20-%20%5BGetSyncPeriodsToFetch%5D(https%3A%2F%2Fgithub.com%2FSnowfork%2Fsnowbridge%2Fblob%2Fmain%2Frelayer%2Frelays%2Fbeacon%2Fheader%2Fsyncer%2Fsyncer.go%23L65)%0A%20%20%20%20%20%20-%20%5BGetInitialSync%5D(https%3A%2F%2Fgithub.com%2FSnowfork%2Fsnowbridge%2Fblob%2Fmain%2Frelayer%2Frelays%2Fbeacon%2Fheader%2Fsyncer%2Fsyncer.go%23L83)%0A%20%20%20%20%20%20-%20%5BGetSyncCommitteePeriodUpdate%5D(https%3A%2F%2Fgithub.com%2FSnowfork%2Fsnowbridge%2Fblob%2Fmain%2Frelayer%2Frelays%2Fbeacon%2Fheader%2Fsyncer%2Fsyncer.go%23L118)%0A%20%20%20%20%20%20-%20%5BGetBlockRoots%5D(https%3A%2F%2Fgithub.com%2FSnowfork%2Fsnowbridge%2Fblob%2Fmain%2Frelayer%2Frelays%2Fbeacon%2Fheader%2Fsyncer%2Fsyncer.go%23L187)%0A%20%20%20%20%20%20-%20%5BGetFinalizedUpdate%5D(https%3A%2F%2Fgithub.com%2FSnowfork%2Fsnowbridge%2Fblob%2Fmain%2Frelayer%2Frelays%2Fbeacon%2Fheader%2Fsyncer%2Fsyncer.go%23L252)%0A%20%20%20%20%20%20-%20%5BHasFinalizedHeaderChanged%5D(https%3A%2F%2Fgithub.com%2FSnowfork%2Fsnowbridge%2Fblob%2Fmain%2Frelayer%2Frelays%2Fbeacon%2Fheader%2Fsyncer%2Fsyncer.go%23L305)%0A%20%20%20%20%20%20-%20%5BGetLatestFinalizedHeader%5D(https%3A%2F%2Fgithub.com%2FSnowfork%2Fsnowbridge%2Fblob%2Fmain%2Frelayer%2Frelays%2Fbeacon%2Fheader%2Fsyncer%2Fsyncer.go%23L326)%0A%20%20%20%20%20%20-%20%5BgetNextBlockRootBySlot%5D(https%3A%2F%2Fgithub.com%2FSnowfork%2Fsnowbridge%2Fblob%2Fmain%2Frelayer%2Frelays%2Fbeacon%2Fheader%2Fsyncer%2Fsyncer.go%23L379)%0A%20%20%20%20%20%20-%20%5BGetNextHeaderUpdateBySlotWithAncestryProof%5D(https%3A%2F%2Fgithub.com%2FSnowfork%2Fsnowbridge%2Fblob%2Fmain%2Frelayer%2Frelays%2Fbeacon%2Fheader%2Fsyncer%2Fsyncer.go%23L425)%0A%20%20%20%20%20%20-%20%5BGetNextHeaderUpdateBySlot%5D(https%3A%2F%2Fgithub.com%2FSnowfork%2Fsnowbridge%2Fblob%2Fmain%2Frelayer%2Frelays%2Fbeacon%2Fheader%2Fsyncer%2Fsyncer.go%23L434)%0A%20%20%20%20%20%20-%20%5BGetHeaderUpdateWithAncestryProof%5D(https%3A%2F%2Fgithub.com%2FSnowfork%2Fsnowbridge%2Fblob%2Fmain%2Frelayer%2Frelays%2Fbeacon%2Fheader%2Fsyncer%2Fsyncer.go%23L457)%0A%20%20%20%20%20%20-%20%5BgetBlockHeaderAncestryProof%5D(https%3A%2F%2Fgithub.com%2FSnowfork%2Fsnowbridge%2Fblob%2Fmain%2Frelayer%2Frelays%2Fbeacon%2Fheader%2Fsyncer%2Fsyncer.go%23L495)%0A%20%20%20%20%20%20-%20%5BGetSyncAggregate%5D(https%3A%2F%2Fgithub.com%2FSnowfork%2Fsnowbridge%2Fblob%2Fmain%2Frelayer%2Frelays%2Fbeacon%2Fheader%2Fsyncer%2Fsyncer.go%23L520)%0A%20%20%20%20%20%20-%20%5BGetSyncAggregateForSlot%5D(https%3A%2F%2Fgithub.com%2FSnowfork%2Fsnowbridge%2Fblob%2Fmain%2Frelayer%2Frelays%2Fbeacon%2Fheader%2Fsyncer%2Fsyncer.go%23L534)%0A%20%20-%20%5Bethereum%5D(https%3A%2F%2Fgithub.com%2FSnowfork%2Fsnowbridge%2Ftree%2Fmain%2Frelayer%2Frelays%2Fethereum)%3A%20Responsible%20for%20retreiving%20block%20headers%20from%20the%20execution%20chain.%0A-%20Relaying%20from%20Polkadot%20to%20Etherem%0A%20%20-%20%5Bparachain%5D(https%3A%2F%2Fgithub.com%2FSnowfork%2Fsnowbridge%2Ftree%2Fmain%2Frelayer%2Frelays%2Fparachain)%0A%20%20-%20%5Bbeefy%5D(https%3A%2F%2Fgithub.com%2FSnowfork%2Fsnowbridge%2Ftree%2Fmain%2Frelayer%2Frelays%2Fbeefy)%0A%0A%23%23%23%20Light%20Client%20Functionality%0A%0A-%20%5BBeefy%5D(https%3A%2F%2Fwiki.polkadot.network%2Fdocs%2Flearn-consensus%23bridging-beefy)%0A%20%20-%20%5Bsnowbridge%20BeefyClient.sol%5D(https%3A%2F%2Fgithub.com%2FSnowfork%2Fsnowbridge%2Fblob%2Fmain%2Fcore%2Fpackages%2Fcontracts%2Fcontracts%2FBeefyClient.sol)%0A%0A-%20%5Bsnowbridge%20ethereum-beacon-client%20rust%5D(https%3A%2F%2Fgithub.com%2FSnowfork%2Fsnowbridge%2Ftree%2Fmain%2Fparachain%2Fpallets%2Fethereum-beacon-client)%0A-%20%5Bsnowbridge%20ethereum-light-client%20rust%5D(https%3A%2F%2Fgithub.com%2FSnowfork%2Fsnowbridge%2Ftree%2Fmain%2Fparachain%2Fpallets%2Fethereum-light-client)%0A%0A%23%23%23%20Token%20Lockers%0A%0A-%20%5Bsnowbridge%20ERC20Vault.sol%5D(https%3A%2F%2Fgithub.com%2FSnowfork%2Fsnowbridge%2Fblob%2Fmain%2Fcore%2Fpackages%2Fcontracts%2Fcontracts%2FERC20Vault.sol)%0A%0A%23%23%20References%0A%0A%23%23%20Appendices%0A",lastUpdatedAt:1753125084e3},{lazy:()=>o2(()=>import("./succinct-B98j6VtX.js"),[]),path:"/research/bridge/succinct",type:"mdx",filePath:"research/bridge/succinct.mdx",content:"%23%20Succinct%20Labs%0A%0A-%20date%3A%202023-02-24%0A-%20last%20updated%3A%202023-02-24%0A%0A%23%23%20Overview%0A%0ASuccinct%5B%5Eov-1%5D%20is%20building%20Telepathy%5B%5Eov-2%5D%20a%20zkSNARK%20circuit%20that%20verifies%20Ethereum%20validator%20signatures%2C%20allowing%20for%20a%20gas-efficient%20light%20client%20to%20run%20as%20a%20smart%20contract%20on%20any%20EVM%20chain.%0A%0A-%20%5Bsuccint%5D(https%3A%2F%2Fgithub.com%2Fsuccinctlabs)%0A%20%20-%20https%3A%2F%2Fgithub.com%2Fsuccinctlabs%2Fplonky2-ecdsa%0A%20%20-%20https%3A%2F%2Fgithub.com%2Fsuccinctlabs%2Fgnark-plonky2-verifier%0A%20%20-%20https%3A%2F%2Fgithub.com%2Fsuccinctlabs%2Ftelepathy-contracts%0A%20%20%20%20-%20%5BArbitrary%20Message%20Bridge%5D(https%3A%2F%2Fgithub.com%2Fsuccinctlabs%2Ftelepathy-contracts%2Ftree%2Fmain%2Fsrc%2Famb)%0A%20%20%20%20-%20https%3A%2F%2Fgithub.com%2Fsuccinctlabs%2Foptimism-bedrock-contracts%0A%20%20%20%20-%20https%3A%2F%2Fgithub.com%2Fsuccinctlabs%2Fv3-core%20(Business%20Source%20License%202023-04-01)%0A%0A%23%23%20Succinct%20Bridge%20Overview%0A%0A1.%20%5BSuccinct%20Blog%20Oct%2029%2C%202022%5D(https%3A%2F%2Fblog.succinct.xyz%2Fblog%2Fproof-of-consensus)%3A%20Proof%20of%20Consensus%20Bridging%20between%20Ethereum%20and%20Gnosis%20Chain%0A%0A%3E%20The%20on-chain%20light%20client%20recreates%20the%20light%20client%20spec%20in%20Solidity%20(code%20here).%20In%20particular%2C%20we%20implement%20the%20process_light_client_finality_update%20function%20inside%20the%20step%20function%20in%20our%20smart%20contract.%20Then%2C%20inside%20step%2C%20where%20we%20would%20typically%20verify%20an%20aggregate%20BLS%20signature%2C%20we%20instead%20replace%20it%20with%20verification%20of%20a%20single%20Groth16%20zkSNARK%20to%20reduce%20gas%20costs.%0A%3E%0A%3E%20Recall%20that%20the%20validator%20set%20of%20the%20sync%20committee%20rotates%20every%2027%20hours.%20On%20chain%2C%20we%20keep%20track%20of%20a%20commitment%20to%20the%20set%20of%20validators%20in%20the%20mapping%20syncCommitteeRootByPeriod.%20To%20update%20this%20mapping%20for%20the%20next%20period%2C%20we%20verify%20the%20merkle%20inclusion%20proof%20that%20the%20current%20validator%20set%20signs%20for%20the%20commitment%20for%20the%20next%20validator%20set.%20This%20computation%20happens%20inside%20the%20updateSyncCommittee%20function.%0A%3E%0A%3E%20Unfortunately%2C%20the%20commitment%20the%20validators%20sign%20is%20an%20SSZ%20commitment%20(simple%20serialization%2C%20Eth%20PoS%20serialization%20format)%20that%20is%20quite%20SNARK%20unfriendly%2C%20as%20it%20uses%20the%20SHA-256%20hash%20function.%20It%20takes%20~70%20million%20constraints%20in%20a%20Groth16%20circuit%20to%20compute%20the%20serialization%20of%20512%20validator%20BLS%20public%20keys%20to%20its%20corresponding%20SSZ%20commitment.%20Because%20we%20don%E2%80%99t%20want%20to%20do%20this%20for%20every%20single%20header%20verification%20proof%20(which%20happens%20every%206%20minutes%2C%20i.e.%20once%20per%20epoch)%2C%20we%20use%20an%20additional%20SNARK%20(the%20commitmentMappingProof%20argument)%20to%20provably%20map%20an%20SSZ%20commitment%20to%20a%20SNARK-friendly%20Poseidon%20commitment%2C%20that%20is%20stored%20in%20the%20mapping%20sszToPoseidon.%20For%20each%20BLS%20signature%20verification%2C%20we%20pass%20in%20the%20poseidon%20commitment%20of%20the%20sync%20committee%20validators%20as%20public%20input%20to%20ensure%20that%20the%20BLS%20signature%20we%20are%20verifying%20is%20from%20the%20correct%20public%20keys.%20Overall%20this%20approach%20(using%202%20SNARKs)%20saves%20us%2070M%20constraints%20on%20the%20BLS%20signature%20verification%20SNARK%2C%20which%20we%20must%20run%20for%20every%20update%20we%20wish%20to%20submit%20to%20the%20light%20client.%20The%20commitment%20mapping%20SNARK%20must%20only%20be%20run%20every%20sync%20committee%20period%20(roughly%20once%20every%2027%20hours).%0A%3E%0A%3E%20Toolchain%0A%3E%20We%20use%20the%20Circom%20programming%20language%20and%20the%20Groth16%20proving%20system%20to%20generate%20our%20zkSNARKs.%20While%20a%20newer%20proof%20system%20(like%20PLONK%20arithmetization%20%2B%20KZG%20or%20FRI)%20would%20improve%20proving%20time%2C%20we%20believe%20Circom%20is%20the%20most%20production-ready%20zkSNARK%20stack%20today.%20In%20particular%2C%20Tornado%20Cash%E2%80%99s%20circuits%20are%20built%20on%20top%20of%20Circom%20and%20have%20been%20used%20for%20several%20years.%20Additionally%2C%20the%20on-chain%20verification%20cost%20of%20a%20Groth16%20zkSNARK%20is%20the%20cheapest%20of%20all%20proving%20systems%20available%20today.%0A%0A2.%20%5Beth-proof-of-consensus%5D(https%3A%2F%2Fgithub.com%2Fsuccinctlabs%2Feth-proof-of-consensus)%3A%20github%20repository%0A3.%20%5BGIP-57%5D(https%3A%2F%2Fforum.gnosis.io%2Ft%2Fgip-57-should-gnosis-dao-support-research-of-a-zksnark-enabled-light-client-and-bridge%2F5421)%3A%20%24600%2C000%20Grant%20from%20Gnosis%20to%20Succinct%20to%20support%0A4.%20%5BSuccinct%20Tweet%5D(https%3A%2F%2Ftwitter.com%2Fsuccinctlabs%2Fstatus%2F1572299292177481729)%20%3A%20Succinct%20tweet%20giving%20an%20overview%20of%20the%20bridge%0A5.%20%5BSuccinct%20Blog%20Sep%2020%2C%202022%5D(https%3A%2F%2Fblog.succinct.xyz%2Fpost%2F2022%2F09%2F20%2Fproof-of-consensus)%3A%20Towards%20the%20endgame%20of%20blockchain%20interoperability%20with%20proof%20of%20consensus%0A6.%20%5BGIP-57%5D(https%3A%2F%2Fforum.gnosis.io%2Ft%2Fgip-57-should-gnosis-dao-support-research-of-a-zksnark-enabled-light-client-and-bridge%2F5421)%3A%20%24600%2C000%20Grant%20from%20Gnosis%20to%20Succinct%20to%20support%20research%20of%20a%20zkSNARK-enabled%20light%20client%20and%20bridge.%0A7.%20%5BSuccinct%20Video%5D(https%3A%2F%2Fyoutu.be%2FcMSayTJA1B4)%3A%20ZK8%3A%20Succinct%20Verification%20of%20Consensus%20with%20zkSNARKs%20-%20Uma%20Roy%20%26%20John%20Guibas%20-%20Succinct%20Labs%0A%0A%23%23%20Trusted%20Setup%0A%0A%23%23%23%20Best%20Practices%20for%20Setup%0A%0A1.%20%5BBest%20Practices%20for%20Large%20Circuits%5D(https%3A%2F%2Fhackmd.io%2FV-7Aal05Tiy-ozmzTGBYPA)%3A%20compiling%20and%20generating%20Groth16%20proofs%20for%20large%20ZK%20circuits%20using%20the%20circom%20%2F%20snarkjs%20toolstack.%0A%0A%3E%20For%20such%20large%20circuits%2C%20you%20need%20a%20machine%20with%20an%20Intel%20processor%2C%20lots%20of%20RAM%20and%20a%20large%20hard%20drive%20with%20swap%20enabled.%20For%20example%2C%20the%20zkPairing%20project%20used%20an%20AWS%20r5.8xlarge%20instance%20with%2032-core%203.1GHz%2C%20256G%20RAM%20machine%20with%201T%20hard%20drive%20and%20400G%20swap.%0A%3E%0A%3E%20Compilation%3A%20for%20circuits%20with%20%3E20M%20constraints%2C%20one%20should%20not%20compile%20to%20WebAssembly%20because%20witness%20generation%20will%20exceed%20the%20memory%20cap%20of%20WebAssembly.%20For%20this%20reason%2C%20one%20must%20compile%20with%20the%20C%2B%2B%20flag%20and%20remove%20the%20wasm%20flag.%0A%0A2.%20%5BHermez%20Zero-Knowledge%20Proofs%5D(https%3A%2F%2Fblog.hermez.io%2Fhermez-zero-knowledge-proofs%2F)%3A%20Overview%20of%20the%20Hermez%20Trusted%20Setupi%0A%0A%5BMachine%5D(https%3A%2F%2Faws.amazon.com%2Fec2%2Fpricing%2Fon-demand%2F)%3A%20AWS%20r5.8xlarge%20instance%20with%2032-core%203.1GHz%2C%20256G%20RAM%20machine%20with%201T%20hard%20drive%20and%20400G%20swap.%20%242.016%20per%20hour%0A%0A%23%23%23%20Trusted%20Ceremony%20(Powers%20of%20Tau)%0A%0A1.%20%5BPerpetual%20Powers%20of%20Tau%5D(https%3A%2F%2Fgithub.com%2Fweijiekoh%2Fperpetualpowersoftau)%3A%20The%20goal%20is%20to%20securely%20generate%20zk-SNARK%0A2.%20%5Bsnarkjs%20Prepare%20phase%202%5D(https%3A%2F%2Fgithub.com%2Fiden3%2Fsnarkjs%2Fblob%2Fmaster%2FREADME.md%237-prepare-phase-2)%3A%20Provide%20instructions%20on%20prepare%20phase%202%20and%20links%20to%20the%20Powers%20of%20Tau%20files.%0A3.%20%5BPowers%20of%20Tau%20files%20on%20Dropbox%5D(https%3A%2F%2Fwww.dropbox.com%2Fsh%2Fmn47gnepqu88mzl%2FAACaJkBU7mmCq8uU8ml0-0fma%3Fdl%3D0)%3A%0A%0A%5BDownload%20powersOfTau28_hez_final_27.ptau%5D(https%3A%2F%2Fhermez.s3-eu-west-1.amazonaws.com%2FpowersOfTau28_hez_final_27.ptau)%3A%20144%20GB%20file%20containing%20the%20encrypted%20evaluation%20of%20the%20Lagrange%20polynomials%20at%20tau%20for%20tau%2C%20alpha*tau%20and%20beta*tau.%20It%20takes%20the%20beacon%20ptau%20file%20we%20generated%20in%20the%20previous%20step%2C%20and%20outputs%20a%20final%20ptau%20file%20which%20will%20be%20used%20to%20generate%20the%20circuit%20proving%20and%20verification%20keys.%0A%0A%23%23%23%20Example%20Build%0A%0A1.%20%5Bbuild_aggregate_bls_verify.sh%5D(https%3A%2F%2Fgithub.com%2Fsuccinctlabs%2Feth-proof-of-consensus%2Fblob%2Fmain%2Fcircuits%2Fcircuits%2Faggregate_bls_verify.circom)%0A%0A%60%60%60%0A%23!%2Fbin%2Fbash%0APHASE1%3D%2Fhome%2Fubuntu%2FpowersOfTau28_hez_final_27.ptau%0ABUILD_DIR%3D..%2Fbuild%0ACIRCUIT_NAME%3Dtest_aggregate_bls_verify_512%0ATEST_DIR%3D..%2Ftest%0AOUTPUT_DIR%3D%22%24BUILD_DIR%22%2F%22%24CIRCUIT_NAME%22_cpp%0A%0Arun()%20%7B%0A%20%20%20%20if%20%5B%20!%20-d%20%22%24BUILD_DIR%22%20%5D%3B%20then%0A%20%20%20%20%20%20%20%20echo%20%22No%20build%20directory%20found.%20Creating%20build%20directory...%22%0A%20%20%20%20%20%20%20%20mkdir%20-p%20%22%24BUILD_DIR%22%0A%20%20%20%20fi%0A%0A%20%20%20%20%23%20echo%20%22****COMPILING%20CIRCUIT****%22%0A%20%20%20%20%23%20start%3D%60date%20%2B%25s%60%0A%20%20%20%20%23%20circom%20%22%24TEST_DIR%22%2Fcircuits%2F%22%24CIRCUIT_NAME%22.circom%20--O1%20--r1cs%20--sym%20--c%20--output%20%22%24BUILD_DIR%22%0A%20%20%20%20%23%20end%3D%60date%20%2B%25s%60%0A%20%20%20%20%23%20echo%20%22DONE%20(%24((end-start))s)%22%0A%0A%20%20%20%20%23%20echo%20%22****Running%20make%20to%20make%20witness%20generation%20binary****%22%0A%20%20%20%20%23%20start%3D%60date%20%2B%25s%60%0A%20%20%20%20%23%20make%20-C%20%22%24OUTPUT_DIR%22%0A%20%20%20%20%23%20end%3D%60date%20%2B%25s%60%0A%20%20%20%20%23%20echo%20%22DONE%20(%24((end-start))s)%22%0A%0A%20%20%20%20echo%20%22****Executing%20witness%20generation****%22%0A%20%20%20%20start%3D%60date%20%2B%25s%60%0A%20%20%20%20.%2F%22%24OUTPUT_DIR%22%2F%22%24CIRCUIT_NAME%22%20%22%24TEST_DIR%22%2Finput_aggregate_bls_verify_512.json%20witness.wtns%0A%20%20%20%20end%3D%60date%20%2B%25s%60%0A%20%20%20%20echo%20%22DONE%20(%24((end-start))s)%22%0A%0A%20%20%20%20echo%20%22****Converting%20witness%20to%20json****%22%0A%20%20%20%20start%3D%60date%20%2B%25s%60%0A%20%20%20%20npx%20snarkjs%20wej%20%22%24OUTPUT_DIR%22%2Fwitness.wtns%20%22%24OUTPUT_DIR%22%2Fwitness.json%0A%20%20%20%20end%3D%60date%20%2B%25s%60%0A%20%20%20%20echo%20%22DONE%20(%24((end-start))s)%22%0A%0A%20%20%20%20echo%20%22****GENERATING%20ZKEY%200****%22%0A%20%20%20%20start%3D%60date%20%2B%25s%60%0A%20%20%20%20npx%20--trace-gc%20--trace-gc-ignore-scavenger%20--max-old-space-size%3D2048000%20--initial-old-space-size%3D2048000%20--no-global-gc-scheduling%20--no-incremental-marking%20--max-semi-space-size%3D1024%20--initial-heap-size%3D2048000%20--expose-gc%20snarkjs%20zkey%20new%20%22%24BUILD_DIR%22%2F%22%24CIRCUIT_NAME%22.r1cs%20%22%24PHASE1%22%20%22%24OUTPUT_DIR%22%2F%22%24CIRCUIT_NAME%22_p1.zkey%0A%20%20%20%20end%3D%60date%20%2B%25s%60%0A%20%20%20%20echo%20%22DONE%20(%24((end-start))s)%22%0A%0A%20%20%20%20echo%20%22****CONTRIBUTE%20TO%20PHASE%202%20CEREMONY****%22%0A%20%20%20%20start%3D%60date%20%2B%25s%60%0A%20%20%20%20npx%20snarkjs%20zkey%20contribute%20%22%24OUTPUT_DIR%22%2F%22%24CIRCUIT_NAME%22_p1.zkey%20%22%24OUTPUT_DIR%22%2F%22%24CIRCUIT_NAME%22_p2.zkey%20-n%3D%22First%20phase2%20contribution%22%20-e%3D%22some%20random%20text%20for%20entropy%22%0A%20%20%20%20end%3D%60date%20%2B%25s%60%0A%20%20%20%20echo%20%22DONE%20(%24((end-start))s)%22%0A%0A%20%20%20%20echo%20%22****VERIFYING%20FINAL%20ZKEY****%22%0A%20%20%20%20start%3D%60date%20%2B%25s%60%0A%20%20%20%20npx%20--trace-gc%20--trace-gc-ignore-scavenger%20--max-old-space-size%3D2048000%20--initial-old-space-size%3D2048000%20--no-global-gc-scheduling%20--no-incremental-marking%20--max-semi-space-size%3D1024%20--initial-heap-size%3D2048000%20--expose-gc%20npx%20snarkjs%20zkey%20verify%20%22%24BUILD_DIR%22%2F%22%24CIRCUIT_NAME%22.r1cs%20%22%24PHASE1%22%20%22%24OUTPUT_DIR%22%2F%22%24CIRCUIT_NAME%22_p2.zkey%0A%20%20%20%20end%3D%60date%20%2B%25s%60%0A%20%20%20%20echo%20%22DONE%20(%24((end-start))s)%22%0A%0A%20%20%20%20echo%20%22****EXPORTING%20VKEY****%22%0A%20%20%20%20start%3D%60date%20%2B%25s%60%0A%20%20%20%20npx%20snarkjs%20zkey%20export%20verificationkey%20%22%24OUTPUT_DIR%22%2F%22%24CIRCUIT_NAME%22_p2.zkey%20%22%24OUTPUT_DIR%22%2F%22%24CIRCUIT_NAME%22_vkey.json%0A%20%20%20%20end%3D%60date%20%2B%25s%60%0A%20%20%20%20echo%20%22DONE%20(%24((end-start))s)%22%0A%0A%20%20%20%20echo%20%22****GENERATING%20PROOF%20FOR%20SAMPLE%20INPUT****%22%0A%20%20%20%20start%3D%60date%20%2B%25s%60%0A%20%20%20%20~%2Frapidsnark%2Fbuild%2Fprover%20%22%24OUTPUT_DIR%22%2F%22%24CIRCUIT_NAME%22_p2.zkey%20%22%24OUTPUT_DIR%22%2Fwitness.wtns%20%22%24OUTPUT_DIR%22%2F%22%24CIRCUIT_NAME%22_proof.json%20%22%24OUTPUT_DIR%22%2F%22%24CIRCUIT_NAME%22_public.json%0A%20%20%20%20end%3D%60date%20%2B%25s%60%0A%20%20%20%20echo%20%22DONE%20(%24((end-start))s)%22%0A%0A%20%20%20%20echo%20%22****VERIFYING%20PROOF%20FOR%20SAMPLE%20INPUT****%22%0A%20%20%20%20start%3D%60date%20%2B%25s%60%0A%20%20%20%20npx%20snarkjs%20groth16%20verify%20%22%24OUTPUT_DIR%22%2F%22%24CIRCUIT_NAME%22_vkey.json%20%22%24OUTPUT_DIR%22%2F%22%24CIRCUIT_NAME%22_public.json%20%22%24OUTPUT_DIR%22%2F%22%24CIRCUIT_NAME%22_proof.json%0A%20%20%20%20end%3D%60date%20%2B%25s%60%0A%20%20%20%20echo%20%22DONE%20(%24((end-start))s)%22%0A%0A%20%20%20%20echo%20%22****EXPORTING%20SOLIDITY%20SMART%20CONTRACT****%22%0A%20%20%20%20start%3D%60date%20%2B%25s%60%0A%20%20%20%20npx%20snarkjs%20zkey%20export%20solidityverifier%20%22%24OUTPUT_DIR%22%2F%22%24CIRCUIT_NAME%22_p2.zkey%20verifier.sol%0A%20%20%20%20end%3D%60date%20%2B%25s%60%0A%20%20%20%20echo%20%22DONE%20(%24((end-start))s)%22%0A%7D%0A%0Amkdir%20-p%20logs%0Arun%202%3E%261%20%7C%20tee%20logs%2F%22%24CIRCUIT_NAME%22_%24(date%20'%2B%25Y-%25m-%25d-%25H-%25M').log%0A%60%60%60%0A%0A%23%23%20circuits%0A%0A1.%20%5BCircom%20Documentation%5D(https%3A%2F%2Fdocs.circom.io%2Fgetting-started%2Finstallation%2F)%3A%20Circom%20is%20a%20novel%20domain-specific%20language%20for%20defining%20arithmetic%20circuits%20that%20can%20be%20used%20to%20generate%20zero-knowledge%20proofs.%0A2.%20%5BCircom%20github%5D(https%3A%2F%2Fgithub.com%2Fiden3%2Fcircom)%0A3.%20%5Bcircomlib%20github%5D(https%3A%2F%2Fgithub.com%2Fiden3%2Fcircomlib)%20contains%20a%20library%20of%20circuit%20templates.%0A4.%20%5BzkPairing%20Docs%5D(https%3A%2F%2F0xparc.org%2Fblog%2Fzk-pairing-1)%3A%20zkSNARKs%20for%20Elliptic%20Curve%20Pairings%20(Part%201)%0A5.%20%5Bcircom-paring%20github%5D(https%3A%2F%2Fgithub.com%2Fyi-sun%2Fcircom-pairing)%3A%20proof-of-concept%20implementations%20of%20elliptic%20curve%20pairings%20(in%20particular%2C%20the%20optimal%20Ate%20pairing%20and%20Tate%20pairing)%20for%20the%20BLS12-381%20curve%20in%20circom.%0A6.%20%5BBatch%20ECDSA%20Verification%20(github)%5D(https%3A%2F%2Fgithub.com%2Fpuma314%2Fbatch-ecdsa)%3A%20Implementation%20of%20batch%20ECDSA%20verification%20in%20circom.%0A7.%20%5Bcircom-ecdsa%20(github)%5D(https%3A%2F%2Fgithub.com%2F0xPARC%2Fcircom-ecdsa)%3A%20proof-of-concept%20implementations%20of%20ECDSA%20operations%20in%20circom.%0A8.%20%5Bsnarkjs%5D(https%3A%2F%2Fwww.npmjs.com%2Fpackage%2Fsnarkjs)%3A%20This%20is%20a%20JavaScript%20and%20Pure%20Web%20Assembly%20implementation%20of%20zkSNARK%20and%20PLONK%20schemes.%20It%20uses%20the%20Groth16%20Protocol%20(3%20point%20only%20and%203%20pairings)%20and%20PLONK.%0A9.%20%5Bsnarkjs%20Prepare%20phase%202%5D(https%3A%2F%2Fgithub.com%2Fiden3%2Fsnarkjs%2Fblob%2Fmaster%2FREADME.md%237-prepare-phase-2)%3A%20Provide%20instructions%20on%20prepare%20phase%202%20and%20links%20to%20the%20Powers%20of%20Tau%20files.%0A10.%20%5BPerpetual%20Powers%20of%20Tau%5D(https%3A%2F%2Fgithub.com%2Fweijiekoh%2Fperpetualpowersoftau)%3A%20The%20goal%20is%20to%20securely%20generate%20zk-SNARK%20parameters%20for%20circuits%20of%20up%20to%202%20%5E%2028%20(260%2B%20million)%20constraints.%0A11.%20%5BPowers%20of%20Tau%20files%20on%20Dropbox%5D(https%3A%2F%2Fwww.dropbox.com%2Fsh%2Fmn47gnepqu88mzl%2FAACaJkBU7mmCq8uU8ml0-0fma%3Fdl%3D0)%3A%0A12.%20%5Beth-proof-of-consensus%3A%20circuits%20aggregate_bls_verify.circom%5D(https%3A%2F%2Fgithub.com%2Fsuccinctlabs%2Feth-proof-of-consensus%2Fblob%2Fmain%2Fcircuits%2Fcircuits%2Faggregate_bls_verify.circom)%3A%20example%20circuit%20with%20the%20following%20includes%0A%0A%60%60%60%0Ainclude%20%22..%2Fcircom-pairing%2Fcircuits%2Fbls_signature.circom%22%3B%0Ainclude%20%22..%2Fcircom-pairing%2Fcircuits%2Fcurve.circom%22%3B%0Ainclude%20%22..%2Fcircom-pairing%2Fcircuits%2Fbls12_381_func.circom%22%3B%0Ainclude%20%22.%2Fsha256_bytes.circom%22%3B%0A%60%60%60%0A%0A%23%23%20Contracts%0A%0ABuilt%20using%20%5Bfoundry%5D(https%3A%2F%2Fbook.getfoundry.sh%2F)(%5Bgithub%5D(https%3A%2F%2Fgithub.com%2Ffoundry-rs%2Ffoundry))%20and%20%5Bforge%5D(https%3A%2F%2Fbook.getfoundry.sh%2Fforge%2F).%20Verifiers%20(%5BLight%20Client%20Contracts%5D(%23light-client-contracts))%20can%20be%20%5Bgenerated%5D(https%3A%2F%2Fdocs.circom.io%2Fgetting-started%2Fproving-circuits%2F%23verifying-from-a-smart-contract)%20from%20%5Bcircuits%5D(%23circuits)%20using%20%5Bsnarkjs%5D(https%3A%2F%2Fwww.npmjs.com%2Fpackage%2Fsnarkjs)%0A%0A%23%23%23%20Library%20Contracts%0A%0A1.%20%5Beth-proof-of-consensus%2Fcontracts%2Flib%2F%5D(https%3A%2F%2Fgithub.com%2Fsuccinctlabs%2Feth-proof-of-consensus%2Ftree%2Fmain%2Fcontracts%2Flib)%0A%20%20%201.%20%5BRLP%20decoder%2Freader%5D(https%3A%2F%2Fgithub.com%2Fhamdiallam%2FSolidity-RLP)%3A%20The%20reader%20contract%20provides%20an%20interface%20to%20first%20take%20RLP%20encoded%20bytes%20and%20convert%20them%20into%20an%20internal%20data%20structure%2C%20RLPItem%20through%20the%20function%2C%20toRlpItem(bytes).%0A%20%20%202.%20%5Bcurve-merkle-oracle%5D(https%3A%2F%2Fgithub.com%2Flidofinance%2Fcurve-merkle-oracle)%3A%20Trustless%20price%20oracle%20for%20ETH%2FstETH%20Curve%20pool.%0A%0A%3E%20Mechanics%0A%3E%20The%20oracle%20works%20by%20generating%20and%20verifying%20Merkle%20Patricia%20proofs%20of%20the%20following%20Ethereum%20state%3A%0A%3E%0A%3E%20Curve%20stETH%2FETH%20pool%20contract%20account%20and%20the%20following%20slots%20from%20its%20storage%20trie%3A%0A%3E%0A%3E%20admin_balances%5B0%5D%0A%3E%20admin_balances%5B1%5D%0A%3E%20stETH%20contract%20account%20and%20the%20following%20slots%20from%20its%20storage%20trie%3A%0A%3E%0A%3E%20shares%5B0xDC24316b9AE028F1497c275EB9192a3Ea0f67022%5D%0A%3E%20keccak256(%22lido.StETH.totalShares%22)%0A%3E%20keccak256(%22lido.Lido.beaconBalance%22)%0A%3E%20keccak256(%22lido.Lido.bufferedEther%22)%0A%3E%20keccak256(%22lido.Lido.depositedValidators%22)%0A%3E%20keccak256(%22lido.Lido.beaconValidators%22)%0A%0A%23%23%23%20Light%20Client%20Contracts%0A%0A1.%20%5Beth-proof-of-consensus%3A%20lightclient%5D(https%3A%2F%2Fgithub.com%2Fsuccinctlabs%2Feth-proof-of-consensus%2Ftree%2Fmain%2Fcontracts%2Fsrc%2Flightclient)%0A%20%20%201.%20%5BBeaconLightClient.sol%5D(https%3A%2F%2Fgithub.com%2Fsuccinctlabs%2Feth-proof-of-consensus%2Fblob%2Fmain%2Fcontracts%2Fsrc%2Flightclient%2FBeaconLightClient.sol)%0A%20%20%202.%20%5BPoseidonCommitmentVerifier.sol%5D(https%3A%2F%2Fgithub.com%2Fsuccinctlabs%2Feth-proof-of-consensus%2Fblob%2Fmain%2Fcontracts%2Fsrc%2Flightclient%2FPoseidonCommitmentVerifier.sol)%0A%20%20%203.%20%5BBLSAggregatedSignatureVerifier.sol%5D(https%3A%2F%2Fgithub.com%2Fsuccinctlabs%2Feth-proof-of-consensus%2Fblob%2Fmain%2Fcontracts%2Fsrc%2Flightclient%2FBLSAggregatedSignatureVerifier.sol)%0A%0A%23%23%23%20Bridge%20Contracts%0A%0A1.%20%5Beth-proof-of-consensus%3A%20amb%5D(https%3A%2F%2Fgithub.com%2Fsuccinctlabs%2Feth-proof-of-consensus%2Ftree%2Fmain%2Fcontracts%2Fsrc%2Famb)%3A%20Arbitrary%20Message%20Bridge%0A%20%20%201.%20%5BEthereum%20Magicians%3A%20A%20standard%20interface%20for%20arbitrary%20message%20bridges%20between%20chains%2Flayers%5D(https%3A%2F%2Fethereum-magicians.org%2Ft%2Fa-standard-interface-for-arbitrary-message-bridges-between-chains-layers%2F6163)%0A%20%20%202.%20%5BToken%20BridgeL%20ETH-xDai%20Arbitrary%20Message%20Bridge%5D(https%3A%2F%2Fdocs.tokenbridge.net%2Feth-xdai-amb-bridge%2Fabout-the-eth-xdai-amb)%3A%20An%20Arbitrary%20Message%20Bridge%20(AMB)%20between%20the%20Ethereum%20Mainnet%20and%20the%20xDai%20chain%0A2.%20%5Beth-proof-of-consensus%3A%20bridge%5D(https%3A%2F%2Fgithub.com%2Fsuccinctlabs%2Feth-proof-of-consensus%2Ftree%2Fmain%2Fcontracts%2Fsrc%2Fbridge)%0A%0A%23%23%23%20Additional%20Contracts%0A%0A1.%20%5Btokenbridge-contracts%5D(https%3A%2F%2Fgithub.com%2Fsuccinctlabs%2Ftokenbridge-contracts)%3A%20core%20functionality%20for%20the%20POA%20bridge.%20They%20implement%20the%20logic%20to%20relay%20assests%20between%20two%20EVM-based%20blockchain%20networks.%20The%20contracts%20collect%20bridge%20validator's%20signatures%20to%20approve%20and%20facilitate%20relay%20operations.%20(forked%20from%20%5Bomni%5D(https%3A%2F%2Fgithub.com%2Fomni%2Ftokenbridge-contracts))%0A%0A%23%23%20Relayer%0A%0A_Note%3A%20no%20public%20repository%20for%20relay%20functionality%20was%20found%20in%20%5Bsuccinctlabs%20github%5D(https%3A%2F%2Fgithub.com%2Fsuccinctlabs)._%0A%0A**TODO**%3A%20This%20section%20should%20give%20an%20overview%20of%0A%0A-%20Communication%20Protocol%0A-%20Message%20Formatting%0A-%20Relayer%20CodeBase%0A-%20Relayers%20Roles%20%3A%20Creating%20Proofs%20relaying%20blocks%20etc.%0A-%20Economic%20incentives.%0A%0AAdditional%20References%0A%0A1.%20%5BBeaconLightClient%20on%20Gnosis%20Chain%5D(https%3A%2F%2Fblockscout.com%2Fxdai%2Fmainnet%2Faddress%2F0xa3ae36abaD813241b75b3Bb0e9E7a37aeFD70807)%3A%20Transactions%20every%2050%20blocks%20on%20Gnosis%20i.e.%20approximately%20every%203%20minutes%0A2.%20%5BSuccinct%20Blog%20Oct%2029%2C%202022%5D(https%3A%2F%2Fblog.succinct.xyz%2Fblog%2Fproof-of-consensus%2F)%3A%20Proof%20of%20Consensus%20Bridging%20between%20Ethereum%20and%20Gnosis%20Chain%0A%0A%3E%20On%20Gnosis%20Chain%2C%20after%20the%20Ethereum%20block%20in%20which%20the%20deposit%20transaction%20was%20included%20is%20finalized%20(generally%202%20epochs%2C%20~12%20minutes)%20and%20the%20light%20client%20has%20been%20updated%20with%20a%20block%20of%20height%20greater%20than%20or%20equal%20to%20this%20block%2C%20our%20relayer%20automatically%20submits%20an%20executeMessage%20transaction%20to%20the%20Gnosis%20AMB.%0A%0A%23%23%20Appendices%0A%0A%23%23%20Footnotes%0A%0A%5B%5Eov-1%5D%3A%20%5BSuccint%5D(https%3A%2F%2Fwww.succinct.xyz%2F)%3A%20Building%20the%20end%20game%20of%20interoperability%20with%20zkSNARKs%0A%0A%5B%5Eov-2%5D%3A%20%5BTelepathy%5D(https%3A%2F%2Fdocs.telepathy.xyz%2F)%3A%20a%20zkSNARK%20circuit%20that%20verifies%20Ethereum%20validator%20signatures%2C%20allowing%20for%20a%20gas-efficient%20light%20client%20to%20run%20as%20a%20smart%20contract%20on%20any%20EVM%20chain.%0A",lastUpdatedAt:1753129136e3},{lazy:()=>o2(()=>import("./succinct-B98j6VtX.js"),[]),path:"/research/bridge/succinct.html",type:"mdx",filePath:"research/bridge/succinct.mdx",content:"%23%20Succinct%20Labs%0A%0A-%20date%3A%202023-02-24%0A-%20last%20updated%3A%202023-02-24%0A%0A%23%23%20Overview%0A%0ASuccinct%5B%5Eov-1%5D%20is%20building%20Telepathy%5B%5Eov-2%5D%20a%20zkSNARK%20circuit%20that%20verifies%20Ethereum%20validator%20signatures%2C%20allowing%20for%20a%20gas-efficient%20light%20client%20to%20run%20as%20a%20smart%20contract%20on%20any%20EVM%20chain.%0A%0A-%20%5Bsuccint%5D(https%3A%2F%2Fgithub.com%2Fsuccinctlabs)%0A%20%20-%20https%3A%2F%2Fgithub.com%2Fsuccinctlabs%2Fplonky2-ecdsa%0A%20%20-%20https%3A%2F%2Fgithub.com%2Fsuccinctlabs%2Fgnark-plonky2-verifier%0A%20%20-%20https%3A%2F%2Fgithub.com%2Fsuccinctlabs%2Ftelepathy-contracts%0A%20%20%20%20-%20%5BArbitrary%20Message%20Bridge%5D(https%3A%2F%2Fgithub.com%2Fsuccinctlabs%2Ftelepathy-contracts%2Ftree%2Fmain%2Fsrc%2Famb)%0A%20%20%20%20-%20https%3A%2F%2Fgithub.com%2Fsuccinctlabs%2Foptimism-bedrock-contracts%0A%20%20%20%20-%20https%3A%2F%2Fgithub.com%2Fsuccinctlabs%2Fv3-core%20(Business%20Source%20License%202023-04-01)%0A%0A%23%23%20Succinct%20Bridge%20Overview%0A%0A1.%20%5BSuccinct%20Blog%20Oct%2029%2C%202022%5D(https%3A%2F%2Fblog.succinct.xyz%2Fblog%2Fproof-of-consensus)%3A%20Proof%20of%20Consensus%20Bridging%20between%20Ethereum%20and%20Gnosis%20Chain%0A%0A%3E%20The%20on-chain%20light%20client%20recreates%20the%20light%20client%20spec%20in%20Solidity%20(code%20here).%20In%20particular%2C%20we%20implement%20the%20process_light_client_finality_update%20function%20inside%20the%20step%20function%20in%20our%20smart%20contract.%20Then%2C%20inside%20step%2C%20where%20we%20would%20typically%20verify%20an%20aggregate%20BLS%20signature%2C%20we%20instead%20replace%20it%20with%20verification%20of%20a%20single%20Groth16%20zkSNARK%20to%20reduce%20gas%20costs.%0A%3E%0A%3E%20Recall%20that%20the%20validator%20set%20of%20the%20sync%20committee%20rotates%20every%2027%20hours.%20On%20chain%2C%20we%20keep%20track%20of%20a%20commitment%20to%20the%20set%20of%20validators%20in%20the%20mapping%20syncCommitteeRootByPeriod.%20To%20update%20this%20mapping%20for%20the%20next%20period%2C%20we%20verify%20the%20merkle%20inclusion%20proof%20that%20the%20current%20validator%20set%20signs%20for%20the%20commitment%20for%20the%20next%20validator%20set.%20This%20computation%20happens%20inside%20the%20updateSyncCommittee%20function.%0A%3E%0A%3E%20Unfortunately%2C%20the%20commitment%20the%20validators%20sign%20is%20an%20SSZ%20commitment%20(simple%20serialization%2C%20Eth%20PoS%20serialization%20format)%20that%20is%20quite%20SNARK%20unfriendly%2C%20as%20it%20uses%20the%20SHA-256%20hash%20function.%20It%20takes%20~70%20million%20constraints%20in%20a%20Groth16%20circuit%20to%20compute%20the%20serialization%20of%20512%20validator%20BLS%20public%20keys%20to%20its%20corresponding%20SSZ%20commitment.%20Because%20we%20don%E2%80%99t%20want%20to%20do%20this%20for%20every%20single%20header%20verification%20proof%20(which%20happens%20every%206%20minutes%2C%20i.e.%20once%20per%20epoch)%2C%20we%20use%20an%20additional%20SNARK%20(the%20commitmentMappingProof%20argument)%20to%20provably%20map%20an%20SSZ%20commitment%20to%20a%20SNARK-friendly%20Poseidon%20commitment%2C%20that%20is%20stored%20in%20the%20mapping%20sszToPoseidon.%20For%20each%20BLS%20signature%20verification%2C%20we%20pass%20in%20the%20poseidon%20commitment%20of%20the%20sync%20committee%20validators%20as%20public%20input%20to%20ensure%20that%20the%20BLS%20signature%20we%20are%20verifying%20is%20from%20the%20correct%20public%20keys.%20Overall%20this%20approach%20(using%202%20SNARKs)%20saves%20us%2070M%20constraints%20on%20the%20BLS%20signature%20verification%20SNARK%2C%20which%20we%20must%20run%20for%20every%20update%20we%20wish%20to%20submit%20to%20the%20light%20client.%20The%20commitment%20mapping%20SNARK%20must%20only%20be%20run%20every%20sync%20committee%20period%20(roughly%20once%20every%2027%20hours).%0A%3E%0A%3E%20Toolchain%0A%3E%20We%20use%20the%20Circom%20programming%20language%20and%20the%20Groth16%20proving%20system%20to%20generate%20our%20zkSNARKs.%20While%20a%20newer%20proof%20system%20(like%20PLONK%20arithmetization%20%2B%20KZG%20or%20FRI)%20would%20improve%20proving%20time%2C%20we%20believe%20Circom%20is%20the%20most%20production-ready%20zkSNARK%20stack%20today.%20In%20particular%2C%20Tornado%20Cash%E2%80%99s%20circuits%20are%20built%20on%20top%20of%20Circom%20and%20have%20been%20used%20for%20several%20years.%20Additionally%2C%20the%20on-chain%20verification%20cost%20of%20a%20Groth16%20zkSNARK%20is%20the%20cheapest%20of%20all%20proving%20systems%20available%20today.%0A%0A2.%20%5Beth-proof-of-consensus%5D(https%3A%2F%2Fgithub.com%2Fsuccinctlabs%2Feth-proof-of-consensus)%3A%20github%20repository%0A3.%20%5BGIP-57%5D(https%3A%2F%2Fforum.gnosis.io%2Ft%2Fgip-57-should-gnosis-dao-support-research-of-a-zksnark-enabled-light-client-and-bridge%2F5421)%3A%20%24600%2C000%20Grant%20from%20Gnosis%20to%20Succinct%20to%20support%0A4.%20%5BSuccinct%20Tweet%5D(https%3A%2F%2Ftwitter.com%2Fsuccinctlabs%2Fstatus%2F1572299292177481729)%20%3A%20Succinct%20tweet%20giving%20an%20overview%20of%20the%20bridge%0A5.%20%5BSuccinct%20Blog%20Sep%2020%2C%202022%5D(https%3A%2F%2Fblog.succinct.xyz%2Fpost%2F2022%2F09%2F20%2Fproof-of-consensus)%3A%20Towards%20the%20endgame%20of%20blockchain%20interoperability%20with%20proof%20of%20consensus%0A6.%20%5BGIP-57%5D(https%3A%2F%2Fforum.gnosis.io%2Ft%2Fgip-57-should-gnosis-dao-support-research-of-a-zksnark-enabled-light-client-and-bridge%2F5421)%3A%20%24600%2C000%20Grant%20from%20Gnosis%20to%20Succinct%20to%20support%20research%20of%20a%20zkSNARK-enabled%20light%20client%20and%20bridge.%0A7.%20%5BSuccinct%20Video%5D(https%3A%2F%2Fyoutu.be%2FcMSayTJA1B4)%3A%20ZK8%3A%20Succinct%20Verification%20of%20Consensus%20with%20zkSNARKs%20-%20Uma%20Roy%20%26%20John%20Guibas%20-%20Succinct%20Labs%0A%0A%23%23%20Trusted%20Setup%0A%0A%23%23%23%20Best%20Practices%20for%20Setup%0A%0A1.%20%5BBest%20Practices%20for%20Large%20Circuits%5D(https%3A%2F%2Fhackmd.io%2FV-7Aal05Tiy-ozmzTGBYPA)%3A%20compiling%20and%20generating%20Groth16%20proofs%20for%20large%20ZK%20circuits%20using%20the%20circom%20%2F%20snarkjs%20toolstack.%0A%0A%3E%20For%20such%20large%20circuits%2C%20you%20need%20a%20machine%20with%20an%20Intel%20processor%2C%20lots%20of%20RAM%20and%20a%20large%20hard%20drive%20with%20swap%20enabled.%20For%20example%2C%20the%20zkPairing%20project%20used%20an%20AWS%20r5.8xlarge%20instance%20with%2032-core%203.1GHz%2C%20256G%20RAM%20machine%20with%201T%20hard%20drive%20and%20400G%20swap.%0A%3E%0A%3E%20Compilation%3A%20for%20circuits%20with%20%3E20M%20constraints%2C%20one%20should%20not%20compile%20to%20WebAssembly%20because%20witness%20generation%20will%20exceed%20the%20memory%20cap%20of%20WebAssembly.%20For%20this%20reason%2C%20one%20must%20compile%20with%20the%20C%2B%2B%20flag%20and%20remove%20the%20wasm%20flag.%0A%0A2.%20%5BHermez%20Zero-Knowledge%20Proofs%5D(https%3A%2F%2Fblog.hermez.io%2Fhermez-zero-knowledge-proofs%2F)%3A%20Overview%20of%20the%20Hermez%20Trusted%20Setupi%0A%0A%5BMachine%5D(https%3A%2F%2Faws.amazon.com%2Fec2%2Fpricing%2Fon-demand%2F)%3A%20AWS%20r5.8xlarge%20instance%20with%2032-core%203.1GHz%2C%20256G%20RAM%20machine%20with%201T%20hard%20drive%20and%20400G%20swap.%20%242.016%20per%20hour%0A%0A%23%23%23%20Trusted%20Ceremony%20(Powers%20of%20Tau)%0A%0A1.%20%5BPerpetual%20Powers%20of%20Tau%5D(https%3A%2F%2Fgithub.com%2Fweijiekoh%2Fperpetualpowersoftau)%3A%20The%20goal%20is%20to%20securely%20generate%20zk-SNARK%0A2.%20%5Bsnarkjs%20Prepare%20phase%202%5D(https%3A%2F%2Fgithub.com%2Fiden3%2Fsnarkjs%2Fblob%2Fmaster%2FREADME.md%237-prepare-phase-2)%3A%20Provide%20instructions%20on%20prepare%20phase%202%20and%20links%20to%20the%20Powers%20of%20Tau%20files.%0A3.%20%5BPowers%20of%20Tau%20files%20on%20Dropbox%5D(https%3A%2F%2Fwww.dropbox.com%2Fsh%2Fmn47gnepqu88mzl%2FAACaJkBU7mmCq8uU8ml0-0fma%3Fdl%3D0)%3A%0A%0A%5BDownload%20powersOfTau28_hez_final_27.ptau%5D(https%3A%2F%2Fhermez.s3-eu-west-1.amazonaws.com%2FpowersOfTau28_hez_final_27.ptau)%3A%20144%20GB%20file%20containing%20the%20encrypted%20evaluation%20of%20the%20Lagrange%20polynomials%20at%20tau%20for%20tau%2C%20alpha*tau%20and%20beta*tau.%20It%20takes%20the%20beacon%20ptau%20file%20we%20generated%20in%20the%20previous%20step%2C%20and%20outputs%20a%20final%20ptau%20file%20which%20will%20be%20used%20to%20generate%20the%20circuit%20proving%20and%20verification%20keys.%0A%0A%23%23%23%20Example%20Build%0A%0A1.%20%5Bbuild_aggregate_bls_verify.sh%5D(https%3A%2F%2Fgithub.com%2Fsuccinctlabs%2Feth-proof-of-consensus%2Fblob%2Fmain%2Fcircuits%2Fcircuits%2Faggregate_bls_verify.circom)%0A%0A%60%60%60%0A%23!%2Fbin%2Fbash%0APHASE1%3D%2Fhome%2Fubuntu%2FpowersOfTau28_hez_final_27.ptau%0ABUILD_DIR%3D..%2Fbuild%0ACIRCUIT_NAME%3Dtest_aggregate_bls_verify_512%0ATEST_DIR%3D..%2Ftest%0AOUTPUT_DIR%3D%22%24BUILD_DIR%22%2F%22%24CIRCUIT_NAME%22_cpp%0A%0Arun()%20%7B%0A%20%20%20%20if%20%5B%20!%20-d%20%22%24BUILD_DIR%22%20%5D%3B%20then%0A%20%20%20%20%20%20%20%20echo%20%22No%20build%20directory%20found.%20Creating%20build%20directory...%22%0A%20%20%20%20%20%20%20%20mkdir%20-p%20%22%24BUILD_DIR%22%0A%20%20%20%20fi%0A%0A%20%20%20%20%23%20echo%20%22****COMPILING%20CIRCUIT****%22%0A%20%20%20%20%23%20start%3D%60date%20%2B%25s%60%0A%20%20%20%20%23%20circom%20%22%24TEST_DIR%22%2Fcircuits%2F%22%24CIRCUIT_NAME%22.circom%20--O1%20--r1cs%20--sym%20--c%20--output%20%22%24BUILD_DIR%22%0A%20%20%20%20%23%20end%3D%60date%20%2B%25s%60%0A%20%20%20%20%23%20echo%20%22DONE%20(%24((end-start))s)%22%0A%0A%20%20%20%20%23%20echo%20%22****Running%20make%20to%20make%20witness%20generation%20binary****%22%0A%20%20%20%20%23%20start%3D%60date%20%2B%25s%60%0A%20%20%20%20%23%20make%20-C%20%22%24OUTPUT_DIR%22%0A%20%20%20%20%23%20end%3D%60date%20%2B%25s%60%0A%20%20%20%20%23%20echo%20%22DONE%20(%24((end-start))s)%22%0A%0A%20%20%20%20echo%20%22****Executing%20witness%20generation****%22%0A%20%20%20%20start%3D%60date%20%2B%25s%60%0A%20%20%20%20.%2F%22%24OUTPUT_DIR%22%2F%22%24CIRCUIT_NAME%22%20%22%24TEST_DIR%22%2Finput_aggregate_bls_verify_512.json%20witness.wtns%0A%20%20%20%20end%3D%60date%20%2B%25s%60%0A%20%20%20%20echo%20%22DONE%20(%24((end-start))s)%22%0A%0A%20%20%20%20echo%20%22****Converting%20witness%20to%20json****%22%0A%20%20%20%20start%3D%60date%20%2B%25s%60%0A%20%20%20%20npx%20snarkjs%20wej%20%22%24OUTPUT_DIR%22%2Fwitness.wtns%20%22%24OUTPUT_DIR%22%2Fwitness.json%0A%20%20%20%20end%3D%60date%20%2B%25s%60%0A%20%20%20%20echo%20%22DONE%20(%24((end-start))s)%22%0A%0A%20%20%20%20echo%20%22****GENERATING%20ZKEY%200****%22%0A%20%20%20%20start%3D%60date%20%2B%25s%60%0A%20%20%20%20npx%20--trace-gc%20--trace-gc-ignore-scavenger%20--max-old-space-size%3D2048000%20--initial-old-space-size%3D2048000%20--no-global-gc-scheduling%20--no-incremental-marking%20--max-semi-space-size%3D1024%20--initial-heap-size%3D2048000%20--expose-gc%20snarkjs%20zkey%20new%20%22%24BUILD_DIR%22%2F%22%24CIRCUIT_NAME%22.r1cs%20%22%24PHASE1%22%20%22%24OUTPUT_DIR%22%2F%22%24CIRCUIT_NAME%22_p1.zkey%0A%20%20%20%20end%3D%60date%20%2B%25s%60%0A%20%20%20%20echo%20%22DONE%20(%24((end-start))s)%22%0A%0A%20%20%20%20echo%20%22****CONTRIBUTE%20TO%20PHASE%202%20CEREMONY****%22%0A%20%20%20%20start%3D%60date%20%2B%25s%60%0A%20%20%20%20npx%20snarkjs%20zkey%20contribute%20%22%24OUTPUT_DIR%22%2F%22%24CIRCUIT_NAME%22_p1.zkey%20%22%24OUTPUT_DIR%22%2F%22%24CIRCUIT_NAME%22_p2.zkey%20-n%3D%22First%20phase2%20contribution%22%20-e%3D%22some%20random%20text%20for%20entropy%22%0A%20%20%20%20end%3D%60date%20%2B%25s%60%0A%20%20%20%20echo%20%22DONE%20(%24((end-start))s)%22%0A%0A%20%20%20%20echo%20%22****VERIFYING%20FINAL%20ZKEY****%22%0A%20%20%20%20start%3D%60date%20%2B%25s%60%0A%20%20%20%20npx%20--trace-gc%20--trace-gc-ignore-scavenger%20--max-old-space-size%3D2048000%20--initial-old-space-size%3D2048000%20--no-global-gc-scheduling%20--no-incremental-marking%20--max-semi-space-size%3D1024%20--initial-heap-size%3D2048000%20--expose-gc%20npx%20snarkjs%20zkey%20verify%20%22%24BUILD_DIR%22%2F%22%24CIRCUIT_NAME%22.r1cs%20%22%24PHASE1%22%20%22%24OUTPUT_DIR%22%2F%22%24CIRCUIT_NAME%22_p2.zkey%0A%20%20%20%20end%3D%60date%20%2B%25s%60%0A%20%20%20%20echo%20%22DONE%20(%24((end-start))s)%22%0A%0A%20%20%20%20echo%20%22****EXPORTING%20VKEY****%22%0A%20%20%20%20start%3D%60date%20%2B%25s%60%0A%20%20%20%20npx%20snarkjs%20zkey%20export%20verificationkey%20%22%24OUTPUT_DIR%22%2F%22%24CIRCUIT_NAME%22_p2.zkey%20%22%24OUTPUT_DIR%22%2F%22%24CIRCUIT_NAME%22_vkey.json%0A%20%20%20%20end%3D%60date%20%2B%25s%60%0A%20%20%20%20echo%20%22DONE%20(%24((end-start))s)%22%0A%0A%20%20%20%20echo%20%22****GENERATING%20PROOF%20FOR%20SAMPLE%20INPUT****%22%0A%20%20%20%20start%3D%60date%20%2B%25s%60%0A%20%20%20%20~%2Frapidsnark%2Fbuild%2Fprover%20%22%24OUTPUT_DIR%22%2F%22%24CIRCUIT_NAME%22_p2.zkey%20%22%24OUTPUT_DIR%22%2Fwitness.wtns%20%22%24OUTPUT_DIR%22%2F%22%24CIRCUIT_NAME%22_proof.json%20%22%24OUTPUT_DIR%22%2F%22%24CIRCUIT_NAME%22_public.json%0A%20%20%20%20end%3D%60date%20%2B%25s%60%0A%20%20%20%20echo%20%22DONE%20(%24((end-start))s)%22%0A%0A%20%20%20%20echo%20%22****VERIFYING%20PROOF%20FOR%20SAMPLE%20INPUT****%22%0A%20%20%20%20start%3D%60date%20%2B%25s%60%0A%20%20%20%20npx%20snarkjs%20groth16%20verify%20%22%24OUTPUT_DIR%22%2F%22%24CIRCUIT_NAME%22_vkey.json%20%22%24OUTPUT_DIR%22%2F%22%24CIRCUIT_NAME%22_public.json%20%22%24OUTPUT_DIR%22%2F%22%24CIRCUIT_NAME%22_proof.json%0A%20%20%20%20end%3D%60date%20%2B%25s%60%0A%20%20%20%20echo%20%22DONE%20(%24((end-start))s)%22%0A%0A%20%20%20%20echo%20%22****EXPORTING%20SOLIDITY%20SMART%20CONTRACT****%22%0A%20%20%20%20start%3D%60date%20%2B%25s%60%0A%20%20%20%20npx%20snarkjs%20zkey%20export%20solidityverifier%20%22%24OUTPUT_DIR%22%2F%22%24CIRCUIT_NAME%22_p2.zkey%20verifier.sol%0A%20%20%20%20end%3D%60date%20%2B%25s%60%0A%20%20%20%20echo%20%22DONE%20(%24((end-start))s)%22%0A%7D%0A%0Amkdir%20-p%20logs%0Arun%202%3E%261%20%7C%20tee%20logs%2F%22%24CIRCUIT_NAME%22_%24(date%20'%2B%25Y-%25m-%25d-%25H-%25M').log%0A%60%60%60%0A%0A%23%23%20circuits%0A%0A1.%20%5BCircom%20Documentation%5D(https%3A%2F%2Fdocs.circom.io%2Fgetting-started%2Finstallation%2F)%3A%20Circom%20is%20a%20novel%20domain-specific%20language%20for%20defining%20arithmetic%20circuits%20that%20can%20be%20used%20to%20generate%20zero-knowledge%20proofs.%0A2.%20%5BCircom%20github%5D(https%3A%2F%2Fgithub.com%2Fiden3%2Fcircom)%0A3.%20%5Bcircomlib%20github%5D(https%3A%2F%2Fgithub.com%2Fiden3%2Fcircomlib)%20contains%20a%20library%20of%20circuit%20templates.%0A4.%20%5BzkPairing%20Docs%5D(https%3A%2F%2F0xparc.org%2Fblog%2Fzk-pairing-1)%3A%20zkSNARKs%20for%20Elliptic%20Curve%20Pairings%20(Part%201)%0A5.%20%5Bcircom-paring%20github%5D(https%3A%2F%2Fgithub.com%2Fyi-sun%2Fcircom-pairing)%3A%20proof-of-concept%20implementations%20of%20elliptic%20curve%20pairings%20(in%20particular%2C%20the%20optimal%20Ate%20pairing%20and%20Tate%20pairing)%20for%20the%20BLS12-381%20curve%20in%20circom.%0A6.%20%5BBatch%20ECDSA%20Verification%20(github)%5D(https%3A%2F%2Fgithub.com%2Fpuma314%2Fbatch-ecdsa)%3A%20Implementation%20of%20batch%20ECDSA%20verification%20in%20circom.%0A7.%20%5Bcircom-ecdsa%20(github)%5D(https%3A%2F%2Fgithub.com%2F0xPARC%2Fcircom-ecdsa)%3A%20proof-of-concept%20implementations%20of%20ECDSA%20operations%20in%20circom.%0A8.%20%5Bsnarkjs%5D(https%3A%2F%2Fwww.npmjs.com%2Fpackage%2Fsnarkjs)%3A%20This%20is%20a%20JavaScript%20and%20Pure%20Web%20Assembly%20implementation%20of%20zkSNARK%20and%20PLONK%20schemes.%20It%20uses%20the%20Groth16%20Protocol%20(3%20point%20only%20and%203%20pairings)%20and%20PLONK.%0A9.%20%5Bsnarkjs%20Prepare%20phase%202%5D(https%3A%2F%2Fgithub.com%2Fiden3%2Fsnarkjs%2Fblob%2Fmaster%2FREADME.md%237-prepare-phase-2)%3A%20Provide%20instructions%20on%20prepare%20phase%202%20and%20links%20to%20the%20Powers%20of%20Tau%20files.%0A10.%20%5BPerpetual%20Powers%20of%20Tau%5D(https%3A%2F%2Fgithub.com%2Fweijiekoh%2Fperpetualpowersoftau)%3A%20The%20goal%20is%20to%20securely%20generate%20zk-SNARK%20parameters%20for%20circuits%20of%20up%20to%202%20%5E%2028%20(260%2B%20million)%20constraints.%0A11.%20%5BPowers%20of%20Tau%20files%20on%20Dropbox%5D(https%3A%2F%2Fwww.dropbox.com%2Fsh%2Fmn47gnepqu88mzl%2FAACaJkBU7mmCq8uU8ml0-0fma%3Fdl%3D0)%3A%0A12.%20%5Beth-proof-of-consensus%3A%20circuits%20aggregate_bls_verify.circom%5D(https%3A%2F%2Fgithub.com%2Fsuccinctlabs%2Feth-proof-of-consensus%2Fblob%2Fmain%2Fcircuits%2Fcircuits%2Faggregate_bls_verify.circom)%3A%20example%20circuit%20with%20the%20following%20includes%0A%0A%60%60%60%0Ainclude%20%22..%2Fcircom-pairing%2Fcircuits%2Fbls_signature.circom%22%3B%0Ainclude%20%22..%2Fcircom-pairing%2Fcircuits%2Fcurve.circom%22%3B%0Ainclude%20%22..%2Fcircom-pairing%2Fcircuits%2Fbls12_381_func.circom%22%3B%0Ainclude%20%22.%2Fsha256_bytes.circom%22%3B%0A%60%60%60%0A%0A%23%23%20Contracts%0A%0ABuilt%20using%20%5Bfoundry%5D(https%3A%2F%2Fbook.getfoundry.sh%2F)(%5Bgithub%5D(https%3A%2F%2Fgithub.com%2Ffoundry-rs%2Ffoundry))%20and%20%5Bforge%5D(https%3A%2F%2Fbook.getfoundry.sh%2Fforge%2F).%20Verifiers%20(%5BLight%20Client%20Contracts%5D(%23light-client-contracts))%20can%20be%20%5Bgenerated%5D(https%3A%2F%2Fdocs.circom.io%2Fgetting-started%2Fproving-circuits%2F%23verifying-from-a-smart-contract)%20from%20%5Bcircuits%5D(%23circuits)%20using%20%5Bsnarkjs%5D(https%3A%2F%2Fwww.npmjs.com%2Fpackage%2Fsnarkjs)%0A%0A%23%23%23%20Library%20Contracts%0A%0A1.%20%5Beth-proof-of-consensus%2Fcontracts%2Flib%2F%5D(https%3A%2F%2Fgithub.com%2Fsuccinctlabs%2Feth-proof-of-consensus%2Ftree%2Fmain%2Fcontracts%2Flib)%0A%20%20%201.%20%5BRLP%20decoder%2Freader%5D(https%3A%2F%2Fgithub.com%2Fhamdiallam%2FSolidity-RLP)%3A%20The%20reader%20contract%20provides%20an%20interface%20to%20first%20take%20RLP%20encoded%20bytes%20and%20convert%20them%20into%20an%20internal%20data%20structure%2C%20RLPItem%20through%20the%20function%2C%20toRlpItem(bytes).%0A%20%20%202.%20%5Bcurve-merkle-oracle%5D(https%3A%2F%2Fgithub.com%2Flidofinance%2Fcurve-merkle-oracle)%3A%20Trustless%20price%20oracle%20for%20ETH%2FstETH%20Curve%20pool.%0A%0A%3E%20Mechanics%0A%3E%20The%20oracle%20works%20by%20generating%20and%20verifying%20Merkle%20Patricia%20proofs%20of%20the%20following%20Ethereum%20state%3A%0A%3E%0A%3E%20Curve%20stETH%2FETH%20pool%20contract%20account%20and%20the%20following%20slots%20from%20its%20storage%20trie%3A%0A%3E%0A%3E%20admin_balances%5B0%5D%0A%3E%20admin_balances%5B1%5D%0A%3E%20stETH%20contract%20account%20and%20the%20following%20slots%20from%20its%20storage%20trie%3A%0A%3E%0A%3E%20shares%5B0xDC24316b9AE028F1497c275EB9192a3Ea0f67022%5D%0A%3E%20keccak256(%22lido.StETH.totalShares%22)%0A%3E%20keccak256(%22lido.Lido.beaconBalance%22)%0A%3E%20keccak256(%22lido.Lido.bufferedEther%22)%0A%3E%20keccak256(%22lido.Lido.depositedValidators%22)%0A%3E%20keccak256(%22lido.Lido.beaconValidators%22)%0A%0A%23%23%23%20Light%20Client%20Contracts%0A%0A1.%20%5Beth-proof-of-consensus%3A%20lightclient%5D(https%3A%2F%2Fgithub.com%2Fsuccinctlabs%2Feth-proof-of-consensus%2Ftree%2Fmain%2Fcontracts%2Fsrc%2Flightclient)%0A%20%20%201.%20%5BBeaconLightClient.sol%5D(https%3A%2F%2Fgithub.com%2Fsuccinctlabs%2Feth-proof-of-consensus%2Fblob%2Fmain%2Fcontracts%2Fsrc%2Flightclient%2FBeaconLightClient.sol)%0A%20%20%202.%20%5BPoseidonCommitmentVerifier.sol%5D(https%3A%2F%2Fgithub.com%2Fsuccinctlabs%2Feth-proof-of-consensus%2Fblob%2Fmain%2Fcontracts%2Fsrc%2Flightclient%2FPoseidonCommitmentVerifier.sol)%0A%20%20%203.%20%5BBLSAggregatedSignatureVerifier.sol%5D(https%3A%2F%2Fgithub.com%2Fsuccinctlabs%2Feth-proof-of-consensus%2Fblob%2Fmain%2Fcontracts%2Fsrc%2Flightclient%2FBLSAggregatedSignatureVerifier.sol)%0A%0A%23%23%23%20Bridge%20Contracts%0A%0A1.%20%5Beth-proof-of-consensus%3A%20amb%5D(https%3A%2F%2Fgithub.com%2Fsuccinctlabs%2Feth-proof-of-consensus%2Ftree%2Fmain%2Fcontracts%2Fsrc%2Famb)%3A%20Arbitrary%20Message%20Bridge%0A%20%20%201.%20%5BEthereum%20Magicians%3A%20A%20standard%20interface%20for%20arbitrary%20message%20bridges%20between%20chains%2Flayers%5D(https%3A%2F%2Fethereum-magicians.org%2Ft%2Fa-standard-interface-for-arbitrary-message-bridges-between-chains-layers%2F6163)%0A%20%20%202.%20%5BToken%20BridgeL%20ETH-xDai%20Arbitrary%20Message%20Bridge%5D(https%3A%2F%2Fdocs.tokenbridge.net%2Feth-xdai-amb-bridge%2Fabout-the-eth-xdai-amb)%3A%20An%20Arbitrary%20Message%20Bridge%20(AMB)%20between%20the%20Ethereum%20Mainnet%20and%20the%20xDai%20chain%0A2.%20%5Beth-proof-of-consensus%3A%20bridge%5D(https%3A%2F%2Fgithub.com%2Fsuccinctlabs%2Feth-proof-of-consensus%2Ftree%2Fmain%2Fcontracts%2Fsrc%2Fbridge)%0A%0A%23%23%23%20Additional%20Contracts%0A%0A1.%20%5Btokenbridge-contracts%5D(https%3A%2F%2Fgithub.com%2Fsuccinctlabs%2Ftokenbridge-contracts)%3A%20core%20functionality%20for%20the%20POA%20bridge.%20They%20implement%20the%20logic%20to%20relay%20assests%20between%20two%20EVM-based%20blockchain%20networks.%20The%20contracts%20collect%20bridge%20validator's%20signatures%20to%20approve%20and%20facilitate%20relay%20operations.%20(forked%20from%20%5Bomni%5D(https%3A%2F%2Fgithub.com%2Fomni%2Ftokenbridge-contracts))%0A%0A%23%23%20Relayer%0A%0A_Note%3A%20no%20public%20repository%20for%20relay%20functionality%20was%20found%20in%20%5Bsuccinctlabs%20github%5D(https%3A%2F%2Fgithub.com%2Fsuccinctlabs)._%0A%0A**TODO**%3A%20This%20section%20should%20give%20an%20overview%20of%0A%0A-%20Communication%20Protocol%0A-%20Message%20Formatting%0A-%20Relayer%20CodeBase%0A-%20Relayers%20Roles%20%3A%20Creating%20Proofs%20relaying%20blocks%20etc.%0A-%20Economic%20incentives.%0A%0AAdditional%20References%0A%0A1.%20%5BBeaconLightClient%20on%20Gnosis%20Chain%5D(https%3A%2F%2Fblockscout.com%2Fxdai%2Fmainnet%2Faddress%2F0xa3ae36abaD813241b75b3Bb0e9E7a37aeFD70807)%3A%20Transactions%20every%2050%20blocks%20on%20Gnosis%20i.e.%20approximately%20every%203%20minutes%0A2.%20%5BSuccinct%20Blog%20Oct%2029%2C%202022%5D(https%3A%2F%2Fblog.succinct.xyz%2Fblog%2Fproof-of-consensus%2F)%3A%20Proof%20of%20Consensus%20Bridging%20between%20Ethereum%20and%20Gnosis%20Chain%0A%0A%3E%20On%20Gnosis%20Chain%2C%20after%20the%20Ethereum%20block%20in%20which%20the%20deposit%20transaction%20was%20included%20is%20finalized%20(generally%202%20epochs%2C%20~12%20minutes)%20and%20the%20light%20client%20has%20been%20updated%20with%20a%20block%20of%20height%20greater%20than%20or%20equal%20to%20this%20block%2C%20our%20relayer%20automatically%20submits%20an%20executeMessage%20transaction%20to%20the%20Gnosis%20AMB.%0A%0A%23%23%20Appendices%0A%0A%23%23%20Footnotes%0A%0A%5B%5Eov-1%5D%3A%20%5BSuccint%5D(https%3A%2F%2Fwww.succinct.xyz%2F)%3A%20Building%20the%20end%20game%20of%20interoperability%20with%20zkSNARKs%0A%0A%5B%5Eov-2%5D%3A%20%5BTelepathy%5D(https%3A%2F%2Fdocs.telepathy.xyz%2F)%3A%20a%20zkSNARK%20circuit%20that%20verifies%20Ethereum%20validator%20signatures%2C%20allowing%20for%20a%20gas-efficient%20light%20client%20to%20run%20as%20a%20smart%20contract%20on%20any%20EVM%20chain.%0A",lastUpdatedAt:1753129136e3},{lazy:()=>o2(()=>import("./avalanche-D_hO4yuG.js"),[]),path:"/research/chains/avalanche",type:"mdx",filePath:"research/chains/avalanche.mdx",content:"%23%20Avalanche%0A%0A-%20date%3A%202023-02-04%0A-%20last%20updated%3A%202023-02-04%0A%0A%23%23%20Overview%0A%0AAvalanche%20is%20good%20candidate%20because%20it%20samples%20from%20a%20large%20number%20of%20validators%20to%20produce%20blocks%2C%20uses%20generic%20methods%20for%20signing%20blocks%20(RSA%20on%20a%20X.509%20certificate)%2C%20is%20moving%20to%20transition%20to%20BLS%20signatures%20for%20validators%2C%20and%20has%20numerous%20subnets.%0A%0AIn%20Avalanche%2C%20there%20are%20two%20types%20of%20consensus%20mechanisms%20(Avalanche%2C%20partially%20ordered%2C%20and%20Snowman%2C%20linearly%20ordered%20similar%20to%20other%20blockchains).%20Users%20can%20create%20arbitrary%20subnets%20in%20Avalanche%2C%20and%20any%20validator%20is%20free%20to%20participate%20the%20consensus%20for%20any%20subnet%5B%5Eov-1%5D%2C%20besides%20the%20mandatory%20participation%20of%20the%20special%20subnet%20-%20the%20Primary%20Network.%20Each%20subnet%20has%20three%20types%20of%20chains%2C%20each%20with%20different%20roles%20and%20runs%20different%20consensus%20mechanism%20and%20process%20different%20transaction%20types%3A%20(1)%20P-Chain%2C%20which%20defines%20validator%20sets%20and%20process%20validator%20related%20transactions%3B%20(2)%20X-Chain%2C%20for%20exchanging%20assets%2C%20where%20blocks%20are%20partially%20ordered%3B%20(3)%20C-Chain%2C%20which%20runs%20an%20EVM%20and%20handles%20smart%20contract%20interactions%20%5B%5Eov-2%5D.%0A%0A_Note%3A%20On%20march%2023rd%2C%202023%20Avalanche%20published%20an%20article%5B%5Eov-18%5D%20giving%20an%20overviow%20of%20the%20Cortina%20release%2C%20it's%20move%20to%20linearize%20the%20X-chain%20to%20enable%20support%20for%20WARP%20messaging._%0A%0AWe%20limit%20our%20scope%20to%20only%20the%20**Primary%20Network**%2C%20since%20any%20bridging%20implementation%20is%20likely%20replicable%20in%20subnets%2C%20and%20subnets%20are%20likely%20to%20be%20interoperable%20soon.%20For%20trustless%20bridging%2C%20only%20events%20from%20**C-Chain**%20are%20relevant%2C%20since%20the%20bridge%20must%20be%20a%20smart%20contract%20and%20all%20cross-chain%20operations%20can%20be%20conveniently%20wrapped%20inside%20contract%20interactions.%0A%0AThe%20active%20Avalanche%20validator%20set%20is%20unrestricted%20and%20permissionless%2C%20and%20has%20more%20than%201000%20members%20at%20this%20time%20%5B%5Eov-3%5D.%20Block%20proposers%20are%20randomly%20sampled%20from%20the%20active%20validator%20set%2C%20therefore%20any%20validator%20could%20potentially%20sign%20a%20block%20%5B%5Eov-4%5D.%20The%20validators%20use%20X.509%20(TLS)certificate%20to%20sign%20and%20verify%20blocks%20%5B%5Eov-5%5D%2C%20and%20the%20block%20headers%20contain%20both%20the%20certificate%20and%20the%20signature%20%5B%5Eov-6%5D.%20Neither%20Avalanche%20documentation%20or%20code%20specifies%20the%20key%20and%20signing%20algorithms%20for%20the%20X.509%20certificate%2C%20but%20the%20certificate%20auto-generated%20by%20the%20code%20(invoked%20via%20validator%20command-line%20tools)%20creates%204096-bit%20RSA%20key%20by%20default%20%5B%5Eov-7%5D.%0A%0AIn%20recent%20releases%5B%5Eov-8%5D%20%5B%5Eov-9%5D%20%5B%5Eov-10%5D%20%5B%5Eov-11%5D%20%5B%5Eov-12%5D%20%5B%5Eov-13%5D%20of%20Avalanche%2C%20validators%20may%20also%20load%20or%20generate%20an%20optional%20BLS%20key.%20This%20is%20to%20support%20Avalanche%20Warp%20Messaging%20(AWM)%20%5B%5Eov-14%5D%20%5B%5Eov-15%5D%20supporting%20inter-subnet%20messaging.%20This%20suggests%20the%20protocol%20may%20replace%20its%20signature%20scheme%20from%20RSA%20to%20BLS%20in%20the%20near%20future.%0A%0A_Note%20that%20RSA%20signature%20can%20be%20cheaply%20verified%20on-chain%2C%20per%20EIP-198%20%5B%5Eov-16%5D%20.%20Solidity%20libraries%20%5B%5Eov-17%5D%20are%20also%20available%20for%20RSA%20signature%20verification.%20In%20the%20worst%20case%2C%20even%20if%20any%20validator%20chooses%20to%20use%20a%20non-RSA%20custom-made%20certificate%2C%20most%20of%20the%20signing%20algorithms%20(ECDSA%2C%20EDDSA)%20supported%20by%20chosen%20crypto%20library%20in%20Go%20can%20also%20be%20verified%20on-chain._%0A%0A%23%23%20Consensus%20Mechanisms%0A%0AThere%20are%20two%20main%20consensus%20algorithms%3A%20Avalanche%20and%20Snowman.%20As%20stated%20above%20our%20focus%20is%20bridging%20from%20the%20**C-Chain**%20(contract(C)%20Chain)%20which%20uses%20%5BSnowman%20Consensus%5D(%23snowman-consensus).%0A%0A%23%23%23%20Avalanche%20Primary%20Network%0A%0AAvalanche%20is%20a%20network%20of%20blockchains%5B%5Econ-1%5D%2C%20this%20diagram%20gives%20an%20overview%20of%20the%20avalanche%20primiary%20network.%0A%0A!%5BAvalanche%20Primary%20Network%5D(%2Fassets%2Fresearch%2Favalanche-primary-network.png%20%22Avalanche%20Primary%20Network%22)%0A%0A%23%23%23%20Avalanche%20Consensus%0A%0AFollowing%20is%20an%20excerpt%20from%20the%20Avalanche%20Consensus%20Whitepaper%20%5B%5Econ-2%5D%2C%20it%20is%20also%20recommended%20reviewing%20Avalanche%20Blockchain%20Consensus%20Documentation%20%5B%5Econ-3%5D.%0A%0A%3E%20This%20paper%20introduces%20a%20family%20of%20leaderless%20Byzantine%20fault%20tolerance%20protocols%2C%20built%20around%20a%20metastable%20mechanism%20via%20network%20subsampling.%20These%20protocols%20provide%20a%20strong%20probabilistic%20safety%20guarantee%20in%20the%20presence%20of%20Byzantine%20adversaries%20while%20their%20concurrent%20and%20leaderless%20nature%20enables%20them%20to%20achieve%20high%20throughput%20and%20scalability.%20Unlike%20blockchains%20that%20rely%20on%20proof-of-work%2C%20they%20are%20quiescent%20and%20green.%20Unlike%20traditional%20consensus%20protocols%20where%20one%20or%20more%20nodes%20typically%20process%20linear%20bits%20in%20the%20number%20of%20total%20nodes%20per%20decision%2C%20no%20node%20processes%20more%20than%20logarithmic%20bits.%20It%20does%20not%20require%20accurate%20knowledge%20of%20all%20participants%20and%20exposes%20new%20possible%20tradeoffs%20and%20improvements%20in%20safety%20and%20liveness%20for%20building%20consensus%20protocols.%0A%3E%0A%3E%20The%20paper%20describes%20the%20Snow%20protocol%20family%2C%20analyzes%20its%20guarantees%2C%20and%20describes%20how%20it%20can%20be%20used%20to%20construct%20the%20core%20of%20an%20internet-scale%20electronic%20payment%20system%20called%20Avalanche%2C%20which%20is%20evaluated%20in%20a%20large%20scale%20deployment.%20Experiments%20demonstrate%20that%20the%20system%20can%20achieve%20high%20throughput%20(3400%20tps)%2C%20provide%20low%20confirmation%20latency%20(1.35%20sec)%2C%20and%20scale%20well%20compared%20to%20existing%20systems%20that%20deliver%20similar%20functionality.%20For%20our%20implementation%20and%20setup%2C%20the%20bottleneck%20of%20the%20system%20is%20in%20transaction%20verification.%0A%0A!%5BAvalanche%20Consensus%5D(%2Fassets%2Fresearch%2Favalanche-consensus.png%20%22Avalanche%20Consensus%22)%0A%0A%23%23%23%20Snowman%20Consensus%0A%0ASnowman%20consensus%20is%20one%20of%20the%20consensus%20mechanisms%20for%20single%20blockchains%20supported%20by%20snow%20%5B%5Econ-4%5D%2C%20the%20following%20excerp%20and%20diagram%20give%20an%20overview%20of%20how%20a%20blockchain%20(in%20our%20case%20the%20C-chain)%20can%20leverage%20one%20of%20snows%20mulitple%20conensus%20mechanisms%20(in%20our%20case%20snowman).%0A%0A%3E%20Each%20blockchain%20on%20Avalanche%20has%20several%20components%3A%20the%20virtual%20machine%2C%20database%2C%20consensus%20engine%2C%20sender%2C%20and%20handler.%20These%20components%20help%20the%20chain%20run%20smoothly.%20Blockchains%20also%20interact%20with%20the%20P2P%20layer%20and%20the%20chain%20router%20to%20send%20and%20receive%20messages.%0A%0A!%5BAvalanche%20flow%20of%20a%20single%20blockchain%5D(%2Fassets%2Fresearch%2Favalanche-flow.png%20%22Avalanche%20Flow%20of%20a%20single%20blockchain%22)%0A%0AIn%20the%20case%20of%20the%20C-Chain%2C%20avalanche%20uses%20coreth%5B%5Econ-5%5D%20a%20modified%20version%20of%20geth%2C%20as%20it's%20vm%20to%20provide%20EVM%20support.%20It%20also%20uses%20Snowman%2B%2B%20%5B%5Econ-7%5D%20as%20a%20congestion%20controle%20mechanism%2C%20effectively%20pre-selecting%20a%20set%20of%20proposers%20and%20giving%20them%20a%20submission%20window%20to%20submit%20blocks.%20If%20they%20fail%20to%20submit%20within%20their%20WindowDuration%20then%20any%20other%20validator%20can%20issue%20the%20block.%0A%0ABelow%20is%20an%20excerpt%20of%20how%20Snowman%20vms%20%5B%5Econ-6%5D%20and%20the%20consensus%20engine%20work.%0A%0A%3E%20**Implementing%20the%20Snowman%20VM%20Block**%0A%3E%20From%20the%20perspective%20of%20the%20consensus%20engine%2C%20the%20state%20of%20the%20VM%20can%20be%20defined%20as%20a%20linear%20chain%20starting%20from%20the%20genesis%20block%20through%20to%20the%20last%20accepted%20block.%0A%3E%0A%3E%20Following%20the%20last%20accepted%20block%2C%20the%20consensus%20engine%20may%20have%20any%20number%20of%20different%20blocks%20that%20are%20processing.%20The%20configuration%20of%20the%20processing%20set%20can%20be%20defined%20as%20a%20tree%20with%20the%20last%20accepted%20block%20as%20the%20root.%0A%3E%0A%3E%20In%20practice%2C%20this%20looks%20like%20the%20following%3A%0A%3E%0A%3E%20%60%60%60text%0A%3E%20%20%20%20G%0A%3E%20%20%20%20%7C%0A%3E%20%20%20%20.%0A%3E%20%20%20%20.%0A%3E%20%20%20%20.%0A%3E%20%20%20%20%7C%0A%3E%20%20%20%20L%0A%3E%20%20%20%20%7C%0A%3E%20%20%20%20A%0A%3E%20%20%2F%20%20%20%5C%0A%3E%20B%20%20%20%20%20C%0A%3E%20%60%60%60%0A%0A%23%23%20Signing%20Mechanisms%0A%0A%23%23%23%20Consensus%20Signing%20Mechanism%0A%0AAvalanche%20is%20not%20prescriptive%20about%20addressing%20schemes%2C%20choosing%20to%20instead%20leave%20addressing%20up%20to%20each%20blockchain%20%5B%5Esig-1%5D.%0A%0AAvalanche%20uses%20Transport%20Layer%20Security%2C%20TLS%2C%20to%20protect%20node-to-node%20communications%20from%20eavesdroppers.%20TLS%20combines%20the%20practicality%20of%20public-key%20cryptography%20with%20the%20efficiency%20of%20symmetric-key%20cryptography.%0A%0A%23%23%23%20Inter-Subnet%20Message%20Signing%20Mechanism%0A%0AAvalanche%20Warp%20Messaging%20(AWM)%5B%5Eov-14%5D%20%5B%5Eov-15%5D%20enables%20Subnet%20Validators%20to%20collectively%20produce%20a%20BLS%20Multi-Signature%20that%20attests%20to%20the%20validity%20of%20an%20arbitrary%20message%20(e.g.%2C%20transfer%2C%20contract%20data%2C%20etc.)%20that%20can%20be%20verified%20by%20any%20other%20Subnet.%0A%0A%23%23%23%20Transaction%20Signing%20Mechanism%0A%0AThe%20addressing%20scheme%20of%20the%20X-Chain%20and%20the%20P-Chain%20relies%20on%20secp256k1.%20Avalanche%20follows%20a%20similar%20approach%20as%20Bitcoin%20and%20hashes%20the%20ECDSA%20public%20key.%20The%2033-byte%20compressed%20representation%20of%20the%20public%20key%20is%20hashed%20with%20sha256%20once.%20The%20result%20is%20then%20hashed%20with%20ripemd160%20to%20yield%20a%2020-byte%20address.%0A%0AThe%20Avalanche%20virtual%20machine%20uses%20elliptic%20curve%20cryptography%2C%20specifically%20secp256k1%2C%20for%20its%20signatures%20on%20the%20blockchain.%0A%0A%23%23%20Verification%20Walkthrough%0A%0A1.%20Transactions%20are%20gossiped%20via%20P2P%20mechanisms%20in%20coreth%0A%0A%60%60%60go%0A%2F%2F%20Block%20represents%20an%20entire%20block%20in%20the%20Ethereum%20blockchain.%0Atype%20Block%20struct%20%7B%0A%20header%20%20%20%20%20%20%20*Header%0A%20uncles%20%20%20%20%20%20%20%5B%5D*Header%0A%20transactions%20Transactions%0A%0A%20%2F%2F%20Coreth%20specific%20data%20structures%20to%20support%20atomic%20transactions%0A%20version%20uint32%0A%20extdata%20*%5B%5Dbyte%0A%0A%20%2F%2F%20caches%0A%20hash%20atomic.Value%0A%20size%20atomic.Value%0A%7D%0A%0A%2F%2F%20Header%20represents%20a%20block%20header%20in%20the%20Ethereum%20blockchain.%0Atype%20Header%20struct%20%7B%0A%20ParentHash%20%20common.Hash%20%20%20%20%60json%3A%22parentHash%22%20%20%20%20%20%20%20gencodec%3A%22required%22%60%0A%20UncleHash%20%20%20common.Hash%20%20%20%20%60json%3A%22sha3Uncles%22%20%20%20%20%20%20%20gencodec%3A%22required%22%60%0A%20Coinbase%20%20%20%20common.Address%20%60json%3A%22miner%22%20%20%20%20%20%20%20%20%20%20%20%20gencodec%3A%22required%22%60%0A%20Root%20%20%20%20%20%20%20%20common.Hash%20%20%20%20%60json%3A%22stateRoot%22%20%20%20%20%20%20%20%20gencodec%3A%22required%22%60%0A%20TxHash%20%20%20%20%20%20common.Hash%20%20%20%20%60json%3A%22transactionsRoot%22%20gencodec%3A%22required%22%60%0A%20ReceiptHash%20common.Hash%20%20%20%20%60json%3A%22receiptsRoot%22%20%20%20%20%20gencodec%3A%22required%22%60%0A%20Bloom%20%20%20%20%20%20%20Bloom%20%20%20%20%20%20%20%20%20%20%60json%3A%22logsBloom%22%20%20%20%20%20%20%20%20gencodec%3A%22required%22%60%0A%20Difficulty%20%20*big.Int%20%20%20%20%20%20%20%60json%3A%22difficulty%22%20%20%20%20%20%20%20gencodec%3A%22required%22%60%0A%20Number%20%20%20%20%20%20*big.Int%20%20%20%20%20%20%20%60json%3A%22number%22%20%20%20%20%20%20%20%20%20%20%20gencodec%3A%22required%22%60%0A%20GasLimit%20%20%20%20uint64%20%20%20%20%20%20%20%20%20%60json%3A%22gasLimit%22%20%20%20%20%20%20%20%20%20gencodec%3A%22required%22%60%0A%20GasUsed%20%20%20%20%20uint64%20%20%20%20%20%20%20%20%20%60json%3A%22gasUsed%22%20%20%20%20%20%20%20%20%20%20gencodec%3A%22required%22%60%0A%20Time%20%20%20%20%20%20%20%20uint64%20%20%20%20%20%20%20%20%20%60json%3A%22timestamp%22%20%20%20%20%20%20%20%20gencodec%3A%22required%22%60%0A%20Extra%20%20%20%20%20%20%20%5B%5Dbyte%20%20%20%20%20%20%20%20%20%60json%3A%22extraData%22%20%20%20%20%20%20%20%20gencodec%3A%22required%22%60%0A%20MixDigest%20%20%20common.Hash%20%20%20%20%60json%3A%22mixHash%22%60%0A%20Nonce%20%20%20%20%20%20%20BlockNonce%20%20%20%20%20%60json%3A%22nonce%22%60%0A%20ExtDataHash%20common.Hash%20%20%20%20%60json%3A%22extDataHash%22%20%20%20%20%20%20gencodec%3A%22required%22%60%0A%0A%20%2F%2F%20BaseFee%20was%20added%20by%20EIP-1559%20and%20is%20ignored%20in%20legacy%20headers.%0A%20BaseFee%20*big.Int%20%60json%3A%22baseFeePerGas%22%20rlp%3A%22optional%22%60%0A%0A%20%2F%2F%20ExtDataGasUsed%20was%20added%20by%20Apricot%20Phase%204%20and%20is%20ignored%20in%20legacy%0A%20%2F%2F%20headers.%0A%20%2F%2F%0A%20%2F%2F%20It%20is%20not%20a%20uint64%20like%20GasLimit%20or%20GasUsed%20because%20it%20is%20not%20possible%20to%0A%20%2F%2F%20correctly%20encode%20this%20field%20optionally%20with%20uint64.%0A%20ExtDataGasUsed%20*big.Int%20%60json%3A%22extDataGasUsed%22%20rlp%3A%22optional%22%60%0A%0A%20%2F%2F%20BlockGasCost%20was%20added%20by%20Apricot%20Phase%204%20and%20is%20ignored%20in%20legacy%0A%20%2F%2F%20headers.%0A%20BlockGasCost%20*big.Int%20%60json%3A%22blockGasCost%22%20rlp%3A%22optional%22%60%0A%7D%0A%0A%60%60%60%0A%0A2.%20The%20block%20is%20then%20wrapped%20into%20an%20%60innerBlock%60%20by%20%5Bsnowman%2B%2B%5D(https%3A%2F%2Fgithub.com%2Fava-labs%2Favalanchego%2Fblob%2Fmaster%2Fvms%2FREADME.mdx)%20and%20has%20the%20following%20interfaces%0A%0A%60%60%60go%0Atype%20Block%20interface%20%7B%0A%20ID()%20ids.ID%0A%20ParentID()%20ids.ID%0A%20Block()%20%5B%5Dbyte%0A%20Bytes()%20%5B%5Dbyte%0A%0A%20initialize(bytes%20%5B%5Dbyte)%20error%0A%7D%0A%0Atype%20SignedBlock%20interface%20%7B%0A%20Block%0A%0A%20PChainHeight()%20uint64%0A%20Timestamp()%20time.Time%0A%20Proposer()%20ids.NodeID%0A%0A%20Verify(shouldHaveProposer%20bool%2C%20chainID%20ids.ID)%20error%0A%7D%0A%0Atype%20statelessUnsignedBlock%20struct%20%7B%0A%20ParentID%20%20%20%20%20ids.ID%20%60serialize%3A%22true%22%60%0A%20Timestamp%20%20%20%20int64%20%20%60serialize%3A%22true%22%60%0A%20PChainHeight%20uint64%20%60serialize%3A%22true%22%60%0A%20Certificate%20%20%5B%5Dbyte%20%60serialize%3A%22true%22%60%0A%20Block%20%20%20%20%20%20%20%20%5B%5Dbyte%20%60serialize%3A%22true%22%60%0A%7D%0A%0Atype%20statelessBlock%20struct%20%7B%0A%20StatelessBlock%20statelessUnsignedBlock%20%60serialize%3A%22true%22%60%0A%20Signature%20%20%20%20%20%20%5B%5Dbyte%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%60serialize%3A%22true%22%60%0A%0A%20id%20%20%20%20%20%20%20%20ids.ID%0A%20timestamp%20time.Time%0A%20cert%20%20%20%20%20%20*x509.Certificate%0A%20proposer%20%20ids.NodeID%0A%20bytes%20%20%20%20%20%5B%5Dbyte%0A%7D%0A%60%60%60%0A%0AThe%20block%20is%20initialized%20using%20%5Bblock.Build%5D(https%3A%2F%2Fgithub.com%2Fava-labs%2Favalanchego%2Fblob%2Fmaster%2Fvms%2Fproposervm%2Fblock.go%23L231)%20which%20currently%20uses%20%60StakingCertLeaf%60%20not%20%60StakingBLSKey%60%0A%0A%60%60%60go%0A%20statelessChild%2C%20err%20%3D%20block.Build(%0A%20%20parentID%2C%0A%20%20newTimestamp%2C%0A%20%20pChainHeight%2C%0A%20%20p.vm.ctx.StakingCertLeaf%2C%0A%20%20innerBlock.Bytes()%2C%0A%20%20p.vm.ctx.ChainID%2C%0A%20%20p.vm.ctx.StakingLeafSigner%2C%0A%20)%0A%60%60%60%0A%0AThe%20%5BBuild%5D(https%3A%2F%2Fgithub.com%2Fava-labs%2Favalanchego%2Fblob%2Fmaster%2Fvms%2Fproposervm%2Fblock%2Fbuild.go%23L41)%20function%20takes%20the%20%60StakingCertLeaf%60%20as%20input%20for%20%60cert%20*x509.Certificate%60%0A%0A%60%60%60%0Afunc%20Build(%0A%20parentID%20ids.ID%2C%0A%20timestamp%20time.Time%2C%0A%20pChainHeight%20uint64%2C%0A%20cert%20*x509.Certificate%2C%0A%20blockBytes%20%5B%5Dbyte%2C%0A%20chainID%20ids.ID%2C%0A%20key%20crypto.Signer%2C%0A)%0A%60%60%60%0A%0ASignatures%20are%20verified%20using%20%5BVerify%5D(https%3A%2F%2Fgithub.com%2Fava-labs%2Favalanchego%2Fblob%2Fmaster%2Fvms%2Fproposervm%2Fblock%2Fblock.go%23L119)%20which%20checks%20the%20signature%20as%20follows%0A%0A%60%60%60go%0A%20return%20b.cert.CheckSignature(b.cert.SignatureAlgorithm%2C%20headerBytes%2C%20b.Signature)%0A%60%60%60%0A%0A%23%23%20Code%20Review%0A%0AFolllowing%20is%20a%20review%20of%20.%20Avalanche%20also%20has%20a%20%5Bcoreth%20codebase%5D(https%3A%2F%2Fgithub.com%2Fava-labs%2Fcoreth)%20which%20was%20inspired%20by%20%5Bgeth%5D(https%3A%2F%2Fgithub.com%2Fethereum%2Fgo-ethereum).%20Please%20see%20%5Bhere%5D(.%2Fethereum-1-0.mdx)%20for%20a%20code%20review%20of%20geth.%20Following%20is%20an%20excerpt%20from%20%5Bcoreth%20README.md%5D(https%3A%2F%2Fgithub.com%2Fava-labs%2Fcoreth%2Fblob%2Fmaster%2FREADME.mdx).%0A%0A%3E%20Coreth%20(from%20core%20Ethereum)%20is%20the%20Virtual%20Machine%20(VM)%20that%20defines%20the%20Contract%20Chain%20(C-Chain).%20This%20chain%20implements%20the%20Ethereum%20Virtual%20Machine%20and%20supports%20Solidity%20smart%20contracts%20as%20well%20as%20most%20other%20Ethereum%20client%20functionality.%0A%0A%23%23%23%20Signing%0A%0A-%20%5BAvalanche%20Signing%20Codebase%5D(https%3A%2F%2Fgithub.com%2Fava-labs%2Favalanchego%2Ftree%2Fmaster%2Futils%2Fcrypto)%0A%20%20-%20%5BgetStakingSigner%5D(https%3A%2F%2Fgithub.com%2Fava-labs%2Favalanchego%2Fblob%2Fmaster%2Fconfig%2Fconfig.go%23L688)%3A%20Configuration%20retrieving%20validators%20BLS%20key.%20(go)%0A%20%20-%20%5BSigner%20Interface%5D(https%3A%2F%2Fgithub.com%2Fava-labs%2Favalanchego%2Fblob%2Fmaster%2Fvms%2Fplatformvm%2Fsigner%2Fsigner.go)%3A%20returns%20the%20public%20BLS%20key%20if%20it%20exists.%20(go)%0A%20%20-%20%5Bbls%20signature%5D(https%3A%2F%2Fgithub.com%2Fava-labs%2Favalanchego%2Fblob%2Fmaster%2Futils%2Fcrypto%2Fbls%2Fsignature.go)%3A%20Includes%20functions%20%60SignatureToBytes%60%2C%20%60SignatureFromBytes%60%20and%20%60AggregateSignatures%60%20aggregates%20a%20non-zero%20number%20of%20signatures%20into%20a%20single%20aggregated%20signature.%0A%20%20-%20%5Bsecp256kr1%5D(https%3A%2F%2Fgithub.com%2Fava-labs%2Favalanchego%2Fblob%2Fmaster%2Futils%2Fcrypto%2Fsecp256k1r.go)%3A%20Avalanches%20implementation%20of%20the%20ECSDA%20secp256k1r%20curve%20(go)%0A%20%20-%20%5Btx.go%5D(https%3A%2F%2Fgithub.com%2Fava-labs%2Favalanchego%2Fblob%2Fmaster%2Fvms%2Fplatformvm%2Ftxs%2Ftx.go%23L38)%3A%20Includes%20function%20for%20signing%20transactions%20using%20a%20Secp256k1r%20private%20key.%0A%0A%23%23%23%20Consensus%0A%0A-%20%5BAvalanche%20ConsensusContext%20Codebase%5D(https%3A%2F%2Fgithub.com%2Fava-labs%2Favalanchego%2Fblob%2Fmaster%2Fsnow%2Fcontext.go%23L63)%3A%20Context%20is%20information%20about%20the%20current%20executio%20including%20%60NetworkID%60%20is%20the%20ID%20of%20the%20network%20this%20context%20exists%20within.%20%60ChainID%60%20is%20the%20ID%20of%20the%20chain%20this%20context%20exists%20within.%20%60NodeID%60%20is%20the%20ID%20of%20this%20node.%20(go)%0A-%20%5BAvalanche%20Consensus%20CodeBase%5D(https%3A%2F%2Fgithub.com%2Fava-labs%2Favalanchego%2Ftree%2Fmaster%2Fsnow%2Fconsensus)%3A%20Contains%20consenus%20engines%20snowball%2C%20snowman%2C%20snowstorm%20and%20avalanche%20(go)%0A%20%20-%20%5BAvalanche%20snow%20README.md%5D(https%3A%2F%2Fgithub.com%2Fava-labs%2Favalanchego%2Fblob%2Fmaster%2Fsnow%2FREADME.mdx)%3A%20Documentation%20of%20the%20folow%20of%20a%20Single%20Blockchain.%0A%20%20-%20%5Bconsensus.go%5D(https%3A%2F%2Fgithub.com%2Fava-labs%2Favalanchego%2Fblob%2Fmaster%2Fsnow%2Fconsensus%2Favalanche%2Fconsensus.go)%3A%20Consensus%20code%20(go).%20_Consensus%20represents%20a%20general%20avalanche%20instance%20that%20can%20be%20used%20directly%20to%20process%20a%20series%20of%20partially%20ordered%20elements._%0A%20%20-%20%5Bavalanche%20poll%5D(https%3A%2F%2Fgithub.com%2Fava-labs%2Favalanchego%2Ftree%2Fmaster%2Fsnow%2Fconsensus%2Favalanche%2Fpoll)%3A%20Avalanches%20Polling%20(validator%20voting)%20mechanism%20(go).%0A%20%20-%20%5Bsnowman%20consensus.go%5D(https%3A%2F%2Fgithub.com%2Fava-labs%2Favalanchego%2Fblob%2Fmaster%2Fsnow%2Fconsensus%2Fsnowman%2Fconsensus.go)%3A%20Snowman%20consenus%20code%20(go).%20_represents%20a%20general%20snowman%20instance%20that%20can%20be%20used%20directly%20to%20process%20a%20series%20of%20dependent%20operations._%0A%20%20-%20%5Bavalanche%20snowman%20poll%5D(https%3A%2F%2Fgithub.com%2Fava-labs%2Favalanchego%2Ftree%2Fmaster%2Fsnow%2Fconsensus%2Fsnowman%2Fpoll)%3A%20Snowman%20Polling%20(validator%20voting)%20mechanism%20(go).%0A%0A%23%23%23%20Cryptographic%20Primitives%0A%0A**general%20primitives**%0A%0A-%20%5Bbag%5D(https%3A%2F%2Fgithub.com%2Fava-labs%2Favalanchego%2Ftree%2Fmaster%2Futils%2Fbag)%3A%20Mulitset%20with%20the%20ability%20to%20set%20thresholds%20add%20elements%2C%20compare%20against%20other%20bags%2C%20filter%2C%20split%20and%20return%20all%20elements%20which%20have%20been%20added%20a%20number%20of%20times.%0A-%20%5Bbeacon%5D(https%3A%2F%2Fgithub.com%2Fava-labs%2Favalanchego%2Ftree%2Fmaster%2Futils%2Fbeacon)%3A%20Beacons%20are%20a%20structure%20contiaining%20the%20NodeId%20and%20IPPort.%0A-%20%5Bbloom%5D(https%3A%2F%2Fgithub.com%2Fava-labs%2Favalanchego%2Ftree%2Fmaster%2Futils%2Fbloom)%3A%20Avalanches%20implementation%20of%20BloomFilteres%0A-%20%5Bbufer%5D(https%3A%2F%2Fgithub.com%2Fava-labs%2Favalanchego%2Ftree%2Fmaster%2Futils%2Fbuffer)%3A%20Buffer%20with%20queuing%20mechanisms%20including%20an%20unbounded%20deque%20%5Bdouble-ended%20queue%5D(https%3A%2F%2Fen.wikipedia.org%2Fwiki%2FDouble-ended_queue).%20Not%20safe%20for%20concurrent%20access.%0A-%20%5Bcb58%5D(https%3A%2F%2Fgithub.com%2Fava-labs%2Favalanchego%2Ftree%2Fmaster%2Futils%2Fcb58)%3A%20%5BCB58%5D(https%3A%2F%2Fsupport.avax.network%2Fen%2Farticles%2F4587395-what-is-cb58)%20is%20a%20format%20used%20to%20represent%20keys%2C%20addresses%2C%20and%20other%20binary%20values%20in%20web%20wallets%20and%20APIs.%20CB58%20is%20the%20concatenation%20of%20the%20data%20bytes%20and%20a%20checksum.%20The%20checksum%20is%20created%20by%20taking%20the%20last%20four%20bytes%20of%20the%20SHA256%20hash%20of%20the%20data%20bytes.%0A-%20%5Bcompare%5D(https%3A%2F%2Fgithub.com%2Fava-labs%2Favalanchego%2Ftree%2Fmaster%2Futils%2Fcompare)%3A%20Compares%20slices%20and%20returns%20true%20iff%20the%20slices%20have%20the%20same%20elements%2C%20regardless%20of%20order.%0A-%20%5Bcompression%5D(https%3A%2F%2Fgithub.com%2Fava-labs%2Favalanchego%2Ftree%2Fmaster%2Futils%2Fcompression)%3A%20compresss%20and%20decompresses%20messages%20using%20gzip%20compression.%0A-%20%5Bconstants%5D(https%3A%2F%2Fgithub.com%2Fava-labs%2Favalanchego%2Ftree%2Fmaster%2Futils%2Fconstants)%3A%20Constants%20for%20avalanche%20including%20aliases%2C%20applications%2C%20network_ids%2C%20network%20constantns%20and%20vm_ids.%0A-%20%5Bcrypto%5D(https%3A%2F%2Fgithub.com%2Fava-labs%2Favalanchego%2Ftree%2Fmaster%2Futils%2Fcrypto)%0A%20%20-%20%5Bbls%5D(https%3A%2F%2Fgithub.com%2Fava-labs%2Favalanchego%2Ftree%2Fmaster%2Futils%2Fcrypto%2Fbls)%3A%20Provides%20the%20interface%20to%20the%20%5Bblst%5D(https%3A%2F%2Fgithub.com%2Fsupranational%2Fblst%2F)%20BLS12-381%20signature%20library.%0A%20%20-%20%5Bkeychain%5D(https%3A%2F%2Fgithub.com%2Fava-labs%2Favalanchego%2Ftree%2Fmaster%2Futils%2Fcrypto%2Fkeychain)%3A%20implements%20functions%20for%20a%20keychain%20to%20return%20its%20main%20address%20and%20to%20sign%20a%20hash.%0A%20%20-%20%5Bledger%5D(https%3A%2F%2Fgithub.com%2Fava-labs%2Favalanchego%2Ftree%2Fmaster%2Futils%2Fcrypto%2Fledger)%3A%20Ledger%20is%20a%20wrapper%20around%20the%20low-level%20Ledger%20Device%20interface%20that%20provides%20Avalanche-specific%20access.%0A%20%20-%20%5Bsecp256k1%5D(https%3A%2F%2Fgithub.com%2Fava-labs%2Favalanchego%2Ftree%2Fmaster%2Futils%2Fcrypto%2Fsecp256k1)%3A%20Avalanche%20implementation%20of%20%5Bsecp256k1%5D(https%3A%2F%2Farxiv.org%2Fpdf%2F1808.02988.pdf)%0A-%20%5Bdynamicip%5D(https%3A%2F%2Fgithub.com%2Fava-labs%2Favalanchego%2Ftree%2Fmaster%2Futils%2Fdynamicip)%3A%20Updates%20and%20resolves%20public%20IP's%20using%20%5Bifconfig's%5D(https%3A%2F%2Fen.wikipedia.org%2Fwiki%2FIfconfig)%20format.%0A-%20%5Bfilesystem%5D(https%3A%2F%2Fgithub.com%2Fava-labs%2Favalanchego%2Ftree%2Fmaster%2Futils%2Ffilesystem)%3A%20Reads%20and%20renames%20files.%0A-%20%5Bformatting%5D(https%3A%2F%2Fgithub.com%2Fava-labs%2Favalanchego%2Ftree%2Fmaster%2Futils%2Fformatting)%3A%20Formats%20addresses.%20Parse%20takes%20in%20an%20address%20string%20and%20splits%20returns%20the%20corresponding%20parts.%20This%20returns%20the%20chain%20ID%20alias%2C%20bech32%20HRP%2C%20address%20bytes%2C%20and%20an%20error%20if%20it%20occurs.%0A-%20%5Bhashing%5D(https%3A%2F%2Fgithub.com%2Fava-labs%2Favalanchego%2Ftree%2Fmaster%2Futils%2Fhashing)%3A%20see%20hash%20functions%20below.%0A-%20%5Bips%5D(https%3A%2F%2Fgithub.com%2Fava-labs%2Favalanchego%2Ftree%2Fmaster%2Futils%2Fips)%3A%20ip%20utlitilties%20including%20claim%20(A%20self%20contained%20proof%20that%20a%20peer%20is%20claiming%20ownership%20of%20an%20IPPort%20at%20a%20given%20time.)%20and%20lookup%20(Lookup%20attempts%20to%20resolve%20a%20hostname%20to%20a%20single%20IP.%20If%20multiple%20IPs%20are%20found.%0A-%20%5Bjson%5D(https%3A%2F%2Fgithub.com%2Fava-labs%2Favalanchego%2Ftree%2Fmaster%2Futils%2Fjson)%3B%20utilities%20for%20marshalling%20and%20unmarshalling%20json.%0A-%20%5Blinkedhashmap%5D(https%3A%2F%2Fgithub.com%2Fava-labs%2Favalanchego%2Ftree%2Fmaster%2Futils%2Flinkedhashmap)%3A%20is%20a%20hashmap%20that%20keeps%20track%20of%20the%20oldest%20pairing%20and%20the%20newest%20pairing.%20hashmap%20provides%20an%20O(1)%20mapping%20from%20a%20%5Bcomparable%5D(https%3A%2F%2Fgo.dev%2Fref%2Fspec%23Comparison_operators)%20key%20to%20any%20value.%0A-%20%5Bmath%5D(https%3A%2F%2Fgithub.com%2Fava-labs%2Favalanchego%2Ftree%2Fmaster%2Futils%2Fmath)%3A%20mathematic%20functions%0A-%20%5Bmetric%5D(https%3A%2F%2Fgithub.com%2Fava-labs%2Favalanchego%2Ftree%2Fmaster%2Futils%2Fmetric)%3A%20Provide%20metrics%20by%20integrating%20with%20%5BPrometheus%5D(https%3A%2F%2Fprometheus.io%2F).%0A-%20%5Bpassword%5D(https%3A%2F%2Fgithub.com%2Fava-labs%2Favalanchego%2Ftree%2Fmaster%2Futils%2Fpassword)%3A%20Implements%20password%20Hashing%20using%20%5BArgon2%5D(https%3A%2F%2Fpkg.go.dev%2Fgolang.org%2Fx%2Fcrypto%2Fargon2)%0A-%20%5Bperms%5D(https%3A%2F%2Fgithub.com%2Fava-labs%2Favalanchego%2Ftree%2Fmaster%2Futils%2Fperms)%3A%20provides%20the%20ability%20to%20modify%20file%20permissions.%0A-%20%5Bprofiler%5D(https%3A%2F%2Fgithub.com%2Fava-labs%2Favalanchego%2Ftree%2Fmaster%2Futils%2Fprofiler)%3A%20Profiler%20provides%20helper%20methods%20for%20measuring%20the%20current%20performance%20of%20processes%2F%0A-%20%5Bresource%5D(https%3A%2F%2Fgithub.com%2Fava-labs%2Favalanchego%2Ftree%2Fmaster%2Futils%2Fresource)%3A%20provides%20resource%20usage%20information%20including%20active%20cpu%20and%20disk%20usage.%0A-%20%5Brpc%5D(https%3A%2F%2Fgithub.com%2Fava-labs%2Favalanchego%2Ftree%2Fmaster%2Futils%2Frpc)%3A%20Manages%20requests%20for%20avalanche%20rpc%20endpoints.%0A-%20%5Bsampler%5D(https%3A%2F%2Fgithub.com%2Fava-labs%2Favalanchego%2Ftree%2Fmaster%2Futils%2Fsampler)%3A%20sample%20a%20specified%20valued%20based%20on%20a%20provided%20weighted%20distribution.%20Sampling%20is%20performed%20by%20executing%20a%20modified%20binary%20search%20over%20the%20provided%20elements.%20Rather%20than%20cutting%20the%20remaining%20dataset%20in%20half%2C%20the%20algorithm%20attempt%20to%20just%20in%20to%20where%20it%20think%20the%20value%20will%20be%20assuming%20a%20linear%20distribution%20of%20the%20element%20weights.%0A-%20%5Bset%5D(https%3A%2F%2Fgithub.com%2Fava-labs%2Favalanchego%2Ftree%2Fmaster%2Futils%2Fset)%3A%20Return%20a%20new%20set%20with%20initial%20capacity%20%5Bsize%5D.%20More%20or%20less%20than%20%5Bsize%5D%20elements%20can%20be%20added%20to%20this%20set.%20Using%20NewSet()%20rather%20than%20Set%5BT%5D%7B%7D%20is%20just%20an%20optimization%20that%20can%20be%20used%20if%20you%20know%20how%20many%20elements%20will%20be%20put%20in%20this%20set.%0A-%20%5Bstorage%5D(https%3A%2F%2Fgithub.com%2Fava-labs%2Favalanchego%2Ftree%2Fmaster%2Futils%2Fstorage)%3A%20File%20system%20storage%0A-%20%5Btimer%5D(https%3A%2F%2Fgithub.com%2Fava-labs%2Favalanchego%2Ftree%2Fmaster%2Futils%2Ftimer)%3A%20Timer%20wraps%20a%20timer%20object.%20This%20allows%20a%20user%20to%20specify%20a%20handler.%20Once%20specifying%20the%20handler%2C%20the%20dispatch%20thread%20can%20be%20called.%20The%20dispatcher%20will%20only%20return%20after%20calling%20Stop.%20SetTimeoutIn%20will%20result%20in%20calling%20the%20handler%20in%20the%20specified%20amount%20of%20time.%0A-%20%5Bulimit%5D(https%3A%2F%2Fgithub.com%2Fava-labs%2Favalanchego%2Ftree%2Fmaster%2Futils%2Fulimit)%3A%20Manages%20resource%20limits.%0A-%20%5Bunits%5D(https%3A%2F%2Fgithub.com%2Fava-labs%2Favalanchego%2Ftree%2Fmaster%2Futils%2Funits)%3A%20Unit%20Constants%20(e.g.%20%60Avax%20%20%20%20%20%20uint64%20%3D%201000%20*%20MilliAvax%60%20)%0A-%20%5Bwindow%5D(https%3A%2F%2Fgithub.com%2Fava-labs%2Favalanchego%2Ftree%2Fmaster%2Futils%2Fwindow)%3A%20an%20interface%20which%20represents%20a%20sliding%20window%20of%20elements.%0A-%20%5Bwrappers%5D(https%3A%2F%2Fgithub.com%2Fava-labs%2Favalanchego%2Ftree%2Fmaster%2Futils%2Fwrappers)%3A%20Wrappers%20for%20packing%20and%20unpacking%20data.%0A%0A**hash%20functions**%0A%0A-%20%5Bhashing%5D(https%3A%2F%2Fgithub.com%2Fava-labs%2Favalanchego%2Ftree%2Fmaster%2Futils%2Fhashing)%0A%20%20-%20%5Bsha256%5D(https%3A%2F%2Fgithub.com%2Fava-labs%2Favalanchego%2Fblob%2Fmaster%2Futils%2Fhashing%2Fhashing.go%23L7)%3A%20Implements%20%5BSHA256%5D(https%3A%2F%2Fen.wikipedia.org%2Fwiki%2FSHA-2)%20hashing.%0A%20%20-%20%5Bripmed160%5D(https%3A%2F%2Fgithub.com%2Fava-labs%2Favalanchego%2Fblob%2Fmaster%2Futils%2Fhashing%2Fhashing.go%23LL11C2-L11C2)%3A%20Implements%20%5BRIPEMD%5D(https%3A%2F%2Fen.wikipedia.org%2Fwiki%2FRIPEMD)%20(RIPE%20Message%20Digest)%2C%20a%20family%20of%20cryptographic%20hash%20functions%20developed%20in%201992%20(the%20original%20RIPEMD)%20and%201996%20(other%20variants).%20There%20are%20five%20functions%20in%20the%20family%3A%20RIPEMD%2C%20RIPEMD-128%2C%20RIPEMD-160%2C%20RIPEMD-256%2C%20and%20RIPEMD-320%2C%20of%20which%20RIPEMD-160%20is%20the%20most%20common.%0A%20%20-%20%5Bring%5D(https%3A%2F%2Fgithub.com%2Fava-labs%2Favalanchego%2Fblob%2Fmaster%2Futils%2Fhashing%2Fconsistent%2Fring.go)%3A%20Ring%20is%20an%20interface%20for%20a%20consistent%20%5Bhashing%20ring%5D(https%3A%2F%2Fen.wikipedia.org%2Fwiki%2FConsistent_hashing).%0A-%20%5BArgon2%20password%20hashing%5D(https%3A%2F%2Fgithub.com%2Fava-labs%2Favalanchego%2Ftree%2Fmaster%2Futils%2Fpassword)%3A%20Implements%20password%20Hashing%20using%20%5BArgon2%5D(https%3A%2F%2Fpkg.go.dev%2Fgolang.org%2Fx%2Fcrypto%2Fargon2)%0A%0A**encryption**%0A%0A**random%20number%20generators**%0A%0A**serilization**%0A%0A**virtual%20machines**%0A%0A-%20%5Bvms%5D(https%3A%2F%2Fgithub.com%2Fava-labs%2Favalanchego%2Ftree%2Fmaster%2Fvms)%3A%20Avalanche%20Virtual%20Machines%0A%0A%23%23%20References%0A%0A**Consensus**%0A%0A-%20%5BScalable%20and%20Probabilistic%20Leaderless%20BFT%20Consensus%20through%20Metastability%5D(https%3A%2F%2Fassets.website-files.com%2F5d80307810123f5ffbb34d6e%2F6009805681b416f34dcae012_Avalanche%2520Consensus%2520Whitepaper.pdf)%3A%20This%20paper%20introduces%20a%20family%20of%20leaderless%20Byzantine%20fault%20tolerance%20protocols%2C%20built%20around%20a%20metastable%20mechanism%20via%20network%20subsampling.%0A-%20%5BAvalanche%20Blockchain%20Consensus%20Documentation%5D(https%3A%2F%2Fdocs.avax.network%2Foverview%2Fgetting-started%2Favalanche-consensus)%3A%20Overive%20of%20the%20Snowball%20Algorithm%20used%20for%20Avalanche%20Consenus%20and%20it's%20use%20of%20Directed%20Acyclic%20Graphs%20(DAGs).%0A-%20%5BAvalanche%20Subnet%20Overview%20Documentation%5D(https%3A%2F%2Fdocs.avax.network%2Fsubnets)%3A%20Overview%20of%20Avalanches%20Subnets%20and%20their%20use%20of%20Avalanche's%203%20built-in%20blockchains%3A%20Platform%20Chain%20(P-Chain)%2C%20Contract%20Chain%20(C-Chain)%20and%20Exchange%20Chain%20(X-Chain).%0A-%20%5BAvalanche%20Get%20Current%20Validator%20Documentation%5D(https%3A%2F%2Fdocs.avax.network%2Fapis%2Favalanchego%2Fapis%2Fp-chain%23platformgetcurrentvalidators)%3A%20List%20the%20current%20validators%20of%20the%20given%20Subnet.%20Signer%20is%20the%20node's%20BLS%20public%20key%20and%20proof%20of%20possession.%0A-%20%5BAvalanche%20Get%20Node%20Id%20Documentation%5D(https%3A%2F%2Fdocs.avax.network%2Fapis%2Favalanchego%2Fapis%2Finfo%23infogetnodeid)%3A%20Get%20the%20ID%20of%20this%20node.%20nodePOP%20is%20this%20node's%20BLS%20key%20and%20proof%20of%20possession.%0A-%20%5BAvalanche%20Platform%20Transaction%20Format%20Documentation%5D(https%3A%2F%2Fdocs.avax.network%2Fspecs%2Fplatform-transaction-serialization)%3A%20Documenation%20on%20how%20transactions%20are%20serialized%20and%20the%20use%20of%20the%20primitive%20serialization%20format%20for%20packing%20and%20secp256k1%20for%20cryptographic%20user%20identification.%0A%0A-%20%5BAvalanche%20Network%20Status%20Dashboard%5D(https%3A%2F%2Fstats.avax.network%2Fdashboard%2Fnetwork-status%2F)%3A%0A%0A**Signing**%0A%0A-%20%5BAvalanche%20Cryptographic%20Primitive%20Documentation%5D(https%3A%2F%2Fdocs.avax.network%2Fspecs%2Fcryptographic-primitives)%3A%20Overview%20of%20Avalanches%20cryptographic%20primitives%20focusing%20on%20it's%20use%20of%20TLS%20AND%20Secp256k1.%0A-%20Avalanche%20BLS%20Support%20Release%20Documentation%0A%20%20-%20%5BRelease%20v1.8.6%3A%20Apricot%20Phase%206%5D(https%3A%2F%2Fgithub.com%2Fava-labs%2Favalanchego%2Freleases%2Ftag%2Fv1.8.6)%3A%20Adds%20BLS%20key%20file%20and%20exposes%20blos%20proof%20of%20posession%0A%20%20-%20%5BRelease%20v1.9.1%3A%20Banff.1%5D(https%3A%2F%2Fgithub.com%2Fava-labs%2Favalanchego%2Freleases%2Ftag%2Fv1.9.1)%3A%20Added%20BLS%20signer%20to%20the%20snow.Context%0A%20%20-%20%5BRelease%20v1.9.2%3A%20Banff.2%20-%20Additional%20BLS%20Support%5D(https%3A%2F%2Fgithub.com%2Fava-labs%2Favalanchego%2Freleases%2Ftag%2Fv1.9.2)%3A%20Added%20bls%20proof%20of%20possession%20to%20%60platform.getCurrentValidators%60%20and%20%60platform.getPendingValidators%60.%20Added%20bls%20public%20key%20to%20in-memory%20staker%20objects.%20Improved%20memory%20clearing%20of%20bls%20secret%20keys.%0A-%20Avalanch%20BLS%20Relevant%20Commits%0A%20%20-%20%5BAdd%20BLS%20key%20to%20AddPermissionlessValidatorTx%20for%20the%20Primary%20Network%20(%231987)%5D(https%3A%2F%2Fgithub.com%2Fava-labs%2Favalanchego%2Fcommit%2Ffb6bb81f499b4b8c0f903c8745f5b7fbd8d97668)%0A%20%20-%20%5BAdd%20BLS%20signer%20to%20snow.Context%20(%232069)%5D(https%3A%2F%2Fgithub.com%2Fava-labs%2Favalanchego%2Fcommit%2F5176495568e512b2ebbfb1102dfd59541ccaa578)%0A%0A**Staking**%0A%0A-%20%5BAvalanche%20Staking%20Documentation%5D(https%3A%2F%2Fdocs.avax.network%2Fnodes%2Fvalidate%2Fstaking%23staking-parameters-on-avalanche)%3A%20Staking%20Parameters%20on%20Avalanche%0A%0A**Additional**%0A%0A-%20%5BUTXO%20Codebase%5D(https%3A%2F%2Fgithub.com%2Fava-labs%2Favalanchego%2Fblob%2Fmaster%2Fvms%2Fplatformvm%2Futxo%2Fhandler.go)%3A%20Unsigned%20Transaction%20Output%20Handling.%0A-%20%5Bxsvm%5D(https%3A%2F%2Fgithub.com%2Fava-labs%2Fxsvm)%3A%20Cross%20Subnet%20Asset%20Transfers%20README%20Overview%0A%0A%23%23%20Footnotes%0A%0AOverview%0A%0A%5B%5Eov-1%5D%3A%20%5BAvalanche%20introductory%20documentation%5D(https%3A%2F%2Fdocs.avax.network%2Foverview%2Fgetting-started%2Favalanche-platform)%3A%20Avalanche%20is%20a%20heterogeneous%20network%20of%20blockchains%20allowing%20separate%20chains%20to%20be%20created%20for%20different%20applications.%0A%0A%5B%5Eov-2%5D%3A%20%5BSnowman%20VM%5D(https%3A%2F%2Fgithub.com%2Fava-labs%2Favalanchego%2Fblob%2Fmaster%2Fvms%2FREADME.mdx)%3A%20To%20the%20consensus%20engine%2C%20the%20Snowman%20VM%20is%20a%20black%20box%20that%20handles%20all%20block%20building%2C%20parsing%2C%20and%20storage%20and%20provides%20a%20simple%20block%20interface%20for%20the%20consensus%20engine%20to%20call%20as%20it%20decides%20blocks.%0A%0A%5B%5Eov-3%5D%3A%20%5BAvalanche%20explorer%5D(https%3A%2F%2Fsubnets.avax.network%2F)%3A%20Block%20Explorere%20showing%20subnets%2C%20totoal%20blockchains%2C%20total%20validators%20and%20totals%20stake%20amount.%0A%0A%5B%5Eov-4%5D%3A%20%5BSnowman%2B%2B%5D(https%3A%2F%2Fgithub.com%2Fava-labs%2Favalanchego%2Fblob%2Fmaster%2Fvms%2Fproposervm%2FREADME.mdx)%3A%20a%20congestion%20control%20mechanism%20available%20for%20snowman%20VMs.%0A%0A%5B%5Eov-5%5D%3A%20%5Bblock%20verify%20function%5D(https%3A%2F%2Fgithub.com%2Fava-labs%2Favalanchego%2Fblob%2Fmaster%2Fvms%2Fproposervm%2Fblock%2Fblock.go%23L119)%3A%20statelessBlock%20Verify%20function%20in%20proposervm.%0A%0A%5B%5Eov-6%5D%3A%20%5Bblock%20structure%5D(https%3A%2F%2Fgithub.com%2Fava-labs%2Favalanchego%2Fblob%2Fmaster%2Fvms%2Fproposervm%2Fblock%2Fblock.go%23L51)%3A%20statelessBlock%20structure%20in%20proposervm.%0A%0A%5B%5Eov-7%5D%3A%20%5BNewCertAndKeyBytes%5D(https%3A%2F%2Fgithub.com%2Fava-labs%2Favalanchego%2Fblob%2Fmaster%2Fstaking%2Ftls.go%23L120)%3A%20Creates%20a%20new%20staking%20private%20key%20%2F%20staking%20certificate%20pair.%20Returns%20the%20PEM%20byte%20representations%20of%20both.%0A%0AAvalanche%20BLS%20Support%20Release%20Documentation%0A%0A%5B%5Eov-8%5D%3A%20%5Brelease%20notes%20on%20GitHub%5D(https%3A%2F%2Fgithub.com%2Fava-labs%2Favalanchego%2Freleases%2Ftag%2Fv1.9.2)%20and%20%5Bcode%20commit%20search%20result%5D(https%3A%2F%2Fgithub.com%2Fava-labs%2Favalanchego%2Fsearch%3Fq%3Dbls%26type%3Dcommits)%0A%0A%5B%5Eov-9%5D%3A%20%5BRelease%20v1.8.6%3A%20Apricot%20Phase%206%5D(https%3A%2F%2Fgithub.com%2Fava-labs%2Favalanchego%2Freleases%2Ftag%2Fv1.8.6)%3A%20Adds%20BLS%20key%20file%20and%20exposes%20blos%20proof%20of%20posession%0A%0A%5B%5Eov-10%5D%3A%20%5BRelease%20v1.9.1%3A%20Banff.1%5D(https%3A%2F%2Fgithub.com%2Fava-labs%2Favalanchego%2Freleases%2Ftag%2Fv1.9.1)%3A%20Added%20BLS%20signer%20to%20the%20snow.Context%0A%0A%5B%5Eov-11%5D%3A%20%5BRelease%20v1.9.2%3A%20Banff.2%20-%20Additional%20BLS%20Support%5D(https%3A%2F%2Fgithub.com%2Fava-labs%2Favalanchego%2Freleases%2Ftag%2Fv1.9.2)%3A%20Added%20bls%20proof%20of%20possession%20to%20%60platform.getCurrentValidators%60%20and%20%60platform.getPendingValidators%60.%20Added%20bls%20public%20key%20to%20in-memory%20staker%20objects.%20Improved%20memory%20clearing%20of%20bls%20secret%20keys.%0A%0AAvalanche%20BLS%20Relevant%20Commits%0A%0A%5B%5Eov-12%5D%3A%20%5BAdd%20BLS%20key%20to%20AddPermissionlessValidatorTx%20for%20the%20Primary%20Network%20(%231987)%5D(https%3A%2F%2Fgithub.com%2Fava-labs%2Favalanchego%2Fcommit%2Ffb6bb81f499b4b8c0f903c8745f5b7fbd8d97668)%0A%0A%5B%5Eov-13%5D%3A%20%5BAdd%20BLS%20signer%20to%20snow.Context%20(%232069)%5D(https%3A%2F%2Fgithub.com%2Fava-labs%2Favalanchego%2Fcommit%2F5176495568e512b2ebbfb1102dfd59541ccaa578)%0A%0AWarp%20Messaging%0A%0A%5B%5Eov-14%5D%3A%20%5BAvalanche%20Warp%20Messaging%20(AWM)%5D(https%3A%2F%2Fmedium.com%2Favalancheavax%2Favalanche-warp-messaging-awm-launches-with-the-first-native-subnet-to-subnet-message-on-avalanche-c0ceec32144a)%3A%20AWM%20enables%20Subnet%20Validators%20to%20collectively%20produce%20a%20BLS%20Multi-Signature%20that%20attests%20to%20the%20validity%20of%20an%20arbitrary%20message%20(e.g.%2C%20transfer%2C%20contract%20data%2C%20etc.)%20that%20can%20be%20verified%20by%20any%20other%20Subnet.%0A%0A%5B%5Eov-15%5D%3A%20%5Bavalanchego%20warp%20codebase%5D(https%3A%2F%2Fgithub.com%2Fava-labs%2Favalanchego%2Ftree%2Fmaster%2Fvms%2Fplatformvm%2Fwarp)%3A%20Codebase%20supporting%20bls%20signing%20of%20inter-subnet%20messages.%0A%0ARSA%20Support%0A%0A%5B%5Eov-16%5D%3A%20%5BEIP-198%5D(https%3A%2F%2Fgithub.com%2Fethereum%2FEIPs%2Fblob%2Ff2db669da93ca4ce1605866e147bfa4f56303fc6%2FEIPS%2Feip-198.mdx)%3A%20Big%20integer%20modular%20exponentiation.%20Pre-compile%20for%20Ethereum%20which%20allows%20for%20efficient%20RSA%20verification%20inside%20of%20the%20EVM%2C%20as%20well%20as%20other%20forms%20of%20number%20theory-based%20cryptography.%0A%0A%5B%5Eov-17%5D%3A%20%5BSolRsaVerify%5D(https%3A%2F%2Fgithub.com%2Fadria0%2FSolRsaVerify)%3A%20Solidity%20Library%20which%20allows%20verification%20of%20RSA%20Sha256%20Pkcs1.5%20Signatures%0A%0A%5B%5Eov-18%5D%3A%20%5BCortina%3A%20X-Chain%20Linearization%5D(https%3A%2F%2Fmedium.com%2Favalancheavax%2Fcortina-x-chain-linearization-a1d9305553f6)%3A%20This%20upgrade%20linearizes%20the%20X-chain%2C%20introduces%20delegation%20batching%20to%20the%20P-chain%2C%20and%20increases%20the%20maximum%20block%20size%20on%20the%20C-chain.%20(Release%20notes%20are%20%5Bhere%5D(https%3A%2F%2Fgithub.com%2Fava-labs%2Favalanchego%2Freleases)%20and%20changelog%20is%20%5Bhere%5D(https%3A%2F%2Fgithub.com%2Fava-labs%2Favalanchego%2Fcompare%2Fv1.9.16...v1.10.0))%0A%0Aconsensus%0A%0A%5B%5Econ-1%5D%3A%20%5BAvalanche%20Platform%5D(https%3A%2F%2Fdocs.avax.network%2Foverview%2Fgetting-started%2Favalanche-platform)%3A%20Avalanche%20is%20a%20heterogeneous%20network%20of%20blockchains.%20The%20Primary%20Network%20is%20a%20special%20Subnet%20that%20contains%20all%20validators%20(including%20validators%20of%20any%20custom%20Subnets).%0A%0A%5B%5Econ-2%5D%3A%20%5BAvalanche%20Consensus%20Whitepaper%5D(https%3A%2F%2Fassets.website-files.com%2F5d80307810123f5ffbb34d6e%2F6009805681b416f34dcae012_Avalanche%2520Consensus%2520Whitepaper.pdf)%3A%20Scalable%20and%20Probabilistic%20Leaderless%20BFT%20Consensus%20through%20Metastability.%20This%20paper%20introduces%20a%20family%20of%20leaderless%20Byzantine%20fault%20tolerance%20protocols%2C%20built%20around%20a%20metastable%20mechanism%20via%20network%20subsampling.%0A%0A%5B%5Econ-3%5D%3A%20%5BAvalanche%20Docs%3A%20Consensus%5D(https%3A%2F%2Fdocs.avax.network%2Foverview%2Fgetting-started%2Favalanche-consensus)%3A%20a%20consensus%20protocol%20that%20is%20scalable%2C%20robust%2C%20and%20decentralized.%20It%20has%20low%20latency%20and%20high%20throughput.%20It%20is%20energy%20efficient%20and%20does%20not%20require%20special%20computer%20hardware.%0A%0A%5B%5Econ-4%5D%3A%20%5BSnow%20README.md%5D(https%3A%2F%2Fgithub.com%2Fava-labs%2Favalanchego%2Fblob%2Fmaster%2Fsnow%2FREADME.mdx)%3A%20Each%20blockchain%20on%20Avalanche%20has%20several%20components%3A%20the%20virtual%20machine%2C%20database%2C%20consensus%20engine%2C%20sender%2C%20and%20handler.%20These%20components%20help%20the%20chain%20run%20smoothly.%20Blockchains%20also%20interact%20with%20the%20P2P%20layer%20and%20the%20chain%20router%20to%20send%20and%20receive%20messages.%0A%0A%5B%5Econ-5%5D%3A%20%5BCoreth%20and%20the%20C-Chain%5D(https%3A%2F%2Fgithub.com%2Fava-labs%2Fcoreth%2Ftree%2Fmaster%23readme)%3A%20Coreth%20is%20a%20dependency%20of%20AvalancheGo%20which%20is%20used%20to%20implement%20the%20EVM%20based%20Virtual%20Machine%20for%20the%20Avalanche%20C-Chain.%0A%0A%5B%5Econ-6%5D%3A%20%5BSnowman%20VM's%5D(https%3A%2F%2Fgithub.com%2Fava-labs%2Favalanchego%2Fblob%2Fmaster%2Fvms%2FREADME.mdx)%3A%20To%20the%20consensus%20engine%2C%20the%20Snowman%20VM%20is%20a%20black%20box%20that%20handles%20all%20block%20building%2C%20parsing%2C%20and%20storage%20and%20provides%20a%20simple%20block%20interface%20for%20the%20consensus%20engine%20to%20call%20as%20it%20decides%20blocks.%0A%0A%5B%5Econ-7%5D%3A%20%5BSnowman%2B%2B%3A%20congestion%20control%20for%20Snowman%20VMs%5D(https%3A%2F%2Fgithub.com%2Fava-labs%2Favalanchego%2Fblob%2Fmaster%2Fvms%2Fproposervm%2FREADME.mdx)%3A%20Snowman%2B%2B%20introduces%20a%20soft%20proposer%20mechanism%20which%20attempts%20to%20select%20a%20single%20proposer%20with%20the%20power%20to%20issue%20a%20block%2C%20but%20opens%20up%20block%20production%20to%20every%20validator%20if%20sufficient%20time%20has%20passed%20without%20blocks%20being%20generated.%0A%0Asigning%0A%0A%5B%5Esig-1%5D%3A%20%5BAvalanche%20Cryptographic%20Primitive%20Documentation%5D(https%3A%2F%2Fdocs.avax.network%2Fspecs%2Fcryptographic-primitives)%3A%20Overview%20of%20Avalanches%20cryptographic%20primitives%20focusing%20on%20it's%20use%20of%20TLS%20AND%20Secp256k1.%0A",lastUpdatedAt:1753129136e3},{lazy:()=>o2(()=>import("./avalanche-D_hO4yuG.js"),[]),path:"/research/chains/avalanche.html",type:"mdx",filePath:"research/chains/avalanche.mdx",content:"%23%20Avalanche%0A%0A-%20date%3A%202023-02-04%0A-%20last%20updated%3A%202023-02-04%0A%0A%23%23%20Overview%0A%0AAvalanche%20is%20good%20candidate%20because%20it%20samples%20from%20a%20large%20number%20of%20validators%20to%20produce%20blocks%2C%20uses%20generic%20methods%20for%20signing%20blocks%20(RSA%20on%20a%20X.509%20certificate)%2C%20is%20moving%20to%20transition%20to%20BLS%20signatures%20for%20validators%2C%20and%20has%20numerous%20subnets.%0A%0AIn%20Avalanche%2C%20there%20are%20two%20types%20of%20consensus%20mechanisms%20(Avalanche%2C%20partially%20ordered%2C%20and%20Snowman%2C%20linearly%20ordered%20similar%20to%20other%20blockchains).%20Users%20can%20create%20arbitrary%20subnets%20in%20Avalanche%2C%20and%20any%20validator%20is%20free%20to%20participate%20the%20consensus%20for%20any%20subnet%5B%5Eov-1%5D%2C%20besides%20the%20mandatory%20participation%20of%20the%20special%20subnet%20-%20the%20Primary%20Network.%20Each%20subnet%20has%20three%20types%20of%20chains%2C%20each%20with%20different%20roles%20and%20runs%20different%20consensus%20mechanism%20and%20process%20different%20transaction%20types%3A%20(1)%20P-Chain%2C%20which%20defines%20validator%20sets%20and%20process%20validator%20related%20transactions%3B%20(2)%20X-Chain%2C%20for%20exchanging%20assets%2C%20where%20blocks%20are%20partially%20ordered%3B%20(3)%20C-Chain%2C%20which%20runs%20an%20EVM%20and%20handles%20smart%20contract%20interactions%20%5B%5Eov-2%5D.%0A%0A_Note%3A%20On%20march%2023rd%2C%202023%20Avalanche%20published%20an%20article%5B%5Eov-18%5D%20giving%20an%20overviow%20of%20the%20Cortina%20release%2C%20it's%20move%20to%20linearize%20the%20X-chain%20to%20enable%20support%20for%20WARP%20messaging._%0A%0AWe%20limit%20our%20scope%20to%20only%20the%20**Primary%20Network**%2C%20since%20any%20bridging%20implementation%20is%20likely%20replicable%20in%20subnets%2C%20and%20subnets%20are%20likely%20to%20be%20interoperable%20soon.%20For%20trustless%20bridging%2C%20only%20events%20from%20**C-Chain**%20are%20relevant%2C%20since%20the%20bridge%20must%20be%20a%20smart%20contract%20and%20all%20cross-chain%20operations%20can%20be%20conveniently%20wrapped%20inside%20contract%20interactions.%0A%0AThe%20active%20Avalanche%20validator%20set%20is%20unrestricted%20and%20permissionless%2C%20and%20has%20more%20than%201000%20members%20at%20this%20time%20%5B%5Eov-3%5D.%20Block%20proposers%20are%20randomly%20sampled%20from%20the%20active%20validator%20set%2C%20therefore%20any%20validator%20could%20potentially%20sign%20a%20block%20%5B%5Eov-4%5D.%20The%20validators%20use%20X.509%20(TLS)certificate%20to%20sign%20and%20verify%20blocks%20%5B%5Eov-5%5D%2C%20and%20the%20block%20headers%20contain%20both%20the%20certificate%20and%20the%20signature%20%5B%5Eov-6%5D.%20Neither%20Avalanche%20documentation%20or%20code%20specifies%20the%20key%20and%20signing%20algorithms%20for%20the%20X.509%20certificate%2C%20but%20the%20certificate%20auto-generated%20by%20the%20code%20(invoked%20via%20validator%20command-line%20tools)%20creates%204096-bit%20RSA%20key%20by%20default%20%5B%5Eov-7%5D.%0A%0AIn%20recent%20releases%5B%5Eov-8%5D%20%5B%5Eov-9%5D%20%5B%5Eov-10%5D%20%5B%5Eov-11%5D%20%5B%5Eov-12%5D%20%5B%5Eov-13%5D%20of%20Avalanche%2C%20validators%20may%20also%20load%20or%20generate%20an%20optional%20BLS%20key.%20This%20is%20to%20support%20Avalanche%20Warp%20Messaging%20(AWM)%20%5B%5Eov-14%5D%20%5B%5Eov-15%5D%20supporting%20inter-subnet%20messaging.%20This%20suggests%20the%20protocol%20may%20replace%20its%20signature%20scheme%20from%20RSA%20to%20BLS%20in%20the%20near%20future.%0A%0A_Note%20that%20RSA%20signature%20can%20be%20cheaply%20verified%20on-chain%2C%20per%20EIP-198%20%5B%5Eov-16%5D%20.%20Solidity%20libraries%20%5B%5Eov-17%5D%20are%20also%20available%20for%20RSA%20signature%20verification.%20In%20the%20worst%20case%2C%20even%20if%20any%20validator%20chooses%20to%20use%20a%20non-RSA%20custom-made%20certificate%2C%20most%20of%20the%20signing%20algorithms%20(ECDSA%2C%20EDDSA)%20supported%20by%20chosen%20crypto%20library%20in%20Go%20can%20also%20be%20verified%20on-chain._%0A%0A%23%23%20Consensus%20Mechanisms%0A%0AThere%20are%20two%20main%20consensus%20algorithms%3A%20Avalanche%20and%20Snowman.%20As%20stated%20above%20our%20focus%20is%20bridging%20from%20the%20**C-Chain**%20(contract(C)%20Chain)%20which%20uses%20%5BSnowman%20Consensus%5D(%23snowman-consensus).%0A%0A%23%23%23%20Avalanche%20Primary%20Network%0A%0AAvalanche%20is%20a%20network%20of%20blockchains%5B%5Econ-1%5D%2C%20this%20diagram%20gives%20an%20overview%20of%20the%20avalanche%20primiary%20network.%0A%0A!%5BAvalanche%20Primary%20Network%5D(%2Fassets%2Fresearch%2Favalanche-primary-network.png%20%22Avalanche%20Primary%20Network%22)%0A%0A%23%23%23%20Avalanche%20Consensus%0A%0AFollowing%20is%20an%20excerpt%20from%20the%20Avalanche%20Consensus%20Whitepaper%20%5B%5Econ-2%5D%2C%20it%20is%20also%20recommended%20reviewing%20Avalanche%20Blockchain%20Consensus%20Documentation%20%5B%5Econ-3%5D.%0A%0A%3E%20This%20paper%20introduces%20a%20family%20of%20leaderless%20Byzantine%20fault%20tolerance%20protocols%2C%20built%20around%20a%20metastable%20mechanism%20via%20network%20subsampling.%20These%20protocols%20provide%20a%20strong%20probabilistic%20safety%20guarantee%20in%20the%20presence%20of%20Byzantine%20adversaries%20while%20their%20concurrent%20and%20leaderless%20nature%20enables%20them%20to%20achieve%20high%20throughput%20and%20scalability.%20Unlike%20blockchains%20that%20rely%20on%20proof-of-work%2C%20they%20are%20quiescent%20and%20green.%20Unlike%20traditional%20consensus%20protocols%20where%20one%20or%20more%20nodes%20typically%20process%20linear%20bits%20in%20the%20number%20of%20total%20nodes%20per%20decision%2C%20no%20node%20processes%20more%20than%20logarithmic%20bits.%20It%20does%20not%20require%20accurate%20knowledge%20of%20all%20participants%20and%20exposes%20new%20possible%20tradeoffs%20and%20improvements%20in%20safety%20and%20liveness%20for%20building%20consensus%20protocols.%0A%3E%0A%3E%20The%20paper%20describes%20the%20Snow%20protocol%20family%2C%20analyzes%20its%20guarantees%2C%20and%20describes%20how%20it%20can%20be%20used%20to%20construct%20the%20core%20of%20an%20internet-scale%20electronic%20payment%20system%20called%20Avalanche%2C%20which%20is%20evaluated%20in%20a%20large%20scale%20deployment.%20Experiments%20demonstrate%20that%20the%20system%20can%20achieve%20high%20throughput%20(3400%20tps)%2C%20provide%20low%20confirmation%20latency%20(1.35%20sec)%2C%20and%20scale%20well%20compared%20to%20existing%20systems%20that%20deliver%20similar%20functionality.%20For%20our%20implementation%20and%20setup%2C%20the%20bottleneck%20of%20the%20system%20is%20in%20transaction%20verification.%0A%0A!%5BAvalanche%20Consensus%5D(%2Fassets%2Fresearch%2Favalanche-consensus.png%20%22Avalanche%20Consensus%22)%0A%0A%23%23%23%20Snowman%20Consensus%0A%0ASnowman%20consensus%20is%20one%20of%20the%20consensus%20mechanisms%20for%20single%20blockchains%20supported%20by%20snow%20%5B%5Econ-4%5D%2C%20the%20following%20excerp%20and%20diagram%20give%20an%20overview%20of%20how%20a%20blockchain%20(in%20our%20case%20the%20C-chain)%20can%20leverage%20one%20of%20snows%20mulitple%20conensus%20mechanisms%20(in%20our%20case%20snowman).%0A%0A%3E%20Each%20blockchain%20on%20Avalanche%20has%20several%20components%3A%20the%20virtual%20machine%2C%20database%2C%20consensus%20engine%2C%20sender%2C%20and%20handler.%20These%20components%20help%20the%20chain%20run%20smoothly.%20Blockchains%20also%20interact%20with%20the%20P2P%20layer%20and%20the%20chain%20router%20to%20send%20and%20receive%20messages.%0A%0A!%5BAvalanche%20flow%20of%20a%20single%20blockchain%5D(%2Fassets%2Fresearch%2Favalanche-flow.png%20%22Avalanche%20Flow%20of%20a%20single%20blockchain%22)%0A%0AIn%20the%20case%20of%20the%20C-Chain%2C%20avalanche%20uses%20coreth%5B%5Econ-5%5D%20a%20modified%20version%20of%20geth%2C%20as%20it's%20vm%20to%20provide%20EVM%20support.%20It%20also%20uses%20Snowman%2B%2B%20%5B%5Econ-7%5D%20as%20a%20congestion%20controle%20mechanism%2C%20effectively%20pre-selecting%20a%20set%20of%20proposers%20and%20giving%20them%20a%20submission%20window%20to%20submit%20blocks.%20If%20they%20fail%20to%20submit%20within%20their%20WindowDuration%20then%20any%20other%20validator%20can%20issue%20the%20block.%0A%0ABelow%20is%20an%20excerpt%20of%20how%20Snowman%20vms%20%5B%5Econ-6%5D%20and%20the%20consensus%20engine%20work.%0A%0A%3E%20**Implementing%20the%20Snowman%20VM%20Block**%0A%3E%20From%20the%20perspective%20of%20the%20consensus%20engine%2C%20the%20state%20of%20the%20VM%20can%20be%20defined%20as%20a%20linear%20chain%20starting%20from%20the%20genesis%20block%20through%20to%20the%20last%20accepted%20block.%0A%3E%0A%3E%20Following%20the%20last%20accepted%20block%2C%20the%20consensus%20engine%20may%20have%20any%20number%20of%20different%20blocks%20that%20are%20processing.%20The%20configuration%20of%20the%20processing%20set%20can%20be%20defined%20as%20a%20tree%20with%20the%20last%20accepted%20block%20as%20the%20root.%0A%3E%0A%3E%20In%20practice%2C%20this%20looks%20like%20the%20following%3A%0A%3E%0A%3E%20%60%60%60text%0A%3E%20%20%20%20G%0A%3E%20%20%20%20%7C%0A%3E%20%20%20%20.%0A%3E%20%20%20%20.%0A%3E%20%20%20%20.%0A%3E%20%20%20%20%7C%0A%3E%20%20%20%20L%0A%3E%20%20%20%20%7C%0A%3E%20%20%20%20A%0A%3E%20%20%2F%20%20%20%5C%0A%3E%20B%20%20%20%20%20C%0A%3E%20%60%60%60%0A%0A%23%23%20Signing%20Mechanisms%0A%0A%23%23%23%20Consensus%20Signing%20Mechanism%0A%0AAvalanche%20is%20not%20prescriptive%20about%20addressing%20schemes%2C%20choosing%20to%20instead%20leave%20addressing%20up%20to%20each%20blockchain%20%5B%5Esig-1%5D.%0A%0AAvalanche%20uses%20Transport%20Layer%20Security%2C%20TLS%2C%20to%20protect%20node-to-node%20communications%20from%20eavesdroppers.%20TLS%20combines%20the%20practicality%20of%20public-key%20cryptography%20with%20the%20efficiency%20of%20symmetric-key%20cryptography.%0A%0A%23%23%23%20Inter-Subnet%20Message%20Signing%20Mechanism%0A%0AAvalanche%20Warp%20Messaging%20(AWM)%5B%5Eov-14%5D%20%5B%5Eov-15%5D%20enables%20Subnet%20Validators%20to%20collectively%20produce%20a%20BLS%20Multi-Signature%20that%20attests%20to%20the%20validity%20of%20an%20arbitrary%20message%20(e.g.%2C%20transfer%2C%20contract%20data%2C%20etc.)%20that%20can%20be%20verified%20by%20any%20other%20Subnet.%0A%0A%23%23%23%20Transaction%20Signing%20Mechanism%0A%0AThe%20addressing%20scheme%20of%20the%20X-Chain%20and%20the%20P-Chain%20relies%20on%20secp256k1.%20Avalanche%20follows%20a%20similar%20approach%20as%20Bitcoin%20and%20hashes%20the%20ECDSA%20public%20key.%20The%2033-byte%20compressed%20representation%20of%20the%20public%20key%20is%20hashed%20with%20sha256%20once.%20The%20result%20is%20then%20hashed%20with%20ripemd160%20to%20yield%20a%2020-byte%20address.%0A%0AThe%20Avalanche%20virtual%20machine%20uses%20elliptic%20curve%20cryptography%2C%20specifically%20secp256k1%2C%20for%20its%20signatures%20on%20the%20blockchain.%0A%0A%23%23%20Verification%20Walkthrough%0A%0A1.%20Transactions%20are%20gossiped%20via%20P2P%20mechanisms%20in%20coreth%0A%0A%60%60%60go%0A%2F%2F%20Block%20represents%20an%20entire%20block%20in%20the%20Ethereum%20blockchain.%0Atype%20Block%20struct%20%7B%0A%20header%20%20%20%20%20%20%20*Header%0A%20uncles%20%20%20%20%20%20%20%5B%5D*Header%0A%20transactions%20Transactions%0A%0A%20%2F%2F%20Coreth%20specific%20data%20structures%20to%20support%20atomic%20transactions%0A%20version%20uint32%0A%20extdata%20*%5B%5Dbyte%0A%0A%20%2F%2F%20caches%0A%20hash%20atomic.Value%0A%20size%20atomic.Value%0A%7D%0A%0A%2F%2F%20Header%20represents%20a%20block%20header%20in%20the%20Ethereum%20blockchain.%0Atype%20Header%20struct%20%7B%0A%20ParentHash%20%20common.Hash%20%20%20%20%60json%3A%22parentHash%22%20%20%20%20%20%20%20gencodec%3A%22required%22%60%0A%20UncleHash%20%20%20common.Hash%20%20%20%20%60json%3A%22sha3Uncles%22%20%20%20%20%20%20%20gencodec%3A%22required%22%60%0A%20Coinbase%20%20%20%20common.Address%20%60json%3A%22miner%22%20%20%20%20%20%20%20%20%20%20%20%20gencodec%3A%22required%22%60%0A%20Root%20%20%20%20%20%20%20%20common.Hash%20%20%20%20%60json%3A%22stateRoot%22%20%20%20%20%20%20%20%20gencodec%3A%22required%22%60%0A%20TxHash%20%20%20%20%20%20common.Hash%20%20%20%20%60json%3A%22transactionsRoot%22%20gencodec%3A%22required%22%60%0A%20ReceiptHash%20common.Hash%20%20%20%20%60json%3A%22receiptsRoot%22%20%20%20%20%20gencodec%3A%22required%22%60%0A%20Bloom%20%20%20%20%20%20%20Bloom%20%20%20%20%20%20%20%20%20%20%60json%3A%22logsBloom%22%20%20%20%20%20%20%20%20gencodec%3A%22required%22%60%0A%20Difficulty%20%20*big.Int%20%20%20%20%20%20%20%60json%3A%22difficulty%22%20%20%20%20%20%20%20gencodec%3A%22required%22%60%0A%20Number%20%20%20%20%20%20*big.Int%20%20%20%20%20%20%20%60json%3A%22number%22%20%20%20%20%20%20%20%20%20%20%20gencodec%3A%22required%22%60%0A%20GasLimit%20%20%20%20uint64%20%20%20%20%20%20%20%20%20%60json%3A%22gasLimit%22%20%20%20%20%20%20%20%20%20gencodec%3A%22required%22%60%0A%20GasUsed%20%20%20%20%20uint64%20%20%20%20%20%20%20%20%20%60json%3A%22gasUsed%22%20%20%20%20%20%20%20%20%20%20gencodec%3A%22required%22%60%0A%20Time%20%20%20%20%20%20%20%20uint64%20%20%20%20%20%20%20%20%20%60json%3A%22timestamp%22%20%20%20%20%20%20%20%20gencodec%3A%22required%22%60%0A%20Extra%20%20%20%20%20%20%20%5B%5Dbyte%20%20%20%20%20%20%20%20%20%60json%3A%22extraData%22%20%20%20%20%20%20%20%20gencodec%3A%22required%22%60%0A%20MixDigest%20%20%20common.Hash%20%20%20%20%60json%3A%22mixHash%22%60%0A%20Nonce%20%20%20%20%20%20%20BlockNonce%20%20%20%20%20%60json%3A%22nonce%22%60%0A%20ExtDataHash%20common.Hash%20%20%20%20%60json%3A%22extDataHash%22%20%20%20%20%20%20gencodec%3A%22required%22%60%0A%0A%20%2F%2F%20BaseFee%20was%20added%20by%20EIP-1559%20and%20is%20ignored%20in%20legacy%20headers.%0A%20BaseFee%20*big.Int%20%60json%3A%22baseFeePerGas%22%20rlp%3A%22optional%22%60%0A%0A%20%2F%2F%20ExtDataGasUsed%20was%20added%20by%20Apricot%20Phase%204%20and%20is%20ignored%20in%20legacy%0A%20%2F%2F%20headers.%0A%20%2F%2F%0A%20%2F%2F%20It%20is%20not%20a%20uint64%20like%20GasLimit%20or%20GasUsed%20because%20it%20is%20not%20possible%20to%0A%20%2F%2F%20correctly%20encode%20this%20field%20optionally%20with%20uint64.%0A%20ExtDataGasUsed%20*big.Int%20%60json%3A%22extDataGasUsed%22%20rlp%3A%22optional%22%60%0A%0A%20%2F%2F%20BlockGasCost%20was%20added%20by%20Apricot%20Phase%204%20and%20is%20ignored%20in%20legacy%0A%20%2F%2F%20headers.%0A%20BlockGasCost%20*big.Int%20%60json%3A%22blockGasCost%22%20rlp%3A%22optional%22%60%0A%7D%0A%0A%60%60%60%0A%0A2.%20The%20block%20is%20then%20wrapped%20into%20an%20%60innerBlock%60%20by%20%5Bsnowman%2B%2B%5D(https%3A%2F%2Fgithub.com%2Fava-labs%2Favalanchego%2Fblob%2Fmaster%2Fvms%2FREADME.mdx)%20and%20has%20the%20following%20interfaces%0A%0A%60%60%60go%0Atype%20Block%20interface%20%7B%0A%20ID()%20ids.ID%0A%20ParentID()%20ids.ID%0A%20Block()%20%5B%5Dbyte%0A%20Bytes()%20%5B%5Dbyte%0A%0A%20initialize(bytes%20%5B%5Dbyte)%20error%0A%7D%0A%0Atype%20SignedBlock%20interface%20%7B%0A%20Block%0A%0A%20PChainHeight()%20uint64%0A%20Timestamp()%20time.Time%0A%20Proposer()%20ids.NodeID%0A%0A%20Verify(shouldHaveProposer%20bool%2C%20chainID%20ids.ID)%20error%0A%7D%0A%0Atype%20statelessUnsignedBlock%20struct%20%7B%0A%20ParentID%20%20%20%20%20ids.ID%20%60serialize%3A%22true%22%60%0A%20Timestamp%20%20%20%20int64%20%20%60serialize%3A%22true%22%60%0A%20PChainHeight%20uint64%20%60serialize%3A%22true%22%60%0A%20Certificate%20%20%5B%5Dbyte%20%60serialize%3A%22true%22%60%0A%20Block%20%20%20%20%20%20%20%20%5B%5Dbyte%20%60serialize%3A%22true%22%60%0A%7D%0A%0Atype%20statelessBlock%20struct%20%7B%0A%20StatelessBlock%20statelessUnsignedBlock%20%60serialize%3A%22true%22%60%0A%20Signature%20%20%20%20%20%20%5B%5Dbyte%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%60serialize%3A%22true%22%60%0A%0A%20id%20%20%20%20%20%20%20%20ids.ID%0A%20timestamp%20time.Time%0A%20cert%20%20%20%20%20%20*x509.Certificate%0A%20proposer%20%20ids.NodeID%0A%20bytes%20%20%20%20%20%5B%5Dbyte%0A%7D%0A%60%60%60%0A%0AThe%20block%20is%20initialized%20using%20%5Bblock.Build%5D(https%3A%2F%2Fgithub.com%2Fava-labs%2Favalanchego%2Fblob%2Fmaster%2Fvms%2Fproposervm%2Fblock.go%23L231)%20which%20currently%20uses%20%60StakingCertLeaf%60%20not%20%60StakingBLSKey%60%0A%0A%60%60%60go%0A%20statelessChild%2C%20err%20%3D%20block.Build(%0A%20%20parentID%2C%0A%20%20newTimestamp%2C%0A%20%20pChainHeight%2C%0A%20%20p.vm.ctx.StakingCertLeaf%2C%0A%20%20innerBlock.Bytes()%2C%0A%20%20p.vm.ctx.ChainID%2C%0A%20%20p.vm.ctx.StakingLeafSigner%2C%0A%20)%0A%60%60%60%0A%0AThe%20%5BBuild%5D(https%3A%2F%2Fgithub.com%2Fava-labs%2Favalanchego%2Fblob%2Fmaster%2Fvms%2Fproposervm%2Fblock%2Fbuild.go%23L41)%20function%20takes%20the%20%60StakingCertLeaf%60%20as%20input%20for%20%60cert%20*x509.Certificate%60%0A%0A%60%60%60%0Afunc%20Build(%0A%20parentID%20ids.ID%2C%0A%20timestamp%20time.Time%2C%0A%20pChainHeight%20uint64%2C%0A%20cert%20*x509.Certificate%2C%0A%20blockBytes%20%5B%5Dbyte%2C%0A%20chainID%20ids.ID%2C%0A%20key%20crypto.Signer%2C%0A)%0A%60%60%60%0A%0ASignatures%20are%20verified%20using%20%5BVerify%5D(https%3A%2F%2Fgithub.com%2Fava-labs%2Favalanchego%2Fblob%2Fmaster%2Fvms%2Fproposervm%2Fblock%2Fblock.go%23L119)%20which%20checks%20the%20signature%20as%20follows%0A%0A%60%60%60go%0A%20return%20b.cert.CheckSignature(b.cert.SignatureAlgorithm%2C%20headerBytes%2C%20b.Signature)%0A%60%60%60%0A%0A%23%23%20Code%20Review%0A%0AFolllowing%20is%20a%20review%20of%20.%20Avalanche%20also%20has%20a%20%5Bcoreth%20codebase%5D(https%3A%2F%2Fgithub.com%2Fava-labs%2Fcoreth)%20which%20was%20inspired%20by%20%5Bgeth%5D(https%3A%2F%2Fgithub.com%2Fethereum%2Fgo-ethereum).%20Please%20see%20%5Bhere%5D(.%2Fethereum-1-0.mdx)%20for%20a%20code%20review%20of%20geth.%20Following%20is%20an%20excerpt%20from%20%5Bcoreth%20README.md%5D(https%3A%2F%2Fgithub.com%2Fava-labs%2Fcoreth%2Fblob%2Fmaster%2FREADME.mdx).%0A%0A%3E%20Coreth%20(from%20core%20Ethereum)%20is%20the%20Virtual%20Machine%20(VM)%20that%20defines%20the%20Contract%20Chain%20(C-Chain).%20This%20chain%20implements%20the%20Ethereum%20Virtual%20Machine%20and%20supports%20Solidity%20smart%20contracts%20as%20well%20as%20most%20other%20Ethereum%20client%20functionality.%0A%0A%23%23%23%20Signing%0A%0A-%20%5BAvalanche%20Signing%20Codebase%5D(https%3A%2F%2Fgithub.com%2Fava-labs%2Favalanchego%2Ftree%2Fmaster%2Futils%2Fcrypto)%0A%20%20-%20%5BgetStakingSigner%5D(https%3A%2F%2Fgithub.com%2Fava-labs%2Favalanchego%2Fblob%2Fmaster%2Fconfig%2Fconfig.go%23L688)%3A%20Configuration%20retrieving%20validators%20BLS%20key.%20(go)%0A%20%20-%20%5BSigner%20Interface%5D(https%3A%2F%2Fgithub.com%2Fava-labs%2Favalanchego%2Fblob%2Fmaster%2Fvms%2Fplatformvm%2Fsigner%2Fsigner.go)%3A%20returns%20the%20public%20BLS%20key%20if%20it%20exists.%20(go)%0A%20%20-%20%5Bbls%20signature%5D(https%3A%2F%2Fgithub.com%2Fava-labs%2Favalanchego%2Fblob%2Fmaster%2Futils%2Fcrypto%2Fbls%2Fsignature.go)%3A%20Includes%20functions%20%60SignatureToBytes%60%2C%20%60SignatureFromBytes%60%20and%20%60AggregateSignatures%60%20aggregates%20a%20non-zero%20number%20of%20signatures%20into%20a%20single%20aggregated%20signature.%0A%20%20-%20%5Bsecp256kr1%5D(https%3A%2F%2Fgithub.com%2Fava-labs%2Favalanchego%2Fblob%2Fmaster%2Futils%2Fcrypto%2Fsecp256k1r.go)%3A%20Avalanches%20implementation%20of%20the%20ECSDA%20secp256k1r%20curve%20(go)%0A%20%20-%20%5Btx.go%5D(https%3A%2F%2Fgithub.com%2Fava-labs%2Favalanchego%2Fblob%2Fmaster%2Fvms%2Fplatformvm%2Ftxs%2Ftx.go%23L38)%3A%20Includes%20function%20for%20signing%20transactions%20using%20a%20Secp256k1r%20private%20key.%0A%0A%23%23%23%20Consensus%0A%0A-%20%5BAvalanche%20ConsensusContext%20Codebase%5D(https%3A%2F%2Fgithub.com%2Fava-labs%2Favalanchego%2Fblob%2Fmaster%2Fsnow%2Fcontext.go%23L63)%3A%20Context%20is%20information%20about%20the%20current%20executio%20including%20%60NetworkID%60%20is%20the%20ID%20of%20the%20network%20this%20context%20exists%20within.%20%60ChainID%60%20is%20the%20ID%20of%20the%20chain%20this%20context%20exists%20within.%20%60NodeID%60%20is%20the%20ID%20of%20this%20node.%20(go)%0A-%20%5BAvalanche%20Consensus%20CodeBase%5D(https%3A%2F%2Fgithub.com%2Fava-labs%2Favalanchego%2Ftree%2Fmaster%2Fsnow%2Fconsensus)%3A%20Contains%20consenus%20engines%20snowball%2C%20snowman%2C%20snowstorm%20and%20avalanche%20(go)%0A%20%20-%20%5BAvalanche%20snow%20README.md%5D(https%3A%2F%2Fgithub.com%2Fava-labs%2Favalanchego%2Fblob%2Fmaster%2Fsnow%2FREADME.mdx)%3A%20Documentation%20of%20the%20folow%20of%20a%20Single%20Blockchain.%0A%20%20-%20%5Bconsensus.go%5D(https%3A%2F%2Fgithub.com%2Fava-labs%2Favalanchego%2Fblob%2Fmaster%2Fsnow%2Fconsensus%2Favalanche%2Fconsensus.go)%3A%20Consensus%20code%20(go).%20_Consensus%20represents%20a%20general%20avalanche%20instance%20that%20can%20be%20used%20directly%20to%20process%20a%20series%20of%20partially%20ordered%20elements._%0A%20%20-%20%5Bavalanche%20poll%5D(https%3A%2F%2Fgithub.com%2Fava-labs%2Favalanchego%2Ftree%2Fmaster%2Fsnow%2Fconsensus%2Favalanche%2Fpoll)%3A%20Avalanches%20Polling%20(validator%20voting)%20mechanism%20(go).%0A%20%20-%20%5Bsnowman%20consensus.go%5D(https%3A%2F%2Fgithub.com%2Fava-labs%2Favalanchego%2Fblob%2Fmaster%2Fsnow%2Fconsensus%2Fsnowman%2Fconsensus.go)%3A%20Snowman%20consenus%20code%20(go).%20_represents%20a%20general%20snowman%20instance%20that%20can%20be%20used%20directly%20to%20process%20a%20series%20of%20dependent%20operations._%0A%20%20-%20%5Bavalanche%20snowman%20poll%5D(https%3A%2F%2Fgithub.com%2Fava-labs%2Favalanchego%2Ftree%2Fmaster%2Fsnow%2Fconsensus%2Fsnowman%2Fpoll)%3A%20Snowman%20Polling%20(validator%20voting)%20mechanism%20(go).%0A%0A%23%23%23%20Cryptographic%20Primitives%0A%0A**general%20primitives**%0A%0A-%20%5Bbag%5D(https%3A%2F%2Fgithub.com%2Fava-labs%2Favalanchego%2Ftree%2Fmaster%2Futils%2Fbag)%3A%20Mulitset%20with%20the%20ability%20to%20set%20thresholds%20add%20elements%2C%20compare%20against%20other%20bags%2C%20filter%2C%20split%20and%20return%20all%20elements%20which%20have%20been%20added%20a%20number%20of%20times.%0A-%20%5Bbeacon%5D(https%3A%2F%2Fgithub.com%2Fava-labs%2Favalanchego%2Ftree%2Fmaster%2Futils%2Fbeacon)%3A%20Beacons%20are%20a%20structure%20contiaining%20the%20NodeId%20and%20IPPort.%0A-%20%5Bbloom%5D(https%3A%2F%2Fgithub.com%2Fava-labs%2Favalanchego%2Ftree%2Fmaster%2Futils%2Fbloom)%3A%20Avalanches%20implementation%20of%20BloomFilteres%0A-%20%5Bbufer%5D(https%3A%2F%2Fgithub.com%2Fava-labs%2Favalanchego%2Ftree%2Fmaster%2Futils%2Fbuffer)%3A%20Buffer%20with%20queuing%20mechanisms%20including%20an%20unbounded%20deque%20%5Bdouble-ended%20queue%5D(https%3A%2F%2Fen.wikipedia.org%2Fwiki%2FDouble-ended_queue).%20Not%20safe%20for%20concurrent%20access.%0A-%20%5Bcb58%5D(https%3A%2F%2Fgithub.com%2Fava-labs%2Favalanchego%2Ftree%2Fmaster%2Futils%2Fcb58)%3A%20%5BCB58%5D(https%3A%2F%2Fsupport.avax.network%2Fen%2Farticles%2F4587395-what-is-cb58)%20is%20a%20format%20used%20to%20represent%20keys%2C%20addresses%2C%20and%20other%20binary%20values%20in%20web%20wallets%20and%20APIs.%20CB58%20is%20the%20concatenation%20of%20the%20data%20bytes%20and%20a%20checksum.%20The%20checksum%20is%20created%20by%20taking%20the%20last%20four%20bytes%20of%20the%20SHA256%20hash%20of%20the%20data%20bytes.%0A-%20%5Bcompare%5D(https%3A%2F%2Fgithub.com%2Fava-labs%2Favalanchego%2Ftree%2Fmaster%2Futils%2Fcompare)%3A%20Compares%20slices%20and%20returns%20true%20iff%20the%20slices%20have%20the%20same%20elements%2C%20regardless%20of%20order.%0A-%20%5Bcompression%5D(https%3A%2F%2Fgithub.com%2Fava-labs%2Favalanchego%2Ftree%2Fmaster%2Futils%2Fcompression)%3A%20compresss%20and%20decompresses%20messages%20using%20gzip%20compression.%0A-%20%5Bconstants%5D(https%3A%2F%2Fgithub.com%2Fava-labs%2Favalanchego%2Ftree%2Fmaster%2Futils%2Fconstants)%3A%20Constants%20for%20avalanche%20including%20aliases%2C%20applications%2C%20network_ids%2C%20network%20constantns%20and%20vm_ids.%0A-%20%5Bcrypto%5D(https%3A%2F%2Fgithub.com%2Fava-labs%2Favalanchego%2Ftree%2Fmaster%2Futils%2Fcrypto)%0A%20%20-%20%5Bbls%5D(https%3A%2F%2Fgithub.com%2Fava-labs%2Favalanchego%2Ftree%2Fmaster%2Futils%2Fcrypto%2Fbls)%3A%20Provides%20the%20interface%20to%20the%20%5Bblst%5D(https%3A%2F%2Fgithub.com%2Fsupranational%2Fblst%2F)%20BLS12-381%20signature%20library.%0A%20%20-%20%5Bkeychain%5D(https%3A%2F%2Fgithub.com%2Fava-labs%2Favalanchego%2Ftree%2Fmaster%2Futils%2Fcrypto%2Fkeychain)%3A%20implements%20functions%20for%20a%20keychain%20to%20return%20its%20main%20address%20and%20to%20sign%20a%20hash.%0A%20%20-%20%5Bledger%5D(https%3A%2F%2Fgithub.com%2Fava-labs%2Favalanchego%2Ftree%2Fmaster%2Futils%2Fcrypto%2Fledger)%3A%20Ledger%20is%20a%20wrapper%20around%20the%20low-level%20Ledger%20Device%20interface%20that%20provides%20Avalanche-specific%20access.%0A%20%20-%20%5Bsecp256k1%5D(https%3A%2F%2Fgithub.com%2Fava-labs%2Favalanchego%2Ftree%2Fmaster%2Futils%2Fcrypto%2Fsecp256k1)%3A%20Avalanche%20implementation%20of%20%5Bsecp256k1%5D(https%3A%2F%2Farxiv.org%2Fpdf%2F1808.02988.pdf)%0A-%20%5Bdynamicip%5D(https%3A%2F%2Fgithub.com%2Fava-labs%2Favalanchego%2Ftree%2Fmaster%2Futils%2Fdynamicip)%3A%20Updates%20and%20resolves%20public%20IP's%20using%20%5Bifconfig's%5D(https%3A%2F%2Fen.wikipedia.org%2Fwiki%2FIfconfig)%20format.%0A-%20%5Bfilesystem%5D(https%3A%2F%2Fgithub.com%2Fava-labs%2Favalanchego%2Ftree%2Fmaster%2Futils%2Ffilesystem)%3A%20Reads%20and%20renames%20files.%0A-%20%5Bformatting%5D(https%3A%2F%2Fgithub.com%2Fava-labs%2Favalanchego%2Ftree%2Fmaster%2Futils%2Fformatting)%3A%20Formats%20addresses.%20Parse%20takes%20in%20an%20address%20string%20and%20splits%20returns%20the%20corresponding%20parts.%20This%20returns%20the%20chain%20ID%20alias%2C%20bech32%20HRP%2C%20address%20bytes%2C%20and%20an%20error%20if%20it%20occurs.%0A-%20%5Bhashing%5D(https%3A%2F%2Fgithub.com%2Fava-labs%2Favalanchego%2Ftree%2Fmaster%2Futils%2Fhashing)%3A%20see%20hash%20functions%20below.%0A-%20%5Bips%5D(https%3A%2F%2Fgithub.com%2Fava-labs%2Favalanchego%2Ftree%2Fmaster%2Futils%2Fips)%3A%20ip%20utlitilties%20including%20claim%20(A%20self%20contained%20proof%20that%20a%20peer%20is%20claiming%20ownership%20of%20an%20IPPort%20at%20a%20given%20time.)%20and%20lookup%20(Lookup%20attempts%20to%20resolve%20a%20hostname%20to%20a%20single%20IP.%20If%20multiple%20IPs%20are%20found.%0A-%20%5Bjson%5D(https%3A%2F%2Fgithub.com%2Fava-labs%2Favalanchego%2Ftree%2Fmaster%2Futils%2Fjson)%3B%20utilities%20for%20marshalling%20and%20unmarshalling%20json.%0A-%20%5Blinkedhashmap%5D(https%3A%2F%2Fgithub.com%2Fava-labs%2Favalanchego%2Ftree%2Fmaster%2Futils%2Flinkedhashmap)%3A%20is%20a%20hashmap%20that%20keeps%20track%20of%20the%20oldest%20pairing%20and%20the%20newest%20pairing.%20hashmap%20provides%20an%20O(1)%20mapping%20from%20a%20%5Bcomparable%5D(https%3A%2F%2Fgo.dev%2Fref%2Fspec%23Comparison_operators)%20key%20to%20any%20value.%0A-%20%5Bmath%5D(https%3A%2F%2Fgithub.com%2Fava-labs%2Favalanchego%2Ftree%2Fmaster%2Futils%2Fmath)%3A%20mathematic%20functions%0A-%20%5Bmetric%5D(https%3A%2F%2Fgithub.com%2Fava-labs%2Favalanchego%2Ftree%2Fmaster%2Futils%2Fmetric)%3A%20Provide%20metrics%20by%20integrating%20with%20%5BPrometheus%5D(https%3A%2F%2Fprometheus.io%2F).%0A-%20%5Bpassword%5D(https%3A%2F%2Fgithub.com%2Fava-labs%2Favalanchego%2Ftree%2Fmaster%2Futils%2Fpassword)%3A%20Implements%20password%20Hashing%20using%20%5BArgon2%5D(https%3A%2F%2Fpkg.go.dev%2Fgolang.org%2Fx%2Fcrypto%2Fargon2)%0A-%20%5Bperms%5D(https%3A%2F%2Fgithub.com%2Fava-labs%2Favalanchego%2Ftree%2Fmaster%2Futils%2Fperms)%3A%20provides%20the%20ability%20to%20modify%20file%20permissions.%0A-%20%5Bprofiler%5D(https%3A%2F%2Fgithub.com%2Fava-labs%2Favalanchego%2Ftree%2Fmaster%2Futils%2Fprofiler)%3A%20Profiler%20provides%20helper%20methods%20for%20measuring%20the%20current%20performance%20of%20processes%2F%0A-%20%5Bresource%5D(https%3A%2F%2Fgithub.com%2Fava-labs%2Favalanchego%2Ftree%2Fmaster%2Futils%2Fresource)%3A%20provides%20resource%20usage%20information%20including%20active%20cpu%20and%20disk%20usage.%0A-%20%5Brpc%5D(https%3A%2F%2Fgithub.com%2Fava-labs%2Favalanchego%2Ftree%2Fmaster%2Futils%2Frpc)%3A%20Manages%20requests%20for%20avalanche%20rpc%20endpoints.%0A-%20%5Bsampler%5D(https%3A%2F%2Fgithub.com%2Fava-labs%2Favalanchego%2Ftree%2Fmaster%2Futils%2Fsampler)%3A%20sample%20a%20specified%20valued%20based%20on%20a%20provided%20weighted%20distribution.%20Sampling%20is%20performed%20by%20executing%20a%20modified%20binary%20search%20over%20the%20provided%20elements.%20Rather%20than%20cutting%20the%20remaining%20dataset%20in%20half%2C%20the%20algorithm%20attempt%20to%20just%20in%20to%20where%20it%20think%20the%20value%20will%20be%20assuming%20a%20linear%20distribution%20of%20the%20element%20weights.%0A-%20%5Bset%5D(https%3A%2F%2Fgithub.com%2Fava-labs%2Favalanchego%2Ftree%2Fmaster%2Futils%2Fset)%3A%20Return%20a%20new%20set%20with%20initial%20capacity%20%5Bsize%5D.%20More%20or%20less%20than%20%5Bsize%5D%20elements%20can%20be%20added%20to%20this%20set.%20Using%20NewSet()%20rather%20than%20Set%5BT%5D%7B%7D%20is%20just%20an%20optimization%20that%20can%20be%20used%20if%20you%20know%20how%20many%20elements%20will%20be%20put%20in%20this%20set.%0A-%20%5Bstorage%5D(https%3A%2F%2Fgithub.com%2Fava-labs%2Favalanchego%2Ftree%2Fmaster%2Futils%2Fstorage)%3A%20File%20system%20storage%0A-%20%5Btimer%5D(https%3A%2F%2Fgithub.com%2Fava-labs%2Favalanchego%2Ftree%2Fmaster%2Futils%2Ftimer)%3A%20Timer%20wraps%20a%20timer%20object.%20This%20allows%20a%20user%20to%20specify%20a%20handler.%20Once%20specifying%20the%20handler%2C%20the%20dispatch%20thread%20can%20be%20called.%20The%20dispatcher%20will%20only%20return%20after%20calling%20Stop.%20SetTimeoutIn%20will%20result%20in%20calling%20the%20handler%20in%20the%20specified%20amount%20of%20time.%0A-%20%5Bulimit%5D(https%3A%2F%2Fgithub.com%2Fava-labs%2Favalanchego%2Ftree%2Fmaster%2Futils%2Fulimit)%3A%20Manages%20resource%20limits.%0A-%20%5Bunits%5D(https%3A%2F%2Fgithub.com%2Fava-labs%2Favalanchego%2Ftree%2Fmaster%2Futils%2Funits)%3A%20Unit%20Constants%20(e.g.%20%60Avax%20%20%20%20%20%20uint64%20%3D%201000%20*%20MilliAvax%60%20)%0A-%20%5Bwindow%5D(https%3A%2F%2Fgithub.com%2Fava-labs%2Favalanchego%2Ftree%2Fmaster%2Futils%2Fwindow)%3A%20an%20interface%20which%20represents%20a%20sliding%20window%20of%20elements.%0A-%20%5Bwrappers%5D(https%3A%2F%2Fgithub.com%2Fava-labs%2Favalanchego%2Ftree%2Fmaster%2Futils%2Fwrappers)%3A%20Wrappers%20for%20packing%20and%20unpacking%20data.%0A%0A**hash%20functions**%0A%0A-%20%5Bhashing%5D(https%3A%2F%2Fgithub.com%2Fava-labs%2Favalanchego%2Ftree%2Fmaster%2Futils%2Fhashing)%0A%20%20-%20%5Bsha256%5D(https%3A%2F%2Fgithub.com%2Fava-labs%2Favalanchego%2Fblob%2Fmaster%2Futils%2Fhashing%2Fhashing.go%23L7)%3A%20Implements%20%5BSHA256%5D(https%3A%2F%2Fen.wikipedia.org%2Fwiki%2FSHA-2)%20hashing.%0A%20%20-%20%5Bripmed160%5D(https%3A%2F%2Fgithub.com%2Fava-labs%2Favalanchego%2Fblob%2Fmaster%2Futils%2Fhashing%2Fhashing.go%23LL11C2-L11C2)%3A%20Implements%20%5BRIPEMD%5D(https%3A%2F%2Fen.wikipedia.org%2Fwiki%2FRIPEMD)%20(RIPE%20Message%20Digest)%2C%20a%20family%20of%20cryptographic%20hash%20functions%20developed%20in%201992%20(the%20original%20RIPEMD)%20and%201996%20(other%20variants).%20There%20are%20five%20functions%20in%20the%20family%3A%20RIPEMD%2C%20RIPEMD-128%2C%20RIPEMD-160%2C%20RIPEMD-256%2C%20and%20RIPEMD-320%2C%20of%20which%20RIPEMD-160%20is%20the%20most%20common.%0A%20%20-%20%5Bring%5D(https%3A%2F%2Fgithub.com%2Fava-labs%2Favalanchego%2Fblob%2Fmaster%2Futils%2Fhashing%2Fconsistent%2Fring.go)%3A%20Ring%20is%20an%20interface%20for%20a%20consistent%20%5Bhashing%20ring%5D(https%3A%2F%2Fen.wikipedia.org%2Fwiki%2FConsistent_hashing).%0A-%20%5BArgon2%20password%20hashing%5D(https%3A%2F%2Fgithub.com%2Fava-labs%2Favalanchego%2Ftree%2Fmaster%2Futils%2Fpassword)%3A%20Implements%20password%20Hashing%20using%20%5BArgon2%5D(https%3A%2F%2Fpkg.go.dev%2Fgolang.org%2Fx%2Fcrypto%2Fargon2)%0A%0A**encryption**%0A%0A**random%20number%20generators**%0A%0A**serilization**%0A%0A**virtual%20machines**%0A%0A-%20%5Bvms%5D(https%3A%2F%2Fgithub.com%2Fava-labs%2Favalanchego%2Ftree%2Fmaster%2Fvms)%3A%20Avalanche%20Virtual%20Machines%0A%0A%23%23%20References%0A%0A**Consensus**%0A%0A-%20%5BScalable%20and%20Probabilistic%20Leaderless%20BFT%20Consensus%20through%20Metastability%5D(https%3A%2F%2Fassets.website-files.com%2F5d80307810123f5ffbb34d6e%2F6009805681b416f34dcae012_Avalanche%2520Consensus%2520Whitepaper.pdf)%3A%20This%20paper%20introduces%20a%20family%20of%20leaderless%20Byzantine%20fault%20tolerance%20protocols%2C%20built%20around%20a%20metastable%20mechanism%20via%20network%20subsampling.%0A-%20%5BAvalanche%20Blockchain%20Consensus%20Documentation%5D(https%3A%2F%2Fdocs.avax.network%2Foverview%2Fgetting-started%2Favalanche-consensus)%3A%20Overive%20of%20the%20Snowball%20Algorithm%20used%20for%20Avalanche%20Consenus%20and%20it's%20use%20of%20Directed%20Acyclic%20Graphs%20(DAGs).%0A-%20%5BAvalanche%20Subnet%20Overview%20Documentation%5D(https%3A%2F%2Fdocs.avax.network%2Fsubnets)%3A%20Overview%20of%20Avalanches%20Subnets%20and%20their%20use%20of%20Avalanche's%203%20built-in%20blockchains%3A%20Platform%20Chain%20(P-Chain)%2C%20Contract%20Chain%20(C-Chain)%20and%20Exchange%20Chain%20(X-Chain).%0A-%20%5BAvalanche%20Get%20Current%20Validator%20Documentation%5D(https%3A%2F%2Fdocs.avax.network%2Fapis%2Favalanchego%2Fapis%2Fp-chain%23platformgetcurrentvalidators)%3A%20List%20the%20current%20validators%20of%20the%20given%20Subnet.%20Signer%20is%20the%20node's%20BLS%20public%20key%20and%20proof%20of%20possession.%0A-%20%5BAvalanche%20Get%20Node%20Id%20Documentation%5D(https%3A%2F%2Fdocs.avax.network%2Fapis%2Favalanchego%2Fapis%2Finfo%23infogetnodeid)%3A%20Get%20the%20ID%20of%20this%20node.%20nodePOP%20is%20this%20node's%20BLS%20key%20and%20proof%20of%20possession.%0A-%20%5BAvalanche%20Platform%20Transaction%20Format%20Documentation%5D(https%3A%2F%2Fdocs.avax.network%2Fspecs%2Fplatform-transaction-serialization)%3A%20Documenation%20on%20how%20transactions%20are%20serialized%20and%20the%20use%20of%20the%20primitive%20serialization%20format%20for%20packing%20and%20secp256k1%20for%20cryptographic%20user%20identification.%0A%0A-%20%5BAvalanche%20Network%20Status%20Dashboard%5D(https%3A%2F%2Fstats.avax.network%2Fdashboard%2Fnetwork-status%2F)%3A%0A%0A**Signing**%0A%0A-%20%5BAvalanche%20Cryptographic%20Primitive%20Documentation%5D(https%3A%2F%2Fdocs.avax.network%2Fspecs%2Fcryptographic-primitives)%3A%20Overview%20of%20Avalanches%20cryptographic%20primitives%20focusing%20on%20it's%20use%20of%20TLS%20AND%20Secp256k1.%0A-%20Avalanche%20BLS%20Support%20Release%20Documentation%0A%20%20-%20%5BRelease%20v1.8.6%3A%20Apricot%20Phase%206%5D(https%3A%2F%2Fgithub.com%2Fava-labs%2Favalanchego%2Freleases%2Ftag%2Fv1.8.6)%3A%20Adds%20BLS%20key%20file%20and%20exposes%20blos%20proof%20of%20posession%0A%20%20-%20%5BRelease%20v1.9.1%3A%20Banff.1%5D(https%3A%2F%2Fgithub.com%2Fava-labs%2Favalanchego%2Freleases%2Ftag%2Fv1.9.1)%3A%20Added%20BLS%20signer%20to%20the%20snow.Context%0A%20%20-%20%5BRelease%20v1.9.2%3A%20Banff.2%20-%20Additional%20BLS%20Support%5D(https%3A%2F%2Fgithub.com%2Fava-labs%2Favalanchego%2Freleases%2Ftag%2Fv1.9.2)%3A%20Added%20bls%20proof%20of%20possession%20to%20%60platform.getCurrentValidators%60%20and%20%60platform.getPendingValidators%60.%20Added%20bls%20public%20key%20to%20in-memory%20staker%20objects.%20Improved%20memory%20clearing%20of%20bls%20secret%20keys.%0A-%20Avalanch%20BLS%20Relevant%20Commits%0A%20%20-%20%5BAdd%20BLS%20key%20to%20AddPermissionlessValidatorTx%20for%20the%20Primary%20Network%20(%231987)%5D(https%3A%2F%2Fgithub.com%2Fava-labs%2Favalanchego%2Fcommit%2Ffb6bb81f499b4b8c0f903c8745f5b7fbd8d97668)%0A%20%20-%20%5BAdd%20BLS%20signer%20to%20snow.Context%20(%232069)%5D(https%3A%2F%2Fgithub.com%2Fava-labs%2Favalanchego%2Fcommit%2F5176495568e512b2ebbfb1102dfd59541ccaa578)%0A%0A**Staking**%0A%0A-%20%5BAvalanche%20Staking%20Documentation%5D(https%3A%2F%2Fdocs.avax.network%2Fnodes%2Fvalidate%2Fstaking%23staking-parameters-on-avalanche)%3A%20Staking%20Parameters%20on%20Avalanche%0A%0A**Additional**%0A%0A-%20%5BUTXO%20Codebase%5D(https%3A%2F%2Fgithub.com%2Fava-labs%2Favalanchego%2Fblob%2Fmaster%2Fvms%2Fplatformvm%2Futxo%2Fhandler.go)%3A%20Unsigned%20Transaction%20Output%20Handling.%0A-%20%5Bxsvm%5D(https%3A%2F%2Fgithub.com%2Fava-labs%2Fxsvm)%3A%20Cross%20Subnet%20Asset%20Transfers%20README%20Overview%0A%0A%23%23%20Footnotes%0A%0AOverview%0A%0A%5B%5Eov-1%5D%3A%20%5BAvalanche%20introductory%20documentation%5D(https%3A%2F%2Fdocs.avax.network%2Foverview%2Fgetting-started%2Favalanche-platform)%3A%20Avalanche%20is%20a%20heterogeneous%20network%20of%20blockchains%20allowing%20separate%20chains%20to%20be%20created%20for%20different%20applications.%0A%0A%5B%5Eov-2%5D%3A%20%5BSnowman%20VM%5D(https%3A%2F%2Fgithub.com%2Fava-labs%2Favalanchego%2Fblob%2Fmaster%2Fvms%2FREADME.mdx)%3A%20To%20the%20consensus%20engine%2C%20the%20Snowman%20VM%20is%20a%20black%20box%20that%20handles%20all%20block%20building%2C%20parsing%2C%20and%20storage%20and%20provides%20a%20simple%20block%20interface%20for%20the%20consensus%20engine%20to%20call%20as%20it%20decides%20blocks.%0A%0A%5B%5Eov-3%5D%3A%20%5BAvalanche%20explorer%5D(https%3A%2F%2Fsubnets.avax.network%2F)%3A%20Block%20Explorere%20showing%20subnets%2C%20totoal%20blockchains%2C%20total%20validators%20and%20totals%20stake%20amount.%0A%0A%5B%5Eov-4%5D%3A%20%5BSnowman%2B%2B%5D(https%3A%2F%2Fgithub.com%2Fava-labs%2Favalanchego%2Fblob%2Fmaster%2Fvms%2Fproposervm%2FREADME.mdx)%3A%20a%20congestion%20control%20mechanism%20available%20for%20snowman%20VMs.%0A%0A%5B%5Eov-5%5D%3A%20%5Bblock%20verify%20function%5D(https%3A%2F%2Fgithub.com%2Fava-labs%2Favalanchego%2Fblob%2Fmaster%2Fvms%2Fproposervm%2Fblock%2Fblock.go%23L119)%3A%20statelessBlock%20Verify%20function%20in%20proposervm.%0A%0A%5B%5Eov-6%5D%3A%20%5Bblock%20structure%5D(https%3A%2F%2Fgithub.com%2Fava-labs%2Favalanchego%2Fblob%2Fmaster%2Fvms%2Fproposervm%2Fblock%2Fblock.go%23L51)%3A%20statelessBlock%20structure%20in%20proposervm.%0A%0A%5B%5Eov-7%5D%3A%20%5BNewCertAndKeyBytes%5D(https%3A%2F%2Fgithub.com%2Fava-labs%2Favalanchego%2Fblob%2Fmaster%2Fstaking%2Ftls.go%23L120)%3A%20Creates%20a%20new%20staking%20private%20key%20%2F%20staking%20certificate%20pair.%20Returns%20the%20PEM%20byte%20representations%20of%20both.%0A%0AAvalanche%20BLS%20Support%20Release%20Documentation%0A%0A%5B%5Eov-8%5D%3A%20%5Brelease%20notes%20on%20GitHub%5D(https%3A%2F%2Fgithub.com%2Fava-labs%2Favalanchego%2Freleases%2Ftag%2Fv1.9.2)%20and%20%5Bcode%20commit%20search%20result%5D(https%3A%2F%2Fgithub.com%2Fava-labs%2Favalanchego%2Fsearch%3Fq%3Dbls%26type%3Dcommits)%0A%0A%5B%5Eov-9%5D%3A%20%5BRelease%20v1.8.6%3A%20Apricot%20Phase%206%5D(https%3A%2F%2Fgithub.com%2Fava-labs%2Favalanchego%2Freleases%2Ftag%2Fv1.8.6)%3A%20Adds%20BLS%20key%20file%20and%20exposes%20blos%20proof%20of%20posession%0A%0A%5B%5Eov-10%5D%3A%20%5BRelease%20v1.9.1%3A%20Banff.1%5D(https%3A%2F%2Fgithub.com%2Fava-labs%2Favalanchego%2Freleases%2Ftag%2Fv1.9.1)%3A%20Added%20BLS%20signer%20to%20the%20snow.Context%0A%0A%5B%5Eov-11%5D%3A%20%5BRelease%20v1.9.2%3A%20Banff.2%20-%20Additional%20BLS%20Support%5D(https%3A%2F%2Fgithub.com%2Fava-labs%2Favalanchego%2Freleases%2Ftag%2Fv1.9.2)%3A%20Added%20bls%20proof%20of%20possession%20to%20%60platform.getCurrentValidators%60%20and%20%60platform.getPendingValidators%60.%20Added%20bls%20public%20key%20to%20in-memory%20staker%20objects.%20Improved%20memory%20clearing%20of%20bls%20secret%20keys.%0A%0AAvalanche%20BLS%20Relevant%20Commits%0A%0A%5B%5Eov-12%5D%3A%20%5BAdd%20BLS%20key%20to%20AddPermissionlessValidatorTx%20for%20the%20Primary%20Network%20(%231987)%5D(https%3A%2F%2Fgithub.com%2Fava-labs%2Favalanchego%2Fcommit%2Ffb6bb81f499b4b8c0f903c8745f5b7fbd8d97668)%0A%0A%5B%5Eov-13%5D%3A%20%5BAdd%20BLS%20signer%20to%20snow.Context%20(%232069)%5D(https%3A%2F%2Fgithub.com%2Fava-labs%2Favalanchego%2Fcommit%2F5176495568e512b2ebbfb1102dfd59541ccaa578)%0A%0AWarp%20Messaging%0A%0A%5B%5Eov-14%5D%3A%20%5BAvalanche%20Warp%20Messaging%20(AWM)%5D(https%3A%2F%2Fmedium.com%2Favalancheavax%2Favalanche-warp-messaging-awm-launches-with-the-first-native-subnet-to-subnet-message-on-avalanche-c0ceec32144a)%3A%20AWM%20enables%20Subnet%20Validators%20to%20collectively%20produce%20a%20BLS%20Multi-Signature%20that%20attests%20to%20the%20validity%20of%20an%20arbitrary%20message%20(e.g.%2C%20transfer%2C%20contract%20data%2C%20etc.)%20that%20can%20be%20verified%20by%20any%20other%20Subnet.%0A%0A%5B%5Eov-15%5D%3A%20%5Bavalanchego%20warp%20codebase%5D(https%3A%2F%2Fgithub.com%2Fava-labs%2Favalanchego%2Ftree%2Fmaster%2Fvms%2Fplatformvm%2Fwarp)%3A%20Codebase%20supporting%20bls%20signing%20of%20inter-subnet%20messages.%0A%0ARSA%20Support%0A%0A%5B%5Eov-16%5D%3A%20%5BEIP-198%5D(https%3A%2F%2Fgithub.com%2Fethereum%2FEIPs%2Fblob%2Ff2db669da93ca4ce1605866e147bfa4f56303fc6%2FEIPS%2Feip-198.mdx)%3A%20Big%20integer%20modular%20exponentiation.%20Pre-compile%20for%20Ethereum%20which%20allows%20for%20efficient%20RSA%20verification%20inside%20of%20the%20EVM%2C%20as%20well%20as%20other%20forms%20of%20number%20theory-based%20cryptography.%0A%0A%5B%5Eov-17%5D%3A%20%5BSolRsaVerify%5D(https%3A%2F%2Fgithub.com%2Fadria0%2FSolRsaVerify)%3A%20Solidity%20Library%20which%20allows%20verification%20of%20RSA%20Sha256%20Pkcs1.5%20Signatures%0A%0A%5B%5Eov-18%5D%3A%20%5BCortina%3A%20X-Chain%20Linearization%5D(https%3A%2F%2Fmedium.com%2Favalancheavax%2Fcortina-x-chain-linearization-a1d9305553f6)%3A%20This%20upgrade%20linearizes%20the%20X-chain%2C%20introduces%20delegation%20batching%20to%20the%20P-chain%2C%20and%20increases%20the%20maximum%20block%20size%20on%20the%20C-chain.%20(Release%20notes%20are%20%5Bhere%5D(https%3A%2F%2Fgithub.com%2Fava-labs%2Favalanchego%2Freleases)%20and%20changelog%20is%20%5Bhere%5D(https%3A%2F%2Fgithub.com%2Fava-labs%2Favalanchego%2Fcompare%2Fv1.9.16...v1.10.0))%0A%0Aconsensus%0A%0A%5B%5Econ-1%5D%3A%20%5BAvalanche%20Platform%5D(https%3A%2F%2Fdocs.avax.network%2Foverview%2Fgetting-started%2Favalanche-platform)%3A%20Avalanche%20is%20a%20heterogeneous%20network%20of%20blockchains.%20The%20Primary%20Network%20is%20a%20special%20Subnet%20that%20contains%20all%20validators%20(including%20validators%20of%20any%20custom%20Subnets).%0A%0A%5B%5Econ-2%5D%3A%20%5BAvalanche%20Consensus%20Whitepaper%5D(https%3A%2F%2Fassets.website-files.com%2F5d80307810123f5ffbb34d6e%2F6009805681b416f34dcae012_Avalanche%2520Consensus%2520Whitepaper.pdf)%3A%20Scalable%20and%20Probabilistic%20Leaderless%20BFT%20Consensus%20through%20Metastability.%20This%20paper%20introduces%20a%20family%20of%20leaderless%20Byzantine%20fault%20tolerance%20protocols%2C%20built%20around%20a%20metastable%20mechanism%20via%20network%20subsampling.%0A%0A%5B%5Econ-3%5D%3A%20%5BAvalanche%20Docs%3A%20Consensus%5D(https%3A%2F%2Fdocs.avax.network%2Foverview%2Fgetting-started%2Favalanche-consensus)%3A%20a%20consensus%20protocol%20that%20is%20scalable%2C%20robust%2C%20and%20decentralized.%20It%20has%20low%20latency%20and%20high%20throughput.%20It%20is%20energy%20efficient%20and%20does%20not%20require%20special%20computer%20hardware.%0A%0A%5B%5Econ-4%5D%3A%20%5BSnow%20README.md%5D(https%3A%2F%2Fgithub.com%2Fava-labs%2Favalanchego%2Fblob%2Fmaster%2Fsnow%2FREADME.mdx)%3A%20Each%20blockchain%20on%20Avalanche%20has%20several%20components%3A%20the%20virtual%20machine%2C%20database%2C%20consensus%20engine%2C%20sender%2C%20and%20handler.%20These%20components%20help%20the%20chain%20run%20smoothly.%20Blockchains%20also%20interact%20with%20the%20P2P%20layer%20and%20the%20chain%20router%20to%20send%20and%20receive%20messages.%0A%0A%5B%5Econ-5%5D%3A%20%5BCoreth%20and%20the%20C-Chain%5D(https%3A%2F%2Fgithub.com%2Fava-labs%2Fcoreth%2Ftree%2Fmaster%23readme)%3A%20Coreth%20is%20a%20dependency%20of%20AvalancheGo%20which%20is%20used%20to%20implement%20the%20EVM%20based%20Virtual%20Machine%20for%20the%20Avalanche%20C-Chain.%0A%0A%5B%5Econ-6%5D%3A%20%5BSnowman%20VM's%5D(https%3A%2F%2Fgithub.com%2Fava-labs%2Favalanchego%2Fblob%2Fmaster%2Fvms%2FREADME.mdx)%3A%20To%20the%20consensus%20engine%2C%20the%20Snowman%20VM%20is%20a%20black%20box%20that%20handles%20all%20block%20building%2C%20parsing%2C%20and%20storage%20and%20provides%20a%20simple%20block%20interface%20for%20the%20consensus%20engine%20to%20call%20as%20it%20decides%20blocks.%0A%0A%5B%5Econ-7%5D%3A%20%5BSnowman%2B%2B%3A%20congestion%20control%20for%20Snowman%20VMs%5D(https%3A%2F%2Fgithub.com%2Fava-labs%2Favalanchego%2Fblob%2Fmaster%2Fvms%2Fproposervm%2FREADME.mdx)%3A%20Snowman%2B%2B%20introduces%20a%20soft%20proposer%20mechanism%20which%20attempts%20to%20select%20a%20single%20proposer%20with%20the%20power%20to%20issue%20a%20block%2C%20but%20opens%20up%20block%20production%20to%20every%20validator%20if%20sufficient%20time%20has%20passed%20without%20blocks%20being%20generated.%0A%0Asigning%0A%0A%5B%5Esig-1%5D%3A%20%5BAvalanche%20Cryptographic%20Primitive%20Documentation%5D(https%3A%2F%2Fdocs.avax.network%2Fspecs%2Fcryptographic-primitives)%3A%20Overview%20of%20Avalanches%20cryptographic%20primitives%20focusing%20on%20it's%20use%20of%20TLS%20AND%20Secp256k1.%0A",lastUpdatedAt:1753129136e3},{lazy:()=>o2(()=>import("./binance-Cu72eHLR.js"),[]),path:"/research/chains/binance",type:"mdx",filePath:"research/chains/binance.mdx",content:"%23%20Binance%20Smart%20Chain%0A%0A-%20date%3A%202023-02-04%0A-%20last%20updated%3A%202023-02-04%0A%0A%23%23%20Overview%0A%0ABinanace%20Smart%20Chain%20(BSC)%20has%20similar%20signature%20schemes%20to%20Polygon%20but%20with%20a%20much%20smaller%20set%20of%20validators%20and%20some%20degree%20of%20random%20(yet%20predictable%20and%20deterministic)%20perturbation%20to%20the%20active%20validator%20set.%0A%0AThe%20consensus%20protocol%20is%20based%20on%20Parlia%3Csup%3E%5B19%5D(%23f19)%3C%2Fsup%3E%2C%20a%20variation%20that%20adds%20staking%2C%20validators%2C%20and%20elections%20to%20the%20proof-of-authority%20consensus%20protocol%20Clique%2C%20initially%20proposed%20in%20the%20Ethereum%20community.%20The%20protocol%20uses%2021%20validators%20for%20producing%20and%20signing%20blocks%2C%20with%2019%20of%20them%20picked%20from%20stakers%20with%20top%20voting%20power%20and%202%20randomly%20chosen%20every%20200%20blocks%20%3Csup%3E%5B20%5D(%23f20)%3C%2Fsup%3E.%20Blocks%20are%20signed%20using%20ECDSA%20on%20secp256k1%20curves%2C%20and%20block%20headers%20can%20be%20verified%20following%20the%20standard%20signature%20verification%20process%3Csup%3E%5B21%5D(%23f21)%3C%2Fsup%3E.%0A%0A%23%23%20Consensus%20Mechanism%0A%0AFollowing%20is%20an%20excerpt%20from%20%5BBinance%20Consensus%20Engine%20documentation%5D(https%3A%2F%2Fgithub.com%2Fbnb-chain%2Fbnb-chain.github.io%2Fblob%2Fmaster%2Fdocs%2Flearn%2Fconsensus.mdx)%0A%0A%3E%20Although%20Proof-of-Work%20(PoW)%20has%20been%20recognized%20as%20a%20practical%20mechanism%20to%20implement%20a%20decentralized%20network%2C%20it%20is%20not%20friendly%20to%20the%20environment%20and%20also%20requires%20a%20large%20size%20of%20participants%20to%20maintain%20the%20security.%0A%3E%0A%3E%20Ethereum%20and%20some%20other%20blockchain%20networks%2C%20such%20as%20%5BMATIC%20Bor%5D(https%3A%2F%2Fgithub.com%2Fmaticnetwork%2Fbor)%2C%20%5BTOMOChain%5D(https%3A%2F%2Ftomochain.com%2F)%2C%20%5BGoChain%5D(https%3A%2F%2Fgochain.io%2F)%2C%20%5BxDAI%5D(https%3A%2F%2Fxdai.io%2F)%2C%20do%20use%20%5BProof-of-Authority(PoA)%5D(https%3A%2F%2Fen.wikipedia.org%2Fwiki%2FProof_of_authority)%20or%20its%20variants%20in%20different%20scenarios%2C%20including%20both%20testnet%20and%20mainnet.%20PoA%20provides%20some%20defense%20to%2051%25%20attack%2C%20with%20improved%20efficiency%20and%20tolerance%20to%20certain%20levels%20of%20Byzantine%20players%20(malicious%20or%20hacked).%20It%20serves%20as%20an%20easy%20choice%20to%20pick%20as%20the%20fundamentals.%0A%3E%0A%3E%20Meanwhile%2C%20the%20PoA%20protocol%20is%20most%20criticized%20for%20being%20not%20as%20decentralized%20as%20PoW%2C%20as%20the%20validators%2C%20i.e.%20the%20nodes%20that%20take%20turns%20to%20produce%20blocks%2C%20have%20all%20the%20authorities%20and%20are%20prone%20to%20corruption%20and%20security%20attacks.%20Other%20blockchains%2C%20such%20as%20EOS%20and%20Lisk%20both%2C%20introduce%20different%20types%20of%20%5BDelegated%20Proof%20of%20Stake%20(DPoS)%5D(https%3A%2F%2Fen.bitcoinwiki.org%2Fwiki%2FDPoS)%20to%20allow%20the%20token%20holders%20to%20vote%20and%20elect%20the%20validator%20set.%20It%20increases%20the%20decentralization%20and%20favors%20community%20governance.%0A%3E%0A%3E%20BSC%20here%20proposes%20to%20combine%20DPoS%20and%20PoA%20for%20consensus%2C%20so%20that%3A%0A%3E%0A%3E%201.%20Blocks%20are%20produced%20by%20a%20limited%20set%20of%20validators%0A%3E%202.%20Validators%20take%20turns%20to%20produce%20blocks%20in%20a%20PoA%20manner%2C%20similar%20to%20%5BEthereum's%20Clique%5D(https%3A%2F%2Feips.ethereum.org%2FEIPS%2Feip-225)%20consensus%20design%0A%3E%203.%20Validator%20set%20are%20elected%20in%20and%20out%20based%20on%20a%20staking%20based%20governance%0A%3E%0A%3E%20The%20consensus%20protocol%20of%20BSC%20fulfills%20the%20following%20goals%3A%0A%3E%0A%3E%201.%20Short%20Blocking%20time%2C%203%20seconds%20on%20mainnet.%0A%3E%202.%20It%20requires%20limited%20time%20to%20confirm%20the%20finality%20of%20transactions%2C%20around%2045s%20for%20mainnet.%0A%3E%203.%20There%20is%20no%20inflation%20of%20native%20token%3A%20BNB%2C%20the%20block%20reward%20is%20collected%20from%20transaction%20fees%2C%20and%20it%20will%20be%20paid%20in%20BNB.%0A%3E%204.%20It%20is%20100%25%20compatible%20with%20Ethereum%20system%20.%0A%3E%205.%20It%20allows%20modern%20proof-of-stake%20blockchain%20network%20governance.%0A%0A%23%23%20Signing%20Mechanism%0A%0ABSC%20uses%20the%20same%20signing%20mechanism%20as%20Ethereum%201.0.%0A%0ATransactions%20are%20signed%20using%20recoverable%20ECDSA%20signatures.%20This%20method%20utilises%20the%20SECP-256k1%20curve.%20(see%20the%20%5BEthereum%20Yellow%20Paper%5D(https%3A%2F%2Fethereum.github.io%2Fyellowpaper%2Fpaper.pdf)%20Appendix%20F.%20Signing%20Transactions).%20go-ethereum%20utilizes%20the%20%5Bsecp256k1%5D(https%3A%2F%2Fgithub.com%2Fbnb-chain%2Fbsc%2Ftree%2Fmaster%2Fcrypto%2Fsecp256k1)%20package%20which%20wraps%20the%20bitcoin%20secp256k1%20C%20library.%20Signing%20is%20handled%20by%20the%20%5Bsigner%5D(https%3A%2F%2Fgithub.com%2Fbnb-chain%2Fbsc%2Ftree%2Fmaster%2Fsigner)%20receives%20a%20request%20and%20produces%20a%20signature.%20Note%2C%20the%20produced%20signature%20conforms%20to%20the%20secp256k1%20curve%20R%2C%20S%20and%20V%20values%2C%20where%20the%20V%20value%20will%20be%2027%20or%2028%20for%20legacy%20reasons%2C%20if%20legacyV%3D%3Dtrue.%0A%0A**Signing**%0A%0A-%20%5BSignature%20Documentation%5D(https%3A%2F%2Fdocs.bnbchain.org%2Fdocs%2Fbeaconchain%2Flearn%2Fsignature%2F)%3A%20Binance%20overview%20of%20how%20transactions%20are%20signed%20using%20ECDSA%20curve%20Secp256k1.%0A-%20%5Bsecp256k1%20codebase%5D(https%3A%2F%2Fgithub.com%2Fethereum%2Fgo-ethereum%2Ftree%2Fmaster%2Fcrypto%2Fsecp256k1)%3A%20Binance%20secp256k1%20crytpographic%20library%20(go)%0A-%20%5Bsecp256k1%20Public%20Key%5D(https%3A%2F%2Fgithub.com%2Fbnb-chain%2Fbsc%2Fblob%2F03ff2992ab4674c1df8f568ee9a31596f3503c26%2Fcrypto%2Fsignature_cgo.go%23L32)%3A%20Binance%20codebase(go)%20recovering%20the%20uncompressed%20secp256k1%20key%20that%20created%20a%20given%20signature.%0A%0A%23%23%20Code%20Review%0A%0AThe%20Binance%20Smart%20chain%20is%20cloned%20from%20%5BEthereum%201.0%5D(.%2Fethereum-1-0.mdx)%20and%20thus%20the%20majority%20of%20code%20incuding%20primitives%2C%20signing%20are%20similar.%20The%20key%20addtions%20are%0A%0A-%20%5BConsensus%20-%20Parlia%5D(https%3A%2F%2Fgithub.com%2Fbnb-chain%2Fbsc%2Ftree%2Fmaster%2Fconsensus%2Fparlia)%0A-%20%5Bsystemcontracts%5D(https%3A%2F%2Fgithub.com%2Fbnb-chain%2Fbsc%2Ftree%2Fmaster%2Fcore%2Fsystemcontracts)%0A-%20%5BMobile%5D(https%3A%2F%2Fgithub.com%2Fbnb-chain%2Fbsc%2Ftree%2Fmaster%2Fmobile)%3A%20Outdated%20library.%0A%0ASome%20ommissions%20include%20the%20majority%20of%20work%20done%20for%20Ethereum%202.0%20for%20example%20BSC%20has%20no%20%5Bbeacon%2Fengine%5D(https%3A%2F%2Fgithub.com%2Fethereum%2Fgo-ethereum%2Ftree%2Fmaster%2Fbeacon%2Fengine).%0A%0A%23%23%20References%0A%0A**Consensus**%0A%0A-%20%5BParlia%20Documentation%5D(https%3A%2F%2Fdocs.bnbchain.org%2Fdocs%2Flearn%2Fconsensus%2F%23parlia)%3A%20Binance%20Consensus%20Engine%20Parlia%20Documentation%0A-%20%5BConsenus%20Engine%20Codebase%5D(https%3A%2F%2Fgithub.com%2Fbnb-chain%2Fbsc%2Fblob%2Fmaster%2Fconsensus%2Fconsensus.go)%3A%20Binance%20algorithm%20agnostic%20consensus%20engine.%20(go)%0A-%20%5BParlia%20Consensus%20Codebase%5D(https%3A%2F%2Fgithub.com%2Fbnb-chain%2Fbsc%2Fblob%2Fmaster%2Fconsensus%2Fparlia%2Fparlia.go)%3A%20Binance%20Parlia%20codebase%20(go)%0A-%20%5BClique%20Consensus%20Codebase%5D(https%3A%2F%2Fgithub.com%2Fbnb-chain%2Fbsc%2Fblob%2Fmaster%2Fconsensus%2Fclique%2Fclique.go)%3A%20Clique%20implements%20the%20proof-of-authority%20consensus%20engine%20(go).%20It%20is%20what%20Parlia%20was%20based%20of.%0A-%20%5BParlia%20Consensus%20Verify%20Seal%5D(https%3A%2F%2Fgithub.com%2Fbnb-chain%2Fbsc%2Fblob%2Fmaster%2Fconsensus%2Fparlia%2Fparlia.go%23L546)%3A%20Binance%20seal%20verification%20codebase%20(go).%20_verifySeal%20checks%20whether%20the%20signature%20contained%20in%20the%20header%20satisfies%20the%20consensus%20protocol%20requirements.%20The%20method%20accepts%20an%20optional%20list%20of%20parent%20headers%20that%20aren't%20yet%20part%20of%20the%20local%20blockchain%20to%20generate%20the%20snapshots%20from.%20The%20transition%20rule%20is%20described%20in%20the%20eth1%2F2%20merge%20spec%20EIP-3675._%0A-%20%5BEIP-3675%3A%20Upgrade%20consensus%20to%20Proof-of-Stake%5D(https%3A%2F%2Feips.ethereum.org%2FEIPS%2Feip-3675)%3A%20Specification%20of%20the%20consensus%20mechanism%20upgrade%20on%20Ethereum%20Mainnet%20that%20introduces%20Proof-of-Stake.%0A%0A**Staking**%0A%0A-%20%5BBNB%20Staking%20Economics%5D(https%3A%2F%2Fdocs.bnbchain.org%2Fdocs%2Fstake%2FStaking%2F%23staking-economics)%3A%20Binance%20Staking%20Documentation%0A-%20%5BBNB%20Chain%20Staking%5D(https%3A%2F%2Fwww.bnbchain.org%2Fen%2Fstaking)%3A%20Binance%20Staking%20App%0A%0A**Additional**%0A%0A%3Ca%20name%3D%22f19%22%3E%5B19%5D%3C%2Fa%3E%20See%20%5BBSC%20Consensus%20Engine%0Adocumentations%5D(https%3A%2F%2Fdocs.bnbchain.org%2Fdocs%2Flearn%2Fconsensus%2F%23consensus-protocol)%0A%0A%3Ca%20name%3D%22f20%22%3E%5B20%5D%3C%2Fa%3E%20Following%20BEP-131%2C%20see%20a%0A%5Bsummary%5D(https%3A%2F%2Fwww.bnbchain.org%2Fen%2Fblog%2Fbep131-introducing-candidate-validators-bnb-smart-chain%2F)%0Aand%20%5Bdetailed%20specifications%5D(https%3A%2F%2Fgithub.com%2Fbnb-chain%2FBEPs%2Fpull%2F131).%20Note%0Athat%20the%20proportion%20of%20randomly%20selected%20validators%20may%20increase%2C%20as%20proposed%20in%0Athe%20BEP.%0A%0A%3Ca%20name%3D%22f21%22%3E%5B21%5D%3C%2Fa%3E%20See%0A%5Bcode%5D(https%3A%2F%2Fgithub.com%2Fbnb-chain%2Fbsc%2Fblob%2Fcb9e50bdf62c6b46a71724066d39f9851181a5af%2Fconsensus%2Fparlia%2Fparlia.go%23L546)%0Afor%20full%20procedure%20and%20how%20ecrecover%20is%20used%20for%20signature%20verification.%0A%0A-%20%5BState%20of%20BNB%20Chain%20Q4%202022%5D(https%3A%2F%2Fmessari.io%2Freport%2Fstate-of-bnb-chain-q4-2022)%0A",lastUpdatedAt:1753125084e3},{lazy:()=>o2(()=>import("./binance-Cu72eHLR.js"),[]),path:"/research/chains/binance.html",type:"mdx",filePath:"research/chains/binance.mdx",content:"%23%20Binance%20Smart%20Chain%0A%0A-%20date%3A%202023-02-04%0A-%20last%20updated%3A%202023-02-04%0A%0A%23%23%20Overview%0A%0ABinanace%20Smart%20Chain%20(BSC)%20has%20similar%20signature%20schemes%20to%20Polygon%20but%20with%20a%20much%20smaller%20set%20of%20validators%20and%20some%20degree%20of%20random%20(yet%20predictable%20and%20deterministic)%20perturbation%20to%20the%20active%20validator%20set.%0A%0AThe%20consensus%20protocol%20is%20based%20on%20Parlia%3Csup%3E%5B19%5D(%23f19)%3C%2Fsup%3E%2C%20a%20variation%20that%20adds%20staking%2C%20validators%2C%20and%20elections%20to%20the%20proof-of-authority%20consensus%20protocol%20Clique%2C%20initially%20proposed%20in%20the%20Ethereum%20community.%20The%20protocol%20uses%2021%20validators%20for%20producing%20and%20signing%20blocks%2C%20with%2019%20of%20them%20picked%20from%20stakers%20with%20top%20voting%20power%20and%202%20randomly%20chosen%20every%20200%20blocks%20%3Csup%3E%5B20%5D(%23f20)%3C%2Fsup%3E.%20Blocks%20are%20signed%20using%20ECDSA%20on%20secp256k1%20curves%2C%20and%20block%20headers%20can%20be%20verified%20following%20the%20standard%20signature%20verification%20process%3Csup%3E%5B21%5D(%23f21)%3C%2Fsup%3E.%0A%0A%23%23%20Consensus%20Mechanism%0A%0AFollowing%20is%20an%20excerpt%20from%20%5BBinance%20Consensus%20Engine%20documentation%5D(https%3A%2F%2Fgithub.com%2Fbnb-chain%2Fbnb-chain.github.io%2Fblob%2Fmaster%2Fdocs%2Flearn%2Fconsensus.mdx)%0A%0A%3E%20Although%20Proof-of-Work%20(PoW)%20has%20been%20recognized%20as%20a%20practical%20mechanism%20to%20implement%20a%20decentralized%20network%2C%20it%20is%20not%20friendly%20to%20the%20environment%20and%20also%20requires%20a%20large%20size%20of%20participants%20to%20maintain%20the%20security.%0A%3E%0A%3E%20Ethereum%20and%20some%20other%20blockchain%20networks%2C%20such%20as%20%5BMATIC%20Bor%5D(https%3A%2F%2Fgithub.com%2Fmaticnetwork%2Fbor)%2C%20%5BTOMOChain%5D(https%3A%2F%2Ftomochain.com%2F)%2C%20%5BGoChain%5D(https%3A%2F%2Fgochain.io%2F)%2C%20%5BxDAI%5D(https%3A%2F%2Fxdai.io%2F)%2C%20do%20use%20%5BProof-of-Authority(PoA)%5D(https%3A%2F%2Fen.wikipedia.org%2Fwiki%2FProof_of_authority)%20or%20its%20variants%20in%20different%20scenarios%2C%20including%20both%20testnet%20and%20mainnet.%20PoA%20provides%20some%20defense%20to%2051%25%20attack%2C%20with%20improved%20efficiency%20and%20tolerance%20to%20certain%20levels%20of%20Byzantine%20players%20(malicious%20or%20hacked).%20It%20serves%20as%20an%20easy%20choice%20to%20pick%20as%20the%20fundamentals.%0A%3E%0A%3E%20Meanwhile%2C%20the%20PoA%20protocol%20is%20most%20criticized%20for%20being%20not%20as%20decentralized%20as%20PoW%2C%20as%20the%20validators%2C%20i.e.%20the%20nodes%20that%20take%20turns%20to%20produce%20blocks%2C%20have%20all%20the%20authorities%20and%20are%20prone%20to%20corruption%20and%20security%20attacks.%20Other%20blockchains%2C%20such%20as%20EOS%20and%20Lisk%20both%2C%20introduce%20different%20types%20of%20%5BDelegated%20Proof%20of%20Stake%20(DPoS)%5D(https%3A%2F%2Fen.bitcoinwiki.org%2Fwiki%2FDPoS)%20to%20allow%20the%20token%20holders%20to%20vote%20and%20elect%20the%20validator%20set.%20It%20increases%20the%20decentralization%20and%20favors%20community%20governance.%0A%3E%0A%3E%20BSC%20here%20proposes%20to%20combine%20DPoS%20and%20PoA%20for%20consensus%2C%20so%20that%3A%0A%3E%0A%3E%201.%20Blocks%20are%20produced%20by%20a%20limited%20set%20of%20validators%0A%3E%202.%20Validators%20take%20turns%20to%20produce%20blocks%20in%20a%20PoA%20manner%2C%20similar%20to%20%5BEthereum's%20Clique%5D(https%3A%2F%2Feips.ethereum.org%2FEIPS%2Feip-225)%20consensus%20design%0A%3E%203.%20Validator%20set%20are%20elected%20in%20and%20out%20based%20on%20a%20staking%20based%20governance%0A%3E%0A%3E%20The%20consensus%20protocol%20of%20BSC%20fulfills%20the%20following%20goals%3A%0A%3E%0A%3E%201.%20Short%20Blocking%20time%2C%203%20seconds%20on%20mainnet.%0A%3E%202.%20It%20requires%20limited%20time%20to%20confirm%20the%20finality%20of%20transactions%2C%20around%2045s%20for%20mainnet.%0A%3E%203.%20There%20is%20no%20inflation%20of%20native%20token%3A%20BNB%2C%20the%20block%20reward%20is%20collected%20from%20transaction%20fees%2C%20and%20it%20will%20be%20paid%20in%20BNB.%0A%3E%204.%20It%20is%20100%25%20compatible%20with%20Ethereum%20system%20.%0A%3E%205.%20It%20allows%20modern%20proof-of-stake%20blockchain%20network%20governance.%0A%0A%23%23%20Signing%20Mechanism%0A%0ABSC%20uses%20the%20same%20signing%20mechanism%20as%20Ethereum%201.0.%0A%0ATransactions%20are%20signed%20using%20recoverable%20ECDSA%20signatures.%20This%20method%20utilises%20the%20SECP-256k1%20curve.%20(see%20the%20%5BEthereum%20Yellow%20Paper%5D(https%3A%2F%2Fethereum.github.io%2Fyellowpaper%2Fpaper.pdf)%20Appendix%20F.%20Signing%20Transactions).%20go-ethereum%20utilizes%20the%20%5Bsecp256k1%5D(https%3A%2F%2Fgithub.com%2Fbnb-chain%2Fbsc%2Ftree%2Fmaster%2Fcrypto%2Fsecp256k1)%20package%20which%20wraps%20the%20bitcoin%20secp256k1%20C%20library.%20Signing%20is%20handled%20by%20the%20%5Bsigner%5D(https%3A%2F%2Fgithub.com%2Fbnb-chain%2Fbsc%2Ftree%2Fmaster%2Fsigner)%20receives%20a%20request%20and%20produces%20a%20signature.%20Note%2C%20the%20produced%20signature%20conforms%20to%20the%20secp256k1%20curve%20R%2C%20S%20and%20V%20values%2C%20where%20the%20V%20value%20will%20be%2027%20or%2028%20for%20legacy%20reasons%2C%20if%20legacyV%3D%3Dtrue.%0A%0A**Signing**%0A%0A-%20%5BSignature%20Documentation%5D(https%3A%2F%2Fdocs.bnbchain.org%2Fdocs%2Fbeaconchain%2Flearn%2Fsignature%2F)%3A%20Binance%20overview%20of%20how%20transactions%20are%20signed%20using%20ECDSA%20curve%20Secp256k1.%0A-%20%5Bsecp256k1%20codebase%5D(https%3A%2F%2Fgithub.com%2Fethereum%2Fgo-ethereum%2Ftree%2Fmaster%2Fcrypto%2Fsecp256k1)%3A%20Binance%20secp256k1%20crytpographic%20library%20(go)%0A-%20%5Bsecp256k1%20Public%20Key%5D(https%3A%2F%2Fgithub.com%2Fbnb-chain%2Fbsc%2Fblob%2F03ff2992ab4674c1df8f568ee9a31596f3503c26%2Fcrypto%2Fsignature_cgo.go%23L32)%3A%20Binance%20codebase(go)%20recovering%20the%20uncompressed%20secp256k1%20key%20that%20created%20a%20given%20signature.%0A%0A%23%23%20Code%20Review%0A%0AThe%20Binance%20Smart%20chain%20is%20cloned%20from%20%5BEthereum%201.0%5D(.%2Fethereum-1-0.mdx)%20and%20thus%20the%20majority%20of%20code%20incuding%20primitives%2C%20signing%20are%20similar.%20The%20key%20addtions%20are%0A%0A-%20%5BConsensus%20-%20Parlia%5D(https%3A%2F%2Fgithub.com%2Fbnb-chain%2Fbsc%2Ftree%2Fmaster%2Fconsensus%2Fparlia)%0A-%20%5Bsystemcontracts%5D(https%3A%2F%2Fgithub.com%2Fbnb-chain%2Fbsc%2Ftree%2Fmaster%2Fcore%2Fsystemcontracts)%0A-%20%5BMobile%5D(https%3A%2F%2Fgithub.com%2Fbnb-chain%2Fbsc%2Ftree%2Fmaster%2Fmobile)%3A%20Outdated%20library.%0A%0ASome%20ommissions%20include%20the%20majority%20of%20work%20done%20for%20Ethereum%202.0%20for%20example%20BSC%20has%20no%20%5Bbeacon%2Fengine%5D(https%3A%2F%2Fgithub.com%2Fethereum%2Fgo-ethereum%2Ftree%2Fmaster%2Fbeacon%2Fengine).%0A%0A%23%23%20References%0A%0A**Consensus**%0A%0A-%20%5BParlia%20Documentation%5D(https%3A%2F%2Fdocs.bnbchain.org%2Fdocs%2Flearn%2Fconsensus%2F%23parlia)%3A%20Binance%20Consensus%20Engine%20Parlia%20Documentation%0A-%20%5BConsenus%20Engine%20Codebase%5D(https%3A%2F%2Fgithub.com%2Fbnb-chain%2Fbsc%2Fblob%2Fmaster%2Fconsensus%2Fconsensus.go)%3A%20Binance%20algorithm%20agnostic%20consensus%20engine.%20(go)%0A-%20%5BParlia%20Consensus%20Codebase%5D(https%3A%2F%2Fgithub.com%2Fbnb-chain%2Fbsc%2Fblob%2Fmaster%2Fconsensus%2Fparlia%2Fparlia.go)%3A%20Binance%20Parlia%20codebase%20(go)%0A-%20%5BClique%20Consensus%20Codebase%5D(https%3A%2F%2Fgithub.com%2Fbnb-chain%2Fbsc%2Fblob%2Fmaster%2Fconsensus%2Fclique%2Fclique.go)%3A%20Clique%20implements%20the%20proof-of-authority%20consensus%20engine%20(go).%20It%20is%20what%20Parlia%20was%20based%20of.%0A-%20%5BParlia%20Consensus%20Verify%20Seal%5D(https%3A%2F%2Fgithub.com%2Fbnb-chain%2Fbsc%2Fblob%2Fmaster%2Fconsensus%2Fparlia%2Fparlia.go%23L546)%3A%20Binance%20seal%20verification%20codebase%20(go).%20_verifySeal%20checks%20whether%20the%20signature%20contained%20in%20the%20header%20satisfies%20the%20consensus%20protocol%20requirements.%20The%20method%20accepts%20an%20optional%20list%20of%20parent%20headers%20that%20aren't%20yet%20part%20of%20the%20local%20blockchain%20to%20generate%20the%20snapshots%20from.%20The%20transition%20rule%20is%20described%20in%20the%20eth1%2F2%20merge%20spec%20EIP-3675._%0A-%20%5BEIP-3675%3A%20Upgrade%20consensus%20to%20Proof-of-Stake%5D(https%3A%2F%2Feips.ethereum.org%2FEIPS%2Feip-3675)%3A%20Specification%20of%20the%20consensus%20mechanism%20upgrade%20on%20Ethereum%20Mainnet%20that%20introduces%20Proof-of-Stake.%0A%0A**Staking**%0A%0A-%20%5BBNB%20Staking%20Economics%5D(https%3A%2F%2Fdocs.bnbchain.org%2Fdocs%2Fstake%2FStaking%2F%23staking-economics)%3A%20Binance%20Staking%20Documentation%0A-%20%5BBNB%20Chain%20Staking%5D(https%3A%2F%2Fwww.bnbchain.org%2Fen%2Fstaking)%3A%20Binance%20Staking%20App%0A%0A**Additional**%0A%0A%3Ca%20name%3D%22f19%22%3E%5B19%5D%3C%2Fa%3E%20See%20%5BBSC%20Consensus%20Engine%0Adocumentations%5D(https%3A%2F%2Fdocs.bnbchain.org%2Fdocs%2Flearn%2Fconsensus%2F%23consensus-protocol)%0A%0A%3Ca%20name%3D%22f20%22%3E%5B20%5D%3C%2Fa%3E%20Following%20BEP-131%2C%20see%20a%0A%5Bsummary%5D(https%3A%2F%2Fwww.bnbchain.org%2Fen%2Fblog%2Fbep131-introducing-candidate-validators-bnb-smart-chain%2F)%0Aand%20%5Bdetailed%20specifications%5D(https%3A%2F%2Fgithub.com%2Fbnb-chain%2FBEPs%2Fpull%2F131).%20Note%0Athat%20the%20proportion%20of%20randomly%20selected%20validators%20may%20increase%2C%20as%20proposed%20in%0Athe%20BEP.%0A%0A%3Ca%20name%3D%22f21%22%3E%5B21%5D%3C%2Fa%3E%20See%0A%5Bcode%5D(https%3A%2F%2Fgithub.com%2Fbnb-chain%2Fbsc%2Fblob%2Fcb9e50bdf62c6b46a71724066d39f9851181a5af%2Fconsensus%2Fparlia%2Fparlia.go%23L546)%0Afor%20full%20procedure%20and%20how%20ecrecover%20is%20used%20for%20signature%20verification.%0A%0A-%20%5BState%20of%20BNB%20Chain%20Q4%202022%5D(https%3A%2F%2Fmessari.io%2Freport%2Fstate-of-bnb-chain-q4-2022)%0A",lastUpdatedAt:1753125084e3},{lazy:()=>o2(()=>import("./cosmos-BPku5gGC.js"),[]),path:"/research/chains/cosmos",type:"mdx",filePath:"research/chains/cosmos.mdx",content:"%23%20Cosmos%0A%0A-date%3A%202023-02-04%0A%0A-%20last%20updated%3A%202023-02-04%0A%0A%23%23%20Overview%0A%0ACosmos%20is%20the%20hub%20to%20almost%2050%20blockchains%20based%20on%20the%20Tendermint%20consensus%20engine%20and%20Inter-Blockchain%20Communication%20(IBC)%20protocol.%20It%20is%20also%20one%20of%20the%20earliest%20proponents%20for%20cross-chain%20communication%20and%20defined%20the%20first%20set%20of%20communication%20specificiations%3Csup%3E%5B24%5D(%23f24)%3C%2Fsup%3E.%20From%20a%20purely%20technical%20point%20of%20view%2C%20the%20signature%20scheme%20for%20signing%20blocks%2C%20Ed25519%2C%20is%20also%20often%20used%20in%20many%20other%20protocols%2C%20such%20as%20NEAR.%0A%0ACosmos%20Hub%20itself%20has%20175%20validators%3Csup%3E%5B25%5D(%23f25)%3C%2Fsup%3E%20and%20is%20built%20upon%20Tendermint%2C%20in%20which%20validators%20sign%20blocks%20using%20EdDSA%20on%20Curve25519%20(i.e.%2C%20Ed25519)%3Csup%3E%5B26%5D(%23f26)%3C%2Fsup%3E.%0A%0A%23%23%20Consensus%20Mechanism%0A%0AFor%20a%20deep%20dive%20on%20Tendemints%20Consensus%2C%20please%20read%20%5BThe%20latest%20gossip%20on%20BFT%20consensus%5D(https%3A%2F%2Farxiv.org%2Fpdf%2F1807.04938.pdf)%3A%20The%20paper%20presents%20Tendermint%2C%20a%20new%20protocol%20for%20ordering%20events%20in%20a%20distributed%20network%20under%20adversarial%20conditions.%0A%0AFollowing%20is%20an%20excerpt%20from%20%5BWhat%20is%20Tendermint%5D(https%3A%2F%2Fgithub.com%2Ftendermint%2Ftendermint%2Fblob%2Fmain%2Fdocs%2Fintroduction%2Fwhat-is-tendermint.mdx)%0A%0A%3E%20Tendermint%20is%20an%20easy-to-understand%2C%20mostly%20asynchronous%2C%20BFT%20consensus%20protocol.%20The%20protocol%20follows%20a%20simple%20state%20machine%20that%20looks%20like%20this%3A%0A%0A!%5Bconsensus-logic%5D(%2Fassets%2Fresearch%2Ftendermint_consensus_logic.png)%0A%0A%3E%20Participants%20in%20the%20protocol%20are%20called%20**validators**%3B%20they%20take%20turns%20proposing%20blocks%20of%20transactions%20and%20voting%20on%20them.%20Blocks%20are%20committed%20in%20a%20chain%2C%20with%20one%20block%20at%20each%20**height**.%20A%20block%20may%20fail%20to%20be%20committed%2C%20in%20which%20case%20the%20protocol%20moves%20to%20the%20next%20**round**%2C%20and%20a%20new%20validator%20gets%20to%20propose%20a%20block%20for%20that%20height.%20Two%20stages%20of%20voting%20are%20required%20to%20successfully%20commit%20a%20block%3B%20we%20call%20them%20**pre-vote**%20and%20**pre-commit**.%20A%20block%20is%20committed%20when%20more%20than%202%2F3%20of%20validators%20pre-commit%20for%20the%20same%20block%20in%20the%20same%20round.%0A%0A%3E%20There%20is%20a%20picture%20of%20a%20couple%20doing%20the%20polka%20because%20validators%20are%20doing%20something%20like%20a%20polka%20dance.%20When%20more%20than%20two-thirds%20of%20the%20validators%20pre-vote%20for%20the%20same%20block%2C%20we%20call%20that%20a%20**polka**.%20Every%20pre-commit%20must%20be%20justified%20by%20a%20polka%20in%20the%20same%20round.%0A%0A%3E%20Validators%20may%20fail%20to%20commit%20a%20block%20for%20a%20number%20of%20reasons%3B%20the%20current%20proposer%20may%20be%20offline%2C%20or%20the%20network%20may%20be%20slow.%20Tendermint%20allows%20them%20to%20establish%20that%20a%20validator%20should%20be%20skipped.%20Validators%20wait%20a%20small%20amount%20of%20time%20to%20receive%20a%20complete%20proposal%20block%20from%20the%20proposer%20before%20voting%20to%20move%20to%20the%20next%20round.%20This%20reliance%20on%20a%20timeout%20is%20what%20makes%20Tendermint%20a%20weakly%20synchronous%20protocol%2C%20rather%20than%20an%20asynchronous%20one.%20However%2C%20the%20rest%20of%20the%20protocol%20is%20asynchronous%2C%20and%20validators%20only%20make%20progress%20after%20hearing%20from%20more%20than%20two-thirds%20of%20the%20validator%20set.%20A%20simplifying%20element%20of%20Tendermint%20is%20that%20it%20uses%20the%20same%20mechanism%20to%20commit%20a%20block%20as%20it%20does%20to%20skip%20to%20the%20next%20round.%0A%0A%3E%20Assuming%20less%20than%20one-third%20of%20the%20validators%20are%20Byzantine%2C%20Tendermint%20guarantees%20that%20safety%20will%20never%20be%20violated%20-%20that%20is%2C%20validators%20will%20never%20commit%20conflicting%20blocks%20at%20the%20same%20height.%20To%20do%20this%20it%20introduces%20a%20few%20**locking**%20rules%20which%20modulate%20which%20paths%20can%20be%20followed%20in%20the%20flow%20diagram.%20Once%20a%20validator%20precommits%20a%20block%2C%20it%20is%20locked%20on%20that%20block.%20Then%2C%0A%0A%3E%201.%20it%20must%20prevote%20for%20the%20block%20it%20is%20locked%20on%0A%3E%202.%20it%20can%20only%20unlock%2C%20and%20precommit%20for%20a%20new%20block%2C%20if%20there%20is%20a%20polka%20for%20that%20block%20in%20a%20later%20round%0A%0A%23%23%20Signing%20Mechanism%0A%0ABelow%20is%20an%20excerpt%20from%20%5BTendermint%20Specification%5D(https%3A%2F%2Fgithub.com%2Ftendermint%2Ftendermint%2Fblob%2Fmain%2Fspec%2Fcore%2Fencoding.md%23public-key-cryptography)%0A%0A%3E%20Tendermint%20uses%20Protobuf%20%5BOneof%5D(https%3A%2F%2Fprotobuf.dev%2Fprogramming-guides%2Fproto3%2F%23oneof)%20to%20distinguish%20between%20different%20types%20public%20keys%2C%20and%20signatures.%20Additionally%2C%20for%20each%20public%20key%2C%20Tendermint%20defines%20an%20Address%20function%20that%20can%20be%20used%20as%20a%20more%20compact%20identifier%20in%20place%20of%20the%20public%20key.%0A%3E%0A%3E%20%23%23%23%20Key%20Types%0A%3E%0A%3E%20Each%20type%20specifies%20it's%20own%20pubkey%2C%20address%2C%20and%20signature%20format.%0A%3E%0A%3E%20%23%23%23%23%20Ed25519%0A%3E%0A%3E%20The%20address%20is%20the%20first%2020-bytes%20of%20the%20SHA256%20hash%20of%20the%20raw%2032-byte%20public%20key%3A%0A%3E%0A%3E%20%60%60%60go%0A%3E%20address%20%3D%20SHA256(pubkey)%5B%3A20%5D%0A%3E%20%60%60%60%0A%3E%0A%3E%20The%20signature%20is%20the%20raw%2064-byte%20ED25519%20signature.%0A%3E%0A%3E%20Tendermint%20adopted%20%5Bzip215%5D(https%3A%2F%2Fzips.z.cash%2Fzip-0215)%20for%20verification%20of%20ed25519%20signatures.%0A%3E%0A%3E%20Note%3A%20This%20change%20will%20be%20released%20in%20the%20next%20major%20release%20of%20Tendermint-Go%20(0.35).%0A%0A%23%23%23%23%20Secp256k1%0A%0AThe%20address%20is%20the%20first%2020-bytes%20of%20the%20SHA256%20hash%20of%20the%20raw%2032-byte%20public%20key%3A%0A%0A%60%60%60go%0Aaddress%20%3D%20SHA256(pubkey)%5B%3A20%5D%0A%60%60%60%0A%0AFollowing%20is%20an%20excerpt%20from%20%5BTendermint%20docs%3A%20Validator%20Keys%5D(https%3A%2F%2Fdocs.tendermint.com%2Fv0.34%2Ftendermint-core%2Fvalidators.html%23)%0A%0A%3E%20Currently%20Tendermint%20uses%20Ed25519%20(opens%20new%20window)keys%20which%20are%20widely%20supported%20across%20the%20security%20sector%20and%20HSMs.%0A%0A%23%23%20Code%20Review%0A%0A%23%23%23%20Signing%0A%0A-%20%5Bed25519%5D(https%3A%2F%2Fgithub.com%2Ftendermint%2Ftendermint%2Ftree%2Fmain%2Fcrypto%2Fed25519)%3A%20Sign%20produces%20a%20signature%20on%20the%20provided%20message.%20This%20assumes%20the%20privkey%20is%20wellformed%20in%20the%20golang%20format.%20The%20first%2032%20bytes%20should%20be%20random%2C%20corresponding%20to%20the%20normal%20ed25519%20private%20key.%20The%20latter%2032%20bytes%20should%20be%20the%20compressed%20public%20key.%20If%20these%20conditions%20aren't%20met%2C%20Sign%20will%20panic%20or%20produce%20an%20incorrect%20signature.%0A-%20%5Bsecp256k1%5D(https%3A%2F%2Fgithub.com%2Ftendermint%2Ftendermint%2Ftree%2Fmain%2Fcrypto%2Fsecp256k1)%0A-%20%5Bsr25519%5D(https%3A%2F%2Fgithub.com%2Ftendermint%2Ftendermint%2Ftree%2Fmain%2Fcrypto%2Fsr25519)%0A-%20%5Bcodec.go%5D(https%3A%2F%2Fgithub.com%2Ftendermint%2Ftendermint%2Fblob%2Fmain%2Fcrypto%2Fencoding%2Fcodec.go)%3A%20Tranforms%20protobuf%20publick%20key%20to%20crypto%20public%20keys%20and%20vice%20versa.%20Support%20secp256k1%20and%20edd25519.%0A%0A%23%23%23%20Consensus%0A%0A-%20%5Bconsensus%5D(https%3A%2F%2Fgithub.com%2Ftendermint%2Ftendermint%2Ftree%2Fmain%2Fconsensus)%0A%20%20-%20%5Bstate%5D(https%3A%2F%2Fgithub.com%2Ftendermint%2Ftendermint%2Fblob%2Fmain%2Fconsensus%2Fstate.go)%3A%20State%20handles%20execution%20of%20the%20consensus%20algorithm.%20It%20processes%20votes%20and%20proposals%2C%20and%20upon%20reaching%20agreement%2C%20commits%20blocks%20to%20the%20chain%20and%20executes%20them%20against%20the%20application.%20The%20internal%20state%20machine%20receives%20input%20from%20peers%2C%20the%20internal%20validator%2C%20and%20from%20a%20timer.%0A%0A%23%23%23%20Cryptographic%20Primitives%0A%0A**general%20primitives**%0A%0A-%20%5Bbits%5D(https%3A%2F%2Fgithub.com%2Ftendermint%2Ftendermint%2Ftree%2Fmain%2Flibs%2Fbits)%3A%20BitArray%20is%20a%20thread-safe%20implementation%20of%20a%20bit%20array.%0A-%20%5Bbytes%5D(https%3A%2F%2Fgithub.com%2Ftendermint%2Ftendermint%2Ftree%2Fmain%2Flibs%2Fbytes)%3A%20Byte%20functions%20including%20marshalling%20and%20unmarshalling%20into%20JSON%20as%20well%20as%20fingerprint%20which%20returns%20the%20first%206%20bytes%20of%20a%20byte%20slice.%0A-%20%5Bclist%5D(https%3A%2F%2Fgithub.com%2Ftendermint%2Ftendermint%2Ftree%2Fmain%2Flibs%2Fclist)%3A%20provide%20a%20goroutine-safe%20linked-list.%20This%20list%20can%20be%20traversed%20concurrently%20by%20any%20number%20of%20goroutines.%20However%2C%20removed%20CElements%20cannot%20be%20added%20back.%0A-%20%5Bcmap%5D(https%3A%2F%2Fgithub.com%2Ftendermint%2Ftendermint%2Ftree%2Fmain%2Flibs%2Fcmap)%3A%20a%20goroutine-safe%20map%0A-%20%5Bflowrate%5D(https%3A%2F%2Fgithub.com%2Ftendermint%2Ftendermint%2Ftree%2Fmain%2Flibs%2Fflowrate)%3A%20provides%20the%20tools%20for%20monitoring%20and%20limiting%20the%20flow%20rate%20of%20an%20arbitrary%20data%20stream.%0A-%20%5Bjson%5D(https%3A%2F%2Fgithub.com%2Ftendermint%2Ftendermint%2Ftree%2Fmain%2Flibs%2Fjson)%3A%20provides%20functions%20for%20marshaling%20and%20unmarshaling%20JSON%20in%20a%20format%20that%20is%20backwards-compatible%20with%20Amino%20JSON%20encoding.%20This%20mostly%20differs%20from%20encoding%2Fjson%20in%20encoding%20of%20integers%20(64-bit%20integers%20are%20encoded%20as%20strings%2C%20not%20numbers)%2C%20and%20handling%20of%20interfaces%20(wrapped%20in%20an%20interface%20object%20with%20type%2Fvalue%20keys).%0A-%20%5Bmath%5D(https%3A%2F%2Fgithub.com%2Ftendermint%2Ftendermint%2Ftree%2Fmain%2Flibs%2Fmath)%3A%20math%20functions%20including%20fractions%20and%20safemath.%0A-%20%5Bpubsub%5D(https%3A%2F%2Fgithub.com%2Ftendermint%2Ftendermint%2Ftree%2Fmain%2Flibs%2Fpubsub)%3A%20implements%20a%20pub-sub%20model%20with%20a%20single%20publisher%20(Server)%20and%20multiple%20subscribers%20(clients).%0A-%20%5Bstrings%5D(https%3A%2F%2Fgithub.com%2Ftendermint%2Ftendermint%2Ftree%2Fmain%2Flibs%2Fstrings)%3A%20string%20manipulation%20functions.%0A%0A**hash%20functions**%0A%0A-%20%5Btmhash%5D(https%3A%2F%2Fgithub.com%2Ftendermint%2Ftendermint%2Fblob%2Fmain%2Fcrypto%2Ftmhash%2Fhash.go)%3A%20Tendermint%20implementation%20of%20SHA256%20hash.%0A-%20%5Bhash%5D(https%3A%2F%2Fgithub.com%2Ftendermint%2Ftendermint%2Fblob%2Fmain%2Fcrypto%2Fhash.go)%3A%20included%20in%20tmhash.%0A%0A**encryption**%0A%0A-%20%5Barmor%5D(https%3A%2F%2Fgithub.com%2Ftendermint%2Ftendermint%2Fblob%2Fmain%2Fcrypto%2Farmor%2Farmor.go)%3A%20implementation%20of%20%5BOpenPGP%20ASCII%20Armor%5D(https%3A%2F%2Fwww.rfc-editor.org%2Frfc%2Frfc4880.html).%0A-%20%5Bxchacha20poly1305%5D(https%3A%2F%2Fgithub.com%2Ftendermint%2Ftendermint%2Ftree%2Fmain%2Fcrypto%2Fxchacha20poly1305)%3A%20Tendermint%20implementation%20of%20%5BChaCha20-Poly1305%5D(https%3A%2F%2Fen.wikipedia.org%2Fwiki%2FChaCha20-Poly1305)%20an%20authenticated%20encryption%20with%20additional%20data%20(AEAD)%20algorithm%2C%20that%20combines%20the%20ChaCha20%20stream%20cipher%20with%20the%20Poly1305%20message%20authentication%20code.%0A-%20%5Bxsalsa20symmetric%5D(https%3A%2F%2Fgithub.com%2Ftendermint%2Ftendermint%2Ftree%2Fmain%2Fcrypto%2Fxsalsa20symmetric)%3A%20Tendermint%20implementation%20of%20%5BSalsa20%5D(https%3A%2F%2Fen.wikipedia.org%2Fwiki%2FSalsa20).%0A%0A**random%20number%20generators**%0A%0A-%20%5Brandom.go%5D(https%3A%2F%2Fgithub.com%2Ftendermint%2Ftendermint%2Fblob%2Fmain%2Fcrypto%2Frandom.go)%3A%20only%20uses%20the%20OS's%20randomness.%20CRandHex%20returns%20a%20hex%20encoded%20string%20that's%20floor(numDigits%2F2)%20*2%20long.*Note%3A%20CRandHex(24)%20gives%2096%20bits%20of%20randomness%20that%20are%20usually%20strong%20enough%20for%20most%20purposes.%5C*%0A-%20%5Brand%5D(https%3A%2F%2Fgithub.com%2Ftendermint%2Ftendermint%2Ftree%2Fmain%2Flibs%2Frand)%3A%20prng%2C%20that%20is%20seeded%20with%20OS%20randomness.%20The%20OS%20randomness%20is%20obtained%20from%20crypto%2Frand%2C%20however%20none%20of%20the%20provided%20methods%20are%20suitable%20for%20cryptographic%20usage.%20They%20all%20utilize%20math%2Frand's%20prng%20internally.%20All%20of%20the%20methods%20here%20are%20suitable%20for%20concurrent%20use.%20This%20is%20achieved%20by%20using%20a%20mutex%20lock%20on%20all%20of%20the%20provided%20methods.%0A%0A**serilization%2Fdeserialization**%0A%0A%23%23%20References%0A%0A**Consensus**%0A%0A-%20%5BTendermint%20Byzantine%20Consensus%20Algorithm%20Specification%5D(https%3A%2F%2Fgithub.com%2Ftendermint%2Ftendermint%2Fblob%2Fmain%2Fspec%2Fconsensus%2Fconsensus.mdx)%3A%20Specification%20for%20Tendermints%20Consensus%20including%20state%20machine%2C%20background%20gossip%20(messaging)%20and%20proofs.%0A-%20%5BTendermint%20Consensus%20Overview%5D(https%3A%2F%2Fdocs.tendermint.com%2Fv0.34%2Fintroduction%2Fwhat-is-tendermint.html%23consensus-overview)%3A%20Tendermint%20Consensus%20Overview%20Documentation.%0A-%20%5BProposer%20Selection%20Procedure%20Specification%5D(https%3A%2F%2Fgithub.com%2Ftendermint%2Ftendermint%2Fblob%2Fmain%2Fspec%2Fconsensus%2Fproposer-selection.mdx)%3A%20Specifies%20the%20Proposer%20Selection%20Procedure%20that%20is%20used%20in%20Tendermint%20to%20choose%20a%20round%20proposer%20for%20its%20%22leader-based-protocol%22.%0A%0A**Signing**%0A%0A-%20%5BEd25519%3A%20high-speed%20high-security%20signatures%5D(https%3A%2F%2Fed25519.cr.yp.to%2F)%3A%20Ed25519%20Signature%20Information%0A%20%20-%20%5BHigh-speed%20high-security%20signatures%5D(https%3A%2F%2Fed25519.cr.yp.to%2Fed25519-20110926.pdf)%3A%20Paper%20introducing%20Ed25519%20signatures%0A-%20%5BTendermint%20Validator%20Keys%5D(https%3A%2F%2Fdocs.tendermint.com%2Fv0.34%2Ftendermint-core%2Fvalidators.html)%3A%20Tendermint%20Documentation%20highlighting%20the%20use%20of%20Ed25519%20keys%20for%20validators.%0A-%20%5BTendermint%20Public%20Key%20Cryptography%5D(https%3A%2F%2Fgithub.com%2Ftendermint%2Ftendermint%2Fblob%2Fmain%2Fspec%2Fcore%2Fencoding.md%23public-key-cryptography)%3A%20Documenation%20on%20Tendermints%20Public%20Key%20Cryptography.%0A-%20%5BTendermint%20Crypto%20Code%20Base%5D(https%3A%2F%2Fgithub.com%2Ftendermint%2Ftendermint%2Ftree%2Fmain%2Fcrypto)%3A%20crypto%20is%20the%20cryptographic%20package%20adapted%20for%20Tendermint's%20uses%20(go)%0A%20%20-%20%5Bkey.go%5D(https%3A%2F%2Fgithub.com%2Ftendermint%2Ftendermint%2Fblob%2Fmain%2Fp2p%2Fkey.go%23L50)%3A%20Tendermint%20Validator%20Key%20Management(go).%20_LoadOrGenNodeKey%20attempts%20to%20load%20the%20NodeKey%20from%20the%20given%20filePath.%20If%20the%20file%20does%20not%20exist%2C%20it%20generates%20and%20saves%20a%20new%20NodeKey._%0A%20%20-%20%5Bed25519.go%5D(https%3A%2F%2Fgithub.com%2Fmaticnetwork%2Ftendermint%2Fblob%2Fpeppermint%2Fcrypto%2Fed25519%2Fed25519.go)%3A%20Used%20for%20signing%20messages%20with%20an%20ed25519%20private%20key.%0A%0A**Light%20Client**%0A%0A-%20%5BLight%20Client%5D(https%3A%2F%2Fdocs.tendermint.com%2Fv0.34%2Ftendermint-core%2Flight-client.html)%3A%20he%20objective%20of%20the%20light%20client%20protocol%20is%20to%20get%20a%20commit%20for%20a%20recent%20block%20hash%20where%20the%20commit%20includes%20a%20majority%20of%20signatures%20from%20the%20last%20known%20validator%20set.%20From%20there%2C%20all%20the%20application%20state%20is%20verifiable%20with%20%5Bmerkle%20proofs%5D(https%3A%2F%2Fgithub.com%2Ftendermint%2Fspec%2Fblob%2Fmaster%2Fspec%2Fcore%2Fencoding.md%23iavl-tree).%0A-%20%5Btendermint%20light%20package%5D(https%3A%2F%2Fpkg.go.dev%2Fgithub.com%2Ftendermint%2Ftendermint%2Flight)(go)%3A%20Tendermint%20light%20clients%20allow%20bandwidth%20%26%20compute-constrained%20devices%2C%20such%20as%20smartphones%2C%20low-power%20embedded%20chips%2C%20or%20other%20blockchains%20to%20efficiently%20verify%20the%20consensus%20of%20a%20Tendermint%20blockchain.%20This%20forms%20the%20basis%20of%20safe%20and%20efficient%20state%20synchronization%20for%20new%20network%20nodes%20and%20inter-blockchain%20communication%20(where%20a%20light%20client%20of%20one%20Tendermint%20instance%20runs%20in%20another%20chain's%20state%20machine).%20(%5Btendermint%20light%20source%20code%5D(https%3A%2F%2Fgithub.com%2Ftendermint%2Ftendermint%2Ftree%2Fmain%2Flight)(go)).%0A%0A**Serialization%2FDeSerialization**%0A%0A-%20%5BTendermint%20has%20four%20serialization%20protocols%5D(https%3A%2F%2Fgithub.com%2Ftendermint%2Ftendermint%2Fissues%2F608)%0A%0A**Staking**%0A%0A**Additional**%0A%0A%3Ca%20name%3D%22f24%22%3E%5B24%5D%3C%2Fa%3E%20See%20%5BCosmos%20IBC%0Adocumentation%5D(https%3A%2F%2Ftutorials.cosmos.network%2Facademy%2F3-ibc%2F1-what-is-ibc.html)%0A%0A%3Ca%20name%3D%22f25%22%3E%5B25%5D%3C%2Fa%3E%20See%20%5BCosmos%20Hub%0Aoverview%5D(https%3A%2F%2Fhub.cosmos.network%2Fmain%2Fvalidators%2Foverview.html)%0A%0A%3Ca%20name%3D%22f26%22%3E%5B26%5D%3C%2Fa%3E%20See%20%5BTendermint%20Core%0Adocumentation%5D(https%3A%2F%2Fdocs.tendermint.com%2Fv0.34%2Ftendermint-core%2Fvalidators.html%23validator-keys)%0A",lastUpdatedAt:1753125084e3},{lazy:()=>o2(()=>import("./cosmos-BPku5gGC.js"),[]),path:"/research/chains/cosmos.html",type:"mdx",filePath:"research/chains/cosmos.mdx",content:"%23%20Cosmos%0A%0A-date%3A%202023-02-04%0A%0A-%20last%20updated%3A%202023-02-04%0A%0A%23%23%20Overview%0A%0ACosmos%20is%20the%20hub%20to%20almost%2050%20blockchains%20based%20on%20the%20Tendermint%20consensus%20engine%20and%20Inter-Blockchain%20Communication%20(IBC)%20protocol.%20It%20is%20also%20one%20of%20the%20earliest%20proponents%20for%20cross-chain%20communication%20and%20defined%20the%20first%20set%20of%20communication%20specificiations%3Csup%3E%5B24%5D(%23f24)%3C%2Fsup%3E.%20From%20a%20purely%20technical%20point%20of%20view%2C%20the%20signature%20scheme%20for%20signing%20blocks%2C%20Ed25519%2C%20is%20also%20often%20used%20in%20many%20other%20protocols%2C%20such%20as%20NEAR.%0A%0ACosmos%20Hub%20itself%20has%20175%20validators%3Csup%3E%5B25%5D(%23f25)%3C%2Fsup%3E%20and%20is%20built%20upon%20Tendermint%2C%20in%20which%20validators%20sign%20blocks%20using%20EdDSA%20on%20Curve25519%20(i.e.%2C%20Ed25519)%3Csup%3E%5B26%5D(%23f26)%3C%2Fsup%3E.%0A%0A%23%23%20Consensus%20Mechanism%0A%0AFor%20a%20deep%20dive%20on%20Tendemints%20Consensus%2C%20please%20read%20%5BThe%20latest%20gossip%20on%20BFT%20consensus%5D(https%3A%2F%2Farxiv.org%2Fpdf%2F1807.04938.pdf)%3A%20The%20paper%20presents%20Tendermint%2C%20a%20new%20protocol%20for%20ordering%20events%20in%20a%20distributed%20network%20under%20adversarial%20conditions.%0A%0AFollowing%20is%20an%20excerpt%20from%20%5BWhat%20is%20Tendermint%5D(https%3A%2F%2Fgithub.com%2Ftendermint%2Ftendermint%2Fblob%2Fmain%2Fdocs%2Fintroduction%2Fwhat-is-tendermint.mdx)%0A%0A%3E%20Tendermint%20is%20an%20easy-to-understand%2C%20mostly%20asynchronous%2C%20BFT%20consensus%20protocol.%20The%20protocol%20follows%20a%20simple%20state%20machine%20that%20looks%20like%20this%3A%0A%0A!%5Bconsensus-logic%5D(%2Fassets%2Fresearch%2Ftendermint_consensus_logic.png)%0A%0A%3E%20Participants%20in%20the%20protocol%20are%20called%20**validators**%3B%20they%20take%20turns%20proposing%20blocks%20of%20transactions%20and%20voting%20on%20them.%20Blocks%20are%20committed%20in%20a%20chain%2C%20with%20one%20block%20at%20each%20**height**.%20A%20block%20may%20fail%20to%20be%20committed%2C%20in%20which%20case%20the%20protocol%20moves%20to%20the%20next%20**round**%2C%20and%20a%20new%20validator%20gets%20to%20propose%20a%20block%20for%20that%20height.%20Two%20stages%20of%20voting%20are%20required%20to%20successfully%20commit%20a%20block%3B%20we%20call%20them%20**pre-vote**%20and%20**pre-commit**.%20A%20block%20is%20committed%20when%20more%20than%202%2F3%20of%20validators%20pre-commit%20for%20the%20same%20block%20in%20the%20same%20round.%0A%0A%3E%20There%20is%20a%20picture%20of%20a%20couple%20doing%20the%20polka%20because%20validators%20are%20doing%20something%20like%20a%20polka%20dance.%20When%20more%20than%20two-thirds%20of%20the%20validators%20pre-vote%20for%20the%20same%20block%2C%20we%20call%20that%20a%20**polka**.%20Every%20pre-commit%20must%20be%20justified%20by%20a%20polka%20in%20the%20same%20round.%0A%0A%3E%20Validators%20may%20fail%20to%20commit%20a%20block%20for%20a%20number%20of%20reasons%3B%20the%20current%20proposer%20may%20be%20offline%2C%20or%20the%20network%20may%20be%20slow.%20Tendermint%20allows%20them%20to%20establish%20that%20a%20validator%20should%20be%20skipped.%20Validators%20wait%20a%20small%20amount%20of%20time%20to%20receive%20a%20complete%20proposal%20block%20from%20the%20proposer%20before%20voting%20to%20move%20to%20the%20next%20round.%20This%20reliance%20on%20a%20timeout%20is%20what%20makes%20Tendermint%20a%20weakly%20synchronous%20protocol%2C%20rather%20than%20an%20asynchronous%20one.%20However%2C%20the%20rest%20of%20the%20protocol%20is%20asynchronous%2C%20and%20validators%20only%20make%20progress%20after%20hearing%20from%20more%20than%20two-thirds%20of%20the%20validator%20set.%20A%20simplifying%20element%20of%20Tendermint%20is%20that%20it%20uses%20the%20same%20mechanism%20to%20commit%20a%20block%20as%20it%20does%20to%20skip%20to%20the%20next%20round.%0A%0A%3E%20Assuming%20less%20than%20one-third%20of%20the%20validators%20are%20Byzantine%2C%20Tendermint%20guarantees%20that%20safety%20will%20never%20be%20violated%20-%20that%20is%2C%20validators%20will%20never%20commit%20conflicting%20blocks%20at%20the%20same%20height.%20To%20do%20this%20it%20introduces%20a%20few%20**locking**%20rules%20which%20modulate%20which%20paths%20can%20be%20followed%20in%20the%20flow%20diagram.%20Once%20a%20validator%20precommits%20a%20block%2C%20it%20is%20locked%20on%20that%20block.%20Then%2C%0A%0A%3E%201.%20it%20must%20prevote%20for%20the%20block%20it%20is%20locked%20on%0A%3E%202.%20it%20can%20only%20unlock%2C%20and%20precommit%20for%20a%20new%20block%2C%20if%20there%20is%20a%20polka%20for%20that%20block%20in%20a%20later%20round%0A%0A%23%23%20Signing%20Mechanism%0A%0ABelow%20is%20an%20excerpt%20from%20%5BTendermint%20Specification%5D(https%3A%2F%2Fgithub.com%2Ftendermint%2Ftendermint%2Fblob%2Fmain%2Fspec%2Fcore%2Fencoding.md%23public-key-cryptography)%0A%0A%3E%20Tendermint%20uses%20Protobuf%20%5BOneof%5D(https%3A%2F%2Fprotobuf.dev%2Fprogramming-guides%2Fproto3%2F%23oneof)%20to%20distinguish%20between%20different%20types%20public%20keys%2C%20and%20signatures.%20Additionally%2C%20for%20each%20public%20key%2C%20Tendermint%20defines%20an%20Address%20function%20that%20can%20be%20used%20as%20a%20more%20compact%20identifier%20in%20place%20of%20the%20public%20key.%0A%3E%0A%3E%20%23%23%23%20Key%20Types%0A%3E%0A%3E%20Each%20type%20specifies%20it's%20own%20pubkey%2C%20address%2C%20and%20signature%20format.%0A%3E%0A%3E%20%23%23%23%23%20Ed25519%0A%3E%0A%3E%20The%20address%20is%20the%20first%2020-bytes%20of%20the%20SHA256%20hash%20of%20the%20raw%2032-byte%20public%20key%3A%0A%3E%0A%3E%20%60%60%60go%0A%3E%20address%20%3D%20SHA256(pubkey)%5B%3A20%5D%0A%3E%20%60%60%60%0A%3E%0A%3E%20The%20signature%20is%20the%20raw%2064-byte%20ED25519%20signature.%0A%3E%0A%3E%20Tendermint%20adopted%20%5Bzip215%5D(https%3A%2F%2Fzips.z.cash%2Fzip-0215)%20for%20verification%20of%20ed25519%20signatures.%0A%3E%0A%3E%20Note%3A%20This%20change%20will%20be%20released%20in%20the%20next%20major%20release%20of%20Tendermint-Go%20(0.35).%0A%0A%23%23%23%23%20Secp256k1%0A%0AThe%20address%20is%20the%20first%2020-bytes%20of%20the%20SHA256%20hash%20of%20the%20raw%2032-byte%20public%20key%3A%0A%0A%60%60%60go%0Aaddress%20%3D%20SHA256(pubkey)%5B%3A20%5D%0A%60%60%60%0A%0AFollowing%20is%20an%20excerpt%20from%20%5BTendermint%20docs%3A%20Validator%20Keys%5D(https%3A%2F%2Fdocs.tendermint.com%2Fv0.34%2Ftendermint-core%2Fvalidators.html%23)%0A%0A%3E%20Currently%20Tendermint%20uses%20Ed25519%20(opens%20new%20window)keys%20which%20are%20widely%20supported%20across%20the%20security%20sector%20and%20HSMs.%0A%0A%23%23%20Code%20Review%0A%0A%23%23%23%20Signing%0A%0A-%20%5Bed25519%5D(https%3A%2F%2Fgithub.com%2Ftendermint%2Ftendermint%2Ftree%2Fmain%2Fcrypto%2Fed25519)%3A%20Sign%20produces%20a%20signature%20on%20the%20provided%20message.%20This%20assumes%20the%20privkey%20is%20wellformed%20in%20the%20golang%20format.%20The%20first%2032%20bytes%20should%20be%20random%2C%20corresponding%20to%20the%20normal%20ed25519%20private%20key.%20The%20latter%2032%20bytes%20should%20be%20the%20compressed%20public%20key.%20If%20these%20conditions%20aren't%20met%2C%20Sign%20will%20panic%20or%20produce%20an%20incorrect%20signature.%0A-%20%5Bsecp256k1%5D(https%3A%2F%2Fgithub.com%2Ftendermint%2Ftendermint%2Ftree%2Fmain%2Fcrypto%2Fsecp256k1)%0A-%20%5Bsr25519%5D(https%3A%2F%2Fgithub.com%2Ftendermint%2Ftendermint%2Ftree%2Fmain%2Fcrypto%2Fsr25519)%0A-%20%5Bcodec.go%5D(https%3A%2F%2Fgithub.com%2Ftendermint%2Ftendermint%2Fblob%2Fmain%2Fcrypto%2Fencoding%2Fcodec.go)%3A%20Tranforms%20protobuf%20publick%20key%20to%20crypto%20public%20keys%20and%20vice%20versa.%20Support%20secp256k1%20and%20edd25519.%0A%0A%23%23%23%20Consensus%0A%0A-%20%5Bconsensus%5D(https%3A%2F%2Fgithub.com%2Ftendermint%2Ftendermint%2Ftree%2Fmain%2Fconsensus)%0A%20%20-%20%5Bstate%5D(https%3A%2F%2Fgithub.com%2Ftendermint%2Ftendermint%2Fblob%2Fmain%2Fconsensus%2Fstate.go)%3A%20State%20handles%20execution%20of%20the%20consensus%20algorithm.%20It%20processes%20votes%20and%20proposals%2C%20and%20upon%20reaching%20agreement%2C%20commits%20blocks%20to%20the%20chain%20and%20executes%20them%20against%20the%20application.%20The%20internal%20state%20machine%20receives%20input%20from%20peers%2C%20the%20internal%20validator%2C%20and%20from%20a%20timer.%0A%0A%23%23%23%20Cryptographic%20Primitives%0A%0A**general%20primitives**%0A%0A-%20%5Bbits%5D(https%3A%2F%2Fgithub.com%2Ftendermint%2Ftendermint%2Ftree%2Fmain%2Flibs%2Fbits)%3A%20BitArray%20is%20a%20thread-safe%20implementation%20of%20a%20bit%20array.%0A-%20%5Bbytes%5D(https%3A%2F%2Fgithub.com%2Ftendermint%2Ftendermint%2Ftree%2Fmain%2Flibs%2Fbytes)%3A%20Byte%20functions%20including%20marshalling%20and%20unmarshalling%20into%20JSON%20as%20well%20as%20fingerprint%20which%20returns%20the%20first%206%20bytes%20of%20a%20byte%20slice.%0A-%20%5Bclist%5D(https%3A%2F%2Fgithub.com%2Ftendermint%2Ftendermint%2Ftree%2Fmain%2Flibs%2Fclist)%3A%20provide%20a%20goroutine-safe%20linked-list.%20This%20list%20can%20be%20traversed%20concurrently%20by%20any%20number%20of%20goroutines.%20However%2C%20removed%20CElements%20cannot%20be%20added%20back.%0A-%20%5Bcmap%5D(https%3A%2F%2Fgithub.com%2Ftendermint%2Ftendermint%2Ftree%2Fmain%2Flibs%2Fcmap)%3A%20a%20goroutine-safe%20map%0A-%20%5Bflowrate%5D(https%3A%2F%2Fgithub.com%2Ftendermint%2Ftendermint%2Ftree%2Fmain%2Flibs%2Fflowrate)%3A%20provides%20the%20tools%20for%20monitoring%20and%20limiting%20the%20flow%20rate%20of%20an%20arbitrary%20data%20stream.%0A-%20%5Bjson%5D(https%3A%2F%2Fgithub.com%2Ftendermint%2Ftendermint%2Ftree%2Fmain%2Flibs%2Fjson)%3A%20provides%20functions%20for%20marshaling%20and%20unmarshaling%20JSON%20in%20a%20format%20that%20is%20backwards-compatible%20with%20Amino%20JSON%20encoding.%20This%20mostly%20differs%20from%20encoding%2Fjson%20in%20encoding%20of%20integers%20(64-bit%20integers%20are%20encoded%20as%20strings%2C%20not%20numbers)%2C%20and%20handling%20of%20interfaces%20(wrapped%20in%20an%20interface%20object%20with%20type%2Fvalue%20keys).%0A-%20%5Bmath%5D(https%3A%2F%2Fgithub.com%2Ftendermint%2Ftendermint%2Ftree%2Fmain%2Flibs%2Fmath)%3A%20math%20functions%20including%20fractions%20and%20safemath.%0A-%20%5Bpubsub%5D(https%3A%2F%2Fgithub.com%2Ftendermint%2Ftendermint%2Ftree%2Fmain%2Flibs%2Fpubsub)%3A%20implements%20a%20pub-sub%20model%20with%20a%20single%20publisher%20(Server)%20and%20multiple%20subscribers%20(clients).%0A-%20%5Bstrings%5D(https%3A%2F%2Fgithub.com%2Ftendermint%2Ftendermint%2Ftree%2Fmain%2Flibs%2Fstrings)%3A%20string%20manipulation%20functions.%0A%0A**hash%20functions**%0A%0A-%20%5Btmhash%5D(https%3A%2F%2Fgithub.com%2Ftendermint%2Ftendermint%2Fblob%2Fmain%2Fcrypto%2Ftmhash%2Fhash.go)%3A%20Tendermint%20implementation%20of%20SHA256%20hash.%0A-%20%5Bhash%5D(https%3A%2F%2Fgithub.com%2Ftendermint%2Ftendermint%2Fblob%2Fmain%2Fcrypto%2Fhash.go)%3A%20included%20in%20tmhash.%0A%0A**encryption**%0A%0A-%20%5Barmor%5D(https%3A%2F%2Fgithub.com%2Ftendermint%2Ftendermint%2Fblob%2Fmain%2Fcrypto%2Farmor%2Farmor.go)%3A%20implementation%20of%20%5BOpenPGP%20ASCII%20Armor%5D(https%3A%2F%2Fwww.rfc-editor.org%2Frfc%2Frfc4880.html).%0A-%20%5Bxchacha20poly1305%5D(https%3A%2F%2Fgithub.com%2Ftendermint%2Ftendermint%2Ftree%2Fmain%2Fcrypto%2Fxchacha20poly1305)%3A%20Tendermint%20implementation%20of%20%5BChaCha20-Poly1305%5D(https%3A%2F%2Fen.wikipedia.org%2Fwiki%2FChaCha20-Poly1305)%20an%20authenticated%20encryption%20with%20additional%20data%20(AEAD)%20algorithm%2C%20that%20combines%20the%20ChaCha20%20stream%20cipher%20with%20the%20Poly1305%20message%20authentication%20code.%0A-%20%5Bxsalsa20symmetric%5D(https%3A%2F%2Fgithub.com%2Ftendermint%2Ftendermint%2Ftree%2Fmain%2Fcrypto%2Fxsalsa20symmetric)%3A%20Tendermint%20implementation%20of%20%5BSalsa20%5D(https%3A%2F%2Fen.wikipedia.org%2Fwiki%2FSalsa20).%0A%0A**random%20number%20generators**%0A%0A-%20%5Brandom.go%5D(https%3A%2F%2Fgithub.com%2Ftendermint%2Ftendermint%2Fblob%2Fmain%2Fcrypto%2Frandom.go)%3A%20only%20uses%20the%20OS's%20randomness.%20CRandHex%20returns%20a%20hex%20encoded%20string%20that's%20floor(numDigits%2F2)%20*2%20long.*Note%3A%20CRandHex(24)%20gives%2096%20bits%20of%20randomness%20that%20are%20usually%20strong%20enough%20for%20most%20purposes.%5C*%0A-%20%5Brand%5D(https%3A%2F%2Fgithub.com%2Ftendermint%2Ftendermint%2Ftree%2Fmain%2Flibs%2Frand)%3A%20prng%2C%20that%20is%20seeded%20with%20OS%20randomness.%20The%20OS%20randomness%20is%20obtained%20from%20crypto%2Frand%2C%20however%20none%20of%20the%20provided%20methods%20are%20suitable%20for%20cryptographic%20usage.%20They%20all%20utilize%20math%2Frand's%20prng%20internally.%20All%20of%20the%20methods%20here%20are%20suitable%20for%20concurrent%20use.%20This%20is%20achieved%20by%20using%20a%20mutex%20lock%20on%20all%20of%20the%20provided%20methods.%0A%0A**serilization%2Fdeserialization**%0A%0A%23%23%20References%0A%0A**Consensus**%0A%0A-%20%5BTendermint%20Byzantine%20Consensus%20Algorithm%20Specification%5D(https%3A%2F%2Fgithub.com%2Ftendermint%2Ftendermint%2Fblob%2Fmain%2Fspec%2Fconsensus%2Fconsensus.mdx)%3A%20Specification%20for%20Tendermints%20Consensus%20including%20state%20machine%2C%20background%20gossip%20(messaging)%20and%20proofs.%0A-%20%5BTendermint%20Consensus%20Overview%5D(https%3A%2F%2Fdocs.tendermint.com%2Fv0.34%2Fintroduction%2Fwhat-is-tendermint.html%23consensus-overview)%3A%20Tendermint%20Consensus%20Overview%20Documentation.%0A-%20%5BProposer%20Selection%20Procedure%20Specification%5D(https%3A%2F%2Fgithub.com%2Ftendermint%2Ftendermint%2Fblob%2Fmain%2Fspec%2Fconsensus%2Fproposer-selection.mdx)%3A%20Specifies%20the%20Proposer%20Selection%20Procedure%20that%20is%20used%20in%20Tendermint%20to%20choose%20a%20round%20proposer%20for%20its%20%22leader-based-protocol%22.%0A%0A**Signing**%0A%0A-%20%5BEd25519%3A%20high-speed%20high-security%20signatures%5D(https%3A%2F%2Fed25519.cr.yp.to%2F)%3A%20Ed25519%20Signature%20Information%0A%20%20-%20%5BHigh-speed%20high-security%20signatures%5D(https%3A%2F%2Fed25519.cr.yp.to%2Fed25519-20110926.pdf)%3A%20Paper%20introducing%20Ed25519%20signatures%0A-%20%5BTendermint%20Validator%20Keys%5D(https%3A%2F%2Fdocs.tendermint.com%2Fv0.34%2Ftendermint-core%2Fvalidators.html)%3A%20Tendermint%20Documentation%20highlighting%20the%20use%20of%20Ed25519%20keys%20for%20validators.%0A-%20%5BTendermint%20Public%20Key%20Cryptography%5D(https%3A%2F%2Fgithub.com%2Ftendermint%2Ftendermint%2Fblob%2Fmain%2Fspec%2Fcore%2Fencoding.md%23public-key-cryptography)%3A%20Documenation%20on%20Tendermints%20Public%20Key%20Cryptography.%0A-%20%5BTendermint%20Crypto%20Code%20Base%5D(https%3A%2F%2Fgithub.com%2Ftendermint%2Ftendermint%2Ftree%2Fmain%2Fcrypto)%3A%20crypto%20is%20the%20cryptographic%20package%20adapted%20for%20Tendermint's%20uses%20(go)%0A%20%20-%20%5Bkey.go%5D(https%3A%2F%2Fgithub.com%2Ftendermint%2Ftendermint%2Fblob%2Fmain%2Fp2p%2Fkey.go%23L50)%3A%20Tendermint%20Validator%20Key%20Management(go).%20_LoadOrGenNodeKey%20attempts%20to%20load%20the%20NodeKey%20from%20the%20given%20filePath.%20If%20the%20file%20does%20not%20exist%2C%20it%20generates%20and%20saves%20a%20new%20NodeKey._%0A%20%20-%20%5Bed25519.go%5D(https%3A%2F%2Fgithub.com%2Fmaticnetwork%2Ftendermint%2Fblob%2Fpeppermint%2Fcrypto%2Fed25519%2Fed25519.go)%3A%20Used%20for%20signing%20messages%20with%20an%20ed25519%20private%20key.%0A%0A**Light%20Client**%0A%0A-%20%5BLight%20Client%5D(https%3A%2F%2Fdocs.tendermint.com%2Fv0.34%2Ftendermint-core%2Flight-client.html)%3A%20he%20objective%20of%20the%20light%20client%20protocol%20is%20to%20get%20a%20commit%20for%20a%20recent%20block%20hash%20where%20the%20commit%20includes%20a%20majority%20of%20signatures%20from%20the%20last%20known%20validator%20set.%20From%20there%2C%20all%20the%20application%20state%20is%20verifiable%20with%20%5Bmerkle%20proofs%5D(https%3A%2F%2Fgithub.com%2Ftendermint%2Fspec%2Fblob%2Fmaster%2Fspec%2Fcore%2Fencoding.md%23iavl-tree).%0A-%20%5Btendermint%20light%20package%5D(https%3A%2F%2Fpkg.go.dev%2Fgithub.com%2Ftendermint%2Ftendermint%2Flight)(go)%3A%20Tendermint%20light%20clients%20allow%20bandwidth%20%26%20compute-constrained%20devices%2C%20such%20as%20smartphones%2C%20low-power%20embedded%20chips%2C%20or%20other%20blockchains%20to%20efficiently%20verify%20the%20consensus%20of%20a%20Tendermint%20blockchain.%20This%20forms%20the%20basis%20of%20safe%20and%20efficient%20state%20synchronization%20for%20new%20network%20nodes%20and%20inter-blockchain%20communication%20(where%20a%20light%20client%20of%20one%20Tendermint%20instance%20runs%20in%20another%20chain's%20state%20machine).%20(%5Btendermint%20light%20source%20code%5D(https%3A%2F%2Fgithub.com%2Ftendermint%2Ftendermint%2Ftree%2Fmain%2Flight)(go)).%0A%0A**Serialization%2FDeSerialization**%0A%0A-%20%5BTendermint%20has%20four%20serialization%20protocols%5D(https%3A%2F%2Fgithub.com%2Ftendermint%2Ftendermint%2Fissues%2F608)%0A%0A**Staking**%0A%0A**Additional**%0A%0A%3Ca%20name%3D%22f24%22%3E%5B24%5D%3C%2Fa%3E%20See%20%5BCosmos%20IBC%0Adocumentation%5D(https%3A%2F%2Ftutorials.cosmos.network%2Facademy%2F3-ibc%2F1-what-is-ibc.html)%0A%0A%3Ca%20name%3D%22f25%22%3E%5B25%5D%3C%2Fa%3E%20See%20%5BCosmos%20Hub%0Aoverview%5D(https%3A%2F%2Fhub.cosmos.network%2Fmain%2Fvalidators%2Foverview.html)%0A%0A%3Ca%20name%3D%22f26%22%3E%5B26%5D%3C%2Fa%3E%20See%20%5BTendermint%20Core%0Adocumentation%5D(https%3A%2F%2Fdocs.tendermint.com%2Fv0.34%2Ftendermint-core%2Fvalidators.html%23validator-keys)%0A",lastUpdatedAt:1753125084e3},{lazy:()=>o2(()=>import("./ethereum-1-0-p_j_Rzip.js"),[]),path:"/research/chains/ethereum-1-0",type:"mdx",filePath:"research/chains/ethereum-1-0.mdx",content:"%23%20Ethereum%201.0%0A%0Adate%3A%202023-02-04%0Alast-updated%3A%202023-02-04%0A%0A%23%23%20Overview%0A%0A%23%23%20Consensus%20Mechanism%0A%0A%23%23%23%20Ethereum%201.0%20Proof%20Of%20Work%0A%0A%3E%20Existing%20Blockchain%20technology%20is%20working%20on%20the%20core%20concept%20of%20'Proof%20Of%20Work'%20(POW).%20A%20proof-of-work%20(PoW)%20is%20a%20protocol%20that%20is%20difficult%20to%20compute%20but%20easy%20to%20verify.%20It%20can%20be%20verified%20in%20far%20less%20time%20than%20it%20took%20to%20compute%20in%20first%20place.%20The%20process%20involves%20scanning%20for%20a%20value%20that%20when%20hashed%2C%20(such%20as%20with%20SHA-256)%2C%20the%20hash%20begins%20with%20a%20number%20of%20zero%20bits.%20The%20average%20work%20required%20is%20exponential%20in%20the%20number%20of%20zero%20bits%20required%20and%20can%20be%20verified%20by%20executing%20a%20single%20hash.%20In%20simple%20words%2C%20Proof%20of%20work%20is%20an%20expensive%20computation%20done%20by%20all%20miners%20to%20compete%20to%20find%20a%20number%20that%2C%20when%20added%20to%20the%20block%20of%20transactions%2C%20causes%20this%20block%20to%20hash%20to%20a%20code%20with%20certain%20rare%20properties.%20Finding%20such%20a%20rare%20number%20is%20hard%20(based%20on%20the%20cryptographic%20features%20of%20the%20hash%20function%20used%20in%20this%20process)%2C%20but%20verifying%20its%20validity%20when%20it's%20found%20is%20relatively%20easy.%20One%20can%20take%20the%20challenge%2C%20the%20proof%20string%20and%20hash%20them%20together%20and%20check%20if%20the%20hash%20begins%20with%20a%20number%20of%20zero%20bits.%20This%20requires%20to%20apply%20the%20hash%20function%20just%20once%20and%20verify%20the%20output%20indeed%20has%20requisite%20numbers%20of%200's%20in%20front.%20If%20so%2C%20then%20the%20proof%20of%20work%20is%20considered%20valid%20under%20the%20application%20of%20that%20cryptographic%20hash%20function.%20Every%20block%20in%20the%20participating%20network%20should%20contain%20such%20rare%20number.%0A%0A!%5BProof%20Of%20Work%5D(%2Fassets%2Fresearch%2Fpow.png%20%22Proof%20Of%20Work%22)%0A%0ABlock%20Structure%20from%20%5Bgo-ethereum%5D(https%3A%2F%2Fgithub.com%2Fethereum%2Fgo-ethereum%2Fblob%2Frelease%2F1.9%2Fconsensus%2Fethash%2Fconsensus.go)%0A%0A%60%60%60%0A%2F%2F%20SealHash%20returns%20the%20hash%20of%20a%20block%20prior%20to%20it%20being%20sealed.%0Afunc%20(ethash%20*Ethash)%20SealHash(header%20*types.Header)%20(hash%20common.Hash)%20%7B%0A%20hasher%20%3A%3D%20sha3.NewLegacyKeccak256()%0A%0A%20rlp.Encode(hasher%2C%20%5B%5Dinterface%7B%7D%7B%0A%20%20header.ParentHash%2C%0A%20%20header.UncleHash%2C%0A%20%20header.Coinbase%2C%0A%20%20header.Root%2C%0A%20%20header.TxHash%2C%0A%20%20header.ReceiptHash%2C%0A%20%20header.Bloom%2C%0A%20%20header.Difficulty%2C%0A%20%20header.Number%2C%0A%20%20header.GasLimit%2C%0A%20%20header.GasUsed%2C%0A%20%20header.Time%2C%0A%20%20header.Extra%2C%0A%20%7D)%0A%20hasher.Sum(hash%5B%3A0%5D)%0A%20return%20hash%0A%7D%0A%60%60%60%0A%0A%23%23%20Signing%20Mechanism%0A%0ATransactions%20are%20signed%20using%20recoverable%20ECDSA%20signatures.%20This%20method%20utilises%20the%20SECP-256k1%20curve.%20(see%20the%20%5BEthereum%20Yellow%20Paper%5D(https%3A%2F%2Fethereum.github.io%2Fyellowpaper%2Fpaper.pdf)%20Appendix%20F.%20Signing%20Transactions).%20go-ethereum%20utilizes%20the%20%5Bsecp256k1%5D(https%3A%2F%2Fgithub.com%2Fethereum%2Fgo-ethereum%2Ftree%2Fmaster%2Fcrypto%2Fsecp256k1)%20package%20which%20wraps%20the%20bitcoin%20secp256k1%20C%20library.%20Signing%20is%20handled%20by%20the%20%5Bsigner%5D(https%3A%2F%2Fgithub.com%2Fethereum%2Fgo-ethereum%2Ftree%2Fmaster%2Fsigner)%20receives%20a%20request%20and%20produces%20a%20signature.%20Note%2C%20the%20produced%20signature%20conforms%20to%20the%20secp256k1%20curve%20R%2C%20S%20and%20V%20values%2C%20where%20the%20V%20value%20will%20be%2027%20or%2028%20for%20legacy%20reasons%2C%20if%20legacyV%3D%3Dtrue.%0A%0A%23%23%20Code%20Review%0A%0A%23%23%23%20Signing%0A%0A-%20%5Bbls12381%5D(https%3A%2F%2Fgithub.com%2Fethereum%2Fgo-ethereum%2Ftree%2Fmaster%2Fcrypto%2Fbls12381)%3A%20BLS12-381%20is%20a%20pairing-friendly%20elliptic%20curve.%0A-%20%5Bbn256%5D(https%3A%2F%2Fgithub.com%2Fethereum%2Fgo-ethereum%2Ftree%2Fmaster%2Fcrypto%2Fbn256)%3A%20Package%20bn256%20implements%20the%20Optimal%20Ate%20pairing%20over%20a%20256-bit%20Barreto-Naehrig%20curve.%20(%5Binsecure%5D(https%3A%2F%2Fmoderncrypto.org%2Fmail-archive%2Fcurves%2F2016%2F000740.html))%0A-%20%5Bsecp256k1%5D(https%3A%2F%2Fgithub.com%2Fethereum%2Fgo-ethereum%2Ftree%2Fmaster%2Fcrypto%2Fsecp256k1)%3A%20Package%20secp256k1%20wraps%20the%20bitcoin%20secp256k1%20C%20library.%0A-%20%5Bsigner%5D(https%3A%2F%2Fgithub.com%2Fethereum%2Fgo-ethereum%2Ftree%2Fmaster%2Fsigner)%3A%20sign%20receives%20a%20request%20and%20produces%20a%20signature.%20Note%2C%20the%20produced%20signature%20conforms%20to%20the%20secp256k1%20curve%20R%2C%20S%20and%20V%20values%2C%20where%20the%20V%20value%20will%20be%2027%20or%2028%20for%20legacy%20reasons%2C%20if%20legacyV%3D%3Dtrue.%0A%0A%23%23%23%20Consensus%0A%0A-%20%5Bconsensus%5D(https%3A%2F%2Fgithub.com%2Fethereum%2Fgo-ethereum%2Ftree%2Fmaster%2Fconsensus)%0A%20%20-%20%5Balgorithm%5D(https%3A%2F%2Fgithub.com%2Fethereum%2Fgo-ethereum%2Fblob%2Fmaster%2Fconsensus%2Fethash%2Falgorithm.go)%3A%20hashimoto%20aggregates%20data%20from%20the%20full%20dataset%20in%20order%20to%20produce%20our%20final%20value%20for%20a%20particular%20header%20hash%20and%20nonce.%0A%20%20-%20%5Bapi%5D(https%3A%2F%2Fgithub.com%2Fethereum%2Fgo-ethereum%2Fblob%2Fmaster%2Fconsensus%2Fethash%2Fapi.go)%3A%20API's%20include%20GetWork%2C%20SubmitWork%2C%20SubmitHashRate%20and%20GetHashRate.%0A%20%20-%20%5Bethhash%5D(https%3A%2F%2Fgithub.com%2Fethereum%2Fgo-ethereum%2Ftree%2Fmaster%2Fconsensus)%3A%20Package%20ethash%20implements%20the%20ethash%20proof-of-work%20consensus%20engine.%0A%20%20-%20%5Bsealer%5D(https%3A%2F%2Fgithub.com%2Fethereum%2Fgo-ethereum%2Fblob%2Fmaster%2Fconsensus%2Fethash%2Fsealer.go)%3A%20Seal%20implements%20consensus.Engine%2C%20attempting%20to%20find%20a%20nonce%20that%20satisfies%20the%20block's%20difficulty%20requirements.%0A-%20Additional%20Consensus%20Engines%0A%20%20-%20%5Bbeacon%5D(https%3A%2F%2Fgithub.com%2Fethereum%2Fgo-ethereum%2Ftree%2Fmaster%2Fconsensus%2Fbeacon)%3A%20Beacon%20is%20a%20consensus%20engine%20that%20combines%20the%20eth1%20consensus%20and%20proof-of-stake%20algorithm.%20There%20is%20a%20special%20flag%20inside%20to%20decide%20whether%20to%20use%20legacy%20consensus%20rules%20or%20new%20rules.%20The%20transition%20rule%20is%20described%20in%20the%20eth1%2F2%20merge%20spec%5BEIP-3675%5D(https%3A%2F%2Fgithub.com%2Fethereum%2FEIPs%2Fblob%2Fmaster%2FEIPS%2Feip-3675.mdx).%20The%20beacon%20here%20is%20a%20half-functional%20consensus%20engine%20with%20partial%20functions%20which%20is%20only%20used%20for%20necessary%20consensus%20checks.%20The%20legacy%20consensus%20engine%20can%20be%20any%20engine%20implements%20the%20consensus%20interface%20(except%20the%20beacon%20itself).%0A%20%20-%20%5Bclique%5D(https%3A%2F%2Fgithub.com%2Fethereum%2Fgo-ethereum%2Fblob%2Fmaster%2Fconsensus%2Fclique%2Fclique.go)%3A%20Package%20clique%20implements%20the%20proof-of-authority%20consensus%20engine.%0A%0A%23%23%23%20Cryptographic%20Primitives%0A%0A**general%20primitives**%0A%0A-%20%5Basm%5D(https%3A%2F%2Fgithub.com%2Fethereum%2Fgo-ethereum%2Ftree%2Fmaster%2Fcore%2Fasm)%3A%20Package%20asm%20provides%20support%20for%20dealing%20with%20EVM%20assembly%20instructions%20(e.g.%2C%20disassembling%20them).%0A-%20%5Bbitutil%5D(https%3A%2F%2Fgithub.com%2Fethereum%2Fgo-ethereum%2Ftree%2Fmaster%2Fcommon%2Fbitutil)%3A%20Package%20bitutil%20implements%20fast%20bitwise%20operations.%0A-%20%5Bbloombits%5D(https%3A%2F%2Fgithub.com%2Fethereum%2Fgo-ethereum%2Ftree%2Fmaster%2Fcore%2Fbloombits)%3A%20Package%20bloombits%20implements%20bloom%20filtering%20on%20batches%20of%20data.%0A-%20%5Bforkid%5D(https%3A%2F%2Fgithub.com%2Fethereum%2Fgo-ethereum%2Ftree%2Fmaster%2Fcore%2Fforkid)%3A%20Package%20forkid%20implements%20%5BEIP-2124%5D(https%3A%2F%2Feips.ethereum.org%2FEIPS%2Feip-2124).%0A-%20%5Bhexutil%5D(https%3A%2F%2Fgithub.com%2Fethereum%2Fgo-ethereum%2Ftree%2Fmaster%2Fcommon%2Fhexutil)%3A%20Package%20hexutil%20implements%20hex%20encoding%20with%200x%20prefix.%20This%20encoding%20is%20used%20by%20the%20Ethereum%20RPC%20API%20to%20transport%20binary%20data%20in%20JSON%20payloads.%0A-%20%5Blru%5D(https%3A%2F%2Fgithub.com%2Fethereum%2Fgo-ethereum%2Ftree%2Fmaster%2Fcommon%2Flru)%3A%20Package%20lru%20implements%20generically-typed%20Least%20Recently%20Used(LRU)%20caches.%0A-%20%5Bmath%5D(https%3A%2F%2Fgithub.com%2Fethereum%2Fgo-ethereum%2Ftree%2Fmaster%2Fcommon%2Fmath)%3A%20Package%20math%20provides%20integer%20math%20utilities.%0A-%20%5Bmclock%5D(https%3A%2F%2Fgithub.com%2Fethereum%2Fgo-ethereum%2Ftree%2Fmaster%2Fcommon%2Fmclock)%3A%20Package%20mclock%20is%20a%20wrapper%20for%20a%20monotonic%20clock%20source%0A-%20%5Bprque%5D(https%3A%2F%2Fgithub.com%2Fethereum%2Fgo-ethereum%2Ftree%2Fmaster%2Fcommon%2Fprque)%3APackage%20prque%20implements%20a%20priority%20queue%20data%20structure%20supporting%20arbitrary%20value%20types%20and%20int64%20priorities.%0A-%20%5Btrie%5D(https%3A%2F%2Fgithub.com%2Fethereum%2Fgo-ethereum%2Ftree%2Fmaster%2Ftrie)%3A%20Package%20trie%20implements%20Merkle%20Patricia%20Tries.%0A%0A**hash%20functions**%0A%0A-%20%5Bblake2b%5D(https%3A%2F%2Fgithub.com%2Fethereum%2Fgo-ethereum%2Ftree%2Fmaster%2Fcrypto%2Fblake2b)%20(go)%3A%20Package%20blake2b%20implements%20the%20BLAKE2b%20hash%20algorithm%20defined%20by%20RFC%207693%20and%20the%20extendable%20output%20function%20(XOF)%20BLAKE2Xb.%0A%0A**encryption**%0A%0A-%20%5Bsignify%5D(https%3A%2F%2Fgithub.com%2Fethereum%2Fgo-ethereum%2Ftree%2Fmaster%2Fcrypto%2Fsignify)%3A%20signFile%20reads%20the%20contents%20of%20an%20input%20file%20and%20signs%20it%20(in%20armored%20format)%20with%20the%20key%20provided%2C%20placing%20the%20signature%20into%20the%20output%20file.%5Bascii%20armored%20encryption%5D(https%3A%2F%2Fwww.rfc-editor.org%2Frfc%2Fpdfrfc%2Frfc4880.txt.pdf)%0A-%20%5Becies%5D(https%3A%2F%2Fgithub.com%2Fethereum%2Fgo-ethereum%2Ftree%2Fmaster%2Fcrypto%2Fecies)%3A%20a%20hybrid%20encryption%20scheme%0A%0A**random%20number%20generators**%0A%0A**serilization%2Fdeserialization**%0A%0A-%20%5BRLP%5D(https%3A%2F%2Fgithub.com%2Fethereum%2Fgo-ethereum%2Ftree%2Fmaster%2Frlp)%3A%20Package%20rlp%20implements%20the%20RLP%20serialization%20format.(%5Bdoc%5D(https%3A%2F%2Fgithub.com%2Fethereum%2Fgo-ethereum%2Fblob%2Fmaster%2Frlp%2Fdoc.go))%20The%20purpose%20of%20RLP%20(Recursive%20Linear%20Prefix)%20is%20to%20encode%20arbitrarily%20nested%20arrays%20of%20binary%20data%2C%20and%20RLP%20is%20the%20main%20encoding%20method%20used%20to%20serialize%20objects%20in%20Ethereum.%0A%20%20The%20only%20purpose%20of%20RLP%20is%20to%20encode%20structure%3B%20encoding%20specific%20atomic%20data%20types%20(eg.%0A%20%20strings%2C%20ints%2C%20floats)%20is%20left%20up%20to%20higher-order%20protocols.%20In%20Ethereum%20integers%20must%20be%0A%20%20represented%20in%20big%20endian%20binary%20form%20with%20no%20leading%20zeroes%20(thus%20making%20the%20integer%0A%20%20value%20zero%20equivalent%20to%20the%20empty%20string).%20RLP%20values%20are%20distinguished%20by%20a%20type%20tag.%20The%20type%20tag%20precedes%20the%20value%20in%20the%20input%20stream%20and%20defines%20the%20size%20and%20kind%20of%20the%20bytes%20that%20follow.%0A%0A**threading**%0A%0A**virtual%20machine**%0A%0A-%20%5Bvm%5D(https%3A%2F%2Fgithub.com%2Fethereum%2Fgo-ethereum%2Ftree%2Fmaster%2Fcore%2Fvm)%20%3A%20Package%20vm%20implements%20the%20Ethereum%20Virtual%20Machine.%20The%20vm%20package%20implements%20one%20EVM%2C%20a%20byte%20code%20VM.%20The%20BC%20(Byte%20Code)%20VM%20loops%20over%20a%20set%20of%20bytes%20and%20executes%20them%20according%20to%20the%20set%20of%20rules%20defined%20in%20the%20Ethereum%20yellow%20paper.%0A%0A**compiler**%0A%0A-%20%5Bcompiler%5D(https%3A%2F%2Fgithub.com%2Fethereum%2Fgo-ethereum%2Ftree%2Fmaster%2Fcommon%2Fcompiler)%3A%20Package%20compiler%20wraps%20the%20ABI%20compilation%20outputs.%20ParseCombinedJSON%20takes%20the%20direct%20output%20of%20a%20solc%20--combined-output%20run%20and%20parses%20it%20into%20a%20map%20of%20string%20contract%20name%20to%20Contract%20structs.%20The%20provided%20source%2C%20language%20and%20compiler%20version%2C%20and%20compiler%20options%20are%20all%20passed%20through%20into%20the%20Contract%20structs.%20The%20solc%20output%20is%20expected%20to%20contain%20ABI%2C%20source%20mapping%2C%20user%20docs%2C%20and%20dev%20docs.%20Returns%20an%20error%20if%20the%20JSON%20is%20malformed%20or%20missing%20data%2C%20or%20if%20the%20JSON%20embedded%20within%20the%20JSON%20is%20malformed.%0A%0A%23%23%20References%0A%0A**Consensus**%0A%0A-%20%5BProof%20of%20Work%20(POW)%2C%20Ethereum%20Org%2C%202022%5D(https%3A%2F%2Fethereum.org%2Fen%2Fdevelopers%2Fdocs%2Fconsensus-mechanisms%2Fpow%2F)%3A%20Ethereum%20Proof%20of%20Work%20Documentation.%0A-%20%5BProof%20Of%20Work%20(POW)%2C%20EtherWorld%202017%5D(https%3A%2F%2Fetherworld.co%2F2017%2F04%2F16%2Fproof-of-work-pow%2F)%3A%20Etherworld%20Proof%20of%20Work%20Guide.%0A-%20%5BEIP-1057%3A%20ProgPoW%2C%20a%20Programmatic%20Proof-of-Work%5D(https%3A%2F%2Feips.ethereum.org%2FEIPS%2Feip-1057)%3A%20ProgPoW%20is%20a%20proof-of-work%20algorithm%20designed%20to%20close%20the%20efficiency%20gap%20available%20to%20specialized%20ASICs.%0A%0A-%20%5Bconsensus%20go-ethereum%3A%20release%201.9%20(codebase)%5D(https%3A%2F%2Fgithub.com%2Fethereum%2Fgo-ethereum%2Fblob%2Frelease%2F1.9%2Fconsensus%2Fconsensus.go)%3A%20Engine%20is%20an%20algorithm%20agnostic%20consensus%20engine.%20(go)%0A-%20%5Bethash.go%2C%20go-ethereum%20release%201.9%20(codebase)%5D(https%3A%2F%2Fgithub.com%2Fethereum%2Fgo-ethereum%2Fblob%2Frelease%2F1.9%2Fconsensus%2Fethash%2Fethash.go)%3A%20Package%20ethash%20implements%20the%20ethash%20proof-of-work%20consensus%20engine.%20(go)%0A-%20%5Bethash.sol%2C%20horizon%20(codebase)%5D(https%3A%2F%2Fgithub.com%2Fjohnwhitton%2Fhorizon%2Fblob%2FrefactorV2%2Fcontracts%2Fethash%2Fethash.sol)%3A%20Solidity%20implementation%20enableing%20the%20verification%20of%20ethhash%20(solidity)%0A-%20%5Bethash.rs%2C%20parity-ethereum%20(codebase)%5D(https%3A%2F%2Fgithub.com%2Fopenethereum%2Fparity-ethereum%2Fblob%2Fv2.7.2-stable%2Fethash%2Fsrc%2Flib.rs)%3A%20EthashManager%20implementation%20by%20parity%20(rust).%0A-%20%5Bprogpow.ps%2C%20parity-ethereum%20(codebase)%5D(https%3A%2F%2Fgithub.com%2Fopenethereum%2Fparity-ethereum%2Fblob%2Fv2.7.2-stable%2Fethash%2Fsrc%2Fprogpow.rs)%3A%20EthHash%20implementation%20by%20parity%20for%20ASICs%20(rust).%20_ProgPoW%20(Programmatic%20Proof-of-Work)%20is%20the%20Ethereum%20network's%20proposed%20new%20Application-Specific%20Integrated%20Circuit%20(ASIC)%20resistant%20Proof-of-Work%20mining%20algorithm._%0A%0A**Staking**%0A%0A**Additional**%0A%0A-%20%5BEthereum%20Yellow%20Paper%5D(https%3A%2F%2Fethereum.github.io%2Fyellowpaper%2Fpaper.pdf)%3A%0A-%20%5BEthereum%20EVM%20illustrated%5D(https%3A%2F%2Ftakenobu-hs.github.io%2Fdownloads%2Fethereum_evm_illustrated.pdf)%3A%20A%20technical%20overview%20of%20Ethereum%20including%20state%2C%20accounts%2C%20transactions%20and%20messages%20as%20well%20as%20the%20EVM.%20%5BAppendix%20E%5D(%23appendix-e-data-structures)%20has%20links%20to%20type%20definitions%20for%20blocks%2C%20transactions%2C%20state%20etc%20in%20geth.%0A",lastUpdatedAt:1753125084e3},{lazy:()=>o2(()=>import("./ethereum-1-0-p_j_Rzip.js"),[]),path:"/research/chains/ethereum-1-0.html",type:"mdx",filePath:"research/chains/ethereum-1-0.mdx",content:"%23%20Ethereum%201.0%0A%0Adate%3A%202023-02-04%0Alast-updated%3A%202023-02-04%0A%0A%23%23%20Overview%0A%0A%23%23%20Consensus%20Mechanism%0A%0A%23%23%23%20Ethereum%201.0%20Proof%20Of%20Work%0A%0A%3E%20Existing%20Blockchain%20technology%20is%20working%20on%20the%20core%20concept%20of%20'Proof%20Of%20Work'%20(POW).%20A%20proof-of-work%20(PoW)%20is%20a%20protocol%20that%20is%20difficult%20to%20compute%20but%20easy%20to%20verify.%20It%20can%20be%20verified%20in%20far%20less%20time%20than%20it%20took%20to%20compute%20in%20first%20place.%20The%20process%20involves%20scanning%20for%20a%20value%20that%20when%20hashed%2C%20(such%20as%20with%20SHA-256)%2C%20the%20hash%20begins%20with%20a%20number%20of%20zero%20bits.%20The%20average%20work%20required%20is%20exponential%20in%20the%20number%20of%20zero%20bits%20required%20and%20can%20be%20verified%20by%20executing%20a%20single%20hash.%20In%20simple%20words%2C%20Proof%20of%20work%20is%20an%20expensive%20computation%20done%20by%20all%20miners%20to%20compete%20to%20find%20a%20number%20that%2C%20when%20added%20to%20the%20block%20of%20transactions%2C%20causes%20this%20block%20to%20hash%20to%20a%20code%20with%20certain%20rare%20properties.%20Finding%20such%20a%20rare%20number%20is%20hard%20(based%20on%20the%20cryptographic%20features%20of%20the%20hash%20function%20used%20in%20this%20process)%2C%20but%20verifying%20its%20validity%20when%20it's%20found%20is%20relatively%20easy.%20One%20can%20take%20the%20challenge%2C%20the%20proof%20string%20and%20hash%20them%20together%20and%20check%20if%20the%20hash%20begins%20with%20a%20number%20of%20zero%20bits.%20This%20requires%20to%20apply%20the%20hash%20function%20just%20once%20and%20verify%20the%20output%20indeed%20has%20requisite%20numbers%20of%200's%20in%20front.%20If%20so%2C%20then%20the%20proof%20of%20work%20is%20considered%20valid%20under%20the%20application%20of%20that%20cryptographic%20hash%20function.%20Every%20block%20in%20the%20participating%20network%20should%20contain%20such%20rare%20number.%0A%0A!%5BProof%20Of%20Work%5D(%2Fassets%2Fresearch%2Fpow.png%20%22Proof%20Of%20Work%22)%0A%0ABlock%20Structure%20from%20%5Bgo-ethereum%5D(https%3A%2F%2Fgithub.com%2Fethereum%2Fgo-ethereum%2Fblob%2Frelease%2F1.9%2Fconsensus%2Fethash%2Fconsensus.go)%0A%0A%60%60%60%0A%2F%2F%20SealHash%20returns%20the%20hash%20of%20a%20block%20prior%20to%20it%20being%20sealed.%0Afunc%20(ethash%20*Ethash)%20SealHash(header%20*types.Header)%20(hash%20common.Hash)%20%7B%0A%20hasher%20%3A%3D%20sha3.NewLegacyKeccak256()%0A%0A%20rlp.Encode(hasher%2C%20%5B%5Dinterface%7B%7D%7B%0A%20%20header.ParentHash%2C%0A%20%20header.UncleHash%2C%0A%20%20header.Coinbase%2C%0A%20%20header.Root%2C%0A%20%20header.TxHash%2C%0A%20%20header.ReceiptHash%2C%0A%20%20header.Bloom%2C%0A%20%20header.Difficulty%2C%0A%20%20header.Number%2C%0A%20%20header.GasLimit%2C%0A%20%20header.GasUsed%2C%0A%20%20header.Time%2C%0A%20%20header.Extra%2C%0A%20%7D)%0A%20hasher.Sum(hash%5B%3A0%5D)%0A%20return%20hash%0A%7D%0A%60%60%60%0A%0A%23%23%20Signing%20Mechanism%0A%0ATransactions%20are%20signed%20using%20recoverable%20ECDSA%20signatures.%20This%20method%20utilises%20the%20SECP-256k1%20curve.%20(see%20the%20%5BEthereum%20Yellow%20Paper%5D(https%3A%2F%2Fethereum.github.io%2Fyellowpaper%2Fpaper.pdf)%20Appendix%20F.%20Signing%20Transactions).%20go-ethereum%20utilizes%20the%20%5Bsecp256k1%5D(https%3A%2F%2Fgithub.com%2Fethereum%2Fgo-ethereum%2Ftree%2Fmaster%2Fcrypto%2Fsecp256k1)%20package%20which%20wraps%20the%20bitcoin%20secp256k1%20C%20library.%20Signing%20is%20handled%20by%20the%20%5Bsigner%5D(https%3A%2F%2Fgithub.com%2Fethereum%2Fgo-ethereum%2Ftree%2Fmaster%2Fsigner)%20receives%20a%20request%20and%20produces%20a%20signature.%20Note%2C%20the%20produced%20signature%20conforms%20to%20the%20secp256k1%20curve%20R%2C%20S%20and%20V%20values%2C%20where%20the%20V%20value%20will%20be%2027%20or%2028%20for%20legacy%20reasons%2C%20if%20legacyV%3D%3Dtrue.%0A%0A%23%23%20Code%20Review%0A%0A%23%23%23%20Signing%0A%0A-%20%5Bbls12381%5D(https%3A%2F%2Fgithub.com%2Fethereum%2Fgo-ethereum%2Ftree%2Fmaster%2Fcrypto%2Fbls12381)%3A%20BLS12-381%20is%20a%20pairing-friendly%20elliptic%20curve.%0A-%20%5Bbn256%5D(https%3A%2F%2Fgithub.com%2Fethereum%2Fgo-ethereum%2Ftree%2Fmaster%2Fcrypto%2Fbn256)%3A%20Package%20bn256%20implements%20the%20Optimal%20Ate%20pairing%20over%20a%20256-bit%20Barreto-Naehrig%20curve.%20(%5Binsecure%5D(https%3A%2F%2Fmoderncrypto.org%2Fmail-archive%2Fcurves%2F2016%2F000740.html))%0A-%20%5Bsecp256k1%5D(https%3A%2F%2Fgithub.com%2Fethereum%2Fgo-ethereum%2Ftree%2Fmaster%2Fcrypto%2Fsecp256k1)%3A%20Package%20secp256k1%20wraps%20the%20bitcoin%20secp256k1%20C%20library.%0A-%20%5Bsigner%5D(https%3A%2F%2Fgithub.com%2Fethereum%2Fgo-ethereum%2Ftree%2Fmaster%2Fsigner)%3A%20sign%20receives%20a%20request%20and%20produces%20a%20signature.%20Note%2C%20the%20produced%20signature%20conforms%20to%20the%20secp256k1%20curve%20R%2C%20S%20and%20V%20values%2C%20where%20the%20V%20value%20will%20be%2027%20or%2028%20for%20legacy%20reasons%2C%20if%20legacyV%3D%3Dtrue.%0A%0A%23%23%23%20Consensus%0A%0A-%20%5Bconsensus%5D(https%3A%2F%2Fgithub.com%2Fethereum%2Fgo-ethereum%2Ftree%2Fmaster%2Fconsensus)%0A%20%20-%20%5Balgorithm%5D(https%3A%2F%2Fgithub.com%2Fethereum%2Fgo-ethereum%2Fblob%2Fmaster%2Fconsensus%2Fethash%2Falgorithm.go)%3A%20hashimoto%20aggregates%20data%20from%20the%20full%20dataset%20in%20order%20to%20produce%20our%20final%20value%20for%20a%20particular%20header%20hash%20and%20nonce.%0A%20%20-%20%5Bapi%5D(https%3A%2F%2Fgithub.com%2Fethereum%2Fgo-ethereum%2Fblob%2Fmaster%2Fconsensus%2Fethash%2Fapi.go)%3A%20API's%20include%20GetWork%2C%20SubmitWork%2C%20SubmitHashRate%20and%20GetHashRate.%0A%20%20-%20%5Bethhash%5D(https%3A%2F%2Fgithub.com%2Fethereum%2Fgo-ethereum%2Ftree%2Fmaster%2Fconsensus)%3A%20Package%20ethash%20implements%20the%20ethash%20proof-of-work%20consensus%20engine.%0A%20%20-%20%5Bsealer%5D(https%3A%2F%2Fgithub.com%2Fethereum%2Fgo-ethereum%2Fblob%2Fmaster%2Fconsensus%2Fethash%2Fsealer.go)%3A%20Seal%20implements%20consensus.Engine%2C%20attempting%20to%20find%20a%20nonce%20that%20satisfies%20the%20block's%20difficulty%20requirements.%0A-%20Additional%20Consensus%20Engines%0A%20%20-%20%5Bbeacon%5D(https%3A%2F%2Fgithub.com%2Fethereum%2Fgo-ethereum%2Ftree%2Fmaster%2Fconsensus%2Fbeacon)%3A%20Beacon%20is%20a%20consensus%20engine%20that%20combines%20the%20eth1%20consensus%20and%20proof-of-stake%20algorithm.%20There%20is%20a%20special%20flag%20inside%20to%20decide%20whether%20to%20use%20legacy%20consensus%20rules%20or%20new%20rules.%20The%20transition%20rule%20is%20described%20in%20the%20eth1%2F2%20merge%20spec%5BEIP-3675%5D(https%3A%2F%2Fgithub.com%2Fethereum%2FEIPs%2Fblob%2Fmaster%2FEIPS%2Feip-3675.mdx).%20The%20beacon%20here%20is%20a%20half-functional%20consensus%20engine%20with%20partial%20functions%20which%20is%20only%20used%20for%20necessary%20consensus%20checks.%20The%20legacy%20consensus%20engine%20can%20be%20any%20engine%20implements%20the%20consensus%20interface%20(except%20the%20beacon%20itself).%0A%20%20-%20%5Bclique%5D(https%3A%2F%2Fgithub.com%2Fethereum%2Fgo-ethereum%2Fblob%2Fmaster%2Fconsensus%2Fclique%2Fclique.go)%3A%20Package%20clique%20implements%20the%20proof-of-authority%20consensus%20engine.%0A%0A%23%23%23%20Cryptographic%20Primitives%0A%0A**general%20primitives**%0A%0A-%20%5Basm%5D(https%3A%2F%2Fgithub.com%2Fethereum%2Fgo-ethereum%2Ftree%2Fmaster%2Fcore%2Fasm)%3A%20Package%20asm%20provides%20support%20for%20dealing%20with%20EVM%20assembly%20instructions%20(e.g.%2C%20disassembling%20them).%0A-%20%5Bbitutil%5D(https%3A%2F%2Fgithub.com%2Fethereum%2Fgo-ethereum%2Ftree%2Fmaster%2Fcommon%2Fbitutil)%3A%20Package%20bitutil%20implements%20fast%20bitwise%20operations.%0A-%20%5Bbloombits%5D(https%3A%2F%2Fgithub.com%2Fethereum%2Fgo-ethereum%2Ftree%2Fmaster%2Fcore%2Fbloombits)%3A%20Package%20bloombits%20implements%20bloom%20filtering%20on%20batches%20of%20data.%0A-%20%5Bforkid%5D(https%3A%2F%2Fgithub.com%2Fethereum%2Fgo-ethereum%2Ftree%2Fmaster%2Fcore%2Fforkid)%3A%20Package%20forkid%20implements%20%5BEIP-2124%5D(https%3A%2F%2Feips.ethereum.org%2FEIPS%2Feip-2124).%0A-%20%5Bhexutil%5D(https%3A%2F%2Fgithub.com%2Fethereum%2Fgo-ethereum%2Ftree%2Fmaster%2Fcommon%2Fhexutil)%3A%20Package%20hexutil%20implements%20hex%20encoding%20with%200x%20prefix.%20This%20encoding%20is%20used%20by%20the%20Ethereum%20RPC%20API%20to%20transport%20binary%20data%20in%20JSON%20payloads.%0A-%20%5Blru%5D(https%3A%2F%2Fgithub.com%2Fethereum%2Fgo-ethereum%2Ftree%2Fmaster%2Fcommon%2Flru)%3A%20Package%20lru%20implements%20generically-typed%20Least%20Recently%20Used(LRU)%20caches.%0A-%20%5Bmath%5D(https%3A%2F%2Fgithub.com%2Fethereum%2Fgo-ethereum%2Ftree%2Fmaster%2Fcommon%2Fmath)%3A%20Package%20math%20provides%20integer%20math%20utilities.%0A-%20%5Bmclock%5D(https%3A%2F%2Fgithub.com%2Fethereum%2Fgo-ethereum%2Ftree%2Fmaster%2Fcommon%2Fmclock)%3A%20Package%20mclock%20is%20a%20wrapper%20for%20a%20monotonic%20clock%20source%0A-%20%5Bprque%5D(https%3A%2F%2Fgithub.com%2Fethereum%2Fgo-ethereum%2Ftree%2Fmaster%2Fcommon%2Fprque)%3APackage%20prque%20implements%20a%20priority%20queue%20data%20structure%20supporting%20arbitrary%20value%20types%20and%20int64%20priorities.%0A-%20%5Btrie%5D(https%3A%2F%2Fgithub.com%2Fethereum%2Fgo-ethereum%2Ftree%2Fmaster%2Ftrie)%3A%20Package%20trie%20implements%20Merkle%20Patricia%20Tries.%0A%0A**hash%20functions**%0A%0A-%20%5Bblake2b%5D(https%3A%2F%2Fgithub.com%2Fethereum%2Fgo-ethereum%2Ftree%2Fmaster%2Fcrypto%2Fblake2b)%20(go)%3A%20Package%20blake2b%20implements%20the%20BLAKE2b%20hash%20algorithm%20defined%20by%20RFC%207693%20and%20the%20extendable%20output%20function%20(XOF)%20BLAKE2Xb.%0A%0A**encryption**%0A%0A-%20%5Bsignify%5D(https%3A%2F%2Fgithub.com%2Fethereum%2Fgo-ethereum%2Ftree%2Fmaster%2Fcrypto%2Fsignify)%3A%20signFile%20reads%20the%20contents%20of%20an%20input%20file%20and%20signs%20it%20(in%20armored%20format)%20with%20the%20key%20provided%2C%20placing%20the%20signature%20into%20the%20output%20file.%5Bascii%20armored%20encryption%5D(https%3A%2F%2Fwww.rfc-editor.org%2Frfc%2Fpdfrfc%2Frfc4880.txt.pdf)%0A-%20%5Becies%5D(https%3A%2F%2Fgithub.com%2Fethereum%2Fgo-ethereum%2Ftree%2Fmaster%2Fcrypto%2Fecies)%3A%20a%20hybrid%20encryption%20scheme%0A%0A**random%20number%20generators**%0A%0A**serilization%2Fdeserialization**%0A%0A-%20%5BRLP%5D(https%3A%2F%2Fgithub.com%2Fethereum%2Fgo-ethereum%2Ftree%2Fmaster%2Frlp)%3A%20Package%20rlp%20implements%20the%20RLP%20serialization%20format.(%5Bdoc%5D(https%3A%2F%2Fgithub.com%2Fethereum%2Fgo-ethereum%2Fblob%2Fmaster%2Frlp%2Fdoc.go))%20The%20purpose%20of%20RLP%20(Recursive%20Linear%20Prefix)%20is%20to%20encode%20arbitrarily%20nested%20arrays%20of%20binary%20data%2C%20and%20RLP%20is%20the%20main%20encoding%20method%20used%20to%20serialize%20objects%20in%20Ethereum.%0A%20%20The%20only%20purpose%20of%20RLP%20is%20to%20encode%20structure%3B%20encoding%20specific%20atomic%20data%20types%20(eg.%0A%20%20strings%2C%20ints%2C%20floats)%20is%20left%20up%20to%20higher-order%20protocols.%20In%20Ethereum%20integers%20must%20be%0A%20%20represented%20in%20big%20endian%20binary%20form%20with%20no%20leading%20zeroes%20(thus%20making%20the%20integer%0A%20%20value%20zero%20equivalent%20to%20the%20empty%20string).%20RLP%20values%20are%20distinguished%20by%20a%20type%20tag.%20The%20type%20tag%20precedes%20the%20value%20in%20the%20input%20stream%20and%20defines%20the%20size%20and%20kind%20of%20the%20bytes%20that%20follow.%0A%0A**threading**%0A%0A**virtual%20machine**%0A%0A-%20%5Bvm%5D(https%3A%2F%2Fgithub.com%2Fethereum%2Fgo-ethereum%2Ftree%2Fmaster%2Fcore%2Fvm)%20%3A%20Package%20vm%20implements%20the%20Ethereum%20Virtual%20Machine.%20The%20vm%20package%20implements%20one%20EVM%2C%20a%20byte%20code%20VM.%20The%20BC%20(Byte%20Code)%20VM%20loops%20over%20a%20set%20of%20bytes%20and%20executes%20them%20according%20to%20the%20set%20of%20rules%20defined%20in%20the%20Ethereum%20yellow%20paper.%0A%0A**compiler**%0A%0A-%20%5Bcompiler%5D(https%3A%2F%2Fgithub.com%2Fethereum%2Fgo-ethereum%2Ftree%2Fmaster%2Fcommon%2Fcompiler)%3A%20Package%20compiler%20wraps%20the%20ABI%20compilation%20outputs.%20ParseCombinedJSON%20takes%20the%20direct%20output%20of%20a%20solc%20--combined-output%20run%20and%20parses%20it%20into%20a%20map%20of%20string%20contract%20name%20to%20Contract%20structs.%20The%20provided%20source%2C%20language%20and%20compiler%20version%2C%20and%20compiler%20options%20are%20all%20passed%20through%20into%20the%20Contract%20structs.%20The%20solc%20output%20is%20expected%20to%20contain%20ABI%2C%20source%20mapping%2C%20user%20docs%2C%20and%20dev%20docs.%20Returns%20an%20error%20if%20the%20JSON%20is%20malformed%20or%20missing%20data%2C%20or%20if%20the%20JSON%20embedded%20within%20the%20JSON%20is%20malformed.%0A%0A%23%23%20References%0A%0A**Consensus**%0A%0A-%20%5BProof%20of%20Work%20(POW)%2C%20Ethereum%20Org%2C%202022%5D(https%3A%2F%2Fethereum.org%2Fen%2Fdevelopers%2Fdocs%2Fconsensus-mechanisms%2Fpow%2F)%3A%20Ethereum%20Proof%20of%20Work%20Documentation.%0A-%20%5BProof%20Of%20Work%20(POW)%2C%20EtherWorld%202017%5D(https%3A%2F%2Fetherworld.co%2F2017%2F04%2F16%2Fproof-of-work-pow%2F)%3A%20Etherworld%20Proof%20of%20Work%20Guide.%0A-%20%5BEIP-1057%3A%20ProgPoW%2C%20a%20Programmatic%20Proof-of-Work%5D(https%3A%2F%2Feips.ethereum.org%2FEIPS%2Feip-1057)%3A%20ProgPoW%20is%20a%20proof-of-work%20algorithm%20designed%20to%20close%20the%20efficiency%20gap%20available%20to%20specialized%20ASICs.%0A%0A-%20%5Bconsensus%20go-ethereum%3A%20release%201.9%20(codebase)%5D(https%3A%2F%2Fgithub.com%2Fethereum%2Fgo-ethereum%2Fblob%2Frelease%2F1.9%2Fconsensus%2Fconsensus.go)%3A%20Engine%20is%20an%20algorithm%20agnostic%20consensus%20engine.%20(go)%0A-%20%5Bethash.go%2C%20go-ethereum%20release%201.9%20(codebase)%5D(https%3A%2F%2Fgithub.com%2Fethereum%2Fgo-ethereum%2Fblob%2Frelease%2F1.9%2Fconsensus%2Fethash%2Fethash.go)%3A%20Package%20ethash%20implements%20the%20ethash%20proof-of-work%20consensus%20engine.%20(go)%0A-%20%5Bethash.sol%2C%20horizon%20(codebase)%5D(https%3A%2F%2Fgithub.com%2Fjohnwhitton%2Fhorizon%2Fblob%2FrefactorV2%2Fcontracts%2Fethash%2Fethash.sol)%3A%20Solidity%20implementation%20enableing%20the%20verification%20of%20ethhash%20(solidity)%0A-%20%5Bethash.rs%2C%20parity-ethereum%20(codebase)%5D(https%3A%2F%2Fgithub.com%2Fopenethereum%2Fparity-ethereum%2Fblob%2Fv2.7.2-stable%2Fethash%2Fsrc%2Flib.rs)%3A%20EthashManager%20implementation%20by%20parity%20(rust).%0A-%20%5Bprogpow.ps%2C%20parity-ethereum%20(codebase)%5D(https%3A%2F%2Fgithub.com%2Fopenethereum%2Fparity-ethereum%2Fblob%2Fv2.7.2-stable%2Fethash%2Fsrc%2Fprogpow.rs)%3A%20EthHash%20implementation%20by%20parity%20for%20ASICs%20(rust).%20_ProgPoW%20(Programmatic%20Proof-of-Work)%20is%20the%20Ethereum%20network's%20proposed%20new%20Application-Specific%20Integrated%20Circuit%20(ASIC)%20resistant%20Proof-of-Work%20mining%20algorithm._%0A%0A**Staking**%0A%0A**Additional**%0A%0A-%20%5BEthereum%20Yellow%20Paper%5D(https%3A%2F%2Fethereum.github.io%2Fyellowpaper%2Fpaper.pdf)%3A%0A-%20%5BEthereum%20EVM%20illustrated%5D(https%3A%2F%2Ftakenobu-hs.github.io%2Fdownloads%2Fethereum_evm_illustrated.pdf)%3A%20A%20technical%20overview%20of%20Ethereum%20including%20state%2C%20accounts%2C%20transactions%20and%20messages%20as%20well%20as%20the%20EVM.%20%5BAppendix%20E%5D(%23appendix-e-data-structures)%20has%20links%20to%20type%20definitions%20for%20blocks%2C%20transactions%2C%20state%20etc%20in%20geth.%0A",lastUpdatedAt:1753125084e3},{lazy:()=>o2(()=>import("./ethereum-Dkmckxij.js"),[]),path:"/research/chains/ethereum",type:"mdx",filePath:"research/chains/ethereum.mdx",content:"%23%20Ethereum%0A%0A-%20date%3A%202023-02-04%0A-%20last%20updated%3A%202023-02-04%0A%0A%23%23%20Overview%0A%0AWith%20the%20Introduction%20of%20Ethereum%202.0%3Csup%3E%5B1%5D(%23bp1)%3C%2Fsup%3E%20%3Csup%3E%5B2%5D(%23bp2)%3C%2Fsup%3E%20%3Csup%3E%5B3%5D(%23bp3)%3C%2Fsup%3E%20block%20production%20and%20consensus%20were%20separated%3Csup%3E%5B4%5D(%23bp4)%3C%2Fsup%3E%20into%20execution%20clients%3Csup%3E%5B5%5D(%23bp5)%3C%2Fsup%3E%20and%20consensus%20clients%3Csup%3E%5B6%5D(%23ts6)%3C%2Fsup%3E%20%3Csup%3E%5B7%5D(%23bp7)%3C%2Fsup%3E.%0A%0AThe%20execution%20chain%20implemented%20a%20simplified%20Proof%20of%20Work%3Csup%3E%5B1%5D(%23bp1)%3C%2Fsup%3E%20reducing%20difficutly%20to%20zero%20and%20removing%20the%20need%20for%20omners%20(uncles)%20which%20would%20now%20be%20handled%20by%20the%20beacon%20chain%3Csup%3E%5B3%5D(%23bp3)%3C%2Fsup%3E%20which%20is%20responsible%20for%20providing%20consensus%20%3Csup%3E%5B2%5D(%23bp2)%3C%2Fsup%3E.%0A%0ALight%20Clients%3Csup%3E%5B11%5D(%23ts11)%3C%2Fsup%3E%20were%20also%20introduced.%20To%20facilate%20this%0Aa%20sync%20committee%20of%20512%20current%20validators%20is%20elected%20every%20255%20epochs%2C%20approximately%20every%2027%20hours%20(see%20%5Bsample%20sync%20comittee%20data%5D(%23sync-committee-latest))%2C%20they%20are%20responsible%20for%20signing%20each%20block.%0A%0AAs%20at%20December%2011th%2C%202022%20Ethereum%20has%20487%2C920%20validators%3Csup%3E%5B8%5D(%23bp8)%3C%2Fsup%3E%20with%20a%20sample%20epoch%20(%5B166581%5D(https%3A%2F%2Fbeaconcha.in%2Fepoch%2F166581))%20and%20slot%20(%5B5%2C330%2C592%5D(https%3A%2F%2Fbeaconcha.in%2Fslot%2F5330592))%20having%20%5B139%20transactions%5D(https%3A%2F%2Fbeaconcha.in%2Fslot%2F5330592%23transactions)%20with%20%5B19%2C227%20votes%5D(https%3A%2F%2Fbeaconcha.in%2Fslot%2F5330592%23votes)%20from%2063%20committees%20and%20%5B126%20aggregated%20committe%20attestations%5D(https%3A%2F%2Fbeaconcha.in%2Fslot%2F5330592%23attestations).%0A%0AHere%20is%20more%20information%20on%20the%20upgrade%3Csup%3E%5B9%5D(%23bp9)%3C%2Fsup%3E%20and%20the%20roadmap%3Csup%3E%5B10%5D(%23bp10)%3C%2Fsup%3E%0A%0A!%5BEthereum%20Roadmap%5D(%2Fassets%2Fresearch%2Fethereum-roadmap.jpg%20%22Ethereum%20Roadmap%22)%0A%0A%23%23%20Consensus%20Mechanism%0A%0AEthreum%20uses%20Proof%20of%20Stake%20(PoS).%20Here%20we%20give%20an%20overview%20of%20Proof%20of%20Stake%20Followed%20by%20a%20deep%20dive%20into%20synch%20committees.%0AFollowing%20is%20an%20excerpt%20from%20%5BEthereum%20Orgs%20Proof%20of%20Stake%20document%5D(Proof-of-stake%20%22PoS%22)%0A%0A%3E%20**What%20is%20proof-of-stake%20(PoS)%3F**%0A%0A%3E%20Proof-of-stake%20underlies%20certain%20consensus%20mechanisms%20used%20by%20blockchains%20to%20achieve%20distributed%20consensus.%20In%20proof-of-work%2C%20miners%20prove%20they%20have%20capital%20at%20risk%20by%20expending%20energy.%20Ethereum%20uses%20proof-of-stake%2C%20where%20validators%20explicitly%20stake%20capital%20in%20the%20form%20of%20ETH%20into%20a%20smart%20contract%20on%20Ethereum.%20This%20staked%20ETH%20then%20acts%20as%20collateral%20that%20can%20be%20destroyed%20if%20the%20validator%20behaves%20dishonestly%20or%20lazily.%20The%20validator%20is%20then%20responsible%20for%20checking%20that%20new%20blocks%20propagated%20over%20the%20network%20are%20valid%20and%20occasionally%20creating%20and%20propagating%20new%20blocks%20themselves.%0A%0A%3E%20Proof-of-stake%20comes%20with%20a%20number%20of%20improvements%20to%20the%20now-deprecated%20proof-of-work%20system%3A%0A%0A%3E%20-%20better%20energy%20efficiency%20%E2%80%93%20there%20is%20no%20need%20to%20use%20lots%20of%20energy%20on%20proof-of-work%20computations%0A%3E%20-%20lower%20barriers%20to%20entry%2C%20reduced%20hardware%20requirements%20%E2%80%93%20there%20is%20no%20need%20for%20elite%20hardware%20to%20stand%20a%20chance%20of%20creating%20new%20blocks%0A%3E%20-%20reduced%20centralization%20risk%20%E2%80%93%20proof-of-stake%20should%20lead%20to%20more%20nodes%20securing%20the%20network%0A%3E%20-%20because%20of%20the%20low%20energy%20requirement%20less%20ETH%20issuance%20is%20required%20to%20incentivize%20participation%0A%3E%20-%20economic%20penalties%20for%20misbehaviour%20make%2051%25%20style%20attacks%20exponentially%20more%20costly%20for%20an%20attacker%20compared%20to%20proof-of-work%0A%3E%20-%20the%20community%20can%20resort%20to%20social%20recovery%20of%20an%20honest%20chain%20if%20a%2051%25%20attack%20were%20to%20overcome%20the%20crypto-economic%20defenses.%0A%0A%23%23%23%20Block%20Production%0A%0AValidators%20run%20both%20an%20Ethereum%201%20client%20(e.g.%20geth)%20and%20a%20Beacon%20Chain%20Client%20(e.g.%20prysm).%20The%20geth%20client%20recieves%20transactions%20and%20places%20them%20into%20blocks.%20For%20additional%20details%20see%20the%20Ethereum%20Builder%20Specs%3Csup%3E%5B12%5D(%23ts12)%3C%2Fsup%3E.%20The%20following%20diagrams%20give%20an%20overview%20of%20how%20blocks%20are%20proposed%20and%20how%20MEV%20Boost%3Csup%3E%5B13%5D(%23ts13)%3C%2Fsup%3E%20could%20be%20integrated.%20For%20simplification%20we%20can%20replace%20mev_boost%20and%20relay%20with%20geth%20in%20the%20block%20proposal%20diagram%20as%20the%20majority%20of%20validators%20simply%20run%20a%20geth%20node.%0A%0A!%5BBlock%20Proposal%5D(%2Fassets%2Fresearch%2Fblock-proposal.png%20%22Block%20Proposal%22)%0A%0A%23%23%23%20Slots%20and%20Epochs%20%3Csup%3E%5B6%5D(%23ts6a)%3C%2Fsup%3E%0A%0A%3E%20The%20Beacon%20Chain%20provides%20the%20heartbeat%20to%20Ethereum%E2%80%99s%20consensus.%20Each%20slot%20is%2012%20seconds%20and%20an%20epoch%20is%2032%20slots%3A%206.4%20minutes.%0A%0A!%5BSlots%20and%20Epochs%5D(%2Fassets%2Fresearch%2FBeacon-Chain-Slots-and-Epochs.png.webp%20%22Slots%20and%20Epochs%22)%0A%0A%23%23%23%20Block%20Proposals%0A%0AWhen%20a%20validator%20is%20nominated%20as%20a%20proposer%20for%20a%20slot%20in%20an%20Epoch%20they%20propose%20a%20block%20gathered%20from%20there%20Ethereum%201%20client.%0A%0AThis%20proposed%20block%20is%20attested%20to%20by%20other%20validators%20who%20have%20been%20assigned%20as%20committe%20members%20for%20this%20slot%3Csup%3E%5B6b%5D(%23ts6b)%3C%2Fsup%3E.%0A%0A%3E%20A%20block%20proposer%20is%20a%20validator%20that%20has%20been%20pseudorandomly%20selected%20to%20build%20a%20block.%0A%3E%0A%3E%20Most%20of%20the%20time%2C%20validators%20are%20attesters%20that%20vote%20on%20blocks.%20These%20votes%20are%20recorded%20in%20the%20Beacon%20Chain%20and%20determine%20the%20head%20of%20the%20Beacon%20Chain.%0A%0A!%5BValidators%20and%20Attestations%5D(%2Fassets%2Fresearch%2FBeacon-Chain-Validators.png%20%22Validators%20and%20Attestations%22)%0A%0A%23%23%23%20Committees%0A%0A%3E%20A%20committee%20is%20a%20group%20of%20validators.%20For%20security%2C%20each%20slot%20has%20committees%20of%20at%20least%20128%20validators.%20An%20attacker%20has%20less%20than%20a%20one%20in%20a%20trillion%20probability%20of%20controlling%20%E2%85%94%20of%20a%20committee.%0A%3E%0A%3E%20The%20concept%20of%20a%20randomness%20beacon%20that%20emits%20random%20numbers%20for%20the%20public%2C%20lends%20its%20name%20to%20the%20Ethereum%20Beacon%20Chain.%20The%20Beacon%20Chain%20enforces%20consensus%20on%20a%20pseudorandom%20process%20called%20RANDAO.%0A%0A!%5BCommittees%5D(%2Fassets%2Fresearch%2FBeacon-Chain-RANDAO.png%20%22Committees%22)%0A%0A%23%23%23%20Attestations%0A%0AThe%20attestation%20lifecyle%3Csup%3E%5B9%5D(%23ts9)%3C%2Fsup%3E%20involves%0A%0A1.%20Generation%20of%20the%20proposed%20Block%0A2.%20Propagation%20of%20the%20block%20to%20committee%20members%20to%20vote%20on%20and%20sign%0A3.%20Aggregation%20of%20the%20votes%20(signatures)%20of%20the%20committee%20members%20by%20Aggregators%0A4.%20Propagation%20of%20the%20aggregated%20attestations%20back%20to%20the%20block%20Proposer%0A5.%20Inclusion%20of%20the%20block%20in%20the%20Beaconchain%0A%0A!%5BAttestation%20Life%20Cycle%5D(%2Fassets%2Fresearch%2FAttestationLifeCycle.png%20%22Attestation%20Life%20Cycle%22)%0A%0A%23%23%23%20Checkpoints%20and%20Finality%3Csup%3E%5B6%5D(%23ts6)%3C%2Fsup%3E%0A%0A%3E%20When%20an%20epoch%20ends%2C%20if%20its%20checkpoint%20has%20garnered%20a%20%E2%85%94%20supermajority%2C%20the%20checkpoint%20gets%20justified.%0A%0A!%5BCheckpoints%5D(%2Fassets%2Fresearch%2FBeacon-Chain-Checkpoints.jpg%20%22Checkpoints%22)%0A%0A%3E%20If%20a%20checkpoint%20B%20is%20justified%20and%20the%20checkpoint%20in%20the%20immediate%20next%20epoch%20becomes%20justified%2C%20then%20B%20becomes%20finalized.%20Typically%2C%20a%20checkpoint%20is%20finalized%20in%20two%20epochs%2C%2012.8%20minutes.%0A%0A!%5BFinality%5D(%2Fassets%2Fresearch%2FBeacon-Chain-Justification-and-Finalization.png%20%22Finality%22)%0A%0A%23%23%23%20Sync%20Committee%20%3Csup%3E%5B10%5D(%23ts10)%3C%2Fsup%3E%0A%0AA%20sync%20committee%20of%20512%20current%20validators%20is%20elected%20every%20255%20epochs%2C%20approximately%20every%2027%20hours%20(see%20%5Bsample%20sync%20comittee%20data%5D(%23sync-committee-latest)).%0AThey%20are%20responsible%20for%20signing%20each%20block%20which%20records%20which%20sync%20committee%20members%20(validtors)%20signed%20the%20block%2C%20held%20in%20%60syncaggregate_bits%60%2C%20and%20creates%20a%20bls%20aggregate%20signature%20held%20in%20%60syncaggregate_signature%60%20(see%20%5Bblock-data%5D(%23block-data-for-slot-5330592)).%0A%0A%60%60%60%0A%20%20%20%20%22syncaggregate_bits%22%3A%20%220xdffffffffffffffffffffffffffffff7fffffffffffffffffffffffffffffffffffffffffffffffffffffffdfffffffffffffffdffffffffffffffffffffffff%22%2C%0A%20%20%20%20%22syncaggregate_participation%22%3A%200.9921875%2C%0A%20%20%20%20%22syncaggregate_signature%22%3A%20%220x95332c55790018eed3d17eada01cb4045348d09137505bc8697eeedaa3800a830ee2c138251850a9577f62a5488419ef0a722579156a177fb3a147017f1077af5d778f46a4cdf815fc450129d135fe5286e16df68333592e4aa45821bde780dd%22%2C%0A%60%60%60%0A%0AThis%20is%20used%20in%20Altair%20Light%20Client%20--%20Sync%20Protocol%3Csup%3E%5B11%5D(%23ts11)%3C%2Fsup%3E%20which%20enables%20the%20beacon%20chain%20to%20be%20light%20client%20friendly%20for%20constrained%20environments%20to%20access%20Ethereum.%0A%0A%23%23%23%20Validator%20Lifecycle%0A%0AFollowing%20is%20an%20overview%20of%20statuses%20for%20validators%20in%20Ethereum%202.0%20phase%200%20%3Csup%3E%5B14%5D(%23ts14)%3C%2Fsup%3E.%0A%0A%3E%201.%20**Deposited**%3A%20the%20validator%20has%20made%20a%20deposit%20and%20has%20registered%20in%20BeaconState.%0A%3E%202.%20**Eligible%20to%20be%20activated%20(Pending)**%3A%20the%20validator%20is%20eligible%20to%20be%20activated.%0A%3E%203.%20**Activated**%3A%20the%20validator%20is%20activated%0A%3E%20%20%20%20-%20_Note%20that%20the%20validator%20may%20be%20%E2%80%9Celigible%20to%20be%20activated%2C%20but%20has%20not%20been%20activated%20yet%E2%80%9D._%0A%3E%204.%20**Slashed**%3A%20the%20validator%20has%20been%20slashed%0A%3E%205.%20**Exited**%3A%20the%20validator%20is%20exited%0A%3E%206.%20**Withdrawable**%3A%20the%20validator%20is%20withdrawable%0A%3E%20%20%20%20-%20_Note%20that%20the%20validator%20will%20be%20able%20to%20withdraw%20to%20EEs%20in%20phase%202_%0A%3E%0A%3E%20_Note%20that%20in%20some%20cases%2C%20a%20validator%20can%20be%20in%20multiple%20statuses%20at%20the%20same%20time%2C%20e.g.%2C%20an%20active%20validator%20may%20be%20%E2%80%9Cactivated%20and%20slashed%E2%80%9D._%0A%0A!%5BValidator%20Status%20Transition%5D(%2Fassets%2Fresearch%2FValidatorStateTransition.png%20%22Validator%20Status%20Transition%22)%0A%0A%23%23%20Light%20Client%20Support%0A%0A**Light%20client%20state%20updates**%0A%0A-%20A%20light%20client%20receives%20objects%20of%20type%20%60LightClientUpdate%60%2C%20%60LightClientFinalityUpdate%60%20and%20%60LightClientOptimisticUpdate%60%3A%0A%20%20-%20**%60update%3A%20LightClientUpdate%60**%3A%20Every%20%60update%60%20triggers%20%60process_light_client_update(store%2C%20update%2C%20current_slot%2C%20genesis_validators_root)%60%20where%20%60current_slot%60%20is%20the%20current%20slot%20based%20on%20a%20local%20clock.%0A%20%20-%20**%60finality_update%3A%20LightClientFinalityUpdate%60**%3A%20Every%20%60finality_update%60%20triggers%20%60process_light_client_finality_update(store%2C%20finality_update%2C%20current_slot%2C%20genesis_validators_root)%60.%0A%20%20-%20**%60optimistic_update%3A%20LightClientOptimisticUpdate%60**%3A%20Every%20%60optimistic_update%60%20triggers%20%60process_light_client_optimistic_update(store%2C%20optimistic_update%2C%20current_slot%2C%20genesis_validators_root)%60.%0A-%20%60process_light_client_store_force_update%60%20MAY%20be%20called%20based%20on%20use%20case%20dependent%20heuristics%20if%20light%20client%20sync%20appears%20stuck.%0A%0A**validate_light_client_update**%0A%0A%60%60%60python%0Adef%20validate_light_client_update(store%3A%20LightClientStore%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20update%3A%20LightClientUpdate%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20current_slot%3A%20Slot%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20genesis_validators_root%3A%20Root)%20-%3E%20None%3A%0A%20%20%20%20%23%20Verify%20sync%20committee%20has%20sufficient%20participants%0A%20%20%20%20sync_aggregate%20%3D%20update.sync_aggregate%0A%20%20%20%20assert%20sum(sync_aggregate.sync_committee_bits)%20%3E%3D%20MIN_SYNC_COMMITTEE_PARTICIPANTS%0A%0A%20%20%20%20%23%20Verify%20update%20does%20not%20skip%20a%20sync%20committee%20period%0A%20%20%20%20assert%20is_valid_light_client_header(update.attested_header)%0A%20%20%20%20update_attested_slot%20%3D%20update.attested_header.beacon.slot%0A%20%20%20%20update_finalized_slot%20%3D%20update.finalized_header.beacon.slot%0A%20%20%20%20assert%20current_slot%20%3E%3D%20update.signature_slot%20%3E%20update_attested_slot%20%3E%3D%20update_finalized_slot%0A%20%20%20%20store_period%20%3D%20compute_sync_committee_period_at_slot(store.finalized_header.beacon.slot)%0A%20%20%20%20update_signature_period%20%3D%20compute_sync_committee_period_at_slot(update.signature_slot)%0A%20%20%20%20if%20is_next_sync_committee_known(store)%3A%0A%20%20%20%20%20%20%20%20assert%20update_signature_period%20in%20(store_period%2C%20store_period%20%2B%201)%0A%20%20%20%20else%3A%0A%20%20%20%20%20%20%20%20assert%20update_signature_period%20%3D%3D%20store_period%0A%0A%20%20%20%20%23%20Verify%20update%20is%20relevant%0A%20%20%20%20update_attested_period%20%3D%20compute_sync_committee_period_at_slot(update_attested_slot)%0A%20%20%20%20update_has_next_sync_committee%20%3D%20not%20is_next_sync_committee_known(store)%20and%20(%0A%20%20%20%20%20%20%20%20is_sync_committee_update(update)%20and%20update_attested_period%20%3D%3D%20store_period%0A%20%20%20%20)%0A%20%20%20%20assert%20(%0A%20%20%20%20%20%20%20%20update_attested_slot%20%3E%20store.finalized_header.beacon.slot%0A%20%20%20%20%20%20%20%20or%20update_has_next_sync_committee%0A%20%20%20%20)%0A%0A%20%20%20%20%23%20Verify%20that%20the%20%60finality_branch%60%2C%20if%20present%2C%20confirms%20%60finalized_header%60%0A%20%20%20%20%23%20to%20match%20the%20finalized%20checkpoint%20root%20saved%20in%20the%20state%20of%20%60attested_header%60.%0A%20%20%20%20%23%20Note%20that%20the%20genesis%20finalized%20checkpoint%20root%20is%20represented%20as%20a%20zero%20hash.%0A%20%20%20%20if%20not%20is_finality_update(update)%3A%0A%20%20%20%20%20%20%20%20assert%20update.finalized_header%20%3D%3D%20LightClientHeader()%0A%20%20%20%20else%3A%0A%20%20%20%20%20%20%20%20if%20update_finalized_slot%20%3D%3D%20GENESIS_SLOT%3A%0A%20%20%20%20%20%20%20%20%20%20%20%20assert%20update.finalized_header%20%3D%3D%20LightClientHeader()%0A%20%20%20%20%20%20%20%20%20%20%20%20finalized_root%20%3D%20Bytes32()%0A%20%20%20%20%20%20%20%20else%3A%0A%20%20%20%20%20%20%20%20%20%20%20%20assert%20is_valid_light_client_header(update.finalized_header)%0A%20%20%20%20%20%20%20%20%20%20%20%20finalized_root%20%3D%20hash_tree_root(update.finalized_header.beacon)%0A%20%20%20%20%20%20%20%20assert%20is_valid_merkle_branch(%0A%20%20%20%20%20%20%20%20%20%20%20%20leaf%3Dfinalized_root%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20branch%3Dupdate.finality_branch%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20depth%3Dfloorlog2(FINALIZED_ROOT_INDEX)%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20index%3Dget_subtree_index(FINALIZED_ROOT_INDEX)%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20root%3Dupdate.attested_header.beacon.state_root%2C%0A%20%20%20%20%20%20%20%20)%0A%0A%20%20%20%20%23%20Verify%20that%20the%20%60next_sync_committee%60%2C%20if%20present%2C%20actually%20is%20the%20next%20sync%20committee%20saved%20in%20the%0A%20%20%20%20%23%20state%20of%20the%20%60attested_header%60%0A%20%20%20%20if%20not%20is_sync_committee_update(update)%3A%0A%20%20%20%20%20%20%20%20assert%20update.next_sync_committee%20%3D%3D%20SyncCommittee()%0A%20%20%20%20else%3A%0A%20%20%20%20%20%20%20%20if%20update_attested_period%20%3D%3D%20store_period%20and%20is_next_sync_committee_known(store)%3A%0A%20%20%20%20%20%20%20%20%20%20%20%20assert%20update.next_sync_committee%20%3D%3D%20store.next_sync_committee%0A%20%20%20%20%20%20%20%20assert%20is_valid_merkle_branch(%0A%20%20%20%20%20%20%20%20%20%20%20%20leaf%3Dhash_tree_root(update.next_sync_committee)%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20branch%3Dupdate.next_sync_committee_branch%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20depth%3Dfloorlog2(NEXT_SYNC_COMMITTEE_INDEX)%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20index%3Dget_subtree_index(NEXT_SYNC_COMMITTEE_INDEX)%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20root%3Dupdate.attested_header.beacon.state_root%2C%0A%20%20%20%20%20%20%20%20)%0A%0A%20%20%20%20%23%20Verify%20sync%20committee%20aggregate%20signature%0A%20%20%20%20if%20update_signature_period%20%3D%3D%20store_period%3A%0A%20%20%20%20%20%20%20%20sync_committee%20%3D%20store.current_sync_committee%0A%20%20%20%20else%3A%0A%20%20%20%20%20%20%20%20sync_committee%20%3D%20store.next_sync_committee%0A%20%20%20%20participant_pubkeys%20%3D%20%5B%0A%20%20%20%20%20%20%20%20pubkey%20for%20(bit%2C%20pubkey)%20in%20zip(sync_aggregate.sync_committee_bits%2C%20sync_committee.pubkeys)%0A%20%20%20%20%20%20%20%20if%20bit%0A%20%20%20%20%5D%0A%20%20%20%20fork_version%20%3D%20compute_fork_version(compute_epoch_at_slot(update.signature_slot))%0A%20%20%20%20domain%20%3D%20compute_domain(DOMAIN_SYNC_COMMITTEE%2C%20fork_version%2C%20genesis_validators_root)%0A%20%20%20%20signing_root%20%3D%20compute_signing_root(update.attested_header.beacon%2C%20domain)%0A%20%20%20%20assert%20bls.FastAggregateVerify(participant_pubkeys%2C%20signing_root%2C%20sync_aggregate.sync_committee_signature)%0A%60%60%60%0A%0A**apply_light_client_update**%0A%0A%60%60%60python%0Adef%20apply_light_client_update(store%3A%20LightClientStore%2C%20update%3A%20LightClientUpdate)%20-%3E%20None%3A%0A%20%20%20%20store_period%20%3D%20compute_sync_committee_period_at_slot(store.finalized_header.beacon.slot)%0A%20%20%20%20update_finalized_period%20%3D%20compute_sync_committee_period_at_slot(update.finalized_header.beacon.slot)%0A%20%20%20%20if%20not%20is_next_sync_committee_known(store)%3A%0A%20%20%20%20%20%20%20%20assert%20update_finalized_period%20%3D%3D%20store_period%0A%20%20%20%20%20%20%20%20store.next_sync_committee%20%3D%20update.next_sync_committee%0A%20%20%20%20elif%20update_finalized_period%20%3D%3D%20store_period%20%2B%201%3A%0A%20%20%20%20%20%20%20%20store.current_sync_committee%20%3D%20store.next_sync_committee%0A%20%20%20%20%20%20%20%20store.next_sync_committee%20%3D%20update.next_sync_committee%0A%20%20%20%20%20%20%20%20store.previous_max_active_participants%20%3D%20store.current_max_active_participants%0A%20%20%20%20%20%20%20%20store.current_max_active_participants%20%3D%200%0A%20%20%20%20if%20update.finalized_header.beacon.slot%20%3E%20store.finalized_header.beacon.slot%3A%0A%20%20%20%20%20%20%20%20store.finalized_header%20%3D%20update.finalized_header%0A%20%20%20%20%20%20%20%20if%20store.finalized_header.beacon.slot%20%3E%20store.optimistic_header.beacon.slot%3A%0A%20%20%20%20%20%20%20%20%20%20%20%20store.optimistic_header%20%3D%20store.finalized_header%0A%60%60%60%0A%0A**Sample%20Implementation%3A%20NEAR%20Rainbow%20Bridge%20Ethereum%20Light%20Client%20Deployed%20on%20NEAR**%0A%0ABridging%20support%20was%20implemented%20by%20NEAR%20under%20%5BEth2-to-Near-relay%3A%20prototype%20implementation%20%23762%0A%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Fpull%2F762)%0A%0A!%5BEthereum%202%20block%20proof%5D(%2Fassets%2Fposts%2F2023-02-05-ethereum-bridging-costs%2FETH_2_0_MMR.jpg%20%22Ethereum%202%20Block%20Proof%22)%0A%0A%3E%20When%20we%20send%20light%20client%20update%20for%20finality%20block%20inside%20light%20client%20update%2C%20we%20also%20send%20Eth1%20execution%20block%20hash%20with%20the%20Merkle%20proof%20of%20include%20to%20Beacon%20Block%20Body.%20Execution%20block%20hash%20you%20can%20find%20at%20BeaconBlockBody.execution_payload.block_hash.%0A%3E%0A%3E%20So%2C%20for%20creating%20Merkle%20proof%2C%20we%20need%20two%20levels%20of%20Merkle%20Tree%2C%20as%20shown%20in%20the%20picture.%20Both%20Merkle%20trees%20you%20can%20find%20in%20beacon_block_body_merkle_tree.rs%20The%20first%20level%20Merkle%20tree%20for%20beacon%20block%20body%20and%20the%20second%20level%20Merkle%20tree%20for%20execution%20payload.%0A%3E%0A%3E%20The%20execution%20block%20hash%20proof%20creation%20you%20can%20find%20in%20execution_block_proof.rs%20First%2C%20we%20build%20two%20Merkle%20trees%20and%20concatenate%20together%20the%20Merkle%20proof%20for%20block_hash%20in%20execution_payload%20and%20the%20Merkle%20proof%20of%20execution_payload%20in%20beacon_block_body.%20The%20final%20Merkle%20proof%20is%20shown%20by%20the%20orange%20vertices%20on%20the%20picture%3B%20the%20orange%20numbers%20in%20the%20picture%20are%20the%20order%20of%20hashes%20in%20the%20proof.%0A%3E%0A%3E%20beacon_block_header_with_execution_data.rs%20contain%20a%20structure%20which%20consists%20of%20beacon_block_header%20and%20correspondent%20execution_block_hash%20with%20Merkle%20proof.%20This%20structure%20is%20created%20for%20finality%20blocks%20in%20a%20light%20client%20update.%0A%0A%23%23%20References%0A%0A**Consensus**%0A%0A-%20%5BGasper%20Consensus%20Whitepaper%5D(https%3A%2F%2Farxiv.org%2Fpdf%2F2003.03052.pdf)%3A%20Combining%20GHOST%20and%20Casper%0A-%20%5Bsigp%20lighthouse%20beacon%20block%5D(https%3A%2F%2Fgithub.com%2Fsigp%2Flighthouse%2Fblob%2Fstable%2Fconsensus%2Ftypes%2Fsrc%2Fbeacon_block.rs%23L7)%3A%20Beacon%20Block%20codebase%20(rust)%0A%0A%3Ca%20name%3D%22bp1%22%3E%5B1%5D%3C%2Fa%3E%20%5BEIP-3675%3A%20Upgrade%20consensus%20to%0AProof-of-Stake%5D(https%3A%2F%2Feips.ethereum.org%2FEIPS%2Feip-3675%23pow-block-processing)%3A%0ASpecification%20of%20the%20consensus%20mechanism%20upgrade%20on%20Ethereum%20Mainnet%20that%0Aintroduces%20Proof-of-Stake.%0A%0A%3Ca%20name%3D%22bp2%22%3E%5B2%5D%3C%2Fa%3E%20%5BEIP-2982%3A%20Serenity%20Phase%0A0%5D(https%3A%2F%2Feips.ethereum.org%2FEIPS%2Feip-2982)%3A%20Phase%200%20of%20the%20release%20schedule%20of%0ASerenity%2C%20a%20series%20of%20updates%20to%20Ethereum%20a%20scalable%2C%20proof-of-stake%20consensus.%0A%0A%3Ca%20name%3D%22bp3%22%3E%5B3%5D%3C%2Fa%3E%20%5BEthreum%20Consensus%20Specs%20Phase%0A0%5D(https%3A%2F%2Fgithub.com%2Fethereum%2Fconsensus-specs%2Ftree%2Fdev%2Fspecs%2Fphase0)%3A%0ASpecifications%20for%20Ethereum%202.0%20Phase%200%20including%0A%5Bbeacon-chain%5D(https%3A%2F%2Fgithub.com%2Fethereum%2Fconsensus-specs%2Fblob%2Fdev%2Fspecs%2Fphase0%2Fbeacon-chain.mdx)%2C%0A%5Bdeposit-contract%5D(https%3A%2F%2Fgithub.com%2Fethereum%2Fconsensus-specs%2Fblob%2Fdev%2Fspecs%2Fphase0%2Fdeposit-contract.mdx)%2C%0A%5Bfork-choice%5D(https%3A%2F%2Fgithub.com%2Fethereum%2Fconsensus-specs%2Fblob%2Fdev%2Fspecs%2Fphase0%2Ffork-choice.mdx)%2C%0A%5Bp2p-interface%5D(https%3A%2F%2Fgithub.com%2Fethereum%2Fconsensus-specs%2Fblob%2Fdev%2Fspecs%2Fphase0%2Fp2p-interface.mdx)%2C%0A%5Bvalidator%5D(https%3A%2F%2Fgithub.com%2Fethereum%2Fconsensus-specs%2Fblob%2Fdev%2Fspecs%2Fphase0%2Fvalidator.mdx)%0Aand%0A%5Bweak-subjectivity%5D(https%3A%2F%2Fgithub.com%2Fethereum%2Fconsensus-specs%2Fblob%2Fdev%2Fspecs%2Fphase0%2Fweak-subjectivity.mdx)%0A%0A%3Ca%20name%3D%22bp4%22%3E%5B6%5D%3C%2Fa%3E%20%5BEthereum%20Consensus%20and%20Execution%20Client%0ADistribution%5D(https%3A%2F%2Fclientdiversity.org%2F%23distribution)%3A%20Percentages%20of%20nodes%0Arunning%20client%20types%20for%20both%20Consensus%20(Prysm%2C%20Lighthours%2C%20Nimbus%2C%20Teku)%20and%0AExecution%20(Geth%2C%20Erigon%2C%20Besu%2C%20Nethermind)%20clients.%0A%0A%3Ca%20name%3D%22bp5%22%3E%5B5%5D%3C%2Fa%3E%20%5Bgo-ethereum%20go%0Adocumentation%5D(https%3A%2F%2Fpkg.go.dev%2Fgithub.com%2Fethereum%2Fgo-ethereum%40v1.10.26)%3A%0ADocumentation%20for%20Go%20Ethereum%2C%20Official%20Golang%20implementation%20of%20the%20Ethereum%0Aprotocol.%20Which%20is%20an%20execution%20chain%20implementation.%0A%0A%3Ca%20name%3D%22bp6%22%3E%5B6%5D%3C%2Fa%3E%20%5Bprysm%20go%0Adocumentation%5D(https%3A%2F%2Fpkg.go.dev%2Fgithub.com%2Fprysmaticlabs%2Fprysm%2Fv3%40v3.1.2)%3A%0ADocumentation%20for%20prysm%2C%20An%20Ethereum%20Consensus%20Implementation%20Written%20in%20Go.%20A%0Abeacon-chain%20immplementation.%20Also%20see%20%5BPrysm%0ADocumentation%5D(https%3A%2F%2Fdocs.prylabs.network%2Fdocs%2Fgetting-started)%0A%0A%3Ca%20name%3D%22bp7%22%3E%5B7%5D%3C%2Fa%3E%20%5Blighthouse%0Adocumentation%5D(https%3A%2F%2Fpkg.go.dev%2Fgithub.com%2Fprysmaticlabs%2Fprysm%2Fv3%40v3.1.2)%3A%0ADocumentation%20for%20lighthouse%2C%20written%20in%20Rust.%20A%20beacon-chain%20immplementation.%0A%0A%3Ca%20name%3D%22bp8%22%3E%5B8%5D%3C%2Fa%3E%20%5BEtherum%202.0%20Validators%0AOverview%5D(https%3A%2F%2Fbeaconcha.in%2Fvalidators)%3A%20Live%20Monitoring%20of%20Ethreum%202.0%0AValidators%20from%20beachoncha.in%0A%0A%3Ca%20name%3D%22bp9%22%3E%5B9%5D%3C%2Fa%3E%20%5BUpgrading%20Ethereum%5D(https%3A%2F%2Feth2book.info%2Fbellatrix%2F)%3A%20A%0Atechnical%20handbook%20on%20Ethereum's%20move%20to%20proof%20of%20stake%20and%20beyond%20Edition%200.2%3A%0ABellatrix%20%5BWIP%5D%20by%20Ben%20Edgington.%0A%0A%3Ca%20name%3D%22bp10%22%3E%5B9%5D%3C%2Fa%3E%20%5BAnnotated%20Ethereum%0ARoadmap%5D(https%3A%2F%2Fnotes.ethereum.org%2F%40domothy%2Froadmap)%3A%20an%20entry%20point%20for%20the%0Avarious%20items%20on%20the%20Ethereum%20roadmap%2C%20with%20a%20quick%20summary%20along%20with%20links%20for%0Athose%20who%20want%20to%20dive%20deeper.%0A%0A%3Ca%20name%3D%22bp11%22%3E%5B10%5D%3C%2Fa%3E%20%5BShanghai%2FCapella%0AUpgrade%5D(https%3A%2F%2Fconsensys.net%2Fshanghai-capella-upgrade%2F)%3A%20the%20first%0Asimultaneous%20upgrade%20of%20Ethereum%E2%80%99s%20execution%20layer%20and%20consensus%20layer%2C%20and%20is%0Ahighly%20anticipated%20because%20it%20will%20enable%20staked%20ETH%20withdrawals.%0A%0A**Signing**%0A%0A-%20%5Bsigp%20lighthouse%20bls%20signing%5D(https%3A%2F%2Fgithub.com%2Fsigp%2Flighthouse%2Fblob%2Fstable%2Fcrypto%2Fbls%2Fsrc%2Flib.rs)%3A%20BLS%20signing%20codebase%20(rust)%0A%0A**Staking**%0A%0A-%20%5BEthereum%20Staking%5D(https%3A%2F%2Fethereum.org%2Fen%2Fstaking%2F)%3A%20Staking%20User%20Interface%0A-%20%5BApp%20Stakewise%5D(https%3A%2F%2Fapp.stakewise.io%2F)%3A%20Ethreeum%20Staking%20Application%0A-%20%5BPROOF-OF-STAKE%20(POS)%5D(https%3A%2F%2Fethereum.org%2Fen%2Fdevelopers%2Fdocs%2Fconsensus-mechanisms%2Fpos%2F)%3A%20Ethereum%20Proof%20of%20Stake%20Documentation%0A%0A**References%20Technical%20Summary**%0A%0A%3Ca%20name%3D%22ts1%22%3E%5B1%5D%3C%2Fa%3E%20%5BEthereum%20EVM%0Aillustrated%5D(https%3A%2F%2Ftakenobu-hs.github.io%2Fdownloads%2Fethereum_evm_illustrated.pdf)%3A%0AA%20technical%20overview%20of%20Ethereum%20including%20state%2C%20accounts%2C%20transactions%20and%0Amessages%20as%20well%20as%20the%20EVM.%20%5BAppendix%20E%5D(%23appendix-e-data-structures)%20has%20links%0Ato%20type%20definitions%20for%20blocks%2C%20transactions%2C%20state%20etc%20in%20geth.%0A%0A%3Ca%20name%3D%22ts2%22%3E%5B2%5D%3C%2Fa%3E%20%5BBlocks%5D(https%3A%2F%2Fethereum.org%2Fen%2Fdevelopers%2Fdocs%2Fblocks%2F)%3A%0ABlock%20data%20definitions%20including%20attestations%20from%20ethereum.org%0A%0A%3Ca%20name%3D%22ts3%22%3E%5B3%5D%3C%2Fa%3E%20%5Beth1%20block%0Aproposal%5D(https%3A%2F%2Fhackmd.io%2F%40flashbots%2Fmev-in-eth2%23eth1-block-proposal)%3A%0ATechnical%20walkthrough%20of%20how%20blocks%20are%20proposed%20and%20potential%20MEV%20opportunities%0Afrom%20FlashBots.%0A%0A%3Ca%20name%3D%22ts4%22%3E%5B4%5D%3C%2Fa%3E%20%5BAssemble%0ABlock%5D(https%3A%2F%2Fgithub.com%2Fethereum%2Frayonism%2Fblob%2Fmaster%2Fspecs%2Fmerge.md%23assemble-block)%3A%0AEthereum%20Specification%20for%20block%20Assembly%20as%20part%20of%20Rayonism%20--%20The%20Merge%20spec.%0A%0A%3Ca%20name%3D%22ts5%22%3E%5B5%5D%3C%2Fa%3E%20%5BPrysm%20running%20a%0Anode%5D(https%3A%2F%2Fdocs.prylabs.network%2Fdocs%2Finstall%2Finstall-with-script)%3A%0AOperational%20procedures%20for%20Validators%20by%20Prysm.%20Note%20validators%20run%20both%20the%0Abeacon%20chain(consensus)%20and%20a%20geth%20node(execution)%0A%0A%3Ca%20name%3D%22ts6%22%3E%5B6%5D%3C%2Fa%3E%5BThe%20Beacon%20Chain%20Ethereum%202.0%20explainer%20you%20need%20to%20read%0Afirst%5D(https%3A%2F%2Fethos.dev%2Fbeacon-chain)%3A%20Detailed%20walk%20through%20og%20Ethereum%202.0%0Ablock%20production%20including%20slots%2C%20epochs%2C%20validators%2C%20commitees%20and%20finality.%0A%0A%3Ca%20name%3D%22ts6a%22%3E%5B6%5D%3C%2Fa%3E%5BThe%20Beacon%20Chain%20Ethereum%202.0%20explainer%20you%20need%20to%20read%0Afirst%5D(https%3A%2F%2Fethos.dev%2Fbeacon-chain)%3A%20Detailed%20walk%20through%20og%20Ethereum%202.0%0Ablock%20production%20including%20slots%2C%20epochs%2C%20validators%2C%20commitees%20and%20finality.%0A%0A%3Ca%20name%3D%22ts6b%22%3E%5B6%5D%3C%2Fa%3E%5BThe%20Beacon%20Chain%20Ethereum%202.0%20explainer%20you%20need%20to%20read%0Afirst%5D(https%3A%2F%2Fethos.dev%2Fbeacon-chain)%3A%20Detailed%20walk%20through%20og%20Ethereum%202.0%0Ablock%20production%20including%20slots%2C%20epochs%2C%20validators%2C%20commitees%20and%20finality.%0A%0A%3Ca%20name%3D%22ts7%22%3E%5B7%5D%3C%2Fa%3E%20%5BEtherum%202.0%20Validators%0AOverview%5D(https%3A%2F%2Fbeaconcha.in%2Fvalidators)%3A%20Live%20Monitoring%20of%20Ethreum%202.0%0AValidators%20from%20beachoncha.in%0A%0A%3Ca%20name%3D%22ts8%22%3E%5B8%5D%3C%2Fa%3E%5BBLS%0ASignatures%5D(https%3A%2F%2Feth2book.info%2Fbellatrix%2Fpart2%2Fbuilding_blocks%2Fsignatures%2F)%3A%0ADetailed%20walkthrough%20of%20BLS%20Signatures%20and%20how%20they%20can%20be%20used%20in%20aggregation.%0A%0A%3Ca%20name%3D%22ts9%22%3E%5B8%5D%3C%2Fa%3E%5BAttestation%20Inclusion%0ALifecycle%5D(https%3A%2F%2Fkb.beaconcha.in%2Fattestation%23attestation-inclusion-lifecycle)%3A%0AHigh%20Level%20overview%20of%20the%20attestation%20life%20cycle%20including%20geeration%2C%0Apropogation%2C%20aggregation%20and%20inclusion.Attest%0A%0A%3Ca%20name%3D%22ts10%22%3E%5Bts10%5D%3C%2Fa%3E%20%5BBeacon%20Chain%20Proposal%3A%20Sync%0AComittees%5D(https%3A%2F%2Fnotes.ethereum.org%2F%40vbuterin%2FHF1_proposal%23Sync-committees)%3A%0AFor%20each%20period%20(~27%20hours)%2C%201024%20validators%20are%20randomly%20selected%20to%20be%20part%20of%0Athe%20sync%20committee%20during%20that%20period.%20Validators%20in%20the%20sync%20committee%20would%0Apublish%20signatures%20attesting%20to%20the%20current%20head.%20These%20signatures%20would%20be%0Abroadcasted%20as%20part%20of%20a%20LightClientUpdate%20object%20that%20could%20help%20light%20clients%0Afind%20the%20head%2C%20and%20would%20be%20included%20in%20the%20beacon%20chain%20to%20be%20rewarded.%0A%0A%3Ca%20name%3D%22ts11%22%3E%5Bts11%5D%3C%2Fa%3E%20%5BAltair%20Light%20Client%20--%20Sync%0AProtocol%5D(https%3A%2F%2Fnotes.ethereum.org%2F%40vbuterin%2FHF1_proposal%23Sync-committees)%3A%0AThis%20document%20suggests%20a%20minimal%20light%20client%20design%20for%20the%20beacon%20chain%20that%0Auses%20sync%20committees.%0A%0A%3Ca%20name%3D%22ts12%22%3E%5Bts12%5D%3C%2Fa%3E%20%5BEthereum%20Builder%20Specifications%3A%20Honest%0AValidator%5D(https%3A%2F%2Fgithub.com%2Fethereum%2Fbuilder-specs%2Fblob%2Fmain%2Fspecs%2Fvalidator.mdx)%3A%0Aexplains%20the%20way%20in%20which%20a%20beacon%20chain%20validator%20is%20expected%20to%20use%20the%0ABuilder%20spec%20to%20participate%20in%20an%20external%20builder%20network.%0A%0A%3Ca%20name%3D%22ts13%22%3E%5Bts13%5D%3C%2Fa%3E%20%5BFlashbots%3A%0Amev-boost%5D(https%3A%2F%2Fgithub.com%2Fflashbots%2Fmev-boost)%3A%20open%20source%20middleware%20run%0Aby%20validators%20to%20access%20a%20competitive%20block-building%20market.%0A%0A%3Ca%20name%3D%22ts14%22%3E%5Bts14%5D%3C%2Fa%3E%20%5BA%20note%20on%20Ethereum%202.0%20phase%200%20validator%0Alifecycle%5D(https%3A%2F%2Fnotes.ethereum.org%2F7CFxjwMgQSWOHIxLgJP2Bw%23A-note-on-Ethereum-20-phase-0-validator-lifecycle)%3A%0Adescribes%20the%20concept%20of%20validator%20status%20epochs%20and%20the%20cases%20of%20validator%0Alifecycle%20in%20the%20view%20of%20%E2%80%9Cvalidator%20status%20transition%E2%80%9D%20in%20phase%200.%0A%0A**Additional**%0A%0A%23%23%20Appendices%0A%0A%23%23%23%20Appendix%20A%3A%20Ethreum%202.0%20Technical%20Deep%20Dive%0A%0A%23%23%23%23%20Block%20Production%0A%0A**Process%20Flow**%0A%0A-%20Transactions%20are%20placed%20in%20%5Btxpool%5D(https%3A%2F%2Fgithub.com%2Fethereum%2Fgo-ethereum%2Ftree%2Fmaster%2Fcore%2Ftxpool)%0A-%20The%20transaction%20pool%20is%20read%20and%20%5Bblocks%5D(https%3A%2F%2Fgithub.com%2Fethereum%2Fgo-ethereum%2Fblob%2Frelease%2F1.9%2Fcore%2Ftypes%2Fblock.go%23L169)%20are%20produced%20by%20the%20%5Bminer%5D(https%3A%2F%2Fgithub.com%2Fethereum%2Fgo-ethereum%2Fblob%2Fmaster%2Fminer%2Fminer.go)%0A-%20Blocks%20Headers%20get%20forwarded%20to%20the%20Beacon%20chain%20once%20they%20pass%20%5Bbeacon%20consensus%5D(https%3A%2F%2Fgithub.com%2Fethereum%2Fgo-ethereum%2Fblob%2Fmaster%2Fconsensus%2Fbeacon%2Fconsensus.go)%0A-%20The%20Beacon%20chain%20embeds%20the%20EthChain%20Header%20into%20a%20%5BBeaconBlock%5D(https%3A%2F%2Fgithub.com%2Fprysmaticlabs%2Fprysm%2Fblob%2Fdevelop%2Fconsensus-types%2Fblocks%2Ftypes.go%23L43)%0A%0A%23%23%23%23%20Consensus%20and%20Finality%0A%0AAttestation%20Process%20Flow%0A%0A-%20Proposing%20Block%0A-%20Signing%20Blocks%0A-%20Aggregated%20Attestation%20generation%0A-%20Block%20Proposal%20and%20Inclusion%20of%20Attestation%0A-%20The%20%5BSignedBeaconBlock%5D(https%3A%2F%2Fgithub.com%2Fprysmaticlabs%2Fprysm%2Fblob%2Fdevelop%2Fconsensus-types%2Fblocks%2Ftypes.go%23L72)%20is%20added%20to%20the%20chain%0A%0AAttestations%20Block(LMD%20Ghost%20Vote)%20and%20Epoch%20Checkpoints%20(FFG%20Votes)%0A%0A-%20The%20validators%20in%20the%20committee%20attest%20to%20the%20validity%20of%20the%20block%20(LMD%20Ghost%20Vote)%0A-%20The%20validators%20in%20the%20comittee%20attest%20to%20the%20first%20block%20in%20the%20Epoch%20(FFG%20Vote)%0A%0AFrom%20%5BAttestations%2C%20ethereum.org%5D(https%3A%2F%2Fethereum.org%2Fen%2Fdevelopers%2Fdocs%2Fconsensus-mechanisms%2Fpos%2Fattestations)%0A%0A%3E%20Every%20epoch%20(6.4%20minutes)%20a%20validator%20proposes%20an%20attestation%20to%20the%20network.%20The%20attestation%20is%20for%20a%20specific%20slot%20in%20the%20epoch.%20The%20purpose%20of%20the%20attestation%20is%20to%20vote%20in%20favor%20of%20the%20validator's%20view%20of%20the%20chain%2C%20in%20particular%20the%20most%20recent%20justified%20block%20and%20the%20first%20block%20in%20the%20current%20epoch%20(known%20as%20source%20and%20target%20checkpoints).%20This%20information%20is%20combined%20for%20all%20participating%20validators%2C%20enabling%20the%20network%20to%20reach%20consensus%20about%20the%20state%20of%20the%20blockchain.%0A%3E%0A%3E%20The%20attestation%20contains%20the%20following%20components%3A%0A%3E%0A%3E%20-%20aggregation_bits%3A%20a%20bitlist%20of%20validators%20where%20the%20position%20maps%20to%20the%20validator%20index%20in%20their%20committee%3B%20the%20value%20(0%2F1)%20indicates%20whether%20the%20validator%20signed%20the%20data%20(i.e.%20whether%20they%20are%20active%20and%20agree%20with%20the%20block%20proposer)%0A%3E%20-%20data%3A%20details%20relating%20to%20the%20attestation%2C%20as%20defined%20below%0A%3E%20-%20signature%3A%20a%20BLS%20signature%20that%20aggregates%20the%20signatures%20of%20individual%20validators%0A%3E%0A%3E%20The%20first%20task%20for%20an%20attesting%20validator%20is%20to%20build%20the%20data.%20The%20data%20contains%20the%20following%20information%3A%0A%3E%0A%3E%20-%20slot%3A%20The%20slot%20number%20that%20the%20attestation%20refers%20to%0A%3E%20-%20index%3A%20A%20number%20that%20identifies%20which%20committee%20the%20validator%20belongs%20to%20in%20a%20given%20slot%0A%3E%20-%20beacon_block_root%3A%20Root%20hash%20of%20the%20block%20the%20validator%20sees%20at%20the%20head%20of%20the%20chain%20(the%20result%20of%20applying%20the%20fork-choice%20algorithm)%0A%3E%20-%20source%3A%20Part%20of%20the%20finality%20vote%20indicating%20what%20the%20validators%20see%20as%20the%20most%20recent%20justified%20block%0A%3E%20-%20target%3A%20Part%20of%20the%20finality%20vote%20indicating%20what%20the%20validators%20see%20as%20the%20first%20block%20in%20the%20current%20epoch%0A%3E%0A%3E%20Once%20the%20data%20is%20built%2C%20the%20validator%20can%20flip%20the%20bit%20in%20aggregation_bits%20corresponding%20to%20their%20own%20validator%20index%20from%200%20to%201%20to%20show%20that%20they%20participated.%0A%3E%0A%3E%20Finally%2C%20the%20validator%20signs%20the%20attestation%20and%20broadcasts%20it%20to%20the%20network.%0A%0A**Technical%20Details**%0A%0AFollowing%20is%20an%20overview%20of%20the%20state%20structure%20and%20logic%20for%20generating%20committees%20and%20aggregating%20attestations.%20For%20data%20structures%2C%20please%20see%20%5BBeacon%20State%20Data%20Structures%20from%20Prysm%5D(%23beacon-state-data-structures-from-prysm)%20and%20%5Bweb3signer_types%20from%20prysm%5D(%23web3signer_types-from-prysm).%0A%0A%5BBeaconState%5D(https%3A%2F%2Fpkg.go.dev%2Fgithub.com%2Fprysmaticlabs%2Fprysm%2Fv3%40v3.1.2%2Fbeacon-chain%2Fstate%23BeaconState)%20contains%20both%20a%20%5BReadOnlyBeaconState%5D(https%3A%2F%2Fpkg.go.dev%2Fgithub.com%2Fprysmaticlabs%2Fprysm%2Fv3%40v3.1.2%2Fbeacon-chain%2Fstate%23ReadOnlyBeaconState)%20and%20a%20%5BWriteOnlyBeaconState%5D(https%3A%2F%2Fpkg.go.dev%2Fgithub.com%2Fprysmaticlabs%2Fprysm%2Fv3%40v3.1.2%2Fbeacon-chain%2Fstate%23WriteOnlyBeaconState)%20wich%20contain%20%5BReadOnlyValidators%5D(https%3A%2F%2Fpkg.go.dev%2Fgithub.com%2Fprysmaticlabs%2Fprysm%2Fv3%40v3.1.2%2Fbeacon-chain%2Fstate%23ReadOnlyValidators)%20and%20%5BReadOnlyRandaoMixes%5D(https%3A%2F%2Fpkg.go.dev%2Fgithub.com%2Fprysmaticlabs%2Fprysm%2Fv3%40v3.1.2%2Fbeacon-chain%2Fstate%23ReadOnlyRandaoMixes)%20and%20%5BWriteOnlyValidators%5D(https%3A%2F%2Fpkg.go.dev%2Fgithub.com%2Fprysmaticlabs%2Fprysm%2Fv3%40v3.1.2%2Fbeacon-chain%2Fstate%23WriteOnlyValidators)%20and%20%5BWriteOnlyRandaoMixes%5D(https%3A%2F%2Fpkg.go.dev%2Fgithub.com%2Fprysmaticlabs%2Fprysm%2Fv3%40v3.1.2%2Fbeacon-chain%2Fstate%23WriteOnlyRandaoMixes)%20respectively.%0A%0AAt%20the%20beginning%20of%20each%20epoch%20%5Bfunc%20ProcessRandaoMixesReset%5D(https%3A%2F%2Fpkg.go.dev%2Fgithub.com%2Fprysmaticlabs%2Fprysm%2Fv3%40v3.1.2%2Fbeacon-chain%2Fcore%2Fepoch%23ProcessRandaoMixesReset)%20processes%20the%20final%20updates%20to%20RANDAO%20mix%20during%20epoch%20processing.%20This%20calls%20%5BRandaoMix%5D(https%3A%2F%2Fpkg.go.dev%2Fgithub.com%2Fprysmaticlabs%2Fprysm%2Fv3%40v3.1.2%2Fbeacon-chain%2Fcore%2Fhelpers%23RandaoMix)%20which%20returns%20the%20randao%20mix%20(xor'ed%20seed)%20of%20a%20given%20slot.%20It%20is%20used%20to%20shuffle%20validators.%0A%0AFollowing%20are%20sample%20mixes%20generated%20from%20%5Bfunc%20TestRandaoMix_OK%5D(https%3A%2F%2Fgithub.com%2Fprysmaticlabs%2Fprysm%2Fblob%2Fv3.1.2%2Fbeacon-chain%2Fcore%2Fhelpers%2Frandao_test.go%23L16)%20by%20adding%20the%20statement%20%60fmt.Printf(%22mix%3A%20%25v%5Cn%22%2C%20mix)%60%0A%0A%60%60%60%0Amix%3A%20%5B10%200%200%200%200%200%200%200%200%200%200%200%200%200%200%200%200%200%200%200%200%200%200%200%200%200%200%200%200%200%200%200%5D%0Amix%3A%20%5B40%209%200%200%200%200%200%200%200%200%200%200%200%200%200%200%200%200%200%200%200%200%200%200%200%200%200%200%200%200%200%200%5D%0Amix%3A%20%5B159%20134%200%200%200%200%200%200%200%200%200%200%200%200%200%200%200%200%200%200%200%200%200%200%200%200%200%200%200%200%200%200%5D%0A%60%60%60%0A%0AThe%20shuffle%20functions%20consist%20of%0A%0A-%20%5Bfunc%20ShuffleList%5D(https%3A%2F%2Fpkg.go.dev%2Fgithub.com%2Fprysmaticlabs%2Fprysm%2Fv3%40v3.1.2%2Fbeacon-chain%2Fcore%2Fhelpers%23ShuffleList)%3A%20returns%20list%20of%20shuffled%20indexes%20in%20a%20pseudorandom%20permutation%20%60p%60%20of%20%600...list_size%20-%201%60%20with%20%E2%80%9Cseed%E2%80%9C%20as%20entropy.%20We%20utilize%20'swap%20or%20not'%20shuffling%20in%20this%20implementation%3B%20we%20are%20allocating%20the%20memory%20with%20the%20seed%20that%20stays%20constant%20between%20iterations%20instead%20of%20reallocating%20it%20each%20iteration%20as%20in%20the%20spec.%20This%20implementation%20is%20based%20on%20the%20original%20implementation%20from%20protolambda%2C%20https%3A%2F%2Fgithub.com%2Fprotolambda%2Feth2-shuffle%0A%0A%20%20Following%20is%20an%20example%20of%20a%20shuffled%20list%20generated%20from%20%5BTestShuffleList_OK%5D(https%3A%2F%2Fgithub.com%2Fprysmaticlabs%2Fprysm%2Fblob%2Fv3.1.2%2Fbeacon-chain%2Fcore%2Fhelpers%2Fshuffle_test.go%23L25)%0A%0A%20%20%60%60%60%0A%20%20list1%3A%20%5B0%201%202%203%204%205%206%207%208%209%5D%0A%20%20seed1%3A%20%5B1%20128%2012%200%200%200%200%200%200%200%200%200%200%200%200%200%200%200%200%200%200%200%200%200%200%200%200%200%200%200%200%200%5D%0A%20%20shuffledList1%3A%20%5B0%207%208%206%203%209%204%205%202%201%5D%0A%20%20%60%60%60%0A%0A-%20%5Bfunc%20ShuffleIndex%5D(https%3A%2F%2Fpkg.go.dev%2Fgithub.com%2Fprysmaticlabs%2Fprysm%2Fv3%40v3.1.2%2Fbeacon-chain%2Fcore%2Fhelpers%23ShuffledIndex)%3A%20returns%20%60p(index)%60%20in%20a%20pseudorandom%20permutation%20%60p%60%20of%20%600...list_size%20-%201%60%20with%20%E2%80%9Cseed%E2%80%9C%20as%20entropy.%20We%20utilize%20'swap%20or%20not'%20shuffling%20in%20this%20implementation%3B%20we%20are%20allocating%20the%20memory%20with%20the%20seed%20that%20stays%20constant%20between%20iterations%20instead%20of%20reallocating%20it%20each%20iteration%20as%20in%20the%20spec.%20This%20implementation%20is%20based%20on%20the%20original%20implementation%20from%20protolambda%2C%20https%3A%2F%2Fgithub.com%2Fprotolambda%2Feth2-shuffle%0A%0A-%20%5Bfunc%20ShuffleIndices%5D(https%3A%2F%2Fpkg.go.dev%2Fgithub.com%2Fprysmaticlabs%2Fprysm%2Fv3%40v3.1.2%2Fbeacon-chain%2Fcore%2Fhelpers%23ShuffledIndices)%3A%20ShuffledIndices%20uses%20input%20beacon%20state%20and%20returns%20the%20shuffled%20indices%20of%20the%20input%20epoch%2C%20the%20shuffled%20indices%20then%20can%20be%20used%20to%20break%20up%20into%20committees.%0A%0ACommittes%20are%20formed%20using%20functions%20from%20%5Bbeacon_comittee.go%5D(https%3A%2F%2Fgithub.com%2Fprysmaticlabs%2Fprysm%2Fblob%2Fv3.1.2%2Fbeacon-chain%2Fcore%2Fhelpers%2Fbeacon_committee.go)%0A%0A-%20%5Bfunc%20BeaconComittee%5D(https%3A%2F%2Fpkg.go.dev%2Fgithub.com%2Fprysmaticlabs%2Fprysm%2Fv3%40v3.1.2%2Fbeacon-chain%2Fcore%2Fhelpers%23BeaconCommittee)%3A%20returns%20the%20beacon%20committee%20of%20a%20given%20slot%20and%20committee%20index.%20The%20validator%20indices%20and%20seed%20are%20provided%20as%20an%20argument%20rather%20than%20an%20imported%20implementation%20from%20the%20spec%20definition.%20Having%20them%20as%20an%20argument%20allows%20for%20cheaper%20computation%20run%20time.%20(This%20is%20an%20optomized%20version%20of%20%5Bfunc%20BeaconComitteFromState%5D(https%3A%2F%2Fpkg.go.dev%2Fgithub.com%2Fprysmaticlabs%2Fprysm%2Fv3%40v3.1.2%2Fbeacon-chain%2Fcore%2Fhelpers%23BeaconCommitteeFromState))%0A%0A%20%20Following%20is%20an%20example%20of%20a%20%60beaconComittee%60%20generated%20by%20adding%20the%20following%20lines%20to%20%5BTestBeaconCommitteeFromState_UpdateCacheForPreviousEpoch%5D(https%3A%2F%2Fgithub.com%2Fprysmaticlabs%2Fprysm%2Fblob%2Fv3.1.2%2Fbeacon-chain%2Fcore%2Fhelpers%2Fbeacon_committee_test.go%23L574)%3A%0A%0A%20%20%60%60%60%0A%20%20var%20beaconCommittee%20%5B%5Dtypes.ValidatorIndex%0A%20%20beaconCommittee%2C%20err%20%3D%20BeaconCommitteeFromState(context.Background()%2C%20state%2C%201%20%2F_previous%20epoch_%2F%2C%200)%0A%20%20fmt.Printf(%22beaconComittee%3A%20%25%2Bv%5Cn%22%2C%20beaconCommittee)%0A%20%20%60%60%60%0A%0A%20%20Result%0A%0A%20%20%60%60%60%0A%20%20beaconComittee%3A%20%5B160%20338%20313%20307%20320%20324%2045%20469%20196%20303%2023%2014%2097%20312%20126%20488%5D%0A%20%20%60%60%60%0A%0A-%20%5Bfunc%20CommitteeAssignments%5D(https%3A%2F%2Fpkg.go.dev%2Fgithub.com%2Fprysmaticlabs%2Fprysm%2Fv3%40v3.1.2%2Fbeacon-chain%2Fcore%2Fhelpers%23CommitteeAssignments)%3A%20is%20a%20map%20of%20validator%20indices%20pointing%20to%20the%20appropriate%20committee%20assignment%20for%20the%20given%20epoch.%0A%20%201.%20Determine%20the%20proposer%20validator%20index%20for%20each%20slot.%0A%20%202.%20Compute%20all%20committees.%0A%20%203.%20Determine%20the%20attesting%20slot%20for%20each%20committee.%0A%20%204.%20Construct%20a%20map%20of%20validator%20indices%20pointing%20to%20the%20respective%20committees.%0A%0A%20%20Following%20is%20an%20example%20of%20%60commitees%60%20generated%20by%20adding%20the%20following%20lines%20to%20%5BTestComputeCommittee_WithoutCache%5D(https%3A%2F%2Fgithub.com%2Fprysmaticlabs%2Fprysm%2Fblob%2Fv3.1.2%2Fbeacon-chain%2Fcore%2Fhelpers%2Fbeacon_committee_test.go%23L23)%0A%0Acommittees%2C%20err%20%3A%3D%20computeCommittee(indices%2C%20seed%2C%200%2C%201%20%2F_%20Total%20committee_%2F)%0A%0A%60%60%60%0A%0Afmt.Printf(%22committees%3A%20%25%2Bv%5Cn%22%2C%20committees)%0A%60%60%60%0A%0A%20%20%20%20%3Cdetails%3E%0A%20%20%20%20%3Csummary%3Eresult%3C%2Fsummary%3E%0A%0A%20%20%20%20%60%60%60%0A%20%20%20%20committeesdetails%3E%0A%0AAttestations%20are%20managed%20using%20functions%20from%20%5Battestation.go%5D(https%3A%2F%2Fgithub.com%2Fprysmaticlabs%2Fprysm%2Fblob%2Fv3.1.2%2Fbeacon-chain%2Fcore%2Fhelpers%2Fattestation.go)%0A%0A-%20%5Bfunc%20ValidateNilAttestation%5D(https%3A%2F%2Fpkg.go.dev%2Fgithub.com%2Fprysmaticlabs%2Fprysm%2Fv3%40v3.1.2%2Fbeacon-chain%2Fcore%2Fhelpers%23ValidateNilAttestation)%3A%20checks%20if%20any%20composite%20field%20of%20input%20attestation%20is%20nil.%20Access%20to%20these%20nil%20fields%20will%20result%20in%20run%20time%20panic%2C%20it%20is%20recommended%20to%20run%20these%20checks%20as%20first%20line%20of%20defense.%0A-%20%5Bfunc%20ValidateSlotTargetEpoch%5D(https%3A%2F%2Fpkg.go.dev%2Fgithub.com%2Fprysmaticlabs%2Fprysm%2Fv3%40v3.1.2%2Fbeacon-chain%2Fcore%2Fhelpers%23ValidateSlotTargetEpoch)%3A%20ValidateSlotTargetEpoch%20checks%20if%20attestation%20data's%20epoch%20matches%20target%20checkpoint's%20epoch.%20It%20is%20recommended%20to%20run%20%60ValidateNilAttestation%60%20first%20to%20ensure%20%60data.Target%60%20can't%20be%20nil.%0A-%20%5Bfunc%20IsAggregator%5D(https%3A%2F%2Fpkg.go.dev%2Fgithub.com%2Fprysmaticlabs%2Fprysm%2Fv3%40v3.1.2%2Fbeacon-chain%2Fcore%2Fhelpers%23IsAggregator)%3A%20IsAggregator%20returns%20true%20if%20the%20signature%20is%20from%20the%20input%20validator.%20The%20committee%20count%20is%20provided%20as%20an%20argument%20rather%20than%20imported%20implementation%20from%20spec.%20Having%20committee%20count%20as%20an%20argument%20allows%20cheaper%20computation%20at%20run%20time.%0A-%20%5Bfunc%20AggregateSignature%5D(https%3A%2F%2Fpkg.go.dev%2Fgithub.com%2Fprysmaticlabs%2Fprysm%2Fv3%40v3.1.2%2Fbeacon-chain%2Fcore%2Fhelpers%23AggregateSignature)%3A%20returns%20the%20aggregated%20signature%20of%20the%20input%20attestations.%0A%0A%20%20Spec%20pseudocode%20definition%3A%0A%0A%20%20%60%60%60%0A%20%20def%20get_aggregate_signature(attestations%3A%20Sequence%5BAttestation%5D)%20-%3E%20BLSSignature%3A%0A%20%20signatures%20%3D%20%5Battestation.signature%20for%20attestation%20in%20attestations%5D%0A%20%20return%20bls.Aggregate(signatures)%0A%20%20%60%60%60%0A%0A%20%20Following%20is%20an%20example%20aggregrated%20signature%20by%20adding%20the%20following%20lines%20to%20%5BTestAttestation_AggregateSignature%5D(https%3A%2F%2Fgithub.com%2Fprysmaticlabs%2Fprysm%2Fblob%2Fv3.1.2%2Fbeacon-chain%2Fcore%2Fhelpers%2Fattestation_test.go%23L48)%0A%0A%20%20%60%60%60%0A%20%20aggSig%2C%20err%20%3A%3D%20helpers.AggregateSignature(atts)%0A%20%20fmt.Printf(%22aggSig%3A%20%25%2Bv%5Cn%22%2C%20aggSig)%0A%20%20%60%60%60%0A%0A%20%20Result%0A%0A%20%20%60%60%60%0A%20%20%20%20%20%20aggSig%3A%20%26%7Bs%3A0xc0003fe000%7D%0A%20%20%60%60%60%0A%0A-%20%5Bfunc%20IsAggregated%5D(https%3A%2F%2Fpkg.go.dev%2Fgithub.com%2Fprysmaticlabs%2Fprysm%2Fv3%40v3.1.2%2Fbeacon-chain%2Fcore%2Fhelpers%23IsAggregated)%3A%20IsAggregated%20returns%20true%20if%20the%20attestation%20is%20an%20aggregated%20attestation%2C%20false%20otherwise.%0A%0A-%20%5Bfunc%20ComputeSubnetForAttestation%5D(https%3A%2F%2Fpkg.go.dev%2Fgithub.com%2Fprysmaticlabs%2Fprysm%2Fv3%40v3.1.2%2Fbeacon-chain%2Fcore%2Fhelpers%23ComputeSubnetForAttestation)%3A%20returns%20the%20subnet%20for%20which%20the%20provided%20attestation%20will%20be%20broadcasted%20to.This%20differs%20from%20the%20spec%20definition%20by%20instead%20passing%20in%20the%20active%20validators%20indices%20in%20the%20attestation's%20given%20epoch.%0A%0A%60%60%60%0A%20%20Spec%20pseudocode%20definition%3A%0A%0Adef%20compute_subnet_for_attestation(committees_per_slot%3A%20uint64%2C%20slot%3A%20Slot%2C%20committee_index%3A%20CommitteeIndex)%20-%3E%20uint64%3A%0A%0A%22%22%22%0ACompute%20the%20correct%20subnet%20for%20an%20attestation%20for%20Phase%200.%0ANote%2C%20this%20mimics%20expected%20future%20behavior%20where%20attestations%20will%20be%20mapped%20to%20their%20shard%20subnet.%0A%22%22%22%0Aslots_since_epoch_start%20%3D%20uint64(slot%20%25%20SLOTS_PER_EPOCH)%0Acommittees_since_epoch_start%20%3D%20committees_per_slot%20%5C*%20slots_since_epoch_start%0A%0Areturn%20uint64((committees_since_epoch_start%20%2B%20committee_index)%20%25%20ATTESTATION_SUBNET_COUNT)%0A%0A%60%60%60%0A%0A-%20%5Bfunc%20ComputeSubnetFromCommitteeAndSlot%5D(https%3A%2F%2Fpkg.go.dev%2Fgithub.com%2Fprysmaticlabs%2Fprysm%2Fv3%40v3.1.2%2Fbeacon-chain%2Fcore%2Fhelpers%23ComputeSubnetFromCommitteeAndSlot)%3A%20is%20a%20flattened%20version%20of%20ComputeSubnetForAttestation%20where%20we%20only%20pass%20in%20the%20relevant%20fields%20from%20the%20attestation%20as%20function%20arguments.%0A%0ASpec%20pseudocode%20definition%3A%0A%0A%60%60%60%0A%0Adef%20compute_subnet_for_attestation(committees_per_slot%3A%20uint64%2C%20slot%3A%20Slot%2C%20committee_index%3A%20CommitteeIndex)%20-%3E%20uint64%3A%0A%0A%22%22%22%0ACompute%20the%20correct%20subnet%20for%20an%20attestation%20for%20Phase%200.%0ANote%2C%20this%20mimics%20expected%20future%20behavior%20where%20attestations%20will%20be%20mapped%20to%20their%20shard%20subnet.%0A%22%22%22%0Aslots_since_epoch_start%20%3D%20uint64(slot%20%25%20SLOTS_PER_EPOCH)%0Acommittees_since_epoch_start%20%3D%20committees_per_slot%20%5C*%20slots_since_epoch_start%0A%0Areturn%20uint64((committees_since_epoch_start%20%2B%20committee_index)%20%25%20ATTESTATION_SUBNET_COUNT)%0A%0A%60%60%60%0A%0A-%20%5Bfunc%20ValidateAttestationTime%5D(https%3A%2F%2Fpkg.go.dev%2Fgithub.com%2Fprysmaticlabs%2Fprysm%2Fv3%40v3.1.2%2Fbeacon-chain%2Fcore%2Fhelpers%23ValidateAttestationTime)%3A%20Validates%20that%20the%20incoming%20attestation%20is%20in%20the%20desired%20time%20range.%0A%20%20An%20attestation%20is%20valid%20only%20if%20received%20within%20the%20last%20ATTESTATION_PROPAGATION_SLOT_RANGE%20slots.%0A%0AExample%3A%0A%0A%60%60%60%0A%0AATTESTATION_PROPAGATION_SLOT_RANGE%20%3D%205%0AclockDisparity%20%3D%2024%20seconds%0Acurrent_slot%20%3D%20100%0Ainvalid_attestation_slot%20%3D%2092%0Ainvalid_attestation_slot%20%3D%20103%0Avalid_attestation_slot%20%3D%2098%0Avalid_attestation_slot%20%3D%20101%0A%0A%60%60%60%0A%0AIn%20the%20attestation%20must%20be%20within%20the%20range%20of%2095%20to%20102%20in%20the%20example%20above.%0A%0A-%20%5Bfunc%20VerifyCheckpointEpoch%5D(https%3A%2F%2Fpkg.go.dev%2Fgithub.com%2Fprysmaticlabs%2Fprysm%2Fv3%40v3.1.2%2Fbeacon-chain%2Fcore%2Fhelpers%23VerifyCheckpointEpoch)%3A%20VerifyCheckpointEpoch%20is%20within%20current%20epoch%20and%20previous%20epoch%20with%20respect%20to%20current%20time.%20Returns%20true%20if%20it's%20within%2C%20false%20if%20it's%20not.%0A%0A_Note%3A%20Sample%20command%20for%20running%20tests%20in%20Prysm%3A%20%60bazel%20test%20%2F%2Fbeacon-chain%2Fcore%2Fhelpers%3Ago_default_test%20--test_output%3Dstreamed%20--test_filter%3DTestAttestation_AggregateSignature%60._%0A%0A**Consensus%20Committee%20Selection**%0A%0A-%20%5Bfunc%20ProcessRandoa%5D(https%3A%2F%2Fpkg.go.dev%2Fgithub.com%2Fprysmaticlabs%2Fprysm%2Fv3%40v3.1.2%2Fbeacon-chain%2Fcore%2Fblocks%23ProcessRandao)%3A%20checks%20the%20block%20proposer's%20randao%20commitment%20and%20generates%20a%20new%20randao%20mix%20to%20update%20in%20the%20beacon%20state's%20latest%20randao%20mixes%20slice.%0A-%20%5Bfunc%20randaoSigningData%5D(https%3A%2F%2Fgithub.com%2Fprysmaticlabs%2Fprysm%2Fblob%2Fv3.1.2%2Fbeacon-chain%2Fcore%2Fblocks%2Fsignature.go%23L157)%3A%20retrieves%20the%20randao%20related%20signing%20data%20from%20the%20state.%0A%20%20-%20%5Bfunc%20(b%20%5C*BeaconState)%20PubkeyAtIndex(idx%20types.ValidatorIndex)%20%5Bfieldparams.BLSPubkeyLength%5Dbyte%20%5D(https%3A%2F%2Fgithub.com%2Fprysmaticlabs%2Fprysm%2Fblob%2Fv3.1.2%2Fbeacon-chain%2Fstate%2Fstate-native%2Fgetters_validator.go%23L135)%3A%20returns%20the%20pubkey%20at%20the%20given%20validator%20index.%0A%0A%23%23%23%20Appendix%20B%3A%20Additional%20Light%20Client%20Support%20Documentation%0A%0A%23%23%23%23%20Key%20Concepts%0A%0A-%20Syncing%20to%20Current%20state%0A%0A-%20Advancing%20Blocks%0A-%20Communication%20can%20be%20either%20via%0A-%20RPC%20to%20the%20%5BEth%20BEACON%20Node%20API%5D(https%3A%2F%2Fethereum.github.io%2Fbeacon-APIs%2F%23%2FBeacon)%0A-%20%5BNetworking%20Gossip%20Topics%5D(https%3A%2F%2Fgithub.com%2Fethereum%2Fconsensus-specs%2Fblob%2Fdev%2Fspecs%2Faltair%2Flight-client%2Fp2p-interface.md%23global-topics)%0A%20%20-%20%5Blight_client_finality_update%5D(https%3A%2F%2Fgithub.com%2Fethereum%2Fconsensus-specs%2Fblob%2Fdev%2Fspecs%2Faltair%2Flight-client%2Fp2p-interface.md%23light_client_finality_update)%3A%20This%20topic%20is%20used%20to%20propagate%20the%20latest%20%60LightClientFinalityUpdate%60%20to%20light%20clients%2C%20allowing%20them%20to%20keep%20track%20of%20the%20latest%20%60finalized_header%60.%0A%20%20-%20%5Blight_client_optimistic_update%5D(https%3A%2F%2Fgithub.com%2Fethereum%2Fconsensus-specs%2Fblob%2Fdev%2Fspecs%2Faltair%2Flight-client%2Fp2p-interface.md%23light_client_optimistic_update)%3A%20This%20topic%20is%20used%20to%20propagate%20the%20latest%60LightClientOptimisticUpdate%60%20to%20light%20clients%2C%20allowing%20them%20to%20keep%20track%20of%20the%20latest%20%60optimistic_header%60.%0A%0A_Note%3A%20Time%20on%20Ethereum%202.0%20Proof%20of%20Stake%20is%20divided%20into%20slots%20and%20epochs.%20One%20slot%20is%2012%20seconds.%20One%20epoch%20is%206.4%20minutes%2C%20consisting%20of%2032%20slots.%20One%20block%20can%20be%20created%20for%20each%20slot._%0A%0A%23%23%23%23%20Altair%20Light%20Client%20--%20Sync%20Protocol%0A%0A-%20%5BAltair%20Light%20Client%20--%20Sync%20Protocol%5D(https%3A%2F%2Fgithub.com%2Fethereum%2Fconsensus-specs%2Fblob%2Fdev%2Fspecs%2Faltair%2Flight-client%2Fsync-protocol.mdx)%3A%20The%20beacon%20chain%20is%20designed%20to%20be%20light%20client%20friendly%20for%20constrained%20environments%20to%20access%20Ethereum%20with%20reasonable%20safety%20and%20liveness.%0A%0ASuch%20environments%20include%20resource-constrained%20devices%20(e.g.%20phones%20for%20trust-minimized%20wallets)and%20metered%20VMs%20(e.g.%20blockchain%20VMs%20for%20cross-chain%20bridges).%0A%0AThis%20document%20suggests%20a%20minimal%20light%20client%20design%20for%20the%20beacon%20chain%20thatuses%20sync%20committees%20introduced%20in%20%5Bthis%20beacon%20chain%20extension%5D(https%3A%2F%2Fgithub.com%2Fethereum%2Fconsensus-specs%2Fblob%2Fdev%2Fspecs%2Faltair%2Fbeacon-chain.mdx).%0A%0AAdditional%20documents%20describe%20how%20the%20light%20client%20sync%20protocol%20can%20be%20used%3A%0A%0A-%20%5BFull%20node%5D(https%3A%2F%2Fgithub.com%2Fethereum%2Fconsensus-specs%2Fblob%2Fdev%2Fspecs%2Faltair%2Flight-client%2Ffull-node.mdx)%0A-%20%5BLight%20client%5D(https%3A%2F%2Fgithub.com%2Fethereum%2Fconsensus-specs%2Fblob%2Fdev%2Fspecs%2Faltair%2Flight-client%2Flight-client.mdx)%0A-%20%5BNetworking%5D(https%3A%2F%2Fgithub.com%2Fethereum%2Fconsensus-specs%2Fblob%2Fdev%2Fspecs%2Faltair%2Flight-client%2Fp2p-interface.mdx)%0A%0A-%20%5BLight%20client%20sync%20process%5D(https%3A%2F%2Fgithub.com%2Fethereum%2Fconsensus-specs%2Fblob%2Fdev%2Fspecs%2Faltair%2Flight-client%2Flight-client.mdx)%3A%20explains%20how%20light%20clients%20MAY%20obtain%20light%20client%20data%20to%20sync%20with%20the%20network.%0A%0A1.%20The%20light%20client%20MUST%20be%20configured%20out-of-band%20with%20a%20spec%2Fpreset%20(including%20fork%20schedule)%2C%20with%20%60genesis_state%60%20(including%20%60genesis_time%60%20and%20%60genesis_validators_root%60)%2C%20and%20with%20a%20trusted%20block%20root.%20The%20trusted%20block%20SHOULD%20be%20within%20the%20weak%20subjectivity%20period%2C%20and%20its%20root%20SHOULD%20be%20from%20a%20finalized%20%60Checkpoint%60.%0A2.%20The%20local%20clock%20is%20initialized%20based%20on%20the%20configured%20%60genesis_time%60%2C%20and%20the%20current%20fork%20digest%20is%20determined%20to%20browse%20for%20and%20connect%20to%20relevant%20light%20client%20data%20providers.%0A3.%20The%20light%20client%20fetches%20a%20%5B%60LightClientBootstrap%60%5D(https%3A%2F%2Fgithub.com%2Fethereum%2Fconsensus-specs%2Fblob%2Fdev%2Fspecs%2Faltair%2Flight-client%2Flight-client.mdx)%20object%20for%20the%20configured%20trusted%20block%20root.%20The%20%60bootstrap%60%20object%20is%20passed%20to%20%5B%60initialize_light_client_store%60%5D(https%3A%2F%2Fgithub.com%2Fethereum%2Fconsensus-specs%2Fblob%2Fdev%2Fspecs%2Faltair%2Flight-client%2Fsync-protocol.md%23initialize_light_client_store)%20to%20obtain%20a%20local%20%5B%60LightClientStore%60%5D(https%3A%2F%2Fgithub.com%2Fethereum%2Fconsensus-specs%2Fblob%2Fdev%2Fspecs%2Faltair%2Flight-client%2Fsync-protocol.md%23lightclientstore).%0A4.%20The%20light%20client%20tracks%20the%20sync%20committee%20periods%20%60finalized_period%60%20from%20%60store.finalized_header.slot%60%2C%20%60optimistic_period%60%20from%20%60store.optimistic_header.slot%60%2C%20and%20%60current_period%60%20from%20%60current_slot%60%20based%20on%20the%20local%20clock.%0A%20%20%201.%20When%20%60finalized_period%20%3D%3D%20optimistic_period%60%20and%20%5B%60is_next_sync_committee_known%60%5D(https%3A%2F%2Fgithub.com%2Fethereum%2Fconsensus-specs%2Fblob%2Fdev%2Fspecs%2Faltair%2Flight-client%2Fsync-protocol.md%23is_next_sync_committee_known)%20indicates%20%60False%60%2C%20the%20light%20client%20fetches%20a%20%5B%60LightClientUpdate%60%5D(https%3A%2F%2Fgithub.com%2Fethereum%2Fconsensus-specs%2Fblob%2Fdev%2Fspecs%2Faltair%2Flight-client%2Fsync-protocol.md%23lightclientupdate)%20for%20%60finalized_period%60.%20If%20%60finalized_period%20%3D%3D%20current_period%60%2C%20this%20fetch%20SHOULD%20be%20scheduled%20at%20a%20random%20time%20before%20%60current_period%60%20advances.%0A%20%20%202.%20When%20%60finalized_period%20%2B%201%20%3C%20current_period%60%2C%20the%20light%20client%20fetches%20a%20%60LightClientUpdate%60%20for%20each%20sync%20committee%20period%20in%20range%20%60%5Bfinalized_period%20%2B%201%2C%20current_period)%60%20(current%20period%20excluded)%0A%20%20%203.%20When%20%60finalized_period%20%2B%201%20%3E%3D%20current_period%60%2C%20the%20light%20client%20keeps%20observing%20%5B%60LightClientFinalityUpdate%60%5D(https%3A%2F%2Fgithub.com%2Fethereum%2Fconsensus-specs%2Fblob%2Fdev%2Fspecs%2Faltair%2Flight-client%2Fsync-protocol.md%23lightclientfinalityupdate)%20and%20%5B%60LightClientOptimisticUpdate%60%5D(https%3A%2F%2Fgithub.com%2Fethereum%2Fconsensus-specs%2Fblob%2Fdev%2Fspecs%2Faltair%2Flight-client%2Fsync-protocol.md%23lightclientoptimisticupdate).%20Received%20objects%20are%20passed%20to%20%5B%60process_light_client_finality_update%60%5D(https%3A%2F%2Fgithub.com%2Fethereum%2Fconsensus-specs%2Fblob%2Fdev%2Fspecs%2Faltair%2Flight-client%2Fsync-protocol.md%23process_light_client_finality_update)%20and%20%5B%60process_light_client_optimistic_update%60%5D(https%3A%2F%2Fgithub.com%2Fethereum%2Fconsensus-specs%2Fblob%2Fdev%2Fspecs%2Faltair%2Flight-client%2Fsync-protocol.md%23process_light_client_optimistic_update).%20This%20ensures%20that%20%60finalized_header%60%20and%20%60optimistic_header%60%20reflect%20the%20latest%20blocks.%0A5.%20%5B%60process_light_client_store_force_update%60%5D(https%3A%2F%2Fgithub.com%2Fethereum%2Fconsensus-specs%2Fblob%2Fdev%2Fspecs%2Faltair%2Flight-client%2Fsync-protocol.md%23process_light_client_store_force_update)%20MAY%20be%20called%20based%20on%20use%20case%20dependent%20heuristics%20if%20light%20client%20sync%20appears%20stuck.%20If%20available%2C%20falling%20back%20to%20an%20alternative%20syncing%20mechanism%20to%20cover%20the%20affected%20sync%20committee%20period%20is%20preferred.%0A%0A%23%23%23%23%20The%20Portal%20Network%0A%0A-%20%5BThe%20Portal%20Network%5D(https%3A%2F%2Fgithub.com%2Fethereum%2Fportal-network-specs)%3A%20The%20Portal%20Network%20is%20an%20in%20progess%20effort%20to%20enable%20lightweight%20protocol%20access%20by%20resource%20constrained%20devices.%20The%20term%20_%22portal%22_%20is%20used%20to%20indicate%20that%20these%20networks%20provide%20a%20_view_%20into%20the%20protocol%20but%20are%20not%20critical%20to%20the%20operation%20of%20the%20core%20Ethereum%20protocol.%0A%0AThe%20Portal%20Network%20is%20comprised%20of%20multiple%20peer-to-peer%20networks%20which%20together%20provide%20the%20data%20and%20functionality%20necessary%20to%20expose%20the%20standard%20%5BJSON-RPC%20API%5D(https%3A%2F%2Feth.wiki%2Fjson-rpc%2FAPI).%20These%20networks%20are%20specially%20designed%20to%20ensure%20that%20clients%20participating%20in%20these%20networks%20can%20do%20so%20with%20minimal%20expenditure%20of%20networking%20bandwidth%2C%20CPU%2C%20RAM%2C%20and%20HDD%20resources.%0A%0AThe%20term%20'Portal%20Client'%20describes%20a%20piece%20of%20software%20which%20participates%20in%20these%20networks.%20Portal%20Clients%20typically%20expose%20the%20standard%20JSON-RPC%20API.%0A%0A-%20Motivation%3A%20The%20Portal%20Network%20is%20focused%20on%20delivering%20reliable%2C%20lightweight%2C%20and%20decentralized%20access%20to%20the%20Ethereum%20protocol.%0A%0A-%20Prior%20Work%20on%20the%20%22Light%20Ethereum%20Subprotocol%22%20(LES)%3A%20The%20term%20%22light%20client%22%20has%20historically%20refered%20to%20a%20client%20of%20the%20existing%20%5BDevP2P%5D(https%3A%2F%2Fgithub.com%2Fethereum%2Fdevp2p%2Fblob%2Fmaster%2Frlpx.mdx)%20based%20%5BLES%5D(https%3A%2F%2Fgithub.com%2Fethereum%2Fdevp2p%2Fblob%2Fmaster%2Fcaps%2Fles.mdx)%20network.%20This%20network%20is%20designed%20using%20a%20client%2Fserver%20architecture.%20The%20LES%20network%20has%20a%20total%20capacity%20dictated%20by%20the%20number%20of%20%22servers%22%20on%20the%20network.%20In%20order%20for%20this%20network%20to%20scale%2C%20the%20%22server%22%20capacity%20has%20to%20increase.%20This%20also%20means%20that%20at%20any%20point%20in%20time%20the%20network%20has%20some%20total%20capacity%20which%20if%20exceeded%20will%20cause%20service%20degradation%20across%20the%20network.%20Because%20of%20this%20the%20LES%20network%20is%20unreliable%20when%20operating%20near%20capacity.%0A%0A-%20Block%20Relay%0A%0A-%20%5BBeacon%20State%5D(https%3A%2F%2Fgithub.com%2Fethereum%2Fportal-network-specs%2Fblob%2Fmaster%2Fbeacon-chain%2Fbeacon-state-network.md%23dht-overview)%3A%20A%20client%20has%20a%20trusted%20beacon%20state%20root%2C%20and%20it%20wants%20to%20access%20some%20parts%20of%20the%20state.%20Each%20of%20the%20access%20request%20corresponds%20to%20some%20leave%20nodes%20of%20the%20beacon%20state.%20The%20request%20is%20a%20content%20lookup%20on%20a%20DHT.%20The%20response%20is%20a%20Merkle%20proof.%0A%0A%20%20%20%20%20%20A%20Distributed%20Hash%20Table%20(DHT)%20allows%20network%20participants%20to%20have%20retrieve%20data%20on-demand%20based%20on%20a%20content%0A%0A-%20%5BSyncing%20Block%20Headers%5D(https%3A%2F%2Fgithub.com%2Fethereum%2Fportal-network-specs%2Fblob%2Fmaster%2Fbeacon-chain%2Fsync-gossip.mdx)%3A%20A%20beacon%20chain%20client%20could%20sync%20committee%20to%20perform%20state%20updates.%20The%20data%20object%20LightClientSkipSyncUpdate%20allows%20a%20client%20to%20quickly%20sync%20to%20a%20recent%20header%20with%20the%20appropriate%20sync%20committee.%20Once%20the%20client%20establishes%20a%20recent%20header%2C%20it%20could%20sync%20to%20other%20headers%20by%20processing%20LightClientUpdates.%20These%20two%20data%20types%20allow%20a%20client%20to%20stay%20up-to-date%20with%20the%20beacon%20chain.%0A%20%20-%20%5BSync%20State%5D(https%3A%2F%2Fgithub.com%2Fethereum%2Fportal-network-specs%2Fblob%2Fmaster%2Fbeacon-chain%2Fskip-sync-network.mdx)%3A%20A%20client%20uses%20SkipSyncUpdate%20to%20skip%20sync%20from%20a%20known%20header%20to%20a%20recent%20header.%20A%20client%20with%20a%20trusted%20but%20outdated%20header%20cannot%20use%20the%20messages%20in%20the%20gossip%20channel%20bc-light-client-update%20to%20update.%20The%20client's%20sync-committee%20in%20the%20stored%20snapshot%20is%20too%20old%20and%20not%20connected%20to%20any%20update%20messages.%20The%20client%20look%20for%20the%20appropriate%20SkipSyncUpdate%20to%20skip%20sync%20its%20header.%0A%20%20-%20%5BAdvance%20Block%20Headers%5D(https%3A%2F%2Fgithub.com%2Fethereum%2Fportal-network-specs%2Fblob%2Fmaster%2Fbeacon-chain%2Fsync-gossip.mdx)%3A%20A%20beacon%20chain%20client%20could%20sync%20committee%20to%20perform%20%5Bstate%20updates%5D(https%3A%2F%2Fgithub.com%2Fethereum%2Fconsensus-specs%2Fblob%2Fdev%2Fspecs%2Faltair%2Fsync-protocol.mdx).%20The%20data%20object%20%5BLightClientSkipSyncUpdate%5D(skip-sync-network)%20allows%20a%20client%20to%20quickly%20sync%20to%20a%20recent%20header%20with%20the%20appropriate%20sync%20committee.%20Once%20the%20client%20establishes%20a%20recent%20header%2C%20it%20could%20sync%20to%20other%20headers%20by%20processing%20%5BLightClientUpdates%5D(https%3A%2F%2Fgithub.com%2Fethereum%2Fconsensus-specs%2Fblob%2Fdev%2Fspecs%2Faltair%2Fsync-protocol.md%23lightclientupdate).%20These%20two%20data%20types%20allow%20a%20client%20to%20stay%20up-to-date%20with%20the%20beacon%20chain.%0A%0A%20%20%20%20%20%20%20%20%20%20These%20two%20data%20types%20are%20placed%20into%20separate%20sub-networks.%20A%20light%20client%20make%20find-content%20requests%20on%20%60skip-sync-network%60%20at%20start%20of%20the%20sync%20to%20get%20a%20header%20with%20the%20same%20%60SyncCommittee%60%20object%20as%20in%20the%20current%20sync%20period.%20The%20client%20uses%20messages%20in%20the%20gossip%20topic%20%60bc-light-client-update%60%20to%20advance%20its%20header.%0A%0A%20%20%20%20%20%20%20%20%20%20The%20gossip%20topics%20described%20in%20this%20document%20is%20part%20of%20a%20%5Bproposal%5D(https%3A%2F%2Fethresear.ch%2Ft%2Fa-beacon-chain-light-client-proposal%2F11064)%20for%20a%20beacon%20chain%20light%20client.%0A%0A%23%23%23%23%20Transaction%20Proofs%0A%0A-%20%5BRetrieving%20Beacon%20State%5D(https%3A%2F%2Fgithub.com%2Fethereum%2Fportal-network-specs%2Fblob%2Fmaster%2Fbeacon-chain%2Fbeacon-state-network.mdx)%3A%20A%20client%20has%20a%20trusted%20beacon%20state%20root%2C%20and%20it%20wants%20to%20access%20some%20parts%20of%20the%20state.%20Each%20of%20the%20access%20request%20corresponds%20to%20some%20leave%20nodes%20of%20the%20beacon%20state.%20The%20request%20is%20a%20content%20lookup%20on%20a%20DHT.%20The%20response%20is%20a%20Merkle%20proof.%0A%0AA%20Distributed%20Hash%20Table%20(DHT)%20allows%20network%20participants%20to%20have%20retrieve%20data%20on-demand%20based%20on%20a%20content%20key.%20A%20portal-network%20DHT%20is%20different%20than%20a%20traditional%20one%20in%20that%20each%20participant%20could%20selectively%20limit%20its%20workload%20by%20choosing%20a%20small%20interest%20radius%20r.%20A%20participants%20only%20process%20messages%20that%20are%20within%20its%20chosen%20radius%20boundary.%0A%0A-%20%5BWire%20Protocol%5D(https%3A%2F%2Fgithub.com%2Fethereum%2Fportal-network-specs%2Fblob%2Fmaster%2Fbeacon-chain%2Fbeacon-state-network.md%23wire-protocol)%3A%20For%20a%20subprotocol%2C%20we%20need%20to%20further%20define%20the%20following%20to%20be%20able%20to%20instantiate%20the%20wire%20format%20of%20each%20message%20type.%201.%20%60content_key%60%202.%20%60content_id%60%203.%20%60payload%60%0A%0A%20%20%20%20%20%20The%20content%20of%20the%20message%20is%20a%20Merkle%20proof%20contains%20multiple%20leave%20nodes%20for%20a%20%5BBeaconState%5D(https%3A%2F%2Fgithub.com%2Fethereum%2Fconsensus-specs%2Fblob%2Fdev%2Fspecs%2Faltair%2Fbeacon-chain.md%23beaconstate).%0A%0A%20%20%20%20%20%20Finally%2C%20we%20define%20the%20necessary%20encodings.%20A%20light%20client%20only%20knows%20the%20root%20of%20the%20beacon%20state.%20The%20client%20wants%20to%20know%20the%20details%20of%20some%20leave%20nodes.%20The%20client%20has%20to%20be%20able%20to%20construct%20the%20%60content_key%60%20only%20knowing%20the%20root%20and%20which%20leave%20nodes%20it%20wants%20see.%20The%20%60content_key%60%20is%20the%20ssz%20serialization%20of%20the%20paths.%20The%20paths%20represent%20the%20part%20of%20the%20beacon%20state%20that%20one%20wants%20to%20know%20about.%20The%20paths%20are%20represented%20by%20generalized%20indices.%20Note%20that%20%60hash_tree_root%60%20and%20%60serialize%60%20are%20the%20same%20as%20those%20defined%20in%20%5Bsync-gossip%5D(https%3A%2F%2Fgithub.com%2Fethereum%2Fportal-network-specs%2Fblob%2Fmaster%2Fbeacon-chain%2Fsync-gossip.mdx).%0A%0A-%20TODO%3A%20Review%20of%20Retrieving%20a%20transaction%20proof%20not%20just%20retrieving%20data%20on-demand%0A%0A%23%23%23%23%20Further%20Information%0A%0A-%20Ethereum%202.0%20Specifications%0A-%20%5BBeacon%20Chain%20Specification%5D(https%3A%2F%2Fgithub.com%2Fethereum%2Fconsensus-specs%2Fblob%2Fmaster%2Fspecs%2Fphase0%2Fbeacon-chain.mdx)%0A-%20%5BExtended%20light%20client%20protocol%5D(https%3A%2F%2Fnotes.ethereum.org%2F%40vbuterin%2Fextended_light_client_protocol)%0A-%20%5BAltair%20Light%20Client%20--%20Light%20Client%5D(https%3A%2F%2Fgithub.com%2Fethereum%2Fconsensus-specs%2Fblob%2Fdev%2Fspecs%2Faltair%2Flight-client%2Flight-client.mdx)%0A-%20%5BAltair%20Light%20Client%20--%20Sync%20Protocol%5D(https%3A%2F%2Fgithub.com%2Fethereum%2Fconsensus-specs%2Fblob%2Fdev%2Fspecs%2Faltair%2Flight-client%2Fsync-protocol.mdx)%0A-%20%5BBeacon%20Chain%20Fork%20Choice%5D(https%3A%2F%2Fgithub.com%2Fethereum%2Fconsensus-specs%2Fblob%2Fdev%2Fspecs%2Fphase0%2Ffork-choice.mdx)%0A-%20%5BThe%20Portal%20Network%20Specification%5D(https%3A%2F%2Fgithub.com%2Fethereum%2Fportal-network-specs)%3A%20an%20in%20progess%20effort%20to%20enable%20lightweight%20protocol%20access%20by%20resource%20constrained%20devices.%0A-%20%5BLight%20Ethereum%20Subprotocol%20(LES)%5D(https%3A%2F%2Fgithub.com%2Fethereum%2Fdevp2p%2Fblob%2Fmaster%2Fcaps%2Fles.mdx)%3A%20the%20protocol%20used%20by%20%22light%22%20clients%2C%20which%20only%20download%20block%20headers%20as%20they%20appear%20and%20fetch%20other%20parts%20of%20the%20blockchain%20on-demand.%0A-%20%5BBlockDaemon%3A%20Ethereum%20Altair%20Hard%20Folk%3A%20Light%20Clients%20%26%20Sync%20Committees%5D(https%3A%2F%2Fblockdaemon.com%2Fblog%2Fethereum-altair-hard-folk-light-clients-sync-committees%2F)%0A-%20%5BEfficient%20algorithms%20for%20CBC%20Casper%5D(https%3A%2F%2Fdocs.google.com%2Fpresentation%2Fd%2F1oc_zdywOsHxz3zez1ILAgrerS7RkaF1hHoW0FLtp0Gw%2Fedit%23slide%3Did.p)%3A%20Review%20of%20LMD%20GHOST%20(Latest%20Message%20Driven%2C%20Greediest%20Heaviest%20Observed%20Sub-Tree)%0A-%20%5BSSZ%3A%20Simple%20Serialize%5D(https%3A%2F%2Fethereum.org%2Fen%2Fdevelopers%2Fdocs%2Fdata-structures-and-encoding%2Fssz%2F)%3A%20Overview%20of%20Simple%20serialize%20(SSZ)%20is%20the%20serialization%20method%20used%20on%20the%20Beacon%20Chain.%20(including%20merkalization%20and%20multiproofs)%0A-%20%5BThe%20Noise%20Protocol%20Framework%5D(https%3A%2F%2Fnoiseprotocol.org%2Fnoise.html)%3A%20Noise%20is%20a%20framework%20for%20crypto%20protocols%20based%20on%20Diffie-Hellman%20key%20agreement.%0A-%20%5BFlashbots%20for%20Ethereum%20Consensus%20Clients%5D(https%3A%2F%2Fhackmd.io%2FQoLwVQf3QK6EiVt15YOYqQ%3Fview)%0A-%20%5BOptimistic%20Sync%20Specification%5D(https%3A%2F%2Fgithub.com%2Fethereum%2Fconsensus-specs%2Fblob%2Fdev%2Fsync%2Foptimistic.mdx)%3A%20Optimistic%20Sync%20is%20a%20stop-gap%20measure%20to%20allow%20execution%20nodes%20to%20sync%20via%20established%20methods%20until%20future%20Ethereum%20roadmap%20items%20are%20implemented%20(e.g.%2C%20statelessness).%0A-%20%5BConsensus%20Light%20Client%20Server%20Implementation%20Notes%5D(https%3A%2F%2Fhackmd.io%2FhsCz1G3BTyiwwJtjT4pe2Q%3Fview)%3A%20How%20Lodestar%20beacon%20node%20was%20tweaked%20to%20serve%20light%20clients%0A-%20%5Bbeacon%20chain%20light%20client%20design%20doc%5D(https%3A%2F%2Fnotes.ethereum.org%2F%40ralexstokes%2FHJxDMi8vY)%3A%20notes%20about%20the%20design%2Fimplementation%20of%20a%20beacon%20chain%20light%20client%20using%20standard%20APIs%20and%20protocol%20features%0A-%20%5BA%20Beacon%20Chain%20Light%20Client%20Proposal%5D(https%3A%2F%2Fethresear.ch%2Ft%2Fa-beacon-chain-light-client-proposal%2F11064)%3A%20proposing%20a%20light%20client%20implementation%20that%20goes%20a%20step%20further%20than%20the%20minimum%20light%20client%20described%20in%20the%20altair%20consensus-spec.%20The%20proposed%20client%20aims%20to%20allow%20queries%20into%20the%20beacon%20state.%0A-%20%5BDistributed%20Hash%20Table%20(DHT)%20Overview%5D(https%3A%2F%2Fgithub.com%2Fethereum%2Fportal-network-specs%2Fblob%2Fmaster%2Fbeacon-chain%2Fbeacon-state-network.md%23dht-overview)%3A%20allows%20network%20participants%20to%20have%20retrieve%20data%20on-demand%20based%20on%20a%20content%20key.%0A-%20%5B(WIP)%20Light%20client%20p2p%20interface%20Specification%5D(https%3A%2F%2Fgithub.com%2Fethereum%2Fconsensus-specs%2Fpull%2F2786)%3A%20a%20PR%20to%20get%20the%20conversation%20going%20about%20a%20p2p%20approach.%0A%20%20Here%20we%20cover%20two%20approaches%20which%20may%20be%20combined%0A%0A%23%23%23%20Appendix%20C%3A%20Proving%20and%20Verification%20Mechanisms%0A%0A%23%23%23%23%20%5Beth-proof-of-consensus%5D(https%3A%2F%2Fgithub.com%2Fsuccinctlabs%2Feth-proof-of-consensus)%3A%20Proof%20of%20Consensus%20for%20Ethereum%20by%20succinctlabs%0A%0ACircuits%0A%0A-%20%5Baggregate_bls_verify.circom%5D(https%3A%2F%2Fgithub.com%2Fsuccinctlabs%2Feth-proof-of-consensus%2Fblob%2Fmain%2Fcircuits%2Fcircuits%2Faggregate_bls_verify.circom)%3A%20Computes%20an%20aggregate%20BLS12-381%20public%20key%20over%20a%20set%20of%20public%20keys%20and%20a%20bitmask%0A-%20%5Bassert_valid_signed_header.circom%5D(https%3A%2F%2Fgithub.com%2Fsuccinctlabs%2Feth-proof-of-consensus%2Fblob%2Fmain%2Fcircuits%2Fcircuits%2Fassert_valid_signed_header.circom)%0A-%20%5Bpubkey_poseidon.circom%5D(https%3A%2F%2Fgithub.com%2Fsuccinctlabs%2Feth-proof-of-consensus%2Fblob%2Fmain%2Fcircuits%2Fcircuits%2Fpubkey_poseidon.circom)%3A%20Computes%20the%20Poseidon%20merkle%20root%20of%20a%20list%20of%20field%20elements%0A-%20%5Bsha256_bytes.circom%5D(https%3A%2F%2Fgithub.com%2Fsuccinctlabs%2Feth-proof-of-consensus%2Fblob%2Fmain%2Fcircuits%2Fcircuits%2Fsha256_bytes.circom)%3A%20Wrapper%20around%20SHA256%20to%20support%20bytes%20as%20input%20instead%20of%20bits%0A-%20%5Bsimple_serialize.circom%5D(https%3A%2F%2Fgithub.com%2Fsuccinctlabs%2Feth-proof-of-consensus%2Fblob%2Fmain%2Fcircuits%2Fcircuits%2Fsimple_serialize.circom)%3A%20Helper%20function%20to%20implement%20SSZArray%0A-%20%5Bsync_committee_committments.circom%5D(https%3A%2F%2Fgithub.com%2Fsuccinctlabs%2Feth-proof-of-consensus%2Fblob%2Fmain%2Fcircuits%2Fcircuits%2Fsync_committee_committments.circom)%3A%20Asserts%20that%20the%20byte%20representation%20of%20a%20BLS12-381%20public%20key's%20x-coordinate%20matches%20the%20BigInt%20representation%0A%0AVerification%0A%0A-%20%5BAMB%5D(https%3A%2F%2Fgithub.com%2Fsuccinctlabs%2Feth-proof-of-consensus%2Ftree%2Fmain%2Fcontracts%2Fsrc%2Famb)%3A%20Arbitrary%20Message%20Passing%0A-%20%5BTrustlessAMB.sol%5D(https%3A%2F%2Fgithub.com%2Fsuccinctlabs%2Feth-proof-of-consensus%2Fblob%2Fmain%2Fcontracts%2Fsrc%2Famb%2FTrustlessAMB.sol)%3A%20sends%20and%20executes%20messages%0A-%20%5BTrustlessAMBStorage.sol%5D(https%3A%2F%2Fgithub.com%2Fsuccinctlabs%2Feth-proof-of-consensus%2Fblob%2Fmain%2Fcontracts%2Fsrc%2Famb%2FTrustlessAMBStorage.sol)%3A%20Storage%20for%20messages%20between%20two%20chains%0A-%20%5Bbridge%5D(https%3A%2F%2Fgithub.com%2Fsuccinctlabs%2Feth-proof-of-consensus%2Ftree%2Fmain%2Fcontracts%2Fsrc%2Fbridge)%3A%20Allows%20for%20the%20deposit%20and%20withdrawal%20of%20ERC20%20tokens%0A-%20%5BBridge.sol%5D(https%3A%2F%2Fgithub.com%2Fsuccinctlabs%2Feth-proof-of-consensus%2Fblob%2Fmain%2Fcontracts%2Fsrc%2Fbridge%2FBridge.sol)%3A%20Deposit%20and%20withdraw%20functionality%0A-%20%5BToken.sol%5D(https%3A%2F%2Fgithub.com%2Fsuccinctlabs%2Feth-proof-of-consensus%2Fblob%2Fmain%2Fcontracts%2Fsrc%2Fbridge%2FTokens.sol)%3A%20ERC20%20bridge%20token%20definitions%0A-%20%5Blightclient%5D(https%3A%2F%2Fgithub.com%2Fsuccinctlabs%2Feth-proof-of-consensus%2Ftree%2Fmain%2Fcontracts%2Fsrc%2Flightclient)%0A-%20%5BBLSAggregatedSignatureVerifier.sol%5D(https%3A%2F%2Fgithub.com%2Fsuccinctlabs%2Feth-proof-of-consensus%2Fblob%2Fmain%2Fcontracts%2Fsrc%2Flightclient%2FBLSAggregatedSignatureVerifier.sol)%3A%20Verifies%20BLS%20aggregated%20signature%20proofs%0A-%20%5BBeaconLightClient.sol%5D(https%3A%2F%2Fgithub.com%2Fsuccinctlabs%2Feth-proof-of-consensus%2Fblob%2Fmain%2Fcontracts%2Fsrc%2Flightclient%2FBeaconLightClient.sol)%3A%20Beacon%20Light%20Client%20Functionality%20including%0A%20%20-%20%5Bstep(LightClientUpdate%20memory%20update)%5D(https%3A%2F%2Fgithub.com%2Fsuccinctlabs%2Feth-proof-of-consensus%2Fblob%2Fmain%2Fcontracts%2Fsrc%2Flightclient%2FBeaconLightClient.sol%23L86)%3A%20Updates%20the%20head%20given%20a%20finalized%20light%20client%20update.%0A%20%20-%20%5Bfunction%20updateSyncCommittee(LightClientUpdate%20memory%20update%2C%20bytes32%20nextSyncCommitteePoseidon%2C%20Groth16Proof%20memory%20commitmentMappingProof)%5D(https%3A%2F%2Fgithub.com%2Fsuccinctlabs%2Feth-proof-of-consensus%2Fblob%2Fmain%2Fcontracts%2Fsrc%2Flightclient%2FBeaconLightClient.sol%23L102)%3A%20Set%20the%20sync%20committee%20validator%20set%20root%20for%20the%20next%20sync%20commitee%20period.%0A%20%20-%20%5Bfunction%20forceUpdate()%5D(https%3A%2F%2Fgithub.com%2Fsuccinctlabs%2Feth-proof-of-consensus%2Fblob%2Fmain%2Fcontracts%2Fsrc%2Flightclient%2FBeaconLightClient.sol%23L131)%3A%20Finalizes%20the%20optimistic%20update%20and%20sets%20the%20next%20sync%20committee%20if%20no%20finalized%20updates%20have%20been%20received%20for%20a%20period.%0A%20%20-%20%5Bfunction%20processLightClientUpdate(LightClientUpdate%20memory%20update)%5D(https%3A%2F%2Fgithub.com%2Fsuccinctlabs%2Feth-proof-of-consensus%2Fblob%2Fmain%2Fcontracts%2Fsrc%2Flightclient%2FBeaconLightClient.sol%23L131)%3A%20Implements%20shared%20logic%20for%20processing%20light%20client%20updates.%0A%20%20-%20%5Bfunction%20zkMapSSZToPoseidon(bytes32%20sszCommitment%2C%20bytes32%20poseidonCommitment%2C%20Groth16Proof%20memory%20proof)%5D(https%3A%2F%2Fgithub.com%2Fsuccinctlabs%2Feth-proof-of-consensus%2Fblob%2Fmain%2Fcontracts%2Fsrc%2Flightclient%2FBeaconLightClient.sol%23L190)%3A%20Maps%20a%20simple%20serialize%20merkle%20root%20to%20a%20poseidon%20merkle%20root%20with%20a%20zkSNARK.%20The%20proof%20asserts%20that%3A%20SimpleSerialize(syncCommittee)%20%3D%3D%20Poseidon(syncCommittee).%0A%20%20-%20%5Bfunction%20zkBLSVerify(bytes32%20signingRoot%2C%20bytes32%20syncCommitteeRoot%2C%20uint256%20claimedParticipation%2C%20Groth16Proof%20memory%20proof)%5D(https%3A%2F%2Fgithub.com%2Fsuccinctlabs%2Feth-proof-of-consensus%2Fblob%2Fmain%2Fcontracts%2Fsrc%2Flightclient%2FBeaconLightClient.sol%23L208)%3A%20Does%20an%20aggregated%20BLS%20signature%20verification%20with%20a%20zkSNARK.%0A-%20%5Bscripts%5D(https%3A%2F%2Fgithub.com%2Fsuccinctlabs%2Feth-proof-of-consensus%2Ftree%2Fmain%2Fcontracts%2Fsrc%2Fscripts)%3A%20A%20collection%20of%20%5Bforge-scripts%5D(https%3A%2F%2Fbook.getfoundry.sh%2Freference%2Fforge%2Fforge-script)%20for%20contract%20deployment.%0A%0A%23%23%23%20Appendix%20D%3A%20Topics%0A%0ABeacon%20Chain%20Topics%20%5BPrysm%5D(https%3A%2F%2Fgithub.com%2Fprysmaticlabs%2Fprysm%2Fblob%2Fdevelop%2Fbeacon-chain%2Fp2p%2Ftopics.go)%0A%0A%60%60%60%0A%0Apackage%20p2p%0A%0Aconst%20(%0A%2F%2F%20GossipProtocolAndDigest%20represents%20the%20protocol%20and%20fork%20digest%20prefix%20in%20a%20gossip%20topic.%0AGossipProtocolAndDigest%20%3D%20%22%2Feth2%2F%25x%2F%22%0A%0A%2F%2F%20Message%20Types%0A%2F%2F%0A%2F%2F%20GossipAttestationMessage%20is%20the%20name%20for%20the%20attestation%20message%20type.%20It%20is%0A%2F%2F%20specially%20extracted%20so%20as%20to%20determine%20the%20correct%20message%20type%20from%20an%20attestation%0A%2F%2F%20subnet.%0AGossipAttestationMessage%20%3D%20%22beacon_attestation%22%0A%2F%2F%20GossipSyncCommitteeMessage%20is%20the%20name%20for%20the%20sync%20committee%20message%20type.%20It%20is%0A%2F%2F%20specially%20extracted%20so%20as%20to%20determine%20the%20correct%20message%20type%20from%20a%20sync%20committee%0A%2F%2F%20subnet.%0AGossipSyncCommitteeMessage%20%3D%20%22sync_committee%22%0A%2F%2F%20GossipBlockMessage%20is%20the%20name%20for%20the%20block%20message%20type.%0AGossipBlockMessage%20%3D%20%22beacon_block%22%0A%2F%2F%20GossipExitMessage%20is%20the%20name%20for%20the%20voluntary%20exit%20message%20type.%0AGossipExitMessage%20%3D%20%22voluntary_exit%22%0A%2F%2F%20GossipProposerSlashingMessage%20is%20the%20name%20for%20the%20proposer%20slashing%20message%20type.%0AGossipProposerSlashingMessage%20%3D%20%22proposer_slashing%22%0A%2F%2F%20GossipAttesterSlashingMessage%20is%20the%20name%20for%20the%20attester%20slashing%20message%20type.%0AGossipAttesterSlashingMessage%20%3D%20%22attester_slashing%22%0A%2F%2F%20GossipAggregateAndProofMessage%20is%20the%20name%20for%20the%20attestation%20aggregate%20and%20proof%20message%20type.%0AGossipAggregateAndProofMessage%20%3D%20%22beacon_aggregate_and_proof%22%0A%2F%2F%20GossipContributionAndProofMessage%20is%20the%20name%20for%20the%20sync%20contribution%20and%20proof%20message%20type.%0AGossipContributionAndProofMessage%20%3D%20%22sync_committee_contribution_and_proof%22%0A%2F%2F%20GossipBlsToExecutionChangeMessage%20is%20the%20name%20for%20the%20bls%20to%20execution%20change%20message%20type.%0AGossipBlsToExecutionChangeMessage%20%3D%20%22bls_to_execution_change%22%0A%0A%2F%2F%20Topic%20Formats%0A%2F%2F%0A%2F%2F%20AttestationSubnetTopicFormat%20is%20the%20topic%20format%20for%20the%20attestation%20subnet.%0AAttestationSubnetTopicFormat%20%3D%20GossipProtocolAndDigest%20%2B%20GossipAttestationMessage%20%2B%20%22_%25d%22%0A%2F%2F%20SyncCommitteeSubnetTopicFormat%20is%20the%20topic%20format%20for%20the%20sync%20committee%20subnet.%0ASyncCommitteeSubnetTopicFormat%20%3D%20GossipProtocolAndDigest%20%2B%20GossipSyncCommitteeMessage%20%2B%20%22_%25d%22%0A%2F%2F%20BlockSubnetTopicFormat%20is%20the%20topic%20format%20for%20the%20block%20subnet.%0ABlockSubnetTopicFormat%20%3D%20GossipProtocolAndDigest%20%2B%20GossipBlockMessage%0A%2F%2F%20ExitSubnetTopicFormat%20is%20the%20topic%20format%20for%20the%20voluntary%20exit%20subnet.%0AExitSubnetTopicFormat%20%3D%20GossipProtocolAndDigest%20%2B%20GossipExitMessage%0A%2F%2F%20ProposerSlashingSubnetTopicFormat%20is%20the%20topic%20format%20for%20the%20proposer%20slashing%20subnet.%0AProposerSlashingSubnetTopicFormat%20%3D%20GossipProtocolAndDigest%20%2B%20GossipProposerSlashingMessage%0A%2F%2F%20AttesterSlashingSubnetTopicFormat%20is%20the%20topic%20format%20for%20the%20attester%20slashing%20subnet.%0AAttesterSlashingSubnetTopicFormat%20%3D%20GossipProtocolAndDigest%20%2B%20GossipAttesterSlashingMessage%0A%2F%2F%20AggregateAndProofSubnetTopicFormat%20is%20the%20topic%20format%20for%20the%20aggregate%20and%20proof%20subnet.%0AAggregateAndProofSubnetTopicFormat%20%3D%20GossipProtocolAndDigest%20%2B%20GossipAggregateAndProofMessage%0A%2F%2F%20SyncContributionAndProofSubnetTopicFormat%20is%20the%20topic%20format%20for%20the%20sync%20aggregate%20and%20proof%20subnet.%0ASyncContributionAndProofSubnetTopicFormat%20%3D%20GossipProtocolAndDigest%20%2B%20GossipContributionAndProofMessage%0A%2F%2F%20BlsToExecutionChangeSubnetTopicFormat%20is%20the%20topic%20format%20for%20the%20bls%20to%20execution%20change%20subnet.%0ABlsToExecutionChangeSubnetTopicFormat%20%3D%20GossipProtocolAndDigest%20%2B%20GossipBlsToExecutionChangeMessage%0A)%0A%0A%60%60%60%0A%0A%23%23%23%20Appendix%20E%3A%20gRPC%20and%20API's%0A%0A%5BBeaconcha.in%20ETH2%20API%5D(https%3A%2F%2Fbeaconcha.in%2Fapi%2Fv1%2Fdocs%2Findex.html)%0A%0A%23%23%23%20Appendix%20F%3A%20Data%20Structures%0A%0A-%20Block%20Structure%20from%20%5Bgo-ethereum%5D(https%3A%2F%2Fgithub.com%2Fethereum%2Fgo-ethereum%2Fblob%2Frelease%2F1.9%2Fcore%2Ftypes%2Fblock.go%23L72)%0A%0A%60%60%60%0A%0A%2F%2F%20SealHash%20returns%20the%20hash%20of%20a%20block%20prior%20to%20it%20being%20sealed.%0Afunc%20(ethash%20*Ethash)%20SealHash(header%20*types.Header)%20(hash%20common.Hash)%20%7B%0Ahasher%20%3A%3D%20sha3.NewLegacyKeccak256()%0A%0Arlp.Encode(hasher%2C%20%5B%5Dinterface%7B%7D%7B%0Aheader.ParentHash%2C%0Aheader.UncleHash%2C%0Aheader.Coinbase%2C%0Aheader.Root%2C%0Aheader.TxHash%2C%0Aheader.ReceiptHash%2C%0Aheader.Bloom%2C%0Aheader.Difficulty%2C%0Aheader.Number%2C%0Aheader.GasLimit%2C%0Aheader.GasUsed%2C%0Aheader.Time%2C%0Aheader.Extra%2C%0A%7D)%0Ahasher.Sum(hash%5B%3A0%5D)%0Areturn%20hash%0A%7D%0A%0A%60%60%60%0A%0A-%20Blocks%20Headers%20get%20forwarded%20to%20the%20Beacon%20chain%20once%20they%20pass%20%5Bbeacon%20consensus%5D(https%3A%2F%2Fgithub.com%2Fethereum%2Fgo-ethereum%2Fblob%2Fmaster%2Fconsensus%2Fbeacon%2Fconsensus.go)%0A-%20The%20Beacon%20chain%20embeds%20the%20EthChain%20Header%20into%20a%20%5BBeaconBlock%5D(https%3A%2F%2Fgithub.com%2Fprysmaticlabs%2Fprysm%2Fblob%2Fdevelop%2Fconsensus-types%2Fblocks%2Ftypes.go%23L43)%0A%0ABeaconBlockBody%20from%20%5Bprysm%5D(https%3A%2F%2Fgithub.com%2Fprysmaticlabs%2Fprysm%2Fblob%2Fdevelop%2Fconsensus-types%2Fblocks%2Ftypes.go)%20(golang)%0A%0A%60%60%60%0A%0A%2F%2F%20BeaconBlockBody%20is%20the%20main%20beacon%20block%20body%20structure.%20It%20can%20represent%20any%20block%20type.%0Atype%20BeaconBlockBody%20struct%20%7B%0Aversion%20int%0AisBlinded%20bool%0ArandaoReveal%20%5Bfield_params.BLSSignatureLength%5Dbyte%0Aeth1Data%20*eth.Eth1Data%0Agraffiti%20%5Bfield_params.RootLength%5Dbyte%0AproposerSlashings%20%5B%5D*eth.ProposerSlashing%0AattesterSlashings%20%5B%5D*eth.AttesterSlashing%0Aattestations%20%5B%5D*eth.Attestation%0Adeposits%20%5B%5D*eth.Deposit%0AvoluntaryExits%20%5B%5D*eth.SignedVoluntaryExit%0AsyncAggregate%20*eth.SyncAggregate%0AexecutionPayload%20*engine.ExecutionPayload%0AexecutionPayloadHeader%20%5C*engine.ExecutionPayloadHeader%0A%7D%0A%0A%2F%2F%20BeaconBlock%20is%20the%20main%20beacon%20block%20structure.%20It%20can%20represent%20any%20block%20type.%0Atype%20BeaconBlock%20struct%20%7B%0Aversion%20int%0Aslot%20types.Slot%0AproposerIndex%20types.ValidatorIndex%0AparentRoot%20%5Bfield_params.RootLength%5Dbyte%0AstateRoot%20%5Bfield_params.RootLength%5Dbyte%0Abody%20%5C*BeaconBlockBody%0A%7D%0A%0A%2F%2F%20SignedBeaconBlock%20is%20the%20main%20signed%20beacon%20block%20structure.%20It%20can%20represent%20any%20block%20type.%0Atype%20SignedBeaconBlock%20struct%20%7B%0Aversion%20int%0Ablock%20%5C*BeaconBlock%0Asignature%20%5Bfield_params.BLSSignatureLength%5Dbyte%0A%7D%0A%0A%60%60%60%0A%0AEth1Data%20from%20%5Bprysm%5D(https%3A%2F%2Fgithub.com%2Fprysmaticlabs%2Fprysm%2Fblob%2Fdevelop%2Fproto%2Fprysm%2Fv1alpha1%2Fpowchain.pb.go%23L24)%20(golang)%0A%0A%60%60%60%0A%0Atype%20ETH1ChainData%20struct%20%7B%0Astate%20protoimpl.MessageState%0AsizeCache%20protoimpl.SizeCache%0AunknownFields%20protoimpl.UnknownFields%0A%0ACurrentEth1Data%20*LatestETH1Data%20%60protobuf%3A%22bytes%2C1%2Copt%2Cname%3Dcurrent_eth1_data%2Cjson%3DcurrentEth1Data%2Cproto3%22%20json%3A%22current_eth1_data%2Comitempty%22%60%0AChainstartData%20*ChainStartData%20%60protobuf%3A%22bytes%2C2%2Copt%2Cname%3Dchainstart_data%2Cjson%3DchainstartData%2Cproto3%22%20json%3A%22chainstart_data%2Comitempty%22%60%0ABeaconState%20*BeaconState%20%60protobuf%3A%22bytes%2C3%2Copt%2Cname%3Dbeacon_state%2Cjson%3DbeaconState%2Cproto3%22%20json%3A%22beacon_state%2Comitempty%22%60%0ATrie%20*SparseMerkleTrie%20%60protobuf%3A%22bytes%2C4%2Copt%2Cname%3Dtrie%2Cproto3%22%20json%3A%22trie%2Comitempty%22%60%0ADepositContainers%20%5B%5D%5C*DepositContainer%20%60protobuf%3A%22bytes%2C5%2Crep%2Cname%3Ddeposit_containers%2Cjson%3DdepositContainers%2Cproto3%22%20json%3A%22deposit_containers%2Comitempty%22%60%0A%7D%0A%0Atype%20LatestETH1Data%20struct%20%7B%0Astate%20protoimpl.MessageState%0AsizeCache%20protoimpl.SizeCache%0AunknownFields%20protoimpl.UnknownFields%0A%0ABlockHeight%20uint64%20%60protobuf%3A%22varint%2C2%2Copt%2Cname%3Dblock_height%2Cjson%3DblockHeight%2Cproto3%22%20json%3A%22block_height%2Comitempty%22%60%0ABlockTime%20uint64%20%60protobuf%3A%22varint%2C3%2Copt%2Cname%3Dblock_time%2Cjson%3DblockTime%2Cproto3%22%20json%3A%22block_time%2Comitempty%22%60%0ABlockHash%20%5B%5Dbyte%20%60protobuf%3A%22bytes%2C4%2Copt%2Cname%3Dblock_hash%2Cjson%3DblockHash%2Cproto3%22%20json%3A%22block_hash%2Comitempty%22%60%0ALastRequestedBlock%20uint64%20%60protobuf%3A%22varint%2C5%2Copt%2Cname%3Dlast_requested_block%2Cjson%3DlastRequestedBlock%2Cproto3%22%20json%3A%22last_requested_block%2Comitempty%22%60%0A%7D%0A%0A%60%60%60%0A%0ABeaconBlockAltair%20from%20%5Blighthouse%5D(https%3A%2F%2Fgithub.com%2Fsigp%2Flighthouse%2Fblob%2Fstable%2Fconsensus%2Ftypes%2Fsrc%2Fbeacon_block.rs%23L407)%20rust%0A%0A%60%60%60%0A%0A%20%20%20%20%2F%2F%2F%20Return%20an%20Altair%20block%20where%20the%20block%20has%20maximum%20size.%0A%20%20%20%20pub%20fn%20full(spec%3A%20%26ChainSpec)%20-%3E%20Self%20%7B%0A%20%20%20%20%20%20%20%20let%20base_block%3A%20BeaconBlockBase%3C_%2C%20Payload%3E%20%3D%20BeaconBlockBase%3A%3Afull(spec)%3B%0A%20%20%20%20%20%20%20%20let%20sync_aggregate%20%3D%20SyncAggregate%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20sync_committee_signature%3A%20AggregateSignature%3A%3Aempty()%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20sync_committee_bits%3A%20BitVector%3A%3Adefault()%2C%0A%20%20%20%20%20%20%20%20%7D%3B%0A%20%20%20%20%20%20%20%20BeaconBlockAltair%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20slot%3A%20spec.genesis_slot%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20proposer_index%3A%200%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20parent_root%3A%20Hash256%3A%3Azero()%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20state_root%3A%20Hash256%3A%3Azero()%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20body%3A%20BeaconBlockBodyAltair%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20proposer_slashings%3A%20base_block.body.proposer_slashings%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20attester_slashings%3A%20base_block.body.attester_slashings%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20attestations%3A%20base_block.body.attestations%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20deposits%3A%20base_block.body.deposits%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20voluntary_exits%3A%20base_block.body.voluntary_exits%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20sync_aggregate%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20randao_reveal%3A%20Signature%3A%3Aempty()%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20eth1_data%3A%20Eth1Data%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20deposit_root%3A%20Hash256%3A%3Azero()%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20block_hash%3A%20Hash256%3A%3Azero()%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20deposit_count%3A%200%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7D%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20graffiti%3A%20Graffiti%3A%3Adefault()%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20_phantom%3A%20PhantomData%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20%7D%2C%0A%20%20%20%20%20%20%20%20%7D%0A%20%20%20%20%7D%0A%0A%7D%0A%0A%60%60%60%0A%0A%23%23%23%23%20Beacon%20State%20Data%20Structures%20from%20Prysm%0A%0A%60%60%60%0A%0Atype%20BeaconState%20interface%20%7B%0ASpecParametersProvider%0AReadOnlyBeaconState%0AWriteOnlyBeaconState%0ACopy()%20BeaconState%0AHashTreeRoot(ctx%20context.Context)%20(%5B32%5Dbyte%2C%20error)%0AFutureForkStub%0AStateProver%0A%7D%0A%0A%60%60%60%0A%0A%60%60%60%0A%0Atype%20ReadOnlyBeaconState%20interface%20%7B%0AReadOnlyBlockRoots%0AReadOnlyStateRoots%0AReadOnlyRandaoMixes%0AReadOnlyEth1Data%0AReadOnlyValidators%0AReadOnlyBalances%0AReadOnlyCheckpoint%0AReadOnlyAttestations%0AToProtoUnsafe()%20interface%7B%7D%0AToProto()%20interface%7B%7D%0AGenesisTime()%20uint64%0AGenesisValidatorsRoot()%20%5B%5Dbyte%0ASlot()%20types.Slot%0AFork()%20*ethpb.Fork%0ALatestBlockHeader()%20*ethpb.BeaconBlockHeader%0AHistoricalRoots()%20%5B%5D%5B%5Dbyte%0ASlashings()%20%5B%5Duint64%0AFieldReferencesCount()%20map%5Bstring%5Duint64%0AMarshalSSZ()%20(%5B%5Dbyte%2C%20error)%0AIsNil()%20bool%0AVersion()%20int%0ALatestExecutionPayloadHeader()%20(interfaces.ExecutionData%2C%20error)%0A%7D%0A%0A%60%60%60%0A%0A%60%60%60%0A%0Atype%20ReadOnlyValidators%20interface%20%7B%0AValidators()%20%5B%5D*ethpb.Validator%0AValidatorAtIndex(idx%20types.ValidatorIndex)%20(*ethpb.Validator%2C%20error)%0AValidatorAtIndexReadOnly(idx%20types.ValidatorIndex)%20(ReadOnlyValidator%2C%20error)%0AValidatorIndexByPubkey(key%20%5Bfieldparams.BLSPubkeyLength%5Dbyte)%20(types.ValidatorIndex%2C%20bool)%0APubkeyAtIndex(idx%20types.ValidatorIndex)%20%5Bfieldparams.BLSPubkeyLength%5Dbyte%0ANumValidators()%20int%0AReadFromEveryValidator(f%20func(idx%20int%2C%20val%20ReadOnlyValidator)%20error)%20error%0A%7D%0A%0A%60%60%60%0A%0A%60%60%60%0A%0Atype%20ReadOnlyRandaoMixes%20interface%20%7B%0ARandaoMixes()%20%5B%5D%5B%5Dbyte%0ARandaoMixAtIndex(idx%20uint64)%20(%5B%5Dbyte%2C%20error)%0ARandaoMixesLength()%20int%0A%7D%0A%0A%60%60%60%0A%0A%60%60%60%0A%0Atype%20WriteOnlyBeaconState%20interface%20%7B%0AWriteOnlyBlockRoots%0AWriteOnlyStateRoots%0AWriteOnlyRandaoMixes%0AWriteOnlyEth1Data%0AWriteOnlyValidators%0AWriteOnlyBalances%0AWriteOnlyCheckpoint%0AWriteOnlyAttestations%0ASetGenesisTime(val%20uint64)%20error%0ASetGenesisValidatorsRoot(val%20%5B%5Dbyte)%20error%0ASetSlot(val%20types.Slot)%20error%0ASetFork(val%20*ethpb.Fork)%20error%0ASetLatestBlockHeader(val%20*ethpb.BeaconBlockHeader)%20error%0ASetHistoricalRoots(val%20%5B%5D%5B%5Dbyte)%20error%0ASetSlashings(val%20%5B%5Duint64)%20error%0AUpdateSlashingsAtIndex(idx%2C%20val%20uint64)%20error%0AAppendHistoricalRoots(root%20%5B32%5Dbyte)%20error%0ASetLatestExecutionPayloadHeader(payload%20interfaces.ExecutionData)%20error%0ASetWithdrawalQueue(val%20%5B%5D*enginev1.Withdrawal)%20error%0AAppendWithdrawal(val%20*enginev1.Withdrawal)%20error%0ASetNextWithdrawalIndex(i%20uint64)%20error%0ASetNextPartialWithdrawalValidatorIndex(i%20types.ValidatorIndex)%20error%0A%7D%0A%0A%60%60%60%0A%0A%60%60%60%0A%0Atype%20WriteOnlyValidators%20interface%20%7B%0ASetValidators(val%20%5B%5D*ethpb.Validator)%20error%0AApplyToEveryValidator(f%20func(idx%20int%2C%20val%20*ethpb.Validator)%20(bool%2C%20*ethpb.Validator%2C%20error))%20error%0AUpdateValidatorAtIndex(idx%20types.ValidatorIndex%2C%20val%20*ethpb.Validator)%20error%0AAppendValidator(val%20%5C*ethpb.Validator)%20error%0A%7D%0A%0A%60%60%60%0A%0A%60%60%60%0A%0Atype%20WriteOnlyRandaoMixes%20interface%20%7B%0ASetRandaoMixes(val%20%5B%5D%5B%5Dbyte)%20error%0AUpdateRandaoMixesAtIndex(idx%20uint64%2C%20val%20%5B%5Dbyte)%20error%0A%7D%0A%0A%60%60%60%0A%0A%5BValidator%5D(https%3A%2F%2Fpkg.go.dev%2Fgithub.com%2Fprysmaticlabs%2Fprysm%2Fv3%40v3.1.2%2Fproto%2Fprysm%2Fv1alpha1%23Validator)%20information%0A%0A%60%60%60%0A%0Atype%20Validator%20struct%20%7B%0APublicKey%20%5B%5Dbyte%20%60protobuf%3A%22bytes%2C1%2Copt%2Cname%3Dpublic_key%2Cjson%3DpublicKey%2Cproto3%22%20json%3A%22public_key%2Comitempty%22%20spec-name%3A%22pubkey%22%20ssz-size%3A%2248%22%60%0AWithdrawalCredentials%20%5B%5Dbyte%20%60%60%2F*%20138-byte%20string%20literal%20not%20displayed%20*%2F%0A%20EffectiveBalance%20%20%20%20%20%20%20%20%20%20%20uint64%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%60protobuf%3A%22varint%2C3%2Copt%2Cname%3Deffective_balance%2Cjson%3DeffectiveBalance%2Cproto3%22%20json%3A%22effective_balance%2Comitempty%22%60%0A%20Slashed%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20bool%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%60protobuf%3A%22varint%2C4%2Copt%2Cname%3Dslashed%2Cproto3%22%20json%3A%22slashed%2Comitempty%22%60%0A%20ActivationEligibilityEpoch%20github_com_prysmaticlabs_prysm_v3_consensus_types_primitives.Epoch%60%60%20%2F_%20221-byte%20string%20literal%20not%20displayed%20_%2F%0AActivationEpoch%20github*com_prysmaticlabs_prysm_v3_consensus_types_primitives.Epoch%20%60%2F*%20186-byte%20string%20literal%20not%20displayed%20_%2F%0AExitEpoch%20github_com_prysmaticlabs_prysm_v3_consensus_types_primitives.Epoch%60%20%2F_%20168-byte%20string%20literal%20not%20displayed%20_%2F%0AWithdrawableEpoch%20github_com_prysmaticlabs_prysm_v3_consensus_types_primitives.Epoch%20%60%60%20%2F_%20192-byte%20string%20literal%20not%20displayed%20%5C_%2F%0A%2F%2F%20contains%20filtered%20or%20unexported%20fields%0A%7D%0A%0A%60%60%60%0A%0A%23%23%23%23%20%5Bweb3signer_types%20from%20prysm%5D(https%3A%2F%2Fgithub.com%2Fprysmaticlabs%2Fprysm%2Fblob%2Fdevelop%2Fvalidator%2Fkeymanager%2Fremote-web3signer%2Fv1%2Fweb3signer_types.go%23L107)%0A%0A%60%60%60%0A%0A%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%0A%2F%2F%20sub%20properties%20of%20Sign%20Requests%20%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%0A%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%0A%0A%2F%2F%20ForkInfo%20a%20sub%20property%20object%20of%20the%20Sign%20request%0Atype%20ForkInfo%20struct%20%7B%0AFork%20%5C*Fork%20%60json%3A%22fork%22%60%0AGenesisValidatorsRoot%20hexutil.Bytes%20%60json%3A%22genesis_validators_root%22%60%0A%7D%0A%0A%2F%2F%20Fork%20a%20sub%20property%20of%20ForkInfo.%0Atype%20Fork%20struct%20%7B%0APreviousVersion%20hexutil.Bytes%20%60json%3A%22previous_version%22%60%0ACurrentVersion%20hexutil.Bytes%20%60json%3A%22current_version%22%60%0AEpoch%20string%20%60json%3A%22epoch%22%60%20%2F_uint64_%2F%0A%7D%0A%0A%2F%2F%20AggregationSlot%20a%20sub%20property%20of%20AggregationSlotSignRequest.%0Atype%20AggregationSlot%20struct%20%7B%0ASlot%20string%20%60json%3A%22slot%22%60%0A%7D%0A%0A%2F%2F%20AggregateAndProof%20a%20sub%20property%20of%20AggregateAndProofSignRequest.%0Atype%20AggregateAndProof%20struct%20%7B%0AAggregatorIndex%20string%20%60json%3A%22aggregator_index%22%60%20%2F_%20uint64%20_%2F%0AAggregate%20_Attestation%20%60json%3A%22aggregate%22%60%0ASelectionProof%20hexutil.Bytes%20%60json%3A%22selection_proof%22%60%20%2F_%2096%20bytes%20_%2F%0A%7D%0A%0A%2F%2F%20Attestation%20a%20sub%20property%20of%20AggregateAndProofSignRequest.%0Atype%20Attestation%20struct%20%7B%0AAggregationBits%20hexutil.Bytes%20%60json%3A%22aggregation_bits%22%60%20%2F_hex%20bitlist_%2F%0AData%20%5C*AttestationData%20%60json%3A%22data%22%60%0ASignature%20hexutil.Bytes%20%60json%3A%22signature%22%60%0A%7D%0A%0A%2F%2F%20AttestationData%20a%20sub%20property%20of%20Attestation.%0Atype%20AttestationData%20struct%20%7B%0ASlot%20string%20%60json%3A%22slot%22%60%20%2F_%20uint64%20_%2F%0AIndex%20string%20%60json%3A%22index%22%60%20%2F_%20uint64%20_%2F%20%2F%2F%20Prysm%20uses%20CommitteeIndex%20but%20web3signer%20uses%20index.%0ABeaconBlockRoot%20hexutil.Bytes%20%60json%3A%22beacon_block_root%22%60%0ASource%20*Checkpoint%20%60json%3A%22source%22%60%0ATarget%20*Checkpoint%20%60json%3A%22target%22%60%0A%7D%0A%0A%2F%2F%20Checkpoint%20a%20sub%20property%20of%20AttestationData.%0Atype%20Checkpoint%20struct%20%7B%0AEpoch%20string%20%60json%3A%22epoch%22%60%0ARoot%20string%20%60json%3A%22root%22%60%0A%7D%0A%0A%60%60%60%0A%0A%5Battestation.proto%20from%20prysm%20(Message%20Structure)%5D(https%3A%2F%2Fgithub.com%2Fprysmaticlabs%2Fprysm%2Fblob%2Fdevelop%2Fproto%2Fprysm%2Fv1alpha1%2Fattestation.proto)%0A%0A%60%60%60%0A%0Amessage%20AttestationData%20%7B%0A%2F%2F%20Attestation%20data%20includes%20information%20on%20Casper%20the%20Friendly%20Finality%20Gadget's%20votes%0A%2F%2F%20See%3A%20https%3A%2F%2Farxiv.org%2Fpdf%2F1710.09437.pdf%0A%0A%20%20%20%20%2F%2F%20Slot%20of%20the%20attestation%20attesting%20for.%0A%20%20%20%20uint64%20slot%20%3D%201%20%5B(ethereum.eth.ext.cast_type)%20%3D%20%22github.com%2Fprysmaticlabs%2Fprysm%2Fv3%2Fconsensus-types%2Fprimitives.Slot%22%5D%3B%0A%0A%20%20%20%20%2F%2F%20The%20committee%20index%20that%20submitted%20this%20attestation.%0A%20%20%20%20uint64%20committee_index%20%3D%202%20%20%5B(ethereum.eth.ext.cast_type)%20%3D%20%22github.com%2Fprysmaticlabs%2Fprysm%2Fv3%2Fconsensus-types%2Fprimitives.CommitteeIndex%22%5D%3B%0A%0A%20%20%20%20%2F%2F%2032%20byte%20root%20of%20the%20LMD%20GHOST%20block%20vote.%0A%20%20%20%20bytes%20beacon_block_root%20%3D%203%20%5B(ethereum.eth.ext.ssz_size)%20%3D%20%2232%22%5D%3B%0A%0A%20%20%20%20%2F%2F%20The%20most%20recent%20justified%20checkpoint%20in%20the%20beacon%20state%0A%20%20%20%20Checkpoint%20source%20%3D%204%3B%0A%0A%20%20%20%20%2F%2F%20The%20checkpoint%20attempting%20to%20be%20justified%20for%20the%20current%20epoch%20and%20its%20epoch%20boundary%20block%0A%20%20%20%20Checkpoint%20target%20%3D%205%3B%0A%0A%7D%0A%0A%60%60%60%0A%0A%23%23%23%20Appendix%20G%3A%20Sample%20Data%0A%0A%23%23%23%23%20Epoch%20Data%20for%20167040%0A%0AFollowing%20is%20the%20Epoch%20Data%20for%20167040%0AIt%20can%20be%20retrieved%20from%20%5Bhere%5D(https%3A%2F%2Fbeaconcha.in%2Fapi%2Fv1%2Fdocs%2Findex.html%23%2FEpoch%2Fget_api_v1_epoch__epoch_)%20or%20by%20using%20this%20curl%20command%0A%0A%60curl%20-X%20'GET'%20%5C%0A%20%20'https%3A%2F%2Fbeaconcha.in%2Fapi%2Fv1%2Fepoch%2F167040'%20%5C%0A%20%20-H%20'accept%3A%20application%2Fjson'%60%0A%0AResponse%0A%0A%60%60%60%0A%0A%7B%0A%22status%22%3A%20%22OK%22%2C%0A%22data%22%3A%20%7B%0A%22attestationscount%22%3A%203457%2C%0A%22attesterslashingscount%22%3A%200%2C%0A%22averagevalidatorbalance%22%3A%2033899775551%2C%0A%22blockscount%22%3A%2032%2C%0A%22depositscount%22%3A%200%2C%0A%22eligibleether%22%3A%2015596542000000000%2C%0A%22epoch%22%3A%20167040%2C%0A%22finalized%22%3A%20true%2C%0A%22globalparticipationrate%22%3A%200.9963188171386719%2C%0A%22missedblocks%22%3A%200%2C%0A%22orphanedblocks%22%3A%200%2C%0A%22proposedblocks%22%3A%2032%2C%0A%22proposerslashingscount%22%3A%200%2C%0A%22scheduledblocks%22%3A%200%2C%0A%22totalvalidatorbalance%22%3A%2016522615004645864%2C%0A%22validatorscount%22%3A%20487396%2C%0A%22voluntaryexitscount%22%3A%200%2C%0A%22votedether%22%3A%2015539128000000000%0A%7D%0A%7D%0A%0A%60%60%60%0A%0A%23%23%23%23%20Block%20Data%20for%20Slot%205%2C330%2C592%0A%0AFollowing%20is%20the%20Block%20Data%20for%20Slot%205%2C330%2C592%0AIt%20can%20be%20retrieved%20from%20%5Bhere%5D(https%3A%2F%2Fbeaconcha.in%2Fapi%2Fv1%2Fdocs%2Findex.html%23%2FBlock%2Fget_api_v1_block__slotOrHash_)%20or%20by%20using%20this%20curl%20command%0A%0A%60curl%20-X%20'GET'%20'https%3A%2F%2Fbeaconcha.in%2Fapi%2Fv1%2Fblock%2F5330592'%20-H%20'accept%3A%20application%2Fjson'%60%0A%0AResponse%0A%0A%60%60%60%0A%0A%7B%0A%22status%22%3A%20%22OK%22%2C%0A%22data%22%3A%20%7B%0A%22attestationscount%22%3A%20126%2C%0A%22attesterslashingscount%22%3A%200%2C%0A%22blockroot%22%3A%20%220xaebe891086c79ab79b325f474dc1150f1223e567337bff815cc318f14c64c233%22%2C%0A%22depositscount%22%3A%200%2C%0A%22epoch%22%3A%20166581%2C%0A%22eth1data_blockhash%22%3A%20%220xd346f84ffe7c600b7714d6411c8bea988d9d64dbdb432f26db58e72946337954%22%2C%0A%22eth1data_depositcount%22%3A%20498785%2C%0A%22eth1data_depositroot%22%3A%20%220x9a5603a34aa60f299384679bf4bfc267e99b68278a81f343bde8cb5650bf1d60%22%2C%0A%22exec_base_fee_per_gas%22%3A%2012376913565%2C%0A%22exec_block_hash%22%3A%20%220x26239efe09f51b24bdf7c518b1aa925a3b0b6453682408ec8a5c906d5038a6e7%22%2C%0A%22exec_block_number%22%3A%2016163905%2C%0A%22exec_extra_data%22%3A%20%220x496c6c756d696e61746520446d6f63726174697a6520447374726962757465%22%2C%0A%22exec_fee_recipient%22%3A%20%220xdafea492d9c6733ae3d56b7ed1adb60692c98bc5%22%2C%0A%22exec_gas_limit%22%3A%2030000000%2C%0A%22exec_gas_used%22%3A%209901267%2C%0A%22exec_logs_bloom%22%3A%20%220x8c21554815843b4084a999b2901917a52c58004a82a8440d94919a77f9241181388a0c404f000a8c0321ab024800bf899610e60ec801fb4b0352e34f147626192648619065381ded6b9d92bcd0861120adc1ec01064e7a016ea91c478d01b81316462d2d622a60010bc0139f6fb8ccf200499c0e211a85c042047d1601aa0c2ea2833902a2a3091528492dad09f6dc064529c455d328413b78c680c4699815ac9a91610f19e66542edca45a10518ee65b02cf02241a124232d5958b6004cd0a5846c5703d00b5e4d8353221015f7d38c1429074e34aaa11f3804f933082860c401152088251479918297a1a9237d9ac35539f6d069cca07a005819494a653913%22%2C%0A%22exec_parent_hash%22%3A%20%220x06746d5ff105e96a1b8961c2490c0261b474604fbcbf934e86295c0030e26ce2%22%2C%0A%22exec_random%22%3A%20%220xc2861c72cf4d34b37ec73519dbc20b690742b5cc119ed3738f1dd67d8ca52723%22%2C%0A%22exec_receipts_root%22%3A%20%220x33cdf5c6e03dd341f282d02d3c354c2361a6212692b2a3c06b520397045313f4%22%2C%0A%22exec_state_root%22%3A%20%220x517304bade8d83337c9a52f8ceeb13f924b64486b3b8033f7c348c176922104a%22%2C%0A%22exec_timestamp%22%3A%201670791127%2C%0A%22exec_transactions_count%22%3A%20139%2C%0A%22graffiti%22%3A%20%220x0000000000000000000000000000000000000000000000000000000000000000%22%2C%0A%22graffiti_text%22%3A%20%22%22%2C%0A%22parentroot%22%3A%20%220x0cab36616bbcbbc67c343ddce00241c27d0df2c367c5fa82fc7c0fdf0ed37405%22%2C%0A%22proposer%22%3A%204345%2C%0A%22proposerslashingscount%22%3A%200%2C%0A%22randaoreveal%22%3A%20%220x83950cb64781aff91f4bd14aa6abb0f5fdb7e08e4e81c264f0754c93d7672c4a9615de196491fdb53eafdeb8f49e9cf515f1bd3dc05bb5dc0e2dd8bff5a8d783b503e3385e80b61485f0ddac1caa9361132a863db84e7e234df5815e6908e4e7%22%2C%0A%22signature%22%3A%20%220x84865a9480ae6313b0e5fcadfa294b35f5963e06c66ad1c7613dc081e9700c07f82a2583ba4b62b2483b4a1b9d49aafe0690f22fcf4d0072f9f44a5ce3067ef4fda560d171001cc6bf5dc84e09d9055d92894b86b27695c297f25530cd8db7a0%22%2C%0A%22slot%22%3A%205330592%2C%0A%22stateroot%22%3A%20%220x9e7e40d844c3b229cd9497d662a6d94276d285945073849995aba93c7e73cfe7%22%2C%0A%22status%22%3A%20%221%22%2C%0A%22syncaggregate_bits%22%3A%20%220xdffffffffffffffffffffffffffffff7fffffffffffffffffffffffffffffffffffffffffffffffffffffffdfffffffffffffffdffffffffffffffffffffffff%22%2C%0A%22syncaggregate_participation%22%3A%200.9921875%2C%0A%22syncaggregate_signature%22%3A%20%220x95332c55790018eed3d17eada01cb4045348d09137505bc8697eeedaa3800a830ee2c138251850a9577f62a5488419ef0a722579156a177fb3a147017f1077af5d778f46a4cdf815fc450129d135fe5286e16df68333592e4aa45821bde780dd%22%2C%0A%22voluntaryexitscount%22%3A%200%2C%0A%22votes%22%3A%2019227%0A%7D%0A%7D%0A%0A%60%60%60%0A%0A%23%23%23%23%20Execution%20Block%20for%2016163905%0A%0AFollowing%20is%20the%20execution%20block%20data%20for%2016163905%0AIt%20can%20be%20retrieved%20from%20%5Bhere%5D(https%3A%2F%2Fbeaconcha.in%2Fapi%2Fv1%2Fdocs%2Findex.html%23%2FExecution%2Fget_api_v1_execution_block__blockNumber_)%20or%20by%20using%20this%20curl%20command%0A%0A%60curl%20-X%20'GET'%20'https%3A%2F%2Fbeaconcha.in%2Fapi%2Fv1%2Fexecution%2Fblock%2F16163905'%20%20-H%20'accept%3A%20application%2Fjson'%60%0A%0AResult%0A%0A%60%60%60%0A%0A%7B%0A%22status%22%3A%20%22OK%22%2C%0A%22data%22%3A%20%5B%0A%7B%0A%22blockHash%22%3A%20%220x26239efe09f51b24bdf7c518b1aa925a3b0b6453682408ec8a5c906d5038a6e7%22%2C%0A%22blockNumber%22%3A%2016163905%2C%0A%22timestamp%22%3A%201670791127%2C%0A%22blockReward%22%3A%2037343826945103810%2C%0A%22blockMevReward%22%3A%2037083911760238810%2C%0A%22producerReward%22%3A%2037083911760238810%2C%0A%22feeRecipient%22%3A%20%220xdafea492d9c6733ae3d56b7ed1adb60692c98bc5%22%2C%0A%22gasLimit%22%3A%2030000000%2C%0A%22gasUsed%22%3A%209901267%2C%0A%22baseFee%22%3A%2012376913565%2C%0A%22txCount%22%3A%20139%2C%0A%22internalTxCount%22%3A%2054%2C%0A%22uncleCount%22%3A%200%2C%0A%22parentHash%22%3A%20%220x06746d5ff105e96a1b8961c2490c0261b474604fbcbf934e86295c0030e26ce2%22%2C%0A%22uncleHash%22%3A%20%220x1dcc4de8dec75d7aab85b567b6ccd41ad312451b948a7413f0a142fd40d49347%22%2C%0A%22difficulty%22%3A%200%2C%0A%22posConsensus%22%3A%20%7B%0A%22executionBlockNumber%22%3A%2016163905%2C%0A%22proposerIndex%22%3A%204345%2C%0A%22slot%22%3A%205330592%2C%0A%22epoch%22%3A%20166581%2C%0A%22finalized%22%3A%20true%0A%7D%2C%0A%22relay%22%3A%20%7B%0A%22tag%22%3A%20%22flashbots-relay%22%2C%0A%22builderPubkey%22%3A%20%220x81beef03aafd3dd33ffd7deb337407142c80fea2690e5b3190cfc01bde5753f28982a7857c96172a75a234cb7bcb994f%22%2C%0A%22producerFeeRecipient%22%3A%20%220x60987e0d8b5e0095869ca6f0e642828e3f258bb5%22%0A%7D%2C%0A%22consensusAlgorithm%22%3A%20%22pos%22%0A%7D%0A%5D%0A%7D%0A%0A%60%60%60%0A%0A%23%23%23%23%20Sync%20Committee%20(latest)%0A%0AFollowing%20is%20a%20sample%20Sync%20Committee%0AIt%20can%20be%20retrieved%20from%20%5Bhere%5D(https%3A%2F%2Fbeaconcha.in%2Fapi%2Fv1%2Fdocs%2Findex.html%23%2FSyncCommittee%2Fget_api_v1_sync_committee__period_)%20or%20by%20using%20this%20curl%20command%0A%0A%60curl%20-X%20'GET'%20'https%3A%2F%2Fbeaconcha.in%2Fapi%2Fv1%2Fsync_committee%2Flatest'%20-H%20'accept%3A%20application%2Fjson'%60%0A%0AAbbrieviated%20Result%0A%0A%60%60%60%0A%0A%7B%0A%22status%22%3A%20%22OK%22%2C%0A%22data%22%3A%20%7B%0A%22end_epoch%22%3A%20167167%2C%0A%22period%22%3A%20652%2C%0A%22start_epoch%22%3A%20166912%2C%0A%22validators%22%3A%20%5B%0A328781%2C%0A184949%2C%0A...%0A%5D%0A%7D%0A%7D%0A%0A%60%60%60%0A%0A%3Cdetails%3E%0A%3Csummary%3EFull%20Result%3C%2Fsummary%3E%0A%0A%60%60%60%0A%0A%7B%0A%22status%22%3A%20%22OK%22%2C%0A%22data%22%3A%20%7B%0A%22end_epoch%22%3A%20167167%2C%0A%22period%22%3A%20652%2C%0A%22start_epoch%22%3A%20166912%2C%0A%22validatorsdetails%3E%0A%0A%23%23%23%20Appendix%20H%3A%20Sync%20Committe%20Creation%20and%20Retrieval%0A%0A**Sync%20Committee%20Configuration**%0A%0A%60EPOCHS_PER_SYNC_COMMITTEE_PERIOD%60%20is%20set%20in%20%5Bconfig.go%5D(https%3A%2F%2Fgithub.com%2Fprysmaticlabs%2Fprysm%2Fblob%2Fdevelop%2Fconfig%2Fparams%2Fconfig.go%23L185)%20currently%20255%20epochs%20per%20synch%20comittee%20(approx%2027%20hrs)%20for%20Ethreum%20Mainnet.%0A%0A**Sync%20Committee%20Update%20Process**%0A%0A-%20%5Bbeacon-chain%2Fblockchain%5D(https%3A%2F%2Fgithub.com%2Fprysmaticlabs%2Fprysm%2Ftree%2Fdevelop%2Fbeacon-chain%2Fblockchain)%0A%20%20-%20%5Bprocess_block.go%5D(https%3A%2F%2Fgithub.com%2Fprysmaticlabs%2Fprysm%2Fblob%2Fdevelop%2Fbeacon-chain%2Fblockchain%2Fprocess_block.go)%3A%20has%20function%20%60onBlock%60%20which%20is%20called%20when%20a%20gossip%20block%20is%20received.%20It%20also%20has%20function%20%60handleEpochBoundary%60%20which%20calls%20%60ProcessSlots%60%20in%20%5Bbeacon-chain%2Fcore%2Ftransition%5D(https%3A%2F%2Fgithub.com%2Fprysmaticlabs%2Fprysm%2Ftree%2Fdevelop%2Fbeacon-chain%2Fcore%2Ftransition)%20and%20calls%20function%20%60UpdateCommitteeCache%60%20in%20%5Bbeacon-chain%2Fcore%2Fhelpers%5D(https%3A%2F%2Fgithub.com%2Fprysmaticlabs%2Fprysm%2Ftree%2Fdevelop%2Fbeacon-chain%2Fcore%2Fhelpers)%0A-%20%5Bbeacon-chain%2Fcore%2Ftransition%5D(https%3A%2F%2Fgithub.com%2Fprysmaticlabs%2Fprysm%2Ftree%2Fdevelop%2Fbeacon-chain%2Fcore%2Ftransition)%0A%20%20-%20%5Btransition.go%5D(https%3A%2F%2Fgithub.com%2Fprysmaticlabs%2Fprysm%2Fblob%2Fdevelop%2Fbeacon-chain%2Fcore%2Ftransition%2Ftransition.go)%3A%20implements%20the%20whole%20state%20transition%20function%20which%20consists%20of%20per%20slot%2C%20per-epoch%20transitions.%20function%20%60ProcessSlots%60%20calls%20%60ProcessEpoch%60%20in%20%5Bbeacon-chain%2Fcore%2Faltair%2Ftransition.go%5D(%3C(%253Chttps%3A%2F%2Fgithub.com%2Fprysmaticlabs%2Fprysm%2Fblob%2Fdevelop%2Fbeacon-chain%2Fcore%2Faltair%2Ftransition.go)%253E%3E)%0A-%20%5Bbeacon-chain%2Fcore%2Faltair%5D(https%3A%2F%2Fgithub.com%2Fprysmaticlabs%2Fprysm%2Ftree%2Fdevelop%2Fbeacon-chain%2Fcore%2Faltair)%0A%20%20-%20%5Btransition.go%5D(https%3A%2F%2Fgithub.com%2Fprysmaticlabs%2Fprysm%2Fblob%2Fdevelop%2Fbeacon-chain%2Fcore%2Faltair%2Ftransition.go)%3A%20includes%20function%20%60ProcessEpoch%60%20which%20calls%20%60ProcessSyncCommitteeUpdates%60%20in%20%5Bepoch_spec.go%5D(https%3A%2F%2Fgithub.com%2Fprysmaticlabs%2Fprysm%2Fblob%2Fdevelop%2Fbeacon-chain%2Fcore%2Faltair%2Fepoch_spec.go)%0A%20%20-%20%5Bepoch_spec.go%5D(https%3A%2F%2Fgithub.com%2Fprysmaticlabs%2Fprysm%2Fblob%2Fdevelop%2Fbeacon-chain%2Fcore%2Faltair%2Fepoch_spec.go)%3A%20includes%20function%20%60ProcessSyncCommitteeUpdates%60%20which%20calls%20%60NextSyncCommittee%60%20it%20also%20persists%20beacon%20state%20syncCommittee%20by%20calling%20%60beaconState.SetNextSyncCommittee(nextSyncCommittee)%60%20in%20%5Bsetters_sync_committee.go%5D(https%3A%2F%2Fgithub.com%2Fprysmaticlabs%2Fprysm%2Fblob%2Fdevelop%2Fbeacon-chain%2Fstate%2Fstate-native%2Fsetters_sync_committee.go)%0A%20%20-%20%5Bsync_committee.go%5D(https%3A%2F%2Fgithub.com%2Fprysmaticlabs%2Fprysm%2Fblob%2Fdevelop%2Fbeacon-chain%2Fcore%2Faltair%2Fsync_committee.go)%3A%20includes%20function%20%60NextSyncCommittee%60%20which%20calls%20%60NextSyncCommittee%60%20to%20return%20the%20sync%20committee%20indices%2C%20with%20possible%20duplicates%2C%20for%20the%20next%20sync%20committee.%0A%20%20-%20%5Bblock.go%5D(https%3A%2F%2Fgithub.com%2Fprysmaticlabs%2Fprysm%2Fblob%2Fdevelop%2Fbeacon-chain%2Fcore%2Faltair%2Fblock.go)%3A%20includes%20function%20%60VerifySyncCommitteeSig%60%0A-%20%5Bbeacon-chain%2Fcore%2Fhelpers%5D(https%3A%2F%2Fgithub.com%2Fprysmaticlabs%2Fprysm%2Ftree%2Fdevelop%2Fbeacon-chain%2Fcore%2Fhelpers)%0A%20%20-%20%5Bbeacon_committee.go%5D(https%3A%2F%2Fgithub.com%2Fprysmaticlabs%2Fprysm%2Fblob%2Fdevelop%2Fbeacon-chain%2Fcore%2Fhelpers%2Fbeacon_committee.go)%20has%20function%20%60UpdateCommitteeCache%60%20which%20gets%20called%20at%20the%20beginning%20of%20every%20epoch%20to%20cache%20the%20committee%20shuffled%20indices%20list%20with%20committee%20index%20and%20epoch%20number.%20It%20caches%20the%20shuffled%20indices%20for%20current%20epoch%20and%20next%20epoch.%20it%20calls%20%60UpdatePositionsInCommittee%60%20in%20%5Bsync_committee.go%5D(https%3A%2F%2Fgithub.com%2Fprysmaticlabs%2Fprysm%2Fblob%2Fdevelop%2Fbeacon-chain%2Fcache%2Fsync_committee.go)%0A-%20%5Bbeacon-chain%2Fcache%5D(https%3A%2F%2Fgithub.com%2Fprysmaticlabs%2Fprysm%2Ftree%2Fdevelop%2Fbeacon-chain%2Fcache)%0A%20%20-%20%5Bsync_committee.go%5D(https%3A%2F%2Fgithub.com%2Fprysmaticlabs%2Fprysm%2Fblob%2Fdevelop%2Fbeacon-chain%2Fcache%2Fsync_committee.go)%3A%20has%20function%20%60UpdatePositionsInCommittee%60%20which%20updates%20caching%20of%20validators%20position%20in%20sync%20committee%20in%20respect%20to%20current%20epoch%20and%20next%20epoch.%20This%20should%20be%20called%20when%20%60current_sync_committee%60%20and%20%60next_sync_committee%60%20change%20and%20that%20happens%20every%20%60EPOCHS_PER_SYNC_COMMITTEE_PERIOD%60.%0A%0A**Sync%20Committee%20Retrieval**%0AgRPC%20and%20API%20methods%0A%0A-%20%5Bbeacon-chain%2Frpc%5D(https%3A%2F%2Fgithub.com%2Fprysmaticlabs%2Fprysm%2Ftree%2Fdevelop%2Fbeacon-chain%2Frpc)%0A%20%20-%20%5Bprysm%2Fv1alpha1%5D(https%3A%2F%2Fgithub.com%2Fprysmaticlabs%2Fprysm%2Ftree%2Fdevelop%2Fbeacon-chain%2Frpc%2Fprysm%2Fv1alpha1)%0A%20%20%20%20-%20%5Bvalidator%5D(https%3A%2F%2Fgithub.com%2Fprysmaticlabs%2Fprysm%2Ftree%2Fdevelop%2Fbeacon-chain%2Frpc%2Fprysm%2Fv1alpha1%2Fvalidator)%0A%20%20%20%20%20%20-%20%5Bassignments.go%5D(https%3A%2F%2Fgithub.com%2Fprysmaticlabs%2Fprysm%2Fblob%2Fdevelop%2Fbeacon-chain%2Frpc%2Fprysm%2Fv1alpha1%2Fvalidator%2Fassignments.go)%3A%20has%20functions%20%60GetDuties%60%20and%20%60StreamDuties%60%20which%20calls%20function%20%60duties%60%20to%20compute%20the%20validator%20duties%20from%20the%20head%20state's%20corresponding%20epoch%20for%20validators%20public%20key%20%2F%20indices%20requested.%0A%0Awhich%20%5Bmanages%20sync%20committee%20duties%5D(https%3A%2F%2Fgithub.com%2Fprysmaticlabs%2Fprysm%2Fblob%2Fdevelop%2Fbeacon-chain%2Frpc%2Fprysm%2Fv1alpha1%2Fvalidator%2Fassignments.go%23L213)%20every%20%60EPOCHS_PER_SYNC_COMMITTEE_PERIOD%20-%201%60%20which%20is%20set%20in%20%5Bconfig.go%5D(https%3A%2F%2Fgithub.com%2Fprysmaticlabs%2Fprysm%2Fblob%2Fdevelop%2Fconfig%2Fparams%2Fconfig.go%23L185)%20currently%20255%20epochs%20per%20synch%20comittee%20(approx%2027%20hrs)%20for%20Ethreum%20Mainnet.%0A%0A%5BregisterSyncSubnetNextPeriod%5D(https%3A%2F%2Fgithub.com%2Fprysmaticlabs%2Fprysm%2Fblob%2Fdevelop%2Fbeacon-chain%2Frpc%2Fprysm%2Fv1alpha1%2Fvalidator%2Fassignments.go%23L281)%0A%0A%60%60%60%0A%0Afunc%20registerSyncSubnetNextPeriod(s%20beaconState.BeaconState%2C%20epoch%20types.Epoch%2C%20pubKey%20%5B%5Dbyte%2C%20status%20ethpb.ValidatorStatus)%20error%20%7B%0Acommittee%2C%20err%20%3A%3D%20s.NextSyncCommittee()%0Aif%20err%20!%3D%20nil%20%7B%0Areturn%20err%0A%7D%0AsyncCommPeriod%20%3A%3D%20slots.SyncCommitteePeriod(epoch)%0AregisterSyncSubnet(epoch%2C%20syncCommPeriod%2B1%2C%20pubKey%2C%20committee%2C%20status)%0Areturn%20nil%0A%7D%0A%0A%60%60%60%0A%0A**Sync%20Committee%20Storage**%0A%0APersistence%20Mechanism%0A%0A-%20%5Bproto%5D(https%3A%2F%2Fgithub.com%2Fprysmaticlabs%2Fprysm%2Ftree%2Fdevelop%2Fproto)%0A%20%20-%20%5Beth%2Fv2%5D(https%3A%2F%2Fgithub.com%2Fprysmaticlabs%2Fprysm%2Ftree%2Fdevelop%2Fproto%2Feth%2Fv2)%0A%20%20%20%20-%20%5Bvalidator.proto%5D(https%3A%2F%2Fgithub.com%2Fprysmaticlabs%2Fprysm%2Fblob%2Fdevelop%2Fproto%2Feth%2Fv2%2Fvalidator.proto)%3A%20messages%20for%20validators%20including%20%60SyncCommitteeDuty%60%0A%20%20%20%20-%20%5Bsync_committee.proto%5D(https%3A%2F%2Fgithub.com%2Fprysmaticlabs%2Fprysm%2Fblob%2Fdevelop%2Fproto%2Feth%2Fv2%2Fsync_committee.proto)%3A%20messages%20for%20SyncCommittee%20which%20serves%20as%20committees%20to%20facilitate%20light%20client%20syncing%20to%20beacon%20chain.%0A%0A%5Bbeacon_state_mainnet.go%5D(https%3A%2F%2Fgithub.com%2Fprysmaticlabs%2Fprysm%2Fblob%2Fv3.1.2%2Fbeacon-chain%2Fstate%2Fstate-native%2Fbeacon_state_mainnet.go)%0A%0A%60%60%60%0A%0A%2F%2F%20BeaconState%20defines%20a%20struct%20containing%20utilities%20for%20the%20Ethereum%20Beacon%20Chain%20state%2C%20defining%0A%2F%2F%20getters%20and%20setters%20for%20its%20respective%20values%20and%20helpful%20functions%20such%20as%20HashTreeRoot().%0Atype%20BeaconState%20struct%20%7B%0Aversion%20int%0AgenesisTime%20uint64%0AgenesisValidatorsRoot%20%5B32%5Dbyte%0Aslot%20eth2types.Slot%0Afork%20*ethpb.Fork%0AlatestBlockHeader%20*ethpb.BeaconBlockHeader%0AblockRoots%20*customtypes.BlockRoots%0AstateRoots%20*customtypes.StateRoots%0AhistoricalRoots%20customtypes.HistoricalRoots%0Aeth1Data%20*ethpb.Eth1Data%0Aeth1DataVotes%20%5B%5D*ethpb.Eth1Data%0Aeth1DepositIndex%20uint64%0Avalidators%20%5B%5D*ethpb.Validator%0Abalances%20%5B%5Duint64%0ArandaoMixes%20*customtypes.RandaoMixes%0Aslashings%20%5B%5Duint64%0ApreviousEpochAttestations%20%5B%5D*ethpb.PendingAttestation%0AcurrentEpochAttestations%20%5B%5D*ethpb.PendingAttestation%0ApreviousEpochParticipation%20%5B%5Dbyte%0AcurrentEpochParticipation%20%5B%5Dbyte%0AjustificationBits%20bitfield.Bitvector4%0ApreviousJustifiedCheckpoint%20*ethpb.Checkpoint%0AcurrentJustifiedCheckpoint%20*ethpb.Checkpoint%0AfinalizedCheckpoint%20*ethpb.Checkpoint%0AinactivityScores%20%5B%5Duint64%0AcurrentSyncCommittee%20*ethpb.SyncCommittee%0AnextSyncCommittee%20*ethpb.SyncCommittee%0AlatestExecutionPayloadHeader%20*enginev1.ExecutionPayloadHeader%0AlatestExecutionPayloadHeaderCapella%20%5C*enginev1.ExecutionPayloadHeaderCapella%0AnextWithdrawalIndex%20uint64%0AnextWithdrawalValidatorIndex%20eth2types.ValidatorIndex%0A%0Alock%20sync.RWMutex%0AdirtyFields%20map%5Bnativetypes.FieldIndex%5Dbool%0AdirtyIndices%20map%5Bnativetypes.FieldIndex%5D%5B%5Duint64%0AstateFieldLeaves%20map%5Bnativetypes.FieldIndex%5D*fieldtrie.FieldTrie%0ArebuildTrie%20map%5Bnativetypes.FieldIndex%5Dbool%0AvalMapHandler%20*stateutil.ValidatorMapHandler%0AmerkleLayers%20%5B%5D%5B%5D%5B%5Dbyte%0AsharedFieldReferences%20map%5Bnativetypes.FieldIndex%5D%5C*stateutil.Reference%0A%7D%0A%0A%60%60%60%0A%0A%5Bbeacon_state.pb.go%5D(https%3A%2F%2Fgithub.com%2Fprysmaticlabs%2Fprysm%2Fblob%2Fdevelop%2Fproto%2Fprysm%2Fv1alpha1%2Fbeacon_state.pb.go%23L962)%0A%0A%60%60%60%0A%0Atype%20SyncCommittee%20struct%20%7B%0Astate%20protoimpl.MessageState%0AsizeCache%20protoimpl.SizeCache%0AunknownFields%20protoimpl.UnknownFields%0A%0APubkeys%20%5B%5D%5B%5Dbyte%20%60protobuf%3A%22bytes%2C1%2Crep%2Cname%3Dpubkeys%2Cproto3%22%20json%3A%22pubkeys%2Comitempty%22%20ssz-size%3A%22512%2C48%22%60%0AAggregatePubkey%20%5B%5Dbyte%20%60protobuf%3A%22bytes%2C2%2Copt%2Cname%3Daggregate_pubkey%2Cjson%3DaggregatePubkey%2Cproto3%22%20json%3A%22aggregate_pubkey%2Comitempty%22%20ssz-size%3A%2248%22%60%0A%7D%0A%0A%60%60%60%0A%0A%5BInterfaces%5D(https%3A%2F%2Fgithub.com%2Fprysmaticlabs%2Fprysm%2Fblob%2Fv3.1.2%2Fbeacon-chain%2Fstate%2Finterfaces.go)%0A%0A%60%60%60%0A%0A%2F%2F%20BeaconState%20has%20read%20and%20write%20access%20to%20beacon%20state%20methods.%0Atype%20BeaconState%20interface%20%7B%0ASpecParametersProvider%0AReadOnlyBeaconState%0AReadOnlyWithdrawals%0AWriteOnlyBeaconState%0ACopy()%20BeaconState%0AHashTreeRoot(ctx%20context.Context)%20(%5B32%5Dbyte%2C%20error)%0AFutureForkStub%0AStateProver%0A%7D%0A%0A%60%60%60%0A%0A%60%60%60%0A%0A%2F%2F%20StateProver%20defines%20the%20ability%20to%20create%20Merkle%20proofs%20for%20beacon%20state%20fields.%0Atype%20StateProver%20interface%20%7B%0AFinalizedRootProof(ctx%20context.Context)%20(%5B%5D%5B%5Dbyte%2C%20error)%0ACurrentSyncCommitteeProof(ctx%20context.Context)%20(%5B%5D%5B%5Dbyte%2C%20error)%0ANextSyncCommitteeProof(ctx%20context.Context)%20(%5B%5D%5B%5Dbyte%2C%20error)%0A%7D%0A%0A%60%60%60%0A%0A%60%60%60%0A%0A%60%60%60%0A",lastUpdatedAt:1753129136e3},{lazy:()=>o2(()=>import("./ethereum-Dkmckxij.js"),[]),path:"/research/chains/ethereum.html",type:"mdx",filePath:"research/chains/ethereum.mdx",content:"%23%20Ethereum%0A%0A-%20date%3A%202023-02-04%0A-%20last%20updated%3A%202023-02-04%0A%0A%23%23%20Overview%0A%0AWith%20the%20Introduction%20of%20Ethereum%202.0%3Csup%3E%5B1%5D(%23bp1)%3C%2Fsup%3E%20%3Csup%3E%5B2%5D(%23bp2)%3C%2Fsup%3E%20%3Csup%3E%5B3%5D(%23bp3)%3C%2Fsup%3E%20block%20production%20and%20consensus%20were%20separated%3Csup%3E%5B4%5D(%23bp4)%3C%2Fsup%3E%20into%20execution%20clients%3Csup%3E%5B5%5D(%23bp5)%3C%2Fsup%3E%20and%20consensus%20clients%3Csup%3E%5B6%5D(%23ts6)%3C%2Fsup%3E%20%3Csup%3E%5B7%5D(%23bp7)%3C%2Fsup%3E.%0A%0AThe%20execution%20chain%20implemented%20a%20simplified%20Proof%20of%20Work%3Csup%3E%5B1%5D(%23bp1)%3C%2Fsup%3E%20reducing%20difficutly%20to%20zero%20and%20removing%20the%20need%20for%20omners%20(uncles)%20which%20would%20now%20be%20handled%20by%20the%20beacon%20chain%3Csup%3E%5B3%5D(%23bp3)%3C%2Fsup%3E%20which%20is%20responsible%20for%20providing%20consensus%20%3Csup%3E%5B2%5D(%23bp2)%3C%2Fsup%3E.%0A%0ALight%20Clients%3Csup%3E%5B11%5D(%23ts11)%3C%2Fsup%3E%20were%20also%20introduced.%20To%20facilate%20this%0Aa%20sync%20committee%20of%20512%20current%20validators%20is%20elected%20every%20255%20epochs%2C%20approximately%20every%2027%20hours%20(see%20%5Bsample%20sync%20comittee%20data%5D(%23sync-committee-latest))%2C%20they%20are%20responsible%20for%20signing%20each%20block.%0A%0AAs%20at%20December%2011th%2C%202022%20Ethereum%20has%20487%2C920%20validators%3Csup%3E%5B8%5D(%23bp8)%3C%2Fsup%3E%20with%20a%20sample%20epoch%20(%5B166581%5D(https%3A%2F%2Fbeaconcha.in%2Fepoch%2F166581))%20and%20slot%20(%5B5%2C330%2C592%5D(https%3A%2F%2Fbeaconcha.in%2Fslot%2F5330592))%20having%20%5B139%20transactions%5D(https%3A%2F%2Fbeaconcha.in%2Fslot%2F5330592%23transactions)%20with%20%5B19%2C227%20votes%5D(https%3A%2F%2Fbeaconcha.in%2Fslot%2F5330592%23votes)%20from%2063%20committees%20and%20%5B126%20aggregated%20committe%20attestations%5D(https%3A%2F%2Fbeaconcha.in%2Fslot%2F5330592%23attestations).%0A%0AHere%20is%20more%20information%20on%20the%20upgrade%3Csup%3E%5B9%5D(%23bp9)%3C%2Fsup%3E%20and%20the%20roadmap%3Csup%3E%5B10%5D(%23bp10)%3C%2Fsup%3E%0A%0A!%5BEthereum%20Roadmap%5D(%2Fassets%2Fresearch%2Fethereum-roadmap.jpg%20%22Ethereum%20Roadmap%22)%0A%0A%23%23%20Consensus%20Mechanism%0A%0AEthreum%20uses%20Proof%20of%20Stake%20(PoS).%20Here%20we%20give%20an%20overview%20of%20Proof%20of%20Stake%20Followed%20by%20a%20deep%20dive%20into%20synch%20committees.%0AFollowing%20is%20an%20excerpt%20from%20%5BEthereum%20Orgs%20Proof%20of%20Stake%20document%5D(Proof-of-stake%20%22PoS%22)%0A%0A%3E%20**What%20is%20proof-of-stake%20(PoS)%3F**%0A%0A%3E%20Proof-of-stake%20underlies%20certain%20consensus%20mechanisms%20used%20by%20blockchains%20to%20achieve%20distributed%20consensus.%20In%20proof-of-work%2C%20miners%20prove%20they%20have%20capital%20at%20risk%20by%20expending%20energy.%20Ethereum%20uses%20proof-of-stake%2C%20where%20validators%20explicitly%20stake%20capital%20in%20the%20form%20of%20ETH%20into%20a%20smart%20contract%20on%20Ethereum.%20This%20staked%20ETH%20then%20acts%20as%20collateral%20that%20can%20be%20destroyed%20if%20the%20validator%20behaves%20dishonestly%20or%20lazily.%20The%20validator%20is%20then%20responsible%20for%20checking%20that%20new%20blocks%20propagated%20over%20the%20network%20are%20valid%20and%20occasionally%20creating%20and%20propagating%20new%20blocks%20themselves.%0A%0A%3E%20Proof-of-stake%20comes%20with%20a%20number%20of%20improvements%20to%20the%20now-deprecated%20proof-of-work%20system%3A%0A%0A%3E%20-%20better%20energy%20efficiency%20%E2%80%93%20there%20is%20no%20need%20to%20use%20lots%20of%20energy%20on%20proof-of-work%20computations%0A%3E%20-%20lower%20barriers%20to%20entry%2C%20reduced%20hardware%20requirements%20%E2%80%93%20there%20is%20no%20need%20for%20elite%20hardware%20to%20stand%20a%20chance%20of%20creating%20new%20blocks%0A%3E%20-%20reduced%20centralization%20risk%20%E2%80%93%20proof-of-stake%20should%20lead%20to%20more%20nodes%20securing%20the%20network%0A%3E%20-%20because%20of%20the%20low%20energy%20requirement%20less%20ETH%20issuance%20is%20required%20to%20incentivize%20participation%0A%3E%20-%20economic%20penalties%20for%20misbehaviour%20make%2051%25%20style%20attacks%20exponentially%20more%20costly%20for%20an%20attacker%20compared%20to%20proof-of-work%0A%3E%20-%20the%20community%20can%20resort%20to%20social%20recovery%20of%20an%20honest%20chain%20if%20a%2051%25%20attack%20were%20to%20overcome%20the%20crypto-economic%20defenses.%0A%0A%23%23%23%20Block%20Production%0A%0AValidators%20run%20both%20an%20Ethereum%201%20client%20(e.g.%20geth)%20and%20a%20Beacon%20Chain%20Client%20(e.g.%20prysm).%20The%20geth%20client%20recieves%20transactions%20and%20places%20them%20into%20blocks.%20For%20additional%20details%20see%20the%20Ethereum%20Builder%20Specs%3Csup%3E%5B12%5D(%23ts12)%3C%2Fsup%3E.%20The%20following%20diagrams%20give%20an%20overview%20of%20how%20blocks%20are%20proposed%20and%20how%20MEV%20Boost%3Csup%3E%5B13%5D(%23ts13)%3C%2Fsup%3E%20could%20be%20integrated.%20For%20simplification%20we%20can%20replace%20mev_boost%20and%20relay%20with%20geth%20in%20the%20block%20proposal%20diagram%20as%20the%20majority%20of%20validators%20simply%20run%20a%20geth%20node.%0A%0A!%5BBlock%20Proposal%5D(%2Fassets%2Fresearch%2Fblock-proposal.png%20%22Block%20Proposal%22)%0A%0A%23%23%23%20Slots%20and%20Epochs%20%3Csup%3E%5B6%5D(%23ts6a)%3C%2Fsup%3E%0A%0A%3E%20The%20Beacon%20Chain%20provides%20the%20heartbeat%20to%20Ethereum%E2%80%99s%20consensus.%20Each%20slot%20is%2012%20seconds%20and%20an%20epoch%20is%2032%20slots%3A%206.4%20minutes.%0A%0A!%5BSlots%20and%20Epochs%5D(%2Fassets%2Fresearch%2FBeacon-Chain-Slots-and-Epochs.png.webp%20%22Slots%20and%20Epochs%22)%0A%0A%23%23%23%20Block%20Proposals%0A%0AWhen%20a%20validator%20is%20nominated%20as%20a%20proposer%20for%20a%20slot%20in%20an%20Epoch%20they%20propose%20a%20block%20gathered%20from%20there%20Ethereum%201%20client.%0A%0AThis%20proposed%20block%20is%20attested%20to%20by%20other%20validators%20who%20have%20been%20assigned%20as%20committe%20members%20for%20this%20slot%3Csup%3E%5B6b%5D(%23ts6b)%3C%2Fsup%3E.%0A%0A%3E%20A%20block%20proposer%20is%20a%20validator%20that%20has%20been%20pseudorandomly%20selected%20to%20build%20a%20block.%0A%3E%0A%3E%20Most%20of%20the%20time%2C%20validators%20are%20attesters%20that%20vote%20on%20blocks.%20These%20votes%20are%20recorded%20in%20the%20Beacon%20Chain%20and%20determine%20the%20head%20of%20the%20Beacon%20Chain.%0A%0A!%5BValidators%20and%20Attestations%5D(%2Fassets%2Fresearch%2FBeacon-Chain-Validators.png%20%22Validators%20and%20Attestations%22)%0A%0A%23%23%23%20Committees%0A%0A%3E%20A%20committee%20is%20a%20group%20of%20validators.%20For%20security%2C%20each%20slot%20has%20committees%20of%20at%20least%20128%20validators.%20An%20attacker%20has%20less%20than%20a%20one%20in%20a%20trillion%20probability%20of%20controlling%20%E2%85%94%20of%20a%20committee.%0A%3E%0A%3E%20The%20concept%20of%20a%20randomness%20beacon%20that%20emits%20random%20numbers%20for%20the%20public%2C%20lends%20its%20name%20to%20the%20Ethereum%20Beacon%20Chain.%20The%20Beacon%20Chain%20enforces%20consensus%20on%20a%20pseudorandom%20process%20called%20RANDAO.%0A%0A!%5BCommittees%5D(%2Fassets%2Fresearch%2FBeacon-Chain-RANDAO.png%20%22Committees%22)%0A%0A%23%23%23%20Attestations%0A%0AThe%20attestation%20lifecyle%3Csup%3E%5B9%5D(%23ts9)%3C%2Fsup%3E%20involves%0A%0A1.%20Generation%20of%20the%20proposed%20Block%0A2.%20Propagation%20of%20the%20block%20to%20committee%20members%20to%20vote%20on%20and%20sign%0A3.%20Aggregation%20of%20the%20votes%20(signatures)%20of%20the%20committee%20members%20by%20Aggregators%0A4.%20Propagation%20of%20the%20aggregated%20attestations%20back%20to%20the%20block%20Proposer%0A5.%20Inclusion%20of%20the%20block%20in%20the%20Beaconchain%0A%0A!%5BAttestation%20Life%20Cycle%5D(%2Fassets%2Fresearch%2FAttestationLifeCycle.png%20%22Attestation%20Life%20Cycle%22)%0A%0A%23%23%23%20Checkpoints%20and%20Finality%3Csup%3E%5B6%5D(%23ts6)%3C%2Fsup%3E%0A%0A%3E%20When%20an%20epoch%20ends%2C%20if%20its%20checkpoint%20has%20garnered%20a%20%E2%85%94%20supermajority%2C%20the%20checkpoint%20gets%20justified.%0A%0A!%5BCheckpoints%5D(%2Fassets%2Fresearch%2FBeacon-Chain-Checkpoints.jpg%20%22Checkpoints%22)%0A%0A%3E%20If%20a%20checkpoint%20B%20is%20justified%20and%20the%20checkpoint%20in%20the%20immediate%20next%20epoch%20becomes%20justified%2C%20then%20B%20becomes%20finalized.%20Typically%2C%20a%20checkpoint%20is%20finalized%20in%20two%20epochs%2C%2012.8%20minutes.%0A%0A!%5BFinality%5D(%2Fassets%2Fresearch%2FBeacon-Chain-Justification-and-Finalization.png%20%22Finality%22)%0A%0A%23%23%23%20Sync%20Committee%20%3Csup%3E%5B10%5D(%23ts10)%3C%2Fsup%3E%0A%0AA%20sync%20committee%20of%20512%20current%20validators%20is%20elected%20every%20255%20epochs%2C%20approximately%20every%2027%20hours%20(see%20%5Bsample%20sync%20comittee%20data%5D(%23sync-committee-latest)).%0AThey%20are%20responsible%20for%20signing%20each%20block%20which%20records%20which%20sync%20committee%20members%20(validtors)%20signed%20the%20block%2C%20held%20in%20%60syncaggregate_bits%60%2C%20and%20creates%20a%20bls%20aggregate%20signature%20held%20in%20%60syncaggregate_signature%60%20(see%20%5Bblock-data%5D(%23block-data-for-slot-5330592)).%0A%0A%60%60%60%0A%20%20%20%20%22syncaggregate_bits%22%3A%20%220xdffffffffffffffffffffffffffffff7fffffffffffffffffffffffffffffffffffffffffffffffffffffffdfffffffffffffffdffffffffffffffffffffffff%22%2C%0A%20%20%20%20%22syncaggregate_participation%22%3A%200.9921875%2C%0A%20%20%20%20%22syncaggregate_signature%22%3A%20%220x95332c55790018eed3d17eada01cb4045348d09137505bc8697eeedaa3800a830ee2c138251850a9577f62a5488419ef0a722579156a177fb3a147017f1077af5d778f46a4cdf815fc450129d135fe5286e16df68333592e4aa45821bde780dd%22%2C%0A%60%60%60%0A%0AThis%20is%20used%20in%20Altair%20Light%20Client%20--%20Sync%20Protocol%3Csup%3E%5B11%5D(%23ts11)%3C%2Fsup%3E%20which%20enables%20the%20beacon%20chain%20to%20be%20light%20client%20friendly%20for%20constrained%20environments%20to%20access%20Ethereum.%0A%0A%23%23%23%20Validator%20Lifecycle%0A%0AFollowing%20is%20an%20overview%20of%20statuses%20for%20validators%20in%20Ethereum%202.0%20phase%200%20%3Csup%3E%5B14%5D(%23ts14)%3C%2Fsup%3E.%0A%0A%3E%201.%20**Deposited**%3A%20the%20validator%20has%20made%20a%20deposit%20and%20has%20registered%20in%20BeaconState.%0A%3E%202.%20**Eligible%20to%20be%20activated%20(Pending)**%3A%20the%20validator%20is%20eligible%20to%20be%20activated.%0A%3E%203.%20**Activated**%3A%20the%20validator%20is%20activated%0A%3E%20%20%20%20-%20_Note%20that%20the%20validator%20may%20be%20%E2%80%9Celigible%20to%20be%20activated%2C%20but%20has%20not%20been%20activated%20yet%E2%80%9D._%0A%3E%204.%20**Slashed**%3A%20the%20validator%20has%20been%20slashed%0A%3E%205.%20**Exited**%3A%20the%20validator%20is%20exited%0A%3E%206.%20**Withdrawable**%3A%20the%20validator%20is%20withdrawable%0A%3E%20%20%20%20-%20_Note%20that%20the%20validator%20will%20be%20able%20to%20withdraw%20to%20EEs%20in%20phase%202_%0A%3E%0A%3E%20_Note%20that%20in%20some%20cases%2C%20a%20validator%20can%20be%20in%20multiple%20statuses%20at%20the%20same%20time%2C%20e.g.%2C%20an%20active%20validator%20may%20be%20%E2%80%9Cactivated%20and%20slashed%E2%80%9D._%0A%0A!%5BValidator%20Status%20Transition%5D(%2Fassets%2Fresearch%2FValidatorStateTransition.png%20%22Validator%20Status%20Transition%22)%0A%0A%23%23%20Light%20Client%20Support%0A%0A**Light%20client%20state%20updates**%0A%0A-%20A%20light%20client%20receives%20objects%20of%20type%20%60LightClientUpdate%60%2C%20%60LightClientFinalityUpdate%60%20and%20%60LightClientOptimisticUpdate%60%3A%0A%20%20-%20**%60update%3A%20LightClientUpdate%60**%3A%20Every%20%60update%60%20triggers%20%60process_light_client_update(store%2C%20update%2C%20current_slot%2C%20genesis_validators_root)%60%20where%20%60current_slot%60%20is%20the%20current%20slot%20based%20on%20a%20local%20clock.%0A%20%20-%20**%60finality_update%3A%20LightClientFinalityUpdate%60**%3A%20Every%20%60finality_update%60%20triggers%20%60process_light_client_finality_update(store%2C%20finality_update%2C%20current_slot%2C%20genesis_validators_root)%60.%0A%20%20-%20**%60optimistic_update%3A%20LightClientOptimisticUpdate%60**%3A%20Every%20%60optimistic_update%60%20triggers%20%60process_light_client_optimistic_update(store%2C%20optimistic_update%2C%20current_slot%2C%20genesis_validators_root)%60.%0A-%20%60process_light_client_store_force_update%60%20MAY%20be%20called%20based%20on%20use%20case%20dependent%20heuristics%20if%20light%20client%20sync%20appears%20stuck.%0A%0A**validate_light_client_update**%0A%0A%60%60%60python%0Adef%20validate_light_client_update(store%3A%20LightClientStore%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20update%3A%20LightClientUpdate%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20current_slot%3A%20Slot%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20genesis_validators_root%3A%20Root)%20-%3E%20None%3A%0A%20%20%20%20%23%20Verify%20sync%20committee%20has%20sufficient%20participants%0A%20%20%20%20sync_aggregate%20%3D%20update.sync_aggregate%0A%20%20%20%20assert%20sum(sync_aggregate.sync_committee_bits)%20%3E%3D%20MIN_SYNC_COMMITTEE_PARTICIPANTS%0A%0A%20%20%20%20%23%20Verify%20update%20does%20not%20skip%20a%20sync%20committee%20period%0A%20%20%20%20assert%20is_valid_light_client_header(update.attested_header)%0A%20%20%20%20update_attested_slot%20%3D%20update.attested_header.beacon.slot%0A%20%20%20%20update_finalized_slot%20%3D%20update.finalized_header.beacon.slot%0A%20%20%20%20assert%20current_slot%20%3E%3D%20update.signature_slot%20%3E%20update_attested_slot%20%3E%3D%20update_finalized_slot%0A%20%20%20%20store_period%20%3D%20compute_sync_committee_period_at_slot(store.finalized_header.beacon.slot)%0A%20%20%20%20update_signature_period%20%3D%20compute_sync_committee_period_at_slot(update.signature_slot)%0A%20%20%20%20if%20is_next_sync_committee_known(store)%3A%0A%20%20%20%20%20%20%20%20assert%20update_signature_period%20in%20(store_period%2C%20store_period%20%2B%201)%0A%20%20%20%20else%3A%0A%20%20%20%20%20%20%20%20assert%20update_signature_period%20%3D%3D%20store_period%0A%0A%20%20%20%20%23%20Verify%20update%20is%20relevant%0A%20%20%20%20update_attested_period%20%3D%20compute_sync_committee_period_at_slot(update_attested_slot)%0A%20%20%20%20update_has_next_sync_committee%20%3D%20not%20is_next_sync_committee_known(store)%20and%20(%0A%20%20%20%20%20%20%20%20is_sync_committee_update(update)%20and%20update_attested_period%20%3D%3D%20store_period%0A%20%20%20%20)%0A%20%20%20%20assert%20(%0A%20%20%20%20%20%20%20%20update_attested_slot%20%3E%20store.finalized_header.beacon.slot%0A%20%20%20%20%20%20%20%20or%20update_has_next_sync_committee%0A%20%20%20%20)%0A%0A%20%20%20%20%23%20Verify%20that%20the%20%60finality_branch%60%2C%20if%20present%2C%20confirms%20%60finalized_header%60%0A%20%20%20%20%23%20to%20match%20the%20finalized%20checkpoint%20root%20saved%20in%20the%20state%20of%20%60attested_header%60.%0A%20%20%20%20%23%20Note%20that%20the%20genesis%20finalized%20checkpoint%20root%20is%20represented%20as%20a%20zero%20hash.%0A%20%20%20%20if%20not%20is_finality_update(update)%3A%0A%20%20%20%20%20%20%20%20assert%20update.finalized_header%20%3D%3D%20LightClientHeader()%0A%20%20%20%20else%3A%0A%20%20%20%20%20%20%20%20if%20update_finalized_slot%20%3D%3D%20GENESIS_SLOT%3A%0A%20%20%20%20%20%20%20%20%20%20%20%20assert%20update.finalized_header%20%3D%3D%20LightClientHeader()%0A%20%20%20%20%20%20%20%20%20%20%20%20finalized_root%20%3D%20Bytes32()%0A%20%20%20%20%20%20%20%20else%3A%0A%20%20%20%20%20%20%20%20%20%20%20%20assert%20is_valid_light_client_header(update.finalized_header)%0A%20%20%20%20%20%20%20%20%20%20%20%20finalized_root%20%3D%20hash_tree_root(update.finalized_header.beacon)%0A%20%20%20%20%20%20%20%20assert%20is_valid_merkle_branch(%0A%20%20%20%20%20%20%20%20%20%20%20%20leaf%3Dfinalized_root%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20branch%3Dupdate.finality_branch%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20depth%3Dfloorlog2(FINALIZED_ROOT_INDEX)%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20index%3Dget_subtree_index(FINALIZED_ROOT_INDEX)%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20root%3Dupdate.attested_header.beacon.state_root%2C%0A%20%20%20%20%20%20%20%20)%0A%0A%20%20%20%20%23%20Verify%20that%20the%20%60next_sync_committee%60%2C%20if%20present%2C%20actually%20is%20the%20next%20sync%20committee%20saved%20in%20the%0A%20%20%20%20%23%20state%20of%20the%20%60attested_header%60%0A%20%20%20%20if%20not%20is_sync_committee_update(update)%3A%0A%20%20%20%20%20%20%20%20assert%20update.next_sync_committee%20%3D%3D%20SyncCommittee()%0A%20%20%20%20else%3A%0A%20%20%20%20%20%20%20%20if%20update_attested_period%20%3D%3D%20store_period%20and%20is_next_sync_committee_known(store)%3A%0A%20%20%20%20%20%20%20%20%20%20%20%20assert%20update.next_sync_committee%20%3D%3D%20store.next_sync_committee%0A%20%20%20%20%20%20%20%20assert%20is_valid_merkle_branch(%0A%20%20%20%20%20%20%20%20%20%20%20%20leaf%3Dhash_tree_root(update.next_sync_committee)%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20branch%3Dupdate.next_sync_committee_branch%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20depth%3Dfloorlog2(NEXT_SYNC_COMMITTEE_INDEX)%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20index%3Dget_subtree_index(NEXT_SYNC_COMMITTEE_INDEX)%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20root%3Dupdate.attested_header.beacon.state_root%2C%0A%20%20%20%20%20%20%20%20)%0A%0A%20%20%20%20%23%20Verify%20sync%20committee%20aggregate%20signature%0A%20%20%20%20if%20update_signature_period%20%3D%3D%20store_period%3A%0A%20%20%20%20%20%20%20%20sync_committee%20%3D%20store.current_sync_committee%0A%20%20%20%20else%3A%0A%20%20%20%20%20%20%20%20sync_committee%20%3D%20store.next_sync_committee%0A%20%20%20%20participant_pubkeys%20%3D%20%5B%0A%20%20%20%20%20%20%20%20pubkey%20for%20(bit%2C%20pubkey)%20in%20zip(sync_aggregate.sync_committee_bits%2C%20sync_committee.pubkeys)%0A%20%20%20%20%20%20%20%20if%20bit%0A%20%20%20%20%5D%0A%20%20%20%20fork_version%20%3D%20compute_fork_version(compute_epoch_at_slot(update.signature_slot))%0A%20%20%20%20domain%20%3D%20compute_domain(DOMAIN_SYNC_COMMITTEE%2C%20fork_version%2C%20genesis_validators_root)%0A%20%20%20%20signing_root%20%3D%20compute_signing_root(update.attested_header.beacon%2C%20domain)%0A%20%20%20%20assert%20bls.FastAggregateVerify(participant_pubkeys%2C%20signing_root%2C%20sync_aggregate.sync_committee_signature)%0A%60%60%60%0A%0A**apply_light_client_update**%0A%0A%60%60%60python%0Adef%20apply_light_client_update(store%3A%20LightClientStore%2C%20update%3A%20LightClientUpdate)%20-%3E%20None%3A%0A%20%20%20%20store_period%20%3D%20compute_sync_committee_period_at_slot(store.finalized_header.beacon.slot)%0A%20%20%20%20update_finalized_period%20%3D%20compute_sync_committee_period_at_slot(update.finalized_header.beacon.slot)%0A%20%20%20%20if%20not%20is_next_sync_committee_known(store)%3A%0A%20%20%20%20%20%20%20%20assert%20update_finalized_period%20%3D%3D%20store_period%0A%20%20%20%20%20%20%20%20store.next_sync_committee%20%3D%20update.next_sync_committee%0A%20%20%20%20elif%20update_finalized_period%20%3D%3D%20store_period%20%2B%201%3A%0A%20%20%20%20%20%20%20%20store.current_sync_committee%20%3D%20store.next_sync_committee%0A%20%20%20%20%20%20%20%20store.next_sync_committee%20%3D%20update.next_sync_committee%0A%20%20%20%20%20%20%20%20store.previous_max_active_participants%20%3D%20store.current_max_active_participants%0A%20%20%20%20%20%20%20%20store.current_max_active_participants%20%3D%200%0A%20%20%20%20if%20update.finalized_header.beacon.slot%20%3E%20store.finalized_header.beacon.slot%3A%0A%20%20%20%20%20%20%20%20store.finalized_header%20%3D%20update.finalized_header%0A%20%20%20%20%20%20%20%20if%20store.finalized_header.beacon.slot%20%3E%20store.optimistic_header.beacon.slot%3A%0A%20%20%20%20%20%20%20%20%20%20%20%20store.optimistic_header%20%3D%20store.finalized_header%0A%60%60%60%0A%0A**Sample%20Implementation%3A%20NEAR%20Rainbow%20Bridge%20Ethereum%20Light%20Client%20Deployed%20on%20NEAR**%0A%0ABridging%20support%20was%20implemented%20by%20NEAR%20under%20%5BEth2-to-Near-relay%3A%20prototype%20implementation%20%23762%0A%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Fpull%2F762)%0A%0A!%5BEthereum%202%20block%20proof%5D(%2Fassets%2Fposts%2F2023-02-05-ethereum-bridging-costs%2FETH_2_0_MMR.jpg%20%22Ethereum%202%20Block%20Proof%22)%0A%0A%3E%20When%20we%20send%20light%20client%20update%20for%20finality%20block%20inside%20light%20client%20update%2C%20we%20also%20send%20Eth1%20execution%20block%20hash%20with%20the%20Merkle%20proof%20of%20include%20to%20Beacon%20Block%20Body.%20Execution%20block%20hash%20you%20can%20find%20at%20BeaconBlockBody.execution_payload.block_hash.%0A%3E%0A%3E%20So%2C%20for%20creating%20Merkle%20proof%2C%20we%20need%20two%20levels%20of%20Merkle%20Tree%2C%20as%20shown%20in%20the%20picture.%20Both%20Merkle%20trees%20you%20can%20find%20in%20beacon_block_body_merkle_tree.rs%20The%20first%20level%20Merkle%20tree%20for%20beacon%20block%20body%20and%20the%20second%20level%20Merkle%20tree%20for%20execution%20payload.%0A%3E%0A%3E%20The%20execution%20block%20hash%20proof%20creation%20you%20can%20find%20in%20execution_block_proof.rs%20First%2C%20we%20build%20two%20Merkle%20trees%20and%20concatenate%20together%20the%20Merkle%20proof%20for%20block_hash%20in%20execution_payload%20and%20the%20Merkle%20proof%20of%20execution_payload%20in%20beacon_block_body.%20The%20final%20Merkle%20proof%20is%20shown%20by%20the%20orange%20vertices%20on%20the%20picture%3B%20the%20orange%20numbers%20in%20the%20picture%20are%20the%20order%20of%20hashes%20in%20the%20proof.%0A%3E%0A%3E%20beacon_block_header_with_execution_data.rs%20contain%20a%20structure%20which%20consists%20of%20beacon_block_header%20and%20correspondent%20execution_block_hash%20with%20Merkle%20proof.%20This%20structure%20is%20created%20for%20finality%20blocks%20in%20a%20light%20client%20update.%0A%0A%23%23%20References%0A%0A**Consensus**%0A%0A-%20%5BGasper%20Consensus%20Whitepaper%5D(https%3A%2F%2Farxiv.org%2Fpdf%2F2003.03052.pdf)%3A%20Combining%20GHOST%20and%20Casper%0A-%20%5Bsigp%20lighthouse%20beacon%20block%5D(https%3A%2F%2Fgithub.com%2Fsigp%2Flighthouse%2Fblob%2Fstable%2Fconsensus%2Ftypes%2Fsrc%2Fbeacon_block.rs%23L7)%3A%20Beacon%20Block%20codebase%20(rust)%0A%0A%3Ca%20name%3D%22bp1%22%3E%5B1%5D%3C%2Fa%3E%20%5BEIP-3675%3A%20Upgrade%20consensus%20to%0AProof-of-Stake%5D(https%3A%2F%2Feips.ethereum.org%2FEIPS%2Feip-3675%23pow-block-processing)%3A%0ASpecification%20of%20the%20consensus%20mechanism%20upgrade%20on%20Ethereum%20Mainnet%20that%0Aintroduces%20Proof-of-Stake.%0A%0A%3Ca%20name%3D%22bp2%22%3E%5B2%5D%3C%2Fa%3E%20%5BEIP-2982%3A%20Serenity%20Phase%0A0%5D(https%3A%2F%2Feips.ethereum.org%2FEIPS%2Feip-2982)%3A%20Phase%200%20of%20the%20release%20schedule%20of%0ASerenity%2C%20a%20series%20of%20updates%20to%20Ethereum%20a%20scalable%2C%20proof-of-stake%20consensus.%0A%0A%3Ca%20name%3D%22bp3%22%3E%5B3%5D%3C%2Fa%3E%20%5BEthreum%20Consensus%20Specs%20Phase%0A0%5D(https%3A%2F%2Fgithub.com%2Fethereum%2Fconsensus-specs%2Ftree%2Fdev%2Fspecs%2Fphase0)%3A%0ASpecifications%20for%20Ethereum%202.0%20Phase%200%20including%0A%5Bbeacon-chain%5D(https%3A%2F%2Fgithub.com%2Fethereum%2Fconsensus-specs%2Fblob%2Fdev%2Fspecs%2Fphase0%2Fbeacon-chain.mdx)%2C%0A%5Bdeposit-contract%5D(https%3A%2F%2Fgithub.com%2Fethereum%2Fconsensus-specs%2Fblob%2Fdev%2Fspecs%2Fphase0%2Fdeposit-contract.mdx)%2C%0A%5Bfork-choice%5D(https%3A%2F%2Fgithub.com%2Fethereum%2Fconsensus-specs%2Fblob%2Fdev%2Fspecs%2Fphase0%2Ffork-choice.mdx)%2C%0A%5Bp2p-interface%5D(https%3A%2F%2Fgithub.com%2Fethereum%2Fconsensus-specs%2Fblob%2Fdev%2Fspecs%2Fphase0%2Fp2p-interface.mdx)%2C%0A%5Bvalidator%5D(https%3A%2F%2Fgithub.com%2Fethereum%2Fconsensus-specs%2Fblob%2Fdev%2Fspecs%2Fphase0%2Fvalidator.mdx)%0Aand%0A%5Bweak-subjectivity%5D(https%3A%2F%2Fgithub.com%2Fethereum%2Fconsensus-specs%2Fblob%2Fdev%2Fspecs%2Fphase0%2Fweak-subjectivity.mdx)%0A%0A%3Ca%20name%3D%22bp4%22%3E%5B6%5D%3C%2Fa%3E%20%5BEthereum%20Consensus%20and%20Execution%20Client%0ADistribution%5D(https%3A%2F%2Fclientdiversity.org%2F%23distribution)%3A%20Percentages%20of%20nodes%0Arunning%20client%20types%20for%20both%20Consensus%20(Prysm%2C%20Lighthours%2C%20Nimbus%2C%20Teku)%20and%0AExecution%20(Geth%2C%20Erigon%2C%20Besu%2C%20Nethermind)%20clients.%0A%0A%3Ca%20name%3D%22bp5%22%3E%5B5%5D%3C%2Fa%3E%20%5Bgo-ethereum%20go%0Adocumentation%5D(https%3A%2F%2Fpkg.go.dev%2Fgithub.com%2Fethereum%2Fgo-ethereum%40v1.10.26)%3A%0ADocumentation%20for%20Go%20Ethereum%2C%20Official%20Golang%20implementation%20of%20the%20Ethereum%0Aprotocol.%20Which%20is%20an%20execution%20chain%20implementation.%0A%0A%3Ca%20name%3D%22bp6%22%3E%5B6%5D%3C%2Fa%3E%20%5Bprysm%20go%0Adocumentation%5D(https%3A%2F%2Fpkg.go.dev%2Fgithub.com%2Fprysmaticlabs%2Fprysm%2Fv3%40v3.1.2)%3A%0ADocumentation%20for%20prysm%2C%20An%20Ethereum%20Consensus%20Implementation%20Written%20in%20Go.%20A%0Abeacon-chain%20immplementation.%20Also%20see%20%5BPrysm%0ADocumentation%5D(https%3A%2F%2Fdocs.prylabs.network%2Fdocs%2Fgetting-started)%0A%0A%3Ca%20name%3D%22bp7%22%3E%5B7%5D%3C%2Fa%3E%20%5Blighthouse%0Adocumentation%5D(https%3A%2F%2Fpkg.go.dev%2Fgithub.com%2Fprysmaticlabs%2Fprysm%2Fv3%40v3.1.2)%3A%0ADocumentation%20for%20lighthouse%2C%20written%20in%20Rust.%20A%20beacon-chain%20immplementation.%0A%0A%3Ca%20name%3D%22bp8%22%3E%5B8%5D%3C%2Fa%3E%20%5BEtherum%202.0%20Validators%0AOverview%5D(https%3A%2F%2Fbeaconcha.in%2Fvalidators)%3A%20Live%20Monitoring%20of%20Ethreum%202.0%0AValidators%20from%20beachoncha.in%0A%0A%3Ca%20name%3D%22bp9%22%3E%5B9%5D%3C%2Fa%3E%20%5BUpgrading%20Ethereum%5D(https%3A%2F%2Feth2book.info%2Fbellatrix%2F)%3A%20A%0Atechnical%20handbook%20on%20Ethereum's%20move%20to%20proof%20of%20stake%20and%20beyond%20Edition%200.2%3A%0ABellatrix%20%5BWIP%5D%20by%20Ben%20Edgington.%0A%0A%3Ca%20name%3D%22bp10%22%3E%5B9%5D%3C%2Fa%3E%20%5BAnnotated%20Ethereum%0ARoadmap%5D(https%3A%2F%2Fnotes.ethereum.org%2F%40domothy%2Froadmap)%3A%20an%20entry%20point%20for%20the%0Avarious%20items%20on%20the%20Ethereum%20roadmap%2C%20with%20a%20quick%20summary%20along%20with%20links%20for%0Athose%20who%20want%20to%20dive%20deeper.%0A%0A%3Ca%20name%3D%22bp11%22%3E%5B10%5D%3C%2Fa%3E%20%5BShanghai%2FCapella%0AUpgrade%5D(https%3A%2F%2Fconsensys.net%2Fshanghai-capella-upgrade%2F)%3A%20the%20first%0Asimultaneous%20upgrade%20of%20Ethereum%E2%80%99s%20execution%20layer%20and%20consensus%20layer%2C%20and%20is%0Ahighly%20anticipated%20because%20it%20will%20enable%20staked%20ETH%20withdrawals.%0A%0A**Signing**%0A%0A-%20%5Bsigp%20lighthouse%20bls%20signing%5D(https%3A%2F%2Fgithub.com%2Fsigp%2Flighthouse%2Fblob%2Fstable%2Fcrypto%2Fbls%2Fsrc%2Flib.rs)%3A%20BLS%20signing%20codebase%20(rust)%0A%0A**Staking**%0A%0A-%20%5BEthereum%20Staking%5D(https%3A%2F%2Fethereum.org%2Fen%2Fstaking%2F)%3A%20Staking%20User%20Interface%0A-%20%5BApp%20Stakewise%5D(https%3A%2F%2Fapp.stakewise.io%2F)%3A%20Ethreeum%20Staking%20Application%0A-%20%5BPROOF-OF-STAKE%20(POS)%5D(https%3A%2F%2Fethereum.org%2Fen%2Fdevelopers%2Fdocs%2Fconsensus-mechanisms%2Fpos%2F)%3A%20Ethereum%20Proof%20of%20Stake%20Documentation%0A%0A**References%20Technical%20Summary**%0A%0A%3Ca%20name%3D%22ts1%22%3E%5B1%5D%3C%2Fa%3E%20%5BEthereum%20EVM%0Aillustrated%5D(https%3A%2F%2Ftakenobu-hs.github.io%2Fdownloads%2Fethereum_evm_illustrated.pdf)%3A%0AA%20technical%20overview%20of%20Ethereum%20including%20state%2C%20accounts%2C%20transactions%20and%0Amessages%20as%20well%20as%20the%20EVM.%20%5BAppendix%20E%5D(%23appendix-e-data-structures)%20has%20links%0Ato%20type%20definitions%20for%20blocks%2C%20transactions%2C%20state%20etc%20in%20geth.%0A%0A%3Ca%20name%3D%22ts2%22%3E%5B2%5D%3C%2Fa%3E%20%5BBlocks%5D(https%3A%2F%2Fethereum.org%2Fen%2Fdevelopers%2Fdocs%2Fblocks%2F)%3A%0ABlock%20data%20definitions%20including%20attestations%20from%20ethereum.org%0A%0A%3Ca%20name%3D%22ts3%22%3E%5B3%5D%3C%2Fa%3E%20%5Beth1%20block%0Aproposal%5D(https%3A%2F%2Fhackmd.io%2F%40flashbots%2Fmev-in-eth2%23eth1-block-proposal)%3A%0ATechnical%20walkthrough%20of%20how%20blocks%20are%20proposed%20and%20potential%20MEV%20opportunities%0Afrom%20FlashBots.%0A%0A%3Ca%20name%3D%22ts4%22%3E%5B4%5D%3C%2Fa%3E%20%5BAssemble%0ABlock%5D(https%3A%2F%2Fgithub.com%2Fethereum%2Frayonism%2Fblob%2Fmaster%2Fspecs%2Fmerge.md%23assemble-block)%3A%0AEthereum%20Specification%20for%20block%20Assembly%20as%20part%20of%20Rayonism%20--%20The%20Merge%20spec.%0A%0A%3Ca%20name%3D%22ts5%22%3E%5B5%5D%3C%2Fa%3E%20%5BPrysm%20running%20a%0Anode%5D(https%3A%2F%2Fdocs.prylabs.network%2Fdocs%2Finstall%2Finstall-with-script)%3A%0AOperational%20procedures%20for%20Validators%20by%20Prysm.%20Note%20validators%20run%20both%20the%0Abeacon%20chain(consensus)%20and%20a%20geth%20node(execution)%0A%0A%3Ca%20name%3D%22ts6%22%3E%5B6%5D%3C%2Fa%3E%5BThe%20Beacon%20Chain%20Ethereum%202.0%20explainer%20you%20need%20to%20read%0Afirst%5D(https%3A%2F%2Fethos.dev%2Fbeacon-chain)%3A%20Detailed%20walk%20through%20og%20Ethereum%202.0%0Ablock%20production%20including%20slots%2C%20epochs%2C%20validators%2C%20commitees%20and%20finality.%0A%0A%3Ca%20name%3D%22ts6a%22%3E%5B6%5D%3C%2Fa%3E%5BThe%20Beacon%20Chain%20Ethereum%202.0%20explainer%20you%20need%20to%20read%0Afirst%5D(https%3A%2F%2Fethos.dev%2Fbeacon-chain)%3A%20Detailed%20walk%20through%20og%20Ethereum%202.0%0Ablock%20production%20including%20slots%2C%20epochs%2C%20validators%2C%20commitees%20and%20finality.%0A%0A%3Ca%20name%3D%22ts6b%22%3E%5B6%5D%3C%2Fa%3E%5BThe%20Beacon%20Chain%20Ethereum%202.0%20explainer%20you%20need%20to%20read%0Afirst%5D(https%3A%2F%2Fethos.dev%2Fbeacon-chain)%3A%20Detailed%20walk%20through%20og%20Ethereum%202.0%0Ablock%20production%20including%20slots%2C%20epochs%2C%20validators%2C%20commitees%20and%20finality.%0A%0A%3Ca%20name%3D%22ts7%22%3E%5B7%5D%3C%2Fa%3E%20%5BEtherum%202.0%20Validators%0AOverview%5D(https%3A%2F%2Fbeaconcha.in%2Fvalidators)%3A%20Live%20Monitoring%20of%20Ethreum%202.0%0AValidators%20from%20beachoncha.in%0A%0A%3Ca%20name%3D%22ts8%22%3E%5B8%5D%3C%2Fa%3E%5BBLS%0ASignatures%5D(https%3A%2F%2Feth2book.info%2Fbellatrix%2Fpart2%2Fbuilding_blocks%2Fsignatures%2F)%3A%0ADetailed%20walkthrough%20of%20BLS%20Signatures%20and%20how%20they%20can%20be%20used%20in%20aggregation.%0A%0A%3Ca%20name%3D%22ts9%22%3E%5B8%5D%3C%2Fa%3E%5BAttestation%20Inclusion%0ALifecycle%5D(https%3A%2F%2Fkb.beaconcha.in%2Fattestation%23attestation-inclusion-lifecycle)%3A%0AHigh%20Level%20overview%20of%20the%20attestation%20life%20cycle%20including%20geeration%2C%0Apropogation%2C%20aggregation%20and%20inclusion.Attest%0A%0A%3Ca%20name%3D%22ts10%22%3E%5Bts10%5D%3C%2Fa%3E%20%5BBeacon%20Chain%20Proposal%3A%20Sync%0AComittees%5D(https%3A%2F%2Fnotes.ethereum.org%2F%40vbuterin%2FHF1_proposal%23Sync-committees)%3A%0AFor%20each%20period%20(~27%20hours)%2C%201024%20validators%20are%20randomly%20selected%20to%20be%20part%20of%0Athe%20sync%20committee%20during%20that%20period.%20Validators%20in%20the%20sync%20committee%20would%0Apublish%20signatures%20attesting%20to%20the%20current%20head.%20These%20signatures%20would%20be%0Abroadcasted%20as%20part%20of%20a%20LightClientUpdate%20object%20that%20could%20help%20light%20clients%0Afind%20the%20head%2C%20and%20would%20be%20included%20in%20the%20beacon%20chain%20to%20be%20rewarded.%0A%0A%3Ca%20name%3D%22ts11%22%3E%5Bts11%5D%3C%2Fa%3E%20%5BAltair%20Light%20Client%20--%20Sync%0AProtocol%5D(https%3A%2F%2Fnotes.ethereum.org%2F%40vbuterin%2FHF1_proposal%23Sync-committees)%3A%0AThis%20document%20suggests%20a%20minimal%20light%20client%20design%20for%20the%20beacon%20chain%20that%0Auses%20sync%20committees.%0A%0A%3Ca%20name%3D%22ts12%22%3E%5Bts12%5D%3C%2Fa%3E%20%5BEthereum%20Builder%20Specifications%3A%20Honest%0AValidator%5D(https%3A%2F%2Fgithub.com%2Fethereum%2Fbuilder-specs%2Fblob%2Fmain%2Fspecs%2Fvalidator.mdx)%3A%0Aexplains%20the%20way%20in%20which%20a%20beacon%20chain%20validator%20is%20expected%20to%20use%20the%0ABuilder%20spec%20to%20participate%20in%20an%20external%20builder%20network.%0A%0A%3Ca%20name%3D%22ts13%22%3E%5Bts13%5D%3C%2Fa%3E%20%5BFlashbots%3A%0Amev-boost%5D(https%3A%2F%2Fgithub.com%2Fflashbots%2Fmev-boost)%3A%20open%20source%20middleware%20run%0Aby%20validators%20to%20access%20a%20competitive%20block-building%20market.%0A%0A%3Ca%20name%3D%22ts14%22%3E%5Bts14%5D%3C%2Fa%3E%20%5BA%20note%20on%20Ethereum%202.0%20phase%200%20validator%0Alifecycle%5D(https%3A%2F%2Fnotes.ethereum.org%2F7CFxjwMgQSWOHIxLgJP2Bw%23A-note-on-Ethereum-20-phase-0-validator-lifecycle)%3A%0Adescribes%20the%20concept%20of%20validator%20status%20epochs%20and%20the%20cases%20of%20validator%0Alifecycle%20in%20the%20view%20of%20%E2%80%9Cvalidator%20status%20transition%E2%80%9D%20in%20phase%200.%0A%0A**Additional**%0A%0A%23%23%20Appendices%0A%0A%23%23%23%20Appendix%20A%3A%20Ethreum%202.0%20Technical%20Deep%20Dive%0A%0A%23%23%23%23%20Block%20Production%0A%0A**Process%20Flow**%0A%0A-%20Transactions%20are%20placed%20in%20%5Btxpool%5D(https%3A%2F%2Fgithub.com%2Fethereum%2Fgo-ethereum%2Ftree%2Fmaster%2Fcore%2Ftxpool)%0A-%20The%20transaction%20pool%20is%20read%20and%20%5Bblocks%5D(https%3A%2F%2Fgithub.com%2Fethereum%2Fgo-ethereum%2Fblob%2Frelease%2F1.9%2Fcore%2Ftypes%2Fblock.go%23L169)%20are%20produced%20by%20the%20%5Bminer%5D(https%3A%2F%2Fgithub.com%2Fethereum%2Fgo-ethereum%2Fblob%2Fmaster%2Fminer%2Fminer.go)%0A-%20Blocks%20Headers%20get%20forwarded%20to%20the%20Beacon%20chain%20once%20they%20pass%20%5Bbeacon%20consensus%5D(https%3A%2F%2Fgithub.com%2Fethereum%2Fgo-ethereum%2Fblob%2Fmaster%2Fconsensus%2Fbeacon%2Fconsensus.go)%0A-%20The%20Beacon%20chain%20embeds%20the%20EthChain%20Header%20into%20a%20%5BBeaconBlock%5D(https%3A%2F%2Fgithub.com%2Fprysmaticlabs%2Fprysm%2Fblob%2Fdevelop%2Fconsensus-types%2Fblocks%2Ftypes.go%23L43)%0A%0A%23%23%23%23%20Consensus%20and%20Finality%0A%0AAttestation%20Process%20Flow%0A%0A-%20Proposing%20Block%0A-%20Signing%20Blocks%0A-%20Aggregated%20Attestation%20generation%0A-%20Block%20Proposal%20and%20Inclusion%20of%20Attestation%0A-%20The%20%5BSignedBeaconBlock%5D(https%3A%2F%2Fgithub.com%2Fprysmaticlabs%2Fprysm%2Fblob%2Fdevelop%2Fconsensus-types%2Fblocks%2Ftypes.go%23L72)%20is%20added%20to%20the%20chain%0A%0AAttestations%20Block(LMD%20Ghost%20Vote)%20and%20Epoch%20Checkpoints%20(FFG%20Votes)%0A%0A-%20The%20validators%20in%20the%20committee%20attest%20to%20the%20validity%20of%20the%20block%20(LMD%20Ghost%20Vote)%0A-%20The%20validators%20in%20the%20comittee%20attest%20to%20the%20first%20block%20in%20the%20Epoch%20(FFG%20Vote)%0A%0AFrom%20%5BAttestations%2C%20ethereum.org%5D(https%3A%2F%2Fethereum.org%2Fen%2Fdevelopers%2Fdocs%2Fconsensus-mechanisms%2Fpos%2Fattestations)%0A%0A%3E%20Every%20epoch%20(6.4%20minutes)%20a%20validator%20proposes%20an%20attestation%20to%20the%20network.%20The%20attestation%20is%20for%20a%20specific%20slot%20in%20the%20epoch.%20The%20purpose%20of%20the%20attestation%20is%20to%20vote%20in%20favor%20of%20the%20validator's%20view%20of%20the%20chain%2C%20in%20particular%20the%20most%20recent%20justified%20block%20and%20the%20first%20block%20in%20the%20current%20epoch%20(known%20as%20source%20and%20target%20checkpoints).%20This%20information%20is%20combined%20for%20all%20participating%20validators%2C%20enabling%20the%20network%20to%20reach%20consensus%20about%20the%20state%20of%20the%20blockchain.%0A%3E%0A%3E%20The%20attestation%20contains%20the%20following%20components%3A%0A%3E%0A%3E%20-%20aggregation_bits%3A%20a%20bitlist%20of%20validators%20where%20the%20position%20maps%20to%20the%20validator%20index%20in%20their%20committee%3B%20the%20value%20(0%2F1)%20indicates%20whether%20the%20validator%20signed%20the%20data%20(i.e.%20whether%20they%20are%20active%20and%20agree%20with%20the%20block%20proposer)%0A%3E%20-%20data%3A%20details%20relating%20to%20the%20attestation%2C%20as%20defined%20below%0A%3E%20-%20signature%3A%20a%20BLS%20signature%20that%20aggregates%20the%20signatures%20of%20individual%20validators%0A%3E%0A%3E%20The%20first%20task%20for%20an%20attesting%20validator%20is%20to%20build%20the%20data.%20The%20data%20contains%20the%20following%20information%3A%0A%3E%0A%3E%20-%20slot%3A%20The%20slot%20number%20that%20the%20attestation%20refers%20to%0A%3E%20-%20index%3A%20A%20number%20that%20identifies%20which%20committee%20the%20validator%20belongs%20to%20in%20a%20given%20slot%0A%3E%20-%20beacon_block_root%3A%20Root%20hash%20of%20the%20block%20the%20validator%20sees%20at%20the%20head%20of%20the%20chain%20(the%20result%20of%20applying%20the%20fork-choice%20algorithm)%0A%3E%20-%20source%3A%20Part%20of%20the%20finality%20vote%20indicating%20what%20the%20validators%20see%20as%20the%20most%20recent%20justified%20block%0A%3E%20-%20target%3A%20Part%20of%20the%20finality%20vote%20indicating%20what%20the%20validators%20see%20as%20the%20first%20block%20in%20the%20current%20epoch%0A%3E%0A%3E%20Once%20the%20data%20is%20built%2C%20the%20validator%20can%20flip%20the%20bit%20in%20aggregation_bits%20corresponding%20to%20their%20own%20validator%20index%20from%200%20to%201%20to%20show%20that%20they%20participated.%0A%3E%0A%3E%20Finally%2C%20the%20validator%20signs%20the%20attestation%20and%20broadcasts%20it%20to%20the%20network.%0A%0A**Technical%20Details**%0A%0AFollowing%20is%20an%20overview%20of%20the%20state%20structure%20and%20logic%20for%20generating%20committees%20and%20aggregating%20attestations.%20For%20data%20structures%2C%20please%20see%20%5BBeacon%20State%20Data%20Structures%20from%20Prysm%5D(%23beacon-state-data-structures-from-prysm)%20and%20%5Bweb3signer_types%20from%20prysm%5D(%23web3signer_types-from-prysm).%0A%0A%5BBeaconState%5D(https%3A%2F%2Fpkg.go.dev%2Fgithub.com%2Fprysmaticlabs%2Fprysm%2Fv3%40v3.1.2%2Fbeacon-chain%2Fstate%23BeaconState)%20contains%20both%20a%20%5BReadOnlyBeaconState%5D(https%3A%2F%2Fpkg.go.dev%2Fgithub.com%2Fprysmaticlabs%2Fprysm%2Fv3%40v3.1.2%2Fbeacon-chain%2Fstate%23ReadOnlyBeaconState)%20and%20a%20%5BWriteOnlyBeaconState%5D(https%3A%2F%2Fpkg.go.dev%2Fgithub.com%2Fprysmaticlabs%2Fprysm%2Fv3%40v3.1.2%2Fbeacon-chain%2Fstate%23WriteOnlyBeaconState)%20wich%20contain%20%5BReadOnlyValidators%5D(https%3A%2F%2Fpkg.go.dev%2Fgithub.com%2Fprysmaticlabs%2Fprysm%2Fv3%40v3.1.2%2Fbeacon-chain%2Fstate%23ReadOnlyValidators)%20and%20%5BReadOnlyRandaoMixes%5D(https%3A%2F%2Fpkg.go.dev%2Fgithub.com%2Fprysmaticlabs%2Fprysm%2Fv3%40v3.1.2%2Fbeacon-chain%2Fstate%23ReadOnlyRandaoMixes)%20and%20%5BWriteOnlyValidators%5D(https%3A%2F%2Fpkg.go.dev%2Fgithub.com%2Fprysmaticlabs%2Fprysm%2Fv3%40v3.1.2%2Fbeacon-chain%2Fstate%23WriteOnlyValidators)%20and%20%5BWriteOnlyRandaoMixes%5D(https%3A%2F%2Fpkg.go.dev%2Fgithub.com%2Fprysmaticlabs%2Fprysm%2Fv3%40v3.1.2%2Fbeacon-chain%2Fstate%23WriteOnlyRandaoMixes)%20respectively.%0A%0AAt%20the%20beginning%20of%20each%20epoch%20%5Bfunc%20ProcessRandaoMixesReset%5D(https%3A%2F%2Fpkg.go.dev%2Fgithub.com%2Fprysmaticlabs%2Fprysm%2Fv3%40v3.1.2%2Fbeacon-chain%2Fcore%2Fepoch%23ProcessRandaoMixesReset)%20processes%20the%20final%20updates%20to%20RANDAO%20mix%20during%20epoch%20processing.%20This%20calls%20%5BRandaoMix%5D(https%3A%2F%2Fpkg.go.dev%2Fgithub.com%2Fprysmaticlabs%2Fprysm%2Fv3%40v3.1.2%2Fbeacon-chain%2Fcore%2Fhelpers%23RandaoMix)%20which%20returns%20the%20randao%20mix%20(xor'ed%20seed)%20of%20a%20given%20slot.%20It%20is%20used%20to%20shuffle%20validators.%0A%0AFollowing%20are%20sample%20mixes%20generated%20from%20%5Bfunc%20TestRandaoMix_OK%5D(https%3A%2F%2Fgithub.com%2Fprysmaticlabs%2Fprysm%2Fblob%2Fv3.1.2%2Fbeacon-chain%2Fcore%2Fhelpers%2Frandao_test.go%23L16)%20by%20adding%20the%20statement%20%60fmt.Printf(%22mix%3A%20%25v%5Cn%22%2C%20mix)%60%0A%0A%60%60%60%0Amix%3A%20%5B10%200%200%200%200%200%200%200%200%200%200%200%200%200%200%200%200%200%200%200%200%200%200%200%200%200%200%200%200%200%200%200%5D%0Amix%3A%20%5B40%209%200%200%200%200%200%200%200%200%200%200%200%200%200%200%200%200%200%200%200%200%200%200%200%200%200%200%200%200%200%200%5D%0Amix%3A%20%5B159%20134%200%200%200%200%200%200%200%200%200%200%200%200%200%200%200%200%200%200%200%200%200%200%200%200%200%200%200%200%200%200%5D%0A%60%60%60%0A%0AThe%20shuffle%20functions%20consist%20of%0A%0A-%20%5Bfunc%20ShuffleList%5D(https%3A%2F%2Fpkg.go.dev%2Fgithub.com%2Fprysmaticlabs%2Fprysm%2Fv3%40v3.1.2%2Fbeacon-chain%2Fcore%2Fhelpers%23ShuffleList)%3A%20returns%20list%20of%20shuffled%20indexes%20in%20a%20pseudorandom%20permutation%20%60p%60%20of%20%600...list_size%20-%201%60%20with%20%E2%80%9Cseed%E2%80%9C%20as%20entropy.%20We%20utilize%20'swap%20or%20not'%20shuffling%20in%20this%20implementation%3B%20we%20are%20allocating%20the%20memory%20with%20the%20seed%20that%20stays%20constant%20between%20iterations%20instead%20of%20reallocating%20it%20each%20iteration%20as%20in%20the%20spec.%20This%20implementation%20is%20based%20on%20the%20original%20implementation%20from%20protolambda%2C%20https%3A%2F%2Fgithub.com%2Fprotolambda%2Feth2-shuffle%0A%0A%20%20Following%20is%20an%20example%20of%20a%20shuffled%20list%20generated%20from%20%5BTestShuffleList_OK%5D(https%3A%2F%2Fgithub.com%2Fprysmaticlabs%2Fprysm%2Fblob%2Fv3.1.2%2Fbeacon-chain%2Fcore%2Fhelpers%2Fshuffle_test.go%23L25)%0A%0A%20%20%60%60%60%0A%20%20list1%3A%20%5B0%201%202%203%204%205%206%207%208%209%5D%0A%20%20seed1%3A%20%5B1%20128%2012%200%200%200%200%200%200%200%200%200%200%200%200%200%200%200%200%200%200%200%200%200%200%200%200%200%200%200%200%200%5D%0A%20%20shuffledList1%3A%20%5B0%207%208%206%203%209%204%205%202%201%5D%0A%20%20%60%60%60%0A%0A-%20%5Bfunc%20ShuffleIndex%5D(https%3A%2F%2Fpkg.go.dev%2Fgithub.com%2Fprysmaticlabs%2Fprysm%2Fv3%40v3.1.2%2Fbeacon-chain%2Fcore%2Fhelpers%23ShuffledIndex)%3A%20returns%20%60p(index)%60%20in%20a%20pseudorandom%20permutation%20%60p%60%20of%20%600...list_size%20-%201%60%20with%20%E2%80%9Cseed%E2%80%9C%20as%20entropy.%20We%20utilize%20'swap%20or%20not'%20shuffling%20in%20this%20implementation%3B%20we%20are%20allocating%20the%20memory%20with%20the%20seed%20that%20stays%20constant%20between%20iterations%20instead%20of%20reallocating%20it%20each%20iteration%20as%20in%20the%20spec.%20This%20implementation%20is%20based%20on%20the%20original%20implementation%20from%20protolambda%2C%20https%3A%2F%2Fgithub.com%2Fprotolambda%2Feth2-shuffle%0A%0A-%20%5Bfunc%20ShuffleIndices%5D(https%3A%2F%2Fpkg.go.dev%2Fgithub.com%2Fprysmaticlabs%2Fprysm%2Fv3%40v3.1.2%2Fbeacon-chain%2Fcore%2Fhelpers%23ShuffledIndices)%3A%20ShuffledIndices%20uses%20input%20beacon%20state%20and%20returns%20the%20shuffled%20indices%20of%20the%20input%20epoch%2C%20the%20shuffled%20indices%20then%20can%20be%20used%20to%20break%20up%20into%20committees.%0A%0ACommittes%20are%20formed%20using%20functions%20from%20%5Bbeacon_comittee.go%5D(https%3A%2F%2Fgithub.com%2Fprysmaticlabs%2Fprysm%2Fblob%2Fv3.1.2%2Fbeacon-chain%2Fcore%2Fhelpers%2Fbeacon_committee.go)%0A%0A-%20%5Bfunc%20BeaconComittee%5D(https%3A%2F%2Fpkg.go.dev%2Fgithub.com%2Fprysmaticlabs%2Fprysm%2Fv3%40v3.1.2%2Fbeacon-chain%2Fcore%2Fhelpers%23BeaconCommittee)%3A%20returns%20the%20beacon%20committee%20of%20a%20given%20slot%20and%20committee%20index.%20The%20validator%20indices%20and%20seed%20are%20provided%20as%20an%20argument%20rather%20than%20an%20imported%20implementation%20from%20the%20spec%20definition.%20Having%20them%20as%20an%20argument%20allows%20for%20cheaper%20computation%20run%20time.%20(This%20is%20an%20optomized%20version%20of%20%5Bfunc%20BeaconComitteFromState%5D(https%3A%2F%2Fpkg.go.dev%2Fgithub.com%2Fprysmaticlabs%2Fprysm%2Fv3%40v3.1.2%2Fbeacon-chain%2Fcore%2Fhelpers%23BeaconCommitteeFromState))%0A%0A%20%20Following%20is%20an%20example%20of%20a%20%60beaconComittee%60%20generated%20by%20adding%20the%20following%20lines%20to%20%5BTestBeaconCommitteeFromState_UpdateCacheForPreviousEpoch%5D(https%3A%2F%2Fgithub.com%2Fprysmaticlabs%2Fprysm%2Fblob%2Fv3.1.2%2Fbeacon-chain%2Fcore%2Fhelpers%2Fbeacon_committee_test.go%23L574)%3A%0A%0A%20%20%60%60%60%0A%20%20var%20beaconCommittee%20%5B%5Dtypes.ValidatorIndex%0A%20%20beaconCommittee%2C%20err%20%3D%20BeaconCommitteeFromState(context.Background()%2C%20state%2C%201%20%2F_previous%20epoch_%2F%2C%200)%0A%20%20fmt.Printf(%22beaconComittee%3A%20%25%2Bv%5Cn%22%2C%20beaconCommittee)%0A%20%20%60%60%60%0A%0A%20%20Result%0A%0A%20%20%60%60%60%0A%20%20beaconComittee%3A%20%5B160%20338%20313%20307%20320%20324%2045%20469%20196%20303%2023%2014%2097%20312%20126%20488%5D%0A%20%20%60%60%60%0A%0A-%20%5Bfunc%20CommitteeAssignments%5D(https%3A%2F%2Fpkg.go.dev%2Fgithub.com%2Fprysmaticlabs%2Fprysm%2Fv3%40v3.1.2%2Fbeacon-chain%2Fcore%2Fhelpers%23CommitteeAssignments)%3A%20is%20a%20map%20of%20validator%20indices%20pointing%20to%20the%20appropriate%20committee%20assignment%20for%20the%20given%20epoch.%0A%20%201.%20Determine%20the%20proposer%20validator%20index%20for%20each%20slot.%0A%20%202.%20Compute%20all%20committees.%0A%20%203.%20Determine%20the%20attesting%20slot%20for%20each%20committee.%0A%20%204.%20Construct%20a%20map%20of%20validator%20indices%20pointing%20to%20the%20respective%20committees.%0A%0A%20%20Following%20is%20an%20example%20of%20%60commitees%60%20generated%20by%20adding%20the%20following%20lines%20to%20%5BTestComputeCommittee_WithoutCache%5D(https%3A%2F%2Fgithub.com%2Fprysmaticlabs%2Fprysm%2Fblob%2Fv3.1.2%2Fbeacon-chain%2Fcore%2Fhelpers%2Fbeacon_committee_test.go%23L23)%0A%0Acommittees%2C%20err%20%3A%3D%20computeCommittee(indices%2C%20seed%2C%200%2C%201%20%2F_%20Total%20committee_%2F)%0A%0A%60%60%60%0A%0Afmt.Printf(%22committees%3A%20%25%2Bv%5Cn%22%2C%20committees)%0A%60%60%60%0A%0A%20%20%20%20%3Cdetails%3E%0A%20%20%20%20%3Csummary%3Eresult%3C%2Fsummary%3E%0A%0A%20%20%20%20%60%60%60%0A%20%20%20%20committeesdetails%3E%0A%0AAttestations%20are%20managed%20using%20functions%20from%20%5Battestation.go%5D(https%3A%2F%2Fgithub.com%2Fprysmaticlabs%2Fprysm%2Fblob%2Fv3.1.2%2Fbeacon-chain%2Fcore%2Fhelpers%2Fattestation.go)%0A%0A-%20%5Bfunc%20ValidateNilAttestation%5D(https%3A%2F%2Fpkg.go.dev%2Fgithub.com%2Fprysmaticlabs%2Fprysm%2Fv3%40v3.1.2%2Fbeacon-chain%2Fcore%2Fhelpers%23ValidateNilAttestation)%3A%20checks%20if%20any%20composite%20field%20of%20input%20attestation%20is%20nil.%20Access%20to%20these%20nil%20fields%20will%20result%20in%20run%20time%20panic%2C%20it%20is%20recommended%20to%20run%20these%20checks%20as%20first%20line%20of%20defense.%0A-%20%5Bfunc%20ValidateSlotTargetEpoch%5D(https%3A%2F%2Fpkg.go.dev%2Fgithub.com%2Fprysmaticlabs%2Fprysm%2Fv3%40v3.1.2%2Fbeacon-chain%2Fcore%2Fhelpers%23ValidateSlotTargetEpoch)%3A%20ValidateSlotTargetEpoch%20checks%20if%20attestation%20data's%20epoch%20matches%20target%20checkpoint's%20epoch.%20It%20is%20recommended%20to%20run%20%60ValidateNilAttestation%60%20first%20to%20ensure%20%60data.Target%60%20can't%20be%20nil.%0A-%20%5Bfunc%20IsAggregator%5D(https%3A%2F%2Fpkg.go.dev%2Fgithub.com%2Fprysmaticlabs%2Fprysm%2Fv3%40v3.1.2%2Fbeacon-chain%2Fcore%2Fhelpers%23IsAggregator)%3A%20IsAggregator%20returns%20true%20if%20the%20signature%20is%20from%20the%20input%20validator.%20The%20committee%20count%20is%20provided%20as%20an%20argument%20rather%20than%20imported%20implementation%20from%20spec.%20Having%20committee%20count%20as%20an%20argument%20allows%20cheaper%20computation%20at%20run%20time.%0A-%20%5Bfunc%20AggregateSignature%5D(https%3A%2F%2Fpkg.go.dev%2Fgithub.com%2Fprysmaticlabs%2Fprysm%2Fv3%40v3.1.2%2Fbeacon-chain%2Fcore%2Fhelpers%23AggregateSignature)%3A%20returns%20the%20aggregated%20signature%20of%20the%20input%20attestations.%0A%0A%20%20Spec%20pseudocode%20definition%3A%0A%0A%20%20%60%60%60%0A%20%20def%20get_aggregate_signature(attestations%3A%20Sequence%5BAttestation%5D)%20-%3E%20BLSSignature%3A%0A%20%20signatures%20%3D%20%5Battestation.signature%20for%20attestation%20in%20attestations%5D%0A%20%20return%20bls.Aggregate(signatures)%0A%20%20%60%60%60%0A%0A%20%20Following%20is%20an%20example%20aggregrated%20signature%20by%20adding%20the%20following%20lines%20to%20%5BTestAttestation_AggregateSignature%5D(https%3A%2F%2Fgithub.com%2Fprysmaticlabs%2Fprysm%2Fblob%2Fv3.1.2%2Fbeacon-chain%2Fcore%2Fhelpers%2Fattestation_test.go%23L48)%0A%0A%20%20%60%60%60%0A%20%20aggSig%2C%20err%20%3A%3D%20helpers.AggregateSignature(atts)%0A%20%20fmt.Printf(%22aggSig%3A%20%25%2Bv%5Cn%22%2C%20aggSig)%0A%20%20%60%60%60%0A%0A%20%20Result%0A%0A%20%20%60%60%60%0A%20%20%20%20%20%20aggSig%3A%20%26%7Bs%3A0xc0003fe000%7D%0A%20%20%60%60%60%0A%0A-%20%5Bfunc%20IsAggregated%5D(https%3A%2F%2Fpkg.go.dev%2Fgithub.com%2Fprysmaticlabs%2Fprysm%2Fv3%40v3.1.2%2Fbeacon-chain%2Fcore%2Fhelpers%23IsAggregated)%3A%20IsAggregated%20returns%20true%20if%20the%20attestation%20is%20an%20aggregated%20attestation%2C%20false%20otherwise.%0A%0A-%20%5Bfunc%20ComputeSubnetForAttestation%5D(https%3A%2F%2Fpkg.go.dev%2Fgithub.com%2Fprysmaticlabs%2Fprysm%2Fv3%40v3.1.2%2Fbeacon-chain%2Fcore%2Fhelpers%23ComputeSubnetForAttestation)%3A%20returns%20the%20subnet%20for%20which%20the%20provided%20attestation%20will%20be%20broadcasted%20to.This%20differs%20from%20the%20spec%20definition%20by%20instead%20passing%20in%20the%20active%20validators%20indices%20in%20the%20attestation's%20given%20epoch.%0A%0A%60%60%60%0A%20%20Spec%20pseudocode%20definition%3A%0A%0Adef%20compute_subnet_for_attestation(committees_per_slot%3A%20uint64%2C%20slot%3A%20Slot%2C%20committee_index%3A%20CommitteeIndex)%20-%3E%20uint64%3A%0A%0A%22%22%22%0ACompute%20the%20correct%20subnet%20for%20an%20attestation%20for%20Phase%200.%0ANote%2C%20this%20mimics%20expected%20future%20behavior%20where%20attestations%20will%20be%20mapped%20to%20their%20shard%20subnet.%0A%22%22%22%0Aslots_since_epoch_start%20%3D%20uint64(slot%20%25%20SLOTS_PER_EPOCH)%0Acommittees_since_epoch_start%20%3D%20committees_per_slot%20%5C*%20slots_since_epoch_start%0A%0Areturn%20uint64((committees_since_epoch_start%20%2B%20committee_index)%20%25%20ATTESTATION_SUBNET_COUNT)%0A%0A%60%60%60%0A%0A-%20%5Bfunc%20ComputeSubnetFromCommitteeAndSlot%5D(https%3A%2F%2Fpkg.go.dev%2Fgithub.com%2Fprysmaticlabs%2Fprysm%2Fv3%40v3.1.2%2Fbeacon-chain%2Fcore%2Fhelpers%23ComputeSubnetFromCommitteeAndSlot)%3A%20is%20a%20flattened%20version%20of%20ComputeSubnetForAttestation%20where%20we%20only%20pass%20in%20the%20relevant%20fields%20from%20the%20attestation%20as%20function%20arguments.%0A%0ASpec%20pseudocode%20definition%3A%0A%0A%60%60%60%0A%0Adef%20compute_subnet_for_attestation(committees_per_slot%3A%20uint64%2C%20slot%3A%20Slot%2C%20committee_index%3A%20CommitteeIndex)%20-%3E%20uint64%3A%0A%0A%22%22%22%0ACompute%20the%20correct%20subnet%20for%20an%20attestation%20for%20Phase%200.%0ANote%2C%20this%20mimics%20expected%20future%20behavior%20where%20attestations%20will%20be%20mapped%20to%20their%20shard%20subnet.%0A%22%22%22%0Aslots_since_epoch_start%20%3D%20uint64(slot%20%25%20SLOTS_PER_EPOCH)%0Acommittees_since_epoch_start%20%3D%20committees_per_slot%20%5C*%20slots_since_epoch_start%0A%0Areturn%20uint64((committees_since_epoch_start%20%2B%20committee_index)%20%25%20ATTESTATION_SUBNET_COUNT)%0A%0A%60%60%60%0A%0A-%20%5Bfunc%20ValidateAttestationTime%5D(https%3A%2F%2Fpkg.go.dev%2Fgithub.com%2Fprysmaticlabs%2Fprysm%2Fv3%40v3.1.2%2Fbeacon-chain%2Fcore%2Fhelpers%23ValidateAttestationTime)%3A%20Validates%20that%20the%20incoming%20attestation%20is%20in%20the%20desired%20time%20range.%0A%20%20An%20attestation%20is%20valid%20only%20if%20received%20within%20the%20last%20ATTESTATION_PROPAGATION_SLOT_RANGE%20slots.%0A%0AExample%3A%0A%0A%60%60%60%0A%0AATTESTATION_PROPAGATION_SLOT_RANGE%20%3D%205%0AclockDisparity%20%3D%2024%20seconds%0Acurrent_slot%20%3D%20100%0Ainvalid_attestation_slot%20%3D%2092%0Ainvalid_attestation_slot%20%3D%20103%0Avalid_attestation_slot%20%3D%2098%0Avalid_attestation_slot%20%3D%20101%0A%0A%60%60%60%0A%0AIn%20the%20attestation%20must%20be%20within%20the%20range%20of%2095%20to%20102%20in%20the%20example%20above.%0A%0A-%20%5Bfunc%20VerifyCheckpointEpoch%5D(https%3A%2F%2Fpkg.go.dev%2Fgithub.com%2Fprysmaticlabs%2Fprysm%2Fv3%40v3.1.2%2Fbeacon-chain%2Fcore%2Fhelpers%23VerifyCheckpointEpoch)%3A%20VerifyCheckpointEpoch%20is%20within%20current%20epoch%20and%20previous%20epoch%20with%20respect%20to%20current%20time.%20Returns%20true%20if%20it's%20within%2C%20false%20if%20it's%20not.%0A%0A_Note%3A%20Sample%20command%20for%20running%20tests%20in%20Prysm%3A%20%60bazel%20test%20%2F%2Fbeacon-chain%2Fcore%2Fhelpers%3Ago_default_test%20--test_output%3Dstreamed%20--test_filter%3DTestAttestation_AggregateSignature%60._%0A%0A**Consensus%20Committee%20Selection**%0A%0A-%20%5Bfunc%20ProcessRandoa%5D(https%3A%2F%2Fpkg.go.dev%2Fgithub.com%2Fprysmaticlabs%2Fprysm%2Fv3%40v3.1.2%2Fbeacon-chain%2Fcore%2Fblocks%23ProcessRandao)%3A%20checks%20the%20block%20proposer's%20randao%20commitment%20and%20generates%20a%20new%20randao%20mix%20to%20update%20in%20the%20beacon%20state's%20latest%20randao%20mixes%20slice.%0A-%20%5Bfunc%20randaoSigningData%5D(https%3A%2F%2Fgithub.com%2Fprysmaticlabs%2Fprysm%2Fblob%2Fv3.1.2%2Fbeacon-chain%2Fcore%2Fblocks%2Fsignature.go%23L157)%3A%20retrieves%20the%20randao%20related%20signing%20data%20from%20the%20state.%0A%20%20-%20%5Bfunc%20(b%20%5C*BeaconState)%20PubkeyAtIndex(idx%20types.ValidatorIndex)%20%5Bfieldparams.BLSPubkeyLength%5Dbyte%20%5D(https%3A%2F%2Fgithub.com%2Fprysmaticlabs%2Fprysm%2Fblob%2Fv3.1.2%2Fbeacon-chain%2Fstate%2Fstate-native%2Fgetters_validator.go%23L135)%3A%20returns%20the%20pubkey%20at%20the%20given%20validator%20index.%0A%0A%23%23%23%20Appendix%20B%3A%20Additional%20Light%20Client%20Support%20Documentation%0A%0A%23%23%23%23%20Key%20Concepts%0A%0A-%20Syncing%20to%20Current%20state%0A%0A-%20Advancing%20Blocks%0A-%20Communication%20can%20be%20either%20via%0A-%20RPC%20to%20the%20%5BEth%20BEACON%20Node%20API%5D(https%3A%2F%2Fethereum.github.io%2Fbeacon-APIs%2F%23%2FBeacon)%0A-%20%5BNetworking%20Gossip%20Topics%5D(https%3A%2F%2Fgithub.com%2Fethereum%2Fconsensus-specs%2Fblob%2Fdev%2Fspecs%2Faltair%2Flight-client%2Fp2p-interface.md%23global-topics)%0A%20%20-%20%5Blight_client_finality_update%5D(https%3A%2F%2Fgithub.com%2Fethereum%2Fconsensus-specs%2Fblob%2Fdev%2Fspecs%2Faltair%2Flight-client%2Fp2p-interface.md%23light_client_finality_update)%3A%20This%20topic%20is%20used%20to%20propagate%20the%20latest%20%60LightClientFinalityUpdate%60%20to%20light%20clients%2C%20allowing%20them%20to%20keep%20track%20of%20the%20latest%20%60finalized_header%60.%0A%20%20-%20%5Blight_client_optimistic_update%5D(https%3A%2F%2Fgithub.com%2Fethereum%2Fconsensus-specs%2Fblob%2Fdev%2Fspecs%2Faltair%2Flight-client%2Fp2p-interface.md%23light_client_optimistic_update)%3A%20This%20topic%20is%20used%20to%20propagate%20the%20latest%60LightClientOptimisticUpdate%60%20to%20light%20clients%2C%20allowing%20them%20to%20keep%20track%20of%20the%20latest%20%60optimistic_header%60.%0A%0A_Note%3A%20Time%20on%20Ethereum%202.0%20Proof%20of%20Stake%20is%20divided%20into%20slots%20and%20epochs.%20One%20slot%20is%2012%20seconds.%20One%20epoch%20is%206.4%20minutes%2C%20consisting%20of%2032%20slots.%20One%20block%20can%20be%20created%20for%20each%20slot._%0A%0A%23%23%23%23%20Altair%20Light%20Client%20--%20Sync%20Protocol%0A%0A-%20%5BAltair%20Light%20Client%20--%20Sync%20Protocol%5D(https%3A%2F%2Fgithub.com%2Fethereum%2Fconsensus-specs%2Fblob%2Fdev%2Fspecs%2Faltair%2Flight-client%2Fsync-protocol.mdx)%3A%20The%20beacon%20chain%20is%20designed%20to%20be%20light%20client%20friendly%20for%20constrained%20environments%20to%20access%20Ethereum%20with%20reasonable%20safety%20and%20liveness.%0A%0ASuch%20environments%20include%20resource-constrained%20devices%20(e.g.%20phones%20for%20trust-minimized%20wallets)and%20metered%20VMs%20(e.g.%20blockchain%20VMs%20for%20cross-chain%20bridges).%0A%0AThis%20document%20suggests%20a%20minimal%20light%20client%20design%20for%20the%20beacon%20chain%20thatuses%20sync%20committees%20introduced%20in%20%5Bthis%20beacon%20chain%20extension%5D(https%3A%2F%2Fgithub.com%2Fethereum%2Fconsensus-specs%2Fblob%2Fdev%2Fspecs%2Faltair%2Fbeacon-chain.mdx).%0A%0AAdditional%20documents%20describe%20how%20the%20light%20client%20sync%20protocol%20can%20be%20used%3A%0A%0A-%20%5BFull%20node%5D(https%3A%2F%2Fgithub.com%2Fethereum%2Fconsensus-specs%2Fblob%2Fdev%2Fspecs%2Faltair%2Flight-client%2Ffull-node.mdx)%0A-%20%5BLight%20client%5D(https%3A%2F%2Fgithub.com%2Fethereum%2Fconsensus-specs%2Fblob%2Fdev%2Fspecs%2Faltair%2Flight-client%2Flight-client.mdx)%0A-%20%5BNetworking%5D(https%3A%2F%2Fgithub.com%2Fethereum%2Fconsensus-specs%2Fblob%2Fdev%2Fspecs%2Faltair%2Flight-client%2Fp2p-interface.mdx)%0A%0A-%20%5BLight%20client%20sync%20process%5D(https%3A%2F%2Fgithub.com%2Fethereum%2Fconsensus-specs%2Fblob%2Fdev%2Fspecs%2Faltair%2Flight-client%2Flight-client.mdx)%3A%20explains%20how%20light%20clients%20MAY%20obtain%20light%20client%20data%20to%20sync%20with%20the%20network.%0A%0A1.%20The%20light%20client%20MUST%20be%20configured%20out-of-band%20with%20a%20spec%2Fpreset%20(including%20fork%20schedule)%2C%20with%20%60genesis_state%60%20(including%20%60genesis_time%60%20and%20%60genesis_validators_root%60)%2C%20and%20with%20a%20trusted%20block%20root.%20The%20trusted%20block%20SHOULD%20be%20within%20the%20weak%20subjectivity%20period%2C%20and%20its%20root%20SHOULD%20be%20from%20a%20finalized%20%60Checkpoint%60.%0A2.%20The%20local%20clock%20is%20initialized%20based%20on%20the%20configured%20%60genesis_time%60%2C%20and%20the%20current%20fork%20digest%20is%20determined%20to%20browse%20for%20and%20connect%20to%20relevant%20light%20client%20data%20providers.%0A3.%20The%20light%20client%20fetches%20a%20%5B%60LightClientBootstrap%60%5D(https%3A%2F%2Fgithub.com%2Fethereum%2Fconsensus-specs%2Fblob%2Fdev%2Fspecs%2Faltair%2Flight-client%2Flight-client.mdx)%20object%20for%20the%20configured%20trusted%20block%20root.%20The%20%60bootstrap%60%20object%20is%20passed%20to%20%5B%60initialize_light_client_store%60%5D(https%3A%2F%2Fgithub.com%2Fethereum%2Fconsensus-specs%2Fblob%2Fdev%2Fspecs%2Faltair%2Flight-client%2Fsync-protocol.md%23initialize_light_client_store)%20to%20obtain%20a%20local%20%5B%60LightClientStore%60%5D(https%3A%2F%2Fgithub.com%2Fethereum%2Fconsensus-specs%2Fblob%2Fdev%2Fspecs%2Faltair%2Flight-client%2Fsync-protocol.md%23lightclientstore).%0A4.%20The%20light%20client%20tracks%20the%20sync%20committee%20periods%20%60finalized_period%60%20from%20%60store.finalized_header.slot%60%2C%20%60optimistic_period%60%20from%20%60store.optimistic_header.slot%60%2C%20and%20%60current_period%60%20from%20%60current_slot%60%20based%20on%20the%20local%20clock.%0A%20%20%201.%20When%20%60finalized_period%20%3D%3D%20optimistic_period%60%20and%20%5B%60is_next_sync_committee_known%60%5D(https%3A%2F%2Fgithub.com%2Fethereum%2Fconsensus-specs%2Fblob%2Fdev%2Fspecs%2Faltair%2Flight-client%2Fsync-protocol.md%23is_next_sync_committee_known)%20indicates%20%60False%60%2C%20the%20light%20client%20fetches%20a%20%5B%60LightClientUpdate%60%5D(https%3A%2F%2Fgithub.com%2Fethereum%2Fconsensus-specs%2Fblob%2Fdev%2Fspecs%2Faltair%2Flight-client%2Fsync-protocol.md%23lightclientupdate)%20for%20%60finalized_period%60.%20If%20%60finalized_period%20%3D%3D%20current_period%60%2C%20this%20fetch%20SHOULD%20be%20scheduled%20at%20a%20random%20time%20before%20%60current_period%60%20advances.%0A%20%20%202.%20When%20%60finalized_period%20%2B%201%20%3C%20current_period%60%2C%20the%20light%20client%20fetches%20a%20%60LightClientUpdate%60%20for%20each%20sync%20committee%20period%20in%20range%20%60%5Bfinalized_period%20%2B%201%2C%20current_period)%60%20(current%20period%20excluded)%0A%20%20%203.%20When%20%60finalized_period%20%2B%201%20%3E%3D%20current_period%60%2C%20the%20light%20client%20keeps%20observing%20%5B%60LightClientFinalityUpdate%60%5D(https%3A%2F%2Fgithub.com%2Fethereum%2Fconsensus-specs%2Fblob%2Fdev%2Fspecs%2Faltair%2Flight-client%2Fsync-protocol.md%23lightclientfinalityupdate)%20and%20%5B%60LightClientOptimisticUpdate%60%5D(https%3A%2F%2Fgithub.com%2Fethereum%2Fconsensus-specs%2Fblob%2Fdev%2Fspecs%2Faltair%2Flight-client%2Fsync-protocol.md%23lightclientoptimisticupdate).%20Received%20objects%20are%20passed%20to%20%5B%60process_light_client_finality_update%60%5D(https%3A%2F%2Fgithub.com%2Fethereum%2Fconsensus-specs%2Fblob%2Fdev%2Fspecs%2Faltair%2Flight-client%2Fsync-protocol.md%23process_light_client_finality_update)%20and%20%5B%60process_light_client_optimistic_update%60%5D(https%3A%2F%2Fgithub.com%2Fethereum%2Fconsensus-specs%2Fblob%2Fdev%2Fspecs%2Faltair%2Flight-client%2Fsync-protocol.md%23process_light_client_optimistic_update).%20This%20ensures%20that%20%60finalized_header%60%20and%20%60optimistic_header%60%20reflect%20the%20latest%20blocks.%0A5.%20%5B%60process_light_client_store_force_update%60%5D(https%3A%2F%2Fgithub.com%2Fethereum%2Fconsensus-specs%2Fblob%2Fdev%2Fspecs%2Faltair%2Flight-client%2Fsync-protocol.md%23process_light_client_store_force_update)%20MAY%20be%20called%20based%20on%20use%20case%20dependent%20heuristics%20if%20light%20client%20sync%20appears%20stuck.%20If%20available%2C%20falling%20back%20to%20an%20alternative%20syncing%20mechanism%20to%20cover%20the%20affected%20sync%20committee%20period%20is%20preferred.%0A%0A%23%23%23%23%20The%20Portal%20Network%0A%0A-%20%5BThe%20Portal%20Network%5D(https%3A%2F%2Fgithub.com%2Fethereum%2Fportal-network-specs)%3A%20The%20Portal%20Network%20is%20an%20in%20progess%20effort%20to%20enable%20lightweight%20protocol%20access%20by%20resource%20constrained%20devices.%20The%20term%20_%22portal%22_%20is%20used%20to%20indicate%20that%20these%20networks%20provide%20a%20_view_%20into%20the%20protocol%20but%20are%20not%20critical%20to%20the%20operation%20of%20the%20core%20Ethereum%20protocol.%0A%0AThe%20Portal%20Network%20is%20comprised%20of%20multiple%20peer-to-peer%20networks%20which%20together%20provide%20the%20data%20and%20functionality%20necessary%20to%20expose%20the%20standard%20%5BJSON-RPC%20API%5D(https%3A%2F%2Feth.wiki%2Fjson-rpc%2FAPI).%20These%20networks%20are%20specially%20designed%20to%20ensure%20that%20clients%20participating%20in%20these%20networks%20can%20do%20so%20with%20minimal%20expenditure%20of%20networking%20bandwidth%2C%20CPU%2C%20RAM%2C%20and%20HDD%20resources.%0A%0AThe%20term%20'Portal%20Client'%20describes%20a%20piece%20of%20software%20which%20participates%20in%20these%20networks.%20Portal%20Clients%20typically%20expose%20the%20standard%20JSON-RPC%20API.%0A%0A-%20Motivation%3A%20The%20Portal%20Network%20is%20focused%20on%20delivering%20reliable%2C%20lightweight%2C%20and%20decentralized%20access%20to%20the%20Ethereum%20protocol.%0A%0A-%20Prior%20Work%20on%20the%20%22Light%20Ethereum%20Subprotocol%22%20(LES)%3A%20The%20term%20%22light%20client%22%20has%20historically%20refered%20to%20a%20client%20of%20the%20existing%20%5BDevP2P%5D(https%3A%2F%2Fgithub.com%2Fethereum%2Fdevp2p%2Fblob%2Fmaster%2Frlpx.mdx)%20based%20%5BLES%5D(https%3A%2F%2Fgithub.com%2Fethereum%2Fdevp2p%2Fblob%2Fmaster%2Fcaps%2Fles.mdx)%20network.%20This%20network%20is%20designed%20using%20a%20client%2Fserver%20architecture.%20The%20LES%20network%20has%20a%20total%20capacity%20dictated%20by%20the%20number%20of%20%22servers%22%20on%20the%20network.%20In%20order%20for%20this%20network%20to%20scale%2C%20the%20%22server%22%20capacity%20has%20to%20increase.%20This%20also%20means%20that%20at%20any%20point%20in%20time%20the%20network%20has%20some%20total%20capacity%20which%20if%20exceeded%20will%20cause%20service%20degradation%20across%20the%20network.%20Because%20of%20this%20the%20LES%20network%20is%20unreliable%20when%20operating%20near%20capacity.%0A%0A-%20Block%20Relay%0A%0A-%20%5BBeacon%20State%5D(https%3A%2F%2Fgithub.com%2Fethereum%2Fportal-network-specs%2Fblob%2Fmaster%2Fbeacon-chain%2Fbeacon-state-network.md%23dht-overview)%3A%20A%20client%20has%20a%20trusted%20beacon%20state%20root%2C%20and%20it%20wants%20to%20access%20some%20parts%20of%20the%20state.%20Each%20of%20the%20access%20request%20corresponds%20to%20some%20leave%20nodes%20of%20the%20beacon%20state.%20The%20request%20is%20a%20content%20lookup%20on%20a%20DHT.%20The%20response%20is%20a%20Merkle%20proof.%0A%0A%20%20%20%20%20%20A%20Distributed%20Hash%20Table%20(DHT)%20allows%20network%20participants%20to%20have%20retrieve%20data%20on-demand%20based%20on%20a%20content%0A%0A-%20%5BSyncing%20Block%20Headers%5D(https%3A%2F%2Fgithub.com%2Fethereum%2Fportal-network-specs%2Fblob%2Fmaster%2Fbeacon-chain%2Fsync-gossip.mdx)%3A%20A%20beacon%20chain%20client%20could%20sync%20committee%20to%20perform%20state%20updates.%20The%20data%20object%20LightClientSkipSyncUpdate%20allows%20a%20client%20to%20quickly%20sync%20to%20a%20recent%20header%20with%20the%20appropriate%20sync%20committee.%20Once%20the%20client%20establishes%20a%20recent%20header%2C%20it%20could%20sync%20to%20other%20headers%20by%20processing%20LightClientUpdates.%20These%20two%20data%20types%20allow%20a%20client%20to%20stay%20up-to-date%20with%20the%20beacon%20chain.%0A%20%20-%20%5BSync%20State%5D(https%3A%2F%2Fgithub.com%2Fethereum%2Fportal-network-specs%2Fblob%2Fmaster%2Fbeacon-chain%2Fskip-sync-network.mdx)%3A%20A%20client%20uses%20SkipSyncUpdate%20to%20skip%20sync%20from%20a%20known%20header%20to%20a%20recent%20header.%20A%20client%20with%20a%20trusted%20but%20outdated%20header%20cannot%20use%20the%20messages%20in%20the%20gossip%20channel%20bc-light-client-update%20to%20update.%20The%20client's%20sync-committee%20in%20the%20stored%20snapshot%20is%20too%20old%20and%20not%20connected%20to%20any%20update%20messages.%20The%20client%20look%20for%20the%20appropriate%20SkipSyncUpdate%20to%20skip%20sync%20its%20header.%0A%20%20-%20%5BAdvance%20Block%20Headers%5D(https%3A%2F%2Fgithub.com%2Fethereum%2Fportal-network-specs%2Fblob%2Fmaster%2Fbeacon-chain%2Fsync-gossip.mdx)%3A%20A%20beacon%20chain%20client%20could%20sync%20committee%20to%20perform%20%5Bstate%20updates%5D(https%3A%2F%2Fgithub.com%2Fethereum%2Fconsensus-specs%2Fblob%2Fdev%2Fspecs%2Faltair%2Fsync-protocol.mdx).%20The%20data%20object%20%5BLightClientSkipSyncUpdate%5D(skip-sync-network)%20allows%20a%20client%20to%20quickly%20sync%20to%20a%20recent%20header%20with%20the%20appropriate%20sync%20committee.%20Once%20the%20client%20establishes%20a%20recent%20header%2C%20it%20could%20sync%20to%20other%20headers%20by%20processing%20%5BLightClientUpdates%5D(https%3A%2F%2Fgithub.com%2Fethereum%2Fconsensus-specs%2Fblob%2Fdev%2Fspecs%2Faltair%2Fsync-protocol.md%23lightclientupdate).%20These%20two%20data%20types%20allow%20a%20client%20to%20stay%20up-to-date%20with%20the%20beacon%20chain.%0A%0A%20%20%20%20%20%20%20%20%20%20These%20two%20data%20types%20are%20placed%20into%20separate%20sub-networks.%20A%20light%20client%20make%20find-content%20requests%20on%20%60skip-sync-network%60%20at%20start%20of%20the%20sync%20to%20get%20a%20header%20with%20the%20same%20%60SyncCommittee%60%20object%20as%20in%20the%20current%20sync%20period.%20The%20client%20uses%20messages%20in%20the%20gossip%20topic%20%60bc-light-client-update%60%20to%20advance%20its%20header.%0A%0A%20%20%20%20%20%20%20%20%20%20The%20gossip%20topics%20described%20in%20this%20document%20is%20part%20of%20a%20%5Bproposal%5D(https%3A%2F%2Fethresear.ch%2Ft%2Fa-beacon-chain-light-client-proposal%2F11064)%20for%20a%20beacon%20chain%20light%20client.%0A%0A%23%23%23%23%20Transaction%20Proofs%0A%0A-%20%5BRetrieving%20Beacon%20State%5D(https%3A%2F%2Fgithub.com%2Fethereum%2Fportal-network-specs%2Fblob%2Fmaster%2Fbeacon-chain%2Fbeacon-state-network.mdx)%3A%20A%20client%20has%20a%20trusted%20beacon%20state%20root%2C%20and%20it%20wants%20to%20access%20some%20parts%20of%20the%20state.%20Each%20of%20the%20access%20request%20corresponds%20to%20some%20leave%20nodes%20of%20the%20beacon%20state.%20The%20request%20is%20a%20content%20lookup%20on%20a%20DHT.%20The%20response%20is%20a%20Merkle%20proof.%0A%0AA%20Distributed%20Hash%20Table%20(DHT)%20allows%20network%20participants%20to%20have%20retrieve%20data%20on-demand%20based%20on%20a%20content%20key.%20A%20portal-network%20DHT%20is%20different%20than%20a%20traditional%20one%20in%20that%20each%20participant%20could%20selectively%20limit%20its%20workload%20by%20choosing%20a%20small%20interest%20radius%20r.%20A%20participants%20only%20process%20messages%20that%20are%20within%20its%20chosen%20radius%20boundary.%0A%0A-%20%5BWire%20Protocol%5D(https%3A%2F%2Fgithub.com%2Fethereum%2Fportal-network-specs%2Fblob%2Fmaster%2Fbeacon-chain%2Fbeacon-state-network.md%23wire-protocol)%3A%20For%20a%20subprotocol%2C%20we%20need%20to%20further%20define%20the%20following%20to%20be%20able%20to%20instantiate%20the%20wire%20format%20of%20each%20message%20type.%201.%20%60content_key%60%202.%20%60content_id%60%203.%20%60payload%60%0A%0A%20%20%20%20%20%20The%20content%20of%20the%20message%20is%20a%20Merkle%20proof%20contains%20multiple%20leave%20nodes%20for%20a%20%5BBeaconState%5D(https%3A%2F%2Fgithub.com%2Fethereum%2Fconsensus-specs%2Fblob%2Fdev%2Fspecs%2Faltair%2Fbeacon-chain.md%23beaconstate).%0A%0A%20%20%20%20%20%20Finally%2C%20we%20define%20the%20necessary%20encodings.%20A%20light%20client%20only%20knows%20the%20root%20of%20the%20beacon%20state.%20The%20client%20wants%20to%20know%20the%20details%20of%20some%20leave%20nodes.%20The%20client%20has%20to%20be%20able%20to%20construct%20the%20%60content_key%60%20only%20knowing%20the%20root%20and%20which%20leave%20nodes%20it%20wants%20see.%20The%20%60content_key%60%20is%20the%20ssz%20serialization%20of%20the%20paths.%20The%20paths%20represent%20the%20part%20of%20the%20beacon%20state%20that%20one%20wants%20to%20know%20about.%20The%20paths%20are%20represented%20by%20generalized%20indices.%20Note%20that%20%60hash_tree_root%60%20and%20%60serialize%60%20are%20the%20same%20as%20those%20defined%20in%20%5Bsync-gossip%5D(https%3A%2F%2Fgithub.com%2Fethereum%2Fportal-network-specs%2Fblob%2Fmaster%2Fbeacon-chain%2Fsync-gossip.mdx).%0A%0A-%20TODO%3A%20Review%20of%20Retrieving%20a%20transaction%20proof%20not%20just%20retrieving%20data%20on-demand%0A%0A%23%23%23%23%20Further%20Information%0A%0A-%20Ethereum%202.0%20Specifications%0A-%20%5BBeacon%20Chain%20Specification%5D(https%3A%2F%2Fgithub.com%2Fethereum%2Fconsensus-specs%2Fblob%2Fmaster%2Fspecs%2Fphase0%2Fbeacon-chain.mdx)%0A-%20%5BExtended%20light%20client%20protocol%5D(https%3A%2F%2Fnotes.ethereum.org%2F%40vbuterin%2Fextended_light_client_protocol)%0A-%20%5BAltair%20Light%20Client%20--%20Light%20Client%5D(https%3A%2F%2Fgithub.com%2Fethereum%2Fconsensus-specs%2Fblob%2Fdev%2Fspecs%2Faltair%2Flight-client%2Flight-client.mdx)%0A-%20%5BAltair%20Light%20Client%20--%20Sync%20Protocol%5D(https%3A%2F%2Fgithub.com%2Fethereum%2Fconsensus-specs%2Fblob%2Fdev%2Fspecs%2Faltair%2Flight-client%2Fsync-protocol.mdx)%0A-%20%5BBeacon%20Chain%20Fork%20Choice%5D(https%3A%2F%2Fgithub.com%2Fethereum%2Fconsensus-specs%2Fblob%2Fdev%2Fspecs%2Fphase0%2Ffork-choice.mdx)%0A-%20%5BThe%20Portal%20Network%20Specification%5D(https%3A%2F%2Fgithub.com%2Fethereum%2Fportal-network-specs)%3A%20an%20in%20progess%20effort%20to%20enable%20lightweight%20protocol%20access%20by%20resource%20constrained%20devices.%0A-%20%5BLight%20Ethereum%20Subprotocol%20(LES)%5D(https%3A%2F%2Fgithub.com%2Fethereum%2Fdevp2p%2Fblob%2Fmaster%2Fcaps%2Fles.mdx)%3A%20the%20protocol%20used%20by%20%22light%22%20clients%2C%20which%20only%20download%20block%20headers%20as%20they%20appear%20and%20fetch%20other%20parts%20of%20the%20blockchain%20on-demand.%0A-%20%5BBlockDaemon%3A%20Ethereum%20Altair%20Hard%20Folk%3A%20Light%20Clients%20%26%20Sync%20Committees%5D(https%3A%2F%2Fblockdaemon.com%2Fblog%2Fethereum-altair-hard-folk-light-clients-sync-committees%2F)%0A-%20%5BEfficient%20algorithms%20for%20CBC%20Casper%5D(https%3A%2F%2Fdocs.google.com%2Fpresentation%2Fd%2F1oc_zdywOsHxz3zez1ILAgrerS7RkaF1hHoW0FLtp0Gw%2Fedit%23slide%3Did.p)%3A%20Review%20of%20LMD%20GHOST%20(Latest%20Message%20Driven%2C%20Greediest%20Heaviest%20Observed%20Sub-Tree)%0A-%20%5BSSZ%3A%20Simple%20Serialize%5D(https%3A%2F%2Fethereum.org%2Fen%2Fdevelopers%2Fdocs%2Fdata-structures-and-encoding%2Fssz%2F)%3A%20Overview%20of%20Simple%20serialize%20(SSZ)%20is%20the%20serialization%20method%20used%20on%20the%20Beacon%20Chain.%20(including%20merkalization%20and%20multiproofs)%0A-%20%5BThe%20Noise%20Protocol%20Framework%5D(https%3A%2F%2Fnoiseprotocol.org%2Fnoise.html)%3A%20Noise%20is%20a%20framework%20for%20crypto%20protocols%20based%20on%20Diffie-Hellman%20key%20agreement.%0A-%20%5BFlashbots%20for%20Ethereum%20Consensus%20Clients%5D(https%3A%2F%2Fhackmd.io%2FQoLwVQf3QK6EiVt15YOYqQ%3Fview)%0A-%20%5BOptimistic%20Sync%20Specification%5D(https%3A%2F%2Fgithub.com%2Fethereum%2Fconsensus-specs%2Fblob%2Fdev%2Fsync%2Foptimistic.mdx)%3A%20Optimistic%20Sync%20is%20a%20stop-gap%20measure%20to%20allow%20execution%20nodes%20to%20sync%20via%20established%20methods%20until%20future%20Ethereum%20roadmap%20items%20are%20implemented%20(e.g.%2C%20statelessness).%0A-%20%5BConsensus%20Light%20Client%20Server%20Implementation%20Notes%5D(https%3A%2F%2Fhackmd.io%2FhsCz1G3BTyiwwJtjT4pe2Q%3Fview)%3A%20How%20Lodestar%20beacon%20node%20was%20tweaked%20to%20serve%20light%20clients%0A-%20%5Bbeacon%20chain%20light%20client%20design%20doc%5D(https%3A%2F%2Fnotes.ethereum.org%2F%40ralexstokes%2FHJxDMi8vY)%3A%20notes%20about%20the%20design%2Fimplementation%20of%20a%20beacon%20chain%20light%20client%20using%20standard%20APIs%20and%20protocol%20features%0A-%20%5BA%20Beacon%20Chain%20Light%20Client%20Proposal%5D(https%3A%2F%2Fethresear.ch%2Ft%2Fa-beacon-chain-light-client-proposal%2F11064)%3A%20proposing%20a%20light%20client%20implementation%20that%20goes%20a%20step%20further%20than%20the%20minimum%20light%20client%20described%20in%20the%20altair%20consensus-spec.%20The%20proposed%20client%20aims%20to%20allow%20queries%20into%20the%20beacon%20state.%0A-%20%5BDistributed%20Hash%20Table%20(DHT)%20Overview%5D(https%3A%2F%2Fgithub.com%2Fethereum%2Fportal-network-specs%2Fblob%2Fmaster%2Fbeacon-chain%2Fbeacon-state-network.md%23dht-overview)%3A%20allows%20network%20participants%20to%20have%20retrieve%20data%20on-demand%20based%20on%20a%20content%20key.%0A-%20%5B(WIP)%20Light%20client%20p2p%20interface%20Specification%5D(https%3A%2F%2Fgithub.com%2Fethereum%2Fconsensus-specs%2Fpull%2F2786)%3A%20a%20PR%20to%20get%20the%20conversation%20going%20about%20a%20p2p%20approach.%0A%20%20Here%20we%20cover%20two%20approaches%20which%20may%20be%20combined%0A%0A%23%23%23%20Appendix%20C%3A%20Proving%20and%20Verification%20Mechanisms%0A%0A%23%23%23%23%20%5Beth-proof-of-consensus%5D(https%3A%2F%2Fgithub.com%2Fsuccinctlabs%2Feth-proof-of-consensus)%3A%20Proof%20of%20Consensus%20for%20Ethereum%20by%20succinctlabs%0A%0ACircuits%0A%0A-%20%5Baggregate_bls_verify.circom%5D(https%3A%2F%2Fgithub.com%2Fsuccinctlabs%2Feth-proof-of-consensus%2Fblob%2Fmain%2Fcircuits%2Fcircuits%2Faggregate_bls_verify.circom)%3A%20Computes%20an%20aggregate%20BLS12-381%20public%20key%20over%20a%20set%20of%20public%20keys%20and%20a%20bitmask%0A-%20%5Bassert_valid_signed_header.circom%5D(https%3A%2F%2Fgithub.com%2Fsuccinctlabs%2Feth-proof-of-consensus%2Fblob%2Fmain%2Fcircuits%2Fcircuits%2Fassert_valid_signed_header.circom)%0A-%20%5Bpubkey_poseidon.circom%5D(https%3A%2F%2Fgithub.com%2Fsuccinctlabs%2Feth-proof-of-consensus%2Fblob%2Fmain%2Fcircuits%2Fcircuits%2Fpubkey_poseidon.circom)%3A%20Computes%20the%20Poseidon%20merkle%20root%20of%20a%20list%20of%20field%20elements%0A-%20%5Bsha256_bytes.circom%5D(https%3A%2F%2Fgithub.com%2Fsuccinctlabs%2Feth-proof-of-consensus%2Fblob%2Fmain%2Fcircuits%2Fcircuits%2Fsha256_bytes.circom)%3A%20Wrapper%20around%20SHA256%20to%20support%20bytes%20as%20input%20instead%20of%20bits%0A-%20%5Bsimple_serialize.circom%5D(https%3A%2F%2Fgithub.com%2Fsuccinctlabs%2Feth-proof-of-consensus%2Fblob%2Fmain%2Fcircuits%2Fcircuits%2Fsimple_serialize.circom)%3A%20Helper%20function%20to%20implement%20SSZArray%0A-%20%5Bsync_committee_committments.circom%5D(https%3A%2F%2Fgithub.com%2Fsuccinctlabs%2Feth-proof-of-consensus%2Fblob%2Fmain%2Fcircuits%2Fcircuits%2Fsync_committee_committments.circom)%3A%20Asserts%20that%20the%20byte%20representation%20of%20a%20BLS12-381%20public%20key's%20x-coordinate%20matches%20the%20BigInt%20representation%0A%0AVerification%0A%0A-%20%5BAMB%5D(https%3A%2F%2Fgithub.com%2Fsuccinctlabs%2Feth-proof-of-consensus%2Ftree%2Fmain%2Fcontracts%2Fsrc%2Famb)%3A%20Arbitrary%20Message%20Passing%0A-%20%5BTrustlessAMB.sol%5D(https%3A%2F%2Fgithub.com%2Fsuccinctlabs%2Feth-proof-of-consensus%2Fblob%2Fmain%2Fcontracts%2Fsrc%2Famb%2FTrustlessAMB.sol)%3A%20sends%20and%20executes%20messages%0A-%20%5BTrustlessAMBStorage.sol%5D(https%3A%2F%2Fgithub.com%2Fsuccinctlabs%2Feth-proof-of-consensus%2Fblob%2Fmain%2Fcontracts%2Fsrc%2Famb%2FTrustlessAMBStorage.sol)%3A%20Storage%20for%20messages%20between%20two%20chains%0A-%20%5Bbridge%5D(https%3A%2F%2Fgithub.com%2Fsuccinctlabs%2Feth-proof-of-consensus%2Ftree%2Fmain%2Fcontracts%2Fsrc%2Fbridge)%3A%20Allows%20for%20the%20deposit%20and%20withdrawal%20of%20ERC20%20tokens%0A-%20%5BBridge.sol%5D(https%3A%2F%2Fgithub.com%2Fsuccinctlabs%2Feth-proof-of-consensus%2Fblob%2Fmain%2Fcontracts%2Fsrc%2Fbridge%2FBridge.sol)%3A%20Deposit%20and%20withdraw%20functionality%0A-%20%5BToken.sol%5D(https%3A%2F%2Fgithub.com%2Fsuccinctlabs%2Feth-proof-of-consensus%2Fblob%2Fmain%2Fcontracts%2Fsrc%2Fbridge%2FTokens.sol)%3A%20ERC20%20bridge%20token%20definitions%0A-%20%5Blightclient%5D(https%3A%2F%2Fgithub.com%2Fsuccinctlabs%2Feth-proof-of-consensus%2Ftree%2Fmain%2Fcontracts%2Fsrc%2Flightclient)%0A-%20%5BBLSAggregatedSignatureVerifier.sol%5D(https%3A%2F%2Fgithub.com%2Fsuccinctlabs%2Feth-proof-of-consensus%2Fblob%2Fmain%2Fcontracts%2Fsrc%2Flightclient%2FBLSAggregatedSignatureVerifier.sol)%3A%20Verifies%20BLS%20aggregated%20signature%20proofs%0A-%20%5BBeaconLightClient.sol%5D(https%3A%2F%2Fgithub.com%2Fsuccinctlabs%2Feth-proof-of-consensus%2Fblob%2Fmain%2Fcontracts%2Fsrc%2Flightclient%2FBeaconLightClient.sol)%3A%20Beacon%20Light%20Client%20Functionality%20including%0A%20%20-%20%5Bstep(LightClientUpdate%20memory%20update)%5D(https%3A%2F%2Fgithub.com%2Fsuccinctlabs%2Feth-proof-of-consensus%2Fblob%2Fmain%2Fcontracts%2Fsrc%2Flightclient%2FBeaconLightClient.sol%23L86)%3A%20Updates%20the%20head%20given%20a%20finalized%20light%20client%20update.%0A%20%20-%20%5Bfunction%20updateSyncCommittee(LightClientUpdate%20memory%20update%2C%20bytes32%20nextSyncCommitteePoseidon%2C%20Groth16Proof%20memory%20commitmentMappingProof)%5D(https%3A%2F%2Fgithub.com%2Fsuccinctlabs%2Feth-proof-of-consensus%2Fblob%2Fmain%2Fcontracts%2Fsrc%2Flightclient%2FBeaconLightClient.sol%23L102)%3A%20Set%20the%20sync%20committee%20validator%20set%20root%20for%20the%20next%20sync%20commitee%20period.%0A%20%20-%20%5Bfunction%20forceUpdate()%5D(https%3A%2F%2Fgithub.com%2Fsuccinctlabs%2Feth-proof-of-consensus%2Fblob%2Fmain%2Fcontracts%2Fsrc%2Flightclient%2FBeaconLightClient.sol%23L131)%3A%20Finalizes%20the%20optimistic%20update%20and%20sets%20the%20next%20sync%20committee%20if%20no%20finalized%20updates%20have%20been%20received%20for%20a%20period.%0A%20%20-%20%5Bfunction%20processLightClientUpdate(LightClientUpdate%20memory%20update)%5D(https%3A%2F%2Fgithub.com%2Fsuccinctlabs%2Feth-proof-of-consensus%2Fblob%2Fmain%2Fcontracts%2Fsrc%2Flightclient%2FBeaconLightClient.sol%23L131)%3A%20Implements%20shared%20logic%20for%20processing%20light%20client%20updates.%0A%20%20-%20%5Bfunction%20zkMapSSZToPoseidon(bytes32%20sszCommitment%2C%20bytes32%20poseidonCommitment%2C%20Groth16Proof%20memory%20proof)%5D(https%3A%2F%2Fgithub.com%2Fsuccinctlabs%2Feth-proof-of-consensus%2Fblob%2Fmain%2Fcontracts%2Fsrc%2Flightclient%2FBeaconLightClient.sol%23L190)%3A%20Maps%20a%20simple%20serialize%20merkle%20root%20to%20a%20poseidon%20merkle%20root%20with%20a%20zkSNARK.%20The%20proof%20asserts%20that%3A%20SimpleSerialize(syncCommittee)%20%3D%3D%20Poseidon(syncCommittee).%0A%20%20-%20%5Bfunction%20zkBLSVerify(bytes32%20signingRoot%2C%20bytes32%20syncCommitteeRoot%2C%20uint256%20claimedParticipation%2C%20Groth16Proof%20memory%20proof)%5D(https%3A%2F%2Fgithub.com%2Fsuccinctlabs%2Feth-proof-of-consensus%2Fblob%2Fmain%2Fcontracts%2Fsrc%2Flightclient%2FBeaconLightClient.sol%23L208)%3A%20Does%20an%20aggregated%20BLS%20signature%20verification%20with%20a%20zkSNARK.%0A-%20%5Bscripts%5D(https%3A%2F%2Fgithub.com%2Fsuccinctlabs%2Feth-proof-of-consensus%2Ftree%2Fmain%2Fcontracts%2Fsrc%2Fscripts)%3A%20A%20collection%20of%20%5Bforge-scripts%5D(https%3A%2F%2Fbook.getfoundry.sh%2Freference%2Fforge%2Fforge-script)%20for%20contract%20deployment.%0A%0A%23%23%23%20Appendix%20D%3A%20Topics%0A%0ABeacon%20Chain%20Topics%20%5BPrysm%5D(https%3A%2F%2Fgithub.com%2Fprysmaticlabs%2Fprysm%2Fblob%2Fdevelop%2Fbeacon-chain%2Fp2p%2Ftopics.go)%0A%0A%60%60%60%0A%0Apackage%20p2p%0A%0Aconst%20(%0A%2F%2F%20GossipProtocolAndDigest%20represents%20the%20protocol%20and%20fork%20digest%20prefix%20in%20a%20gossip%20topic.%0AGossipProtocolAndDigest%20%3D%20%22%2Feth2%2F%25x%2F%22%0A%0A%2F%2F%20Message%20Types%0A%2F%2F%0A%2F%2F%20GossipAttestationMessage%20is%20the%20name%20for%20the%20attestation%20message%20type.%20It%20is%0A%2F%2F%20specially%20extracted%20so%20as%20to%20determine%20the%20correct%20message%20type%20from%20an%20attestation%0A%2F%2F%20subnet.%0AGossipAttestationMessage%20%3D%20%22beacon_attestation%22%0A%2F%2F%20GossipSyncCommitteeMessage%20is%20the%20name%20for%20the%20sync%20committee%20message%20type.%20It%20is%0A%2F%2F%20specially%20extracted%20so%20as%20to%20determine%20the%20correct%20message%20type%20from%20a%20sync%20committee%0A%2F%2F%20subnet.%0AGossipSyncCommitteeMessage%20%3D%20%22sync_committee%22%0A%2F%2F%20GossipBlockMessage%20is%20the%20name%20for%20the%20block%20message%20type.%0AGossipBlockMessage%20%3D%20%22beacon_block%22%0A%2F%2F%20GossipExitMessage%20is%20the%20name%20for%20the%20voluntary%20exit%20message%20type.%0AGossipExitMessage%20%3D%20%22voluntary_exit%22%0A%2F%2F%20GossipProposerSlashingMessage%20is%20the%20name%20for%20the%20proposer%20slashing%20message%20type.%0AGossipProposerSlashingMessage%20%3D%20%22proposer_slashing%22%0A%2F%2F%20GossipAttesterSlashingMessage%20is%20the%20name%20for%20the%20attester%20slashing%20message%20type.%0AGossipAttesterSlashingMessage%20%3D%20%22attester_slashing%22%0A%2F%2F%20GossipAggregateAndProofMessage%20is%20the%20name%20for%20the%20attestation%20aggregate%20and%20proof%20message%20type.%0AGossipAggregateAndProofMessage%20%3D%20%22beacon_aggregate_and_proof%22%0A%2F%2F%20GossipContributionAndProofMessage%20is%20the%20name%20for%20the%20sync%20contribution%20and%20proof%20message%20type.%0AGossipContributionAndProofMessage%20%3D%20%22sync_committee_contribution_and_proof%22%0A%2F%2F%20GossipBlsToExecutionChangeMessage%20is%20the%20name%20for%20the%20bls%20to%20execution%20change%20message%20type.%0AGossipBlsToExecutionChangeMessage%20%3D%20%22bls_to_execution_change%22%0A%0A%2F%2F%20Topic%20Formats%0A%2F%2F%0A%2F%2F%20AttestationSubnetTopicFormat%20is%20the%20topic%20format%20for%20the%20attestation%20subnet.%0AAttestationSubnetTopicFormat%20%3D%20GossipProtocolAndDigest%20%2B%20GossipAttestationMessage%20%2B%20%22_%25d%22%0A%2F%2F%20SyncCommitteeSubnetTopicFormat%20is%20the%20topic%20format%20for%20the%20sync%20committee%20subnet.%0ASyncCommitteeSubnetTopicFormat%20%3D%20GossipProtocolAndDigest%20%2B%20GossipSyncCommitteeMessage%20%2B%20%22_%25d%22%0A%2F%2F%20BlockSubnetTopicFormat%20is%20the%20topic%20format%20for%20the%20block%20subnet.%0ABlockSubnetTopicFormat%20%3D%20GossipProtocolAndDigest%20%2B%20GossipBlockMessage%0A%2F%2F%20ExitSubnetTopicFormat%20is%20the%20topic%20format%20for%20the%20voluntary%20exit%20subnet.%0AExitSubnetTopicFormat%20%3D%20GossipProtocolAndDigest%20%2B%20GossipExitMessage%0A%2F%2F%20ProposerSlashingSubnetTopicFormat%20is%20the%20topic%20format%20for%20the%20proposer%20slashing%20subnet.%0AProposerSlashingSubnetTopicFormat%20%3D%20GossipProtocolAndDigest%20%2B%20GossipProposerSlashingMessage%0A%2F%2F%20AttesterSlashingSubnetTopicFormat%20is%20the%20topic%20format%20for%20the%20attester%20slashing%20subnet.%0AAttesterSlashingSubnetTopicFormat%20%3D%20GossipProtocolAndDigest%20%2B%20GossipAttesterSlashingMessage%0A%2F%2F%20AggregateAndProofSubnetTopicFormat%20is%20the%20topic%20format%20for%20the%20aggregate%20and%20proof%20subnet.%0AAggregateAndProofSubnetTopicFormat%20%3D%20GossipProtocolAndDigest%20%2B%20GossipAggregateAndProofMessage%0A%2F%2F%20SyncContributionAndProofSubnetTopicFormat%20is%20the%20topic%20format%20for%20the%20sync%20aggregate%20and%20proof%20subnet.%0ASyncContributionAndProofSubnetTopicFormat%20%3D%20GossipProtocolAndDigest%20%2B%20GossipContributionAndProofMessage%0A%2F%2F%20BlsToExecutionChangeSubnetTopicFormat%20is%20the%20topic%20format%20for%20the%20bls%20to%20execution%20change%20subnet.%0ABlsToExecutionChangeSubnetTopicFormat%20%3D%20GossipProtocolAndDigest%20%2B%20GossipBlsToExecutionChangeMessage%0A)%0A%0A%60%60%60%0A%0A%23%23%23%20Appendix%20E%3A%20gRPC%20and%20API's%0A%0A%5BBeaconcha.in%20ETH2%20API%5D(https%3A%2F%2Fbeaconcha.in%2Fapi%2Fv1%2Fdocs%2Findex.html)%0A%0A%23%23%23%20Appendix%20F%3A%20Data%20Structures%0A%0A-%20Block%20Structure%20from%20%5Bgo-ethereum%5D(https%3A%2F%2Fgithub.com%2Fethereum%2Fgo-ethereum%2Fblob%2Frelease%2F1.9%2Fcore%2Ftypes%2Fblock.go%23L72)%0A%0A%60%60%60%0A%0A%2F%2F%20SealHash%20returns%20the%20hash%20of%20a%20block%20prior%20to%20it%20being%20sealed.%0Afunc%20(ethash%20*Ethash)%20SealHash(header%20*types.Header)%20(hash%20common.Hash)%20%7B%0Ahasher%20%3A%3D%20sha3.NewLegacyKeccak256()%0A%0Arlp.Encode(hasher%2C%20%5B%5Dinterface%7B%7D%7B%0Aheader.ParentHash%2C%0Aheader.UncleHash%2C%0Aheader.Coinbase%2C%0Aheader.Root%2C%0Aheader.TxHash%2C%0Aheader.ReceiptHash%2C%0Aheader.Bloom%2C%0Aheader.Difficulty%2C%0Aheader.Number%2C%0Aheader.GasLimit%2C%0Aheader.GasUsed%2C%0Aheader.Time%2C%0Aheader.Extra%2C%0A%7D)%0Ahasher.Sum(hash%5B%3A0%5D)%0Areturn%20hash%0A%7D%0A%0A%60%60%60%0A%0A-%20Blocks%20Headers%20get%20forwarded%20to%20the%20Beacon%20chain%20once%20they%20pass%20%5Bbeacon%20consensus%5D(https%3A%2F%2Fgithub.com%2Fethereum%2Fgo-ethereum%2Fblob%2Fmaster%2Fconsensus%2Fbeacon%2Fconsensus.go)%0A-%20The%20Beacon%20chain%20embeds%20the%20EthChain%20Header%20into%20a%20%5BBeaconBlock%5D(https%3A%2F%2Fgithub.com%2Fprysmaticlabs%2Fprysm%2Fblob%2Fdevelop%2Fconsensus-types%2Fblocks%2Ftypes.go%23L43)%0A%0ABeaconBlockBody%20from%20%5Bprysm%5D(https%3A%2F%2Fgithub.com%2Fprysmaticlabs%2Fprysm%2Fblob%2Fdevelop%2Fconsensus-types%2Fblocks%2Ftypes.go)%20(golang)%0A%0A%60%60%60%0A%0A%2F%2F%20BeaconBlockBody%20is%20the%20main%20beacon%20block%20body%20structure.%20It%20can%20represent%20any%20block%20type.%0Atype%20BeaconBlockBody%20struct%20%7B%0Aversion%20int%0AisBlinded%20bool%0ArandaoReveal%20%5Bfield_params.BLSSignatureLength%5Dbyte%0Aeth1Data%20*eth.Eth1Data%0Agraffiti%20%5Bfield_params.RootLength%5Dbyte%0AproposerSlashings%20%5B%5D*eth.ProposerSlashing%0AattesterSlashings%20%5B%5D*eth.AttesterSlashing%0Aattestations%20%5B%5D*eth.Attestation%0Adeposits%20%5B%5D*eth.Deposit%0AvoluntaryExits%20%5B%5D*eth.SignedVoluntaryExit%0AsyncAggregate%20*eth.SyncAggregate%0AexecutionPayload%20*engine.ExecutionPayload%0AexecutionPayloadHeader%20%5C*engine.ExecutionPayloadHeader%0A%7D%0A%0A%2F%2F%20BeaconBlock%20is%20the%20main%20beacon%20block%20structure.%20It%20can%20represent%20any%20block%20type.%0Atype%20BeaconBlock%20struct%20%7B%0Aversion%20int%0Aslot%20types.Slot%0AproposerIndex%20types.ValidatorIndex%0AparentRoot%20%5Bfield_params.RootLength%5Dbyte%0AstateRoot%20%5Bfield_params.RootLength%5Dbyte%0Abody%20%5C*BeaconBlockBody%0A%7D%0A%0A%2F%2F%20SignedBeaconBlock%20is%20the%20main%20signed%20beacon%20block%20structure.%20It%20can%20represent%20any%20block%20type.%0Atype%20SignedBeaconBlock%20struct%20%7B%0Aversion%20int%0Ablock%20%5C*BeaconBlock%0Asignature%20%5Bfield_params.BLSSignatureLength%5Dbyte%0A%7D%0A%0A%60%60%60%0A%0AEth1Data%20from%20%5Bprysm%5D(https%3A%2F%2Fgithub.com%2Fprysmaticlabs%2Fprysm%2Fblob%2Fdevelop%2Fproto%2Fprysm%2Fv1alpha1%2Fpowchain.pb.go%23L24)%20(golang)%0A%0A%60%60%60%0A%0Atype%20ETH1ChainData%20struct%20%7B%0Astate%20protoimpl.MessageState%0AsizeCache%20protoimpl.SizeCache%0AunknownFields%20protoimpl.UnknownFields%0A%0ACurrentEth1Data%20*LatestETH1Data%20%60protobuf%3A%22bytes%2C1%2Copt%2Cname%3Dcurrent_eth1_data%2Cjson%3DcurrentEth1Data%2Cproto3%22%20json%3A%22current_eth1_data%2Comitempty%22%60%0AChainstartData%20*ChainStartData%20%60protobuf%3A%22bytes%2C2%2Copt%2Cname%3Dchainstart_data%2Cjson%3DchainstartData%2Cproto3%22%20json%3A%22chainstart_data%2Comitempty%22%60%0ABeaconState%20*BeaconState%20%60protobuf%3A%22bytes%2C3%2Copt%2Cname%3Dbeacon_state%2Cjson%3DbeaconState%2Cproto3%22%20json%3A%22beacon_state%2Comitempty%22%60%0ATrie%20*SparseMerkleTrie%20%60protobuf%3A%22bytes%2C4%2Copt%2Cname%3Dtrie%2Cproto3%22%20json%3A%22trie%2Comitempty%22%60%0ADepositContainers%20%5B%5D%5C*DepositContainer%20%60protobuf%3A%22bytes%2C5%2Crep%2Cname%3Ddeposit_containers%2Cjson%3DdepositContainers%2Cproto3%22%20json%3A%22deposit_containers%2Comitempty%22%60%0A%7D%0A%0Atype%20LatestETH1Data%20struct%20%7B%0Astate%20protoimpl.MessageState%0AsizeCache%20protoimpl.SizeCache%0AunknownFields%20protoimpl.UnknownFields%0A%0ABlockHeight%20uint64%20%60protobuf%3A%22varint%2C2%2Copt%2Cname%3Dblock_height%2Cjson%3DblockHeight%2Cproto3%22%20json%3A%22block_height%2Comitempty%22%60%0ABlockTime%20uint64%20%60protobuf%3A%22varint%2C3%2Copt%2Cname%3Dblock_time%2Cjson%3DblockTime%2Cproto3%22%20json%3A%22block_time%2Comitempty%22%60%0ABlockHash%20%5B%5Dbyte%20%60protobuf%3A%22bytes%2C4%2Copt%2Cname%3Dblock_hash%2Cjson%3DblockHash%2Cproto3%22%20json%3A%22block_hash%2Comitempty%22%60%0ALastRequestedBlock%20uint64%20%60protobuf%3A%22varint%2C5%2Copt%2Cname%3Dlast_requested_block%2Cjson%3DlastRequestedBlock%2Cproto3%22%20json%3A%22last_requested_block%2Comitempty%22%60%0A%7D%0A%0A%60%60%60%0A%0ABeaconBlockAltair%20from%20%5Blighthouse%5D(https%3A%2F%2Fgithub.com%2Fsigp%2Flighthouse%2Fblob%2Fstable%2Fconsensus%2Ftypes%2Fsrc%2Fbeacon_block.rs%23L407)%20rust%0A%0A%60%60%60%0A%0A%20%20%20%20%2F%2F%2F%20Return%20an%20Altair%20block%20where%20the%20block%20has%20maximum%20size.%0A%20%20%20%20pub%20fn%20full(spec%3A%20%26ChainSpec)%20-%3E%20Self%20%7B%0A%20%20%20%20%20%20%20%20let%20base_block%3A%20BeaconBlockBase%3C_%2C%20Payload%3E%20%3D%20BeaconBlockBase%3A%3Afull(spec)%3B%0A%20%20%20%20%20%20%20%20let%20sync_aggregate%20%3D%20SyncAggregate%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20sync_committee_signature%3A%20AggregateSignature%3A%3Aempty()%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20sync_committee_bits%3A%20BitVector%3A%3Adefault()%2C%0A%20%20%20%20%20%20%20%20%7D%3B%0A%20%20%20%20%20%20%20%20BeaconBlockAltair%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20slot%3A%20spec.genesis_slot%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20proposer_index%3A%200%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20parent_root%3A%20Hash256%3A%3Azero()%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20state_root%3A%20Hash256%3A%3Azero()%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20body%3A%20BeaconBlockBodyAltair%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20proposer_slashings%3A%20base_block.body.proposer_slashings%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20attester_slashings%3A%20base_block.body.attester_slashings%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20attestations%3A%20base_block.body.attestations%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20deposits%3A%20base_block.body.deposits%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20voluntary_exits%3A%20base_block.body.voluntary_exits%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20sync_aggregate%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20randao_reveal%3A%20Signature%3A%3Aempty()%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20eth1_data%3A%20Eth1Data%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20deposit_root%3A%20Hash256%3A%3Azero()%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20block_hash%3A%20Hash256%3A%3Azero()%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20deposit_count%3A%200%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7D%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20graffiti%3A%20Graffiti%3A%3Adefault()%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20_phantom%3A%20PhantomData%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20%7D%2C%0A%20%20%20%20%20%20%20%20%7D%0A%20%20%20%20%7D%0A%0A%7D%0A%0A%60%60%60%0A%0A%23%23%23%23%20Beacon%20State%20Data%20Structures%20from%20Prysm%0A%0A%60%60%60%0A%0Atype%20BeaconState%20interface%20%7B%0ASpecParametersProvider%0AReadOnlyBeaconState%0AWriteOnlyBeaconState%0ACopy()%20BeaconState%0AHashTreeRoot(ctx%20context.Context)%20(%5B32%5Dbyte%2C%20error)%0AFutureForkStub%0AStateProver%0A%7D%0A%0A%60%60%60%0A%0A%60%60%60%0A%0Atype%20ReadOnlyBeaconState%20interface%20%7B%0AReadOnlyBlockRoots%0AReadOnlyStateRoots%0AReadOnlyRandaoMixes%0AReadOnlyEth1Data%0AReadOnlyValidators%0AReadOnlyBalances%0AReadOnlyCheckpoint%0AReadOnlyAttestations%0AToProtoUnsafe()%20interface%7B%7D%0AToProto()%20interface%7B%7D%0AGenesisTime()%20uint64%0AGenesisValidatorsRoot()%20%5B%5Dbyte%0ASlot()%20types.Slot%0AFork()%20*ethpb.Fork%0ALatestBlockHeader()%20*ethpb.BeaconBlockHeader%0AHistoricalRoots()%20%5B%5D%5B%5Dbyte%0ASlashings()%20%5B%5Duint64%0AFieldReferencesCount()%20map%5Bstring%5Duint64%0AMarshalSSZ()%20(%5B%5Dbyte%2C%20error)%0AIsNil()%20bool%0AVersion()%20int%0ALatestExecutionPayloadHeader()%20(interfaces.ExecutionData%2C%20error)%0A%7D%0A%0A%60%60%60%0A%0A%60%60%60%0A%0Atype%20ReadOnlyValidators%20interface%20%7B%0AValidators()%20%5B%5D*ethpb.Validator%0AValidatorAtIndex(idx%20types.ValidatorIndex)%20(*ethpb.Validator%2C%20error)%0AValidatorAtIndexReadOnly(idx%20types.ValidatorIndex)%20(ReadOnlyValidator%2C%20error)%0AValidatorIndexByPubkey(key%20%5Bfieldparams.BLSPubkeyLength%5Dbyte)%20(types.ValidatorIndex%2C%20bool)%0APubkeyAtIndex(idx%20types.ValidatorIndex)%20%5Bfieldparams.BLSPubkeyLength%5Dbyte%0ANumValidators()%20int%0AReadFromEveryValidator(f%20func(idx%20int%2C%20val%20ReadOnlyValidator)%20error)%20error%0A%7D%0A%0A%60%60%60%0A%0A%60%60%60%0A%0Atype%20ReadOnlyRandaoMixes%20interface%20%7B%0ARandaoMixes()%20%5B%5D%5B%5Dbyte%0ARandaoMixAtIndex(idx%20uint64)%20(%5B%5Dbyte%2C%20error)%0ARandaoMixesLength()%20int%0A%7D%0A%0A%60%60%60%0A%0A%60%60%60%0A%0Atype%20WriteOnlyBeaconState%20interface%20%7B%0AWriteOnlyBlockRoots%0AWriteOnlyStateRoots%0AWriteOnlyRandaoMixes%0AWriteOnlyEth1Data%0AWriteOnlyValidators%0AWriteOnlyBalances%0AWriteOnlyCheckpoint%0AWriteOnlyAttestations%0ASetGenesisTime(val%20uint64)%20error%0ASetGenesisValidatorsRoot(val%20%5B%5Dbyte)%20error%0ASetSlot(val%20types.Slot)%20error%0ASetFork(val%20*ethpb.Fork)%20error%0ASetLatestBlockHeader(val%20*ethpb.BeaconBlockHeader)%20error%0ASetHistoricalRoots(val%20%5B%5D%5B%5Dbyte)%20error%0ASetSlashings(val%20%5B%5Duint64)%20error%0AUpdateSlashingsAtIndex(idx%2C%20val%20uint64)%20error%0AAppendHistoricalRoots(root%20%5B32%5Dbyte)%20error%0ASetLatestExecutionPayloadHeader(payload%20interfaces.ExecutionData)%20error%0ASetWithdrawalQueue(val%20%5B%5D*enginev1.Withdrawal)%20error%0AAppendWithdrawal(val%20*enginev1.Withdrawal)%20error%0ASetNextWithdrawalIndex(i%20uint64)%20error%0ASetNextPartialWithdrawalValidatorIndex(i%20types.ValidatorIndex)%20error%0A%7D%0A%0A%60%60%60%0A%0A%60%60%60%0A%0Atype%20WriteOnlyValidators%20interface%20%7B%0ASetValidators(val%20%5B%5D*ethpb.Validator)%20error%0AApplyToEveryValidator(f%20func(idx%20int%2C%20val%20*ethpb.Validator)%20(bool%2C%20*ethpb.Validator%2C%20error))%20error%0AUpdateValidatorAtIndex(idx%20types.ValidatorIndex%2C%20val%20*ethpb.Validator)%20error%0AAppendValidator(val%20%5C*ethpb.Validator)%20error%0A%7D%0A%0A%60%60%60%0A%0A%60%60%60%0A%0Atype%20WriteOnlyRandaoMixes%20interface%20%7B%0ASetRandaoMixes(val%20%5B%5D%5B%5Dbyte)%20error%0AUpdateRandaoMixesAtIndex(idx%20uint64%2C%20val%20%5B%5Dbyte)%20error%0A%7D%0A%0A%60%60%60%0A%0A%5BValidator%5D(https%3A%2F%2Fpkg.go.dev%2Fgithub.com%2Fprysmaticlabs%2Fprysm%2Fv3%40v3.1.2%2Fproto%2Fprysm%2Fv1alpha1%23Validator)%20information%0A%0A%60%60%60%0A%0Atype%20Validator%20struct%20%7B%0APublicKey%20%5B%5Dbyte%20%60protobuf%3A%22bytes%2C1%2Copt%2Cname%3Dpublic_key%2Cjson%3DpublicKey%2Cproto3%22%20json%3A%22public_key%2Comitempty%22%20spec-name%3A%22pubkey%22%20ssz-size%3A%2248%22%60%0AWithdrawalCredentials%20%5B%5Dbyte%20%60%60%2F*%20138-byte%20string%20literal%20not%20displayed%20*%2F%0A%20EffectiveBalance%20%20%20%20%20%20%20%20%20%20%20uint64%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%60protobuf%3A%22varint%2C3%2Copt%2Cname%3Deffective_balance%2Cjson%3DeffectiveBalance%2Cproto3%22%20json%3A%22effective_balance%2Comitempty%22%60%0A%20Slashed%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20bool%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%60protobuf%3A%22varint%2C4%2Copt%2Cname%3Dslashed%2Cproto3%22%20json%3A%22slashed%2Comitempty%22%60%0A%20ActivationEligibilityEpoch%20github_com_prysmaticlabs_prysm_v3_consensus_types_primitives.Epoch%60%60%20%2F_%20221-byte%20string%20literal%20not%20displayed%20_%2F%0AActivationEpoch%20github*com_prysmaticlabs_prysm_v3_consensus_types_primitives.Epoch%20%60%2F*%20186-byte%20string%20literal%20not%20displayed%20_%2F%0AExitEpoch%20github_com_prysmaticlabs_prysm_v3_consensus_types_primitives.Epoch%60%20%2F_%20168-byte%20string%20literal%20not%20displayed%20_%2F%0AWithdrawableEpoch%20github_com_prysmaticlabs_prysm_v3_consensus_types_primitives.Epoch%20%60%60%20%2F_%20192-byte%20string%20literal%20not%20displayed%20%5C_%2F%0A%2F%2F%20contains%20filtered%20or%20unexported%20fields%0A%7D%0A%0A%60%60%60%0A%0A%23%23%23%23%20%5Bweb3signer_types%20from%20prysm%5D(https%3A%2F%2Fgithub.com%2Fprysmaticlabs%2Fprysm%2Fblob%2Fdevelop%2Fvalidator%2Fkeymanager%2Fremote-web3signer%2Fv1%2Fweb3signer_types.go%23L107)%0A%0A%60%60%60%0A%0A%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%0A%2F%2F%20sub%20properties%20of%20Sign%20Requests%20%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%0A%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%0A%0A%2F%2F%20ForkInfo%20a%20sub%20property%20object%20of%20the%20Sign%20request%0Atype%20ForkInfo%20struct%20%7B%0AFork%20%5C*Fork%20%60json%3A%22fork%22%60%0AGenesisValidatorsRoot%20hexutil.Bytes%20%60json%3A%22genesis_validators_root%22%60%0A%7D%0A%0A%2F%2F%20Fork%20a%20sub%20property%20of%20ForkInfo.%0Atype%20Fork%20struct%20%7B%0APreviousVersion%20hexutil.Bytes%20%60json%3A%22previous_version%22%60%0ACurrentVersion%20hexutil.Bytes%20%60json%3A%22current_version%22%60%0AEpoch%20string%20%60json%3A%22epoch%22%60%20%2F_uint64_%2F%0A%7D%0A%0A%2F%2F%20AggregationSlot%20a%20sub%20property%20of%20AggregationSlotSignRequest.%0Atype%20AggregationSlot%20struct%20%7B%0ASlot%20string%20%60json%3A%22slot%22%60%0A%7D%0A%0A%2F%2F%20AggregateAndProof%20a%20sub%20property%20of%20AggregateAndProofSignRequest.%0Atype%20AggregateAndProof%20struct%20%7B%0AAggregatorIndex%20string%20%60json%3A%22aggregator_index%22%60%20%2F_%20uint64%20_%2F%0AAggregate%20_Attestation%20%60json%3A%22aggregate%22%60%0ASelectionProof%20hexutil.Bytes%20%60json%3A%22selection_proof%22%60%20%2F_%2096%20bytes%20_%2F%0A%7D%0A%0A%2F%2F%20Attestation%20a%20sub%20property%20of%20AggregateAndProofSignRequest.%0Atype%20Attestation%20struct%20%7B%0AAggregationBits%20hexutil.Bytes%20%60json%3A%22aggregation_bits%22%60%20%2F_hex%20bitlist_%2F%0AData%20%5C*AttestationData%20%60json%3A%22data%22%60%0ASignature%20hexutil.Bytes%20%60json%3A%22signature%22%60%0A%7D%0A%0A%2F%2F%20AttestationData%20a%20sub%20property%20of%20Attestation.%0Atype%20AttestationData%20struct%20%7B%0ASlot%20string%20%60json%3A%22slot%22%60%20%2F_%20uint64%20_%2F%0AIndex%20string%20%60json%3A%22index%22%60%20%2F_%20uint64%20_%2F%20%2F%2F%20Prysm%20uses%20CommitteeIndex%20but%20web3signer%20uses%20index.%0ABeaconBlockRoot%20hexutil.Bytes%20%60json%3A%22beacon_block_root%22%60%0ASource%20*Checkpoint%20%60json%3A%22source%22%60%0ATarget%20*Checkpoint%20%60json%3A%22target%22%60%0A%7D%0A%0A%2F%2F%20Checkpoint%20a%20sub%20property%20of%20AttestationData.%0Atype%20Checkpoint%20struct%20%7B%0AEpoch%20string%20%60json%3A%22epoch%22%60%0ARoot%20string%20%60json%3A%22root%22%60%0A%7D%0A%0A%60%60%60%0A%0A%5Battestation.proto%20from%20prysm%20(Message%20Structure)%5D(https%3A%2F%2Fgithub.com%2Fprysmaticlabs%2Fprysm%2Fblob%2Fdevelop%2Fproto%2Fprysm%2Fv1alpha1%2Fattestation.proto)%0A%0A%60%60%60%0A%0Amessage%20AttestationData%20%7B%0A%2F%2F%20Attestation%20data%20includes%20information%20on%20Casper%20the%20Friendly%20Finality%20Gadget's%20votes%0A%2F%2F%20See%3A%20https%3A%2F%2Farxiv.org%2Fpdf%2F1710.09437.pdf%0A%0A%20%20%20%20%2F%2F%20Slot%20of%20the%20attestation%20attesting%20for.%0A%20%20%20%20uint64%20slot%20%3D%201%20%5B(ethereum.eth.ext.cast_type)%20%3D%20%22github.com%2Fprysmaticlabs%2Fprysm%2Fv3%2Fconsensus-types%2Fprimitives.Slot%22%5D%3B%0A%0A%20%20%20%20%2F%2F%20The%20committee%20index%20that%20submitted%20this%20attestation.%0A%20%20%20%20uint64%20committee_index%20%3D%202%20%20%5B(ethereum.eth.ext.cast_type)%20%3D%20%22github.com%2Fprysmaticlabs%2Fprysm%2Fv3%2Fconsensus-types%2Fprimitives.CommitteeIndex%22%5D%3B%0A%0A%20%20%20%20%2F%2F%2032%20byte%20root%20of%20the%20LMD%20GHOST%20block%20vote.%0A%20%20%20%20bytes%20beacon_block_root%20%3D%203%20%5B(ethereum.eth.ext.ssz_size)%20%3D%20%2232%22%5D%3B%0A%0A%20%20%20%20%2F%2F%20The%20most%20recent%20justified%20checkpoint%20in%20the%20beacon%20state%0A%20%20%20%20Checkpoint%20source%20%3D%204%3B%0A%0A%20%20%20%20%2F%2F%20The%20checkpoint%20attempting%20to%20be%20justified%20for%20the%20current%20epoch%20and%20its%20epoch%20boundary%20block%0A%20%20%20%20Checkpoint%20target%20%3D%205%3B%0A%0A%7D%0A%0A%60%60%60%0A%0A%23%23%23%20Appendix%20G%3A%20Sample%20Data%0A%0A%23%23%23%23%20Epoch%20Data%20for%20167040%0A%0AFollowing%20is%20the%20Epoch%20Data%20for%20167040%0AIt%20can%20be%20retrieved%20from%20%5Bhere%5D(https%3A%2F%2Fbeaconcha.in%2Fapi%2Fv1%2Fdocs%2Findex.html%23%2FEpoch%2Fget_api_v1_epoch__epoch_)%20or%20by%20using%20this%20curl%20command%0A%0A%60curl%20-X%20'GET'%20%5C%0A%20%20'https%3A%2F%2Fbeaconcha.in%2Fapi%2Fv1%2Fepoch%2F167040'%20%5C%0A%20%20-H%20'accept%3A%20application%2Fjson'%60%0A%0AResponse%0A%0A%60%60%60%0A%0A%7B%0A%22status%22%3A%20%22OK%22%2C%0A%22data%22%3A%20%7B%0A%22attestationscount%22%3A%203457%2C%0A%22attesterslashingscount%22%3A%200%2C%0A%22averagevalidatorbalance%22%3A%2033899775551%2C%0A%22blockscount%22%3A%2032%2C%0A%22depositscount%22%3A%200%2C%0A%22eligibleether%22%3A%2015596542000000000%2C%0A%22epoch%22%3A%20167040%2C%0A%22finalized%22%3A%20true%2C%0A%22globalparticipationrate%22%3A%200.9963188171386719%2C%0A%22missedblocks%22%3A%200%2C%0A%22orphanedblocks%22%3A%200%2C%0A%22proposedblocks%22%3A%2032%2C%0A%22proposerslashingscount%22%3A%200%2C%0A%22scheduledblocks%22%3A%200%2C%0A%22totalvalidatorbalance%22%3A%2016522615004645864%2C%0A%22validatorscount%22%3A%20487396%2C%0A%22voluntaryexitscount%22%3A%200%2C%0A%22votedether%22%3A%2015539128000000000%0A%7D%0A%7D%0A%0A%60%60%60%0A%0A%23%23%23%23%20Block%20Data%20for%20Slot%205%2C330%2C592%0A%0AFollowing%20is%20the%20Block%20Data%20for%20Slot%205%2C330%2C592%0AIt%20can%20be%20retrieved%20from%20%5Bhere%5D(https%3A%2F%2Fbeaconcha.in%2Fapi%2Fv1%2Fdocs%2Findex.html%23%2FBlock%2Fget_api_v1_block__slotOrHash_)%20or%20by%20using%20this%20curl%20command%0A%0A%60curl%20-X%20'GET'%20'https%3A%2F%2Fbeaconcha.in%2Fapi%2Fv1%2Fblock%2F5330592'%20-H%20'accept%3A%20application%2Fjson'%60%0A%0AResponse%0A%0A%60%60%60%0A%0A%7B%0A%22status%22%3A%20%22OK%22%2C%0A%22data%22%3A%20%7B%0A%22attestationscount%22%3A%20126%2C%0A%22attesterslashingscount%22%3A%200%2C%0A%22blockroot%22%3A%20%220xaebe891086c79ab79b325f474dc1150f1223e567337bff815cc318f14c64c233%22%2C%0A%22depositscount%22%3A%200%2C%0A%22epoch%22%3A%20166581%2C%0A%22eth1data_blockhash%22%3A%20%220xd346f84ffe7c600b7714d6411c8bea988d9d64dbdb432f26db58e72946337954%22%2C%0A%22eth1data_depositcount%22%3A%20498785%2C%0A%22eth1data_depositroot%22%3A%20%220x9a5603a34aa60f299384679bf4bfc267e99b68278a81f343bde8cb5650bf1d60%22%2C%0A%22exec_base_fee_per_gas%22%3A%2012376913565%2C%0A%22exec_block_hash%22%3A%20%220x26239efe09f51b24bdf7c518b1aa925a3b0b6453682408ec8a5c906d5038a6e7%22%2C%0A%22exec_block_number%22%3A%2016163905%2C%0A%22exec_extra_data%22%3A%20%220x496c6c756d696e61746520446d6f63726174697a6520447374726962757465%22%2C%0A%22exec_fee_recipient%22%3A%20%220xdafea492d9c6733ae3d56b7ed1adb60692c98bc5%22%2C%0A%22exec_gas_limit%22%3A%2030000000%2C%0A%22exec_gas_used%22%3A%209901267%2C%0A%22exec_logs_bloom%22%3A%20%220x8c21554815843b4084a999b2901917a52c58004a82a8440d94919a77f9241181388a0c404f000a8c0321ab024800bf899610e60ec801fb4b0352e34f147626192648619065381ded6b9d92bcd0861120adc1ec01064e7a016ea91c478d01b81316462d2d622a60010bc0139f6fb8ccf200499c0e211a85c042047d1601aa0c2ea2833902a2a3091528492dad09f6dc064529c455d328413b78c680c4699815ac9a91610f19e66542edca45a10518ee65b02cf02241a124232d5958b6004cd0a5846c5703d00b5e4d8353221015f7d38c1429074e34aaa11f3804f933082860c401152088251479918297a1a9237d9ac35539f6d069cca07a005819494a653913%22%2C%0A%22exec_parent_hash%22%3A%20%220x06746d5ff105e96a1b8961c2490c0261b474604fbcbf934e86295c0030e26ce2%22%2C%0A%22exec_random%22%3A%20%220xc2861c72cf4d34b37ec73519dbc20b690742b5cc119ed3738f1dd67d8ca52723%22%2C%0A%22exec_receipts_root%22%3A%20%220x33cdf5c6e03dd341f282d02d3c354c2361a6212692b2a3c06b520397045313f4%22%2C%0A%22exec_state_root%22%3A%20%220x517304bade8d83337c9a52f8ceeb13f924b64486b3b8033f7c348c176922104a%22%2C%0A%22exec_timestamp%22%3A%201670791127%2C%0A%22exec_transactions_count%22%3A%20139%2C%0A%22graffiti%22%3A%20%220x0000000000000000000000000000000000000000000000000000000000000000%22%2C%0A%22graffiti_text%22%3A%20%22%22%2C%0A%22parentroot%22%3A%20%220x0cab36616bbcbbc67c343ddce00241c27d0df2c367c5fa82fc7c0fdf0ed37405%22%2C%0A%22proposer%22%3A%204345%2C%0A%22proposerslashingscount%22%3A%200%2C%0A%22randaoreveal%22%3A%20%220x83950cb64781aff91f4bd14aa6abb0f5fdb7e08e4e81c264f0754c93d7672c4a9615de196491fdb53eafdeb8f49e9cf515f1bd3dc05bb5dc0e2dd8bff5a8d783b503e3385e80b61485f0ddac1caa9361132a863db84e7e234df5815e6908e4e7%22%2C%0A%22signature%22%3A%20%220x84865a9480ae6313b0e5fcadfa294b35f5963e06c66ad1c7613dc081e9700c07f82a2583ba4b62b2483b4a1b9d49aafe0690f22fcf4d0072f9f44a5ce3067ef4fda560d171001cc6bf5dc84e09d9055d92894b86b27695c297f25530cd8db7a0%22%2C%0A%22slot%22%3A%205330592%2C%0A%22stateroot%22%3A%20%220x9e7e40d844c3b229cd9497d662a6d94276d285945073849995aba93c7e73cfe7%22%2C%0A%22status%22%3A%20%221%22%2C%0A%22syncaggregate_bits%22%3A%20%220xdffffffffffffffffffffffffffffff7fffffffffffffffffffffffffffffffffffffffffffffffffffffffdfffffffffffffffdffffffffffffffffffffffff%22%2C%0A%22syncaggregate_participation%22%3A%200.9921875%2C%0A%22syncaggregate_signature%22%3A%20%220x95332c55790018eed3d17eada01cb4045348d09137505bc8697eeedaa3800a830ee2c138251850a9577f62a5488419ef0a722579156a177fb3a147017f1077af5d778f46a4cdf815fc450129d135fe5286e16df68333592e4aa45821bde780dd%22%2C%0A%22voluntaryexitscount%22%3A%200%2C%0A%22votes%22%3A%2019227%0A%7D%0A%7D%0A%0A%60%60%60%0A%0A%23%23%23%23%20Execution%20Block%20for%2016163905%0A%0AFollowing%20is%20the%20execution%20block%20data%20for%2016163905%0AIt%20can%20be%20retrieved%20from%20%5Bhere%5D(https%3A%2F%2Fbeaconcha.in%2Fapi%2Fv1%2Fdocs%2Findex.html%23%2FExecution%2Fget_api_v1_execution_block__blockNumber_)%20or%20by%20using%20this%20curl%20command%0A%0A%60curl%20-X%20'GET'%20'https%3A%2F%2Fbeaconcha.in%2Fapi%2Fv1%2Fexecution%2Fblock%2F16163905'%20%20-H%20'accept%3A%20application%2Fjson'%60%0A%0AResult%0A%0A%60%60%60%0A%0A%7B%0A%22status%22%3A%20%22OK%22%2C%0A%22data%22%3A%20%5B%0A%7B%0A%22blockHash%22%3A%20%220x26239efe09f51b24bdf7c518b1aa925a3b0b6453682408ec8a5c906d5038a6e7%22%2C%0A%22blockNumber%22%3A%2016163905%2C%0A%22timestamp%22%3A%201670791127%2C%0A%22blockReward%22%3A%2037343826945103810%2C%0A%22blockMevReward%22%3A%2037083911760238810%2C%0A%22producerReward%22%3A%2037083911760238810%2C%0A%22feeRecipient%22%3A%20%220xdafea492d9c6733ae3d56b7ed1adb60692c98bc5%22%2C%0A%22gasLimit%22%3A%2030000000%2C%0A%22gasUsed%22%3A%209901267%2C%0A%22baseFee%22%3A%2012376913565%2C%0A%22txCount%22%3A%20139%2C%0A%22internalTxCount%22%3A%2054%2C%0A%22uncleCount%22%3A%200%2C%0A%22parentHash%22%3A%20%220x06746d5ff105e96a1b8961c2490c0261b474604fbcbf934e86295c0030e26ce2%22%2C%0A%22uncleHash%22%3A%20%220x1dcc4de8dec75d7aab85b567b6ccd41ad312451b948a7413f0a142fd40d49347%22%2C%0A%22difficulty%22%3A%200%2C%0A%22posConsensus%22%3A%20%7B%0A%22executionBlockNumber%22%3A%2016163905%2C%0A%22proposerIndex%22%3A%204345%2C%0A%22slot%22%3A%205330592%2C%0A%22epoch%22%3A%20166581%2C%0A%22finalized%22%3A%20true%0A%7D%2C%0A%22relay%22%3A%20%7B%0A%22tag%22%3A%20%22flashbots-relay%22%2C%0A%22builderPubkey%22%3A%20%220x81beef03aafd3dd33ffd7deb337407142c80fea2690e5b3190cfc01bde5753f28982a7857c96172a75a234cb7bcb994f%22%2C%0A%22producerFeeRecipient%22%3A%20%220x60987e0d8b5e0095869ca6f0e642828e3f258bb5%22%0A%7D%2C%0A%22consensusAlgorithm%22%3A%20%22pos%22%0A%7D%0A%5D%0A%7D%0A%0A%60%60%60%0A%0A%23%23%23%23%20Sync%20Committee%20(latest)%0A%0AFollowing%20is%20a%20sample%20Sync%20Committee%0AIt%20can%20be%20retrieved%20from%20%5Bhere%5D(https%3A%2F%2Fbeaconcha.in%2Fapi%2Fv1%2Fdocs%2Findex.html%23%2FSyncCommittee%2Fget_api_v1_sync_committee__period_)%20or%20by%20using%20this%20curl%20command%0A%0A%60curl%20-X%20'GET'%20'https%3A%2F%2Fbeaconcha.in%2Fapi%2Fv1%2Fsync_committee%2Flatest'%20-H%20'accept%3A%20application%2Fjson'%60%0A%0AAbbrieviated%20Result%0A%0A%60%60%60%0A%0A%7B%0A%22status%22%3A%20%22OK%22%2C%0A%22data%22%3A%20%7B%0A%22end_epoch%22%3A%20167167%2C%0A%22period%22%3A%20652%2C%0A%22start_epoch%22%3A%20166912%2C%0A%22validators%22%3A%20%5B%0A328781%2C%0A184949%2C%0A...%0A%5D%0A%7D%0A%7D%0A%0A%60%60%60%0A%0A%3Cdetails%3E%0A%3Csummary%3EFull%20Result%3C%2Fsummary%3E%0A%0A%60%60%60%0A%0A%7B%0A%22status%22%3A%20%22OK%22%2C%0A%22data%22%3A%20%7B%0A%22end_epoch%22%3A%20167167%2C%0A%22period%22%3A%20652%2C%0A%22start_epoch%22%3A%20166912%2C%0A%22validatorsdetails%3E%0A%0A%23%23%23%20Appendix%20H%3A%20Sync%20Committe%20Creation%20and%20Retrieval%0A%0A**Sync%20Committee%20Configuration**%0A%0A%60EPOCHS_PER_SYNC_COMMITTEE_PERIOD%60%20is%20set%20in%20%5Bconfig.go%5D(https%3A%2F%2Fgithub.com%2Fprysmaticlabs%2Fprysm%2Fblob%2Fdevelop%2Fconfig%2Fparams%2Fconfig.go%23L185)%20currently%20255%20epochs%20per%20synch%20comittee%20(approx%2027%20hrs)%20for%20Ethreum%20Mainnet.%0A%0A**Sync%20Committee%20Update%20Process**%0A%0A-%20%5Bbeacon-chain%2Fblockchain%5D(https%3A%2F%2Fgithub.com%2Fprysmaticlabs%2Fprysm%2Ftree%2Fdevelop%2Fbeacon-chain%2Fblockchain)%0A%20%20-%20%5Bprocess_block.go%5D(https%3A%2F%2Fgithub.com%2Fprysmaticlabs%2Fprysm%2Fblob%2Fdevelop%2Fbeacon-chain%2Fblockchain%2Fprocess_block.go)%3A%20has%20function%20%60onBlock%60%20which%20is%20called%20when%20a%20gossip%20block%20is%20received.%20It%20also%20has%20function%20%60handleEpochBoundary%60%20which%20calls%20%60ProcessSlots%60%20in%20%5Bbeacon-chain%2Fcore%2Ftransition%5D(https%3A%2F%2Fgithub.com%2Fprysmaticlabs%2Fprysm%2Ftree%2Fdevelop%2Fbeacon-chain%2Fcore%2Ftransition)%20and%20calls%20function%20%60UpdateCommitteeCache%60%20in%20%5Bbeacon-chain%2Fcore%2Fhelpers%5D(https%3A%2F%2Fgithub.com%2Fprysmaticlabs%2Fprysm%2Ftree%2Fdevelop%2Fbeacon-chain%2Fcore%2Fhelpers)%0A-%20%5Bbeacon-chain%2Fcore%2Ftransition%5D(https%3A%2F%2Fgithub.com%2Fprysmaticlabs%2Fprysm%2Ftree%2Fdevelop%2Fbeacon-chain%2Fcore%2Ftransition)%0A%20%20-%20%5Btransition.go%5D(https%3A%2F%2Fgithub.com%2Fprysmaticlabs%2Fprysm%2Fblob%2Fdevelop%2Fbeacon-chain%2Fcore%2Ftransition%2Ftransition.go)%3A%20implements%20the%20whole%20state%20transition%20function%20which%20consists%20of%20per%20slot%2C%20per-epoch%20transitions.%20function%20%60ProcessSlots%60%20calls%20%60ProcessEpoch%60%20in%20%5Bbeacon-chain%2Fcore%2Faltair%2Ftransition.go%5D(%3C(%253Chttps%3A%2F%2Fgithub.com%2Fprysmaticlabs%2Fprysm%2Fblob%2Fdevelop%2Fbeacon-chain%2Fcore%2Faltair%2Ftransition.go)%253E%3E)%0A-%20%5Bbeacon-chain%2Fcore%2Faltair%5D(https%3A%2F%2Fgithub.com%2Fprysmaticlabs%2Fprysm%2Ftree%2Fdevelop%2Fbeacon-chain%2Fcore%2Faltair)%0A%20%20-%20%5Btransition.go%5D(https%3A%2F%2Fgithub.com%2Fprysmaticlabs%2Fprysm%2Fblob%2Fdevelop%2Fbeacon-chain%2Fcore%2Faltair%2Ftransition.go)%3A%20includes%20function%20%60ProcessEpoch%60%20which%20calls%20%60ProcessSyncCommitteeUpdates%60%20in%20%5Bepoch_spec.go%5D(https%3A%2F%2Fgithub.com%2Fprysmaticlabs%2Fprysm%2Fblob%2Fdevelop%2Fbeacon-chain%2Fcore%2Faltair%2Fepoch_spec.go)%0A%20%20-%20%5Bepoch_spec.go%5D(https%3A%2F%2Fgithub.com%2Fprysmaticlabs%2Fprysm%2Fblob%2Fdevelop%2Fbeacon-chain%2Fcore%2Faltair%2Fepoch_spec.go)%3A%20includes%20function%20%60ProcessSyncCommitteeUpdates%60%20which%20calls%20%60NextSyncCommittee%60%20it%20also%20persists%20beacon%20state%20syncCommittee%20by%20calling%20%60beaconState.SetNextSyncCommittee(nextSyncCommittee)%60%20in%20%5Bsetters_sync_committee.go%5D(https%3A%2F%2Fgithub.com%2Fprysmaticlabs%2Fprysm%2Fblob%2Fdevelop%2Fbeacon-chain%2Fstate%2Fstate-native%2Fsetters_sync_committee.go)%0A%20%20-%20%5Bsync_committee.go%5D(https%3A%2F%2Fgithub.com%2Fprysmaticlabs%2Fprysm%2Fblob%2Fdevelop%2Fbeacon-chain%2Fcore%2Faltair%2Fsync_committee.go)%3A%20includes%20function%20%60NextSyncCommittee%60%20which%20calls%20%60NextSyncCommittee%60%20to%20return%20the%20sync%20committee%20indices%2C%20with%20possible%20duplicates%2C%20for%20the%20next%20sync%20committee.%0A%20%20-%20%5Bblock.go%5D(https%3A%2F%2Fgithub.com%2Fprysmaticlabs%2Fprysm%2Fblob%2Fdevelop%2Fbeacon-chain%2Fcore%2Faltair%2Fblock.go)%3A%20includes%20function%20%60VerifySyncCommitteeSig%60%0A-%20%5Bbeacon-chain%2Fcore%2Fhelpers%5D(https%3A%2F%2Fgithub.com%2Fprysmaticlabs%2Fprysm%2Ftree%2Fdevelop%2Fbeacon-chain%2Fcore%2Fhelpers)%0A%20%20-%20%5Bbeacon_committee.go%5D(https%3A%2F%2Fgithub.com%2Fprysmaticlabs%2Fprysm%2Fblob%2Fdevelop%2Fbeacon-chain%2Fcore%2Fhelpers%2Fbeacon_committee.go)%20has%20function%20%60UpdateCommitteeCache%60%20which%20gets%20called%20at%20the%20beginning%20of%20every%20epoch%20to%20cache%20the%20committee%20shuffled%20indices%20list%20with%20committee%20index%20and%20epoch%20number.%20It%20caches%20the%20shuffled%20indices%20for%20current%20epoch%20and%20next%20epoch.%20it%20calls%20%60UpdatePositionsInCommittee%60%20in%20%5Bsync_committee.go%5D(https%3A%2F%2Fgithub.com%2Fprysmaticlabs%2Fprysm%2Fblob%2Fdevelop%2Fbeacon-chain%2Fcache%2Fsync_committee.go)%0A-%20%5Bbeacon-chain%2Fcache%5D(https%3A%2F%2Fgithub.com%2Fprysmaticlabs%2Fprysm%2Ftree%2Fdevelop%2Fbeacon-chain%2Fcache)%0A%20%20-%20%5Bsync_committee.go%5D(https%3A%2F%2Fgithub.com%2Fprysmaticlabs%2Fprysm%2Fblob%2Fdevelop%2Fbeacon-chain%2Fcache%2Fsync_committee.go)%3A%20has%20function%20%60UpdatePositionsInCommittee%60%20which%20updates%20caching%20of%20validators%20position%20in%20sync%20committee%20in%20respect%20to%20current%20epoch%20and%20next%20epoch.%20This%20should%20be%20called%20when%20%60current_sync_committee%60%20and%20%60next_sync_committee%60%20change%20and%20that%20happens%20every%20%60EPOCHS_PER_SYNC_COMMITTEE_PERIOD%60.%0A%0A**Sync%20Committee%20Retrieval**%0AgRPC%20and%20API%20methods%0A%0A-%20%5Bbeacon-chain%2Frpc%5D(https%3A%2F%2Fgithub.com%2Fprysmaticlabs%2Fprysm%2Ftree%2Fdevelop%2Fbeacon-chain%2Frpc)%0A%20%20-%20%5Bprysm%2Fv1alpha1%5D(https%3A%2F%2Fgithub.com%2Fprysmaticlabs%2Fprysm%2Ftree%2Fdevelop%2Fbeacon-chain%2Frpc%2Fprysm%2Fv1alpha1)%0A%20%20%20%20-%20%5Bvalidator%5D(https%3A%2F%2Fgithub.com%2Fprysmaticlabs%2Fprysm%2Ftree%2Fdevelop%2Fbeacon-chain%2Frpc%2Fprysm%2Fv1alpha1%2Fvalidator)%0A%20%20%20%20%20%20-%20%5Bassignments.go%5D(https%3A%2F%2Fgithub.com%2Fprysmaticlabs%2Fprysm%2Fblob%2Fdevelop%2Fbeacon-chain%2Frpc%2Fprysm%2Fv1alpha1%2Fvalidator%2Fassignments.go)%3A%20has%20functions%20%60GetDuties%60%20and%20%60StreamDuties%60%20which%20calls%20function%20%60duties%60%20to%20compute%20the%20validator%20duties%20from%20the%20head%20state's%20corresponding%20epoch%20for%20validators%20public%20key%20%2F%20indices%20requested.%0A%0Awhich%20%5Bmanages%20sync%20committee%20duties%5D(https%3A%2F%2Fgithub.com%2Fprysmaticlabs%2Fprysm%2Fblob%2Fdevelop%2Fbeacon-chain%2Frpc%2Fprysm%2Fv1alpha1%2Fvalidator%2Fassignments.go%23L213)%20every%20%60EPOCHS_PER_SYNC_COMMITTEE_PERIOD%20-%201%60%20which%20is%20set%20in%20%5Bconfig.go%5D(https%3A%2F%2Fgithub.com%2Fprysmaticlabs%2Fprysm%2Fblob%2Fdevelop%2Fconfig%2Fparams%2Fconfig.go%23L185)%20currently%20255%20epochs%20per%20synch%20comittee%20(approx%2027%20hrs)%20for%20Ethreum%20Mainnet.%0A%0A%5BregisterSyncSubnetNextPeriod%5D(https%3A%2F%2Fgithub.com%2Fprysmaticlabs%2Fprysm%2Fblob%2Fdevelop%2Fbeacon-chain%2Frpc%2Fprysm%2Fv1alpha1%2Fvalidator%2Fassignments.go%23L281)%0A%0A%60%60%60%0A%0Afunc%20registerSyncSubnetNextPeriod(s%20beaconState.BeaconState%2C%20epoch%20types.Epoch%2C%20pubKey%20%5B%5Dbyte%2C%20status%20ethpb.ValidatorStatus)%20error%20%7B%0Acommittee%2C%20err%20%3A%3D%20s.NextSyncCommittee()%0Aif%20err%20!%3D%20nil%20%7B%0Areturn%20err%0A%7D%0AsyncCommPeriod%20%3A%3D%20slots.SyncCommitteePeriod(epoch)%0AregisterSyncSubnet(epoch%2C%20syncCommPeriod%2B1%2C%20pubKey%2C%20committee%2C%20status)%0Areturn%20nil%0A%7D%0A%0A%60%60%60%0A%0A**Sync%20Committee%20Storage**%0A%0APersistence%20Mechanism%0A%0A-%20%5Bproto%5D(https%3A%2F%2Fgithub.com%2Fprysmaticlabs%2Fprysm%2Ftree%2Fdevelop%2Fproto)%0A%20%20-%20%5Beth%2Fv2%5D(https%3A%2F%2Fgithub.com%2Fprysmaticlabs%2Fprysm%2Ftree%2Fdevelop%2Fproto%2Feth%2Fv2)%0A%20%20%20%20-%20%5Bvalidator.proto%5D(https%3A%2F%2Fgithub.com%2Fprysmaticlabs%2Fprysm%2Fblob%2Fdevelop%2Fproto%2Feth%2Fv2%2Fvalidator.proto)%3A%20messages%20for%20validators%20including%20%60SyncCommitteeDuty%60%0A%20%20%20%20-%20%5Bsync_committee.proto%5D(https%3A%2F%2Fgithub.com%2Fprysmaticlabs%2Fprysm%2Fblob%2Fdevelop%2Fproto%2Feth%2Fv2%2Fsync_committee.proto)%3A%20messages%20for%20SyncCommittee%20which%20serves%20as%20committees%20to%20facilitate%20light%20client%20syncing%20to%20beacon%20chain.%0A%0A%5Bbeacon_state_mainnet.go%5D(https%3A%2F%2Fgithub.com%2Fprysmaticlabs%2Fprysm%2Fblob%2Fv3.1.2%2Fbeacon-chain%2Fstate%2Fstate-native%2Fbeacon_state_mainnet.go)%0A%0A%60%60%60%0A%0A%2F%2F%20BeaconState%20defines%20a%20struct%20containing%20utilities%20for%20the%20Ethereum%20Beacon%20Chain%20state%2C%20defining%0A%2F%2F%20getters%20and%20setters%20for%20its%20respective%20values%20and%20helpful%20functions%20such%20as%20HashTreeRoot().%0Atype%20BeaconState%20struct%20%7B%0Aversion%20int%0AgenesisTime%20uint64%0AgenesisValidatorsRoot%20%5B32%5Dbyte%0Aslot%20eth2types.Slot%0Afork%20*ethpb.Fork%0AlatestBlockHeader%20*ethpb.BeaconBlockHeader%0AblockRoots%20*customtypes.BlockRoots%0AstateRoots%20*customtypes.StateRoots%0AhistoricalRoots%20customtypes.HistoricalRoots%0Aeth1Data%20*ethpb.Eth1Data%0Aeth1DataVotes%20%5B%5D*ethpb.Eth1Data%0Aeth1DepositIndex%20uint64%0Avalidators%20%5B%5D*ethpb.Validator%0Abalances%20%5B%5Duint64%0ArandaoMixes%20*customtypes.RandaoMixes%0Aslashings%20%5B%5Duint64%0ApreviousEpochAttestations%20%5B%5D*ethpb.PendingAttestation%0AcurrentEpochAttestations%20%5B%5D*ethpb.PendingAttestation%0ApreviousEpochParticipation%20%5B%5Dbyte%0AcurrentEpochParticipation%20%5B%5Dbyte%0AjustificationBits%20bitfield.Bitvector4%0ApreviousJustifiedCheckpoint%20*ethpb.Checkpoint%0AcurrentJustifiedCheckpoint%20*ethpb.Checkpoint%0AfinalizedCheckpoint%20*ethpb.Checkpoint%0AinactivityScores%20%5B%5Duint64%0AcurrentSyncCommittee%20*ethpb.SyncCommittee%0AnextSyncCommittee%20*ethpb.SyncCommittee%0AlatestExecutionPayloadHeader%20*enginev1.ExecutionPayloadHeader%0AlatestExecutionPayloadHeaderCapella%20%5C*enginev1.ExecutionPayloadHeaderCapella%0AnextWithdrawalIndex%20uint64%0AnextWithdrawalValidatorIndex%20eth2types.ValidatorIndex%0A%0Alock%20sync.RWMutex%0AdirtyFields%20map%5Bnativetypes.FieldIndex%5Dbool%0AdirtyIndices%20map%5Bnativetypes.FieldIndex%5D%5B%5Duint64%0AstateFieldLeaves%20map%5Bnativetypes.FieldIndex%5D*fieldtrie.FieldTrie%0ArebuildTrie%20map%5Bnativetypes.FieldIndex%5Dbool%0AvalMapHandler%20*stateutil.ValidatorMapHandler%0AmerkleLayers%20%5B%5D%5B%5D%5B%5Dbyte%0AsharedFieldReferences%20map%5Bnativetypes.FieldIndex%5D%5C*stateutil.Reference%0A%7D%0A%0A%60%60%60%0A%0A%5Bbeacon_state.pb.go%5D(https%3A%2F%2Fgithub.com%2Fprysmaticlabs%2Fprysm%2Fblob%2Fdevelop%2Fproto%2Fprysm%2Fv1alpha1%2Fbeacon_state.pb.go%23L962)%0A%0A%60%60%60%0A%0Atype%20SyncCommittee%20struct%20%7B%0Astate%20protoimpl.MessageState%0AsizeCache%20protoimpl.SizeCache%0AunknownFields%20protoimpl.UnknownFields%0A%0APubkeys%20%5B%5D%5B%5Dbyte%20%60protobuf%3A%22bytes%2C1%2Crep%2Cname%3Dpubkeys%2Cproto3%22%20json%3A%22pubkeys%2Comitempty%22%20ssz-size%3A%22512%2C48%22%60%0AAggregatePubkey%20%5B%5Dbyte%20%60protobuf%3A%22bytes%2C2%2Copt%2Cname%3Daggregate_pubkey%2Cjson%3DaggregatePubkey%2Cproto3%22%20json%3A%22aggregate_pubkey%2Comitempty%22%20ssz-size%3A%2248%22%60%0A%7D%0A%0A%60%60%60%0A%0A%5BInterfaces%5D(https%3A%2F%2Fgithub.com%2Fprysmaticlabs%2Fprysm%2Fblob%2Fv3.1.2%2Fbeacon-chain%2Fstate%2Finterfaces.go)%0A%0A%60%60%60%0A%0A%2F%2F%20BeaconState%20has%20read%20and%20write%20access%20to%20beacon%20state%20methods.%0Atype%20BeaconState%20interface%20%7B%0ASpecParametersProvider%0AReadOnlyBeaconState%0AReadOnlyWithdrawals%0AWriteOnlyBeaconState%0ACopy()%20BeaconState%0AHashTreeRoot(ctx%20context.Context)%20(%5B32%5Dbyte%2C%20error)%0AFutureForkStub%0AStateProver%0A%7D%0A%0A%60%60%60%0A%0A%60%60%60%0A%0A%2F%2F%20StateProver%20defines%20the%20ability%20to%20create%20Merkle%20proofs%20for%20beacon%20state%20fields.%0Atype%20StateProver%20interface%20%7B%0AFinalizedRootProof(ctx%20context.Context)%20(%5B%5D%5B%5Dbyte%2C%20error)%0ACurrentSyncCommitteeProof(ctx%20context.Context)%20(%5B%5D%5B%5Dbyte%2C%20error)%0ANextSyncCommitteeProof(ctx%20context.Context)%20(%5B%5D%5B%5Dbyte%2C%20error)%0A%7D%0A%0A%60%60%60%0A%0A%60%60%60%0A%0A%60%60%60%0A",lastUpdatedAt:1753129136e3},{lazy:()=>o2(()=>import("./harmony-Bb4x8qku.js"),[]),path:"/research/chains/harmony",type:"mdx",filePath:"research/chains/harmony.mdx",content:"%23%20Harmony%0A%0A-%20date%3A%202023-02-04%0A-%20last%20updated%3A%202023-02-04%0A%0A%23%23%20Overview%0A%0ADespite%20relatively%20lower%20usage%20than%20other%20candidates%2C%20Harmony%20has%20a%20mature%2C%20battle-tested%20implementation%20for%20fast%20consensus%20using%20BLS-based%20signature%20schemes%2C%20which%20has%20been%20in%20production%20for%20over%202%20years.%20Additionally%2C%20many%20other%20chains%20are%20also%20moving%20towards%20using%20BLS%20for%20signing%20blocks%20in%20their%20consensus%20protocols.%0A%0AHarmony%20follows%20a%20two-round%20Fast%20Byzantine%20Fault%20Tolerance%20consensus%20derived%20from%20PBFT%2C%20where%20BLS%20signatures%20(on%20the%20BLS12-381%20curve)%20are%20used%20to%20reduce%20communication%20costs%5B%5E1%5D.%20Blocks%20are%20produced%20by%20validator%20leaders%2C%20a%20minimal%20subset%20of%20validators%2C%20then%20further%20broadcasted%20to%20all%20validators%20and%20confirmed%20when%20more%20than%202%2F3%20of%20validators%20sign%20the%20block%20with%20their%20own%20BLS%20signatures.%20The%20leader%20then%20aggregates%20the%20signatures%20into%20a%20single%20one%20and%20broadcasts%20again.%20The%20validators%20may%20verify%20the%20aggregated%20signature%20and%20sign%20the%20block%20again%20before%20sending%20the%20signed%20block%20back%20to%20the%20leader.%20Finally%2C%20the%20leader%20(after%20receiving%20signatures%20from%202%2F3%20of%20the%20validators)%20may%20aggregate%20the%20signature%20for%20one%20last%20time%20and%20finalize%20the%20block.%20In%20the%20block%20header%2C%20the%20leader%20records%20which%20validators'%20signatures%20are%20received%20in%20each%20round.%0A%0AThe%20protocol%20uses%20a%20slot-bidding%20mechanism%20to%20elect%20a%20variable%20number%20of%20validators%20to%20fill%20800-slots%2C%20where%20each%20validator%20may%20occupy%20multiple%20slots%20if%20their%20total%20delegated%20stake%20per%20slot%20is%20greater%20than%20the%20effective%20median%5B%5E2%5D.%0A%0A%23%23%20Consensus%20Mechanism%0A%0A%23%23%23%20Harmony%20Fast%20Byzantine%20Fault%20Tolerance%20(FBFT)%0A%0AThe%20following%20is%20an%20excerpt%20from%20%5BConsensus%5D(https%3A%2F%2Fdocs.harmony.one%2Fhome%2Fgeneral%2Ftechnology%2Fconsensus)%0A%0A%3E%20The%20consensus%20algorithm%20is%20a%20key%20component%20of%20any%20blockchain.%20It%20determines%20the%20security%20and%20performance%20of%20a%20blockchain%20and%20is%20often%20referred%20to%20as%20the%20%22engine%22%20of%20a%20blockchain.%20Harmony%E2%80%99s%20consensus%20algorithm%20is%20called%20Fast%20Byzantine%20Fault%20Tolerance%20(FBFT)%2C%20which%20is%20an%20innovative%20upgrade%20on%20the%20famous%20PBFT%20algorithm.%20FBFT%20is%20one%20order%20of%20magnitude%20faster%20and%20more%20scalable%20than%20PBFT%20because%20BLS%20(Boneh%E2%80%93Lynn%E2%80%93Shacham)%20aggregate%20signature%20is%20used%20to%20significantly%20reduce%20the%20communication%20cost.%20Specifically%2C%20FBFT%20allows%20at%20least%20250%20validators%20to%20reach%20consensus%20within%202%20seconds.%0A%3E%0A%3E%20For%20every%20round%20of%20consensus%20in%20FBFT%2C%20one%20validator%20serves%20as%20the%20%E2%80%9Cleader%E2%80%9D%20and%20there%20are%20three%20phases%3A%20the%20announce%20phase%2C%20the%20prepare%20phase%20and%20the%20commit%20phase.%20In%20the%20announce%20phase%2C%20the%20leader%20proposes%20a%20new%20block%20and%20broadcasts%20the%20block%20hash%20to%20all%20of%20the%20validators.%20In%20the%20prepare%20phase%2C%20validators%20verify%20the%20message%20and%20sign%20on%20the%20block%20hash%2C%20as%20well%20as%20sending%20the%20signature%20back%20to%20the%20leader.%20The%20prepare%20phase%20finishes%20when%20signatures%20with%20more%20than%202%2F3%20of%20the%20voting%20power%20are%20collected.%20After%20that%2C%20the%20leader%20aggregated%20the%20collected%20signatures%20into%20a%20O(1)-sized%20BLS%20aggregate%20signature%20and%20then%20broadcast%20it%20with%20the%20whole%20block%20to%20start%20the%20commit%20phase.%20The%20commit%20phase%20involves%20validators%20verifying%20the%20block%20and%20doing%20a%20similar%20signing%20process%20as%20the%20prepare%20phase%20(i.e.%202%2F3%20voting%20power%20collection).%20The%20consensus%20is%20reached%20after%20the%20commit%20phase%20is%20done.%20This%20whole%20process%20can%20be%20done%20within%202%20seconds%20in%20mainnet.%0A%0AThe%20following%20is%20an%20excerpt%20from%20%5BEpoch%20Transition%5D(https%3A%2F%2Fdocs.harmony.one%2Fhome%2Fnetwork%2Fvalidators%2Fdefinitions%2Fepoch-transition)%0A%0A%3E%20An%20epoch%20is%20a%20period%20of%20time%20when%20the%20beacon%20shard%20(i.e.%20shard%200%2C%20the%20coordinator%20for%20other%20shards)%20produces%20a%20fixed%20number%20of%20blocks.%20In%20Harmony%20mainnet%2C%20an%20epoch%20is%2032768%20blocks%20(~18.2h%20with%20a%202s%20block%20time)%20in%20the%20beacon%20shard%0A%0A_Note%3A%20If%20the%20leader%20fails%20to%20produce%20a%20block%20within%20a%20certain%20time%20frame%2C%20then%20a%20new%20leader%20is%20elected_%0A%0A!%5BHarmony%20FBFT%5D(%2Fassets%2F%2Fresearch%2Fharmony-consensus.png%20%22Harmony%20FBFT%22)%0A%0ABlock%20Structure%20from%20%5Bharmony%5D(https%3A%2F%2Fgithub.com%2Fharmony-one%2Fharmony%2Fblob%2Fmain%2Fblock%2Fv3%2Fheader.go)%0A%0A%60%60%60%0Atype%20headerFields%20struct%20%7B%0A%20ParentHash%20%20%20%20%20%20%20%20%20%20common.Hash%20%20%20%20%60json%3A%22parentHash%22%20%20%20%20%20%20%20gencodec%3A%22required%22%60%0A%20Coinbase%20%20%20%20%20%20%20%20%20%20%20%20common.Address%20%60json%3A%22miner%22%20%20%20%20%20%20%20%20%20%20%20%20gencodec%3A%22required%22%60%0A%20Root%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20common.Hash%20%20%20%20%60json%3A%22stateRoot%22%20%20%20%20%20%20%20%20gencodec%3A%22required%22%60%0A%20TxHash%20%20%20%20%20%20%20%20%20%20%20%20%20%20common.Hash%20%20%20%20%60json%3A%22transactionsRoot%22%20gencodec%3A%22required%22%60%0A%20ReceiptHash%20%20%20%20%20%20%20%20%20common.Hash%20%20%20%20%60json%3A%22receiptsRoot%22%20%20%20%20%20gencodec%3A%22required%22%60%0A%20OutgoingReceiptHash%20common.Hash%20%20%20%20%60json%3A%22outgoingReceiptsRoot%22%20%20%20%20%20gencodec%3A%22required%22%60%0A%20IncomingReceiptHash%20common.Hash%20%20%20%20%60json%3A%22incomingReceiptsRoot%22%20gencodec%3A%22required%22%60%0A%20Bloom%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20ethtypes.Bloom%20%60json%3A%22logsBloom%22%20%20%20%20%20%20%20%20gencodec%3A%22required%22%60%0A%20Number%20%20%20%20%20%20%20%20%20%20%20%20%20%20*big.Int%20%20%20%20%20%20%20%60json%3A%22number%22%20%20%20%20%20%20%20%20%20%20%20gencodec%3A%22required%22%60%0A%20GasLimit%20%20%20%20%20%20%20%20%20%20%20%20uint64%20%20%20%20%20%20%20%20%20%60json%3A%22gasLimit%22%20%20%20%20%20%20%20%20%20gencodec%3A%22required%22%60%0A%20GasUsed%20%20%20%20%20%20%20%20%20%20%20%20%20uint64%20%20%20%20%20%20%20%20%20%60json%3A%22gasUsed%22%20%20%20%20%20%20%20%20%20%20gencodec%3A%22required%22%60%0A%20Time%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20*big.Int%20%20%20%20%20%20%20%60json%3A%22timestamp%22%20%20%20%20%20%20%20%20gencodec%3A%22required%22%60%0A%20Extra%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%5B%5Dbyte%20%20%20%20%20%20%20%20%20%60json%3A%22extraData%22%20%20%20%20%20%20%20%20gencodec%3A%22required%22%60%0A%20MixDigest%20%20%20%20%20%20%20%20%20%20%20common.Hash%20%20%20%20%60json%3A%22mixHash%22%20%20%20%20%20%20%20%20%20%20gencodec%3A%22required%22%60%0A%20%2F%2F%20Additional%20Fields%0A%20ViewID%20%20%20%20%20%20%20%20%20%20%20%20%20%20*big.Int%20%60json%3A%22viewID%22%20%20%20%20%20%20%20%20%20%20%20gencodec%3A%22required%22%60%0A%20Epoch%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20*big.Int%20%60json%3A%22epoch%22%20%20%20%20%20%20%20%20%20%20%20%20gencodec%3A%22required%22%60%0A%20ShardID%20%20%20%20%20%20%20%20%20%20%20%20%20uint32%20%20%20%60json%3A%22shardID%22%20%20%20%20%20%20%20%20%20%20gencodec%3A%22required%22%60%0A%20LastCommitSignature%20%5B96%5Dbyte%20%60json%3A%22lastCommitSignature%22%20%20gencodec%3A%22required%22%60%0A%20LastCommitBitmap%20%20%20%20%5B%5Dbyte%20%20%20%60json%3A%22lastCommitBitmap%22%20%20%20%20%20gencodec%3A%22required%22%60%20%2F%2F%20Contains%20which%20validator%20signed%0A%20Vrf%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%5B%5Dbyte%20%20%20%60json%3A%22vrf%22%60%0A%20Vdf%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%5B%5Dbyte%20%20%20%60json%3A%22vdf%22%60%0A%20ShardState%20%20%20%20%20%20%20%20%20%20%5B%5Dbyte%20%20%20%60json%3A%22shardState%22%60%0A%20CrossLinks%20%20%20%20%20%20%20%20%20%20%5B%5Dbyte%20%20%20%60json%3A%22crossLink%22%60%0A%20Slashes%20%20%20%20%20%20%20%20%20%20%20%20%20%5B%5Dbyte%20%20%20%60json%3A%22slashes%22%60%0A%7D%0A%60%60%60%0A%0A%23%23%20Signing%20Mechanism%0A%0AHarmony%20uses%20BLS12_381%20signatures%20for%20validators%20signing%20blocks.%20They%20began%20work%20on%20enhancing%20the%20%5Bherumi%2Fbls%20package%5D(https%3A%2F%2Fgithub.com%2Fherumi%2Fbls)%20in%20Jan%202019%20to%20%5Bsupport%20BLS12_381%5D(https%3A%2F%2Fgithub.com%2Fharmony-one%2Fbls%2Fcommit%2F302fc1eea9d59cecb1a464280944f5b152d7e781).%20They%20have%20added%20%5Bbls%5D(https%3A%2F%2Fgithub.com%2Fharmony-one%2Fharmony%2Fblob%2Fmain%2Fcrypto%2Fbls%2Fbls.go)%20and%20%5Bmutibls%5D(https%3A%2F%2Fgithub.com%2Fharmony-one%2Fharmony%2Fblob%2Fmain%2Fmultibls%2Fmultibls.go)%20to%20the%20%5Bharmony%20codbase%5D(https%3A%2F%2Fgithub.com%2Fharmony-one%2Fharmony)%20leveraging%20their%20%5Bharmony-one%20bls%20package%5D(https%3A%2F%2Fgithub.com%2Fharmony-one%2Fbls).%0A%0A%23%23%20Light%20Client%20Support%0A%0AHarmony%20is%20actively%20looking%20at%20light%20client%20support%5B%5E3%5D.%0A%0ASome%20initial%20work%20has%20been%20done%20for%20the%20support%20of%20%5BMerkle%20Mountain%20Ranges%5D(https%3A%2F%2Fgithub.com%2Fopentimestamps%2Fopentimestamps-server%2Fblob%2Fmaster%2Fdoc%2Fmerkle-mountain-range.mdx)%20has%20been%20proposed%20by%20Harmony%20in%20the%20pull%20request%20%5B%5BWIP%5D%20MMR-HardFork%3A%20add%20go-merklemountainrange%20and%20modified%20merkle%20proof%20logic%20%233872%5D(https%3A%2F%2Fgithub.com%2Fharmony-one%2Fharmony%2Fpull%2F3872).%0A%0AThis%20introduces%20a%20new%20field%20into%20the%20block%20header%20populated%20by%20%5Bmmr.go%5D(https%3A%2F%2Fgithub.com%2Fgupadhyaya%2Fharmony%2Fblob%2Fmmr-hard-fork%2Finternal%2Fmmr%2Fmmr.go)%20which%20credits%20%5Bzmitton%2Fgo-merklemountainrange%5D(https%3A%2F%2Fgithub.com%2Fzmitton%2Fgo-merklemountainrange).%0A%0AUpdated%20%5BInterface.go%5D(https%3A%2F%2Fgithub.com%2Fgupadhyaya%2Fharmony%2Fblob%2Fmmr-hard-fork%2Fblock%2Finterface%2Fheader.go)%0A%0A%60%60%60%0A%2F%2F%20MMRRoot%20is%20the%20root%20of%20the%20Merkle%20Mountain%20Range%20tree%20formed%0A%2F%2F%20using%20the%20block%20hashes%20of%20the%20current%20epoch%0AMMRRoot()%20%5B%5Dbyte%0A%0A%2F%2F%20SetMMRRoot%20sets%20the%20updated%20MMR%20root%20after%20appending%20the%20parentHash%0ASetMMRRoot(newMMRRoot%20%5B%5Dbyte)%0A%60%60%60%0A%0AUpdated%20%5Bheader.go%5D(https%3A%2F%2Fgithub.com%2Fgupadhyaya%2Fharmony%2Fblob%2Fmmr-hard-fork%2Fblock%2Fv4%2Fheader.go)%0A%0A%60%60%60%0A%2F%2F%20MMRRoot%20is%20the%20root%20of%20the%20Merkle%20Mountain%20Range%20tree%20formed%0A%2F%2F%20using%20the%20block%20hashes%20of%20the%20current%20epoch%0Afunc%20(h%20*Header)%20MMRRoot()%20%5B%5Dbyte%20%7B%0A%20return%20append(h.fields.MMRRoot%5B%3A0%3A0%5D%2C%20h.fields.MMRRoot...)%0A%7D%0A%0A%2F%2F%20SetMMRRoot%20sets%20the%20updated%20MMR%20root%20after%20appending%20the%20parentHash%0Afunc%20(h%20*Header)%20SetMMRRoot(newMMRRoot%20%5B%5Dbyte)%20%7B%0A%20h.fields.MMRRoot%20%3D%20append(newMMRRoot%5B%3A0%3A0%5D%2C%20newMMRRoot...)%0A%7D%0A%60%60%60%0A%0AHarmony%20%5BMMR%20PR%20Review%5D(https%3A%2F%2Fgithub.com%2Fharmony-one%2Fharmony%2Fpull%2F3872)%20and%20%5Blatest%20PR%5D(https%3A%2F%2Fgithub.com%2Fharmony-one%2Fharmony%2Fpull%2F4198%2Ffiles)%20uses%20Merkle%20Mountain%20Ranges%20to%20facilitate%20light%20client%20development%20against%20Harmony's%20sharded%20Proof%20of%20Stake%20Chain.%0A%0A**Key%20Core%20Protocol%20Changes%20Include**%0ABlock%20Structure%20from%20%5Bharmony%5D(https%3A%2F%2Fgithub.com%2Fpeekpi%2Fharmony%2Fblob%2FmmrHardfork%2Fblock%2Fv4%2Fheader.go)%20with%20%5BMerkle%20Mountain%20Range%5D(https%3A%2F%2Fdocs.grin.mw%2Fwiki%2Fchain-state%2Fmerkle-mountain-range%2F)%20support%20%5BMmr%20hardfork%5D(https%3A%2F%2Fgithub.com%2Fharmony-one%2Fharmony%2Fpull%2F3872)%20%5BPR%204198%5D(https%3A%2F%2Fgithub.com%2Fharmony-one%2Fharmony%2Fpull%2F4198)%20introduces%20%60MMRoot%60%0A%0AGOAL%3A%20Allow%20verification%20that%20previous%20blocks%20were%20valid%20based%20on%20the%20MMRRoot%20Passed.%0A%0AFeatures%0A%0A-%20add%20receipt%20proof%0A-%20adding%20MMRRoot%20field%20to%20block%20header%20%26%20cross-chain%20epoch%0A-%20add%20memdb%20and%20filedb%20mmr%20processing%20logic%0A-%20add%20GetProof%20rpc%0A-%20relayer%20rpcs%20for%20fetching%20full%20header%0A-%20adding%20block%20signers%20for%20rpc%20response%2C%20debug-only%0A-%20minor%20testing%20bls%0A-%20fix%20merge%20conflicts%0A-%20github.com%2Fzmitton%2Fgo-merklemountainrange%20dependency%0A-%20minor%20fix%0A-%20moving%20mmr%20root%20compute%2Fupdate%20logic%20to%20after%20the%20shard%20state%20is%20computed%0A-%20fix%20getting%20siblings%20bug%0A-%20adding%20index%20to%20mmr-proof%20and%20GetProof%20with%20respect%20to%20a%20block%20number%0A-%20check%20if%20mmr%20directory%20exists%2C%20if%20not%20create%20it%20first%0A-%20fixing%20failing%20test%0A-%20fixing%20config%20build%20test%20failure%0A-%20fixing%20more%20test%20failures%0A-%20cleanup%0A-%20turn%20of%20signers%0A-%20fix%20header%20copy%20issue%20and%20write%20mmr%20root%20directly%20to%20node.worker%20header%0A-%20fix%20nil%20pointer%20problems%2C%20shard%20state%20fetch%20issue%2C%20and%20refIndex%20bug%0A-%20clean%20up%0A%0A%60%60%60%0Atype%20headerFields%20struct%20%7B%0A%20ParentHash%20%20%20%20%20%20%20%20%20%20common.Hash%20%20%20%20%60json%3A%22parentHash%22%20%20%20%20%20%20%20gencodec%3A%22required%22%60%0A%20Coinbase%20%20%20%20%20%20%20%20%20%20%20%20common.Address%20%60json%3A%22miner%22%20%20%20%20%20%20%20%20%20%20%20%20gencodec%3A%22required%22%60%0A%20Root%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20common.Hash%20%20%20%20%60json%3A%22stateRoot%22%20%20%20%20%20%20%20%20gencodec%3A%22required%22%60%0A%20TxHash%20%20%20%20%20%20%20%20%20%20%20%20%20%20common.Hash%20%20%20%20%60json%3A%22transactionsRoot%22%20gencodec%3A%22required%22%60%0A%20ReceiptHash%20%20%20%20%20%20%20%20%20common.Hash%20%20%20%20%60json%3A%22receiptsRoot%22%20%20%20%20%20gencodec%3A%22required%22%60%0A%20OutgoingReceiptHash%20common.Hash%20%20%20%20%60json%3A%22outgoingReceiptsRoot%22%20%20%20%20%20gencodec%3A%22required%22%60%0A%20IncomingReceiptHash%20common.Hash%20%20%20%20%60json%3A%22incomingReceiptsRoot%22%20gencodec%3A%22required%22%60%0A%20Bloom%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20ethtypes.Bloom%20%60json%3A%22logsBloom%22%20%20%20%20%20%20%20%20gencodec%3A%22required%22%60%0A%20Number%20%20%20%20%20%20%20%20%20%20%20%20%20%20*big.Int%20%20%20%20%20%20%20%60json%3A%22number%22%20%20%20%20%20%20%20%20%20%20%20gencodec%3A%22required%22%60%0A%20GasLimit%20%20%20%20%20%20%20%20%20%20%20%20uint64%20%20%20%20%20%20%20%20%20%60json%3A%22gasLimit%22%20%20%20%20%20%20%20%20%20gencodec%3A%22required%22%60%0A%20GasUsed%20%20%20%20%20%20%20%20%20%20%20%20%20uint64%20%20%20%20%20%20%20%20%20%60json%3A%22gasUsed%22%20%20%20%20%20%20%20%20%20%20gencodec%3A%22required%22%60%0A%20Time%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20*big.Int%20%20%20%20%20%20%20%60json%3A%22timestamp%22%20%20%20%20%20%20%20%20gencodec%3A%22required%22%60%0A%20Extra%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%5B%5Dbyte%20%20%20%20%20%20%20%20%20%60json%3A%22extraData%22%20%20%20%20%20%20%20%20gencodec%3A%22required%22%60%0A%20MixDigest%20%20%20%20%20%20%20%20%20%20%20common.Hash%20%20%20%20%60json%3A%22mixHash%22%20%20%20%20%20%20%20%20%20%20gencodec%3A%22required%22%60%0A%20%2F%2F%20Additional%20Fields%0A%20ViewID%20%20%20%20%20%20%20%20%20%20%20%20%20%20*big.Int%20%20%20%20%60json%3A%22viewID%22%20%20%20%20%20%20%20%20%20%20%20gencodec%3A%22required%22%60%0A%20Epoch%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20*big.Int%20%20%20%20%60json%3A%22epoch%22%20%20%20%20%20%20%20%20%20%20%20%20gencodec%3A%22required%22%60%0A%20ShardID%20%20%20%20%20%20%20%20%20%20%20%20%20uint32%20%20%20%20%20%20%60json%3A%22shardID%22%20%20%20%20%20%20%20%20%20%20gencodec%3A%22required%22%60%0A%20LastCommitSignature%20%5B96%5Dbyte%20%20%20%20%60json%3A%22lastCommitSignature%22%20%20gencodec%3A%22required%22%60%0A%20LastCommitBitmap%20%20%20%20%5B%5Dbyte%20%20%20%20%20%20%60json%3A%22lastCommitBitmap%22%20%20%20%20%20gencodec%3A%22required%22%60%20%2F%2F%20Contains%20which%20validator%20signed%0A%20Vrf%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%5B%5Dbyte%20%20%20%20%20%20%60json%3A%22vrf%22%60%0A%20Vdf%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%5B%5Dbyte%20%20%20%20%20%20%60json%3A%22vdf%22%60%0A%20ShardState%20%20%20%20%20%20%20%20%20%20%5B%5Dbyte%20%20%20%20%20%20%60json%3A%22shardState%22%60%0A%20CrossLinks%20%20%20%20%20%20%20%20%20%20%5B%5Dbyte%20%20%20%20%20%20%60json%3A%22crossLink%22%60%0A%20Slashes%20%20%20%20%20%20%20%20%20%20%20%20%20%5B%5Dbyte%20%20%20%20%20%20%60json%3A%22slashes%22%60%0A%20MMRRoot%20%20%20%20%20%20%20%20%20%20%20%20%20common.Hash%20%60json%3A%22mmrRoot%22%60%0A%7D%0A%60%60%60%0A%0A**Sample%20Light%20Client%20Implementation%3A%20Horizon%20Bridge%20Harmony%20Light%20Client%20Deployed%20on%20Ethereum**%0A%0AThis%20enables%20the%20validation%20of%20previous%20blocks%20by%20implemented%20by%20%5BTokenLockerOnEthereum.sol%5D(https%3A%2F%2Fgithub.com%2Fjohnwhitton%2Fhorizon%2Fblob%2FrefactorV2%2Fcontracts%2FTokenLockerOnEthereum.sol)%20to%20use%20%5BMMRVerifier.sol%5D(https%3A%2F%2Fgithub.com%2Fjohnwhitton%2Fhorizon%2Fblob%2FrefactorV2%2Fcontracts%2Flib%2FMMRVerifier.sol)%20uses%20%60.%2Flib%2FMMRVerifier.sol%60%20to%20validate%20the%20%5BMountain%20Merkle%20Ranges%5D(https%3A%2F%2Fgithub.com%2Fopentimestamps%2Fopentimestamps-server%2Fblob%2Fmaster%2Fdoc%2Fmerkle-mountain-range.mdx)%0A%0A%23%23%20Code%20Review%0A%0AThe%20%5BHarmony%20codebase%5D(https%3A%2F%2Fgithub.com%2Fharmony-one%2Fharmony)%20was%20originally%20cloned%20from%20%5BEthereum%201.0%5D(.%2Fethereum-1-0.mdx)%20around%202019.Thus%20the%20majority%20of%20code%20incuding%20primitives%2C%20signing%20are%20similar%20as%20at%20that%20period.%20Since%20then%20Ethreum%20has%20worked%20siginficantly%20on%20Ethreum%202.0%20and%20these%20modifications%20were%20selectively%20leveraged%20by%20Harmony.%0A%0A%5BHarmony%20has%20significant%20differences%5D(https%3A%2F%2Fmedium.com%2Fharmony-one%2F2022-harmony-technical-review-88462efba368)%20from%20Ethereum%201.0%20including%20sharding%2C%20Effective%20Proof%20of%20Stake%20Consensus%20Mechanism%2C%20%5BRosetta%20support%5D(https%3A%2F%2Fwww.rosetta-api.org%2Fdocs%2Fwelcome.html)%20and%20verifiable%20delay%20functions%20and%20verifiaable%20random%20functions.%0A%0A%23%23%23%20Signing%0A%0A-%20%5Bbls%5D(https%3A%2F%2Fgithub.com%2Fharmony-one%2Fharmony%2Fblob%2Fmain%2Fcrypto%2Fbls%2Fbls.go)%3A%20An%20implementation%20of%20BLS%20threshold%20signature%0A-%20%5Bmultibls%5D(https%3A%2F%2Fgithub.com%2Fharmony-one%2Fharmony%2Fblob%2Fmain%2Fmultibls%2Fmultibls.go)%3A%20Wrapper%20for%20a%20collection%20of%20bls%20private%20and%20public%20keys%20with%20dedup%20functionality%20and%20the%20ability%20to%20serialize%20to%20a%20hex%20string.%0A%0A%23%23%23%20Consensus%0A%0A-%20%5Bconsensus%5D(https%3A%2F%2Fgithub.com%2Fharmony-one%2Fharmony%2Ftree%2Fmain%2Fconsensus)%3A%20Consensus%20package%20includes%20the%20Harmony%20BFT%20consensus%20protocol%20code%2C%20which%20uses%20BLS-based%20multi-signature%20to%20cosign%20the%20new%20block.%20(details%20are%20%5Bhere%5D(https%3A%2F%2Ftalk.harmony.one%2Ft%2Fbls-based-practical-bft-consensus%2F131)).%0A-%20%5Bhmy%5D(https%3A%2F%2Fgithub.com%2Fharmony-one%2Fharmony%2Ftree%2Fmain%2Fhmy)%3A%20implements%20the%20Harmony%20full%20node%20service.%0A%0A%23%23%23%20Sharding%0A%0A-%20%5Bshard%5D(https%3A%2F%2Fgithub.com%2Fharmony-one%2Fharmony%2Ftree%2Fmain%2Fshard)%3A%20Trackes%20the%20shard%20state%20and%20committee%20assignment.%0A%0A%23%23%23%20Staking%0A%0A-%20%5Bstaking%5D(https%3A%2F%2Fgithub.com%2Fharmony-one%2Fharmony%2Ftree%2Fmain%2Fstaking)%3A%20Implements%20staking%20for%20%5BHarmony's%20Effective%20Proof%20of%20Stake%5D(https%3A%2F%2Fblog.harmony.one%2Fintroducing-harmonys-effective-proof-of-stake-epos%2F)%0A%20%20-%20%5Bapr%5D(https%3A%2F%2Fgithub.com%2Fharmony-one%2Fharmony%2Ftree%2Fmain%2Fstaking%2Fapr)%3A%20Calculates%20the%20expected%20rewards%20per%20year%20and%20the%20rewards%20for%20Validators.%0A%20%20-%20%5Bavailablity%5D(https%3A%2F%2Fgithub.com%2Fharmony-one%2Fharmony%2Ftree%2Fmain%2Fstaking%2Favailability)%3A%20Measures%20the%20availability%20of%20validators.%0A%20%20-%20%5Beffective%5D(https%3A%2F%2Fgithub.com%2Fharmony-one%2Fharmony%2Ftree%2Fmain%2Fstaking%2Feffective)%3A%20Calcualates%20a%20validators%20effective%20proof%20of%20stake.%0A%20%20-%20%5Bnewtwork%5D(https%3A%2F%2Fgithub.com%2Fharmony-one%2Fharmony%2Ftree%2Fmain%2Fstaking%2Fnetwork)%3A%20Calculates%20the%20network%20rewards.%0A%20%20-%20%5Breward%5D(https%3A%2F%2Fgithub.com%2Fharmony-one%2Fharmony%2Ftree%2Fmain%2Fstaking%2Freward)%3A%20Checks%20whether%20rewards%20are%20issued%20and%20if%20so%20calculates%20the%20rewards%20based%20on%20total%20tokens%20staked.%0A%20%20-%20%5Bslash%5D(https%3A%2F%2Fgithub.com%2Fharmony-one%2Fharmony%2Ftree%2Fmain%2Fstaking%2Fslash)%3A%20Slashes%20validators%20for%20malevolent%20acts%20such%20as%20double%20signing.%0A%20%20-%20%5Btypes%5D(https%3A%2F%2Fgithub.com%2Fharmony-one%2Fharmony%2Ftree%2Fmain%2Fstaking%2Ftypes)%3A%20Type%20definitions%20for%20staking%20structures.%0A%20%20-%20%5Bverify%5D(https%3A%2F%2Fgithub.com%2Fharmony-one%2Fharmony%2Ftree%2Fmain%2Fstaking%2Fverify)%3A%20verifies%20aggregate%20signatures%0A%0A%23%23%23%20Rosetta%0A%0A-%20%5Brosetta%5D(https%3A%2F%2Fgithub.com%2Fharmony-one%2Fharmony%2Ftree%2Fmain%2Frosetta)%3A%20responsible%20for%20staring%20a%20%5Brosetta%5D(https%3A%2F%2Fwww.rosetta-api.org%2Fdocs%2Fwelcome.html)%20http%20server.%0A%0A%23%23%23%20Cryptographic%20Primitives%0A%0A**hash%20functions**%0A%0A-%20%5Bhash%5D(https%3A%2F%2Fgithub.com%2Fharmony-one%2Fharmony%2Ftree%2Fmain%2Fcrypto%2Fhash)%3A%20Uses%20kecakk256%20and%20sha256%20and%20provides%20the%20abilty%20to%20hash%20the%20RLP%20representation%20of%20the%20given%20object.%0A%0A**random%20number%20generators**%0A%0A-%20%5BVDF%5D(https%3A%2F%2Fgithub.com%2Fharmony-one%2Fharmony%2Ftree%2Fmain%2Fcrypto%2Fvdf)%3A%20Verifiable%20Random%20Delay%20Function.%20Package%20vdf%20is%20a%20proof-of-concept%20implementation%20of%20a%20delay%20function%20and%20the%20security%20properties%20are%20not%20guaranteed.%20A%20more%20secure%20implementation%20of%20the%20%5BVDF%20by%20Wesolowski%5D(https%3A%2F%2Feprint.iacr.org%2F2018%2F623.pdf)%20is%20to%20be%20implemented.%0A-%20%5BVRF%5D(https%3A%2F%2Fgithub.com%2Fharmony-one%2Fharmony%2Ftree%2Fmain%2Fcrypto%2Fvrf)%3A%20a%20pseudorandom%20function%20f_k%20from%20a%20secret%20key%20k%2C%20such%20that%20that%20knowledge%20of%20k%20not%20only%20enables%20one%20to%20evaluate%20f_k%20at%20for%20any%20message%20m%2C%20but%20also%20to%20provide%20an%20NP-proof%20that%20the%20value%20f_k(m)%20is%20indeed%20correct%20without%20compromising%20the%20unpredictability%20of%20f_k%20for%20any%20m'%20!%3D%20m.%20See%20%5BVerifiable%20Random%20Functions%5D(https%3A%2F%2Fdash.harvard.edu%2Fbitstream%2Fhandle%2F1%2F5028196%2FVadhan_VerifRandomFunction.pdf%3Fsequence%3D2%26isAllowed%3Dy).%0A%0A%23%23%20References%0A%0A**Consensus**%0A%0A-%20%5BHarmony%20FBFT%20Consensus%20Documentation%5D(https%3A%2F%2Fdocs.harmony.one%2Fhome%2Fgeneral%2Ftechnology%2Fconsensus)%3A%20Harmony%E2%80%99s%20consensus%20algorithm%20is%20called%20Fast%20Byzantine%20Fault%20Tolerance%20(FBFT)%2C%20which%20is%20an%20innovative%20upgrade%20on%20the%20famous%20PBFT%20algorithm.%20As%20an%20implementation%20detail%2C%20note%20that%20custom%20%5Bgenerator%20points%20are%20used%5D(https%3A%2F%2Fgithub.com%2Fherumi%2Fbls%2Fissues%2F74).%0A-%20%5BHarmony%20Slot%20Bidding%20and%20Election%5D(https%3A%2F%2Fdocs.harmony.one%2Fhome%2Fnetwork%2Fvalidators%2Fdefinitions%2Fslots-bidding-and-election)%0A-%20%5BBuilding%20a%20Better%20Blockchain%3A%20The%20Implementation%20of%20External%20Leader%20Rotation%20on%20Harmony%5D(https%3A%2F%2Fdocs.harmony.one%2Fhome%2Fnetwork%2Fvalidators%2Fdefinitions%2Fslots-bidding-and-election)%3A%20A%20proposal%20to%20improve%20the%20leader%20rotatation%20by%20introducing%20changes%20to%20incldue%20external%20validators.%0A-%20%5BHarmony%20consensus.go%20Code%5D(https%3A%2F%2Fgithub.com%2Fharmony-one%2Fharmony%2Fblob%2Fmain%2Fconsensus%2Fconsensus.go)%3A%20Harmony%20Consensus%20logic%20(go)%0A-%20%5BHarmony%20quorom.go%5D(https%3A%2F%2Fgithub.com%2Fharmony-one%2Fharmony%2Fblob%2Fmain%2Fconsensus%2Fquorum%2Fquorum.go)%3A%20Harmony's%20quorom%20logic%20responsible%20for%20trakcing%20participants%2C%20submitting%20and%20aggregating%20votes.%0A-%20%5BMerkle%20Mountain%20Ranges%5D(https%3A%2F%2Fdocs.grin.mw%2Fwiki%2Fchain-state%2Fmerkle-mountain-range%2F)%3A%20Merkle%20Mountain%20Ranges1%20are%20an%20alternative%20to%20Merkle%20trees2.%20While%20the%20latter%20relies%20on%20perfectly%20balanced%20binary%20trees%2C%20the%20former%20can%20be%20seen%20either%20as%20list%20of%20perfectly%20balance%20binary%20trees%20or%20a%20single%20binary%20tree%20that%20would%20have%20been%20truncated%20from%20the%20top%20right.%0A-%20%5BHarmony%20MMR-Hardfork%20Pull%20Request%203872%5D(https%3A%2F%2Fgithub.com%2Fharmony-one%2Fharmony%2Fpull%2F3872)%3A%20a%20MMR%20hard%20fork%20PR%20that%20adds%20mmrRoot%20to%20block%20header%2C%20adds%20logic%20to%20compute%20the%20MMR%20tree%20every%20epoch%2C%20RPCs%20to%20fetch%20the%20MMR%20proof%20for%20any%20given%20transaction.%0A-%20%5BHarmony%20MMR%20Hardfork%20Pull%20Request%204198%5D(https%3A%2F%2Fgithub.com%2Fharmony-one%2Fharmony%2Fpull%2F4198)%3A%20Follow%20up%20MMR%20pull%20request.%20_MMR%20is%20a%20series%20of%20perfect%20Merkle%20trees%2C%20from%20high%20to%20low.%20Each%20Merkle%20tree%20root%20we%20call%20it%20peak.%20Concat%20all%20peak%20hash%20and%20hash%20it%2C%20will%20get%20MMR%20root%20hash._%0A-%20%5BHarmony%20MMRHardfork%20block%20header%5D(https%3A%2F%2Fgithub.com%2Fpeekpi%2Fharmony%2Fblob%2FmmrHardfork%2Fblock%2Fv4%2Fheader.go)%3A%20Harmony%20proposed%20block%20header%20including%20Merkle%20Mountain%20range%20(go).%0A%0A**Signing**%0A%0A-%20%5BHarmony%20bls.go%20codebase%5D(https%3A%2F%2Fgithub.com%2Fharmony-one%2Fbls%2Fblob%2Fmaster%2Fffi%2Fgo%2Fbls%2Fbls.go)%3A%20Harmony's%20BLS%20library%20forked%20from%20%5Bherumi%2Fbls%5D(https%3A%2F%2Fgithub.com%2Fherumi%2Fbls)%20(go).%0A%0A**Staking**%0A%0A-%20%5BHarmony%20Effective%20Proof%20of%20Stake%20Documentation%5D(https%3A%2F%2Fdocs.harmony.one%2Fhome%2Fgeneral%2Ftechnology%2Feffective-proof-of-stake)%3A%20A%20staking%20mechanism%20for%20Harmony's%20sharded%20blockchain%20that%20achieves%20both%20security%20and%20decentralization%20using%20effective%20stake.%0A-%20%5BHarmony%20Staking%20Dashboard%5D(https%3A%2F%2Fstaking.harmony.one%2Fvalidators%2Fmainnet)%3A%20Staking%20Dashboard%20showing%20approximately%20140%20Elected%20Validators%20from%20299%20active%20validators.%0A%0A%23%23%20Footnotes%0A%0A%5B%5E1%5D%3A%20%5BHarmony%20consensus%20documentation%5D(https%3A%2F%2Fdocs.harmony.one%2Fhome%2Fgeneral%2Ftechnology%2Fconsensus).%20As%20an%20implementation%20detail%2C%20note%20that%20custom%20%5Bgenerator%20points%20are%20used%5D(https%3A%2F%2Fgithub.com%2Fherumi%2Fbls%2Fissues%2F74)%0A%0A%5B%5E2%5D%3A%20%5BHarmony%20Slot%20Bidding%20and%20Election%5D(https%3A%2F%2Fdocs.harmony.one%2Fhome%2Fnetwork%2Fvalidators%2Fdefinitions%2Fslots-bidding-and-election)%0A%0A%5B%5E3%5D%3A%20%5BScaling%20the%20Harmony%20Protocol%20with%20Light%20Clients%5D(https%3A%2F%2Fmedium.com%2Fharmony-one%2Fscaling-the-harmony-protocol-with-light-clients-66d1eab26bf)%3A%20a%20step-by-step%20guide%20on%20how%20to%20develop%20and%20run%20a%20light%20client%20on%20the%20Harmony%20Protocol%20using%20code%20examples.%0A",lastUpdatedAt:1753125084e3},{lazy:()=>o2(()=>import("./harmony-Bb4x8qku.js"),[]),path:"/research/chains/harmony.html",type:"mdx",filePath:"research/chains/harmony.mdx",content:"%23%20Harmony%0A%0A-%20date%3A%202023-02-04%0A-%20last%20updated%3A%202023-02-04%0A%0A%23%23%20Overview%0A%0ADespite%20relatively%20lower%20usage%20than%20other%20candidates%2C%20Harmony%20has%20a%20mature%2C%20battle-tested%20implementation%20for%20fast%20consensus%20using%20BLS-based%20signature%20schemes%2C%20which%20has%20been%20in%20production%20for%20over%202%20years.%20Additionally%2C%20many%20other%20chains%20are%20also%20moving%20towards%20using%20BLS%20for%20signing%20blocks%20in%20their%20consensus%20protocols.%0A%0AHarmony%20follows%20a%20two-round%20Fast%20Byzantine%20Fault%20Tolerance%20consensus%20derived%20from%20PBFT%2C%20where%20BLS%20signatures%20(on%20the%20BLS12-381%20curve)%20are%20used%20to%20reduce%20communication%20costs%5B%5E1%5D.%20Blocks%20are%20produced%20by%20validator%20leaders%2C%20a%20minimal%20subset%20of%20validators%2C%20then%20further%20broadcasted%20to%20all%20validators%20and%20confirmed%20when%20more%20than%202%2F3%20of%20validators%20sign%20the%20block%20with%20their%20own%20BLS%20signatures.%20The%20leader%20then%20aggregates%20the%20signatures%20into%20a%20single%20one%20and%20broadcasts%20again.%20The%20validators%20may%20verify%20the%20aggregated%20signature%20and%20sign%20the%20block%20again%20before%20sending%20the%20signed%20block%20back%20to%20the%20leader.%20Finally%2C%20the%20leader%20(after%20receiving%20signatures%20from%202%2F3%20of%20the%20validators)%20may%20aggregate%20the%20signature%20for%20one%20last%20time%20and%20finalize%20the%20block.%20In%20the%20block%20header%2C%20the%20leader%20records%20which%20validators'%20signatures%20are%20received%20in%20each%20round.%0A%0AThe%20protocol%20uses%20a%20slot-bidding%20mechanism%20to%20elect%20a%20variable%20number%20of%20validators%20to%20fill%20800-slots%2C%20where%20each%20validator%20may%20occupy%20multiple%20slots%20if%20their%20total%20delegated%20stake%20per%20slot%20is%20greater%20than%20the%20effective%20median%5B%5E2%5D.%0A%0A%23%23%20Consensus%20Mechanism%0A%0A%23%23%23%20Harmony%20Fast%20Byzantine%20Fault%20Tolerance%20(FBFT)%0A%0AThe%20following%20is%20an%20excerpt%20from%20%5BConsensus%5D(https%3A%2F%2Fdocs.harmony.one%2Fhome%2Fgeneral%2Ftechnology%2Fconsensus)%0A%0A%3E%20The%20consensus%20algorithm%20is%20a%20key%20component%20of%20any%20blockchain.%20It%20determines%20the%20security%20and%20performance%20of%20a%20blockchain%20and%20is%20often%20referred%20to%20as%20the%20%22engine%22%20of%20a%20blockchain.%20Harmony%E2%80%99s%20consensus%20algorithm%20is%20called%20Fast%20Byzantine%20Fault%20Tolerance%20(FBFT)%2C%20which%20is%20an%20innovative%20upgrade%20on%20the%20famous%20PBFT%20algorithm.%20FBFT%20is%20one%20order%20of%20magnitude%20faster%20and%20more%20scalable%20than%20PBFT%20because%20BLS%20(Boneh%E2%80%93Lynn%E2%80%93Shacham)%20aggregate%20signature%20is%20used%20to%20significantly%20reduce%20the%20communication%20cost.%20Specifically%2C%20FBFT%20allows%20at%20least%20250%20validators%20to%20reach%20consensus%20within%202%20seconds.%0A%3E%0A%3E%20For%20every%20round%20of%20consensus%20in%20FBFT%2C%20one%20validator%20serves%20as%20the%20%E2%80%9Cleader%E2%80%9D%20and%20there%20are%20three%20phases%3A%20the%20announce%20phase%2C%20the%20prepare%20phase%20and%20the%20commit%20phase.%20In%20the%20announce%20phase%2C%20the%20leader%20proposes%20a%20new%20block%20and%20broadcasts%20the%20block%20hash%20to%20all%20of%20the%20validators.%20In%20the%20prepare%20phase%2C%20validators%20verify%20the%20message%20and%20sign%20on%20the%20block%20hash%2C%20as%20well%20as%20sending%20the%20signature%20back%20to%20the%20leader.%20The%20prepare%20phase%20finishes%20when%20signatures%20with%20more%20than%202%2F3%20of%20the%20voting%20power%20are%20collected.%20After%20that%2C%20the%20leader%20aggregated%20the%20collected%20signatures%20into%20a%20O(1)-sized%20BLS%20aggregate%20signature%20and%20then%20broadcast%20it%20with%20the%20whole%20block%20to%20start%20the%20commit%20phase.%20The%20commit%20phase%20involves%20validators%20verifying%20the%20block%20and%20doing%20a%20similar%20signing%20process%20as%20the%20prepare%20phase%20(i.e.%202%2F3%20voting%20power%20collection).%20The%20consensus%20is%20reached%20after%20the%20commit%20phase%20is%20done.%20This%20whole%20process%20can%20be%20done%20within%202%20seconds%20in%20mainnet.%0A%0AThe%20following%20is%20an%20excerpt%20from%20%5BEpoch%20Transition%5D(https%3A%2F%2Fdocs.harmony.one%2Fhome%2Fnetwork%2Fvalidators%2Fdefinitions%2Fepoch-transition)%0A%0A%3E%20An%20epoch%20is%20a%20period%20of%20time%20when%20the%20beacon%20shard%20(i.e.%20shard%200%2C%20the%20coordinator%20for%20other%20shards)%20produces%20a%20fixed%20number%20of%20blocks.%20In%20Harmony%20mainnet%2C%20an%20epoch%20is%2032768%20blocks%20(~18.2h%20with%20a%202s%20block%20time)%20in%20the%20beacon%20shard%0A%0A_Note%3A%20If%20the%20leader%20fails%20to%20produce%20a%20block%20within%20a%20certain%20time%20frame%2C%20then%20a%20new%20leader%20is%20elected_%0A%0A!%5BHarmony%20FBFT%5D(%2Fassets%2F%2Fresearch%2Fharmony-consensus.png%20%22Harmony%20FBFT%22)%0A%0ABlock%20Structure%20from%20%5Bharmony%5D(https%3A%2F%2Fgithub.com%2Fharmony-one%2Fharmony%2Fblob%2Fmain%2Fblock%2Fv3%2Fheader.go)%0A%0A%60%60%60%0Atype%20headerFields%20struct%20%7B%0A%20ParentHash%20%20%20%20%20%20%20%20%20%20common.Hash%20%20%20%20%60json%3A%22parentHash%22%20%20%20%20%20%20%20gencodec%3A%22required%22%60%0A%20Coinbase%20%20%20%20%20%20%20%20%20%20%20%20common.Address%20%60json%3A%22miner%22%20%20%20%20%20%20%20%20%20%20%20%20gencodec%3A%22required%22%60%0A%20Root%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20common.Hash%20%20%20%20%60json%3A%22stateRoot%22%20%20%20%20%20%20%20%20gencodec%3A%22required%22%60%0A%20TxHash%20%20%20%20%20%20%20%20%20%20%20%20%20%20common.Hash%20%20%20%20%60json%3A%22transactionsRoot%22%20gencodec%3A%22required%22%60%0A%20ReceiptHash%20%20%20%20%20%20%20%20%20common.Hash%20%20%20%20%60json%3A%22receiptsRoot%22%20%20%20%20%20gencodec%3A%22required%22%60%0A%20OutgoingReceiptHash%20common.Hash%20%20%20%20%60json%3A%22outgoingReceiptsRoot%22%20%20%20%20%20gencodec%3A%22required%22%60%0A%20IncomingReceiptHash%20common.Hash%20%20%20%20%60json%3A%22incomingReceiptsRoot%22%20gencodec%3A%22required%22%60%0A%20Bloom%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20ethtypes.Bloom%20%60json%3A%22logsBloom%22%20%20%20%20%20%20%20%20gencodec%3A%22required%22%60%0A%20Number%20%20%20%20%20%20%20%20%20%20%20%20%20%20*big.Int%20%20%20%20%20%20%20%60json%3A%22number%22%20%20%20%20%20%20%20%20%20%20%20gencodec%3A%22required%22%60%0A%20GasLimit%20%20%20%20%20%20%20%20%20%20%20%20uint64%20%20%20%20%20%20%20%20%20%60json%3A%22gasLimit%22%20%20%20%20%20%20%20%20%20gencodec%3A%22required%22%60%0A%20GasUsed%20%20%20%20%20%20%20%20%20%20%20%20%20uint64%20%20%20%20%20%20%20%20%20%60json%3A%22gasUsed%22%20%20%20%20%20%20%20%20%20%20gencodec%3A%22required%22%60%0A%20Time%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20*big.Int%20%20%20%20%20%20%20%60json%3A%22timestamp%22%20%20%20%20%20%20%20%20gencodec%3A%22required%22%60%0A%20Extra%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%5B%5Dbyte%20%20%20%20%20%20%20%20%20%60json%3A%22extraData%22%20%20%20%20%20%20%20%20gencodec%3A%22required%22%60%0A%20MixDigest%20%20%20%20%20%20%20%20%20%20%20common.Hash%20%20%20%20%60json%3A%22mixHash%22%20%20%20%20%20%20%20%20%20%20gencodec%3A%22required%22%60%0A%20%2F%2F%20Additional%20Fields%0A%20ViewID%20%20%20%20%20%20%20%20%20%20%20%20%20%20*big.Int%20%60json%3A%22viewID%22%20%20%20%20%20%20%20%20%20%20%20gencodec%3A%22required%22%60%0A%20Epoch%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20*big.Int%20%60json%3A%22epoch%22%20%20%20%20%20%20%20%20%20%20%20%20gencodec%3A%22required%22%60%0A%20ShardID%20%20%20%20%20%20%20%20%20%20%20%20%20uint32%20%20%20%60json%3A%22shardID%22%20%20%20%20%20%20%20%20%20%20gencodec%3A%22required%22%60%0A%20LastCommitSignature%20%5B96%5Dbyte%20%60json%3A%22lastCommitSignature%22%20%20gencodec%3A%22required%22%60%0A%20LastCommitBitmap%20%20%20%20%5B%5Dbyte%20%20%20%60json%3A%22lastCommitBitmap%22%20%20%20%20%20gencodec%3A%22required%22%60%20%2F%2F%20Contains%20which%20validator%20signed%0A%20Vrf%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%5B%5Dbyte%20%20%20%60json%3A%22vrf%22%60%0A%20Vdf%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%5B%5Dbyte%20%20%20%60json%3A%22vdf%22%60%0A%20ShardState%20%20%20%20%20%20%20%20%20%20%5B%5Dbyte%20%20%20%60json%3A%22shardState%22%60%0A%20CrossLinks%20%20%20%20%20%20%20%20%20%20%5B%5Dbyte%20%20%20%60json%3A%22crossLink%22%60%0A%20Slashes%20%20%20%20%20%20%20%20%20%20%20%20%20%5B%5Dbyte%20%20%20%60json%3A%22slashes%22%60%0A%7D%0A%60%60%60%0A%0A%23%23%20Signing%20Mechanism%0A%0AHarmony%20uses%20BLS12_381%20signatures%20for%20validators%20signing%20blocks.%20They%20began%20work%20on%20enhancing%20the%20%5Bherumi%2Fbls%20package%5D(https%3A%2F%2Fgithub.com%2Fherumi%2Fbls)%20in%20Jan%202019%20to%20%5Bsupport%20BLS12_381%5D(https%3A%2F%2Fgithub.com%2Fharmony-one%2Fbls%2Fcommit%2F302fc1eea9d59cecb1a464280944f5b152d7e781).%20They%20have%20added%20%5Bbls%5D(https%3A%2F%2Fgithub.com%2Fharmony-one%2Fharmony%2Fblob%2Fmain%2Fcrypto%2Fbls%2Fbls.go)%20and%20%5Bmutibls%5D(https%3A%2F%2Fgithub.com%2Fharmony-one%2Fharmony%2Fblob%2Fmain%2Fmultibls%2Fmultibls.go)%20to%20the%20%5Bharmony%20codbase%5D(https%3A%2F%2Fgithub.com%2Fharmony-one%2Fharmony)%20leveraging%20their%20%5Bharmony-one%20bls%20package%5D(https%3A%2F%2Fgithub.com%2Fharmony-one%2Fbls).%0A%0A%23%23%20Light%20Client%20Support%0A%0AHarmony%20is%20actively%20looking%20at%20light%20client%20support%5B%5E3%5D.%0A%0ASome%20initial%20work%20has%20been%20done%20for%20the%20support%20of%20%5BMerkle%20Mountain%20Ranges%5D(https%3A%2F%2Fgithub.com%2Fopentimestamps%2Fopentimestamps-server%2Fblob%2Fmaster%2Fdoc%2Fmerkle-mountain-range.mdx)%20has%20been%20proposed%20by%20Harmony%20in%20the%20pull%20request%20%5B%5BWIP%5D%20MMR-HardFork%3A%20add%20go-merklemountainrange%20and%20modified%20merkle%20proof%20logic%20%233872%5D(https%3A%2F%2Fgithub.com%2Fharmony-one%2Fharmony%2Fpull%2F3872).%0A%0AThis%20introduces%20a%20new%20field%20into%20the%20block%20header%20populated%20by%20%5Bmmr.go%5D(https%3A%2F%2Fgithub.com%2Fgupadhyaya%2Fharmony%2Fblob%2Fmmr-hard-fork%2Finternal%2Fmmr%2Fmmr.go)%20which%20credits%20%5Bzmitton%2Fgo-merklemountainrange%5D(https%3A%2F%2Fgithub.com%2Fzmitton%2Fgo-merklemountainrange).%0A%0AUpdated%20%5BInterface.go%5D(https%3A%2F%2Fgithub.com%2Fgupadhyaya%2Fharmony%2Fblob%2Fmmr-hard-fork%2Fblock%2Finterface%2Fheader.go)%0A%0A%60%60%60%0A%2F%2F%20MMRRoot%20is%20the%20root%20of%20the%20Merkle%20Mountain%20Range%20tree%20formed%0A%2F%2F%20using%20the%20block%20hashes%20of%20the%20current%20epoch%0AMMRRoot()%20%5B%5Dbyte%0A%0A%2F%2F%20SetMMRRoot%20sets%20the%20updated%20MMR%20root%20after%20appending%20the%20parentHash%0ASetMMRRoot(newMMRRoot%20%5B%5Dbyte)%0A%60%60%60%0A%0AUpdated%20%5Bheader.go%5D(https%3A%2F%2Fgithub.com%2Fgupadhyaya%2Fharmony%2Fblob%2Fmmr-hard-fork%2Fblock%2Fv4%2Fheader.go)%0A%0A%60%60%60%0A%2F%2F%20MMRRoot%20is%20the%20root%20of%20the%20Merkle%20Mountain%20Range%20tree%20formed%0A%2F%2F%20using%20the%20block%20hashes%20of%20the%20current%20epoch%0Afunc%20(h%20*Header)%20MMRRoot()%20%5B%5Dbyte%20%7B%0A%20return%20append(h.fields.MMRRoot%5B%3A0%3A0%5D%2C%20h.fields.MMRRoot...)%0A%7D%0A%0A%2F%2F%20SetMMRRoot%20sets%20the%20updated%20MMR%20root%20after%20appending%20the%20parentHash%0Afunc%20(h%20*Header)%20SetMMRRoot(newMMRRoot%20%5B%5Dbyte)%20%7B%0A%20h.fields.MMRRoot%20%3D%20append(newMMRRoot%5B%3A0%3A0%5D%2C%20newMMRRoot...)%0A%7D%0A%60%60%60%0A%0AHarmony%20%5BMMR%20PR%20Review%5D(https%3A%2F%2Fgithub.com%2Fharmony-one%2Fharmony%2Fpull%2F3872)%20and%20%5Blatest%20PR%5D(https%3A%2F%2Fgithub.com%2Fharmony-one%2Fharmony%2Fpull%2F4198%2Ffiles)%20uses%20Merkle%20Mountain%20Ranges%20to%20facilitate%20light%20client%20development%20against%20Harmony's%20sharded%20Proof%20of%20Stake%20Chain.%0A%0A**Key%20Core%20Protocol%20Changes%20Include**%0ABlock%20Structure%20from%20%5Bharmony%5D(https%3A%2F%2Fgithub.com%2Fpeekpi%2Fharmony%2Fblob%2FmmrHardfork%2Fblock%2Fv4%2Fheader.go)%20with%20%5BMerkle%20Mountain%20Range%5D(https%3A%2F%2Fdocs.grin.mw%2Fwiki%2Fchain-state%2Fmerkle-mountain-range%2F)%20support%20%5BMmr%20hardfork%5D(https%3A%2F%2Fgithub.com%2Fharmony-one%2Fharmony%2Fpull%2F3872)%20%5BPR%204198%5D(https%3A%2F%2Fgithub.com%2Fharmony-one%2Fharmony%2Fpull%2F4198)%20introduces%20%60MMRoot%60%0A%0AGOAL%3A%20Allow%20verification%20that%20previous%20blocks%20were%20valid%20based%20on%20the%20MMRRoot%20Passed.%0A%0AFeatures%0A%0A-%20add%20receipt%20proof%0A-%20adding%20MMRRoot%20field%20to%20block%20header%20%26%20cross-chain%20epoch%0A-%20add%20memdb%20and%20filedb%20mmr%20processing%20logic%0A-%20add%20GetProof%20rpc%0A-%20relayer%20rpcs%20for%20fetching%20full%20header%0A-%20adding%20block%20signers%20for%20rpc%20response%2C%20debug-only%0A-%20minor%20testing%20bls%0A-%20fix%20merge%20conflicts%0A-%20github.com%2Fzmitton%2Fgo-merklemountainrange%20dependency%0A-%20minor%20fix%0A-%20moving%20mmr%20root%20compute%2Fupdate%20logic%20to%20after%20the%20shard%20state%20is%20computed%0A-%20fix%20getting%20siblings%20bug%0A-%20adding%20index%20to%20mmr-proof%20and%20GetProof%20with%20respect%20to%20a%20block%20number%0A-%20check%20if%20mmr%20directory%20exists%2C%20if%20not%20create%20it%20first%0A-%20fixing%20failing%20test%0A-%20fixing%20config%20build%20test%20failure%0A-%20fixing%20more%20test%20failures%0A-%20cleanup%0A-%20turn%20of%20signers%0A-%20fix%20header%20copy%20issue%20and%20write%20mmr%20root%20directly%20to%20node.worker%20header%0A-%20fix%20nil%20pointer%20problems%2C%20shard%20state%20fetch%20issue%2C%20and%20refIndex%20bug%0A-%20clean%20up%0A%0A%60%60%60%0Atype%20headerFields%20struct%20%7B%0A%20ParentHash%20%20%20%20%20%20%20%20%20%20common.Hash%20%20%20%20%60json%3A%22parentHash%22%20%20%20%20%20%20%20gencodec%3A%22required%22%60%0A%20Coinbase%20%20%20%20%20%20%20%20%20%20%20%20common.Address%20%60json%3A%22miner%22%20%20%20%20%20%20%20%20%20%20%20%20gencodec%3A%22required%22%60%0A%20Root%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20common.Hash%20%20%20%20%60json%3A%22stateRoot%22%20%20%20%20%20%20%20%20gencodec%3A%22required%22%60%0A%20TxHash%20%20%20%20%20%20%20%20%20%20%20%20%20%20common.Hash%20%20%20%20%60json%3A%22transactionsRoot%22%20gencodec%3A%22required%22%60%0A%20ReceiptHash%20%20%20%20%20%20%20%20%20common.Hash%20%20%20%20%60json%3A%22receiptsRoot%22%20%20%20%20%20gencodec%3A%22required%22%60%0A%20OutgoingReceiptHash%20common.Hash%20%20%20%20%60json%3A%22outgoingReceiptsRoot%22%20%20%20%20%20gencodec%3A%22required%22%60%0A%20IncomingReceiptHash%20common.Hash%20%20%20%20%60json%3A%22incomingReceiptsRoot%22%20gencodec%3A%22required%22%60%0A%20Bloom%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20ethtypes.Bloom%20%60json%3A%22logsBloom%22%20%20%20%20%20%20%20%20gencodec%3A%22required%22%60%0A%20Number%20%20%20%20%20%20%20%20%20%20%20%20%20%20*big.Int%20%20%20%20%20%20%20%60json%3A%22number%22%20%20%20%20%20%20%20%20%20%20%20gencodec%3A%22required%22%60%0A%20GasLimit%20%20%20%20%20%20%20%20%20%20%20%20uint64%20%20%20%20%20%20%20%20%20%60json%3A%22gasLimit%22%20%20%20%20%20%20%20%20%20gencodec%3A%22required%22%60%0A%20GasUsed%20%20%20%20%20%20%20%20%20%20%20%20%20uint64%20%20%20%20%20%20%20%20%20%60json%3A%22gasUsed%22%20%20%20%20%20%20%20%20%20%20gencodec%3A%22required%22%60%0A%20Time%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20*big.Int%20%20%20%20%20%20%20%60json%3A%22timestamp%22%20%20%20%20%20%20%20%20gencodec%3A%22required%22%60%0A%20Extra%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%5B%5Dbyte%20%20%20%20%20%20%20%20%20%60json%3A%22extraData%22%20%20%20%20%20%20%20%20gencodec%3A%22required%22%60%0A%20MixDigest%20%20%20%20%20%20%20%20%20%20%20common.Hash%20%20%20%20%60json%3A%22mixHash%22%20%20%20%20%20%20%20%20%20%20gencodec%3A%22required%22%60%0A%20%2F%2F%20Additional%20Fields%0A%20ViewID%20%20%20%20%20%20%20%20%20%20%20%20%20%20*big.Int%20%20%20%20%60json%3A%22viewID%22%20%20%20%20%20%20%20%20%20%20%20gencodec%3A%22required%22%60%0A%20Epoch%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20*big.Int%20%20%20%20%60json%3A%22epoch%22%20%20%20%20%20%20%20%20%20%20%20%20gencodec%3A%22required%22%60%0A%20ShardID%20%20%20%20%20%20%20%20%20%20%20%20%20uint32%20%20%20%20%20%20%60json%3A%22shardID%22%20%20%20%20%20%20%20%20%20%20gencodec%3A%22required%22%60%0A%20LastCommitSignature%20%5B96%5Dbyte%20%20%20%20%60json%3A%22lastCommitSignature%22%20%20gencodec%3A%22required%22%60%0A%20LastCommitBitmap%20%20%20%20%5B%5Dbyte%20%20%20%20%20%20%60json%3A%22lastCommitBitmap%22%20%20%20%20%20gencodec%3A%22required%22%60%20%2F%2F%20Contains%20which%20validator%20signed%0A%20Vrf%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%5B%5Dbyte%20%20%20%20%20%20%60json%3A%22vrf%22%60%0A%20Vdf%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%5B%5Dbyte%20%20%20%20%20%20%60json%3A%22vdf%22%60%0A%20ShardState%20%20%20%20%20%20%20%20%20%20%5B%5Dbyte%20%20%20%20%20%20%60json%3A%22shardState%22%60%0A%20CrossLinks%20%20%20%20%20%20%20%20%20%20%5B%5Dbyte%20%20%20%20%20%20%60json%3A%22crossLink%22%60%0A%20Slashes%20%20%20%20%20%20%20%20%20%20%20%20%20%5B%5Dbyte%20%20%20%20%20%20%60json%3A%22slashes%22%60%0A%20MMRRoot%20%20%20%20%20%20%20%20%20%20%20%20%20common.Hash%20%60json%3A%22mmrRoot%22%60%0A%7D%0A%60%60%60%0A%0A**Sample%20Light%20Client%20Implementation%3A%20Horizon%20Bridge%20Harmony%20Light%20Client%20Deployed%20on%20Ethereum**%0A%0AThis%20enables%20the%20validation%20of%20previous%20blocks%20by%20implemented%20by%20%5BTokenLockerOnEthereum.sol%5D(https%3A%2F%2Fgithub.com%2Fjohnwhitton%2Fhorizon%2Fblob%2FrefactorV2%2Fcontracts%2FTokenLockerOnEthereum.sol)%20to%20use%20%5BMMRVerifier.sol%5D(https%3A%2F%2Fgithub.com%2Fjohnwhitton%2Fhorizon%2Fblob%2FrefactorV2%2Fcontracts%2Flib%2FMMRVerifier.sol)%20uses%20%60.%2Flib%2FMMRVerifier.sol%60%20to%20validate%20the%20%5BMountain%20Merkle%20Ranges%5D(https%3A%2F%2Fgithub.com%2Fopentimestamps%2Fopentimestamps-server%2Fblob%2Fmaster%2Fdoc%2Fmerkle-mountain-range.mdx)%0A%0A%23%23%20Code%20Review%0A%0AThe%20%5BHarmony%20codebase%5D(https%3A%2F%2Fgithub.com%2Fharmony-one%2Fharmony)%20was%20originally%20cloned%20from%20%5BEthereum%201.0%5D(.%2Fethereum-1-0.mdx)%20around%202019.Thus%20the%20majority%20of%20code%20incuding%20primitives%2C%20signing%20are%20similar%20as%20at%20that%20period.%20Since%20then%20Ethreum%20has%20worked%20siginficantly%20on%20Ethreum%202.0%20and%20these%20modifications%20were%20selectively%20leveraged%20by%20Harmony.%0A%0A%5BHarmony%20has%20significant%20differences%5D(https%3A%2F%2Fmedium.com%2Fharmony-one%2F2022-harmony-technical-review-88462efba368)%20from%20Ethereum%201.0%20including%20sharding%2C%20Effective%20Proof%20of%20Stake%20Consensus%20Mechanism%2C%20%5BRosetta%20support%5D(https%3A%2F%2Fwww.rosetta-api.org%2Fdocs%2Fwelcome.html)%20and%20verifiable%20delay%20functions%20and%20verifiaable%20random%20functions.%0A%0A%23%23%23%20Signing%0A%0A-%20%5Bbls%5D(https%3A%2F%2Fgithub.com%2Fharmony-one%2Fharmony%2Fblob%2Fmain%2Fcrypto%2Fbls%2Fbls.go)%3A%20An%20implementation%20of%20BLS%20threshold%20signature%0A-%20%5Bmultibls%5D(https%3A%2F%2Fgithub.com%2Fharmony-one%2Fharmony%2Fblob%2Fmain%2Fmultibls%2Fmultibls.go)%3A%20Wrapper%20for%20a%20collection%20of%20bls%20private%20and%20public%20keys%20with%20dedup%20functionality%20and%20the%20ability%20to%20serialize%20to%20a%20hex%20string.%0A%0A%23%23%23%20Consensus%0A%0A-%20%5Bconsensus%5D(https%3A%2F%2Fgithub.com%2Fharmony-one%2Fharmony%2Ftree%2Fmain%2Fconsensus)%3A%20Consensus%20package%20includes%20the%20Harmony%20BFT%20consensus%20protocol%20code%2C%20which%20uses%20BLS-based%20multi-signature%20to%20cosign%20the%20new%20block.%20(details%20are%20%5Bhere%5D(https%3A%2F%2Ftalk.harmony.one%2Ft%2Fbls-based-practical-bft-consensus%2F131)).%0A-%20%5Bhmy%5D(https%3A%2F%2Fgithub.com%2Fharmony-one%2Fharmony%2Ftree%2Fmain%2Fhmy)%3A%20implements%20the%20Harmony%20full%20node%20service.%0A%0A%23%23%23%20Sharding%0A%0A-%20%5Bshard%5D(https%3A%2F%2Fgithub.com%2Fharmony-one%2Fharmony%2Ftree%2Fmain%2Fshard)%3A%20Trackes%20the%20shard%20state%20and%20committee%20assignment.%0A%0A%23%23%23%20Staking%0A%0A-%20%5Bstaking%5D(https%3A%2F%2Fgithub.com%2Fharmony-one%2Fharmony%2Ftree%2Fmain%2Fstaking)%3A%20Implements%20staking%20for%20%5BHarmony's%20Effective%20Proof%20of%20Stake%5D(https%3A%2F%2Fblog.harmony.one%2Fintroducing-harmonys-effective-proof-of-stake-epos%2F)%0A%20%20-%20%5Bapr%5D(https%3A%2F%2Fgithub.com%2Fharmony-one%2Fharmony%2Ftree%2Fmain%2Fstaking%2Fapr)%3A%20Calculates%20the%20expected%20rewards%20per%20year%20and%20the%20rewards%20for%20Validators.%0A%20%20-%20%5Bavailablity%5D(https%3A%2F%2Fgithub.com%2Fharmony-one%2Fharmony%2Ftree%2Fmain%2Fstaking%2Favailability)%3A%20Measures%20the%20availability%20of%20validators.%0A%20%20-%20%5Beffective%5D(https%3A%2F%2Fgithub.com%2Fharmony-one%2Fharmony%2Ftree%2Fmain%2Fstaking%2Feffective)%3A%20Calcualates%20a%20validators%20effective%20proof%20of%20stake.%0A%20%20-%20%5Bnewtwork%5D(https%3A%2F%2Fgithub.com%2Fharmony-one%2Fharmony%2Ftree%2Fmain%2Fstaking%2Fnetwork)%3A%20Calculates%20the%20network%20rewards.%0A%20%20-%20%5Breward%5D(https%3A%2F%2Fgithub.com%2Fharmony-one%2Fharmony%2Ftree%2Fmain%2Fstaking%2Freward)%3A%20Checks%20whether%20rewards%20are%20issued%20and%20if%20so%20calculates%20the%20rewards%20based%20on%20total%20tokens%20staked.%0A%20%20-%20%5Bslash%5D(https%3A%2F%2Fgithub.com%2Fharmony-one%2Fharmony%2Ftree%2Fmain%2Fstaking%2Fslash)%3A%20Slashes%20validators%20for%20malevolent%20acts%20such%20as%20double%20signing.%0A%20%20-%20%5Btypes%5D(https%3A%2F%2Fgithub.com%2Fharmony-one%2Fharmony%2Ftree%2Fmain%2Fstaking%2Ftypes)%3A%20Type%20definitions%20for%20staking%20structures.%0A%20%20-%20%5Bverify%5D(https%3A%2F%2Fgithub.com%2Fharmony-one%2Fharmony%2Ftree%2Fmain%2Fstaking%2Fverify)%3A%20verifies%20aggregate%20signatures%0A%0A%23%23%23%20Rosetta%0A%0A-%20%5Brosetta%5D(https%3A%2F%2Fgithub.com%2Fharmony-one%2Fharmony%2Ftree%2Fmain%2Frosetta)%3A%20responsible%20for%20staring%20a%20%5Brosetta%5D(https%3A%2F%2Fwww.rosetta-api.org%2Fdocs%2Fwelcome.html)%20http%20server.%0A%0A%23%23%23%20Cryptographic%20Primitives%0A%0A**hash%20functions**%0A%0A-%20%5Bhash%5D(https%3A%2F%2Fgithub.com%2Fharmony-one%2Fharmony%2Ftree%2Fmain%2Fcrypto%2Fhash)%3A%20Uses%20kecakk256%20and%20sha256%20and%20provides%20the%20abilty%20to%20hash%20the%20RLP%20representation%20of%20the%20given%20object.%0A%0A**random%20number%20generators**%0A%0A-%20%5BVDF%5D(https%3A%2F%2Fgithub.com%2Fharmony-one%2Fharmony%2Ftree%2Fmain%2Fcrypto%2Fvdf)%3A%20Verifiable%20Random%20Delay%20Function.%20Package%20vdf%20is%20a%20proof-of-concept%20implementation%20of%20a%20delay%20function%20and%20the%20security%20properties%20are%20not%20guaranteed.%20A%20more%20secure%20implementation%20of%20the%20%5BVDF%20by%20Wesolowski%5D(https%3A%2F%2Feprint.iacr.org%2F2018%2F623.pdf)%20is%20to%20be%20implemented.%0A-%20%5BVRF%5D(https%3A%2F%2Fgithub.com%2Fharmony-one%2Fharmony%2Ftree%2Fmain%2Fcrypto%2Fvrf)%3A%20a%20pseudorandom%20function%20f_k%20from%20a%20secret%20key%20k%2C%20such%20that%20that%20knowledge%20of%20k%20not%20only%20enables%20one%20to%20evaluate%20f_k%20at%20for%20any%20message%20m%2C%20but%20also%20to%20provide%20an%20NP-proof%20that%20the%20value%20f_k(m)%20is%20indeed%20correct%20without%20compromising%20the%20unpredictability%20of%20f_k%20for%20any%20m'%20!%3D%20m.%20See%20%5BVerifiable%20Random%20Functions%5D(https%3A%2F%2Fdash.harvard.edu%2Fbitstream%2Fhandle%2F1%2F5028196%2FVadhan_VerifRandomFunction.pdf%3Fsequence%3D2%26isAllowed%3Dy).%0A%0A%23%23%20References%0A%0A**Consensus**%0A%0A-%20%5BHarmony%20FBFT%20Consensus%20Documentation%5D(https%3A%2F%2Fdocs.harmony.one%2Fhome%2Fgeneral%2Ftechnology%2Fconsensus)%3A%20Harmony%E2%80%99s%20consensus%20algorithm%20is%20called%20Fast%20Byzantine%20Fault%20Tolerance%20(FBFT)%2C%20which%20is%20an%20innovative%20upgrade%20on%20the%20famous%20PBFT%20algorithm.%20As%20an%20implementation%20detail%2C%20note%20that%20custom%20%5Bgenerator%20points%20are%20used%5D(https%3A%2F%2Fgithub.com%2Fherumi%2Fbls%2Fissues%2F74).%0A-%20%5BHarmony%20Slot%20Bidding%20and%20Election%5D(https%3A%2F%2Fdocs.harmony.one%2Fhome%2Fnetwork%2Fvalidators%2Fdefinitions%2Fslots-bidding-and-election)%0A-%20%5BBuilding%20a%20Better%20Blockchain%3A%20The%20Implementation%20of%20External%20Leader%20Rotation%20on%20Harmony%5D(https%3A%2F%2Fdocs.harmony.one%2Fhome%2Fnetwork%2Fvalidators%2Fdefinitions%2Fslots-bidding-and-election)%3A%20A%20proposal%20to%20improve%20the%20leader%20rotatation%20by%20introducing%20changes%20to%20incldue%20external%20validators.%0A-%20%5BHarmony%20consensus.go%20Code%5D(https%3A%2F%2Fgithub.com%2Fharmony-one%2Fharmony%2Fblob%2Fmain%2Fconsensus%2Fconsensus.go)%3A%20Harmony%20Consensus%20logic%20(go)%0A-%20%5BHarmony%20quorom.go%5D(https%3A%2F%2Fgithub.com%2Fharmony-one%2Fharmony%2Fblob%2Fmain%2Fconsensus%2Fquorum%2Fquorum.go)%3A%20Harmony's%20quorom%20logic%20responsible%20for%20trakcing%20participants%2C%20submitting%20and%20aggregating%20votes.%0A-%20%5BMerkle%20Mountain%20Ranges%5D(https%3A%2F%2Fdocs.grin.mw%2Fwiki%2Fchain-state%2Fmerkle-mountain-range%2F)%3A%20Merkle%20Mountain%20Ranges1%20are%20an%20alternative%20to%20Merkle%20trees2.%20While%20the%20latter%20relies%20on%20perfectly%20balanced%20binary%20trees%2C%20the%20former%20can%20be%20seen%20either%20as%20list%20of%20perfectly%20balance%20binary%20trees%20or%20a%20single%20binary%20tree%20that%20would%20have%20been%20truncated%20from%20the%20top%20right.%0A-%20%5BHarmony%20MMR-Hardfork%20Pull%20Request%203872%5D(https%3A%2F%2Fgithub.com%2Fharmony-one%2Fharmony%2Fpull%2F3872)%3A%20a%20MMR%20hard%20fork%20PR%20that%20adds%20mmrRoot%20to%20block%20header%2C%20adds%20logic%20to%20compute%20the%20MMR%20tree%20every%20epoch%2C%20RPCs%20to%20fetch%20the%20MMR%20proof%20for%20any%20given%20transaction.%0A-%20%5BHarmony%20MMR%20Hardfork%20Pull%20Request%204198%5D(https%3A%2F%2Fgithub.com%2Fharmony-one%2Fharmony%2Fpull%2F4198)%3A%20Follow%20up%20MMR%20pull%20request.%20_MMR%20is%20a%20series%20of%20perfect%20Merkle%20trees%2C%20from%20high%20to%20low.%20Each%20Merkle%20tree%20root%20we%20call%20it%20peak.%20Concat%20all%20peak%20hash%20and%20hash%20it%2C%20will%20get%20MMR%20root%20hash._%0A-%20%5BHarmony%20MMRHardfork%20block%20header%5D(https%3A%2F%2Fgithub.com%2Fpeekpi%2Fharmony%2Fblob%2FmmrHardfork%2Fblock%2Fv4%2Fheader.go)%3A%20Harmony%20proposed%20block%20header%20including%20Merkle%20Mountain%20range%20(go).%0A%0A**Signing**%0A%0A-%20%5BHarmony%20bls.go%20codebase%5D(https%3A%2F%2Fgithub.com%2Fharmony-one%2Fbls%2Fblob%2Fmaster%2Fffi%2Fgo%2Fbls%2Fbls.go)%3A%20Harmony's%20BLS%20library%20forked%20from%20%5Bherumi%2Fbls%5D(https%3A%2F%2Fgithub.com%2Fherumi%2Fbls)%20(go).%0A%0A**Staking**%0A%0A-%20%5BHarmony%20Effective%20Proof%20of%20Stake%20Documentation%5D(https%3A%2F%2Fdocs.harmony.one%2Fhome%2Fgeneral%2Ftechnology%2Feffective-proof-of-stake)%3A%20A%20staking%20mechanism%20for%20Harmony's%20sharded%20blockchain%20that%20achieves%20both%20security%20and%20decentralization%20using%20effective%20stake.%0A-%20%5BHarmony%20Staking%20Dashboard%5D(https%3A%2F%2Fstaking.harmony.one%2Fvalidators%2Fmainnet)%3A%20Staking%20Dashboard%20showing%20approximately%20140%20Elected%20Validators%20from%20299%20active%20validators.%0A%0A%23%23%20Footnotes%0A%0A%5B%5E1%5D%3A%20%5BHarmony%20consensus%20documentation%5D(https%3A%2F%2Fdocs.harmony.one%2Fhome%2Fgeneral%2Ftechnology%2Fconsensus).%20As%20an%20implementation%20detail%2C%20note%20that%20custom%20%5Bgenerator%20points%20are%20used%5D(https%3A%2F%2Fgithub.com%2Fherumi%2Fbls%2Fissues%2F74)%0A%0A%5B%5E2%5D%3A%20%5BHarmony%20Slot%20Bidding%20and%20Election%5D(https%3A%2F%2Fdocs.harmony.one%2Fhome%2Fnetwork%2Fvalidators%2Fdefinitions%2Fslots-bidding-and-election)%0A%0A%5B%5E3%5D%3A%20%5BScaling%20the%20Harmony%20Protocol%20with%20Light%20Clients%5D(https%3A%2F%2Fmedium.com%2Fharmony-one%2Fscaling-the-harmony-protocol-with-light-clients-66d1eab26bf)%3A%20a%20step-by-step%20guide%20on%20how%20to%20develop%20and%20run%20a%20light%20client%20on%20the%20Harmony%20Protocol%20using%20code%20examples.%0A",lastUpdatedAt:1753125084e3},{lazy:()=>o2(()=>import("./intro-DZixVYuv.js"),[]),path:"/research/chains/intro",type:"mdx",filePath:"research/chains/intro.mdx",content:"%23%20Chain%20Research%0A%0A-%20date%3A%202023-02-04%0A-%20last%20updated%3A%202023-02-04%0A%0A%23%23%20Overview%0A%0AHere%20we%20do%20a%20deep%20dive%20on%20individual%20chains%20with%20a%20focus%20on%20the%20following%20areas%0A%0A-%20Consensus%20Mechanism%0A-%20Signing%20Algorithms%20Supported%0A-%20Light%20Client%20Support%0A-%20Gas%20Costs%0A-%20Settlement%20Time%0A-%20Codebases%0A%0A%23%23%20Chain%20Economics%0A%0AFollowing%20is%20an%20overview%20of%20the%20economics%20of%20sample%20chains.%20These%20chains%20are%20early%20candidates%20for%20the%20design%20and%20implementation%20of%20trustless%20bridging%20that%20we%20have%20been%20doing.%0A%0A%7C%20Chain%20%20%20%20%20%7C%20Token%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7C%20Token%20Price%20%7C%20Market%20Capitalization%20%7C%20Total%20Value%20Locked%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7C%0A%7C%20---------%20%7C%20-----------------------------------------------------%20%7C%20-----------%20%7C%20---------------------%20%7C%20---------------------------------------------------------%20%7C%0A%7C%20Avalanche%20%7C%20%5BAVAX%5D(https%3A%2F%2Fwww.coingecko.com%2Fen%2Fcoins%2Favalanche)%20%20%7C%20%2417.83%20%20%20%20%20%20%7C%20%245%2C619%2C898%2C947%20%20%20%20%20%20%20%20%7C%20%5B%24912%2C440%2C000%5D(https%3A%2F%2Fdefillama.com%2Fchain%2FAvalanche)%20%20%20%20%20%7C%0A%7C%20BSC%20%20%20%20%20%20%20%7C%20%5BBNB%5D(https%3A%2F%2Fwww.coingecko.com%2Fen%2Fcoins%2Fbnb)%20%20%20%20%20%20%20%20%20%7C%20%24308.08%20%20%20%20%20%7C%20%2448%2C646%2C681%2C885%20%20%20%20%20%20%20%7C%20%5B%244%2C840%2C000%2C000%5D(https%3A%2F%2Fdefillama.com%2Fchain%2FBSC)%20%20%20%20%20%20%20%20%20%7C%0A%7C%20Cosmos%20%20%20%20%7C%20%5BATOM%5D(https%3A%2F%2Fwww.coingecko.com%2Fen%2Fcoins%2Fcosmos-hub)%20%7C%20%2413.53%20%20%20%20%20%20%7C%20%243%2C959%2C718%2C206%20%20%20%20%20%20%20%20%7C%20%5B%241%2C218%2C000%2C000%5D(https%3A%2F%2Fdefillama.com%2Fchains%2FCosmos)%20%2B%2B%2B%20%7C%0A%7C%20Ethereum%20%20%7C%20%5BETH%5D(https%3A%2F%2Fwww.coingecko.com%2Fen%2Fcoins%2Fethereum)%20%20%20%20%7C%20%241%2C519.29%20%20%20%7C%20%24183%2C069%2C985%2C916%20%20%20%20%20%20%7C%20%5B%2427%2C850%2C000%2C000%5D(https%3A%2F%2Fdefillama.com%2Fchain%2FEthereum)%20%20%20%7C%0A%7C%20Harmony%20%20%20%7C%20%5BONE%5D(https%3A%2F%2Fwww.coingecko.com%2Fen%2Fcoins%2Fharmony)%20%20%20%20%20%7C%20%240.0244%20%20%20%20%20%7C%20%24299%2C878%2C381%20%20%20%20%20%20%20%20%20%20%7C%20%5B%246%2C958%2C436%5D(https%3A%2F%2Fdefillama.com%2Fchain%2FHarmony)%20%20%20%20%20%20%20%20%20%7C%0A%7C%20Polygon%20%20%20%7C%20%5BMATIC%5D(https%3A%2F%2Fwww.coingecko.com%2Fen%2Fcoins%2Fpolygon)%20%20%20%7C%20%241.24%20%20%20%20%20%20%20%7C%20%2411%2C171%2C619%2C834%20%20%20%20%20%20%20%7C%20%5B%241%2C170%2C000%2C000%5D(https%3A%2F%2Fdefillama.com%2Fchain%2FPolygon)%20%20%20%20%20%7C%0A%7C%20Pokadot%20%20%20%7C%20%5BDOT%5D(https%3A%2F%2Fwww.coingecko.com%2Fen%2Fcoins%2Fpolkadot)%20%20%20%20%7C%20%246.22%20%20%20%20%20%20%20%7C%20%247%2C475%2C485%2C172%20%20%20%20%20%20%20%20%7C%20%5B%24278%2C000%2C000%5D(https%3A%2F%2Fdefillama.com%2Fchains%2FParachain)%20%2B%2B%20%7C%0A%0A_The%20above%20data%20is%20from%20Feburary%2011th%2C%202023.%20Links%20are%20provided%20to%20get%20current%20information._%0A%0A_%2B%2B%20Polkadot%20TVL%20includes%20all%20parachains_%0A%0A_%2B%2B%2B%20Cosmos%20TVL%20include%20all%20cosmos%20based%20networks_%0A%0A%23%23%20Chain%20Technology%0A%0AFollowing%20is%20an%20overview%20of%20the%20consensus%2C%20signing%20and%20staking%20mechanisms%20for%20sample%20chains.%20These%20chains%20are%20early%20candidates%20for%20the%20design%20and%20implementation%20of%20trustless%20bridging%20that%20we%20have%20been%20doing.%0A%0A%7C%20Chain%20%20%20%20%20%20%7C%20Consensusigning%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7C%20Staking%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7C%20Validators%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7C%20Subnetsvalanche%20%20%7C%20%5BSnowball%5D(https%3A%2F%2Fdocs.avax.network%2Foverview%2Fgetting-started%2Favalanche-consensus)%2C%20%5BWhite%20Paper%5D(https%3A%2F%2Fassets.website-files.com%2F5d80307810123f5ffbb34d6e%2F6009805681b416f34dcae012_Avalanche%2520Consensus%2520Whitepaper.pdf)%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7C%20%5Brsa%5D(%3Chttps%3A%2F%2Fen.wikipedia.org%2Fwiki%2FRSA_(cryptosystem)%3E)%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7C%20%5BAvalanche%20Staking%5D(https%3A%2F%2Fdocs.avax.network%2Fnodes%2Fvalidate%2Fstaking%23staking-parameters-on-avalanche)%20%7C%20%5B1215%5D(https%3A%2F%2Fsubnets.avax.network%2Fvalidators)%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7C%20%5B45%5D(https%3A%2F%2Fsubnets.avax.network%2Fsubnets)%20%5Bsubnets%5D(https%3A%2F%2Fdocs.avax.network%2Fsubnets)%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7C%0A%7C%20BSC%20%20%20%20%20%20%20%20%7C%20%5BParlia%5D(https%3A%2F%2Fdocs.bnbchain.org%2Fdocs%2Flearn%2Fconsensus%2F%23consensus-protocolsecp256k1%5D(https%3A%2F%2Fdocs.bnbchain.org%2Fdocs%2Fbeaconchain%2Flearn%2Faccounts%2F%23signature)%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7C%20%5BPoSA%5D(https%3A%2F%2Fdocs.bnbchain.org%2Fdocs%2Fstake%2FStaking%2F)%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7C%20%5B50%5D(https%3A%2F%2Fwww.bnbchain.org%2Fen%2Fstaking)%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7C%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7C%0A%7C%20Cosmos%20Hub%20%7C%20%5BTendermint%5D(https%3A%2F%2Fdocs.tendermint.com%2Fv0.34%2Fintroduction%2Fwhat-is-tendermint.htmled25519%5D(https%3A%2F%2Fed25519.cr.yp.to%2F)%20%5BValidator%20Keys%5D(https%3A%2F%2Fdocs.tendermint.com%2Fv0.34%2Ftendermint-core%2Fvalidators.html%23validator-keys)%20%20%20%20%20%20%7C%20%5BCosmos%20Staking%5D(https%3A%2F%2Fdocs.cosmos.network%2Fv0.46%2Fmodules%2Fstaking%2F)%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7C%20%5B504%5D(https%3A%2F%2Fwww.mintscan.io%2Fcosmos%2Fvalidators)%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7C%20%5B21%5D(https%3A%2F%2Fdefillama.com%2Fchains%2FCosmos)%20%5BChains%5D(https%3A%2F%2Fdocs.cosmos.network%2Fmain%2Fintro%2Fwhy-app-specific)%20%20%20%7C%0A%7C%20Ethereum%20%20%20%7C%20%5BGasper%5D(https%3A%2F%2Farxiv.org%2Fpdf%2F2003.03052.pdfoS%5D(https%3A%2F%2Fethereum.org%2Fen%2Fdevelopers%2Fdocs%2Fconsensus-mechanisms%2Fpos%2F)%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7C%20%5B16%2C477%2C159%5D(https%3A%2F%2Fethereum.org%2Fen%2Fstaking%2F)%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7C%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7C%0A%7C%20Harmony%20%20%20%20%7C%20%5BFBFT%5D(https%3A%2F%2Fdocs.harmony.one%2Fhome%2Fgeneral%2Ftechnology%2Fconsensushttps%3A%2F%2Fmedium.com%2F%40caseyga%2Fexploring-bls-keys-on-the-harmony-protocol-understanding-generation-management-and-use-cases-b8722f7219fc)%20%7C%20%5BEPoS%5D(https%3A%2F%2Fdocs.harmony.one%2Fhome%2Fgeneral%2Ftechnology%2Feffective-proof-of-stake)%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7C%20%5B299%5D(https%3A%2F%2Fstaking.harmony.one%2Fvalidators%2Fmainnet)%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7C%20%5B4%5D(https%3A%2F%2Fexplorer.harmony.one%2F)%20%5Bshards%5D(https%3A%2F%2Fdocs.harmony.one%2Fhome%2Fgeneral%2Ftechnology%2Fsharding)%20%20%20%20%20%20%20%20%7C%0A%7C%20Polygon%20%20%20%20%7C%20%5BPeppermint%5D(https%3A%2F%2Fwiki.polygon.technology%2Fdocs%2Fpos%2Fpeppermint%2F)%2C%20%5BHeimdall%20and%20Bor%5D(https%3A%2F%2Fpolygon.technology%2Fblog%2Fheimdall-and-bor)%2C%20%5C_%5BHeimdall%5D(https%3A%2F%2Fwiki.polygon.technology%2Fdocs%2Fpos%2Fheimdall%2Foverview%2F)%2C%20%5BBOR%5D(https%3A%2F%2Fwiki.polygon.technology%2Fdocs%2Fpos%2Fbor%2Fconsensus%2F)%20%7C%20secp256k1%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7C%20%5BHeimdall%20Staking%5D(https%3A%2F%2Fwiki.polygon.technology%2Fdocs%2Fpos%2Fheimdall%2Fmodules%2Fstaking%2F)%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7C%20%5B100%5D(https%3A%2F%2Fstaking.polygon.technology%2F)%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7C%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7C%0A%7C%20Polkadot%20%20%20%7C%20%5BNPoS%5D(https%3A%2F%2Fwiki.polkadot.network%2Fdocs%2Flearn-consensusr25519%5D(https%3A%2F%2Fwiki.polkadot.network%2Fdocs%2Flearn-cryptography%23what-is-sr25519-and-where-did-it-come-from)%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7C%20%5BNominated%20Pools%5D(https%3A%2F%2Fwiki.polkadot.network%2Fdocs%2Flearn-staking)%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7C%20%5B1200%5D(https%3A%2F%2Fstaking.polkadot.network%2F%3Futm_source%3Dpolkadot.network%23%2Fvalidators)%20%7C%20%5B36%5D(https%3A%2F%2Fpolkadot.subscan.io%2Fparachain)%20%5Bparachains%5D(https%3A%2F%2Fwiki.polkadot.network%2Fdocs%2Flearn-parachains)%20%7C%0A%0A_The%20above%20data%20is%20from%20Feburary%2011th%2C%202023.%20Links%20are%20provided%20to%20get%20current%20information._%0A%0A%23%23%20Consensus%20Implementations%0A%0A%23%23%23%20Consensus%0A%0A-%20%5Bavalanche%5D(https%3A%2F%2Fgithub.com%2Fava-labs%2Favalanchego%2Fblob%2Fmaster%2Fsnow%2FREADME.mdx)%20(go)%0A%20%20-%20%5Bavalanche%5D(https%3A%2F%2Fgithub.com%2Fava-labs%2Favalanchego%2Ftree%2Fmaster%2Fsnow%2Fconsensus%2Favalanche)%3A%20a%20general%20avalanche%20instance%20that%20can%20be%20used%20directly%20to%20process%20a%20series%20of%20partially%20ordered%20elements.%0A%20%20-%20%5Bsnowball%5D(https%3A%2F%2Fgithub.com%2Fava-labs%2Favalanchego%2Ftree%2Fmaster%2Fsnow%2Fconsensus%2Fsnowball)%3A%20a%20general%20snow%20instance%20that%20can%20be%20used%20directly%20to%20process%20the%20results%20of%20network%20queries.%0A%20%20-%20%5Bsnowman%5D(https%3A%2F%2Fgithub.com%2Fava-labs%2Favalanchego%2Ftree%2Fmaster%2Fsnow%2Fconsensus%2Fsnowman)%3A%20a%20general%20snowman%20instance%20that%20can%20be%20used%20directly%20to%20process%20a%20series%20of%20dependent%20operations.%0A%20%20-%20%5Bsnowstorm%5D(https%3A%2F%2Fgithub.com%2Fava-labs%2Favalanchego%2Ftree%2Fmaster%2Fsnow%2Fconsensus%2Fsnowstorm)%3A%20a%20snowball%20instance%20deciding%20between%20an%20unbounded%20number%20of%20non-transitive%20conflicts.%20After%20performing%20a%20network%20sample%20of%20k%20nodes%2C%20you%20should%20call%20collect%20with%20the%20responses.%0A%20%20-%20%5BSnowman%2B%2B%3A%20congestion%20control%20for%20Snowman%20VMs%5D(https%3A%2F%2Fgithub.com%2Fava-labs%2Favalanchego%2Fblob%2Fmaster%2Fvms%2Fproposervm%2FREADME.mdx)%3A%20Snowman%2B%2B%20introduces%20a%20soft%20proposer%20mechanism%20which%20attempts%20to%20select%20a%20single%20proposer%20with%20the%20power%20to%20issue%20a%20block%2C%20but%20opens%20up%20block%20production%20to%20every%20validator%20if%20sufficient%20time%20has%20passed%20without%20blocks%20being%20generated.%0A%20%20-%20%5BAvalanche%20Warp%20Messaging%20(AWM)%5D(https%3A%2F%2Fmedium.com%2Favalancheavax%2Favalanche-warp-messaging-awm-launches-with-the-first-native-subnet-to-subnet-message-on-avalanche-c0ceec32144a)%3A%20AWM%20enables%20Subnet%20Validators%20to%20collectively%20produce%20a%20BLS%20Multi-Signature%20that%20attests%20to%20the%20validity%20of%20an%20arbitrary%20message%20(e.g.%2C%20transfer%2C%20contract%20data%2C%20etc.)%20that%20can%20be%20verified%20by%20any%20other%20Subnet.%0A-%20%5Bbsc%5D(https%3A%2F%2Fgithub.com%2Fbnb-chain%2Fbsc%2Ftree%2Fmaster%2Fconsensus)%20(go)%0A%20%20-%20%5Bbeacon%5D(https%3A%2F%2Fgithub.com%2Fbnb-chain%2Fbsc%2Fblob%2Fmaster%2Fconsensus%2Fbeacon%2Fconsensus.go)%3A%20Beacon%20is%20a%20consensus%20engine%20that%20combines%20the%20eth1%20consensus%20and%20proof-of-stake%20algorithm.%20There%20is%20a%20special%20flag%20inside%20to%20decide%20whether%20to%20use%20legacy%20consensus%20rules%20or%20new%20rules.%20The%20transition%20rule%20is%20described%20in%20the%20eth1%2F2%20merge%20spec%20%5Beip-3675%5D(https%3A%2F%2Feips.ethereum.org%2FEIPS%2Feip-3675).%20The%20beacon%20here%20is%20a%20half-functional%20consensus%20engine%20with%20partial%20functions%20which%20is%20only%20used%20for%20necessary%20consensus%20checks.%20The%20legacy%20consensus%20engine%20can%20be%20any%20engine%20implements%20the%20consensus%20interface%20(except%20the%20beacon%20itself).%0A%20%20-%20%5Bclique%5D(https%3A%2F%2Fgithub.com%2Fbnb-chain%2Fbsc%2Fblob%2Fmaster%2Fconsensus%2Fclique%2Fclique.go)%3A%20Clique%20is%20the%20proof-of-authority%20consensus%20engine%20proposed%20to%20support%20the%20Ethereum%20testnet%20following%20the%20Ropsten%20attacks.%0A%20%20-%20%5Bethash%5D(https%3A%2F%2Fgithub.com%2Fbnb-chain%2Fbsc%2Fblob%2Fmaster%2Fconsensus%2Fethash%2Fconsensus.go)%3A%20Ethash%20proof-of-work%20protocol%20(obsolete).%0A%20%20-%20%5Bmisc%5D(https%3A%2F%2Fgithub.com%2Fbnb-chain%2Fbsc%2Ftree%2Fmaster%2Fconsensus%2Fmisc)%3A%20includes%20code%20for%20%5Beip-1559%5D(https%3A%2F%2Feips.ethereum.org%2FEIPS%2Feip-1559)%2C%20DAO%20hard-fork%20extension%20to%20the%20header%20validity%2C%20VerifyForkHashes%20verifies%20that%20blocks%20conforming%20to%20network%20hard-forks%20do%20have%20the%20correct%20hashes%20and%20erifyGaslimit%20verifies%20the%20header%20gas%20limit%20according%20increase%2Fdecrease%20in%20relation%20to%20the%20parent%20gas%20limit.%0A%20%20-%20%5Bparlia%5D(https%3A%2F%2Fgithub.com%2Fbnb-chain%2Fbsc%2Fblob%2Fmaster%2Fconsensus%2Fparlia%2Fparlia.go)%3A%20Parlia%20is%20the%20consensus%20engine%20of%20BSC%0A-%20%5Bethereum%5D(https%3A%2F%2Fgithub.com%2Fethereum%2Fconsensus-specs)%0A%20%20-%20%5BEthreum%202.0%20Fork%20Choice%5D(https%3A%2F%2Fgithub.com%2Fethereum%2Fconsensus-specs%2Fblob%2Fv0.12.1%2Fspecs%2Fphase0%2Ffork-choice.mdx)%0A%20%20-%20%5BPaths%20toward%20single-slot%20finality%5D(https%3A%2F%2Fnotes.ethereum.org%2F%40vbuterin%2Fsingle_slot_finality)%3A%20A%20look%20at%20how%20to%20improve%20Ethereum%E2%80%99s%20LMD%20GHOST%20%2B%20Casper%20FFG%20consensus.%0A%20%20%20%20-%20%5Blighthouse%5D(https%3A%2F%2Fgithub.com%2Fsigp%2Flighthouse%2Ftree%2Fstable%2Fconsensus%2Ffork_choice)%20(rust)%3A%20stores%20the%20actual%20block%20DAG%20in%20%60ProtoArrayForkChoice%60.%20-%20%60time%60%20is%20represented%20using%20%60Slot%60%20instead%20of%20UNIX%20epoch%20%60u64%60.%0A%20%20-%20%5Bproto_array%5D%0A%20%20%20%20-%20%5Blighthouse%20proto_array%5D(https%3A%2F%2Fgithub.com%2Fsigp%2Flighthouse%2Ftree%2Fstable%2Fconsensus%2Fproto_array)%20(rust)%3A%20ProtoArray%20iterates%20backwards%20through%20the%20array%2C%20touching%20all%20nodes%20and%20their%20parents%20and%20potentially%20the%20best-child%20of%20each%20parent.%20The%20structure%20of%20the%20%60self.nodes%60%20array%20ensures%20that%20the%20child%20of%20each%20node%20is%20always%20touched%20before%20its%20parent.%0A%20%20-%20%5BSerDes%5D(https%3A%2F%2Fen.wikipedia.org%2Fwiki%2FSerDes)%3A%20Serializer%2FDeserializer%0A%20%20%20%20-%20%5Blighthouse%20serde_utils%5D(https%3A%2F%2Fgithub.com%2Fsigp%2Flighthouse%2Ftree%2Fstable%2Fconsensus%2Fserde_utils)%20(rust)%0A%20%20-%20%5Bsimple%20serialize%5D(https%3A%2F%2Fgithub.com%2Fethereum%2Feth2.0-specs%2Fblob%2Fv0.12.1%2Fssz%2Fsimple-serialize.mdx)%0A%20%20%20%20-%20%5Blighthouse%20ssz%5D(https%3A%2F%2Fgithub.com%2Fsigp%2Flighthouse%2Fblob%2Fstable%2Fconsensus%2Fssz%2Fsrc%2Flib.rs)%20(rust)%3A%20Provides%20encoding%20(serialization)%20and%20decoding(deserialization)%20in%20the%20SimpleSerialize%20(SSZ)%20format%20designed%20for%20use%20in%20Ethereum%202.0.%0A%20%20%20%20-%20%5Blighthouse%20ssz_derive%5D(https%3A%2F%2Fgithub.com%2Fsigp%2Flighthouse%2Ftree%2Fstable%2Fconsensus%2Fssz_derive)%20(rust)%3A%20Provides%20procedural%20derive%20macros%20for%20the%20%60Encode%60%20and%20%60Decode%60%20traits%20of%20the%20%60eth2_ssz%60%20crate.%0A%20%20%20%20-%20%5Blighthouse%20ssz_types%5D(https%3A%2F%2Fgithub.com%2Fsigp%2Flighthouse%2Ftree%2Fstable%2Fconsensus%2Fssz_types)%20(rust)%3A%20Provides%20types%20with%20unique%20properties%20required%20for%20SSZ%20serialization%20and%20Merklization%0A%20%20%20%20-%20%5Bprysm%20ssz.bzl%5D(https%3A%2F%2Fgithub.com%2Fprysmaticlabs%2Fprysm%2Fblob%2Fa7010d817dc839b0a46742dc286402357482da46%2Ftools%2Fssz.bzl%23L70)%20(bazel)%3A%20A%20rule%20that%20uses%20the%20generated%20pb.go%20files%20from%20a%20go_proto_library%20target%20to%20generate%20SSZ%20marshal%20and%20unmarshal%20functions%20as%20pointer%20receivers%20on%20the%20specified%20objects.%0A%20%20-%20%5Bstate_processing%5D(https%3A%2F%2Fgithub.com%2Fethereum%2Fconsensus-specs%2Fblob%2Fdev%2Fspecs%2Fbellatrix%2Fbeacon-chain.md%23beacon-chain-state-transition-function)%0A%20%20%20%20-%20%5Blighthouse%20state_procesing%5D(https%3A%2F%2Fgithub.com%2Fsigp%2Flighthouse%2Ftree%2Fstable%2Fconsensus%2Fstate_processing)%20(rust)%3A%20State%20processing%20functions%20including%20block%2C%20slot%20and%20epoch%20functions.%0A%20%20-%20%5Bcompute_shuffled_index%5D(https%3A%2F%2Fgithub.com%2Fethereum%2Fconsensus-specs%2Fblob%2Fv0.12.1%2Fspecs%2Fphase0%2Fbeacon-chain.md%23compute_shuffled_index)%0A%20%20%20%20-%20%5Blighthouse%20swap_or_not_shuffle%5D(https%3A%2F%2Fgithub.com%2Fsigp%2Flighthouse%2Ftree%2Fstable%2Fconsensus%2Fswap_or_not_shuffle)%20(rust)%3A%20Provides%20list-shuffling%20functions%20matching%20the%20Ethereum%202.0%20specification.%0A%20%20-%20%5Btypes%5D%0A%20%20%20%20-%20%5Blighthouse%20types%5D(https%3A%2F%2Fgithub.com%2Fsigp%2Flighthouse%2Ftree%2Fstable%2Fconsensus%2Ftypes)%20(rust)%3A%20Includes%20type%20definitions%20used%20in%20consensus%20including%20%60beacon_block_header%60%2C%20%60beacon_comittee%60%2C%20%2C%60beacon_state%60%2C%20%60sync_comitte%60%20and%20more.%0A-%20%5Bharmony%5D(https%3A%2F%2Fgithub.com%2Fharmony-one%2Fharmony%2Fblob%2Fmain%2Fconsensus%2FREADME.mdx)%20(go)%0A%20%20-%20%5Bharmony%20consensus%5D(https%3A%2F%2Fgithub.com%2Fharmony-one%2Fharmony%2Ftree%2Fmain%2Fconsensus)%0A-%20%5Bnear%5D(https%3A%2F%2Fnomicon.io%2FChainSpec%2FConsensus)%20(rust)%0A%20%20-%20%5Bnear%20nearcore%5D(https%3A%2F%2Fgithub.com%2Fnear%2Fnearcore%2Ftree%2Fmaster%2Fnearcore)%0A-%20%5Bpolkadot%5D(https%3A%2F%2Fwiki.polkadot.network%2Fdocs%2Flearn-consensus)%20(rust)%3A%20%5Bcode%5D(https%3A%2F%2Fgithub.com%2Fparitytech%2Fsubstrate%2Ftree%2Fmaster%2Fprimitives%2Fconsensus)%0A%20%20-%20%5Baura%5D(https%3A%2F%2Fgithub.com%2Fparitytech%2Fsubstrate%2Ftree%2Fmaster%2Fprimitives%2Fconsensus%2Faura)%0A%20%20-%20%5Bbabe%5D(https%3A%2F%2Fgithub.com%2Fparitytech%2Fsubstrate%2Ftree%2Fmaster%2Fprimitives%2Fconsensus%2Fbabe)%0A%20%20-%20%5Bbeefy%5D(https%3A%2F%2Fgithub.com%2Fparitytech%2Fsubstrate%2Ftree%2Fmaster%2Fprimitives%2Fconsensus%2Fbeefy)%0A%20%20-%20%5Bgrandpa%5D(https%3A%2F%2Fgithub.com%2Fparitytech%2Fsubstrate%2Ftree%2Fmaster%2Fprimitives%2Fconsensus%2Fgrandpa)%0A%20%20-%20%5Bpow%5D(https%3A%2F%2Fgithub.com%2Fparitytech%2Fsubstrate%2Ftree%2Fmaster%2Fprimitives%2Fconsensus%2Fpow)%0A%20%20-%20additional%20primitives%0A%20%20%20%20-%20%5Bcommon%5D(https%3A%2F%2Fgithub.com%2Fparitytech%2Fsubstrate%2Ftree%2Fmaster%2Fprimitives%2Fconsensus%2Fcommon)%3A%20Common%20utilities%20for%20building%20and%20using%20consensus%20engines%20in%20substrate.%0A%20%20%20%20-%20%5Bslots%5D(https%3A%2F%2Fgithub.com%2Fparitytech%2Fsubstrate%2Ftree%2Fmaster%2Fprimitives%2Fconsensus%2Fslots)%3A%20Primitives%20for%20slots-based%20consensus%20engines.%0A%20%20%20%20-%20%5Bvrf%5D(https%3A%2F%2Fgithub.com%2Fparitytech%2Fsubstrate%2Ftree%2Fmaster%2Fprimitives%2Fconsensus%2Fvrf)%3A%20Primitives%20for%20VRF-based%20consensus%20engines.%20Schnorrkel-based%20VRF.%0A-%20%5Bpolygon%20heimdall%5D()%20(go)%3A%20Validator%20node%20for%20Matic%20Network.%20It%20uses%20peppermint%2C%20customized%20Tendermint.%20Here%20is%20where%20it%20sends%20validator%20updates%20to%20%5Bpeppermint%5D(https%3A%2F%2Fgithub.com%2Fmaticnetwork%2Fheimdall%2Fblob%2Fdevelop%2Fapp%2Fapp.go%23L625)%0A%20%20-%20%5Bpolygon%20peppermint%5D(https%3A%2F%2Fgithub.com%2Fmaticnetwork%2Ftendermint%2Ftree%2Fpeppermint%2Fconsensus)(go)%3A%20Peppermint%20is%20a%20modified%20Tendermint.%20It%20is%20changed%20to%20make%20it%20compatible%20with%20Ethereum%20addresses%20and%20verifiable%20on%20Ethereum%20chain.%20(docs%20are%20%5Bhere%5D(https%3A%2F%2Fwiki.polygon.technology%2Fdocs%2Fpos%2Fpeppermint%2F))%0A-%20%5Btendermint%20tendermint%5D(https%3A%2F%2Fgithub.com%2Ftendermint%2Ftendermint%2Ftree%2Fmain%2Fconsensus)%20(go)%0A",lastUpdatedAt:1753125084e3},{lazy:()=>o2(()=>import("./intro-DZixVYuv.js"),[]),path:"/research/chains/intro.html",type:"mdx",filePath:"research/chains/intro.mdx",content:"%23%20Chain%20Research%0A%0A-%20date%3A%202023-02-04%0A-%20last%20updated%3A%202023-02-04%0A%0A%23%23%20Overview%0A%0AHere%20we%20do%20a%20deep%20dive%20on%20individual%20chains%20with%20a%20focus%20on%20the%20following%20areas%0A%0A-%20Consensus%20Mechanism%0A-%20Signing%20Algorithms%20Supported%0A-%20Light%20Client%20Support%0A-%20Gas%20Costs%0A-%20Settlement%20Time%0A-%20Codebases%0A%0A%23%23%20Chain%20Economics%0A%0AFollowing%20is%20an%20overview%20of%20the%20economics%20of%20sample%20chains.%20These%20chains%20are%20early%20candidates%20for%20the%20design%20and%20implementation%20of%20trustless%20bridging%20that%20we%20have%20been%20doing.%0A%0A%7C%20Chain%20%20%20%20%20%7C%20Token%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7C%20Token%20Price%20%7C%20Market%20Capitalization%20%7C%20Total%20Value%20Locked%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7C%0A%7C%20---------%20%7C%20-----------------------------------------------------%20%7C%20-----------%20%7C%20---------------------%20%7C%20---------------------------------------------------------%20%7C%0A%7C%20Avalanche%20%7C%20%5BAVAX%5D(https%3A%2F%2Fwww.coingecko.com%2Fen%2Fcoins%2Favalanche)%20%20%7C%20%2417.83%20%20%20%20%20%20%7C%20%245%2C619%2C898%2C947%20%20%20%20%20%20%20%20%7C%20%5B%24912%2C440%2C000%5D(https%3A%2F%2Fdefillama.com%2Fchain%2FAvalanche)%20%20%20%20%20%7C%0A%7C%20BSC%20%20%20%20%20%20%20%7C%20%5BBNB%5D(https%3A%2F%2Fwww.coingecko.com%2Fen%2Fcoins%2Fbnb)%20%20%20%20%20%20%20%20%20%7C%20%24308.08%20%20%20%20%20%7C%20%2448%2C646%2C681%2C885%20%20%20%20%20%20%20%7C%20%5B%244%2C840%2C000%2C000%5D(https%3A%2F%2Fdefillama.com%2Fchain%2FBSC)%20%20%20%20%20%20%20%20%20%7C%0A%7C%20Cosmos%20%20%20%20%7C%20%5BATOM%5D(https%3A%2F%2Fwww.coingecko.com%2Fen%2Fcoins%2Fcosmos-hub)%20%7C%20%2413.53%20%20%20%20%20%20%7C%20%243%2C959%2C718%2C206%20%20%20%20%20%20%20%20%7C%20%5B%241%2C218%2C000%2C000%5D(https%3A%2F%2Fdefillama.com%2Fchains%2FCosmos)%20%2B%2B%2B%20%7C%0A%7C%20Ethereum%20%20%7C%20%5BETH%5D(https%3A%2F%2Fwww.coingecko.com%2Fen%2Fcoins%2Fethereum)%20%20%20%20%7C%20%241%2C519.29%20%20%20%7C%20%24183%2C069%2C985%2C916%20%20%20%20%20%20%7C%20%5B%2427%2C850%2C000%2C000%5D(https%3A%2F%2Fdefillama.com%2Fchain%2FEthereum)%20%20%20%7C%0A%7C%20Harmony%20%20%20%7C%20%5BONE%5D(https%3A%2F%2Fwww.coingecko.com%2Fen%2Fcoins%2Fharmony)%20%20%20%20%20%7C%20%240.0244%20%20%20%20%20%7C%20%24299%2C878%2C381%20%20%20%20%20%20%20%20%20%20%7C%20%5B%246%2C958%2C436%5D(https%3A%2F%2Fdefillama.com%2Fchain%2FHarmony)%20%20%20%20%20%20%20%20%20%7C%0A%7C%20Polygon%20%20%20%7C%20%5BMATIC%5D(https%3A%2F%2Fwww.coingecko.com%2Fen%2Fcoins%2Fpolygon)%20%20%20%7C%20%241.24%20%20%20%20%20%20%20%7C%20%2411%2C171%2C619%2C834%20%20%20%20%20%20%20%7C%20%5B%241%2C170%2C000%2C000%5D(https%3A%2F%2Fdefillama.com%2Fchain%2FPolygon)%20%20%20%20%20%7C%0A%7C%20Pokadot%20%20%20%7C%20%5BDOT%5D(https%3A%2F%2Fwww.coingecko.com%2Fen%2Fcoins%2Fpolkadot)%20%20%20%20%7C%20%246.22%20%20%20%20%20%20%20%7C%20%247%2C475%2C485%2C172%20%20%20%20%20%20%20%20%7C%20%5B%24278%2C000%2C000%5D(https%3A%2F%2Fdefillama.com%2Fchains%2FParachain)%20%2B%2B%20%7C%0A%0A_The%20above%20data%20is%20from%20Feburary%2011th%2C%202023.%20Links%20are%20provided%20to%20get%20current%20information._%0A%0A_%2B%2B%20Polkadot%20TVL%20includes%20all%20parachains_%0A%0A_%2B%2B%2B%20Cosmos%20TVL%20include%20all%20cosmos%20based%20networks_%0A%0A%23%23%20Chain%20Technology%0A%0AFollowing%20is%20an%20overview%20of%20the%20consensus%2C%20signing%20and%20staking%20mechanisms%20for%20sample%20chains.%20These%20chains%20are%20early%20candidates%20for%20the%20design%20and%20implementation%20of%20trustless%20bridging%20that%20we%20have%20been%20doing.%0A%0A%7C%20Chain%20%20%20%20%20%20%7C%20Consensusigning%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7C%20Staking%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7C%20Validators%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7C%20Subnetsvalanche%20%20%7C%20%5BSnowball%5D(https%3A%2F%2Fdocs.avax.network%2Foverview%2Fgetting-started%2Favalanche-consensus)%2C%20%5BWhite%20Paper%5D(https%3A%2F%2Fassets.website-files.com%2F5d80307810123f5ffbb34d6e%2F6009805681b416f34dcae012_Avalanche%2520Consensus%2520Whitepaper.pdf)%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7C%20%5Brsa%5D(%3Chttps%3A%2F%2Fen.wikipedia.org%2Fwiki%2FRSA_(cryptosystem)%3E)%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7C%20%5BAvalanche%20Staking%5D(https%3A%2F%2Fdocs.avax.network%2Fnodes%2Fvalidate%2Fstaking%23staking-parameters-on-avalanche)%20%7C%20%5B1215%5D(https%3A%2F%2Fsubnets.avax.network%2Fvalidators)%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7C%20%5B45%5D(https%3A%2F%2Fsubnets.avax.network%2Fsubnets)%20%5Bsubnets%5D(https%3A%2F%2Fdocs.avax.network%2Fsubnets)%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7C%0A%7C%20BSC%20%20%20%20%20%20%20%20%7C%20%5BParlia%5D(https%3A%2F%2Fdocs.bnbchain.org%2Fdocs%2Flearn%2Fconsensus%2F%23consensus-protocolsecp256k1%5D(https%3A%2F%2Fdocs.bnbchain.org%2Fdocs%2Fbeaconchain%2Flearn%2Faccounts%2F%23signature)%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7C%20%5BPoSA%5D(https%3A%2F%2Fdocs.bnbchain.org%2Fdocs%2Fstake%2FStaking%2F)%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7C%20%5B50%5D(https%3A%2F%2Fwww.bnbchain.org%2Fen%2Fstaking)%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7C%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7C%0A%7C%20Cosmos%20Hub%20%7C%20%5BTendermint%5D(https%3A%2F%2Fdocs.tendermint.com%2Fv0.34%2Fintroduction%2Fwhat-is-tendermint.htmled25519%5D(https%3A%2F%2Fed25519.cr.yp.to%2F)%20%5BValidator%20Keys%5D(https%3A%2F%2Fdocs.tendermint.com%2Fv0.34%2Ftendermint-core%2Fvalidators.html%23validator-keys)%20%20%20%20%20%20%7C%20%5BCosmos%20Staking%5D(https%3A%2F%2Fdocs.cosmos.network%2Fv0.46%2Fmodules%2Fstaking%2F)%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7C%20%5B504%5D(https%3A%2F%2Fwww.mintscan.io%2Fcosmos%2Fvalidators)%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7C%20%5B21%5D(https%3A%2F%2Fdefillama.com%2Fchains%2FCosmos)%20%5BChains%5D(https%3A%2F%2Fdocs.cosmos.network%2Fmain%2Fintro%2Fwhy-app-specific)%20%20%20%7C%0A%7C%20Ethereum%20%20%20%7C%20%5BGasper%5D(https%3A%2F%2Farxiv.org%2Fpdf%2F2003.03052.pdfoS%5D(https%3A%2F%2Fethereum.org%2Fen%2Fdevelopers%2Fdocs%2Fconsensus-mechanisms%2Fpos%2F)%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7C%20%5B16%2C477%2C159%5D(https%3A%2F%2Fethereum.org%2Fen%2Fstaking%2F)%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7C%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7C%0A%7C%20Harmony%20%20%20%20%7C%20%5BFBFT%5D(https%3A%2F%2Fdocs.harmony.one%2Fhome%2Fgeneral%2Ftechnology%2Fconsensushttps%3A%2F%2Fmedium.com%2F%40caseyga%2Fexploring-bls-keys-on-the-harmony-protocol-understanding-generation-management-and-use-cases-b8722f7219fc)%20%7C%20%5BEPoS%5D(https%3A%2F%2Fdocs.harmony.one%2Fhome%2Fgeneral%2Ftechnology%2Feffective-proof-of-stake)%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7C%20%5B299%5D(https%3A%2F%2Fstaking.harmony.one%2Fvalidators%2Fmainnet)%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7C%20%5B4%5D(https%3A%2F%2Fexplorer.harmony.one%2F)%20%5Bshards%5D(https%3A%2F%2Fdocs.harmony.one%2Fhome%2Fgeneral%2Ftechnology%2Fsharding)%20%20%20%20%20%20%20%20%7C%0A%7C%20Polygon%20%20%20%20%7C%20%5BPeppermint%5D(https%3A%2F%2Fwiki.polygon.technology%2Fdocs%2Fpos%2Fpeppermint%2F)%2C%20%5BHeimdall%20and%20Bor%5D(https%3A%2F%2Fpolygon.technology%2Fblog%2Fheimdall-and-bor)%2C%20%5C_%5BHeimdall%5D(https%3A%2F%2Fwiki.polygon.technology%2Fdocs%2Fpos%2Fheimdall%2Foverview%2F)%2C%20%5BBOR%5D(https%3A%2F%2Fwiki.polygon.technology%2Fdocs%2Fpos%2Fbor%2Fconsensus%2F)%20%7C%20secp256k1%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7C%20%5BHeimdall%20Staking%5D(https%3A%2F%2Fwiki.polygon.technology%2Fdocs%2Fpos%2Fheimdall%2Fmodules%2Fstaking%2F)%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7C%20%5B100%5D(https%3A%2F%2Fstaking.polygon.technology%2F)%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7C%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7C%0A%7C%20Polkadot%20%20%20%7C%20%5BNPoS%5D(https%3A%2F%2Fwiki.polkadot.network%2Fdocs%2Flearn-consensusr25519%5D(https%3A%2F%2Fwiki.polkadot.network%2Fdocs%2Flearn-cryptography%23what-is-sr25519-and-where-did-it-come-from)%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7C%20%5BNominated%20Pools%5D(https%3A%2F%2Fwiki.polkadot.network%2Fdocs%2Flearn-staking)%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7C%20%5B1200%5D(https%3A%2F%2Fstaking.polkadot.network%2F%3Futm_source%3Dpolkadot.network%23%2Fvalidators)%20%7C%20%5B36%5D(https%3A%2F%2Fpolkadot.subscan.io%2Fparachain)%20%5Bparachains%5D(https%3A%2F%2Fwiki.polkadot.network%2Fdocs%2Flearn-parachains)%20%7C%0A%0A_The%20above%20data%20is%20from%20Feburary%2011th%2C%202023.%20Links%20are%20provided%20to%20get%20current%20information._%0A%0A%23%23%20Consensus%20Implementations%0A%0A%23%23%23%20Consensus%0A%0A-%20%5Bavalanche%5D(https%3A%2F%2Fgithub.com%2Fava-labs%2Favalanchego%2Fblob%2Fmaster%2Fsnow%2FREADME.mdx)%20(go)%0A%20%20-%20%5Bavalanche%5D(https%3A%2F%2Fgithub.com%2Fava-labs%2Favalanchego%2Ftree%2Fmaster%2Fsnow%2Fconsensus%2Favalanche)%3A%20a%20general%20avalanche%20instance%20that%20can%20be%20used%20directly%20to%20process%20a%20series%20of%20partially%20ordered%20elements.%0A%20%20-%20%5Bsnowball%5D(https%3A%2F%2Fgithub.com%2Fava-labs%2Favalanchego%2Ftree%2Fmaster%2Fsnow%2Fconsensus%2Fsnowball)%3A%20a%20general%20snow%20instance%20that%20can%20be%20used%20directly%20to%20process%20the%20results%20of%20network%20queries.%0A%20%20-%20%5Bsnowman%5D(https%3A%2F%2Fgithub.com%2Fava-labs%2Favalanchego%2Ftree%2Fmaster%2Fsnow%2Fconsensus%2Fsnowman)%3A%20a%20general%20snowman%20instance%20that%20can%20be%20used%20directly%20to%20process%20a%20series%20of%20dependent%20operations.%0A%20%20-%20%5Bsnowstorm%5D(https%3A%2F%2Fgithub.com%2Fava-labs%2Favalanchego%2Ftree%2Fmaster%2Fsnow%2Fconsensus%2Fsnowstorm)%3A%20a%20snowball%20instance%20deciding%20between%20an%20unbounded%20number%20of%20non-transitive%20conflicts.%20After%20performing%20a%20network%20sample%20of%20k%20nodes%2C%20you%20should%20call%20collect%20with%20the%20responses.%0A%20%20-%20%5BSnowman%2B%2B%3A%20congestion%20control%20for%20Snowman%20VMs%5D(https%3A%2F%2Fgithub.com%2Fava-labs%2Favalanchego%2Fblob%2Fmaster%2Fvms%2Fproposervm%2FREADME.mdx)%3A%20Snowman%2B%2B%20introduces%20a%20soft%20proposer%20mechanism%20which%20attempts%20to%20select%20a%20single%20proposer%20with%20the%20power%20to%20issue%20a%20block%2C%20but%20opens%20up%20block%20production%20to%20every%20validator%20if%20sufficient%20time%20has%20passed%20without%20blocks%20being%20generated.%0A%20%20-%20%5BAvalanche%20Warp%20Messaging%20(AWM)%5D(https%3A%2F%2Fmedium.com%2Favalancheavax%2Favalanche-warp-messaging-awm-launches-with-the-first-native-subnet-to-subnet-message-on-avalanche-c0ceec32144a)%3A%20AWM%20enables%20Subnet%20Validators%20to%20collectively%20produce%20a%20BLS%20Multi-Signature%20that%20attests%20to%20the%20validity%20of%20an%20arbitrary%20message%20(e.g.%2C%20transfer%2C%20contract%20data%2C%20etc.)%20that%20can%20be%20verified%20by%20any%20other%20Subnet.%0A-%20%5Bbsc%5D(https%3A%2F%2Fgithub.com%2Fbnb-chain%2Fbsc%2Ftree%2Fmaster%2Fconsensus)%20(go)%0A%20%20-%20%5Bbeacon%5D(https%3A%2F%2Fgithub.com%2Fbnb-chain%2Fbsc%2Fblob%2Fmaster%2Fconsensus%2Fbeacon%2Fconsensus.go)%3A%20Beacon%20is%20a%20consensus%20engine%20that%20combines%20the%20eth1%20consensus%20and%20proof-of-stake%20algorithm.%20There%20is%20a%20special%20flag%20inside%20to%20decide%20whether%20to%20use%20legacy%20consensus%20rules%20or%20new%20rules.%20The%20transition%20rule%20is%20described%20in%20the%20eth1%2F2%20merge%20spec%20%5Beip-3675%5D(https%3A%2F%2Feips.ethereum.org%2FEIPS%2Feip-3675).%20The%20beacon%20here%20is%20a%20half-functional%20consensus%20engine%20with%20partial%20functions%20which%20is%20only%20used%20for%20necessary%20consensus%20checks.%20The%20legacy%20consensus%20engine%20can%20be%20any%20engine%20implements%20the%20consensus%20interface%20(except%20the%20beacon%20itself).%0A%20%20-%20%5Bclique%5D(https%3A%2F%2Fgithub.com%2Fbnb-chain%2Fbsc%2Fblob%2Fmaster%2Fconsensus%2Fclique%2Fclique.go)%3A%20Clique%20is%20the%20proof-of-authority%20consensus%20engine%20proposed%20to%20support%20the%20Ethereum%20testnet%20following%20the%20Ropsten%20attacks.%0A%20%20-%20%5Bethash%5D(https%3A%2F%2Fgithub.com%2Fbnb-chain%2Fbsc%2Fblob%2Fmaster%2Fconsensus%2Fethash%2Fconsensus.go)%3A%20Ethash%20proof-of-work%20protocol%20(obsolete).%0A%20%20-%20%5Bmisc%5D(https%3A%2F%2Fgithub.com%2Fbnb-chain%2Fbsc%2Ftree%2Fmaster%2Fconsensus%2Fmisc)%3A%20includes%20code%20for%20%5Beip-1559%5D(https%3A%2F%2Feips.ethereum.org%2FEIPS%2Feip-1559)%2C%20DAO%20hard-fork%20extension%20to%20the%20header%20validity%2C%20VerifyForkHashes%20verifies%20that%20blocks%20conforming%20to%20network%20hard-forks%20do%20have%20the%20correct%20hashes%20and%20erifyGaslimit%20verifies%20the%20header%20gas%20limit%20according%20increase%2Fdecrease%20in%20relation%20to%20the%20parent%20gas%20limit.%0A%20%20-%20%5Bparlia%5D(https%3A%2F%2Fgithub.com%2Fbnb-chain%2Fbsc%2Fblob%2Fmaster%2Fconsensus%2Fparlia%2Fparlia.go)%3A%20Parlia%20is%20the%20consensus%20engine%20of%20BSC%0A-%20%5Bethereum%5D(https%3A%2F%2Fgithub.com%2Fethereum%2Fconsensus-specs)%0A%20%20-%20%5BEthreum%202.0%20Fork%20Choice%5D(https%3A%2F%2Fgithub.com%2Fethereum%2Fconsensus-specs%2Fblob%2Fv0.12.1%2Fspecs%2Fphase0%2Ffork-choice.mdx)%0A%20%20-%20%5BPaths%20toward%20single-slot%20finality%5D(https%3A%2F%2Fnotes.ethereum.org%2F%40vbuterin%2Fsingle_slot_finality)%3A%20A%20look%20at%20how%20to%20improve%20Ethereum%E2%80%99s%20LMD%20GHOST%20%2B%20Casper%20FFG%20consensus.%0A%20%20%20%20-%20%5Blighthouse%5D(https%3A%2F%2Fgithub.com%2Fsigp%2Flighthouse%2Ftree%2Fstable%2Fconsensus%2Ffork_choice)%20(rust)%3A%20stores%20the%20actual%20block%20DAG%20in%20%60ProtoArrayForkChoice%60.%20-%20%60time%60%20is%20represented%20using%20%60Slot%60%20instead%20of%20UNIX%20epoch%20%60u64%60.%0A%20%20-%20%5Bproto_array%5D%0A%20%20%20%20-%20%5Blighthouse%20proto_array%5D(https%3A%2F%2Fgithub.com%2Fsigp%2Flighthouse%2Ftree%2Fstable%2Fconsensus%2Fproto_array)%20(rust)%3A%20ProtoArray%20iterates%20backwards%20through%20the%20array%2C%20touching%20all%20nodes%20and%20their%20parents%20and%20potentially%20the%20best-child%20of%20each%20parent.%20The%20structure%20of%20the%20%60self.nodes%60%20array%20ensures%20that%20the%20child%20of%20each%20node%20is%20always%20touched%20before%20its%20parent.%0A%20%20-%20%5BSerDes%5D(https%3A%2F%2Fen.wikipedia.org%2Fwiki%2FSerDes)%3A%20Serializer%2FDeserializer%0A%20%20%20%20-%20%5Blighthouse%20serde_utils%5D(https%3A%2F%2Fgithub.com%2Fsigp%2Flighthouse%2Ftree%2Fstable%2Fconsensus%2Fserde_utils)%20(rust)%0A%20%20-%20%5Bsimple%20serialize%5D(https%3A%2F%2Fgithub.com%2Fethereum%2Feth2.0-specs%2Fblob%2Fv0.12.1%2Fssz%2Fsimple-serialize.mdx)%0A%20%20%20%20-%20%5Blighthouse%20ssz%5D(https%3A%2F%2Fgithub.com%2Fsigp%2Flighthouse%2Fblob%2Fstable%2Fconsensus%2Fssz%2Fsrc%2Flib.rs)%20(rust)%3A%20Provides%20encoding%20(serialization)%20and%20decoding(deserialization)%20in%20the%20SimpleSerialize%20(SSZ)%20format%20designed%20for%20use%20in%20Ethereum%202.0.%0A%20%20%20%20-%20%5Blighthouse%20ssz_derive%5D(https%3A%2F%2Fgithub.com%2Fsigp%2Flighthouse%2Ftree%2Fstable%2Fconsensus%2Fssz_derive)%20(rust)%3A%20Provides%20procedural%20derive%20macros%20for%20the%20%60Encode%60%20and%20%60Decode%60%20traits%20of%20the%20%60eth2_ssz%60%20crate.%0A%20%20%20%20-%20%5Blighthouse%20ssz_types%5D(https%3A%2F%2Fgithub.com%2Fsigp%2Flighthouse%2Ftree%2Fstable%2Fconsensus%2Fssz_types)%20(rust)%3A%20Provides%20types%20with%20unique%20properties%20required%20for%20SSZ%20serialization%20and%20Merklization%0A%20%20%20%20-%20%5Bprysm%20ssz.bzl%5D(https%3A%2F%2Fgithub.com%2Fprysmaticlabs%2Fprysm%2Fblob%2Fa7010d817dc839b0a46742dc286402357482da46%2Ftools%2Fssz.bzl%23L70)%20(bazel)%3A%20A%20rule%20that%20uses%20the%20generated%20pb.go%20files%20from%20a%20go_proto_library%20target%20to%20generate%20SSZ%20marshal%20and%20unmarshal%20functions%20as%20pointer%20receivers%20on%20the%20specified%20objects.%0A%20%20-%20%5Bstate_processing%5D(https%3A%2F%2Fgithub.com%2Fethereum%2Fconsensus-specs%2Fblob%2Fdev%2Fspecs%2Fbellatrix%2Fbeacon-chain.md%23beacon-chain-state-transition-function)%0A%20%20%20%20-%20%5Blighthouse%20state_procesing%5D(https%3A%2F%2Fgithub.com%2Fsigp%2Flighthouse%2Ftree%2Fstable%2Fconsensus%2Fstate_processing)%20(rust)%3A%20State%20processing%20functions%20including%20block%2C%20slot%20and%20epoch%20functions.%0A%20%20-%20%5Bcompute_shuffled_index%5D(https%3A%2F%2Fgithub.com%2Fethereum%2Fconsensus-specs%2Fblob%2Fv0.12.1%2Fspecs%2Fphase0%2Fbeacon-chain.md%23compute_shuffled_index)%0A%20%20%20%20-%20%5Blighthouse%20swap_or_not_shuffle%5D(https%3A%2F%2Fgithub.com%2Fsigp%2Flighthouse%2Ftree%2Fstable%2Fconsensus%2Fswap_or_not_shuffle)%20(rust)%3A%20Provides%20list-shuffling%20functions%20matching%20the%20Ethereum%202.0%20specification.%0A%20%20-%20%5Btypes%5D%0A%20%20%20%20-%20%5Blighthouse%20types%5D(https%3A%2F%2Fgithub.com%2Fsigp%2Flighthouse%2Ftree%2Fstable%2Fconsensus%2Ftypes)%20(rust)%3A%20Includes%20type%20definitions%20used%20in%20consensus%20including%20%60beacon_block_header%60%2C%20%60beacon_comittee%60%2C%20%2C%60beacon_state%60%2C%20%60sync_comitte%60%20and%20more.%0A-%20%5Bharmony%5D(https%3A%2F%2Fgithub.com%2Fharmony-one%2Fharmony%2Fblob%2Fmain%2Fconsensus%2FREADME.mdx)%20(go)%0A%20%20-%20%5Bharmony%20consensus%5D(https%3A%2F%2Fgithub.com%2Fharmony-one%2Fharmony%2Ftree%2Fmain%2Fconsensus)%0A-%20%5Bnear%5D(https%3A%2F%2Fnomicon.io%2FChainSpec%2FConsensus)%20(rust)%0A%20%20-%20%5Bnear%20nearcore%5D(https%3A%2F%2Fgithub.com%2Fnear%2Fnearcore%2Ftree%2Fmaster%2Fnearcore)%0A-%20%5Bpolkadot%5D(https%3A%2F%2Fwiki.polkadot.network%2Fdocs%2Flearn-consensus)%20(rust)%3A%20%5Bcode%5D(https%3A%2F%2Fgithub.com%2Fparitytech%2Fsubstrate%2Ftree%2Fmaster%2Fprimitives%2Fconsensus)%0A%20%20-%20%5Baura%5D(https%3A%2F%2Fgithub.com%2Fparitytech%2Fsubstrate%2Ftree%2Fmaster%2Fprimitives%2Fconsensus%2Faura)%0A%20%20-%20%5Bbabe%5D(https%3A%2F%2Fgithub.com%2Fparitytech%2Fsubstrate%2Ftree%2Fmaster%2Fprimitives%2Fconsensus%2Fbabe)%0A%20%20-%20%5Bbeefy%5D(https%3A%2F%2Fgithub.com%2Fparitytech%2Fsubstrate%2Ftree%2Fmaster%2Fprimitives%2Fconsensus%2Fbeefy)%0A%20%20-%20%5Bgrandpa%5D(https%3A%2F%2Fgithub.com%2Fparitytech%2Fsubstrate%2Ftree%2Fmaster%2Fprimitives%2Fconsensus%2Fgrandpa)%0A%20%20-%20%5Bpow%5D(https%3A%2F%2Fgithub.com%2Fparitytech%2Fsubstrate%2Ftree%2Fmaster%2Fprimitives%2Fconsensus%2Fpow)%0A%20%20-%20additional%20primitives%0A%20%20%20%20-%20%5Bcommon%5D(https%3A%2F%2Fgithub.com%2Fparitytech%2Fsubstrate%2Ftree%2Fmaster%2Fprimitives%2Fconsensus%2Fcommon)%3A%20Common%20utilities%20for%20building%20and%20using%20consensus%20engines%20in%20substrate.%0A%20%20%20%20-%20%5Bslots%5D(https%3A%2F%2Fgithub.com%2Fparitytech%2Fsubstrate%2Ftree%2Fmaster%2Fprimitives%2Fconsensus%2Fslots)%3A%20Primitives%20for%20slots-based%20consensus%20engines.%0A%20%20%20%20-%20%5Bvrf%5D(https%3A%2F%2Fgithub.com%2Fparitytech%2Fsubstrate%2Ftree%2Fmaster%2Fprimitives%2Fconsensus%2Fvrf)%3A%20Primitives%20for%20VRF-based%20consensus%20engines.%20Schnorrkel-based%20VRF.%0A-%20%5Bpolygon%20heimdall%5D()%20(go)%3A%20Validator%20node%20for%20Matic%20Network.%20It%20uses%20peppermint%2C%20customized%20Tendermint.%20Here%20is%20where%20it%20sends%20validator%20updates%20to%20%5Bpeppermint%5D(https%3A%2F%2Fgithub.com%2Fmaticnetwork%2Fheimdall%2Fblob%2Fdevelop%2Fapp%2Fapp.go%23L625)%0A%20%20-%20%5Bpolygon%20peppermint%5D(https%3A%2F%2Fgithub.com%2Fmaticnetwork%2Ftendermint%2Ftree%2Fpeppermint%2Fconsensus)(go)%3A%20Peppermint%20is%20a%20modified%20Tendermint.%20It%20is%20changed%20to%20make%20it%20compatible%20with%20Ethereum%20addresses%20and%20verifiable%20on%20Ethereum%20chain.%20(docs%20are%20%5Bhere%5D(https%3A%2F%2Fwiki.polygon.technology%2Fdocs%2Fpos%2Fpeppermint%2F))%0A-%20%5Btendermint%20tendermint%5D(https%3A%2F%2Fgithub.com%2Ftendermint%2Ftendermint%2Ftree%2Fmain%2Fconsensus)%20(go)%0A",lastUpdatedAt:1753125084e3},{lazy:()=>o2(()=>import("./near-CaGgkyf-.js"),[]),path:"/research/chains/near",type:"mdx",filePath:"research/chains/near.mdx",content:"%23%20NEAR%0A%0A-%20date%3A%202023-02-04%0A-%20last%20updated%3A%202023-02-04%0A%0A%23%23%20Overview%0A%0ANear%20supports%20We%20both%20secp256k1%20and%20ed25519%20for%20account%20keys%20and%20ed25519%20for%20signing%20transactions.%20They%20currently%20use%20the%20ed25519_dalek%20and%20sha2%20libraries%20for%20crypto.%0A%0A%23%23%20Consensus%20Mechanism%0A%0APlease%20review%20%5BNEAR%20Chainspec%20for%20Consensus%5D(https%3A%2F%2Fgithub.com%2Fnear%2FNEPs%2Fblob%2Fmaster%2Fspecs%2FChainSpec%2FConsensus.md)%0A%0A%23%23%20Light%20Client%20Support%0A%0A%5BNEAR%20Light%20Client%20Documentation%5D(https%3A%2F%2Fnomicon.io%2FChainSpec%2FLightClient)%20gives%20an%20overview%20of%20how%20light%20clients%20work.%20At%20a%20high%20level%20the%20light%20client%20needs%20to%20fetch%20at%20least%20one%20block%20per%20%5Bepoch%5D(https%3A%2F%2Fdocs.near.org%2Fconcepts%2Fbasics%2Fepoch)%20i.e.%20every%2042%2C200%20blocks%20or%20approxmiately%2012%20hours.%20Also%20Having%20the%20LightClientBlockView%20for%20block%20%24B%24%20is%20sufficient%20to%20be%20able%20to%20verify%20any%20statement%20about%20state%20or%20outcomes%20in%20any%20block%20in%20the%20ancestry%20of%20%24B%24%20(including%20%24B%24%20itself).%0A%0A%3E%20The%20RPC%20returns%20the%20LightClientBlock%20for%20the%20block%20as%20far%20into%20the%20future%20from%20the%20last%20known%20hash%20as%20possible%20for%20the%20light%20client%20to%20still%20accept%20it.%20Specifically%2C%20it%20either%20returns%20the%20last%20final%20block%20of%20the%20next%20epoch%2C%20or%20the%20last%20final%20known%20block.%20If%20there's%20no%20newer%20final%20block%20than%20the%20one%20the%20light%20client%20knows%20about%2C%20the%20RPC%20returns%20an%20empty%20result.%0A%3E%0A%3E%20A%20standalone%20light%20client%20would%20bootstrap%20by%20requesting%20next%20blocks%20until%20it%20receives%20an%20empty%20result%2C%20and%20then%20periodically%20request%20the%20next%20light%20client%20block.%0A%3E%0A%3E%20A%20smart%20contract-based%20light%20client%20that%20enables%20a%20bridge%20to%20NEAR%20on%20a%20different%20blockchain%20naturally%20cannot%20request%20blocks%20itself.%20Instead%20external%20oracles%20query%20the%20next%20light%20client%20block%20from%20one%20of%20the%20full%20nodes%2C%20and%20submit%20it%20to%20the%20light%20client%20smart%20contract.%20The%20smart%20contract-based%20light%20client%20performs%20the%20same%20checks%20described%20above%2C%20so%20the%20oracle%20doesn't%20need%20to%20be%20trusted.%0A%0AFollowing%20is%20an%20exerpt%20from%20the%20%5BNear%20Light%20Client%20Specification%5D(https%3A%2F%2Fgithub.com%2Fnear%2FNEPs%2Fblob%2Fmaster%2Fspecs%2FChainSpec%2FLightClient.md)%0A%0A**Near%20Light%20Client**%0A%0A%3E%20The%20state%20of%20the%20light%20client%20is%20defined%20by%3A%0A%3E%0A%3E%201.%20%60BlockHeaderInnerLiteView%60%20for%20the%20current%20head%20(which%20contains%20%60height%60%2C%20%60epoch_id%60%2C%20%60next_epoch_id%60%2C%20%60prev_state_root%60%2C%20%60outcome_root%60%2C%20%60timestamp%60%2C%20the%20hash%20of%20the%20block%20producers%20set%20for%20the%20next%20epoch%20%60next_bp_hash%60%2C%20and%20the%20merkle%20root%20of%20all%20the%20block%20hashes%20%60block_merkle_root%60)%3B%0A%3E%202.%20The%20set%20of%20block%20producers%20for%20the%20current%20and%20next%20epochs.%0A%3E%0A%3E%20The%20%60epoch_id%60%20refers%20to%20the%20epoch%20to%20which%20the%20block%20that%20is%20the%20current%20known%20head%20belongs%2C%20and%20%60next_epoch_id%60%20is%20the%20epoch%20that%20will%20follow.%0A%0A%3E%20Light%20clients%20operate%20by%20periodically%20fetching%20instances%20of%20%60LightClientBlockView%60%20via%20particular%20RPC%20end-point%20described%20%5Bbelow%5D(%23rpc-end-points).%0A%0A%3E%20Light%20client%20doesn't%20need%20to%20receive%20%60LightClientBlockView%60%20for%20all%20the%20blocks.%20Having%20the%20%60LightClientBlockView%60%20for%20block%20%60B%60%20is%20sufficient%20to%20be%20able%20to%20verify%20any%20statement%20about%20state%20or%20outcomes%20in%20any%20block%20in%20the%20ancestry%20of%20%60B%60%20(including%20%60B%60%20itself).%20In%20particular%2C%20having%20the%20%60LightClientBlockView%60%20for%20the%20head%20is%20sufficient%20to%20locally%20verify%20any%20statement%20about%20state%20or%20outcomes%20in%20any%20block%20on%20the%20canonical%20chain.%0A%3E%0A%3E%20However%2C%20to%20verify%20the%20validity%20of%20a%20particular%20%60LightClientBlockView%60%2C%20the%20light%20client%20must%20have%20verified%20a%20%60LightClientBlockView%60%20for%20at%20least%20one%20block%20in%20the%20preceding%20epoch%2C%20thus%20to%20sync%20to%20the%20head%20the%20light%20client%20will%20have%20to%20fetch%20and%20verify%20a%20%60LightClientBlockView%60%20per%20epoch%20passed.%0A%0A**Near%20Rainbow%20Bridge%3A%20NEAR%20Light%20Client%20on%20Ethereum%20Sample%20Implementation**%0A%0A_The%20following%20is%20an%20excerpt%20from%20a%20blog%20by%20near%20on%20%5Beth-near-rainbow-bridge%5D(https%3A%2F%2Fnear.org%2Fblog%2Feth-near-rainbow-bridge%2F)_%0A%0A%3E%20NearOnEthClient%20is%20an%20implementation%20of%20the%20NEAR%20light%20client%20in%20Solidity%20as%20an%20Ethereum%20contract.%20Unlike%20EthOnNearClient%20it%20does%20not%20need%20to%20verify%20every%20single%20NEAR%20header%20and%20can%20skip%20most%20of%20them%20as%20long%20as%20it%20verifies%20at%20least%20one%20header%20per%20NEAR%20epoch%2C%20which%20is%20about%2043k%20blocks%20and%20lasts%20about%20half%20a%20day.%20As%20a%20result%2C%20NearOnEthClient%20can%20memorize%20hashes%20of%20all%20submitted%20NEAR%20headers%20in%20history%2C%20so%20if%20you%20are%20making%20a%20transfer%20from%20NEAR%20to%20Ethereum%20and%20it%20gets%20interrupted%20you%20don%E2%80%99t%20need%20to%20worry%20and%20you%20can%20resume%20it%20any%20time%2C%20even%20months%20later.%20Another%20useful%20property%20of%20the%20NEAR%20light%20client%20is%20that%20every%20NEAR%20header%20contains%20a%20root%20of%20the%20merkle%20tree%20computed%20from%20all%20headers%20before%20it.%20As%20a%20result%2C%20if%20you%20have%20one%20NEAR%20header%20you%20can%20efficiently%20verify%20any%20event%20that%20happened%20in%20any%20header%20before%20it.%0A%3E%0A%3E%20Another%20useful%20property%20of%20the%20NEAR%20light%20client%20is%20that%20it%20only%20accepts%20final%20blocks%2C%20and%20final%20blocks%20cannot%20leave%20the%20canonical%20chain%20in%20NEAR.%20This%20means%20that%20NearOnEthClient%20does%20not%20need%20to%20worry%20about%20forks.%0A%3E%0A%3E%20However%2C%20unfortunately%2C%20NEAR%20uses%20%5BEd25519%5D(https%3A%2F%2Fgithub.com%2Fethereum%2FEIPs%2Fblob%2Fmaster%2FEIPS%2Feip-665.md)%20to%20sign%20messages%20of%20the%20validators%20who%20approve%20the%20blocks%2C%20and%20this%20signature%20is%20not%20available%20as%20an%20EVM%20precompile.%20It%20makes%20verification%20of%20all%20signatures%20of%20a%20single%20NEAR%20header%20prohibitively%20expensive.%20So%20technically%2C%20we%20cannot%20verify%20one%20NEAR%20header%20within%20one%20contract%20call%20to%20NearOnEthClient.%20Therefore%20we%20adopt%20the%20%5Boptimistic%20approach%5D(https%3A%2F%2Fmedium.com%2F%40deaneigenmann%2Foptimistic-contracts-fb75efa7ca84)%20where%20NearOnEthClient%20verifies%20everything%20in%20the%20NEAR%20header%20except%20the%20signatures.%20Then%20anyone%20can%20challenge%20a%20signature%20in%20a%20submitted%20header%20within%20a%204-hour%20challenge%20window.%20The%20challenge%20requires%20verification%20of%20a%20single%20Ed25519%20signature%20which%20would%20cost%20about%20500k%20Ethereum%20gas%20(expensive%2C%20but%20possible).%20The%20user%20submitting%20the%20NEAR%20header%20would%20have%20to%20post%20a%20bond%20in%20Ethereum%20tokens%2C%20and%20a%20successful%20challenge%20would%20burn%20half%20of%20the%20bond%20and%20return%20the%20other%20half%20to%20the%20challenger.%20The%20bond%20should%20be%20large%20enough%20to%20pay%20for%20the%20gas%20even%20if%20the%20gas%20price%20increases%20exponentially%20during%20the%204%20hours.%20For%20instance%2C%20a%2020%20ETH%20bond%20would%20cover%20gas%20price%20hikes%20up%20to%2020000%20Gwei.%20This%20optimistic%20approach%20requires%20having%20a%20watchdog%20service%20that%20monitors%20submitted%20NEAR%20headers%20and%20challenges%20any%20headers%20with%20invalid%20signatures.%20For%20added%20security%2C%20independent%20users%20can%20run%20several%20watchdog%20services.%0A%0A%23%23%20References%0A%0A**Consensus**%0A%0A-%20%5BConsensus%2C%20NEAR%20Nomicon%5D(https%3A%2F%2Fnomicon.io%2FChainSpec%2FConsensus)%0A-%20%5BNEAR%20blockchain%20core%2C%20(near)%5D(https%3A%2F%2Fgithub.com%2Fnear%2Fnearcore)%0A%0A**Signing**%0A%0A-%20%5BNear%20Signing%5D(https%3A%2F%2Fdocs.near.org%2Fintegrator%2Ffaq%23how-are-cryptographic-functions-used)%3A%20Near%20documentation%20on%20cryptographic%20functions.%0A-%20%5Bnearcore%20signature.rs%20(codebase)%5D(https%3A%2F%2Fgithub.com%2Fnear%2Fnearcore%2Fblob%2Fmaster%2Fcore%2Fcrypto%2Fsrc%2Fsignature.rs)%3A%20Near%20signature%20code%20(rust).%0A%0A**Staking**%0A%0A**Light%20Client**%0A%0A-%20%5BNear%20Light%20Client%5D(https%3A%2F%2Fnomicon.io%2FChainSpec%2FLightClient)%3A%20Near%20Lithg%20Client%20Specification%20document.%0A",lastUpdatedAt:1753131537e3},{lazy:()=>o2(()=>import("./near-CaGgkyf-.js"),[]),path:"/research/chains/near.html",type:"mdx",filePath:"research/chains/near.mdx",content:"%23%20NEAR%0A%0A-%20date%3A%202023-02-04%0A-%20last%20updated%3A%202023-02-04%0A%0A%23%23%20Overview%0A%0ANear%20supports%20We%20both%20secp256k1%20and%20ed25519%20for%20account%20keys%20and%20ed25519%20for%20signing%20transactions.%20They%20currently%20use%20the%20ed25519_dalek%20and%20sha2%20libraries%20for%20crypto.%0A%0A%23%23%20Consensus%20Mechanism%0A%0APlease%20review%20%5BNEAR%20Chainspec%20for%20Consensus%5D(https%3A%2F%2Fgithub.com%2Fnear%2FNEPs%2Fblob%2Fmaster%2Fspecs%2FChainSpec%2FConsensus.md)%0A%0A%23%23%20Light%20Client%20Support%0A%0A%5BNEAR%20Light%20Client%20Documentation%5D(https%3A%2F%2Fnomicon.io%2FChainSpec%2FLightClient)%20gives%20an%20overview%20of%20how%20light%20clients%20work.%20At%20a%20high%20level%20the%20light%20client%20needs%20to%20fetch%20at%20least%20one%20block%20per%20%5Bepoch%5D(https%3A%2F%2Fdocs.near.org%2Fconcepts%2Fbasics%2Fepoch)%20i.e.%20every%2042%2C200%20blocks%20or%20approxmiately%2012%20hours.%20Also%20Having%20the%20LightClientBlockView%20for%20block%20%24B%24%20is%20sufficient%20to%20be%20able%20to%20verify%20any%20statement%20about%20state%20or%20outcomes%20in%20any%20block%20in%20the%20ancestry%20of%20%24B%24%20(including%20%24B%24%20itself).%0A%0A%3E%20The%20RPC%20returns%20the%20LightClientBlock%20for%20the%20block%20as%20far%20into%20the%20future%20from%20the%20last%20known%20hash%20as%20possible%20for%20the%20light%20client%20to%20still%20accept%20it.%20Specifically%2C%20it%20either%20returns%20the%20last%20final%20block%20of%20the%20next%20epoch%2C%20or%20the%20last%20final%20known%20block.%20If%20there's%20no%20newer%20final%20block%20than%20the%20one%20the%20light%20client%20knows%20about%2C%20the%20RPC%20returns%20an%20empty%20result.%0A%3E%0A%3E%20A%20standalone%20light%20client%20would%20bootstrap%20by%20requesting%20next%20blocks%20until%20it%20receives%20an%20empty%20result%2C%20and%20then%20periodically%20request%20the%20next%20light%20client%20block.%0A%3E%0A%3E%20A%20smart%20contract-based%20light%20client%20that%20enables%20a%20bridge%20to%20NEAR%20on%20a%20different%20blockchain%20naturally%20cannot%20request%20blocks%20itself.%20Instead%20external%20oracles%20query%20the%20next%20light%20client%20block%20from%20one%20of%20the%20full%20nodes%2C%20and%20submit%20it%20to%20the%20light%20client%20smart%20contract.%20The%20smart%20contract-based%20light%20client%20performs%20the%20same%20checks%20described%20above%2C%20so%20the%20oracle%20doesn't%20need%20to%20be%20trusted.%0A%0AFollowing%20is%20an%20exerpt%20from%20the%20%5BNear%20Light%20Client%20Specification%5D(https%3A%2F%2Fgithub.com%2Fnear%2FNEPs%2Fblob%2Fmaster%2Fspecs%2FChainSpec%2FLightClient.md)%0A%0A**Near%20Light%20Client**%0A%0A%3E%20The%20state%20of%20the%20light%20client%20is%20defined%20by%3A%0A%3E%0A%3E%201.%20%60BlockHeaderInnerLiteView%60%20for%20the%20current%20head%20(which%20contains%20%60height%60%2C%20%60epoch_id%60%2C%20%60next_epoch_id%60%2C%20%60prev_state_root%60%2C%20%60outcome_root%60%2C%20%60timestamp%60%2C%20the%20hash%20of%20the%20block%20producers%20set%20for%20the%20next%20epoch%20%60next_bp_hash%60%2C%20and%20the%20merkle%20root%20of%20all%20the%20block%20hashes%20%60block_merkle_root%60)%3B%0A%3E%202.%20The%20set%20of%20block%20producers%20for%20the%20current%20and%20next%20epochs.%0A%3E%0A%3E%20The%20%60epoch_id%60%20refers%20to%20the%20epoch%20to%20which%20the%20block%20that%20is%20the%20current%20known%20head%20belongs%2C%20and%20%60next_epoch_id%60%20is%20the%20epoch%20that%20will%20follow.%0A%0A%3E%20Light%20clients%20operate%20by%20periodically%20fetching%20instances%20of%20%60LightClientBlockView%60%20via%20particular%20RPC%20end-point%20described%20%5Bbelow%5D(%23rpc-end-points).%0A%0A%3E%20Light%20client%20doesn't%20need%20to%20receive%20%60LightClientBlockView%60%20for%20all%20the%20blocks.%20Having%20the%20%60LightClientBlockView%60%20for%20block%20%60B%60%20is%20sufficient%20to%20be%20able%20to%20verify%20any%20statement%20about%20state%20or%20outcomes%20in%20any%20block%20in%20the%20ancestry%20of%20%60B%60%20(including%20%60B%60%20itself).%20In%20particular%2C%20having%20the%20%60LightClientBlockView%60%20for%20the%20head%20is%20sufficient%20to%20locally%20verify%20any%20statement%20about%20state%20or%20outcomes%20in%20any%20block%20on%20the%20canonical%20chain.%0A%3E%0A%3E%20However%2C%20to%20verify%20the%20validity%20of%20a%20particular%20%60LightClientBlockView%60%2C%20the%20light%20client%20must%20have%20verified%20a%20%60LightClientBlockView%60%20for%20at%20least%20one%20block%20in%20the%20preceding%20epoch%2C%20thus%20to%20sync%20to%20the%20head%20the%20light%20client%20will%20have%20to%20fetch%20and%20verify%20a%20%60LightClientBlockView%60%20per%20epoch%20passed.%0A%0A**Near%20Rainbow%20Bridge%3A%20NEAR%20Light%20Client%20on%20Ethereum%20Sample%20Implementation**%0A%0A_The%20following%20is%20an%20excerpt%20from%20a%20blog%20by%20near%20on%20%5Beth-near-rainbow-bridge%5D(https%3A%2F%2Fnear.org%2Fblog%2Feth-near-rainbow-bridge%2F)_%0A%0A%3E%20NearOnEthClient%20is%20an%20implementation%20of%20the%20NEAR%20light%20client%20in%20Solidity%20as%20an%20Ethereum%20contract.%20Unlike%20EthOnNearClient%20it%20does%20not%20need%20to%20verify%20every%20single%20NEAR%20header%20and%20can%20skip%20most%20of%20them%20as%20long%20as%20it%20verifies%20at%20least%20one%20header%20per%20NEAR%20epoch%2C%20which%20is%20about%2043k%20blocks%20and%20lasts%20about%20half%20a%20day.%20As%20a%20result%2C%20NearOnEthClient%20can%20memorize%20hashes%20of%20all%20submitted%20NEAR%20headers%20in%20history%2C%20so%20if%20you%20are%20making%20a%20transfer%20from%20NEAR%20to%20Ethereum%20and%20it%20gets%20interrupted%20you%20don%E2%80%99t%20need%20to%20worry%20and%20you%20can%20resume%20it%20any%20time%2C%20even%20months%20later.%20Another%20useful%20property%20of%20the%20NEAR%20light%20client%20is%20that%20every%20NEAR%20header%20contains%20a%20root%20of%20the%20merkle%20tree%20computed%20from%20all%20headers%20before%20it.%20As%20a%20result%2C%20if%20you%20have%20one%20NEAR%20header%20you%20can%20efficiently%20verify%20any%20event%20that%20happened%20in%20any%20header%20before%20it.%0A%3E%0A%3E%20Another%20useful%20property%20of%20the%20NEAR%20light%20client%20is%20that%20it%20only%20accepts%20final%20blocks%2C%20and%20final%20blocks%20cannot%20leave%20the%20canonical%20chain%20in%20NEAR.%20This%20means%20that%20NearOnEthClient%20does%20not%20need%20to%20worry%20about%20forks.%0A%3E%0A%3E%20However%2C%20unfortunately%2C%20NEAR%20uses%20%5BEd25519%5D(https%3A%2F%2Fgithub.com%2Fethereum%2FEIPs%2Fblob%2Fmaster%2FEIPS%2Feip-665.md)%20to%20sign%20messages%20of%20the%20validators%20who%20approve%20the%20blocks%2C%20and%20this%20signature%20is%20not%20available%20as%20an%20EVM%20precompile.%20It%20makes%20verification%20of%20all%20signatures%20of%20a%20single%20NEAR%20header%20prohibitively%20expensive.%20So%20technically%2C%20we%20cannot%20verify%20one%20NEAR%20header%20within%20one%20contract%20call%20to%20NearOnEthClient.%20Therefore%20we%20adopt%20the%20%5Boptimistic%20approach%5D(https%3A%2F%2Fmedium.com%2F%40deaneigenmann%2Foptimistic-contracts-fb75efa7ca84)%20where%20NearOnEthClient%20verifies%20everything%20in%20the%20NEAR%20header%20except%20the%20signatures.%20Then%20anyone%20can%20challenge%20a%20signature%20in%20a%20submitted%20header%20within%20a%204-hour%20challenge%20window.%20The%20challenge%20requires%20verification%20of%20a%20single%20Ed25519%20signature%20which%20would%20cost%20about%20500k%20Ethereum%20gas%20(expensive%2C%20but%20possible).%20The%20user%20submitting%20the%20NEAR%20header%20would%20have%20to%20post%20a%20bond%20in%20Ethereum%20tokens%2C%20and%20a%20successful%20challenge%20would%20burn%20half%20of%20the%20bond%20and%20return%20the%20other%20half%20to%20the%20challenger.%20The%20bond%20should%20be%20large%20enough%20to%20pay%20for%20the%20gas%20even%20if%20the%20gas%20price%20increases%20exponentially%20during%20the%204%20hours.%20For%20instance%2C%20a%2020%20ETH%20bond%20would%20cover%20gas%20price%20hikes%20up%20to%2020000%20Gwei.%20This%20optimistic%20approach%20requires%20having%20a%20watchdog%20service%20that%20monitors%20submitted%20NEAR%20headers%20and%20challenges%20any%20headers%20with%20invalid%20signatures.%20For%20added%20security%2C%20independent%20users%20can%20run%20several%20watchdog%20services.%0A%0A%23%23%20References%0A%0A**Consensus**%0A%0A-%20%5BConsensus%2C%20NEAR%20Nomicon%5D(https%3A%2F%2Fnomicon.io%2FChainSpec%2FConsensus)%0A-%20%5BNEAR%20blockchain%20core%2C%20(near)%5D(https%3A%2F%2Fgithub.com%2Fnear%2Fnearcore)%0A%0A**Signing**%0A%0A-%20%5BNear%20Signing%5D(https%3A%2F%2Fdocs.near.org%2Fintegrator%2Ffaq%23how-are-cryptographic-functions-used)%3A%20Near%20documentation%20on%20cryptographic%20functions.%0A-%20%5Bnearcore%20signature.rs%20(codebase)%5D(https%3A%2F%2Fgithub.com%2Fnear%2Fnearcore%2Fblob%2Fmaster%2Fcore%2Fcrypto%2Fsrc%2Fsignature.rs)%3A%20Near%20signature%20code%20(rust).%0A%0A**Staking**%0A%0A**Light%20Client**%0A%0A-%20%5BNear%20Light%20Client%5D(https%3A%2F%2Fnomicon.io%2FChainSpec%2FLightClient)%3A%20Near%20Lithg%20Client%20Specification%20document.%0A",lastUpdatedAt:1753131537e3},{lazy:()=>o2(()=>import("./polkadot-D5UhLiTM.js"),[]),path:"/research/chains/polkadot",type:"mdx",filePath:"research/chains/polkadot.mdx",content:"%23%20Polkadot%0A%0A-%20date%3A%202023-02-04%0A-%20last%20updated%3A%202023-02-04%0A%0A%23%23%20Overview%0A%0A_Note%3A%20The%20majority%20of%20this%20research%20was%20done%20in%20early%202019%20and%20has%20been%20updated%20recently%20with%20some%20notes%20on%20consenus%20and%20signing.%20In%202021%20John%20built%20and%20deployed%20a%20Parachain%20called%20%5BEave%20Network%5D(https%3A%2F%2Feave.network%2F)%20codebase%20is%20%5Bhere%5D(https%3A%2F%2Fgithub.com%2FEaveNetwork).%20The%20parachain%20was%20deployed%20to%20the%20Rococo%20Testnet.%20John%20self%20funded%20this%20initiative%2C%20but%20failed%20to%20raise%20seed%20funding%2C%20due%20to%20this%20and%20other%20priorities%20this%20project%20was%20never%20fully%20developed%20and%20deployed%20on%20Kusama%20or%20Polkadot.%20Polkadot%20is%20one%20of%20John's%20favourite%20development%20frameworks%20and%20he%20is%20extremely%20grateful%20for%20Gavin%20Wood%20and%20Tomasz%20Drwi%C4%99ga%20who%20he%20was%20fortunate%20enough%20to%20collaborate%20with%20briefly%20on%20the%20Parity%20Ethereum%20Client%20in%20early%202016%20as%20he%20began%20his%20blockchain%20journey._%0A%0APolkadot%20substrate%20is%20a%20chain%20layer%20which%20allows%20pluggable%20consensus%2C%20definition%20of%20storage%20through%20the%20seperation%20of%20%22extrinsics%22%20and%20abstracts%20the%20runtime%20design%20allowing%20for%20blockchain%20providers%20to%20decide%20which%20runtime%20best%20suits%20there%20application%20needs.%20It%20also%20has%20been%20built%20with%20light%20client%20protocol%20in%20mind%20with%20a%20number%20of%20storage%20and%20pruning%20options%20giving%20the%20ability%20to%20clearly%20seperated%20different%20actors%20requirements%20for%20infrastructure%20(e.g.%20participants%20can%20run%20a%20light%20client%20on%20a%20mobile%20device%20and%20validators%20can%20run%20full%20nodes%20with%20gauranteed%20performance%20and%20uptime).%20On%20top%20of%20this%20Polkadot%20sits%20as%20a%20relay%20chain%20(built%20on%20Substrate)%20which%20allows%20private%20chains%20to%20share%20infrastucture%20such%20as%20validators.%0A%0A%23%23%20Consensus%20Mechanism%0A%0AFollowing%20is%20an%20excerpt%20from%20%5BPolkadot%20learn%20consensus%5D(https%3A%2F%2Fgithub.com%2Fw3f%2Fpolkadot-wiki%2Fblob%2Fmaster%2Fdocs%2Flearn%2Flearn-consensus.mdx)%0A%0A%3E%20**Nominated%20Proof%20of%20Stake**%0A%0A%3E%20In%20traditional%20PoS%20systems%2C%20block%20production%20participation%20is%20dependent%20on%20token%20holdings%20as%20opposed%20to%20computational%20power.%20While%20PoS%20developers%20usually%20have%20a%20proponent%20for%20equitable%20participation%20in%20a%20decentralized%20manner%2C%20most%20projects%20end%20up%20proposing%20some%20level%20of%20centralized%20operation%2C%20where%20the%20number%20of%20validators%20with%20full%20participation%20rights%20is%20limited.%20These%20validators%20are%20often%20seen%20to%20be%20the%20most%20wealthy%2C%20and%2C%20as%20a%20result%2C%20influence%20the%20PoS%20network%20as%20they%20are%20the%20most%20staked.%20Usually%2C%20the%20number%20of%20candidates%20to%20maintain%20the%20network%20with%20the%20necessary%20knowledge%20(and%20equipment)%20is%20limited%3B%20this%20can%20directly%20increase%20operational%20costs%20as%20well.%20Systems%20with%20a%20large%20number%20of%20validators%20tend%20to%20form%20pools%20to%20decrease%20the%20variance%20of%20their%20revenue%20and%20profit%20from%20economies%20of%20scale.%20These%20pools%20are%20often%20off-chain.%0A%0A%3E%20A%20way%20to%20alleviate%20this%20is%20to%20implement%20pool%20formation%20on-chain%20and%20allow%20token%20holders%20to%20vote%20with%20their%20stake%20for%20validators%20to%20represent%20them.%0A%0A%3E%20Polkadot%20uses%20NPoS%20(Nominated%20Proof-of-Stake)%20as%20its%20mechanism%20for%20selecting%20the%20validator%20set.%20It%20is%20designed%20with%20the%20roles%20of%20**validators**%20and%20**nominators**%2C%20to%20maximize%20chain%20security.%20Actors%20who%20are%20interested%20in%20maintaining%20the%20network%20can%20run%20a%20validator%20node.%0A%0A%3E%20Validators%20assume%20the%20role%20of%20producing%20new%20blocks%20in%20%5BBABE%5D(%23block-production-babe)%2C%20validating%20parachain%20blocks%2C%20and%20guaranteeing%20finality.%20Nominators%20can%20choose%20to%20back%20select%20validators%20with%20their%20stake.%20Nominators%20can%20approve%20candidates%20that%20they%20trust%20and%20back%20them%20with%20their%20tokens.%0A%0A%23%23%20References%0A%0A**Consensus**%0A%0A-%20%5BNPoS%5D(https%3A%2F%2Fwiki.polkadot.network%2Fdocs%2Flearn-consensus)%3A%20Polkadot%20Nominated%20Proof%20of%20Stake%20Documentation%0A-%20%5BPolkadot%20Consensus%5D(https%3A%2F%2Fwiki.polkadot.network%2Fdocs%2Flearn-consensus)%3A%20Polkadot's%20documentation%20on%20consenus.%0A%0A-%20%5BHybrid%20Consensus%20Slide%5D(http%3A%2F%2Fslides.com%2Fparitytech%2Fparitysubstrate%23%2F17)%0A-%20%5BGeneralized%20Consensus%20Pull%20Request%5D(https%3A%2F%2Fgithub.com%2Fparitytech%2Fsubstrate%2Fpull%2F883)%0A-%20%5BConsensus%20Code%5D(https%3A%2F%2Fgithub.com%2Fparitytech%2Fsubstrate%2Ftree%2Fmaster%2Fcore%2Fconsensus)%0A-%20%5BRhododendron%20-%20Asynchronously%20safe%20BFT%20consensus%2C%20implementation%20in%20Rust%5D(https%3A%2F%2Fgithub.com%2Fparitytech%2Frhododendron)%0A-%20%5BRandom%20Number%20Generation%20CSPRNG%5D(https%3A%2F%2Fen.wikipedia.org%2Fwiki%2FCryptographically_secure_pseudorandom_number_generator)%0A%20%20-%20%5BRust-Random%5D(https%3A%2F%2Fgithub.com%2Frust-random%2Frand)%0A-%20Block%20Finality%0A%20%20-%20%5BGRANDPA%20(GHOST-based%20Recursive%20Ancestor%20Deriving%20Prefix%20Agreement)%5D(https%3A%2F%2Fmedium.com%2Fpolkadot-network%2Fgrandpa-block-finality-in-polkadot-an-introduction-part-1-d08a24a021b5)%0A%20%20%20%20-%20%5BFinality%20GANDPA%20Code%5D(https%3A%2F%2Fgithub.com%2Fparitytech%2Ffinality-grandpa)%0A%20%20%20%20-%20%5BSubstrate%20using%20GRANDPA%5D(https%3A%2F%2Fgithub.com%2Fparitytech%2Fsubstrate%2Fblob%2Fmaster%2Fcore%2Ffinality-grandpa%2Fsrc%2Flib.rs)%0A%20%20%20%20-%20%5BFull%20nodes%20should%20store%20a%20GRANDPA%20commit%20message%5D(https%3A%2F%2Fgithub.com%2Fparitytech%2Fsubstrate%2Fissues%2F1026)%0A%20%20%20%20-%20%5BDynamic%20Authority%20sets%20in%20GRANDPA%5D(https%3A%2F%2Fgithub.com%2Fparitytech%2Fsubstrate%2Fpull%2F1014)%0A%0A**Signing**%0A%0A-%20%5BSr25519%20Documentation%5D(https%3A%2F%2Fwiki.polkadot.network%2Fdocs%2Flearn-cryptography%23what-is-sr25519-and-where-did-it-come-from)%3A%20Polkadots%20sr25519%20Documentation.%20_The%20implementation%20of%20Schnorr%20signatures%20that%20is%20used%20in%20Polkadot%20and%20implements%20the%20Schnorrkel%20protocols%20over%20the%20Ristretto%20compression%20of%20the%20Curve25519%20is%20known%20as%20sr25519._%0A-%20%5BSubstrate%20sr25519%20codebase%5D(https%3A%2F%2Fgithub.com%2Fparitytech%2Fsubstrate%2Fblob%2Fmaster%2Fprimitives%2Fapplication-crypto%2Fsrc%2Fsr25519.rs)%3A%20Polkadot's%20sr25519%20code%20(rust).%0A-%20%5BED25519%5D(https%3A%2F%2Fed25519.cr.yp.to%2F)%0A%0A**Staking**%0A%0A-%20%5BPolkadot%20Staking%20Documentation%5D(https%3A%2F%2Fwiki.polkadot.network%2Fdocs%2Flearn-staking)%3A%20Documentation%20on%20Polkadot%20including%20staking%20validators%20and%20Nominiated%20Pools%0A-%20%5BStaking%20Polkadot%20Application%5D(https%3A%2F%2Fstaking.polkadot.network%2F%3Futm_source%3Dpolkadot.network%23%2Fvalidators)%3A%20Polkadot%20Staking%20Application%20validator%20view.%0A%0A**Parachains**%0A%0A-%20%5BSubscan%20Explorer%5D(https%3A%2F%2Fpolkadot.subscan.io%2Fparachain)%3A%20Block%20Explorer%20built%20for%20Polkadot%20and%20supporting%20all%20Parachains%0A-%20%5Bparachains%5D(https%3A%2F%2Fwiki.polkadot.network%2Fdocs%2Flearn-parachains)%3A%20Polkadot%20documentation%20on%20Parachains%0A%0A**Additional**%0A%0A-%20Blockchain%20Explorers%0A%20%20-%20%5Bpolkadash.io%5D(http%3A%2F%2Fpolkadash.io%2F)%0A%20%20-%20%5Bpolkascan.io%5D(https%3A%2F%2Fpolkascan.io%2F)%0A%20%20%20%20-%20%5BBBQ%20Birch%20-%20Testnet%5D(https%3A%2F%2Fpolkascan.io%2Fn-pre%2Fbbqbirch%2F)%0A%20%20-%20%5Bpoc-2.plokadot.io%5D(https%3A%2F%2Fpoc-2.polkadot.io%2F%23%2Fexplorer)%0A%20%20-%20%5BSubstrate%20Explorer%5D(https%3A%2F%2Fpolkadot.js.org%2Fapps%2Fnext%2F%23%2Fexplorer)%0A%20%20-%20%5BTelemetry.polkadot.io%5D(https%3A%2F%2Ftelemetry.polkadot.io%2F%23%2FKrumme%2520Lanke)%0A-%20Substrate%20Overview%0A%20%20-%20%5BWhat%20is%20Substrate%5D(https%3A%2F%2Fwww.parity.io%2Fwhat-is-substrate%2F)%0A%20%20%20%20-%20Substrate%20%5BVideo%5D(https%3A%2F%2Fwww.youtube.com%2Fwatch%3Fv%3DiUMZyL5kTwc)%20-%20%5BSlides%5D(http%3A%2F%2Fslides.com%2Fparitytech%2Fparitysubstrate%23%2F)%0A%20%20%20%20%20%20-%20%5BPotential%20Runtime%20Designs%5D(http%3A%2F%2Fslides.com%2Fparitytech%2Fparitysubstrate%23%2F29)%0A%20%20%20%20-%20%5BParity%20Substrate%20Wiki%5D(https%3A%2F%2Fwiki.parity.io%2FParity-Substrate)%0A%20%20-%20%5BWhat%20is%20PolKadot%5D(https%3A%2F%2Fpolkadot.network%2F%23whatisit)%0A%20%20%20%20-%20Polkadot%20Governance%20%5BVideo%5D(https%3A%2F%2Fwww.youtube.com%2Fwatch%3Fv%3DVsZuDJMmVPY%26t%3D24735s%26list%3DPL6-IF807eaBG5sH-SQXlosqKRM2BZkrqw%26index%3D4)%20-%20%5BSlides%5D(https%3A%2F%2Fslides.com%2Fparitytech%2Fpolkadot-governance%23%2F)%0A%20%20%20%20-%20%5BPolkadot%20Whitepaper%5D(https%3A%2F%2Fpolkadot.network%2FPolkaDotPaper.pdf)%0A%20%20%20%20-%20Polkadot%20%5BVideo%5D(https%3A%2F%2Fyoutu.be%2FlIghiCmHz0U%3Flist%3DPLaZFi8ZkzUvKGyWTQ999rbHUXfDQv2LRF)%20%5BSlides%5D(https%3A%2F%2Fwww.slideshare.net%2Fgavofyork%2Fpolkadot-presentation)%0A%20%20%20%20-%20Substrate%20%3A%20A%20Rustic%20Vision%20of%20Polkadot%20by%20Gavin%20Wood%20%5BVideo%5D(https%3A%2F%2Fwww.youtube.com%2Fwatch%3Fv%3D0IoUZdDi5Is%26feature%3Dyoutu.be)%20-%20%5BSlides%5D(https%3A%2F%2Fslides.com%2Fparitytech%2Fsubstrate_web3summit%23%2F1)%0A%20%20%20%20-%20%5BGavin%20Wood%20Podcast%20on%20Polkadot%2C%20Sharding%20and%20Substrate%5D(https%3A%2F%2Fwww.zeroknowledge.fm%2F46)%0A%20%20%20%20-%20%5BPolkadot%20runtime%20Environment%20%3A%20Alternative%20Implementation%20Grant%5D(https%3A%2F%2Fdocs.google.com%2Fdocument%2Fd%2F1iaIWmfV-uA7Uv1O4yt9G2t_86q18h_r7i5T1t-_EZ-s%2Fedit)%20-%20%5BGithub%5D(https%3A%2F%2Fgithub.com%2Fw3f%2FWeb3-collaboration%2Fissues%2F12)%0A%20%20-%20%5BToken%20Economics%20-%20DOTS%5D(https%3A%2F%2Fpolkadot.network%2Fmemorandum)%0A%20%20-%20%5BSecret%20Store%5D(https%3A%2F%2Fwiki.parity.io%2FSecret-Store.html)%20shard%20key%20generation%0A%20%20-%20%5BParity%20Ethereum%20IPFS%5D(https%3A%2F%2Fwiki.parity.io%2FIPFS)%0A%20%20-%20%5BCosmos%20vs%20Polkadot%5D(https%3A%2F%2Fmedium.com%2F%40davekaj%2Fblockchain-interoperability-cosmos-vs-polkadot-48097d54d2e2)%0A%20%20-%20%5BPolkadot%20POC%20Tutorials%5D(https%3A%2F%2Fmedium.com%2Fcoinmonks%2Fpolkadot-hello-world-3-poc-3-on-substrate-is-here-c45d100f72e3)%0A%20%20-%20%5BPolkadot%20on%20Reddit%5D(https%3A%2F%2Fwww.reddit.com%2Fr%2Fdot%2F)%0A%20%20-%20%5Bsubstrate.readme.io%5D(https%3A%2F%2Fsubstrate.readme.io%2F)%20-%20Substrate%20Developers%20Hub%0A%20%20-%20%5BSubstrate%20Workshop%20-%20Video%5D(https%3A%2F%2Fwww.youtube.com%2Fwatch%3Ftime_continue%3D278%26v%3D26ucTSSaqog)%0A%20%20-%20%5BSubstrate%20Web%203%20Summit%20-%20Slides%5D(http%3A%2F%2Fslides.com%2Fparitytech%2Fsubstrate_web3summit%23%2F)%0A%20%20-%20%5BBuilding%20on%20Substrate%5D(https%3A%2F%2Fhackmd.io%2Fp_v1M8WGRyy9PggYiKA_Xw%23)%0A%20%20-%20%5BPolkadot%202018%20Recap%5D(https%3A%2F%2Fmedium.com%2F%40gavofyork%2Fpolkadot-2018-recap-677dab3e995b)%0A-%20Relevant%20Code%20Links%0A%20%20-%20Key%20Repositories%0A%20%20%20%20-%20%5BParityTech%5D(https%3A%2F%2Fgithub.com%2Fparitytech)%0A%20%20%20%20%20%20-%20%5BSubstrate%5D(https%3A%2F%2Fgithub.com%2Fparitytech%2Fsubstrate)%0A%20%20%20%20%20%20%20%20-%20%5BGeneralize%20the%20Consensus%20Infrastructure%5D(https%3A%2F%2Fgithub.com%2Fparitytech%2Fsubstrate%2Fpull%2F883)%0A%20%20%20%20%20%20%20%20%20%20-%20%5BPluggable%20Consensus%20Import%20Queue%5D(https%3A%2F%2Fgithub.com%2Fparitytech%2Fsubstrate%2Fissues%2F784)%0A%20%20%20%20%20%20-%20%5BPolkadot%5D(https%3A%2F%2Fgithub.com%2Fparitytech%2Fpolkadot)%0A%20%20%20%20%20%20-%20%5BWASMI%5D(https%3A%2F%2Fgithub.com%2Fparitytech%2Fwasmi)%0A%20%20-%20%5BWeb%20Assembly%20(WASM)%5D(https%3A%2F%2Fwebassembly.org%2F)%0A%20%20%20%20-%20%5BGO%20-%20support%20for%20WASM%5D(https%3A%2F%2Fgithub.com%2Fgolang%2Fgo%2Fissues%2F18892)%0A%20%20%20%20-%20%5BGO%20WAGON%5D(https%3A%2F%2Fgithub.com%2Fgo-interpreter%2Fwagon)%0A%20%20%20%20-%20%5BGO%20Perlin%5D(https%3A%2F%2Fgithub.com%2Fperlin-network%2Flife)%0A%20%20%20%20-%20%5BRust%20Parity%20Tech%20WASMI%5D(https%3A%2F%2Fgithub.com%2Fparitytech%2Fwasmi)%0A-%20Functional%20Breakdown%0A%20%20-%20Persistence%0A%20%20%20%20-%20Storage%0A%20%20%20%20%20%20-%20%5BRocksDB%5D(https%3A%2F%2Frocksdb.org%2F)%0A%20%20%20%20%20%20-%20%5BDB%20Code%5D(https%3A%2F%2Fgithub.com%2Fparitytech%2Fsubstrate%2Ftree%2Fmaster%2Fcore%2Fclient%2Fdb)%0A%20%20%20%20%20%20-%20Data%20Overview%20-%20Light%20Client%0A%20%20%20%20%20%20%20%20-%20Block%20Structure%20%5BSlide%2017%5D(http%3A%2F%2Fslides.com%2Fparitytech%2Fparitysubstrate%23%2F17)%20to%20%5B28%5D(http%3A%2F%2Fslides.com%2Fparitytech%2Fparitysubstrate%23%2F28)%0A%20%20%20%20%20%20-%20%5Bdecl_storage%20-%20macro%5D(https%3A%2F%2Fwiki.parity.io%2Fdecl_storage)%0A%20%20%20%20%20%20-%20%5BGet%20and%20Set%20Storage%5D(http%3A%2F%2Fslides.com%2Fparitytech%2Fparitysubstrate%23%2F14)%0A%20%20%20%20-%20Light%20Client%0A%20%20%20%20%20%20-%20%5BDB%20Code%5D(https%3A%2F%2Fgithub.com%2Fparitytech%2Fsubstrate%2Fblob%2Fmaster%2Fcore%2Fclient%2Fdb%2Fsrc%2Flight.rs)%0A%20%20%20%20%20%20-%20%5BLight%20Client%20Code%5D(https%3A%2F%2Fgithub.com%2Fparitytech%2Fsubstrate%2Ftree%2Fmaster%2Fcore%2Fclient%2Fsrc%2Flight)%0A%20%20%20%20%20%20-%20%5BProtocol%20Light%20Client%20Storage%5D(https%3A%2F%2Fgithub.com%2Fparitytech%2Fsubstrate%2Fissues%2F131)%0A%20%20%20%20-%20Node%0A%20%20%20%20%20%20-%20%5BClient%20Code%5D(https%3A%2F%2Fgithub.com%2Fparitytech%2Fsubstrate%2Ftree%2Fmaster%2Fcore%2Fclient%2Fsrc)%0A%20%20-%20Gossip%0A%20%20%20%20-%20%5Blibp2p%5D(https%3A%2F%2Fgithub.com%2Fethereum%2Fwiki%2Fwiki%2Flibp2p-Whitepaper)%0A%20%20%20%20-%20%5BSubstrate%20Code%20-%20network%20libp2p%5D(https%3A%2F%2Fgithub.com%2Fparitytech%2Fsubstrate%2Ftree%2Fmaster%2Fcore%2Fnetwork-libp2p)%0A%20%20%20%20-%20%5BGet%20and%20Set%20Storage%5D(http%3A%2F%2Fslides.com%2Fparitytech%2Fparitysubstrate%23%2F14)%0A%20%20%20%20-%20Message%20Format%0A%20%20%20%20%20%20-%20%5BSubstrate%20Primitives%5D(https%3A%2F%2Fgithub.com%2Fparitytech%2Fsubstrate%2Ftree%2Fmaster%2Fcore%2Fprimitives)%0A%20%20%20%20%20%20-%20%5BPolkadot%20Parachain%20Primitives%5D(https%3A%2F%2Fgithub.com%2Fparitytech%2Fpolkadot%2Fblob%2Fmaster%2Fprimitives%2Fsrc%2Fparachain.rs)%0A%20%20%20%20%20%20-%20%5BPolkadot%20Collator%20-%20Logic%5D(https%3A%2F%2Fgithub.com%2Fparitytech%2Fpolkadot%2Fblob%2Fmaster%2Fcollator%2Fsrc%2Flib.rs%23L17)%0A%20%20-%20%5BExecution%5D(http%3A%2F%2Fslides.com%2Fparitytech%2Fparitysubstrate%23%2F15)%0A%20%20%20%20-%20%5BRuntime%5D(https%3A%2F%2Fwiki.parity.io%2Fimpl_stubs)%0A%20%20%20%20-%20%5Bimpl-stubs%5D(https%3A%2F%2Fwiki.parity.io%2Fimpl_stubs)%0A%20%20%20%20-%20%5BSRML%5D(https%3A%2F%2Fgithub.com%2Fparitytech%2Fsubstrate%2Ftree%2Fmaster%2Fsrml)%0A%20%20%20%20-%20%5BSRML%20Node%20Template%5D(https%3A%2F%2Fgithub.com%2Fparitytech%2Fsubstrate-node-template)%0A%20%20-%20Polkadot%20-%20Relay%20Chain%0A%20%20%20%20-%20%5BWhitepaper%20Overview%20-%20Participation%20in%20Polkadot%5D(https%3A%2F%2Fpolkadot.network%2FPolkaDotPaper.pdf)%20-%20Page%204%20gives%20an%20overview%20of%20the%20actors%0A%20%20%20%20-%20%5BCollator%5D(https%3A%2F%2Fgithub.com%2Fparitytech%2Fsubstrate%2Fblob%2Fv0.2%2Fpolkadot%2Fcollator%2Fsrc%2Flib.rs)%0A%20%20%20%20%20%20-%20A%20collator%20node%20lives%20on%20a%20distinct%20parachain%20and%20submits%20a%20proposal%20fora%20state%20transition%2C%20along%20with%20a%20proof%20for%20its%20validity%20(what%20we%20might%20call%20a%20witness%20or%20block%20data).%0A%20%20%20%20-%20%5BPokadot%20Parachain%5D(https%3A%2F%2Fgithub.com%2Fparitytech%2Fsubstrate%2Fblob%2Fv0.2%2Fpolkadot%2Fparachain%2Fsrc%2Flib.rs)%20-%20Defines%20primitive%20types%20for%20creating%20or%20validating%20a%20parachain.%0A%20%20%20%20-%20%5BStatement%20Table%5D(https%3A%2F%2Fgithub.com%2Fparitytech%2Fsubstrate%2Fblob%2Fv0.2%2Fpolkadot%2Fstatement-table%2Fsrc%2Flib.rs)%20-%20This%20stores%20messages%20other%20authorities%20issue%20about%20candidates.%0A%20%20%20%20-%20%5BNetwork%5D(https%3A%2F%2Fgithub.com%2Fparitytech%2Fsubstrate%2Ftree%2Fv0.2%2Fpolkadot%2Fnetwork)%20-%20Does%20the%20heavy%20lifting%20of%20routing%20the%20statements%20and%20gaining%20consensus%20across%20the%20relay%20chain%20(and%20associated%20parachains)%0A%20%20%20%20%20%20-%20%5BConsensus%5D(https%3A%2F%2Fgithub.com%2Fparitytech%2Fsubstrate%2Fblob%2Fv0.2%2Fpolkadot%2Fnetwork%2Fsrc%2Fconsensus.rs)%20-%20The%20%22consensus%22%20networking%20code%20built%20on%20top%20of%20the%20base%20network%20service.%20This%20fulfills%20the%20%60polkadot_consensus%3A%3ANetwork%60%20trait%2C%20providing%20a%20hook%20to%20be%20called%20each%20time%20consensus%20begins%20on%20a%20new%20chain%20head.%0A%20%20%20%20%20%20-%20%5BConsensus%20Pool%5D(https%3A%2F%2Fgithub.com%2Fparitytech%2Fsubstrate%2Fblob%2Fv0.2%2Fpolkadot%2Fnetwork%2Fsrc%2Fcollator_pool.rs)%20-%20Bridge%20between%20the%20network%20and%20consensus%20service%20for%20getting%20collations%20to%20it.%0A%20%20%20%20%20%20-%20%5BRouter%5D(https%3A%2F%2Fgithub.com%2Fparitytech%2Fsubstrate%2Fblob%2Fv0.2%2Fpolkadot%2Fnetwork%2Fsrc%2Frouter.rs)%20-%20Statement%20routing%20and%20consensus%20table%20router%20implementation.%0A%20%20%20%20-%20%5BFisherman%20(Misbehaviour%20check)%5D(https%3A%2F%2Fgithub.com%2Fparitytech%2Fsubstrate%2Fblob%2Fv0.2%2Fsubstrate%2Fmisbehavior-check%2Fsrc%2Flib.rs)%20-%20Utility%20for%20substrate-based%20runtimes%20that%20want%20to%20check%20misbehavior%20reports.%0A%20%20-%20Hashing%0A%20%20%20%20-%20%5BSubstrate%20Code%20-%20hashing.rs%5D(https%3A%2F%2Fgithub.com%2Fparitytech%2Fsubstrate%2Fblob%2Fmaster%2Fcore%2Fprimitives%2Fsrc%2Fhashing.rs)%0A%20%20%20%20-%20%5BBlake2%5D(https%3A%2F%2Fblake2.net%2F)%20%5Buse%20in%20substrate%5D(https%3A%2F%2Fgithub.com%2Fparitytech%2Fsubstrate%2Fsearch%3Fq%3Dblake2%26unscoped_q%3Dblake2)%0A%20%20%20%20-%20%5BXXHASH%5D(https%3A%2F%2Fcyan4973.github.io%2FxxHash%2F)%20%5Buse%20in%20substrate%5D(https%3A%2F%2Fgithub.com%2Fparitytech%2Fsubstrate%2Fsearch%3Fq%3DTWOX%26unscoped_q%3DTWOX)%0A%20%20-%20Chaincode%20(See%20WASM%20above)%0A%20%20%20%20-%20%5BRust%20Parity%20Tech%20WASMI%5D(https%3A%2F%2Fgithub.com%2Fparitytech%2Fwasmi)%0A%20%20%20%20-%20%5BUse%20in%20Substrate%20Code%5D(https%3A%2F%2Fgithub.com%2Fparitytech%2Fsubstrate%2Fsearch%3Fq%3Dwasmi%26unscoped_q%3Dwasmi)%0A%20%20-%20Deployment%0A%20%20%20%20-%20Substrate%0A%20%20%20%20%20%20-%20%5BLocally%20on%20Mac%5D(https%3A%2F%2Fgithub.com%2Fparitytech%2Fsubstrate%23on-mac)%0A%20%20%20%20%20%20-%20%5BFrom%20Code%20Base%5D(https%3A%2F%2Fgithub.com%2Fparitytech%2Fsubstrate%23on-mac)%0A%20%20-%20Polkadot%20Developer%20Tools%0A%20%20%20%20-%20API%0A%20%20%20%20%20%20-%20%5BPolkadot%20Javascript%20API%5D(https%3A%2F%2Fpolkadot.js.org%2Fapi%2F)%0A%20%20%20%20-%20RPC%0A%20%20%20%20%20%20-%20%5BSubstrate%20Code%5D(https%3A%2F%2Fgithub.com%2Fparitytech%2Fsubstrate%2Ftree%2Fmaster%2Fcore%2Frpc)%0A%20%20%20%20-%20CLI%0A%20%20%20%20%20%20-%20%5BCLI%5D(https%3A%2F%2Fgithub.com%2Fparitytech%2Fsubstrate%2Ftree%2Fmaster%2Fcore%2Fcli)%0A%20%20%20%20-%20SDK%0A%20%20-%20Polkadot%20Chain%20Tools%0A%20%20%20%20-%20Governance%0A%20%20%20%20%20%20-%20%5BDemocracy%20-%20Github%5D(https%3A%2F%2Fgithub.com%2Fparitytech%2Fsubstrate%2Fblob%2Fmaster%2Fsrml%2Fdemocracy%2Fsrc%2Flib.rs)%0A%20%20-%20Substrate%20Prototyping%0A%20%20%20%20-%20%5BBackground%20Material%5D(https%3A%2F%2Fmedium.com%2Fcoinmonks%2Fpolkadot-hello-world-3-poc-3-on-substrate-is-here-c45d100f72e3)%0A%20%20%20%20-%20Deploying%20a%20Substrate%20Chain%0A%20%20%20%20%20%20-%20%5BOverview%5D(https%3A%2F%2Fhackmd.io%2Fy-E9Q9jTRreni6z9EU0kkA%23)%0A%20%20%20%20%20%20-%20%5BLocally%5D(https%3A%2F%2Fgithub.com%2Fparitytech%2Fsubstrate%23on-mac)%0A%20%20%20%20%20%20-%20%5BFrom%20Code%20Base%5D(https%3A%2F%2Fgithub.com%2Fparitytech%2Fsubstrate%23on-mac)%0A%20%20%20%20%20%20-%20%5BCurrent%20Issue%20with%20BBQ%20Birch%5D(https%3A%2F%2Fgithub.com%2Fparitytech%2Fsubstrate%2Fissues%2F949)%20-%20%5Bcause%5D(https%3A%2F%2Fgithub.com%2Fparitytech%2Fsubstrate%2Fpull%2F900)%0A%20%20-%20Deploying%20Polkadot%0A%20%20%20%20-%20%5BOverview%5D(https%3A%2F%2Fgithub.com%2Fparitytech%2Fpolkadot%234-hacking-on-polkadot)%0A%20%20-%20Deploying%20a%20simple%20contract%0A%20%20%20%20-%20%5BPreparing%20to%20build%20on%20Polkadot%5D(https%3A%2F%2Fmedium.com%2Fpolkadot-network%2Fpreparing-to-build-on-polkadot-349ff5002885)%0A%20%20%20%20-%20%5BWriting%20a%20WASM%20Contract%5D(https%3A%2F%2Fwiki.parity.io%2FWebAssembly-Home)%0A%20%20-%20Running%20a%20Transaction%0A%20%20%20%20-%20%5BBalance%20Transfer%20via%20API%5D(https%3A%2F%2Fpolkadot.js.org%2Fapi%2Fexamples%2Fpromise%2F07_transfer_dots%2F)%0A",lastUpdatedAt:1753125084e3},{lazy:()=>o2(()=>import("./polkadot-D5UhLiTM.js"),[]),path:"/research/chains/polkadot.html",type:"mdx",filePath:"research/chains/polkadot.mdx",content:"%23%20Polkadot%0A%0A-%20date%3A%202023-02-04%0A-%20last%20updated%3A%202023-02-04%0A%0A%23%23%20Overview%0A%0A_Note%3A%20The%20majority%20of%20this%20research%20was%20done%20in%20early%202019%20and%20has%20been%20updated%20recently%20with%20some%20notes%20on%20consenus%20and%20signing.%20In%202021%20John%20built%20and%20deployed%20a%20Parachain%20called%20%5BEave%20Network%5D(https%3A%2F%2Feave.network%2F)%20codebase%20is%20%5Bhere%5D(https%3A%2F%2Fgithub.com%2FEaveNetwork).%20The%20parachain%20was%20deployed%20to%20the%20Rococo%20Testnet.%20John%20self%20funded%20this%20initiative%2C%20but%20failed%20to%20raise%20seed%20funding%2C%20due%20to%20this%20and%20other%20priorities%20this%20project%20was%20never%20fully%20developed%20and%20deployed%20on%20Kusama%20or%20Polkadot.%20Polkadot%20is%20one%20of%20John's%20favourite%20development%20frameworks%20and%20he%20is%20extremely%20grateful%20for%20Gavin%20Wood%20and%20Tomasz%20Drwi%C4%99ga%20who%20he%20was%20fortunate%20enough%20to%20collaborate%20with%20briefly%20on%20the%20Parity%20Ethereum%20Client%20in%20early%202016%20as%20he%20began%20his%20blockchain%20journey._%0A%0APolkadot%20substrate%20is%20a%20chain%20layer%20which%20allows%20pluggable%20consensus%2C%20definition%20of%20storage%20through%20the%20seperation%20of%20%22extrinsics%22%20and%20abstracts%20the%20runtime%20design%20allowing%20for%20blockchain%20providers%20to%20decide%20which%20runtime%20best%20suits%20there%20application%20needs.%20It%20also%20has%20been%20built%20with%20light%20client%20protocol%20in%20mind%20with%20a%20number%20of%20storage%20and%20pruning%20options%20giving%20the%20ability%20to%20clearly%20seperated%20different%20actors%20requirements%20for%20infrastructure%20(e.g.%20participants%20can%20run%20a%20light%20client%20on%20a%20mobile%20device%20and%20validators%20can%20run%20full%20nodes%20with%20gauranteed%20performance%20and%20uptime).%20On%20top%20of%20this%20Polkadot%20sits%20as%20a%20relay%20chain%20(built%20on%20Substrate)%20which%20allows%20private%20chains%20to%20share%20infrastucture%20such%20as%20validators.%0A%0A%23%23%20Consensus%20Mechanism%0A%0AFollowing%20is%20an%20excerpt%20from%20%5BPolkadot%20learn%20consensus%5D(https%3A%2F%2Fgithub.com%2Fw3f%2Fpolkadot-wiki%2Fblob%2Fmaster%2Fdocs%2Flearn%2Flearn-consensus.mdx)%0A%0A%3E%20**Nominated%20Proof%20of%20Stake**%0A%0A%3E%20In%20traditional%20PoS%20systems%2C%20block%20production%20participation%20is%20dependent%20on%20token%20holdings%20as%20opposed%20to%20computational%20power.%20While%20PoS%20developers%20usually%20have%20a%20proponent%20for%20equitable%20participation%20in%20a%20decentralized%20manner%2C%20most%20projects%20end%20up%20proposing%20some%20level%20of%20centralized%20operation%2C%20where%20the%20number%20of%20validators%20with%20full%20participation%20rights%20is%20limited.%20These%20validators%20are%20often%20seen%20to%20be%20the%20most%20wealthy%2C%20and%2C%20as%20a%20result%2C%20influence%20the%20PoS%20network%20as%20they%20are%20the%20most%20staked.%20Usually%2C%20the%20number%20of%20candidates%20to%20maintain%20the%20network%20with%20the%20necessary%20knowledge%20(and%20equipment)%20is%20limited%3B%20this%20can%20directly%20increase%20operational%20costs%20as%20well.%20Systems%20with%20a%20large%20number%20of%20validators%20tend%20to%20form%20pools%20to%20decrease%20the%20variance%20of%20their%20revenue%20and%20profit%20from%20economies%20of%20scale.%20These%20pools%20are%20often%20off-chain.%0A%0A%3E%20A%20way%20to%20alleviate%20this%20is%20to%20implement%20pool%20formation%20on-chain%20and%20allow%20token%20holders%20to%20vote%20with%20their%20stake%20for%20validators%20to%20represent%20them.%0A%0A%3E%20Polkadot%20uses%20NPoS%20(Nominated%20Proof-of-Stake)%20as%20its%20mechanism%20for%20selecting%20the%20validator%20set.%20It%20is%20designed%20with%20the%20roles%20of%20**validators**%20and%20**nominators**%2C%20to%20maximize%20chain%20security.%20Actors%20who%20are%20interested%20in%20maintaining%20the%20network%20can%20run%20a%20validator%20node.%0A%0A%3E%20Validators%20assume%20the%20role%20of%20producing%20new%20blocks%20in%20%5BBABE%5D(%23block-production-babe)%2C%20validating%20parachain%20blocks%2C%20and%20guaranteeing%20finality.%20Nominators%20can%20choose%20to%20back%20select%20validators%20with%20their%20stake.%20Nominators%20can%20approve%20candidates%20that%20they%20trust%20and%20back%20them%20with%20their%20tokens.%0A%0A%23%23%20References%0A%0A**Consensus**%0A%0A-%20%5BNPoS%5D(https%3A%2F%2Fwiki.polkadot.network%2Fdocs%2Flearn-consensus)%3A%20Polkadot%20Nominated%20Proof%20of%20Stake%20Documentation%0A-%20%5BPolkadot%20Consensus%5D(https%3A%2F%2Fwiki.polkadot.network%2Fdocs%2Flearn-consensus)%3A%20Polkadot's%20documentation%20on%20consenus.%0A%0A-%20%5BHybrid%20Consensus%20Slide%5D(http%3A%2F%2Fslides.com%2Fparitytech%2Fparitysubstrate%23%2F17)%0A-%20%5BGeneralized%20Consensus%20Pull%20Request%5D(https%3A%2F%2Fgithub.com%2Fparitytech%2Fsubstrate%2Fpull%2F883)%0A-%20%5BConsensus%20Code%5D(https%3A%2F%2Fgithub.com%2Fparitytech%2Fsubstrate%2Ftree%2Fmaster%2Fcore%2Fconsensus)%0A-%20%5BRhododendron%20-%20Asynchronously%20safe%20BFT%20consensus%2C%20implementation%20in%20Rust%5D(https%3A%2F%2Fgithub.com%2Fparitytech%2Frhododendron)%0A-%20%5BRandom%20Number%20Generation%20CSPRNG%5D(https%3A%2F%2Fen.wikipedia.org%2Fwiki%2FCryptographically_secure_pseudorandom_number_generator)%0A%20%20-%20%5BRust-Random%5D(https%3A%2F%2Fgithub.com%2Frust-random%2Frand)%0A-%20Block%20Finality%0A%20%20-%20%5BGRANDPA%20(GHOST-based%20Recursive%20Ancestor%20Deriving%20Prefix%20Agreement)%5D(https%3A%2F%2Fmedium.com%2Fpolkadot-network%2Fgrandpa-block-finality-in-polkadot-an-introduction-part-1-d08a24a021b5)%0A%20%20%20%20-%20%5BFinality%20GANDPA%20Code%5D(https%3A%2F%2Fgithub.com%2Fparitytech%2Ffinality-grandpa)%0A%20%20%20%20-%20%5BSubstrate%20using%20GRANDPA%5D(https%3A%2F%2Fgithub.com%2Fparitytech%2Fsubstrate%2Fblob%2Fmaster%2Fcore%2Ffinality-grandpa%2Fsrc%2Flib.rs)%0A%20%20%20%20-%20%5BFull%20nodes%20should%20store%20a%20GRANDPA%20commit%20message%5D(https%3A%2F%2Fgithub.com%2Fparitytech%2Fsubstrate%2Fissues%2F1026)%0A%20%20%20%20-%20%5BDynamic%20Authority%20sets%20in%20GRANDPA%5D(https%3A%2F%2Fgithub.com%2Fparitytech%2Fsubstrate%2Fpull%2F1014)%0A%0A**Signing**%0A%0A-%20%5BSr25519%20Documentation%5D(https%3A%2F%2Fwiki.polkadot.network%2Fdocs%2Flearn-cryptography%23what-is-sr25519-and-where-did-it-come-from)%3A%20Polkadots%20sr25519%20Documentation.%20_The%20implementation%20of%20Schnorr%20signatures%20that%20is%20used%20in%20Polkadot%20and%20implements%20the%20Schnorrkel%20protocols%20over%20the%20Ristretto%20compression%20of%20the%20Curve25519%20is%20known%20as%20sr25519._%0A-%20%5BSubstrate%20sr25519%20codebase%5D(https%3A%2F%2Fgithub.com%2Fparitytech%2Fsubstrate%2Fblob%2Fmaster%2Fprimitives%2Fapplication-crypto%2Fsrc%2Fsr25519.rs)%3A%20Polkadot's%20sr25519%20code%20(rust).%0A-%20%5BED25519%5D(https%3A%2F%2Fed25519.cr.yp.to%2F)%0A%0A**Staking**%0A%0A-%20%5BPolkadot%20Staking%20Documentation%5D(https%3A%2F%2Fwiki.polkadot.network%2Fdocs%2Flearn-staking)%3A%20Documentation%20on%20Polkadot%20including%20staking%20validators%20and%20Nominiated%20Pools%0A-%20%5BStaking%20Polkadot%20Application%5D(https%3A%2F%2Fstaking.polkadot.network%2F%3Futm_source%3Dpolkadot.network%23%2Fvalidators)%3A%20Polkadot%20Staking%20Application%20validator%20view.%0A%0A**Parachains**%0A%0A-%20%5BSubscan%20Explorer%5D(https%3A%2F%2Fpolkadot.subscan.io%2Fparachain)%3A%20Block%20Explorer%20built%20for%20Polkadot%20and%20supporting%20all%20Parachains%0A-%20%5Bparachains%5D(https%3A%2F%2Fwiki.polkadot.network%2Fdocs%2Flearn-parachains)%3A%20Polkadot%20documentation%20on%20Parachains%0A%0A**Additional**%0A%0A-%20Blockchain%20Explorers%0A%20%20-%20%5Bpolkadash.io%5D(http%3A%2F%2Fpolkadash.io%2F)%0A%20%20-%20%5Bpolkascan.io%5D(https%3A%2F%2Fpolkascan.io%2F)%0A%20%20%20%20-%20%5BBBQ%20Birch%20-%20Testnet%5D(https%3A%2F%2Fpolkascan.io%2Fn-pre%2Fbbqbirch%2F)%0A%20%20-%20%5Bpoc-2.plokadot.io%5D(https%3A%2F%2Fpoc-2.polkadot.io%2F%23%2Fexplorer)%0A%20%20-%20%5BSubstrate%20Explorer%5D(https%3A%2F%2Fpolkadot.js.org%2Fapps%2Fnext%2F%23%2Fexplorer)%0A%20%20-%20%5BTelemetry.polkadot.io%5D(https%3A%2F%2Ftelemetry.polkadot.io%2F%23%2FKrumme%2520Lanke)%0A-%20Substrate%20Overview%0A%20%20-%20%5BWhat%20is%20Substrate%5D(https%3A%2F%2Fwww.parity.io%2Fwhat-is-substrate%2F)%0A%20%20%20%20-%20Substrate%20%5BVideo%5D(https%3A%2F%2Fwww.youtube.com%2Fwatch%3Fv%3DiUMZyL5kTwc)%20-%20%5BSlides%5D(http%3A%2F%2Fslides.com%2Fparitytech%2Fparitysubstrate%23%2F)%0A%20%20%20%20%20%20-%20%5BPotential%20Runtime%20Designs%5D(http%3A%2F%2Fslides.com%2Fparitytech%2Fparitysubstrate%23%2F29)%0A%20%20%20%20-%20%5BParity%20Substrate%20Wiki%5D(https%3A%2F%2Fwiki.parity.io%2FParity-Substrate)%0A%20%20-%20%5BWhat%20is%20PolKadot%5D(https%3A%2F%2Fpolkadot.network%2F%23whatisit)%0A%20%20%20%20-%20Polkadot%20Governance%20%5BVideo%5D(https%3A%2F%2Fwww.youtube.com%2Fwatch%3Fv%3DVsZuDJMmVPY%26t%3D24735s%26list%3DPL6-IF807eaBG5sH-SQXlosqKRM2BZkrqw%26index%3D4)%20-%20%5BSlides%5D(https%3A%2F%2Fslides.com%2Fparitytech%2Fpolkadot-governance%23%2F)%0A%20%20%20%20-%20%5BPolkadot%20Whitepaper%5D(https%3A%2F%2Fpolkadot.network%2FPolkaDotPaper.pdf)%0A%20%20%20%20-%20Polkadot%20%5BVideo%5D(https%3A%2F%2Fyoutu.be%2FlIghiCmHz0U%3Flist%3DPLaZFi8ZkzUvKGyWTQ999rbHUXfDQv2LRF)%20%5BSlides%5D(https%3A%2F%2Fwww.slideshare.net%2Fgavofyork%2Fpolkadot-presentation)%0A%20%20%20%20-%20Substrate%20%3A%20A%20Rustic%20Vision%20of%20Polkadot%20by%20Gavin%20Wood%20%5BVideo%5D(https%3A%2F%2Fwww.youtube.com%2Fwatch%3Fv%3D0IoUZdDi5Is%26feature%3Dyoutu.be)%20-%20%5BSlides%5D(https%3A%2F%2Fslides.com%2Fparitytech%2Fsubstrate_web3summit%23%2F1)%0A%20%20%20%20-%20%5BGavin%20Wood%20Podcast%20on%20Polkadot%2C%20Sharding%20and%20Substrate%5D(https%3A%2F%2Fwww.zeroknowledge.fm%2F46)%0A%20%20%20%20-%20%5BPolkadot%20runtime%20Environment%20%3A%20Alternative%20Implementation%20Grant%5D(https%3A%2F%2Fdocs.google.com%2Fdocument%2Fd%2F1iaIWmfV-uA7Uv1O4yt9G2t_86q18h_r7i5T1t-_EZ-s%2Fedit)%20-%20%5BGithub%5D(https%3A%2F%2Fgithub.com%2Fw3f%2FWeb3-collaboration%2Fissues%2F12)%0A%20%20-%20%5BToken%20Economics%20-%20DOTS%5D(https%3A%2F%2Fpolkadot.network%2Fmemorandum)%0A%20%20-%20%5BSecret%20Store%5D(https%3A%2F%2Fwiki.parity.io%2FSecret-Store.html)%20shard%20key%20generation%0A%20%20-%20%5BParity%20Ethereum%20IPFS%5D(https%3A%2F%2Fwiki.parity.io%2FIPFS)%0A%20%20-%20%5BCosmos%20vs%20Polkadot%5D(https%3A%2F%2Fmedium.com%2F%40davekaj%2Fblockchain-interoperability-cosmos-vs-polkadot-48097d54d2e2)%0A%20%20-%20%5BPolkadot%20POC%20Tutorials%5D(https%3A%2F%2Fmedium.com%2Fcoinmonks%2Fpolkadot-hello-world-3-poc-3-on-substrate-is-here-c45d100f72e3)%0A%20%20-%20%5BPolkadot%20on%20Reddit%5D(https%3A%2F%2Fwww.reddit.com%2Fr%2Fdot%2F)%0A%20%20-%20%5Bsubstrate.readme.io%5D(https%3A%2F%2Fsubstrate.readme.io%2F)%20-%20Substrate%20Developers%20Hub%0A%20%20-%20%5BSubstrate%20Workshop%20-%20Video%5D(https%3A%2F%2Fwww.youtube.com%2Fwatch%3Ftime_continue%3D278%26v%3D26ucTSSaqog)%0A%20%20-%20%5BSubstrate%20Web%203%20Summit%20-%20Slides%5D(http%3A%2F%2Fslides.com%2Fparitytech%2Fsubstrate_web3summit%23%2F)%0A%20%20-%20%5BBuilding%20on%20Substrate%5D(https%3A%2F%2Fhackmd.io%2Fp_v1M8WGRyy9PggYiKA_Xw%23)%0A%20%20-%20%5BPolkadot%202018%20Recap%5D(https%3A%2F%2Fmedium.com%2F%40gavofyork%2Fpolkadot-2018-recap-677dab3e995b)%0A-%20Relevant%20Code%20Links%0A%20%20-%20Key%20Repositories%0A%20%20%20%20-%20%5BParityTech%5D(https%3A%2F%2Fgithub.com%2Fparitytech)%0A%20%20%20%20%20%20-%20%5BSubstrate%5D(https%3A%2F%2Fgithub.com%2Fparitytech%2Fsubstrate)%0A%20%20%20%20%20%20%20%20-%20%5BGeneralize%20the%20Consensus%20Infrastructure%5D(https%3A%2F%2Fgithub.com%2Fparitytech%2Fsubstrate%2Fpull%2F883)%0A%20%20%20%20%20%20%20%20%20%20-%20%5BPluggable%20Consensus%20Import%20Queue%5D(https%3A%2F%2Fgithub.com%2Fparitytech%2Fsubstrate%2Fissues%2F784)%0A%20%20%20%20%20%20-%20%5BPolkadot%5D(https%3A%2F%2Fgithub.com%2Fparitytech%2Fpolkadot)%0A%20%20%20%20%20%20-%20%5BWASMI%5D(https%3A%2F%2Fgithub.com%2Fparitytech%2Fwasmi)%0A%20%20-%20%5BWeb%20Assembly%20(WASM)%5D(https%3A%2F%2Fwebassembly.org%2F)%0A%20%20%20%20-%20%5BGO%20-%20support%20for%20WASM%5D(https%3A%2F%2Fgithub.com%2Fgolang%2Fgo%2Fissues%2F18892)%0A%20%20%20%20-%20%5BGO%20WAGON%5D(https%3A%2F%2Fgithub.com%2Fgo-interpreter%2Fwagon)%0A%20%20%20%20-%20%5BGO%20Perlin%5D(https%3A%2F%2Fgithub.com%2Fperlin-network%2Flife)%0A%20%20%20%20-%20%5BRust%20Parity%20Tech%20WASMI%5D(https%3A%2F%2Fgithub.com%2Fparitytech%2Fwasmi)%0A-%20Functional%20Breakdown%0A%20%20-%20Persistence%0A%20%20%20%20-%20Storage%0A%20%20%20%20%20%20-%20%5BRocksDB%5D(https%3A%2F%2Frocksdb.org%2F)%0A%20%20%20%20%20%20-%20%5BDB%20Code%5D(https%3A%2F%2Fgithub.com%2Fparitytech%2Fsubstrate%2Ftree%2Fmaster%2Fcore%2Fclient%2Fdb)%0A%20%20%20%20%20%20-%20Data%20Overview%20-%20Light%20Client%0A%20%20%20%20%20%20%20%20-%20Block%20Structure%20%5BSlide%2017%5D(http%3A%2F%2Fslides.com%2Fparitytech%2Fparitysubstrate%23%2F17)%20to%20%5B28%5D(http%3A%2F%2Fslides.com%2Fparitytech%2Fparitysubstrate%23%2F28)%0A%20%20%20%20%20%20-%20%5Bdecl_storage%20-%20macro%5D(https%3A%2F%2Fwiki.parity.io%2Fdecl_storage)%0A%20%20%20%20%20%20-%20%5BGet%20and%20Set%20Storage%5D(http%3A%2F%2Fslides.com%2Fparitytech%2Fparitysubstrate%23%2F14)%0A%20%20%20%20-%20Light%20Client%0A%20%20%20%20%20%20-%20%5BDB%20Code%5D(https%3A%2F%2Fgithub.com%2Fparitytech%2Fsubstrate%2Fblob%2Fmaster%2Fcore%2Fclient%2Fdb%2Fsrc%2Flight.rs)%0A%20%20%20%20%20%20-%20%5BLight%20Client%20Code%5D(https%3A%2F%2Fgithub.com%2Fparitytech%2Fsubstrate%2Ftree%2Fmaster%2Fcore%2Fclient%2Fsrc%2Flight)%0A%20%20%20%20%20%20-%20%5BProtocol%20Light%20Client%20Storage%5D(https%3A%2F%2Fgithub.com%2Fparitytech%2Fsubstrate%2Fissues%2F131)%0A%20%20%20%20-%20Node%0A%20%20%20%20%20%20-%20%5BClient%20Code%5D(https%3A%2F%2Fgithub.com%2Fparitytech%2Fsubstrate%2Ftree%2Fmaster%2Fcore%2Fclient%2Fsrc)%0A%20%20-%20Gossip%0A%20%20%20%20-%20%5Blibp2p%5D(https%3A%2F%2Fgithub.com%2Fethereum%2Fwiki%2Fwiki%2Flibp2p-Whitepaper)%0A%20%20%20%20-%20%5BSubstrate%20Code%20-%20network%20libp2p%5D(https%3A%2F%2Fgithub.com%2Fparitytech%2Fsubstrate%2Ftree%2Fmaster%2Fcore%2Fnetwork-libp2p)%0A%20%20%20%20-%20%5BGet%20and%20Set%20Storage%5D(http%3A%2F%2Fslides.com%2Fparitytech%2Fparitysubstrate%23%2F14)%0A%20%20%20%20-%20Message%20Format%0A%20%20%20%20%20%20-%20%5BSubstrate%20Primitives%5D(https%3A%2F%2Fgithub.com%2Fparitytech%2Fsubstrate%2Ftree%2Fmaster%2Fcore%2Fprimitives)%0A%20%20%20%20%20%20-%20%5BPolkadot%20Parachain%20Primitives%5D(https%3A%2F%2Fgithub.com%2Fparitytech%2Fpolkadot%2Fblob%2Fmaster%2Fprimitives%2Fsrc%2Fparachain.rs)%0A%20%20%20%20%20%20-%20%5BPolkadot%20Collator%20-%20Logic%5D(https%3A%2F%2Fgithub.com%2Fparitytech%2Fpolkadot%2Fblob%2Fmaster%2Fcollator%2Fsrc%2Flib.rs%23L17)%0A%20%20-%20%5BExecution%5D(http%3A%2F%2Fslides.com%2Fparitytech%2Fparitysubstrate%23%2F15)%0A%20%20%20%20-%20%5BRuntime%5D(https%3A%2F%2Fwiki.parity.io%2Fimpl_stubs)%0A%20%20%20%20-%20%5Bimpl-stubs%5D(https%3A%2F%2Fwiki.parity.io%2Fimpl_stubs)%0A%20%20%20%20-%20%5BSRML%5D(https%3A%2F%2Fgithub.com%2Fparitytech%2Fsubstrate%2Ftree%2Fmaster%2Fsrml)%0A%20%20%20%20-%20%5BSRML%20Node%20Template%5D(https%3A%2F%2Fgithub.com%2Fparitytech%2Fsubstrate-node-template)%0A%20%20-%20Polkadot%20-%20Relay%20Chain%0A%20%20%20%20-%20%5BWhitepaper%20Overview%20-%20Participation%20in%20Polkadot%5D(https%3A%2F%2Fpolkadot.network%2FPolkaDotPaper.pdf)%20-%20Page%204%20gives%20an%20overview%20of%20the%20actors%0A%20%20%20%20-%20%5BCollator%5D(https%3A%2F%2Fgithub.com%2Fparitytech%2Fsubstrate%2Fblob%2Fv0.2%2Fpolkadot%2Fcollator%2Fsrc%2Flib.rs)%0A%20%20%20%20%20%20-%20A%20collator%20node%20lives%20on%20a%20distinct%20parachain%20and%20submits%20a%20proposal%20fora%20state%20transition%2C%20along%20with%20a%20proof%20for%20its%20validity%20(what%20we%20might%20call%20a%20witness%20or%20block%20data).%0A%20%20%20%20-%20%5BPokadot%20Parachain%5D(https%3A%2F%2Fgithub.com%2Fparitytech%2Fsubstrate%2Fblob%2Fv0.2%2Fpolkadot%2Fparachain%2Fsrc%2Flib.rs)%20-%20Defines%20primitive%20types%20for%20creating%20or%20validating%20a%20parachain.%0A%20%20%20%20-%20%5BStatement%20Table%5D(https%3A%2F%2Fgithub.com%2Fparitytech%2Fsubstrate%2Fblob%2Fv0.2%2Fpolkadot%2Fstatement-table%2Fsrc%2Flib.rs)%20-%20This%20stores%20messages%20other%20authorities%20issue%20about%20candidates.%0A%20%20%20%20-%20%5BNetwork%5D(https%3A%2F%2Fgithub.com%2Fparitytech%2Fsubstrate%2Ftree%2Fv0.2%2Fpolkadot%2Fnetwork)%20-%20Does%20the%20heavy%20lifting%20of%20routing%20the%20statements%20and%20gaining%20consensus%20across%20the%20relay%20chain%20(and%20associated%20parachains)%0A%20%20%20%20%20%20-%20%5BConsensus%5D(https%3A%2F%2Fgithub.com%2Fparitytech%2Fsubstrate%2Fblob%2Fv0.2%2Fpolkadot%2Fnetwork%2Fsrc%2Fconsensus.rs)%20-%20The%20%22consensus%22%20networking%20code%20built%20on%20top%20of%20the%20base%20network%20service.%20This%20fulfills%20the%20%60polkadot_consensus%3A%3ANetwork%60%20trait%2C%20providing%20a%20hook%20to%20be%20called%20each%20time%20consensus%20begins%20on%20a%20new%20chain%20head.%0A%20%20%20%20%20%20-%20%5BConsensus%20Pool%5D(https%3A%2F%2Fgithub.com%2Fparitytech%2Fsubstrate%2Fblob%2Fv0.2%2Fpolkadot%2Fnetwork%2Fsrc%2Fcollator_pool.rs)%20-%20Bridge%20between%20the%20network%20and%20consensus%20service%20for%20getting%20collations%20to%20it.%0A%20%20%20%20%20%20-%20%5BRouter%5D(https%3A%2F%2Fgithub.com%2Fparitytech%2Fsubstrate%2Fblob%2Fv0.2%2Fpolkadot%2Fnetwork%2Fsrc%2Frouter.rs)%20-%20Statement%20routing%20and%20consensus%20table%20router%20implementation.%0A%20%20%20%20-%20%5BFisherman%20(Misbehaviour%20check)%5D(https%3A%2F%2Fgithub.com%2Fparitytech%2Fsubstrate%2Fblob%2Fv0.2%2Fsubstrate%2Fmisbehavior-check%2Fsrc%2Flib.rs)%20-%20Utility%20for%20substrate-based%20runtimes%20that%20want%20to%20check%20misbehavior%20reports.%0A%20%20-%20Hashing%0A%20%20%20%20-%20%5BSubstrate%20Code%20-%20hashing.rs%5D(https%3A%2F%2Fgithub.com%2Fparitytech%2Fsubstrate%2Fblob%2Fmaster%2Fcore%2Fprimitives%2Fsrc%2Fhashing.rs)%0A%20%20%20%20-%20%5BBlake2%5D(https%3A%2F%2Fblake2.net%2F)%20%5Buse%20in%20substrate%5D(https%3A%2F%2Fgithub.com%2Fparitytech%2Fsubstrate%2Fsearch%3Fq%3Dblake2%26unscoped_q%3Dblake2)%0A%20%20%20%20-%20%5BXXHASH%5D(https%3A%2F%2Fcyan4973.github.io%2FxxHash%2F)%20%5Buse%20in%20substrate%5D(https%3A%2F%2Fgithub.com%2Fparitytech%2Fsubstrate%2Fsearch%3Fq%3DTWOX%26unscoped_q%3DTWOX)%0A%20%20-%20Chaincode%20(See%20WASM%20above)%0A%20%20%20%20-%20%5BRust%20Parity%20Tech%20WASMI%5D(https%3A%2F%2Fgithub.com%2Fparitytech%2Fwasmi)%0A%20%20%20%20-%20%5BUse%20in%20Substrate%20Code%5D(https%3A%2F%2Fgithub.com%2Fparitytech%2Fsubstrate%2Fsearch%3Fq%3Dwasmi%26unscoped_q%3Dwasmi)%0A%20%20-%20Deployment%0A%20%20%20%20-%20Substrate%0A%20%20%20%20%20%20-%20%5BLocally%20on%20Mac%5D(https%3A%2F%2Fgithub.com%2Fparitytech%2Fsubstrate%23on-mac)%0A%20%20%20%20%20%20-%20%5BFrom%20Code%20Base%5D(https%3A%2F%2Fgithub.com%2Fparitytech%2Fsubstrate%23on-mac)%0A%20%20-%20Polkadot%20Developer%20Tools%0A%20%20%20%20-%20API%0A%20%20%20%20%20%20-%20%5BPolkadot%20Javascript%20API%5D(https%3A%2F%2Fpolkadot.js.org%2Fapi%2F)%0A%20%20%20%20-%20RPC%0A%20%20%20%20%20%20-%20%5BSubstrate%20Code%5D(https%3A%2F%2Fgithub.com%2Fparitytech%2Fsubstrate%2Ftree%2Fmaster%2Fcore%2Frpc)%0A%20%20%20%20-%20CLI%0A%20%20%20%20%20%20-%20%5BCLI%5D(https%3A%2F%2Fgithub.com%2Fparitytech%2Fsubstrate%2Ftree%2Fmaster%2Fcore%2Fcli)%0A%20%20%20%20-%20SDK%0A%20%20-%20Polkadot%20Chain%20Tools%0A%20%20%20%20-%20Governance%0A%20%20%20%20%20%20-%20%5BDemocracy%20-%20Github%5D(https%3A%2F%2Fgithub.com%2Fparitytech%2Fsubstrate%2Fblob%2Fmaster%2Fsrml%2Fdemocracy%2Fsrc%2Flib.rs)%0A%20%20-%20Substrate%20Prototyping%0A%20%20%20%20-%20%5BBackground%20Material%5D(https%3A%2F%2Fmedium.com%2Fcoinmonks%2Fpolkadot-hello-world-3-poc-3-on-substrate-is-here-c45d100f72e3)%0A%20%20%20%20-%20Deploying%20a%20Substrate%20Chain%0A%20%20%20%20%20%20-%20%5BOverview%5D(https%3A%2F%2Fhackmd.io%2Fy-E9Q9jTRreni6z9EU0kkA%23)%0A%20%20%20%20%20%20-%20%5BLocally%5D(https%3A%2F%2Fgithub.com%2Fparitytech%2Fsubstrate%23on-mac)%0A%20%20%20%20%20%20-%20%5BFrom%20Code%20Base%5D(https%3A%2F%2Fgithub.com%2Fparitytech%2Fsubstrate%23on-mac)%0A%20%20%20%20%20%20-%20%5BCurrent%20Issue%20with%20BBQ%20Birch%5D(https%3A%2F%2Fgithub.com%2Fparitytech%2Fsubstrate%2Fissues%2F949)%20-%20%5Bcause%5D(https%3A%2F%2Fgithub.com%2Fparitytech%2Fsubstrate%2Fpull%2F900)%0A%20%20-%20Deploying%20Polkadot%0A%20%20%20%20-%20%5BOverview%5D(https%3A%2F%2Fgithub.com%2Fparitytech%2Fpolkadot%234-hacking-on-polkadot)%0A%20%20-%20Deploying%20a%20simple%20contract%0A%20%20%20%20-%20%5BPreparing%20to%20build%20on%20Polkadot%5D(https%3A%2F%2Fmedium.com%2Fpolkadot-network%2Fpreparing-to-build-on-polkadot-349ff5002885)%0A%20%20%20%20-%20%5BWriting%20a%20WASM%20Contract%5D(https%3A%2F%2Fwiki.parity.io%2FWebAssembly-Home)%0A%20%20-%20Running%20a%20Transaction%0A%20%20%20%20-%20%5BBalance%20Transfer%20via%20API%5D(https%3A%2F%2Fpolkadot.js.org%2Fapi%2Fexamples%2Fpromise%2F07_transfer_dots%2F)%0A",lastUpdatedAt:1753125084e3},{lazy:()=>o2(()=>import("./polygon-Dvrhxf67.js"),[]),path:"/research/chains/polygon",type:"mdx",filePath:"research/chains/polygon.mdx",content:"%23%20Polygon%0A%0A-%20date%3A%202023-02-04%0A-%20last%20updated%3A%202023-02-04%0A%0A%23%23%20Overview%0A%0APolygon%20is%20representative%20because%20it%20uses%20ECDSA%20on%20secp256k1%20and%20a%20relatively%20fixed%20validator%20set.%0A%0AThe%20consensus%20protocol%20is%20based%20on%20Peppermint%3Csup%3E%5B8%5D(%23f8)%3C%2Fsup%3E%2C%20a%20modified%20version%20of%20Tendermint.%20Validators%20sign%20produced%20blocks%20using%20the%20ECDSA%20signature%20scheme%20on%20secp256k1%20curves%3Csup%3E%5B9%5D(%23f9)%3C%2Fsup%3E.%20Currently%2C%20the%20validator%20set%20size%20is%20fixed%20at%20100%20and%20only%20changes%20when%20a%20current%20validator%20resigns.%20This%20restriction%20will%20change%20when%20a%20new%20auction%20mechanism%20is%20implemented.%3Csup%3E%5B10%5D(%23f10)%3C%2Fsup%3E%0A%0A%23%23%20Consensus%20Mechanism%0A%0APolygon%20uses%20Peppermint%20(a%20modified%20version%20of%20tendermint)%20Consensus.%0A%0AFollowing%20is%20an%20excerpt%20from%20%5BPolygon%20Architecture%5D(https%3A%2F%2Fgithub.com%2Fmaticnetwork%2Fmatic-docs%2Fblob%2Fmaster%2Fdocs%2Fpos%2Fpolygon-architecture.mdx).%0A%0A**Polygon%20Architecture**%0A%0A%3E%20Heimdall%20is%20the%20proof%20of%20stake%20validation%20layer%20that%20handles%20the%20aggregation%20of%20blocks%20produced%20by%20Bor%20into%20a%20Merkle%20tree%20and%20publishes%20the%20Merkle%20root%20periodically%20to%20the%20root%20chain.%20The%20periodic%20publishing%20of%20snapshots%20of%20the%20Bor%20sidechain%20is%20called%20checkpoints.%0A%3E%0A%3E%201.%20Validates%20all%20the%20blocks%20since%20the%20last%20checkpoint.%0A%3E%202.%20Creates%20a%20Merkle%20tree%20of%20the%20block%20hashes.%0A%3E%203.%20Publishes%20the%20Merkle%20root%20hash%20to%20the%20Ethereum%20mainnet.%0A%3E%0A%3E%20Checkpoints%20are%20important%20for%20two%20reasons%3A%0A%3E%0A%3E%201.%20Providing%20finality%20on%20the%20root%20chain.%0A%3E%202.%20Providing%20proof%20of%20burn%20in%20withdrawal%20of%20assets.%0A%3E%0A%3E%20An%20overview%20of%20the%20process%3A%0A%3E%0A%3E%20-%20A%20subset%20of%20active%20validators%20from%20the%20pool%20is%20selected%20to%20act%20as%20block%20producers%20for%20a%20span.%20These%20block%20producers%20are%20responsible%20for%20creating%20blocks%20and%20broadcasting%20the%20created%20blocks%20on%20the%20network.%0A%3E%20-%20A%20checkpoint%20includes%20the%20Merkle%20root%20hash%20of%20all%20blocks%20created%20during%20any%20given%20interval.%20All%20nodes%20validate%20the%20Merkle%20root%20hash%20and%20attach%20their%20signature%20to%20it.%0A%3E%20-%20A%20selected%20proposer%20from%20the%20validator%20set%20is%20responsible%20for%20collecting%20all%20signatures%20for%20a%20particular%20checkpoint%20and%20committing%20the%20checkpoint%20on%20the%20Ethereum%20mainnet.%0A%3E%20-%20The%20responsibility%20of%20creating%20blocks%20and%20proposing%20checkpoints%20is%20variably%20dependent%20on%20a%20validator%E2%80%99s%20stake%20ratio%20in%20the%20overall%20pool.%0A%3E%0A%3E%20More%20details%20on%20Heimdall%20are%20available%20on%20the%20Heimdall%20architecture%20guide.%0A%0AThis%20image%20from%20%5BBor%20Architecture%5D(https%3A%2F%2Fwiki.polygon.technology%2Fdocs%2Fpos%2Fbor%2F)%20helps%20give%20a%20better%20understanding%20of%20how%20Ethereum%2C%20Heimdall%20and%20Bor%20work%20together.%0A%0A!%5BMatic%20Structure%5D(%2Fassets%2Fresearch%2Fmatic_structure.png%20%22Matic%20Structure%22)%0A%0A%23%23%20Signing%20Mechanism%0A%0AFollowing%20is%20an%20excerpt%20from%20and%20%5BPeppermint.md%5D(https%3A%2F%2Fgithub.com%2Fmaticnetwork%2Fmatic-docs%2Fblob%2Fmaster%2Fdocs%2Fpos%2Fpeppermint.mdx).%0A%0A%3E%20Peppermint%20is%20a%20modified%20Tendermint.%20It%20is%20changed%20to%20make%20it%20compatible%20with%20Ethereum%20addresses%20and%20verifiable%20on%20Ethereum%20chain.%0A%3E%0A%3E%20Overview%0A%3E%0A%3E%201.%20Changes%20to%20signature%20scheme%0A%3E%202.%20Changes%20to%20%60vote%60%20to%20make%20it%20verifiable%20on%20Ethereum%20smart%20contract%0A%3E%203.%20Changes%20to%20%60vote%60%20encoding%20scheme%0A%3E%0A%3E%20Peppermint%20uses%20%60secp256k1%60%20signature%20scheme%20to%20verify%20Tendermint%20votes%20on%20solidity%20smart%20contract.%0A%3E%0A%3E%20Source%3A%20%5Bhttps%3A%2F%2Fgithub.com%2Fmaticnetwork%2Ftendermint%2Fblob%2Fpeppermint%2Fcrypto%2Fsecp256k1%2Fsecp256k1_nocgo.go%5D(https%3A%2F%2Fgithub.com%2Fmaticnetwork%2Ftendermint%2Fblob%2Fpeppermint%2Fcrypto%2Fsecp256k1%2Fsecp256k1_nocgo.go)%0A%3E%0A%3E%20It%20adds%20%60Data%60%20field%20into%20%60Vote%60%20and%20%60Proposal%60%20struct%20to%20get%20%60hash%60%20for%20transactions%20in%20the%20block.%20On%20smart%20contract%2C%20it%20checks%20if%20%60Data%60%20matches%20with%20checkpoint%20data%20hash%20and%20majority%20(%E2%85%94%2B1)%20of%20validator%20signatures.%20The%20idea%20is%20to%20verify%20if%20majority%20of%20the%20validator%20set%20agrees%20on%20transaction%20in%20the%20contract.%0A%3E%0A%3E%20Peppermint%20uses%20RLP%20to%20get%20%60Vote%60%20bytes%20instead%20of%20Amino%20encoding.%20Here%20%60Data%60%20is%20%60Txs.Hash()%60%20for%20the%20block.%0A%3E%0A%3E%20Source%3A%20%5Bhttps%3A%2F%2Fgithub.com%2Fmaticnetwork%2Ftendermint%2Fblob%2Fpeppermint%2Ftypes%2Fcanonical.go%5D(https%3A%2F%2Fgithub.com%2Fmaticnetwork%2Ftendermint%2Fblob%2Fpeppermint%2Ftypes%2Fcanonical.go)%0A%0A%3E%20%60%60%60go%0A%3E%20%2F%2F%20%5Bpeppermint%5D%20create%20RLP%20vote%20to%20decode%20in%20contract%0A%3E%20type%20CanonicalRLPVote%20struct%20%7B%0A%3E%20%20ChainID%20string%0A%3E%20%20Type%20%20%20%20byte%0A%3E%20%20Height%20%20uint%0A%3E%20%20Round%20%20%20uint%0A%3E%20%20Data%20%20%20%20%5B%5Dbyte%0A%3E%20%7D%0A%3E%20%60%60%60%0A%3E%0A%3E%20And%20using%20RLP%20encoding%20lib%20to%20get%20byte%20data%20for%20signature%20on%20Vote.%0A%3E%0A%3E%20Source%3A%20%5Bhttps%3A%2F%2Fgithub.com%2Fmaticnetwork%2Ftendermint%2Fblob%2Fpeppermint%2Ftypes%2Fvote.go%23L75-L82%5D(https%3A%2F%2Fgithub.com%2Fmaticnetwork%2Ftendermint%2Fblob%2Fpeppermint%2Ftypes%2Fvote.go%23L75-L82)%0A%0A%3E%20%60%60%60go%0A%3E%20func%20(vote%20*Vote)%20SignBytes(chainID%20string)%20%5B%5Dbyte%20%7B%0A%3E%20%20%2F%2F%20%5Bpeppermint%5D%20converted%20from%20amino%20to%20rlp%0A%3E%20%20bz%2C%20err%20%3A%3D%20rlp.EncodeToBytes(CanonicalizeVote(chainID%2C%20vote))%0A%3E%20%20if%20err%20!%3D%20nil%20%7B%0A%3E%20%20%20panic(err)%0A%3E%20%20%7D%0A%3E%20%20return%20bz%0A%3E%20%7D%0A%3E%20%60%60%60%0A%3E%0A%3E%20Complete%20Source%3A%20%5Bhttps%3A%2F%2Fgithub.com%2Fmaticnetwork%2Ftendermint%5D(https%3A%2F%2Fgithub.com%2Fmaticnetwork%2Ftendermint)%0A%0A**Note%3A%20As%20of%20March%2012th%2C%202023%20the%20pepperming%20votes%20function%20now%20uses%20amino**%0A%0A%5Btendermint%2Ftypes%2Fvote.go%5D(https%3A%2F%2Fgithub.com%2Fmaticnetwork%2Ftendermint%2Fblob%2Fpeppermint%2Ftypes%2Fvote.go)%0A%0A%60%60%60go%0Afunc%20(vote%20*Vote)%20SignBytes(chainID%20string)%20%5B%5Dbyte%20%7B%0A%20%2F%2F%20%5Bpeppermint%5D%20converted%20from%20amino%20to%20rlp%0A%20bz%2C%20err%20%3A%3D%20cdc.MarshalBinaryLengthPrefixed(CanonicalizeVote(chainID%2C%20vote))%0A%20if%20err%20!%3D%20nil%20%7B%0A%20%20panic(err)%0A%20%7D%0A%20return%20bz%0A%7D%0A%60%60%60%0A%0A%5Btendermint%2Fconsensus%2Fcodec.go%5D(https%3A%2F%2Fgithub.com%2Fmaticnetwork%2Ftendermint%2Fblob%2Fpeppermint%2Fconsensus%2Fcodec.go)%0A%0A%60%60%60go%0Apackage%20consensus%0A%0Aimport%20(%0A%20amino%20%22github.com%2Ftendermint%2Fgo-amino%22%0A%20%22github.com%2Ftendermint%2Ftendermint%2Ftypes%22%0A)%0A%0Avar%20cdc%20%3D%20amino.NewCodec()%0A%0Afunc%20init()%20%7B%0A%20RegisterConsensusMessages(cdc)%0A%20RegisterWALMessages(cdc)%0A%20types.RegisterBlockAmino(cdc)%0A%7D%0A%0A%60%60%60%0A%0A%5Btendermint%2Fp2p%2Fcodec.go%5D(https%3A%2F%2Fgithub.com%2Fmaticnetwork%2Ftendermint%2Fblob%2Fpeppermint%2Fp2p%2Fcodec.go)%0A%0A%60%60%60go%0Apackage%20p2p%0A%0Aimport%20(%0A%20amino%20%22github.com%2Ftendermint%2Fgo-amino%22%0A%20cryptoAmino%20%22github.com%2Ftendermint%2Ftendermint%2Fcrypto%2Fencoding%2Famino%22%0A)%0A%0Avar%20cdc%20%3D%20amino.NewCodec()%0A%0Afunc%20init()%20%7B%0A%20cryptoAmino.RegisterAmino(cdc)%0A%7D%0A%60%60%60%0A%0A%23%23%20Code%20Review%0A%0APolygon's%20%5Bpeppermint%20fork%20of%20tendermint%5D(https%3A%2F%2Fgithub.com%2Fmaticnetwork%2Ftendermint)%20was%20forked%20from%20%5Btendermint%5D(https%3A%2F%2Fgithub.com%2Ftendermint%2Ftendermint)%20and%20as%20such%20the%20codebase%20has%20similar%20functions%20to%20those%20documented%20in%20%5Bcosmos%20code%20review%5D(.%2Fcosmos%23code-review).%0A%0AThe%20major%20changes%20are%20to%20the%20consensus%20and%20signing%20(see%20above)%0A%0APolygon's%20%5Bbor%5D(https%3A%2F%2Fgithub.com%2Fmaticnetwork%2Fbor)%20is%20cloned%20from%20%5Bgeth%5D(https%3A%2F%2Fgithub.com%2Fethereum%2Fgo-ethereum)%20and%20as%20such%20the%20codebase%20has%20similar%20functions%20to%20those%20documented%20in%20%5Bethereum%201-0%20code%20review%5D(.%2Fethereum-1-0%23code-review).%0A%0A%23%23%23%20Signing%0A%0A-%20%5BPeppermint%20secp256k1%20Codebase%5D(https%3A%2F%2Fgithub.com%2Fmaticnetwork%2Ftendermint%2Ftree%2Fpeppermint%2Fcrypto%2Fsecp256k1)%3A%20Peppermint%20ECDSA%20Secp256k1%20curve%20codebase%20(go).%0A%20%20-%20%5BPeppermint%20secp256k1%20signing%20code%5D(https%3A%2F%2Fgithub.com%2Fmaticnetwork%2Ftendermint%2Fblob%2Fpeppermint%2Fcrypto%2Fsecp256k1%2Fsecp256k1_nocgo.go%23L21)%3A%20Peppermint%20sign%20function%20(go).%20_Sign%20creates%20an%20ECDSA%20signature%20on%20curve%20Secp256k1%2C%20using%20SHA256%20on%20the%20msg.%20The%20returned%20signature%20will%20be%20of%20the%20form%20R%20%60%7C%7C%60%20S%20(in%20lower-S%20form)._%0A%0A%23%23%23%20Consensus%0A%0A-%20%5BPeppermint%5D(https%3A%2F%2Fgithub.com%2Fmaticnetwork%2Ftendermint)%0A%20%20-%20%5Bstate.go%5D(https%3A%2F%2Fgithub.com%2Fmaticnetwork%2Ftendermint%2Fblob%2Fpeppermint%2Fconsensus%2Fstate.go%23L886)%3A%20Modified%20to%20support%20%5Bheimdall%5D(https%3A%2F%2Fwiki.polygon.technology%2Fdocs%2Fpos%2Fheimdall%2Foverview).%0A%0A%23%23%20References%0A%0A**Consensus**%0A%0A-%20%5BThe%20latest%20gossip%20on%20BFT%20consensus%5D(https%3A%2F%2Farxiv.org%2Fpdf%2F1807.04938.pdf)%3A%20The%20paper%20presents%20Tendermint%2C%20a%20new%20protocol%20for%20ordering%20events%20in%20a%20distributed%20network%20under%20adversarial%20conditions.%0A-%20%5BHeimdall%20Documentation%5D(https%3A%2F%2Fwiki.polygon.technology%2Fdocs%2Fpos%2Fheimdall%2Foverview%2F)%3A%20Heimdall%20consensus%20engine%20uses%20the%20Cosmos-SDK%20and%20a%20forked%20version%20of%20Tendermint%2C%20called%20Peppermint.%0A-%20%5BPeppermint%20Documentation%5D(https%3A%2F%2Fwiki.polygon.technology%2Fdocs%2Fpos%2Fpeppermint%2F)%3A%20Peppermint%20is%20a%20modified%20Tendermint.%20It%20is%20changed%20to%20make%20it%20compatible%20with%20Ethereum%20addresses%20and%20verifiable%20on%20Ethereum%20chain.%0A-%20%5BPeppermint%20Codebase%5D(https%3A%2F%2Fgithub.com%2Fmaticnetwork%2Ftendermint%2Ftree%2Fpeppermint)%3A%20Polygon%20fork%20of%20tendermint%20codebase%20(go).%0A%20%20-%20%5BPeppermint%20Consensus%20Code%5D(https%3A%2F%2Fgithub.com%2Fmaticnetwork%2Ftendermint%2Fblob%2Fpeppermint%2Fconsensus%2Fstate.go%23L70)%3A%20Peppermint%20Consensus%20(go).%20_ConsensusState%20handles%20execution%20of%20the%20consensus%20algorithm.%20It%20processes%20votes%20and%20proposals%2C%20and%20upon%20reaching%20agreement%2C%20commits%20blocks%20to%20the%20chain%20and%20executes%20them%20against%20the%20application.%20The%20internal%20state%20machine%20receives%20input%20from%20peers%2C%20the%20internal%20validator%2C%20and%20from%20a%20timer._%0A%20%20-%20%5BPeppermint%20Consenus%20Configuration%20Code%5D(https%3A%2F%2Fgithub.com%2Fmaticnetwork%2Ftendermint%2Fblob%2Fmaster%2Fconfig%2Fconfig.go%23L443)%3A%20Peppermint%20Consensus%20Configuration(go).%20_defines%20the%20configuration%20for%20the%20Tendermint%20consensus%20service%2C%20including%20timeouts%20and%20details%20about%20the%20Write%20Ahead%20Logs%20(WAL)%20and%20the%20block%20structure._%0A%20%20-%20%5BPeppermint%20Validator%20Set%20Code%5D(https%3A%2F%2Fgithub.com%2Fmaticnetwork%2Ftendermint%2Fblob%2Fpeppermint%2Ftypes%2Fvalidator_set.go)%3A%20Peppermint%20Validators%20(go).%20*ValidatorSet%20represent%20a%20set%20of*Validator%20at%20a%20given%20height.%5C*%0A-%20%5BBor%20Consensus%20Documentation%5D(https%3A%2F%2Fwiki.polygon.technology%2Fdocs%2Fpos%2Fbor%2Fconsensus%2F)%3A%20Bor%20consensus%20is%20inspired%20by%20Clique%20consensus%3A%20https%3A%2F%2Feips.ethereum.org%2FEIPS%2Feip-225.%0A-%20%5BEIP-225%3A%20Clique%20proof-of-authority%20consensus%20protocol%5D(https%3A%2F%2Feips.ethereum.org%2FEIPS%2Feip-225)%3A%20Clique%20is%20a%20proof-of-authority%20consensus%20protocol.%20It%20shadows%20the%20design%20of%20Ethereum%20mainnet%2C%20so%20it%20can%20be%20added%20to%20any%20client%20with%20minimal%20effort.%0A-%20%5BHeimdall%20and%20Bor%20Article%5D(https%3A%2F%2Fpolygon.technology%2Fblog%2Fheimdall-and-bor)%3A%20Article%20explaining%20Polygon(Matic)%20hybrid%20Plasma%20%2B%20Proof-of-Stake%20(PoS)%20platform.%0A%0A**Staking**%0A%0A-%20%5BHemidall%20Staking%20Documentation%5D(https%3A%2F%2Fwiki.polygon.technology%2Fdocs%2Fpos%2Fheimdall%2Fmodules%2Fstaking%2F)%0A-%20%5BPolygon%20Staking%20App%5D(https%3A%2F%2Fstaking.polygon.technology%2F)%3A%20Polygon%20Staking%20Application%20listing%20100%20validators%0A%0A**Additional**%0A%0A%3Ca%20name%3D%22f8%22%3E%5B8%5D%3C%2Fa%3E%0A%3Ca%20name%3D%22f9%22%3E%5B9%5D%3C%2Fa%3E%20See%20notes%20and%20links%20to%20code%20in%20%5BPeppermint%0Asummary%5D(https%3A%2F%2Fwiki.polygon.technology%2Fdocs%2Fpos%2Fpeppermint%2F)%0A%0A%3Ca%20name%3D%22f10%22%3E%5B10%5D%3C%2Fa%3E%20See%20Polygon%20validator%0A%5Bdocumentations%5D(https%3A%2F%2Fwiki.polygon.technology%2Fdocs%2Fmaintain%2Fvalidate%2Fvalidator-responsibilities%2F)%0A",lastUpdatedAt:1753125084e3},{lazy:()=>o2(()=>import("./polygon-Dvrhxf67.js"),[]),path:"/research/chains/polygon.html",type:"mdx",filePath:"research/chains/polygon.mdx",content:"%23%20Polygon%0A%0A-%20date%3A%202023-02-04%0A-%20last%20updated%3A%202023-02-04%0A%0A%23%23%20Overview%0A%0APolygon%20is%20representative%20because%20it%20uses%20ECDSA%20on%20secp256k1%20and%20a%20relatively%20fixed%20validator%20set.%0A%0AThe%20consensus%20protocol%20is%20based%20on%20Peppermint%3Csup%3E%5B8%5D(%23f8)%3C%2Fsup%3E%2C%20a%20modified%20version%20of%20Tendermint.%20Validators%20sign%20produced%20blocks%20using%20the%20ECDSA%20signature%20scheme%20on%20secp256k1%20curves%3Csup%3E%5B9%5D(%23f9)%3C%2Fsup%3E.%20Currently%2C%20the%20validator%20set%20size%20is%20fixed%20at%20100%20and%20only%20changes%20when%20a%20current%20validator%20resigns.%20This%20restriction%20will%20change%20when%20a%20new%20auction%20mechanism%20is%20implemented.%3Csup%3E%5B10%5D(%23f10)%3C%2Fsup%3E%0A%0A%23%23%20Consensus%20Mechanism%0A%0APolygon%20uses%20Peppermint%20(a%20modified%20version%20of%20tendermint)%20Consensus.%0A%0AFollowing%20is%20an%20excerpt%20from%20%5BPolygon%20Architecture%5D(https%3A%2F%2Fgithub.com%2Fmaticnetwork%2Fmatic-docs%2Fblob%2Fmaster%2Fdocs%2Fpos%2Fpolygon-architecture.mdx).%0A%0A**Polygon%20Architecture**%0A%0A%3E%20Heimdall%20is%20the%20proof%20of%20stake%20validation%20layer%20that%20handles%20the%20aggregation%20of%20blocks%20produced%20by%20Bor%20into%20a%20Merkle%20tree%20and%20publishes%20the%20Merkle%20root%20periodically%20to%20the%20root%20chain.%20The%20periodic%20publishing%20of%20snapshots%20of%20the%20Bor%20sidechain%20is%20called%20checkpoints.%0A%3E%0A%3E%201.%20Validates%20all%20the%20blocks%20since%20the%20last%20checkpoint.%0A%3E%202.%20Creates%20a%20Merkle%20tree%20of%20the%20block%20hashes.%0A%3E%203.%20Publishes%20the%20Merkle%20root%20hash%20to%20the%20Ethereum%20mainnet.%0A%3E%0A%3E%20Checkpoints%20are%20important%20for%20two%20reasons%3A%0A%3E%0A%3E%201.%20Providing%20finality%20on%20the%20root%20chain.%0A%3E%202.%20Providing%20proof%20of%20burn%20in%20withdrawal%20of%20assets.%0A%3E%0A%3E%20An%20overview%20of%20the%20process%3A%0A%3E%0A%3E%20-%20A%20subset%20of%20active%20validators%20from%20the%20pool%20is%20selected%20to%20act%20as%20block%20producers%20for%20a%20span.%20These%20block%20producers%20are%20responsible%20for%20creating%20blocks%20and%20broadcasting%20the%20created%20blocks%20on%20the%20network.%0A%3E%20-%20A%20checkpoint%20includes%20the%20Merkle%20root%20hash%20of%20all%20blocks%20created%20during%20any%20given%20interval.%20All%20nodes%20validate%20the%20Merkle%20root%20hash%20and%20attach%20their%20signature%20to%20it.%0A%3E%20-%20A%20selected%20proposer%20from%20the%20validator%20set%20is%20responsible%20for%20collecting%20all%20signatures%20for%20a%20particular%20checkpoint%20and%20committing%20the%20checkpoint%20on%20the%20Ethereum%20mainnet.%0A%3E%20-%20The%20responsibility%20of%20creating%20blocks%20and%20proposing%20checkpoints%20is%20variably%20dependent%20on%20a%20validator%E2%80%99s%20stake%20ratio%20in%20the%20overall%20pool.%0A%3E%0A%3E%20More%20details%20on%20Heimdall%20are%20available%20on%20the%20Heimdall%20architecture%20guide.%0A%0AThis%20image%20from%20%5BBor%20Architecture%5D(https%3A%2F%2Fwiki.polygon.technology%2Fdocs%2Fpos%2Fbor%2F)%20helps%20give%20a%20better%20understanding%20of%20how%20Ethereum%2C%20Heimdall%20and%20Bor%20work%20together.%0A%0A!%5BMatic%20Structure%5D(%2Fassets%2Fresearch%2Fmatic_structure.png%20%22Matic%20Structure%22)%0A%0A%23%23%20Signing%20Mechanism%0A%0AFollowing%20is%20an%20excerpt%20from%20and%20%5BPeppermint.md%5D(https%3A%2F%2Fgithub.com%2Fmaticnetwork%2Fmatic-docs%2Fblob%2Fmaster%2Fdocs%2Fpos%2Fpeppermint.mdx).%0A%0A%3E%20Peppermint%20is%20a%20modified%20Tendermint.%20It%20is%20changed%20to%20make%20it%20compatible%20with%20Ethereum%20addresses%20and%20verifiable%20on%20Ethereum%20chain.%0A%3E%0A%3E%20Overview%0A%3E%0A%3E%201.%20Changes%20to%20signature%20scheme%0A%3E%202.%20Changes%20to%20%60vote%60%20to%20make%20it%20verifiable%20on%20Ethereum%20smart%20contract%0A%3E%203.%20Changes%20to%20%60vote%60%20encoding%20scheme%0A%3E%0A%3E%20Peppermint%20uses%20%60secp256k1%60%20signature%20scheme%20to%20verify%20Tendermint%20votes%20on%20solidity%20smart%20contract.%0A%3E%0A%3E%20Source%3A%20%5Bhttps%3A%2F%2Fgithub.com%2Fmaticnetwork%2Ftendermint%2Fblob%2Fpeppermint%2Fcrypto%2Fsecp256k1%2Fsecp256k1_nocgo.go%5D(https%3A%2F%2Fgithub.com%2Fmaticnetwork%2Ftendermint%2Fblob%2Fpeppermint%2Fcrypto%2Fsecp256k1%2Fsecp256k1_nocgo.go)%0A%3E%0A%3E%20It%20adds%20%60Data%60%20field%20into%20%60Vote%60%20and%20%60Proposal%60%20struct%20to%20get%20%60hash%60%20for%20transactions%20in%20the%20block.%20On%20smart%20contract%2C%20it%20checks%20if%20%60Data%60%20matches%20with%20checkpoint%20data%20hash%20and%20majority%20(%E2%85%94%2B1)%20of%20validator%20signatures.%20The%20idea%20is%20to%20verify%20if%20majority%20of%20the%20validator%20set%20agrees%20on%20transaction%20in%20the%20contract.%0A%3E%0A%3E%20Peppermint%20uses%20RLP%20to%20get%20%60Vote%60%20bytes%20instead%20of%20Amino%20encoding.%20Here%20%60Data%60%20is%20%60Txs.Hash()%60%20for%20the%20block.%0A%3E%0A%3E%20Source%3A%20%5Bhttps%3A%2F%2Fgithub.com%2Fmaticnetwork%2Ftendermint%2Fblob%2Fpeppermint%2Ftypes%2Fcanonical.go%5D(https%3A%2F%2Fgithub.com%2Fmaticnetwork%2Ftendermint%2Fblob%2Fpeppermint%2Ftypes%2Fcanonical.go)%0A%0A%3E%20%60%60%60go%0A%3E%20%2F%2F%20%5Bpeppermint%5D%20create%20RLP%20vote%20to%20decode%20in%20contract%0A%3E%20type%20CanonicalRLPVote%20struct%20%7B%0A%3E%20%20ChainID%20string%0A%3E%20%20Type%20%20%20%20byte%0A%3E%20%20Height%20%20uint%0A%3E%20%20Round%20%20%20uint%0A%3E%20%20Data%20%20%20%20%5B%5Dbyte%0A%3E%20%7D%0A%3E%20%60%60%60%0A%3E%0A%3E%20And%20using%20RLP%20encoding%20lib%20to%20get%20byte%20data%20for%20signature%20on%20Vote.%0A%3E%0A%3E%20Source%3A%20%5Bhttps%3A%2F%2Fgithub.com%2Fmaticnetwork%2Ftendermint%2Fblob%2Fpeppermint%2Ftypes%2Fvote.go%23L75-L82%5D(https%3A%2F%2Fgithub.com%2Fmaticnetwork%2Ftendermint%2Fblob%2Fpeppermint%2Ftypes%2Fvote.go%23L75-L82)%0A%0A%3E%20%60%60%60go%0A%3E%20func%20(vote%20*Vote)%20SignBytes(chainID%20string)%20%5B%5Dbyte%20%7B%0A%3E%20%20%2F%2F%20%5Bpeppermint%5D%20converted%20from%20amino%20to%20rlp%0A%3E%20%20bz%2C%20err%20%3A%3D%20rlp.EncodeToBytes(CanonicalizeVote(chainID%2C%20vote))%0A%3E%20%20if%20err%20!%3D%20nil%20%7B%0A%3E%20%20%20panic(err)%0A%3E%20%20%7D%0A%3E%20%20return%20bz%0A%3E%20%7D%0A%3E%20%60%60%60%0A%3E%0A%3E%20Complete%20Source%3A%20%5Bhttps%3A%2F%2Fgithub.com%2Fmaticnetwork%2Ftendermint%5D(https%3A%2F%2Fgithub.com%2Fmaticnetwork%2Ftendermint)%0A%0A**Note%3A%20As%20of%20March%2012th%2C%202023%20the%20pepperming%20votes%20function%20now%20uses%20amino**%0A%0A%5Btendermint%2Ftypes%2Fvote.go%5D(https%3A%2F%2Fgithub.com%2Fmaticnetwork%2Ftendermint%2Fblob%2Fpeppermint%2Ftypes%2Fvote.go)%0A%0A%60%60%60go%0Afunc%20(vote%20*Vote)%20SignBytes(chainID%20string)%20%5B%5Dbyte%20%7B%0A%20%2F%2F%20%5Bpeppermint%5D%20converted%20from%20amino%20to%20rlp%0A%20bz%2C%20err%20%3A%3D%20cdc.MarshalBinaryLengthPrefixed(CanonicalizeVote(chainID%2C%20vote))%0A%20if%20err%20!%3D%20nil%20%7B%0A%20%20panic(err)%0A%20%7D%0A%20return%20bz%0A%7D%0A%60%60%60%0A%0A%5Btendermint%2Fconsensus%2Fcodec.go%5D(https%3A%2F%2Fgithub.com%2Fmaticnetwork%2Ftendermint%2Fblob%2Fpeppermint%2Fconsensus%2Fcodec.go)%0A%0A%60%60%60go%0Apackage%20consensus%0A%0Aimport%20(%0A%20amino%20%22github.com%2Ftendermint%2Fgo-amino%22%0A%20%22github.com%2Ftendermint%2Ftendermint%2Ftypes%22%0A)%0A%0Avar%20cdc%20%3D%20amino.NewCodec()%0A%0Afunc%20init()%20%7B%0A%20RegisterConsensusMessages(cdc)%0A%20RegisterWALMessages(cdc)%0A%20types.RegisterBlockAmino(cdc)%0A%7D%0A%0A%60%60%60%0A%0A%5Btendermint%2Fp2p%2Fcodec.go%5D(https%3A%2F%2Fgithub.com%2Fmaticnetwork%2Ftendermint%2Fblob%2Fpeppermint%2Fp2p%2Fcodec.go)%0A%0A%60%60%60go%0Apackage%20p2p%0A%0Aimport%20(%0A%20amino%20%22github.com%2Ftendermint%2Fgo-amino%22%0A%20cryptoAmino%20%22github.com%2Ftendermint%2Ftendermint%2Fcrypto%2Fencoding%2Famino%22%0A)%0A%0Avar%20cdc%20%3D%20amino.NewCodec()%0A%0Afunc%20init()%20%7B%0A%20cryptoAmino.RegisterAmino(cdc)%0A%7D%0A%60%60%60%0A%0A%23%23%20Code%20Review%0A%0APolygon's%20%5Bpeppermint%20fork%20of%20tendermint%5D(https%3A%2F%2Fgithub.com%2Fmaticnetwork%2Ftendermint)%20was%20forked%20from%20%5Btendermint%5D(https%3A%2F%2Fgithub.com%2Ftendermint%2Ftendermint)%20and%20as%20such%20the%20codebase%20has%20similar%20functions%20to%20those%20documented%20in%20%5Bcosmos%20code%20review%5D(.%2Fcosmos%23code-review).%0A%0AThe%20major%20changes%20are%20to%20the%20consensus%20and%20signing%20(see%20above)%0A%0APolygon's%20%5Bbor%5D(https%3A%2F%2Fgithub.com%2Fmaticnetwork%2Fbor)%20is%20cloned%20from%20%5Bgeth%5D(https%3A%2F%2Fgithub.com%2Fethereum%2Fgo-ethereum)%20and%20as%20such%20the%20codebase%20has%20similar%20functions%20to%20those%20documented%20in%20%5Bethereum%201-0%20code%20review%5D(.%2Fethereum-1-0%23code-review).%0A%0A%23%23%23%20Signing%0A%0A-%20%5BPeppermint%20secp256k1%20Codebase%5D(https%3A%2F%2Fgithub.com%2Fmaticnetwork%2Ftendermint%2Ftree%2Fpeppermint%2Fcrypto%2Fsecp256k1)%3A%20Peppermint%20ECDSA%20Secp256k1%20curve%20codebase%20(go).%0A%20%20-%20%5BPeppermint%20secp256k1%20signing%20code%5D(https%3A%2F%2Fgithub.com%2Fmaticnetwork%2Ftendermint%2Fblob%2Fpeppermint%2Fcrypto%2Fsecp256k1%2Fsecp256k1_nocgo.go%23L21)%3A%20Peppermint%20sign%20function%20(go).%20_Sign%20creates%20an%20ECDSA%20signature%20on%20curve%20Secp256k1%2C%20using%20SHA256%20on%20the%20msg.%20The%20returned%20signature%20will%20be%20of%20the%20form%20R%20%60%7C%7C%60%20S%20(in%20lower-S%20form)._%0A%0A%23%23%23%20Consensus%0A%0A-%20%5BPeppermint%5D(https%3A%2F%2Fgithub.com%2Fmaticnetwork%2Ftendermint)%0A%20%20-%20%5Bstate.go%5D(https%3A%2F%2Fgithub.com%2Fmaticnetwork%2Ftendermint%2Fblob%2Fpeppermint%2Fconsensus%2Fstate.go%23L886)%3A%20Modified%20to%20support%20%5Bheimdall%5D(https%3A%2F%2Fwiki.polygon.technology%2Fdocs%2Fpos%2Fheimdall%2Foverview).%0A%0A%23%23%20References%0A%0A**Consensus**%0A%0A-%20%5BThe%20latest%20gossip%20on%20BFT%20consensus%5D(https%3A%2F%2Farxiv.org%2Fpdf%2F1807.04938.pdf)%3A%20The%20paper%20presents%20Tendermint%2C%20a%20new%20protocol%20for%20ordering%20events%20in%20a%20distributed%20network%20under%20adversarial%20conditions.%0A-%20%5BHeimdall%20Documentation%5D(https%3A%2F%2Fwiki.polygon.technology%2Fdocs%2Fpos%2Fheimdall%2Foverview%2F)%3A%20Heimdall%20consensus%20engine%20uses%20the%20Cosmos-SDK%20and%20a%20forked%20version%20of%20Tendermint%2C%20called%20Peppermint.%0A-%20%5BPeppermint%20Documentation%5D(https%3A%2F%2Fwiki.polygon.technology%2Fdocs%2Fpos%2Fpeppermint%2F)%3A%20Peppermint%20is%20a%20modified%20Tendermint.%20It%20is%20changed%20to%20make%20it%20compatible%20with%20Ethereum%20addresses%20and%20verifiable%20on%20Ethereum%20chain.%0A-%20%5BPeppermint%20Codebase%5D(https%3A%2F%2Fgithub.com%2Fmaticnetwork%2Ftendermint%2Ftree%2Fpeppermint)%3A%20Polygon%20fork%20of%20tendermint%20codebase%20(go).%0A%20%20-%20%5BPeppermint%20Consensus%20Code%5D(https%3A%2F%2Fgithub.com%2Fmaticnetwork%2Ftendermint%2Fblob%2Fpeppermint%2Fconsensus%2Fstate.go%23L70)%3A%20Peppermint%20Consensus%20(go).%20_ConsensusState%20handles%20execution%20of%20the%20consensus%20algorithm.%20It%20processes%20votes%20and%20proposals%2C%20and%20upon%20reaching%20agreement%2C%20commits%20blocks%20to%20the%20chain%20and%20executes%20them%20against%20the%20application.%20The%20internal%20state%20machine%20receives%20input%20from%20peers%2C%20the%20internal%20validator%2C%20and%20from%20a%20timer._%0A%20%20-%20%5BPeppermint%20Consenus%20Configuration%20Code%5D(https%3A%2F%2Fgithub.com%2Fmaticnetwork%2Ftendermint%2Fblob%2Fmaster%2Fconfig%2Fconfig.go%23L443)%3A%20Peppermint%20Consensus%20Configuration(go).%20_defines%20the%20configuration%20for%20the%20Tendermint%20consensus%20service%2C%20including%20timeouts%20and%20details%20about%20the%20Write%20Ahead%20Logs%20(WAL)%20and%20the%20block%20structure._%0A%20%20-%20%5BPeppermint%20Validator%20Set%20Code%5D(https%3A%2F%2Fgithub.com%2Fmaticnetwork%2Ftendermint%2Fblob%2Fpeppermint%2Ftypes%2Fvalidator_set.go)%3A%20Peppermint%20Validators%20(go).%20*ValidatorSet%20represent%20a%20set%20of*Validator%20at%20a%20given%20height.%5C*%0A-%20%5BBor%20Consensus%20Documentation%5D(https%3A%2F%2Fwiki.polygon.technology%2Fdocs%2Fpos%2Fbor%2Fconsensus%2F)%3A%20Bor%20consensus%20is%20inspired%20by%20Clique%20consensus%3A%20https%3A%2F%2Feips.ethereum.org%2FEIPS%2Feip-225.%0A-%20%5BEIP-225%3A%20Clique%20proof-of-authority%20consensus%20protocol%5D(https%3A%2F%2Feips.ethereum.org%2FEIPS%2Feip-225)%3A%20Clique%20is%20a%20proof-of-authority%20consensus%20protocol.%20It%20shadows%20the%20design%20of%20Ethereum%20mainnet%2C%20so%20it%20can%20be%20added%20to%20any%20client%20with%20minimal%20effort.%0A-%20%5BHeimdall%20and%20Bor%20Article%5D(https%3A%2F%2Fpolygon.technology%2Fblog%2Fheimdall-and-bor)%3A%20Article%20explaining%20Polygon(Matic)%20hybrid%20Plasma%20%2B%20Proof-of-Stake%20(PoS)%20platform.%0A%0A**Staking**%0A%0A-%20%5BHemidall%20Staking%20Documentation%5D(https%3A%2F%2Fwiki.polygon.technology%2Fdocs%2Fpos%2Fheimdall%2Fmodules%2Fstaking%2F)%0A-%20%5BPolygon%20Staking%20App%5D(https%3A%2F%2Fstaking.polygon.technology%2F)%3A%20Polygon%20Staking%20Application%20listing%20100%20validators%0A%0A**Additional**%0A%0A%3Ca%20name%3D%22f8%22%3E%5B8%5D%3C%2Fa%3E%0A%3Ca%20name%3D%22f9%22%3E%5B9%5D%3C%2Fa%3E%20See%20notes%20and%20links%20to%20code%20in%20%5BPeppermint%0Asummary%5D(https%3A%2F%2Fwiki.polygon.technology%2Fdocs%2Fpos%2Fpeppermint%2F)%0A%0A%3Ca%20name%3D%22f10%22%3E%5B10%5D%3C%2Fa%3E%20See%20Polygon%20validator%0A%5Bdocumentations%5D(https%3A%2F%2Fwiki.polygon.technology%2Fdocs%2Fmaintain%2Fvalidate%2Fvalidator-responsibilities%2F)%0A",lastUpdatedAt:1753125084e3},{lazy:()=>o2(()=>import("./celestia-D1i_LrzL.js"),[]),path:"/research/dataAvailabilty/celestia",type:"mdx",filePath:"research/dataAvailabilty/celestia.mdx",content:"%23%20Celestia%0A%0A-%20date%3A%202023-06-19%0A-%20last%20updated%3A%202023-06-19%0A%0A%23%23%20Overview%0A%0ACelestia%5B%5Eov-1%5D%20is%20a%20modular%20consensus%20and%20data%20network%2C%20built%20to%20enable%20anyone%20to%20easily%20deploy%20their%20own%20blockchain%20with%20minimal%20overhead.%0A%0A%23%23%20Cryptographic%20Primitives%0A%0A-%20%5Bwhitepaper%5D(https%3A%2F%2Farxiv.org%2Fpdf%2F1809.09044.pdf)%0A%20%20-%202.2%20Merkle%20Trees%20and%20Sparse%20Merkle%20Trees%0A%20%20-%202.3%20Erasure%20Codes%20and%20Reed-Solomon%20Codes%0A%20%20-%205%20Data%20Availability%20Proofs%0A%20%20%20%20-%205.1%20Strawman%201D%20Reed-Solomon%20Availability%20Scheme%0A%20%20%20%20-%205.2%202D%20Reed-Solomon%20Encoded%20Merkle%20Tree%20Construction%0A%20%20%20%20-%205.3%20Random%20Sampling%20and%20Network%20Block%20Recovery%0A%20%20%20%20-%205.4%20Selective%20Share%20Disclosure%0A%20%20%20%20-%205.5%20Fraud%20Proofs%20of%20Incorrectly%20Generated%20Extended%20Data%0A-%20%5BCelestia%20App%20Architecture%5D(https%3A%2F%2Fgithub.com%2Fcelestiaorg%2Fcelestia-app%2Ftree%2Fmain%2Fdocs%2Farchitecture)%0A-%20%5BImplementation%20celestia-app%20pkg%5D(https%3A%2F%2Fgithub.com%2Fcelestiaorg%2Fcelestia-app%2Ftree%2Fmain%2Fpkg)%0A%0A%23%23%23%20Namespaced%20Merkle%20Tree%20Wrapper%0A%0A-%20%5Bcode%5D(https%3A%2F%2Fgithub.com%2Fcelestiaorg%2Fcelestia-app%2Ftree%2Fmain%2Fpkg%2Fwrapper)%0A%0A%23%23%20Appendices%0A%0A%23%23%20References%0A%0A-%20%5BLearn%20Modular%5D(https%3A%2F%2Fcelestia.org%2Flearn%2F)%0A-%20%5BFraud%20and%20Data%20Availability%20Proofs%5D(https%3A%2F%2Farxiv.org%2Fpdf%2F1809.09044.pdf)%3A%20Maximising%20Light%20Client%20Security%20and%20Scaling%20Blockchains%20with%20Dishonest%20Majorities%0A-%20%5BCelestia%20App%20Specifications%5D(https%3A%2F%2Fcelestiaorg.github.io%2Fcelestia-app%2Findex.html)%0A-%20%5BCelestia%20App%20Architecture%5D(https%3A%2F%2Fgithub.com%2Fcelestiaorg%2Fcelestia-app%2Ftree%2Fmain%2Fdocs%2Farchitecture)%0A-%20%5BRollkit%20Docs%5D(https%3A%2F%2Frollkit.dev%2Fdocs%2Fintro%2F)%0A-%20%5BRollkit%20Architecture%20Design%20Records%5D(https%3A%2F%2Fgithub.com%2Frollkit%2Frollkit%2Ftree%2Fmain%2Fdocs%2Flazy-adr)%0A-%20%5BRollkit%20Dependency%20Graph%5D(https%3A%2F%2Fgithub.com%2Frollkit%2Frollkit%2Fblob%2Fmain%2Fdocs%2Fspecification%2Frollkit-dependency-graph.mdx)%0A-%20%5BQuantum%20Gravity%20Bridge%5D(https%3A%2F%2Fgithub.com%2Fcelestiaorg%2Fquantum-gravity-bridge%2Ftree%2Fmaster)%0A%0A%23%23%20Footnotes%0A%0A%5B%5Eov-1%5D%3A%20%5BCelestia%5D(https%3A%2F%2Fcelestia.org%2F)%3A%20the%20first%20modular%20blockchan%20network.%0A",lastUpdatedAt:1753129136e3},{lazy:()=>o2(()=>import("./celestia-D1i_LrzL.js"),[]),path:"/research/dataAvailabilty/celestia.html",type:"mdx",filePath:"research/dataAvailabilty/celestia.mdx",content:"%23%20Celestia%0A%0A-%20date%3A%202023-06-19%0A-%20last%20updated%3A%202023-06-19%0A%0A%23%23%20Overview%0A%0ACelestia%5B%5Eov-1%5D%20is%20a%20modular%20consensus%20and%20data%20network%2C%20built%20to%20enable%20anyone%20to%20easily%20deploy%20their%20own%20blockchain%20with%20minimal%20overhead.%0A%0A%23%23%20Cryptographic%20Primitives%0A%0A-%20%5Bwhitepaper%5D(https%3A%2F%2Farxiv.org%2Fpdf%2F1809.09044.pdf)%0A%20%20-%202.2%20Merkle%20Trees%20and%20Sparse%20Merkle%20Trees%0A%20%20-%202.3%20Erasure%20Codes%20and%20Reed-Solomon%20Codes%0A%20%20-%205%20Data%20Availability%20Proofs%0A%20%20%20%20-%205.1%20Strawman%201D%20Reed-Solomon%20Availability%20Scheme%0A%20%20%20%20-%205.2%202D%20Reed-Solomon%20Encoded%20Merkle%20Tree%20Construction%0A%20%20%20%20-%205.3%20Random%20Sampling%20and%20Network%20Block%20Recovery%0A%20%20%20%20-%205.4%20Selective%20Share%20Disclosure%0A%20%20%20%20-%205.5%20Fraud%20Proofs%20of%20Incorrectly%20Generated%20Extended%20Data%0A-%20%5BCelestia%20App%20Architecture%5D(https%3A%2F%2Fgithub.com%2Fcelestiaorg%2Fcelestia-app%2Ftree%2Fmain%2Fdocs%2Farchitecture)%0A-%20%5BImplementation%20celestia-app%20pkg%5D(https%3A%2F%2Fgithub.com%2Fcelestiaorg%2Fcelestia-app%2Ftree%2Fmain%2Fpkg)%0A%0A%23%23%23%20Namespaced%20Merkle%20Tree%20Wrapper%0A%0A-%20%5Bcode%5D(https%3A%2F%2Fgithub.com%2Fcelestiaorg%2Fcelestia-app%2Ftree%2Fmain%2Fpkg%2Fwrapper)%0A%0A%23%23%20Appendices%0A%0A%23%23%20References%0A%0A-%20%5BLearn%20Modular%5D(https%3A%2F%2Fcelestia.org%2Flearn%2F)%0A-%20%5BFraud%20and%20Data%20Availability%20Proofs%5D(https%3A%2F%2Farxiv.org%2Fpdf%2F1809.09044.pdf)%3A%20Maximising%20Light%20Client%20Security%20and%20Scaling%20Blockchains%20with%20Dishonest%20Majorities%0A-%20%5BCelestia%20App%20Specifications%5D(https%3A%2F%2Fcelestiaorg.github.io%2Fcelestia-app%2Findex.html)%0A-%20%5BCelestia%20App%20Architecture%5D(https%3A%2F%2Fgithub.com%2Fcelestiaorg%2Fcelestia-app%2Ftree%2Fmain%2Fdocs%2Farchitecture)%0A-%20%5BRollkit%20Docs%5D(https%3A%2F%2Frollkit.dev%2Fdocs%2Fintro%2F)%0A-%20%5BRollkit%20Architecture%20Design%20Records%5D(https%3A%2F%2Fgithub.com%2Frollkit%2Frollkit%2Ftree%2Fmain%2Fdocs%2Flazy-adr)%0A-%20%5BRollkit%20Dependency%20Graph%5D(https%3A%2F%2Fgithub.com%2Frollkit%2Frollkit%2Fblob%2Fmain%2Fdocs%2Fspecification%2Frollkit-dependency-graph.mdx)%0A-%20%5BQuantum%20Gravity%20Bridge%5D(https%3A%2F%2Fgithub.com%2Fcelestiaorg%2Fquantum-gravity-bridge%2Ftree%2Fmaster)%0A%0A%23%23%20Footnotes%0A%0A%5B%5Eov-1%5D%3A%20%5BCelestia%5D(https%3A%2F%2Fcelestia.org%2F)%3A%20the%20first%20modular%20blockchan%20network.%0A",lastUpdatedAt:1753129136e3},{lazy:()=>o2(()=>import("./Horizon-DQvUHMb4.js"),[]),path:"/research/code/Horizon",type:"mdx",filePath:"research/code/Horizon.mdx",content:"%23%20Horizon%20Bridge%0A%0A-%20date%3A%202023-02-04%0A-%20last%20updated%3A%202023-02-04%0A%0A%23%23%20Overview%0A%0AThis%20document%20reviews%20the%20%5Bhorizon%5D(https%3A%2F%2Fgithub.com%2Fjohnwhitton%2Fhorizon%2Ftree%2FrefactorV2)%20current%20implementation%2C%20development%20tasks%20that%20need%20to%20be%20done%20to%20support%20POW%20and%20offers%20some%20thoughts%20on%20next%20steps%20to%20support%20Ethereum%202.0%20and%20other%20chains.%0A%0AFurther%20thoughts%20on%20ETH%202.0%20support%2C%20removing%20the%20ETHHASH%20logic%20and%20SPV%20client%20and%20potentially%20replacing%20with%20MMR%20trees%20per%20epoch%20and%20checkpoints%20similar%20to%20Harmony%20Light%20Client%20on%20Ethereum%2C%20can%20be%20found%20%5Bhere%5D(%2Fresearch%2Fchains%2Fethereum.mdx).%0A%0A%23%23%20Next%20Steps%0A%0AFollowing%20are%20some%20of%20the%20improvements%20needed%20broken%20down%20by%20functional%20areas.%0A%0A%23%23%23%20Ethereum%20Light%20Client%0A%0A1.%20ETH%202.0%20support%20see%20%5Bhere%5D(%2Fresearch%2Fchains%2Fethereum.mdx)%0A2.%20Queuing%20mechanism%20should%20be%20implemented%20to%20queue%20bridge%20transactions.%20The%20queue%20can%20be%20polled%20as%20part%20of%20the%20block%20relay%20functionality%20to%20process%20bridge%20transactions%20once%20the%20blocks%20have%20been%20relayed.%0A3.%20Consider%20whether%20we%20can%20use%20p2p%20messaging%20to%20receive%20published%20blocks%20rather%20than%20looping%20and%20polling%20via%20an%20RPC.%0A%0A%23%23%23%20Harmony%20Light%20Client%0A%0A1.%20Needs%20to%20implement%20a%20process%20to%20%60submitCheckpoint%60.%0A2.%20%60eprove%60%20logic%20needs%20to%20be%20reviewed%0A3.%20Queuing%20mechanism%20should%20be%20implemented%20to%20queue%20bridge%20transactions.%20The%20queue%20can%20be%20polled%20as%20part%20of%20the%20%60submitCheckpoint%60%20functionality%20to%20process%20bridge%20transactions%20once%20the%20blocks%20have%20been%20relayed.%0A4.%20Need%20to%20facilitate%20the%20core%20protocol%20%5BMMR%20enhancements%20PR%5D(https%3A%2F%2Fgithub.com%2Fharmony-one%2Fharmony%2Fpull%2F4198%2Ffiles)%0A%0A%23%23%23%20Transaction%20Sequencing%0A%0ASequencing%20of%20Transactions%3A%20Needs%20to%20be%20implemented%20and%20%60TokenMap%60%20in%20%60bridge.js%60%20needs%20to%20be%20refactored.%20Below%20is%20the%20current%20sequence%20flow%20and%20areas%20for%20improvements.%0A%0A1.%20Ethereum%20Mapping%20Request%0A2.%20Relay%20of%20Block%20to%20EthereumLightClient.sol%20on%20Harmony%0A%20%20%20-%20The%20block%20has%20to%20be%20relayed%20before%20we%20can%20process%20the%20Harmony%20Mapping%20request%2C%20as%20we%20have%20just%20executed%20the%20transaction%20the%20relayer%20usually%20has%20not%20relayed%20the%20block%20so%20this%20will%20fail.%0A%20%20%20-%20There%20must%20be%20an%20additional%2025%20blocks%20on%20Ethereum%20before%20this%20block%20can%20be%20considered%20part%20of%20the%20canonical%20chain.%0A%20%20%20-%20This%20logic%20needs%20to%20be%20rewritten%20to%20break%20down%20execution%20for%201.%20the%20ethereum%20mapping%20request%202.%20After%20a%2025%20block%20delay%20the%20Harmony%20Proof%20validation%20and%20executing%20the%20Harmony%20Mapping%20Request%5C*%5C*%0A3.%20Harmony%20Mapping%20Request%0A4.%20Relay%20of%20Checkpoint%20to%20HarmonyLightClient.sol%20on%20Ethereum%0A%20%20%20-%20A%20%60submitCheckpoint%60%20in%20%60HarmonyLightClient.sol%60%20needs%20to%20have%20called%20either%20for%20the%20next%20epoch%20or%20for%20a%20checkpoint%2C%20after%20the%20block%20the%20harmony%20mapping%20transaction%20was%20in.%5C*%5C*%0A%20%20%20-%20Automatic%20submission%20of%20checkpoints%20to%20the%20Harmony%20Light%20Client%20has%20not%20been%20developed%20as%20yet.%20(It%20is%20not%20part%20of%20the%20%60ethRelay.js%60).%20And%20so%20the%20checkpoint%20would%20need%20to%20be%20manually%20submitted%20before%20the%20Ethereum%20Mapping%20could%20take%20place.%0A5.%20Etherem%20Process%20Harmony%20Mapping%20Acknowledgement%0A%0A%23%23%23%20Bridge%20Functionality%0A%0A1.%20Need%20to%20support%20mapping%20Harmony%20Tokens%20to%20Ethereum%0A%0A%23%23%23%20MultiChain%20Support%0A%0A1.%20Need%20to%20support%20other%20chains%0A%20%20%20-%20EVM%3A%20BSC%2C%20Polygon%2C%20Avalanche%2C%20Arbitrum%2C%20Optimism%0A%20%20%20-%20Bitcoin%0A%20%20%20-%20NEAR%0A%20%20%20-%20Solana%0A%20%20%20-%20Polkadot%0A2.%20Links%20to%20initial%20Design%20thoughs%20including%20reviews%20of%20cross%20chain%20messaging%20protocols%20and%20other%20multichain%20bridges%20can%20be%20found%20in%20Multichain%20Trustless%20Bridge%20%3A%20Draft.%0A%0A%23%23%20Current%20Implementation%20Walkthough%0A%0AFollowing%20is%20a%20detailed%20walk%20though%20of%20the%20current%20implementation%20of%20the%20Ethereum%20Light%20Client%20and%20the%20flow%20for%20mapping%20tokens%20from%20Ethereum%20to%20Harmony.%0A%0A%23%23%20Ethereum%20Light%20Client%20(on%20Harmony)%0A%0A**Design**%0AExisting%20Design%0A%0A1.%20DAG%20is%20generated%20for%20each%20Ethereum%20EPOCH%3A%20This%20takes%20a%20couple%20of%20hours%20and%20has%20a%20size%20of%20approx%201GB.%0A2.%20Relayer%20is%20run%20to%20replicate%20each%20block%20header%20to%20the%20SPV%20Client%20on%20Harmony.%0A3.%20EthereumLightClient.sol%20addBlockHeader%3A%20Adds%20each%20block%20header%20to%20the%20Ethereum%20Light%20Client.%0A4.%20Transactions%20are%20Verified%0A%0A**Running%20the%20Relayer**%0A%0A%60%60%60%0A%23%20Start%20the%20relayer%20(note%3A%20replace%20the%20etherum%20light%20client%20address%20below)%0A%23%20relay%20%5Boptions%5D%20%3CethUrl%3E%20%3ChmyUrl%3E%20%3CelcAddress%3E%20%20%20relay%20eth%20block%20header%20to%20elc%20on%20hmy%0A%20yarn%20cli%20ethRelay%20relay%20http%3A%2F%2Flocalhost%3A8645%20http%3A%2F%2Flocalhost%3A9500%200x3Ceb74A902dc5fc11cF6337F68d04cB834AE6A22%0A%60%60%60%0A%0A**Implementation**%0A%0A1.%20DAG%20Generation%20can%20be%20done%20explicity%20by%20calling%20%60dagProve%60%20from%20the%20CLI%20or%20it%20is%20done%20automatically%20by%20%60getHeaderProof%60%20in%20%60ethHashProof%2FBlockProof.js%60%20which%20is%20called%20from%20%60blockRelay%60%20in%20%60cli%2FethRelay.js%60.%0A2.%20Relaying%20of%20Block%20Headers%20is%20done%20by%20%60blockRelayLoop%60%20in%20%60cli%2FethRelay.js%60%20which%0A%20%20%20-%20Reads%20the%20last%20block%20header%20from%20EthereumLightClient.sol%0A%20%20%20-%20Loops%20through%20calling%20an%20Ethereum%20RPC%20per%20block%20to%20retrieve%20the%20blockHeader%20using%20%60return%20eth.getBlock(blockNo).then(fromRPC)%60%20in%20function%20%60getBlockByNumber%60%20in%20%60eth2hmy-relay%2FgetBlockHeader.js%60%0A3.%20Adding%20BlockHeaders%20is%20done%20by%20%60await%20elc.addBlockHeader(rlpHeader%2C%20proofs.dagData%2C%20proofs.proofs)%60%20which%20is%20called%20from%20%60cli%2FethRelay.js%60.%20%60addBlockHeader%60%20in%20%60EthereumLightClient.sol%60%0A%20%20%20-%20calculates%20the%20blockHeader%20Hash%0A%20%20%20-%20and%20checks%20that%20it%0A%20%20%20%20%20-%20hasn't%20already%20been%20relayed%2C%0A%20%20%20%20%20-%20is%20the%20next%20block%20to%20be%20added%2C%0A%20%20%20%20%20-%20has%20a%20valid%20timestamp%0A%20%20%20%20%20-%20has%20a%20valid%20difficulty%0A%20%20%20%20%20-%20has%20a%20valid%20Proof%20of%20Work%20(POW)%0A%20%20%20-%20Check%20if%20the%20canonical%20chain%20needs%20to%20be%20replaced%20by%20another%20fork%0A%0A%23%23%23%20Mapping%20Tokens%20(Ethereum%20to%20Harmony)%0A%0A**Design**%0A%0A1.%20If%20the%20Token%20Has%20not%20already%20been%20mapped%20on%20Harmony%0A%20%20%20-%20Harmony%3A%20Create%20an%20ERC20%20Token%0A%20%20%20-%20Harmony%3A%20Map%20the%20Ethereum%20Token%20to%20the%20new%20ERC20%20Contract%0A%20%20%20-%20Ethereum%3A%20Validate%20the%20Harmony%20Mapping%20Transaction%0A%20%20%20-%20Ethereum%3A%20Map%20the%20Harmony%20ERC20%20token%20to%20the%20existing%20Ethereum%20Token%0A%20%20%20-%20Harmony%3A%20Validate%20the%20Ethereum%20mapping%20Transaction%0A%0A_Note%3A%20The%20key%20difference%20between%20%60TokenLockerOnEthereum.sol%60%20and%20%60TokenLockerOnHarmony.sol%60%20is%20the%20proof%20validation.%20%60TokenLockerOnEthereum.sol%60%20uses%20%60.%2Flib%2FMMRVerifier.sol%60%20to%20validate%20the%20%5BMountain%20Merkle%20Ranges%5D(https%3A%2F%2Fgithub.com%2Fopentimestamps%2Fopentimestamps-server%2Fblob%2Fmaster%2Fdoc%2Fmerkle-mountain-range.mdx)%20on%20Harmony%20and%20%60HarmonyProver.sol%60.%20%60TokenLockerOnHarmony.sol%60%20imports%20%60.%2Flib%2FMPTValidatorV2.sol%60%20to%20validate%20%5BMerkle%20Patrica%20Trie%5D(https%3A%2F%2Fethereum.org%2Fen%2Fdevelopers%2Fdocs%2Fdata-structures-and-encoding%2Fpatricia-merkle-trie%2F%23merkle-patricia-trees)%20and%20%60.%2FEthereumLightClient.sol%60._%0A%0A_Note%3A%20%60validateAndExecuteProof%60%20is%20responsible%20for%20creation%20of%20the%20BridgeTokens%20on%20the%20destination%20chain%20it%20does%20this%20by%20calling%20%60execute%60%20call%20in%20%60TokenLockerLocker.sol%60%20which%20then%20calls%20the%20function%20%60onTokenMapReqEvent%60%20in%20%60TokenRegistry.sol%60%20which%20creates%20a%20new%20Bridge%20Token%20%60BridgedToken%20mintAddress%20%3D%20new%20BridgedToken%7Bsalt%3A%20salt%7D()%3B%60%20and%20then%20initializes%20it.%20This%20uses%20%5B(RLP)%20Serialization%5D(https%3A%2F%2Fethereum.org%2Fen%2Fdevelopers%2Fdocs%2Fdata-structures-and-encoding%2Frlp%2F)_%0A%0A_Note%3A%20The%20shims%20in%20%60ethWeb3.js%60%20provide%20simplified%20functions%20for%20%60ContractAt%60%2C%20%60ContractDeploy%60%2C%20%60sendTx%60%20and%20%60addPrivateKey%60%20and%20have%20a%20constructor%20which%20uses%20%60process.env.PRIVATE_KEY%60._%0A%0A**Mapping%20the%20Tokens**%0A%0A%60%60%60%0A%23%20Map%20the%20Tokens%0A%23%20map%20%3CethUrl%3E%20%3CethBridge%3E%20%3ChmyUrl%3E%20%3ChmyBridge%3E%20%3Ctoken%3E%0Ayarn%20cli%20Bridge%20map%20http%3A%2F%2Flocalhost%3A8645%200x017f8C7d1Cb04dE974B8aC1a6B8d3d74bC74E7E1%20http%3A%2F%2Flocalhost%3A9500%200x017f8C7d1Cb04dE974B8aC1a6B8d3d74bC74E7E1%200x4e59AeD3aCbb0cb66AF94E893BEE7df8B414dAB1%0A%60%60%60%0A%0A**Implementation**%0A%0A-%20The%20CLI%20calls%20%60tokenMap%60%20in%20%60src%2Fbridge%2Fcontract.js%60%20to%0A%20%20-%20Instantiate%20the%20Ethereum%20Bridge%20and%20Harmony%20Bridge%20Contracts%0A%20%20-%20Calls%20%60TokenMap%60%20in%20%60scr%2Fbridge%2Fbridge.js%60%20to%0A%20%20%20%20-%20Issue%20a%20token%20Map%20request%20on%20Ethereum%20%60const%20mapReq%20%3D%20await%20src.IssueTokenMapReq(token)%60%0A%20%20%20%20-%20Acknowledge%20the%20Map%20Request%20on%20Harmony%20%60const%20mapAck%20%3D%20await%20Bridge.CrossRelayEthHmy(src%2C%20dest%2C%20mapReq)%60%0A%20%20%20%20-%20Issue%20a%20token%20Map%20request%20on%20Harmony%20%60return%20Bridge.CrossRelayHmyEth(dest%2C%20src%2C%20mapAck.transactionHash)%60%0A%0A**Here%20is%20the%20Logic%20(call%20execution%20overview)%20when%20Mapping%20Tokens%20across%20Chains.%20_NOTE%3A%20Currently%20mapping%20has%20only%20been%20developed%20from%20Ethereum%20to%20Harmony%20(not%20bi-directional)_.**%0A%0A1.%20Bridge%20Map%20is%20called%20in%20src.cli.index.js%20and%20it%20calls%20%60tokenMap%60%20in%20%60bridge%2Fcontract.js%60%20which%0A%20%20%20-%20Get%20srcBridge%20Contract%20on%20Ethereum%20%60TokenLockerOnEthereum.sol%60%20from%20%60ethBridge.js%60%20it%20also%20instantiates%20an%20%60eprover%60%20using%20%60tools%2Feprover%2Findex.js%60%20which%20calls%20%60txProof.js%60%20which%20uses%20%5Beth-proof%20npm%20package%5D(https%3A%2F%2Fwww.npmjs.com%2Fpackage%2Feth-proof).%20_Note%3A%20this%20is%20marked%20with%20a%20%2F%2FTODO%20need%20to%20test%20and%20develop%20proving%20logic%20on%20Harmony._%0A%20%20%20-%20Get%20destBridge%20Contract%20on%20Hamony%20%60TokenLockerOnHarmony.sol%60%20from%20%60hmyBridge.js%60%20it%20also%20instantiates%20an%20%60hprove%60%20using%20%60tools%2Feprover%2Findex.js%60%20which%20calls%20%60txProof.js%60%20which%20uses%20%5Beth-proof%20npm%20package%5D(https%3A%2F%2Fwww.npmjs.com%2Fpackage%2Feth-proof).%0A%20%20%20-%20calls%20%60TokenMap%60%20in%20%60bridge.js%60%0A2.%20%60TokenMap%60%20Calls%20IssueTokenMapReq%20(on%20the%20Ethreum%20Locker)%20returning%20the%20%60mapReq.transactionHash%60%0A%20%20%20-%20%60IssueTokenMapReq(token)%60%20is%20held%20in%20%60bridge.js%60%20as%20part%20of%20the%20bridge%20class%0A%20%20%20-%20It%20calls%20%60issueTokenMapReq%60%20on%20%60TokenLockerOnEthereum.sol%60%20which%20is%20implemented%20by%20%60TokenRegistry.sol%60%0A%20%20%20-%20%60issueTokenMapReq%60%20checks%20if%20the%20token%20has%20already%20been%20mapped%20if%20not%20it%20was%20emitting%20a%20%60TokenMapReq%60%20with%20the%20details%20of%20the%20token%20to%20be%20mapped.%20However%20this%20was%20commented%20out%20as%20it%20was%20felt%20that%2C%20if%20it%20has%20not%20been%20mapped%2C%20we%20use%20the%20%60transactionHash%60%20of%20the%20mapping%20request%60%20to%20drive%20the%20logic%20below%20(not%20the%20event).%0A3.%20%60TokenMap%60%20calls%20%60Bridge.CrossRelay%60%20with%20the%20IssueTokenMapReq.hash%20to%0A%20%20%20-%20gets%20the%20proof%20of%20the%20transaction%20on%20Ethereum%20via%20%60getProof%60%20calling%20%60prover.ReceiptProof%60%20which%20calls%20the%20eprover%20and%20returns%20%60proof%60%20with%0A%20%20%20%20%20-%20%60hash%3A%20sha3(resp.header.serialize())%2C%60%0A%20%20%20%20%20-%20%60root%3A%20resp.header.receiptRoot%2C%60%0A%20%20%20%20%20-%20%60proof%3A%20encode(resp.receiptProof)%2C%60%0A%20%20%20%20%20-%20%60key%3A%20encode(Number(resp.txIndex))%20%2F%2F%20'0x12'%20%3D%3E%20Nunmber%60%0A%20%20%20-%20We%20then%20call%20%60dest.ExecProof(proof)%60%20to%20execute%20the%20proof%20on%20Harmony%0A%20%20%20%20%20-%20This%20calls%20%60validateAndExecuteProof%60%20on%20%60TokenLockerOnHarmony.sol%60%20with%20the%20%60proofData%60%20from%20above%2C%20which%0A%20%20%20%20%20%20%20-%20requires%20%60lightclient.VerifyReceiptsHash(blockHash%2C%20rootHash)%2C%60%20implemented%20by%20%60.%2FEthereumLightClient.sol%60%0A%20%20%20%20%20%20%20%20%20-%20This%20returns%20%60return%20bytes32(blocks%5Buint256(blockHash)%5D.receiptsRoot)%20%3D%3D%20receiptsHash%3B%60%0A%20%20%20%20%20%20%20%20%20-%20**Which%20means%20the%20block%20has%20to%20be%20relayed%20first%2C%20as%20we%20have%20just%20executed%20the%20transaction%20the%20relayer%20usually%20has%20not%20relayed%20the%20block%20so%20this%20will%20fail**%0A%20%20%20%20%20%20%20-%20requires%20%60lightclient.isVerified(uint256(blockHash)%60%20implemented%20by%20%60.%2FEthereumLightClient.sol%60%0A%20%20%20%20%20%20%20%20%20-%20This%20returns%20%60return%20canonicalBlocks%5BblockHash%5D%20%26%26%20blocks%5BblockHash%5D.number%20%2B%2025%20%3C%20blocks%5BcanonicalHead%5D.number%3B%60%0A%20%20%20%20%20%20%20%20%20-%20**Which%20means%20there%20must%20be%20an%20additional%2025%20blocks%20on%20Ethereum%20before%20this%20can%20be%20processed.%20This%20logic%20needs%20to%20be%20rewritten%20to%20break%20down%20execution%20for%201.%20the%20ethereum%20mapping%20request%202.%20After%20a%2025%20block%20delay%20the%20Harmony%20Proof%20validation%20and%20executing%20the%20Harmony%20Mapping%20Request**%0A%20%20%20%20%20%20%20-%20%60require(spentReceipt%5BreceiptHash%5D%20%3D%3D%20false%2C%20%22double%20spent!%22)%3B%60%20to%20ensure%20that%20we%20haven't%20already%20executed%20this%20proof%0A%20%20%20%20%20%20%20-%20gets%20the%20%60rlpdata%60%20using%20%60EthereumProver.validateMPTProof%60%20implemented%20by%20%60EthereumProver.sol%60%20which%0A%20%20%20%20%20%20%20%20%20-%20Validates%20a%20Merkle-Patricia-Trie%20proof.%0A%20%20%20%20%20%20%20%20%20-%20Returns%20a%20value%20whose%20inclusion%20is%20proved%20or%20an%20empty%20byte%20array%20for%20a%20proof%20of%20exclusion%0A%20%20%20%20%20%20%20-%20marks%20%60spentReceipt%5BreceiptHash%5D%20%3D%20true%3B%60%0A%20%20%20%20%20%20%20-%20%60execute(rlpdata)%60%20implemented%20by%20%60TokenLocker.sol%60%20which%20calls%20%60onTokenMapReqEvent(topics%2C%20Data)%60%20implemented%20by%20%60TokenRegistry.sol%60%0A%20%20%20%20%20%20%20%20%20-%20%60address%20tokenReq%20%3D%20address(uint160(uint256(topics%5B1%5D)))%3B%60%20gets%20the%20address%20of%20the%20token%20to%20be%20mapped.%0A%20%20%20%20%20%20%20%20%20-%20require%20%60address(RxMapped%5BtokenReq%5D)%20%3D%3D%20address(0)%60%20that%20the%20token%20has%20not%20already%20been%20mapped.%0A%20%20%20%20%20%20%20%20%20-%20%60address(RxMapped%5BtokenReq%5D)%20%3D%3D%20address(0)%60%20creates%20a%20new%20BridgedToken%20implemented%20by%20%60BridgedToken.sol%60%0A%20%20%20%20%20%20%20%20%20%20%20-%20%60contract%20BridgedToken%20is%20ERC20Upgradeable%2C%20ERC20BurnableUpgradeable%2C%20OwnableUpgradeable%60%20it%20is%20a%20standard%20openzepplin%20ERC20%20Burnable%2C%20Ownable%2C%20Upgradeable%20token%0A%20%20%20%20%20%20%20%20%20-%20%60mintAddress.initialize%60%20initialize%20the%20token%20with%20the%20same%20%60name%60%2C%20%60symbol%60%20and%20%60decimals%60%20as%20the%20ethereum%20bridged%20token%0A%20%20%20%20%20%20%20%20%20-%20%60RxMappedInv%5Baddress(mintAddress)%5D%20%3D%20tokenReq%3B%60%20updates%20the%20inverse%20Key%20Value%20Mapping%0A%20%20%20%20%20%20%20%20%20-%20%60RxMapped%5BtokenReq%5D%20%3D%20mintAddress%3B%60%20updates%20the%20Ethereum%20mapped%20tokens%0A%20%20%20%20%20%20%20%20%20-%20%60RxTokens.push(mintAddress)%3B%60%20add%20the%20newly%20created%20token%20to%20a%20list%20of%20bridged%20tokens%0A%20%20%20%20%20%20%20%20%20-%20%60emit%20TokenMapAck(tokenReq%2C%20address(mintAddress))%3B%60%0A%20%20%20%20%20%20%20-%20%60require(executedEvents%20%3E%200%2C%20%22no%20valid%20event%22)%60%20to%20check%20if%20it%20executed%20the%20mapping%20correctly.%0A4.%20We%20then%20take%20the%20Harmony%20Mapping%20%60transactionHash%60%20and%20repeat%20the%20above%20process%20to%20prove%20the%20Harmony%20mapping%20acknowledgment%20on%20Ethereum%20(Cross%20Relay%20second%20call)%20%60return%20Bridge.CrossRelay(dest%2C%20src%2C%20mapAck.transactionHash)%3B%60%0A%0A-%20gets%20the%20proof%20of%20the%20transaction%20on%20Harmony%20via%20%60getProof%60%20calling%20%60prover.ReceiptProof%60%20which%20calls%20the%20eprover%20and%20returns%20%60proof%60%20with%0A%20%20_%60hash%3A%20sha3(resp.header.serialize())%2C%60%0A%20%20_%20%60root%3A%20resp.header.receiptRoot%2C%60%0A%20%20_%60proof%3A%20encode(resp.receiptProof)%2C%60%0A%20%20_%20%60key%3A%20encode(Number(resp.txIndex))%20%2F%2F%20'0x12'%20%3D%3E%20Nunmber%60%0A%20%20-%20We%20then%20call%20%60dest.ExecProof(proof)%60%20to%20execute%20the%20proof%20on%20Ethereum%0A%20%20%20%20-%20This%20calls%20%60validateAndExecuteProof%60%20on%20%60TokenLokerOnEthereum.sol%60%20with%20the%20%60proofData%60%20from%20above%2C%20which%0A%20%20%20%20%20%20-%20%60require(lightclient.isValidCheckPoint(header.epoch%2C%20mmrProof.root)%2C%60%20implemented%20by%20%60HarmonyLightClient.sol%60%0A%20%20%20%20%20%20%20%20-%20%60return%20epochMmrRoots%5Bepoch%5D%5BmmrRoot%5D%60%20which%20means%20that%20the%20epoch%20has%20to%20have%20had%20a%20checkpoint%20submitted%20via%20%60submitCheckpoint%60%0A%20%20%20%20%20%20-%20%60bytes32%20blockHash%20%3D%20HarmonyParser.getBlockHash(header)%3B%60%20gets%20the%20blockHash%20implemented%20by%20%60HarmonyParser.sol%60%0A%20%20%20%20%20%20%20%20-%20This%20returns%20%60return%20keccak256(getBlockRlpData(header))%3B%60%0A%20%20%20%20%20%20%20%20-%20%60getBlockRlpData%60%20creates%20a%20list%20%60bytes%5B%5D%20memory%20list%20%3D%20new%20bytes%5B%5D(15)%3B%60%20and%20uses%20statements%20like%20%60list%5B0%5D%20%3D%20RLPEncode.encodeBytes(abi.encodePacked(header.parentHash))%3B%60%20to%20perform%20%5BRecursive-Length%20Prefix%20(RLP)%20Serialization%5D(https%3A%2F%2Fethereum.org%2Fen%2Fdevelopers%2Fdocs%2Fdata-structures-and-encoding%2Frlp%2F)%20implemented%20by%20%60RLPEncode.sol%60%0A%20%20%20%20%20%20-%20%60HarmonyProver.verifyHeader(header%2C%20mmrProof)%3B%60%20verifys%20the%20header%20implemented%20by%20%60HarmonyProver.sol%60%0A%20%20%20%20%20%20%20%20-%20%60bytes32%20blockHash%20%3D%20HarmonyParser.getBlockHash(header)%3B%60%20gets%20the%20blockHash%20implemented%20by%20%60HarmonyParser.sol%60%20as%20above%0A%20%20%20%20%20%20%20%20-%20%60valid%20%3D%20MMRVerifier.inclusionProof(proof.root%2C%20proof.width%2C%20proof.index%2C%20blockHash%2C%20proof.peaks%2C%20proof.siblings)%3B%60%20verifys%20the%20proff%20using%20the%20%5BMerkle%20Mountain%20Range%20Proof%5D(https%3A%2F%2Fgithub.com%2Fopentimestamps%2Fopentimestamps-server%2Fblob%2Fmaster%2Fdoc%2Fmerkle-mountain-range.mdx)%20passed%20%60MMRVerifier.MMRProof%20memory%20proof%60%20and%20the%20%60blockHash%60.%0A%20%20%20%20%20%20%20%20-%20**NOTE%3A%20This%20means%20that%20a%20%60submitCheckpoint%60%20in%20%60HarmonyLightClient.sol%60%20needs%20to%20have%20called%20either%20for%20the%20next%20epoch%20or%20for%20a%20checkpoint%2C%20after%20the%20block%20the%20harmony%20mapping%20transaction%20was%20in.**%0A%20%20%20%20%20%20%20%20-%20**NOTE%3A%20Automatic%20submission%20of%20checkpoints%20to%20the%20Harmony%20Light%20Client%20has%20not%20been%20developed%20as%20yet.%20(It%20is%20not%20part%20of%20the%20%60ethRelay.js%60).%20And%20so%20the%20checkpoint%20would%20need%20to%20be%20manually%20submitted%20before%20the%20Ethereum%20Mapping%20could%20take%20place.**%0A%20%20%20%20%20%20-%20%60require(spentReceipt%5BreceiptHash%5D%20%3D%3D%20false%2C%20%22double%20spent!%22)%3B%60%20ensure%20that%20we%20haven't%20already%20processed%20this%20mapping%20request%60%0A%20%20%20%20%20%20-%20%60HarmonyProver.verifyReceipt(header%2C%20receiptdata)%60%20ensure%20the%20receiptdata%20is%20valid%0A%20%20%20%20%20%20-%20%60spentReceipt%5BreceiptHash%5D%20%3D%20true%3B%60%20marks%20the%20receipt%20as%20having%20been%20processed%0A%20%20%20%20%20%20-%20%60execute(receiptdata.expectedValue)%3B%60%20implemented%20by%20%60TokenLocker.sol%60%20which%20calls%20%60onTokenMapAckEvent(topics)%60%20implemented%20by%20%60TokenRegistry.sol%60%0A%20%20%20%20%20%20%20%20-%20%60address%20tokenReq%20%3D%20address(uint160(uint256(topics%5B1%5D)))%3B%60%0A%20%20%20%20%20%20%20%20-%20%60address%20tokenAck%20%3D%20address(uint160(uint256(topics%5B2%5D)))%3B%60%0A%20%20%20%20%20%20%20%20-%20%60require(TxMapped%5BtokenReq%5D%20%3D%3D%20address(0)%2C%20%22missing%20mapping%20to%20acknowledge%22)%3B%60%0A%20%20%20%20%20%20%20%20-%20%60TxMapped%5BtokenReq%5D%20%3D%20tokenAck%3B%60%0A%20%20%20%20%20%20%20%20-%20%60TxMappedInv%5BtokenAck%5D%20%3D%20IERC20Upgradeable(tokenReq)%3B%60%0A%20%20%20%20%20%20%20%20-%20%60TxTokens.push(IERC20Upgradeable(tokenReq))%3B%60%0A%0A5.%20Upon%20completion%20of%20tokenMap%20control%20is%20passed%20back%20to%20Bridge%20Map%20which%0A6.%20Calls%20TokenPair%20on%20Ethereum%0A7.%20Calls%20ethTokenInfo%20to%20get%20the%20status%20of%20the%20ERC20%0A8.%20Calls%20hmyTokenInfo%20to%20get%20the%20tokenStatus%20on%20Harmony%0A",lastUpdatedAt:1753129136e3},{lazy:()=>o2(()=>import("./Horizon-DQvUHMb4.js"),[]),path:"/research/code/Horizon.html",type:"mdx",filePath:"research/code/Horizon.mdx",content:"%23%20Horizon%20Bridge%0A%0A-%20date%3A%202023-02-04%0A-%20last%20updated%3A%202023-02-04%0A%0A%23%23%20Overview%0A%0AThis%20document%20reviews%20the%20%5Bhorizon%5D(https%3A%2F%2Fgithub.com%2Fjohnwhitton%2Fhorizon%2Ftree%2FrefactorV2)%20current%20implementation%2C%20development%20tasks%20that%20need%20to%20be%20done%20to%20support%20POW%20and%20offers%20some%20thoughts%20on%20next%20steps%20to%20support%20Ethereum%202.0%20and%20other%20chains.%0A%0AFurther%20thoughts%20on%20ETH%202.0%20support%2C%20removing%20the%20ETHHASH%20logic%20and%20SPV%20client%20and%20potentially%20replacing%20with%20MMR%20trees%20per%20epoch%20and%20checkpoints%20similar%20to%20Harmony%20Light%20Client%20on%20Ethereum%2C%20can%20be%20found%20%5Bhere%5D(%2Fresearch%2Fchains%2Fethereum.mdx).%0A%0A%23%23%20Next%20Steps%0A%0AFollowing%20are%20some%20of%20the%20improvements%20needed%20broken%20down%20by%20functional%20areas.%0A%0A%23%23%23%20Ethereum%20Light%20Client%0A%0A1.%20ETH%202.0%20support%20see%20%5Bhere%5D(%2Fresearch%2Fchains%2Fethereum.mdx)%0A2.%20Queuing%20mechanism%20should%20be%20implemented%20to%20queue%20bridge%20transactions.%20The%20queue%20can%20be%20polled%20as%20part%20of%20the%20block%20relay%20functionality%20to%20process%20bridge%20transactions%20once%20the%20blocks%20have%20been%20relayed.%0A3.%20Consider%20whether%20we%20can%20use%20p2p%20messaging%20to%20receive%20published%20blocks%20rather%20than%20looping%20and%20polling%20via%20an%20RPC.%0A%0A%23%23%23%20Harmony%20Light%20Client%0A%0A1.%20Needs%20to%20implement%20a%20process%20to%20%60submitCheckpoint%60.%0A2.%20%60eprove%60%20logic%20needs%20to%20be%20reviewed%0A3.%20Queuing%20mechanism%20should%20be%20implemented%20to%20queue%20bridge%20transactions.%20The%20queue%20can%20be%20polled%20as%20part%20of%20the%20%60submitCheckpoint%60%20functionality%20to%20process%20bridge%20transactions%20once%20the%20blocks%20have%20been%20relayed.%0A4.%20Need%20to%20facilitate%20the%20core%20protocol%20%5BMMR%20enhancements%20PR%5D(https%3A%2F%2Fgithub.com%2Fharmony-one%2Fharmony%2Fpull%2F4198%2Ffiles)%0A%0A%23%23%23%20Transaction%20Sequencing%0A%0ASequencing%20of%20Transactions%3A%20Needs%20to%20be%20implemented%20and%20%60TokenMap%60%20in%20%60bridge.js%60%20needs%20to%20be%20refactored.%20Below%20is%20the%20current%20sequence%20flow%20and%20areas%20for%20improvements.%0A%0A1.%20Ethereum%20Mapping%20Request%0A2.%20Relay%20of%20Block%20to%20EthereumLightClient.sol%20on%20Harmony%0A%20%20%20-%20The%20block%20has%20to%20be%20relayed%20before%20we%20can%20process%20the%20Harmony%20Mapping%20request%2C%20as%20we%20have%20just%20executed%20the%20transaction%20the%20relayer%20usually%20has%20not%20relayed%20the%20block%20so%20this%20will%20fail.%0A%20%20%20-%20There%20must%20be%20an%20additional%2025%20blocks%20on%20Ethereum%20before%20this%20block%20can%20be%20considered%20part%20of%20the%20canonical%20chain.%0A%20%20%20-%20This%20logic%20needs%20to%20be%20rewritten%20to%20break%20down%20execution%20for%201.%20the%20ethereum%20mapping%20request%202.%20After%20a%2025%20block%20delay%20the%20Harmony%20Proof%20validation%20and%20executing%20the%20Harmony%20Mapping%20Request%5C*%5C*%0A3.%20Harmony%20Mapping%20Request%0A4.%20Relay%20of%20Checkpoint%20to%20HarmonyLightClient.sol%20on%20Ethereum%0A%20%20%20-%20A%20%60submitCheckpoint%60%20in%20%60HarmonyLightClient.sol%60%20needs%20to%20have%20called%20either%20for%20the%20next%20epoch%20or%20for%20a%20checkpoint%2C%20after%20the%20block%20the%20harmony%20mapping%20transaction%20was%20in.%5C*%5C*%0A%20%20%20-%20Automatic%20submission%20of%20checkpoints%20to%20the%20Harmony%20Light%20Client%20has%20not%20been%20developed%20as%20yet.%20(It%20is%20not%20part%20of%20the%20%60ethRelay.js%60).%20And%20so%20the%20checkpoint%20would%20need%20to%20be%20manually%20submitted%20before%20the%20Ethereum%20Mapping%20could%20take%20place.%0A5.%20Etherem%20Process%20Harmony%20Mapping%20Acknowledgement%0A%0A%23%23%23%20Bridge%20Functionality%0A%0A1.%20Need%20to%20support%20mapping%20Harmony%20Tokens%20to%20Ethereum%0A%0A%23%23%23%20MultiChain%20Support%0A%0A1.%20Need%20to%20support%20other%20chains%0A%20%20%20-%20EVM%3A%20BSC%2C%20Polygon%2C%20Avalanche%2C%20Arbitrum%2C%20Optimism%0A%20%20%20-%20Bitcoin%0A%20%20%20-%20NEAR%0A%20%20%20-%20Solana%0A%20%20%20-%20Polkadot%0A2.%20Links%20to%20initial%20Design%20thoughs%20including%20reviews%20of%20cross%20chain%20messaging%20protocols%20and%20other%20multichain%20bridges%20can%20be%20found%20in%20Multichain%20Trustless%20Bridge%20%3A%20Draft.%0A%0A%23%23%20Current%20Implementation%20Walkthough%0A%0AFollowing%20is%20a%20detailed%20walk%20though%20of%20the%20current%20implementation%20of%20the%20Ethereum%20Light%20Client%20and%20the%20flow%20for%20mapping%20tokens%20from%20Ethereum%20to%20Harmony.%0A%0A%23%23%20Ethereum%20Light%20Client%20(on%20Harmony)%0A%0A**Design**%0AExisting%20Design%0A%0A1.%20DAG%20is%20generated%20for%20each%20Ethereum%20EPOCH%3A%20This%20takes%20a%20couple%20of%20hours%20and%20has%20a%20size%20of%20approx%201GB.%0A2.%20Relayer%20is%20run%20to%20replicate%20each%20block%20header%20to%20the%20SPV%20Client%20on%20Harmony.%0A3.%20EthereumLightClient.sol%20addBlockHeader%3A%20Adds%20each%20block%20header%20to%20the%20Ethereum%20Light%20Client.%0A4.%20Transactions%20are%20Verified%0A%0A**Running%20the%20Relayer**%0A%0A%60%60%60%0A%23%20Start%20the%20relayer%20(note%3A%20replace%20the%20etherum%20light%20client%20address%20below)%0A%23%20relay%20%5Boptions%5D%20%3CethUrl%3E%20%3ChmyUrl%3E%20%3CelcAddress%3E%20%20%20relay%20eth%20block%20header%20to%20elc%20on%20hmy%0A%20yarn%20cli%20ethRelay%20relay%20http%3A%2F%2Flocalhost%3A8645%20http%3A%2F%2Flocalhost%3A9500%200x3Ceb74A902dc5fc11cF6337F68d04cB834AE6A22%0A%60%60%60%0A%0A**Implementation**%0A%0A1.%20DAG%20Generation%20can%20be%20done%20explicity%20by%20calling%20%60dagProve%60%20from%20the%20CLI%20or%20it%20is%20done%20automatically%20by%20%60getHeaderProof%60%20in%20%60ethHashProof%2FBlockProof.js%60%20which%20is%20called%20from%20%60blockRelay%60%20in%20%60cli%2FethRelay.js%60.%0A2.%20Relaying%20of%20Block%20Headers%20is%20done%20by%20%60blockRelayLoop%60%20in%20%60cli%2FethRelay.js%60%20which%0A%20%20%20-%20Reads%20the%20last%20block%20header%20from%20EthereumLightClient.sol%0A%20%20%20-%20Loops%20through%20calling%20an%20Ethereum%20RPC%20per%20block%20to%20retrieve%20the%20blockHeader%20using%20%60return%20eth.getBlock(blockNo).then(fromRPC)%60%20in%20function%20%60getBlockByNumber%60%20in%20%60eth2hmy-relay%2FgetBlockHeader.js%60%0A3.%20Adding%20BlockHeaders%20is%20done%20by%20%60await%20elc.addBlockHeader(rlpHeader%2C%20proofs.dagData%2C%20proofs.proofs)%60%20which%20is%20called%20from%20%60cli%2FethRelay.js%60.%20%60addBlockHeader%60%20in%20%60EthereumLightClient.sol%60%0A%20%20%20-%20calculates%20the%20blockHeader%20Hash%0A%20%20%20-%20and%20checks%20that%20it%0A%20%20%20%20%20-%20hasn't%20already%20been%20relayed%2C%0A%20%20%20%20%20-%20is%20the%20next%20block%20to%20be%20added%2C%0A%20%20%20%20%20-%20has%20a%20valid%20timestamp%0A%20%20%20%20%20-%20has%20a%20valid%20difficulty%0A%20%20%20%20%20-%20has%20a%20valid%20Proof%20of%20Work%20(POW)%0A%20%20%20-%20Check%20if%20the%20canonical%20chain%20needs%20to%20be%20replaced%20by%20another%20fork%0A%0A%23%23%23%20Mapping%20Tokens%20(Ethereum%20to%20Harmony)%0A%0A**Design**%0A%0A1.%20If%20the%20Token%20Has%20not%20already%20been%20mapped%20on%20Harmony%0A%20%20%20-%20Harmony%3A%20Create%20an%20ERC20%20Token%0A%20%20%20-%20Harmony%3A%20Map%20the%20Ethereum%20Token%20to%20the%20new%20ERC20%20Contract%0A%20%20%20-%20Ethereum%3A%20Validate%20the%20Harmony%20Mapping%20Transaction%0A%20%20%20-%20Ethereum%3A%20Map%20the%20Harmony%20ERC20%20token%20to%20the%20existing%20Ethereum%20Token%0A%20%20%20-%20Harmony%3A%20Validate%20the%20Ethereum%20mapping%20Transaction%0A%0A_Note%3A%20The%20key%20difference%20between%20%60TokenLockerOnEthereum.sol%60%20and%20%60TokenLockerOnHarmony.sol%60%20is%20the%20proof%20validation.%20%60TokenLockerOnEthereum.sol%60%20uses%20%60.%2Flib%2FMMRVerifier.sol%60%20to%20validate%20the%20%5BMountain%20Merkle%20Ranges%5D(https%3A%2F%2Fgithub.com%2Fopentimestamps%2Fopentimestamps-server%2Fblob%2Fmaster%2Fdoc%2Fmerkle-mountain-range.mdx)%20on%20Harmony%20and%20%60HarmonyProver.sol%60.%20%60TokenLockerOnHarmony.sol%60%20imports%20%60.%2Flib%2FMPTValidatorV2.sol%60%20to%20validate%20%5BMerkle%20Patrica%20Trie%5D(https%3A%2F%2Fethereum.org%2Fen%2Fdevelopers%2Fdocs%2Fdata-structures-and-encoding%2Fpatricia-merkle-trie%2F%23merkle-patricia-trees)%20and%20%60.%2FEthereumLightClient.sol%60._%0A%0A_Note%3A%20%60validateAndExecuteProof%60%20is%20responsible%20for%20creation%20of%20the%20BridgeTokens%20on%20the%20destination%20chain%20it%20does%20this%20by%20calling%20%60execute%60%20call%20in%20%60TokenLockerLocker.sol%60%20which%20then%20calls%20the%20function%20%60onTokenMapReqEvent%60%20in%20%60TokenRegistry.sol%60%20which%20creates%20a%20new%20Bridge%20Token%20%60BridgedToken%20mintAddress%20%3D%20new%20BridgedToken%7Bsalt%3A%20salt%7D()%3B%60%20and%20then%20initializes%20it.%20This%20uses%20%5B(RLP)%20Serialization%5D(https%3A%2F%2Fethereum.org%2Fen%2Fdevelopers%2Fdocs%2Fdata-structures-and-encoding%2Frlp%2F)_%0A%0A_Note%3A%20The%20shims%20in%20%60ethWeb3.js%60%20provide%20simplified%20functions%20for%20%60ContractAt%60%2C%20%60ContractDeploy%60%2C%20%60sendTx%60%20and%20%60addPrivateKey%60%20and%20have%20a%20constructor%20which%20uses%20%60process.env.PRIVATE_KEY%60._%0A%0A**Mapping%20the%20Tokens**%0A%0A%60%60%60%0A%23%20Map%20the%20Tokens%0A%23%20map%20%3CethUrl%3E%20%3CethBridge%3E%20%3ChmyUrl%3E%20%3ChmyBridge%3E%20%3Ctoken%3E%0Ayarn%20cli%20Bridge%20map%20http%3A%2F%2Flocalhost%3A8645%200x017f8C7d1Cb04dE974B8aC1a6B8d3d74bC74E7E1%20http%3A%2F%2Flocalhost%3A9500%200x017f8C7d1Cb04dE974B8aC1a6B8d3d74bC74E7E1%200x4e59AeD3aCbb0cb66AF94E893BEE7df8B414dAB1%0A%60%60%60%0A%0A**Implementation**%0A%0A-%20The%20CLI%20calls%20%60tokenMap%60%20in%20%60src%2Fbridge%2Fcontract.js%60%20to%0A%20%20-%20Instantiate%20the%20Ethereum%20Bridge%20and%20Harmony%20Bridge%20Contracts%0A%20%20-%20Calls%20%60TokenMap%60%20in%20%60scr%2Fbridge%2Fbridge.js%60%20to%0A%20%20%20%20-%20Issue%20a%20token%20Map%20request%20on%20Ethereum%20%60const%20mapReq%20%3D%20await%20src.IssueTokenMapReq(token)%60%0A%20%20%20%20-%20Acknowledge%20the%20Map%20Request%20on%20Harmony%20%60const%20mapAck%20%3D%20await%20Bridge.CrossRelayEthHmy(src%2C%20dest%2C%20mapReq)%60%0A%20%20%20%20-%20Issue%20a%20token%20Map%20request%20on%20Harmony%20%60return%20Bridge.CrossRelayHmyEth(dest%2C%20src%2C%20mapAck.transactionHash)%60%0A%0A**Here%20is%20the%20Logic%20(call%20execution%20overview)%20when%20Mapping%20Tokens%20across%20Chains.%20_NOTE%3A%20Currently%20mapping%20has%20only%20been%20developed%20from%20Ethereum%20to%20Harmony%20(not%20bi-directional)_.**%0A%0A1.%20Bridge%20Map%20is%20called%20in%20src.cli.index.js%20and%20it%20calls%20%60tokenMap%60%20in%20%60bridge%2Fcontract.js%60%20which%0A%20%20%20-%20Get%20srcBridge%20Contract%20on%20Ethereum%20%60TokenLockerOnEthereum.sol%60%20from%20%60ethBridge.js%60%20it%20also%20instantiates%20an%20%60eprover%60%20using%20%60tools%2Feprover%2Findex.js%60%20which%20calls%20%60txProof.js%60%20which%20uses%20%5Beth-proof%20npm%20package%5D(https%3A%2F%2Fwww.npmjs.com%2Fpackage%2Feth-proof).%20_Note%3A%20this%20is%20marked%20with%20a%20%2F%2FTODO%20need%20to%20test%20and%20develop%20proving%20logic%20on%20Harmony._%0A%20%20%20-%20Get%20destBridge%20Contract%20on%20Hamony%20%60TokenLockerOnHarmony.sol%60%20from%20%60hmyBridge.js%60%20it%20also%20instantiates%20an%20%60hprove%60%20using%20%60tools%2Feprover%2Findex.js%60%20which%20calls%20%60txProof.js%60%20which%20uses%20%5Beth-proof%20npm%20package%5D(https%3A%2F%2Fwww.npmjs.com%2Fpackage%2Feth-proof).%0A%20%20%20-%20calls%20%60TokenMap%60%20in%20%60bridge.js%60%0A2.%20%60TokenMap%60%20Calls%20IssueTokenMapReq%20(on%20the%20Ethreum%20Locker)%20returning%20the%20%60mapReq.transactionHash%60%0A%20%20%20-%20%60IssueTokenMapReq(token)%60%20is%20held%20in%20%60bridge.js%60%20as%20part%20of%20the%20bridge%20class%0A%20%20%20-%20It%20calls%20%60issueTokenMapReq%60%20on%20%60TokenLockerOnEthereum.sol%60%20which%20is%20implemented%20by%20%60TokenRegistry.sol%60%0A%20%20%20-%20%60issueTokenMapReq%60%20checks%20if%20the%20token%20has%20already%20been%20mapped%20if%20not%20it%20was%20emitting%20a%20%60TokenMapReq%60%20with%20the%20details%20of%20the%20token%20to%20be%20mapped.%20However%20this%20was%20commented%20out%20as%20it%20was%20felt%20that%2C%20if%20it%20has%20not%20been%20mapped%2C%20we%20use%20the%20%60transactionHash%60%20of%20the%20mapping%20request%60%20to%20drive%20the%20logic%20below%20(not%20the%20event).%0A3.%20%60TokenMap%60%20calls%20%60Bridge.CrossRelay%60%20with%20the%20IssueTokenMapReq.hash%20to%0A%20%20%20-%20gets%20the%20proof%20of%20the%20transaction%20on%20Ethereum%20via%20%60getProof%60%20calling%20%60prover.ReceiptProof%60%20which%20calls%20the%20eprover%20and%20returns%20%60proof%60%20with%0A%20%20%20%20%20-%20%60hash%3A%20sha3(resp.header.serialize())%2C%60%0A%20%20%20%20%20-%20%60root%3A%20resp.header.receiptRoot%2C%60%0A%20%20%20%20%20-%20%60proof%3A%20encode(resp.receiptProof)%2C%60%0A%20%20%20%20%20-%20%60key%3A%20encode(Number(resp.txIndex))%20%2F%2F%20'0x12'%20%3D%3E%20Nunmber%60%0A%20%20%20-%20We%20then%20call%20%60dest.ExecProof(proof)%60%20to%20execute%20the%20proof%20on%20Harmony%0A%20%20%20%20%20-%20This%20calls%20%60validateAndExecuteProof%60%20on%20%60TokenLockerOnHarmony.sol%60%20with%20the%20%60proofData%60%20from%20above%2C%20which%0A%20%20%20%20%20%20%20-%20requires%20%60lightclient.VerifyReceiptsHash(blockHash%2C%20rootHash)%2C%60%20implemented%20by%20%60.%2FEthereumLightClient.sol%60%0A%20%20%20%20%20%20%20%20%20-%20This%20returns%20%60return%20bytes32(blocks%5Buint256(blockHash)%5D.receiptsRoot)%20%3D%3D%20receiptsHash%3B%60%0A%20%20%20%20%20%20%20%20%20-%20**Which%20means%20the%20block%20has%20to%20be%20relayed%20first%2C%20as%20we%20have%20just%20executed%20the%20transaction%20the%20relayer%20usually%20has%20not%20relayed%20the%20block%20so%20this%20will%20fail**%0A%20%20%20%20%20%20%20-%20requires%20%60lightclient.isVerified(uint256(blockHash)%60%20implemented%20by%20%60.%2FEthereumLightClient.sol%60%0A%20%20%20%20%20%20%20%20%20-%20This%20returns%20%60return%20canonicalBlocks%5BblockHash%5D%20%26%26%20blocks%5BblockHash%5D.number%20%2B%2025%20%3C%20blocks%5BcanonicalHead%5D.number%3B%60%0A%20%20%20%20%20%20%20%20%20-%20**Which%20means%20there%20must%20be%20an%20additional%2025%20blocks%20on%20Ethereum%20before%20this%20can%20be%20processed.%20This%20logic%20needs%20to%20be%20rewritten%20to%20break%20down%20execution%20for%201.%20the%20ethereum%20mapping%20request%202.%20After%20a%2025%20block%20delay%20the%20Harmony%20Proof%20validation%20and%20executing%20the%20Harmony%20Mapping%20Request**%0A%20%20%20%20%20%20%20-%20%60require(spentReceipt%5BreceiptHash%5D%20%3D%3D%20false%2C%20%22double%20spent!%22)%3B%60%20to%20ensure%20that%20we%20haven't%20already%20executed%20this%20proof%0A%20%20%20%20%20%20%20-%20gets%20the%20%60rlpdata%60%20using%20%60EthereumProver.validateMPTProof%60%20implemented%20by%20%60EthereumProver.sol%60%20which%0A%20%20%20%20%20%20%20%20%20-%20Validates%20a%20Merkle-Patricia-Trie%20proof.%0A%20%20%20%20%20%20%20%20%20-%20Returns%20a%20value%20whose%20inclusion%20is%20proved%20or%20an%20empty%20byte%20array%20for%20a%20proof%20of%20exclusion%0A%20%20%20%20%20%20%20-%20marks%20%60spentReceipt%5BreceiptHash%5D%20%3D%20true%3B%60%0A%20%20%20%20%20%20%20-%20%60execute(rlpdata)%60%20implemented%20by%20%60TokenLocker.sol%60%20which%20calls%20%60onTokenMapReqEvent(topics%2C%20Data)%60%20implemented%20by%20%60TokenRegistry.sol%60%0A%20%20%20%20%20%20%20%20%20-%20%60address%20tokenReq%20%3D%20address(uint160(uint256(topics%5B1%5D)))%3B%60%20gets%20the%20address%20of%20the%20token%20to%20be%20mapped.%0A%20%20%20%20%20%20%20%20%20-%20require%20%60address(RxMapped%5BtokenReq%5D)%20%3D%3D%20address(0)%60%20that%20the%20token%20has%20not%20already%20been%20mapped.%0A%20%20%20%20%20%20%20%20%20-%20%60address(RxMapped%5BtokenReq%5D)%20%3D%3D%20address(0)%60%20creates%20a%20new%20BridgedToken%20implemented%20by%20%60BridgedToken.sol%60%0A%20%20%20%20%20%20%20%20%20%20%20-%20%60contract%20BridgedToken%20is%20ERC20Upgradeable%2C%20ERC20BurnableUpgradeable%2C%20OwnableUpgradeable%60%20it%20is%20a%20standard%20openzepplin%20ERC20%20Burnable%2C%20Ownable%2C%20Upgradeable%20token%0A%20%20%20%20%20%20%20%20%20-%20%60mintAddress.initialize%60%20initialize%20the%20token%20with%20the%20same%20%60name%60%2C%20%60symbol%60%20and%20%60decimals%60%20as%20the%20ethereum%20bridged%20token%0A%20%20%20%20%20%20%20%20%20-%20%60RxMappedInv%5Baddress(mintAddress)%5D%20%3D%20tokenReq%3B%60%20updates%20the%20inverse%20Key%20Value%20Mapping%0A%20%20%20%20%20%20%20%20%20-%20%60RxMapped%5BtokenReq%5D%20%3D%20mintAddress%3B%60%20updates%20the%20Ethereum%20mapped%20tokens%0A%20%20%20%20%20%20%20%20%20-%20%60RxTokens.push(mintAddress)%3B%60%20add%20the%20newly%20created%20token%20to%20a%20list%20of%20bridged%20tokens%0A%20%20%20%20%20%20%20%20%20-%20%60emit%20TokenMapAck(tokenReq%2C%20address(mintAddress))%3B%60%0A%20%20%20%20%20%20%20-%20%60require(executedEvents%20%3E%200%2C%20%22no%20valid%20event%22)%60%20to%20check%20if%20it%20executed%20the%20mapping%20correctly.%0A4.%20We%20then%20take%20the%20Harmony%20Mapping%20%60transactionHash%60%20and%20repeat%20the%20above%20process%20to%20prove%20the%20Harmony%20mapping%20acknowledgment%20on%20Ethereum%20(Cross%20Relay%20second%20call)%20%60return%20Bridge.CrossRelay(dest%2C%20src%2C%20mapAck.transactionHash)%3B%60%0A%0A-%20gets%20the%20proof%20of%20the%20transaction%20on%20Harmony%20via%20%60getProof%60%20calling%20%60prover.ReceiptProof%60%20which%20calls%20the%20eprover%20and%20returns%20%60proof%60%20with%0A%20%20_%60hash%3A%20sha3(resp.header.serialize())%2C%60%0A%20%20_%20%60root%3A%20resp.header.receiptRoot%2C%60%0A%20%20_%60proof%3A%20encode(resp.receiptProof)%2C%60%0A%20%20_%20%60key%3A%20encode(Number(resp.txIndex))%20%2F%2F%20'0x12'%20%3D%3E%20Nunmber%60%0A%20%20-%20We%20then%20call%20%60dest.ExecProof(proof)%60%20to%20execute%20the%20proof%20on%20Ethereum%0A%20%20%20%20-%20This%20calls%20%60validateAndExecuteProof%60%20on%20%60TokenLokerOnEthereum.sol%60%20with%20the%20%60proofData%60%20from%20above%2C%20which%0A%20%20%20%20%20%20-%20%60require(lightclient.isValidCheckPoint(header.epoch%2C%20mmrProof.root)%2C%60%20implemented%20by%20%60HarmonyLightClient.sol%60%0A%20%20%20%20%20%20%20%20-%20%60return%20epochMmrRoots%5Bepoch%5D%5BmmrRoot%5D%60%20which%20means%20that%20the%20epoch%20has%20to%20have%20had%20a%20checkpoint%20submitted%20via%20%60submitCheckpoint%60%0A%20%20%20%20%20%20-%20%60bytes32%20blockHash%20%3D%20HarmonyParser.getBlockHash(header)%3B%60%20gets%20the%20blockHash%20implemented%20by%20%60HarmonyParser.sol%60%0A%20%20%20%20%20%20%20%20-%20This%20returns%20%60return%20keccak256(getBlockRlpData(header))%3B%60%0A%20%20%20%20%20%20%20%20-%20%60getBlockRlpData%60%20creates%20a%20list%20%60bytes%5B%5D%20memory%20list%20%3D%20new%20bytes%5B%5D(15)%3B%60%20and%20uses%20statements%20like%20%60list%5B0%5D%20%3D%20RLPEncode.encodeBytes(abi.encodePacked(header.parentHash))%3B%60%20to%20perform%20%5BRecursive-Length%20Prefix%20(RLP)%20Serialization%5D(https%3A%2F%2Fethereum.org%2Fen%2Fdevelopers%2Fdocs%2Fdata-structures-and-encoding%2Frlp%2F)%20implemented%20by%20%60RLPEncode.sol%60%0A%20%20%20%20%20%20-%20%60HarmonyProver.verifyHeader(header%2C%20mmrProof)%3B%60%20verifys%20the%20header%20implemented%20by%20%60HarmonyProver.sol%60%0A%20%20%20%20%20%20%20%20-%20%60bytes32%20blockHash%20%3D%20HarmonyParser.getBlockHash(header)%3B%60%20gets%20the%20blockHash%20implemented%20by%20%60HarmonyParser.sol%60%20as%20above%0A%20%20%20%20%20%20%20%20-%20%60valid%20%3D%20MMRVerifier.inclusionProof(proof.root%2C%20proof.width%2C%20proof.index%2C%20blockHash%2C%20proof.peaks%2C%20proof.siblings)%3B%60%20verifys%20the%20proff%20using%20the%20%5BMerkle%20Mountain%20Range%20Proof%5D(https%3A%2F%2Fgithub.com%2Fopentimestamps%2Fopentimestamps-server%2Fblob%2Fmaster%2Fdoc%2Fmerkle-mountain-range.mdx)%20passed%20%60MMRVerifier.MMRProof%20memory%20proof%60%20and%20the%20%60blockHash%60.%0A%20%20%20%20%20%20%20%20-%20**NOTE%3A%20This%20means%20that%20a%20%60submitCheckpoint%60%20in%20%60HarmonyLightClient.sol%60%20needs%20to%20have%20called%20either%20for%20the%20next%20epoch%20or%20for%20a%20checkpoint%2C%20after%20the%20block%20the%20harmony%20mapping%20transaction%20was%20in.**%0A%20%20%20%20%20%20%20%20-%20**NOTE%3A%20Automatic%20submission%20of%20checkpoints%20to%20the%20Harmony%20Light%20Client%20has%20not%20been%20developed%20as%20yet.%20(It%20is%20not%20part%20of%20the%20%60ethRelay.js%60).%20And%20so%20the%20checkpoint%20would%20need%20to%20be%20manually%20submitted%20before%20the%20Ethereum%20Mapping%20could%20take%20place.**%0A%20%20%20%20%20%20-%20%60require(spentReceipt%5BreceiptHash%5D%20%3D%3D%20false%2C%20%22double%20spent!%22)%3B%60%20ensure%20that%20we%20haven't%20already%20processed%20this%20mapping%20request%60%0A%20%20%20%20%20%20-%20%60HarmonyProver.verifyReceipt(header%2C%20receiptdata)%60%20ensure%20the%20receiptdata%20is%20valid%0A%20%20%20%20%20%20-%20%60spentReceipt%5BreceiptHash%5D%20%3D%20true%3B%60%20marks%20the%20receipt%20as%20having%20been%20processed%0A%20%20%20%20%20%20-%20%60execute(receiptdata.expectedValue)%3B%60%20implemented%20by%20%60TokenLocker.sol%60%20which%20calls%20%60onTokenMapAckEvent(topics)%60%20implemented%20by%20%60TokenRegistry.sol%60%0A%20%20%20%20%20%20%20%20-%20%60address%20tokenReq%20%3D%20address(uint160(uint256(topics%5B1%5D)))%3B%60%0A%20%20%20%20%20%20%20%20-%20%60address%20tokenAck%20%3D%20address(uint160(uint256(topics%5B2%5D)))%3B%60%0A%20%20%20%20%20%20%20%20-%20%60require(TxMapped%5BtokenReq%5D%20%3D%3D%20address(0)%2C%20%22missing%20mapping%20to%20acknowledge%22)%3B%60%0A%20%20%20%20%20%20%20%20-%20%60TxMapped%5BtokenReq%5D%20%3D%20tokenAck%3B%60%0A%20%20%20%20%20%20%20%20-%20%60TxMappedInv%5BtokenAck%5D%20%3D%20IERC20Upgradeable(tokenReq)%3B%60%0A%20%20%20%20%20%20%20%20-%20%60TxTokens.push(IERC20Upgradeable(tokenReq))%3B%60%0A%0A5.%20Upon%20completion%20of%20tokenMap%20control%20is%20passed%20back%20to%20Bridge%20Map%20which%0A6.%20Calls%20TokenPair%20on%20Ethereum%0A7.%20Calls%20ethTokenInfo%20to%20get%20the%20status%20of%20the%20ERC20%0A8.%20Calls%20hmyTokenInfo%20to%20get%20the%20tokenStatus%20on%20Harmony%0A",lastUpdatedAt:1753129136e3},{lazy:()=>o2(()=>import("./ethereum-near-iiX1rCdG.js"),[]),path:"/research/code/ethereum-near",type:"mdx",filePath:"research/code/ethereum-near.mdx",content:"%23%20Ethereum%20Near%20Bridging%0A%0A-%20date%3A%202023-02-04%0A-%20last%20updated%3A%202023-02-04%0A%0A%23%23%20Overview%0A%0AThis%20document%20reviews%20the%20Ethereum%202.0%20specifications%20including%20Light%20Client%20specifications.%20It%20does%20a%20detailed%20review%20of%20the%20NEAR%20Rainbow%20Bridge%20implementation%20and%20also%20includes%20references%20to%20Harmony's%20design%20to%20support%20Mountain%20Merkle%20Ranges.%0A%0AKey%20differences%20in%20supporting%20Ethereum%202.0%20(Proof%20of%20Stake)%20vs%20Proof%20of%20Work%20involves%20removing%20the%20ETHHASH%20logic%20and%20SPV%20client%20and%20potentially%20replacing%20with%20MMR%20trees%20per%20epoch%20and%20checkpoints%20similar%20to%20Harmony%20Light%20Client%20on%20Ethereum.%0A%0A%23%23%20Ethereum%202.0%20Specifications%0A%0A-%20%5BBeacon%20Chain%20Specification%5D(https%3A%2F%2Fgithub.com%2Fethereum%2Fconsensus-specs%2Fblob%2Fmaster%2Fspecs%2Fphase0%2Fbeacon-chain.mdx)%0A-%20%5BExtended%20light%20client%20protocol%5D(https%3A%2F%2Fnotes.ethereum.org%2F%40vbuterin%2Fextended_light_client_protocol)%0A-%20%5BAltair%20Light%20Client%20--%20Light%20Client%5D(https%3A%2F%2Fgithub.com%2Fethereum%2Fconsensus-specs%2Fblob%2Fdev%2Fspecs%2Faltair%2Flight-client%2Flight-client.mdx)%0A-%20%5BAltair%20Light%20Client%20--%20Sync%20Protocol%5D(https%3A%2F%2Fgithub.com%2Fethereum%2Fconsensus-specs%2Fblob%2Fdev%2Fspecs%2Faltair%2Flight-client%2Fsync-protocol.mdx)%0A-%20%5BBeacon%20Chain%20Fork%20Choice%5D(https%3A%2F%2Fgithub.com%2Fethereum%2Fconsensus-specs%2Fblob%2Fdev%2Fspecs%2Fphase0%2Ffork-choice.mdx)%0A%0A%23%23%20Ethereum%202.0%20Light%20Client%20Support%0A%0AHow%20light%20client%20implementation%20and%20verification%20of%20ETH%20and%20ETH2%20can%20be%20done%20via%20smart%20contracts%20in%20other%20protocols.%0A%0AFor%20this%20we%20review%20three%20Key%20items%0A%0A1.%20Light%20Client%20Specifications%20including%20%5BExtended%20light%20client%20protocol%5D(https%3A%2F%2Fnotes.ethereum.org%2F%40vbuterin%2Fextended_light_client_protocol)%20described%20by%20%5BAltair%20Light%20Client%20--%20Sync%20Protocol%5D(https%3A%2F%2Fgithub.com%2Fethereum%2Fconsensus-specs%2Fblob%2Fdev%2Fspecs%2Faltair%2Flight-client%2Fsync-protocol.mdx)%20and%20the%20%5BThe%20Portal%20Network%20Specification%5D(https%3A%2F%2Fgithub.com%2Fethereum%2Fportal-network-specs)%0A2.%20Near%20Rainbow%20Bridge%20Light%20Client%20Walkthrough%20include%20%5Beth2near-block-relay-rs%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Ftree%2Fmaster%2Feth2near%2Feth2near-block-relay-rs)%2C%20%5Bnearbridge%20contracts%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Ftree%2Fmaster%2Fcontracts%2Feth%2Fnearbridge)%20and%20%5Bnearprover%20contracts%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Ftree%2Fmaster%2Fcontracts%2Feth%2Fnearprover)%0A3.%20Prysm%20light-client%20%5Bprototype%5D(https%3A%2F%2Fgithub.com%2Fjinfwhuang%2Fprysm%2Ftree%2Fjin-light%2Fcmd%2Flight-client)%0A%0A_Note%3A%20Time%20on%20Ethereum%202.0%20Proof%20of%20Stake%20is%20divided%20into%20slots%20and%20epochs.%20One%20slot%20is%2012%20seconds.%20One%20epoch%20is%206.4%20minutes%2C%20consisting%20of%2032%20slots.%20One%20block%20can%20be%20created%20for%20each%20slot._%0A%0A%23%23%23%20Light%20Client%20Specification%0A%0A%23%23%23%23%20Altair%20Light%20Client%20--%20Sync%20Protocol%0A%0A-%20%5BAltair%20Light%20Client%20--%20Sync%20Protocol%5D(https%3A%2F%2Fgithub.com%2Fethereum%2Fconsensus-specs%2Fblob%2Fdev%2Fspecs%2Faltair%2Flight-client%2Fsync-protocol.mdx)%3A%20The%20beacon%20chain%20is%20designed%20to%20be%20light%20client%20friendly%20for%20constrained%20environments%20to%20access%20Ethereum%20with%20reasonable%20safety%20and%20liveness.%0A%0A%20%20Such%20environments%20include%20resource-constrained%20devices%20(e.g.%20phones%20for%20trust-minimized%20wallets)and%20metered%20VMs%20(e.g.%20blockchain%20VMs%20for%20cross-chain%20bridges).%0A%0A%20%20This%20document%20suggests%20a%20minimal%20light%20client%20design%20for%20the%20beacon%20chain%20thatuses%20sync%20committees%20introduced%20in%20%5Bthis%20beacon%20chain%20extension%5D(https%3A%2F%2Fgithub.com%2Fethereum%2Fconsensus-specs%2Fblob%2Fdev%2Fspecs%2Faltair%2Fbeacon-chain.mdx).%0A%0A%20%20Additional%20documents%20describe%20how%20the%20light%20client%20sync%20protocol%20can%20be%20used%3A%0A%20%20-%20%5BFull%20node%5D(https%3A%2F%2Fgithub.com%2Fethereum%2Fconsensus-specs%2Fblob%2Fdev%2Fspecs%2Faltair%2Flight-client%2Ffull-node.mdx)%0A%20%20-%20%5BLight%20client%5D(https%3A%2F%2Fgithub.com%2Fethereum%2Fconsensus-specs%2Fblob%2Fdev%2Fspecs%2Faltair%2Flight-client%2Flight-client.mdx)%0A%20%20-%20%5BNetworking%5D(https%3A%2F%2Fgithub.com%2Fethereum%2Fconsensus-specs%2Fblob%2Fdev%2Fspecs%2Faltair%2Flight-client%2Fp2p-interface.mdx)%0A%0A-%20%5BLight%20client%20sync%20process%5D(https%3A%2F%2Fgithub.com%2Fethereum%2Fconsensus-specs%2Fblob%2Fdev%2Fspecs%2Faltair%2Flight-client%2Flight-client.mdx)%3A%20explains%20how%20light%20clients%20MAY%20obtain%20light%20client%20data%20to%20sync%20with%20the%20network.%0A%20%201.%20The%20light%20client%20MUST%20be%20configured%20out-of-band%20with%20a%20spec%2Fpreset%20(including%20fork%20schedule)%2C%20with%20%60genesis_state%60%20(including%20%60genesis_time%60%20and%20%60genesis_validators_root%60)%2C%20and%20with%20a%20trusted%20block%20root.%20The%20trusted%20block%20SHOULD%20be%20within%20the%20weak%20subjectivity%20period%2C%20and%20its%20root%20SHOULD%20be%20from%20a%20finalized%20%60Checkpoint%60.%0A%20%202.%20The%20local%20clock%20is%20initialized%20based%20on%20the%20configured%20%60genesis_time%60%2C%20and%20the%20current%20fork%20digest%20is%20determined%20to%20browse%20for%20and%20connect%20to%20relevant%20light%20client%20data%20providers.%0A%20%203.%20The%20light%20client%20fetches%20a%20%5B%60LightClientBootstrap%60%5D(https%3A%2F%2Fgithub.com%2Fethereum%2Fconsensus-specs%2Fblob%2Fdev%2Fspecs%2Faltair%2Flight-client%2Flight-client.mdx)%20object%20for%20the%20configured%20trusted%20block%20root.%20The%20%60bootstrap%60%20object%20is%20passed%20to%20%5B%60initialize_light_client_store%60%5D(https%3A%2F%2Fgithub.com%2Fethereum%2Fconsensus-specs%2Fblob%2Fdev%2Fspecs%2Faltair%2Flight-client%2Fsync-protocol.md%23initialize_light_client_store)%20to%20obtain%20a%20local%20%5B%60LightClientStore%60%5D(https%3A%2F%2Fgithub.com%2Fethereum%2Fconsensus-specs%2Fblob%2Fdev%2Fspecs%2Faltair%2Flight-client%2Fsync-protocol.md%23lightclientstore).%0A%20%204.%20The%20light%20client%20tracks%20the%20sync%20committee%20periods%20%60finalized_period%60%20from%20%60store.finalized_header.slot%60%2C%20%60optimistic_period%60%20from%20%60store.optimistic_header.slot%60%2C%20and%20%60current_period%60%20from%20%60current_slot%60%20based%20on%20the%20local%20clock.%0A%20%20%20%20%201.%20When%20%60finalized_period%20%3D%3D%20optimistic_period%60%20and%20%5B%60is_next_sync_committee_known%60%5D(https%3A%2F%2Fgithub.com%2Fethereum%2Fconsensus-specs%2Fblob%2Fdev%2Fspecs%2Faltair%2Flight-client%2Fsync-protocol.md%23is_next_sync_committee_known)%20indicates%20%60False%60%2C%20the%20light%20client%20fetches%20a%20%5B%60LightClientUpdate%60%5D(https%3A%2F%2Fgithub.com%2Fethereum%2Fconsensus-specs%2Fblob%2Fdev%2Fspecs%2Faltair%2Flight-client%2Fsync-protocol.md%23lightclientupdate)%20for%20%60finalized_period%60.%20If%20%60finalized_period%20%3D%3D%20current_period%60%2C%20this%20fetch%20SHOULD%20be%20scheduled%20at%20a%20random%20time%20before%20%60current_period%60%20advances.%0A%20%20%20%20%202.%20When%20%60finalized_period%20%2B%201%20%3C%20current_period%60%2C%20the%20light%20client%20fetches%20a%20%60LightClientUpdate%60%20for%20each%20sync%20committee%20period%20in%20range%20%60%5Bfinalized_period%20%2B%201%2C%20current_period)%60%20(current%20period%20excluded)%0A%20%20%20%20%203.%20When%20%60finalized_period%20%2B%201%20%3E%3D%20current_period%60%2C%20the%20light%20client%20keeps%20observing%20%5B%60LightClientFinalityUpdate%60%5D(https%3A%2F%2Fgithub.com%2Fethereum%2Fconsensus-specs%2Fblob%2Fdev%2Fspecs%2Faltair%2Flight-client%2Fsync-protocol.md%23lightclientfinalityupdate)%20and%20%5B%60LightClientOptimisticUpdate%60%5D(https%3A%2F%2Fgithub.com%2Fethereum%2Fconsensus-specs%2Fblob%2Fdev%2Fspecs%2Faltair%2Flight-client%2Fsync-protocol.md%23lightclientoptimisticupdate).%20Received%20objects%20are%20passed%20to%20%5B%60process_light_client_finality_update%60%5D(https%3A%2F%2Fgithub.com%2Fethereum%2Fconsensus-specs%2Fblob%2Fdev%2Fspecs%2Faltair%2Flight-client%2Fsync-protocol.md%23process_light_client_finality_update)%20and%20%5B%60process_light_client_optimistic_update%60%5D(https%3A%2F%2Fgithub.com%2Fethereum%2Fconsensus-specs%2Fblob%2Fdev%2Fspecs%2Faltair%2Flight-client%2Fsync-protocol.md%23process_light_client_optimistic_update).%20This%20ensures%20that%20%60finalized_header%60%20and%20%60optimistic_header%60%20reflect%20the%20latest%20blocks.%0A%20%205.%20%5B%60process_light_client_store_force_update%60%5D(https%3A%2F%2Fgithub.com%2Fethereum%2Fconsensus-specs%2Fblob%2Fdev%2Fspecs%2Faltair%2Flight-client%2Fsync-protocol.md%23process_light_client_store_force_update)%20MAY%20be%20called%20based%20on%20use%20case%20dependent%20heuristics%20if%20light%20client%20sync%20appears%20stuck.%20If%20available%2C%20falling%20back%20to%20an%20alternative%20syncing%20mechanism%20to%20cover%20the%20affected%20sync%20committee%20period%20is%20preferred.%0A%0A%23%23%23%23%20The%20Portal%20Network%0A%0A-%20%5BThe%20Portal%20Network%5D(https%3A%2F%2Fgithub.com%2Fethereum%2Fportal-network-specs)%3A%20The%20Portal%20Network%20is%20an%20in%20progess%20effort%20to%20enable%20lightweight%20protocol%20access%20by%20resource%20constrained%20devices.%20The%20term%20_%22portal%22_%20is%20used%20to%20indicate%20that%20these%20networks%20provide%20a%20_view_%20into%20the%20protocol%20but%20are%20not%20critical%20to%20the%20operation%20of%20the%20core%20Ethereum%20protocol.%0A%0A%20%20The%20Portal%20Network%20is%20comprised%20of%20multiple%20peer-to-peer%20networks%20which%20together%20provide%20the%20data%20and%20functionality%20necessary%20to%20expose%20the%20standard%20%5BJSON-RPC%20API%5D(https%3A%2F%2Feth.wiki%2Fjson-rpc%2FAPI).%20These%20networks%20are%20specially%20designed%20to%20ensure%20that%20clients%20participating%20in%20these%20networks%20can%20do%20so%20with%20minimal%20expenditure%20of%20networking%20bandwidth%2C%20CPU%2C%20RAM%2C%20and%20HDD%20resources.%0A%0A%20%20The%20term%20'Portal%20Client'%20describes%20a%20piece%20of%20software%20which%20participates%20in%20these%20networks.%20Portal%20Clients%20typically%20expose%20the%20standard%20JSON-RPC%20API.%0A%20%20-%20Motivation%3A%20The%20Portal%20Network%20is%20focused%20on%20delivering%20reliable%2C%20lightweight%2C%20and%20decentralized%20access%20to%20the%20Ethereum%20protocol.%0A%0A%20%20-%20Prior%20Work%20on%20the%20%22Light%20Ethereum%20Subprotocol%22%20(LES)%3A%20The%20term%20%22light%20client%22%20has%20historically%20refered%20to%20a%20client%20of%20the%20existing%20%5BDevP2P%5D(https%3A%2F%2Fgithub.com%2Fethereum%2Fdevp2p%2Fblob%2Fmaster%2Frlpx.mdx)%20based%20%5BLES%5D(https%3A%2F%2Fgithub.com%2Fethereum%2Fdevp2p%2Fblob%2Fmaster%2Fcaps%2Fles.mdx)%20network.%20This%20network%20is%20designed%20using%20a%20client%2Fserver%20architecture.%20The%20LES%20network%20has%20a%20total%20capacity%20dictated%20by%20the%20number%20of%20%22servers%22%20on%20the%20network.%20In%20order%20for%20this%20network%20to%20scale%2C%20the%20%22server%22%20capacity%20has%20to%20increase.%20This%20also%20means%20that%20at%20any%20point%20in%20time%20the%20network%20has%20some%20total%20capacity%20which%20if%20exceeded%20will%20cause%20service%20degradation%20across%20the%20network.%20Because%20of%20this%20the%20LES%20network%20is%20unreliable%20when%20operating%20near%20capacity.%0A%0A-%20Block%20Relay%0A%20%20-%20%5BBeacon%20State%5D(https%3A%2F%2Fgithub.com%2Fethereum%2Fportal-network-specs%2Fblob%2Fmaster%2Fbeacon-chain%2Fbeacon-state-network.md%23dht-overview)%3A%20A%20client%20has%20a%20trusted%20beacon%20state%20root%2C%20and%20it%20wants%20to%20access%20some%20parts%20of%20the%20state.%20Each%20of%20the%20access%20request%20corresponds%20to%20some%20leave%20nodes%20of%20the%20beacon%20state.%20The%20request%20is%20a%20content%20lookup%20on%20a%20DHT.%20The%20response%20is%20a%20Merkle%20proof.%0A%0A%20%20%20%20%20%20%20%20A%20Distributed%20Hash%20Table%20(DHT)%20allows%20network%20participants%20to%20have%20retrieve%20data%20on-demand%20based%20on%20a%20content%0A%0A%20%20-%20%5BSyncing%20Block%20Headers%5D(https%3A%2F%2Fgithub.com%2Fethereum%2Fportal-network-specs%2Fblob%2Fmaster%2Fbeacon-chain%2Fsync-gossip.mdx)%3A%20A%20beacon%20chain%20client%20could%20sync%20committee%20to%20perform%20state%20updates.%20The%20data%20object%20LightClientSkipSyncUpdate%20allows%20a%20client%20to%20quickly%20sync%20to%20a%20recent%20header%20with%20the%20appropriate%20sync%20committee.%20Once%20the%20client%20establishes%20a%20recent%20header%2C%20it%20could%20sync%20to%20other%20headers%20by%20processing%20LightClientUpdates.%20These%20two%20data%20types%20allow%20a%20client%20to%20stay%20up-to-date%20with%20the%20beacon%20chain.%0A%20%20%20%20-%20%5BSync%20State%5D(https%3A%2F%2Fgithub.com%2Fethereum%2Fportal-network-specs%2Fblob%2Fmaster%2Fbeacon-chain%2Fskip-sync-network.mdx)%3A%20A%20client%20uses%20SkipSyncUpdate%20to%20skip%20sync%20from%20a%20known%20header%20to%20a%20recent%20header.%20A%20client%20with%20a%20trusted%20but%20outdated%20header%20cannot%20use%20the%20messages%20in%20the%20gossip%20channel%20bc-light-client-update%20to%20update.%20The%20client's%20sync-committee%20in%20the%20stored%20snapshot%20is%20too%20old%20and%20not%20connected%20to%20any%20update%20messages.%20The%20client%20look%20for%20the%20appropriate%20SkipSyncUpdate%20to%20skip%20sync%20its%20header.%0A%20%20%20%20-%20%5BAdvance%20Block%20Headers%5D(https%3A%2F%2Fgithub.com%2Fethereum%2Fportal-network-specs%2Fblob%2Fmaster%2Fbeacon-chain%2Fsync-gossip.mdx)%3A%20A%20beacon%20chain%20client%20could%20sync%20committee%20to%20perform%20%5Bstate%20updates%5D(https%3A%2F%2Fgithub.com%2Fethereum%2Fconsensus-specs%2Fblob%2Fdev%2Fspecs%2Faltair%2Fsync-protocol.mdx).%20The%20data%20object%20%5BLightClientSkipSyncUpdate%5D(skip-sync-network)%20allows%20a%20client%20to%20quickly%20sync%20to%20a%20recent%20header%20with%20the%20appropriate%20sync%20committee.%20Once%20the%20client%20establishes%20a%20recent%20header%2C%20it%20could%20sync%20to%20other%20headers%20by%20processing%20%5BLightClientUpdates%5D(https%3A%2F%2Fgithub.com%2Fethereum%2Fconsensus-specs%2Fblob%2Fdev%2Fspecs%2Faltair%2Fsync-protocol.md%23lightclientupdate).%20These%20two%20data%20types%20allow%20a%20client%20to%20stay%20up-to-date%20with%20the%20beacon%20chain.%0A%0A%20%20%20%20%20%20%20%20%20%20%20%20These%20two%20data%20types%20are%20placed%20into%20separate%20sub-networks.%20A%20light%20client%20make%20find-content%20requests%20on%20%60skip-sync-network%60%20at%20start%20of%20the%20sync%20to%20get%20a%20header%20with%20the%20same%20%60SyncCommittee%60%20object%20as%20in%20the%20current%20sync%20period.%20The%20client%20uses%20messages%20in%20the%20gossip%20topic%20%60bc-light-client-update%60%20to%20advance%20its%20header.%0A%0A%20%20%20%20%20%20%20%20%20%20%20%20The%20gossip%20topics%20described%20in%20this%20document%20is%20part%20of%20a%20%5Bproposal%5D(https%3A%2F%2Fethresear.ch%2Ft%2Fa-beacon-chain-light-client-proposal%2F11064)%20for%20a%20beacon%20chain%20light%20client.%0A%0A%23%23%23%23%20Transaction%20Proofs%0A%0A-%20%5BRetrieving%20Beacon%20State%5D(https%3A%2F%2Fgithub.com%2Fethereum%2Fportal-network-specs%2Fblob%2Fmaster%2Fbeacon-chain%2Fbeacon-state-network.mdx)%3A%20A%20client%20has%20a%20trusted%20beacon%20state%20root%2C%20and%20it%20wants%20to%20access%20some%20parts%20of%20the%20state.%20Each%20of%20the%20access%20request%20corresponds%20to%20some%20leave%20nodes%20of%20the%20beacon%20state.%20The%20request%20is%20a%20content%20lookup%20on%20a%20DHT.%20The%20response%20is%20a%20Merkle%20proof.%0A%0A%20%20A%20Distributed%20Hash%20Table%20(DHT)%20allows%20network%20participants%20to%20have%20retrieve%20data%20on-demand%20based%20on%20a%20content%20key.%20A%20portal-network%20DHT%20is%20different%20than%20a%20traditional%20one%20in%20that%20each%20participant%20could%20selectively%20limit%20its%20workload%20by%20choosing%20a%20small%20interest%20radius%20r.%20A%20participants%20only%20process%20messages%20that%20are%20within%20its%20chosen%20radius%20boundary.%0A%20%20-%20%5BWire%20Protocol%5D(https%3A%2F%2Fgithub.com%2Fethereum%2Fportal-network-specs%2Fblob%2Fmaster%2Fbeacon-chain%2Fbeacon-state-network.md%23wire-protocol)%3A%20For%20a%20subprotocol%2C%20we%20need%20to%20further%20define%20the%20following%20to%20be%20able%20to%20instantiate%20the%20wire%20format%20of%20each%20message%20type.%201.%20%60content_key%60%202.%20%60content_id%60%203.%20%60payload%60%0A%0A%20%20%20%20%20%20%20%20The%20content%20of%20the%20message%20is%20a%20Merkle%20proof%20contains%20multiple%20leave%20nodes%20for%20a%20%5BBeaconState%5D(https%3A%2F%2Fgithub.com%2Fethereum%2Fconsensus-specs%2Fblob%2Fdev%2Fspecs%2Faltair%2Fbeacon-chain.md%23beaconstate).%0A%0A%20%20%20%20%20%20%20%20Finally%2C%20we%20define%20the%20necessary%20encodings.%20A%20light%20client%20only%20knows%20the%20root%20of%20the%20beacon%20state.%20The%20client%20wants%20to%20know%20the%20details%20of%20some%20leave%20nodes.%20The%20client%20has%20to%20be%20able%20to%20construct%20the%20%60content_key%60%20only%20knowing%20the%20root%20and%20which%20leave%20nodes%20it%20wants%20see.%20The%20%60content_key%60%20is%20the%20ssz%20serialization%20of%20the%20paths.%20The%20paths%20represent%20the%20part%20of%20the%20beacon%20state%20that%20one%20wants%20to%20know%20about.%20The%20paths%20are%20represented%20by%20generalized%20indices.%20Note%20that%20%60hash_tree_root%60%20and%20%60serialize%60%20are%20the%20same%20as%20those%20defined%20in%20%5Bsync-gossip%5D(https%3A%2F%2Fgithub.com%2Fethereum%2Fportal-network-specs%2Fblob%2Fmaster%2Fbeacon-chain%2Fsync-gossip.mdx).%0A%0A-%20TODO%3A%20Review%20of%20Retrieving%20a%20transaction%20proof%20not%20just%20retrieving%20data%20on-demand%0A%0A%23%23%23%23%20References%0A%0A-%20Ethereum%202.0%20Specifications%0A%20%20-%20%5BBeacon%20Chain%20Specification%5D(https%3A%2F%2Fgithub.com%2Fethereum%2Fconsensus-specs%2Fblob%2Fmaster%2Fspecs%2Fphase0%2Fbeacon-chain.mdx)%0A%20%20-%20%5BExtended%20light%20client%20protocol%5D(https%3A%2F%2Fnotes.ethereum.org%2F%40vbuterin%2Fextended_light_client_protocol)%0A%20%20-%20%5BAltair%20Light%20Client%20--%20Light%20Client%5D(https%3A%2F%2Fgithub.com%2Fethereum%2Fconsensus-specs%2Fblob%2Fdev%2Fspecs%2Faltair%2Flight-client%2Flight-client.mdx)%0A%20%20-%20%5BAltair%20Light%20Client%20--%20Sync%20Protocol%5D(https%3A%2F%2Fgithub.com%2Fethereum%2Fconsensus-specs%2Fblob%2Fdev%2Fspecs%2Faltair%2Flight-client%2Fsync-protocol.mdx)%0A%20%20-%20%5BBeacon%20Chain%20Fork%20Choice%5D(https%3A%2F%2Fgithub.com%2Fethereum%2Fconsensus-specs%2Fblob%2Fdev%2Fspecs%2Fphase0%2Ffork-choice.mdx)%0A%20%20-%20%5BThe%20Portal%20Network%20Specification%5D(https%3A%2F%2Fgithub.com%2Fethereum%2Fportal-network-specs)%3A%20an%20in%20progess%20effort%20to%20enable%20lightweight%20protocol%20access%20by%20resource%20constrained%20devices.%0A%0A-%20%5BLight%20Ethereum%20Subprotocol%20(LES)%5D(https%3A%2F%2Fgithub.com%2Fethereum%2Fdevp2p%2Fblob%2Fmaster%2Fcaps%2Fles.mdx)%3A%20the%20protocol%20used%20by%20%22light%22%20clients%2C%20which%20only%20download%20block%20headers%20as%20they%20appear%20and%20fetch%20other%20parts%20of%20the%20blockchain%20on-demand.%0A-%20%5BBlockDaemon%3A%20Ethereum%20Altair%20Hard%20Folk%3A%20Light%20Clients%20%26%20Sync%20Committees%5D(https%3A%2F%2Fblockdaemon.com%2Fblog%2Fethereum-altair-hard-folk-light-clients-sync-committees%2F)%0A-%20%5BEfficient%20algorithms%20for%20CBC%20Casper%5D(https%3A%2F%2Fdocs.google.com%2Fpresentation%2Fd%2F1oc_zdywOsHxz3zez1ILAgrerS7RkaF1hHoW0FLtp0Gw%2Fedit%23slide%3Did.p)%3A%20Review%20of%20LMD%20GHOST%20(Latest%20Message%20Driven%2C%20Greediest%20Heaviest%20Observed%20Sub-Tree)%0A-%20%5BSSZ%3A%20Simple%20Serialize%5D(https%3A%2F%2Fethereum.org%2Fen%2Fdevelopers%2Fdocs%2Fdata-structures-and-encoding%2Fssz%2F)%3A%20Overview%20of%20Simple%20serialize%20(SSZ)%20is%20the%20serialization%20method%20used%20on%20the%20Beacon%20Chain.%20(including%20merkalization%20and%20multiproofs)%0A-%20%5BThe%20Noise%20Protocol%20Framework%5D(https%3A%2F%2Fnoiseprotocol.org%2Fnoise.html)%3A%20Noise%20is%20a%20framework%20for%20crypto%20protocols%20based%20on%20Diffie-Hellman%20key%20agreement.%0A-%20%5BFlashbots%20for%20Ethereum%20Consensus%20Clients%5D(https%3A%2F%2Fhackmd.io%2FQoLwVQf3QK6EiVt15YOYqQ%3Fview)%0A-%20%5BOptimistic%20Sync%20Specification%5D(https%3A%2F%2Fgithub.com%2Fethereum%2Fconsensus-specs%2Fblob%2Fdev%2Fsync%2Foptimistic.mdx)%3A%20Optimistic%20Sync%20is%20a%20stop-gap%20measure%20to%20allow%20execution%20nodes%20to%20sync%20via%20established%20methods%20until%20future%20Ethereum%20roadmap%20items%20are%20implemented%20(e.g.%2C%20statelessness).%0A-%20%5BConsensus%20Light%20Client%20Server%20Implementation%20Notes%5D(https%3A%2F%2Fhackmd.io%2FhsCz1G3BTyiwwJtjT4pe2Q%3Fview)%3A%20How%20Lodestar%20beacon%20node%20was%20tweaked%20to%20serve%20light%20clients%0A-%20%5Bbeacon%20chain%20light%20client%20design%20doc%5D(https%3A%2F%2Fnotes.ethereum.org%2F%40ralexstokes%2FHJxDMi8vY)%3A%20notes%20about%20the%20design%2Fimplementation%20of%20a%20beacon%20chain%20light%20client%20using%20standard%20APIs%20and%20protocol%20features%0A-%20%5BA%20Beacon%20Chain%20Light%20Client%20Proposal%5D(https%3A%2F%2Fethresear.ch%2Ft%2Fa-beacon-chain-light-client-proposal%2F11064)%3A%20proposing%20a%20light%20client%20implementation%20that%20goes%20a%20step%20further%20than%20the%20minimum%20light%20client%20described%20in%20the%20altair%20consensus-spec.%20The%20proposed%20client%20aims%20to%20allow%20queries%20into%20the%20beacon%20state.%0A-%20%5BDistributed%20Hash%20Table%20(DHT)%20Overview%5D(https%3A%2F%2Fgithub.com%2Fethereum%2Fportal-network-specs%2Fblob%2Fmaster%2Fbeacon-chain%2Fbeacon-state-network.md%23dht-overview)%3A%20allows%20network%20participants%20to%20have%20retrieve%20data%20on-demand%20based%20on%20a%20content%20key.%0A-%20%5B(WIP)%20Light%20client%20p2p%20interface%20Specification%5D(https%3A%2F%2Fgithub.com%2Fethereum%2Fconsensus-specs%2Fpull%2F2786)%3A%20a%20PR%20to%20get%20the%20conversation%20going%20about%20a%20p2p%20approach.%0A%0A%23%23%23%20Near%20Rainbow%20Bridge%20Ethereum%20Light%20Client%20Walkthrough%0A%0AThe%20following%20is%20a%20walkthrough%20of%20how%20a%20transaction%20executed%20on%20Ethereum%20is%20propogated%20to%20NEAR's%20%5Beth2-client%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Ftree%2Fmaster%2Fcontracts%2Fnear%2Feth2-client).%20See%20%5BCryptographic%20Primitives%5D(%23cryptographic-primitives)%20for%20more%20information%20on%20the%20cryptography%20used.%0A%0A**At%20a%20high%20level%20the%20ethereum%20light%20client%20contract**%0A%0A-%20Optionally%20accepts%20client%20updates%20only%20from%20a%20trusted%20client%0A-%20Can%20pause%20functions%0A-%20Validates%20a%20sync%20committee%20exists%20for%20the%20curremt%20slot%0A-%20Validates%20sync%20committe%20has%20greater%20than%20the%20minimum%20required%20sync%20committee%20members%0A-%20Validates%202%2F3%20or%20more%20of%20the%20committe%20members%20have%20signed%20the%20blocks%0A-%20Validates%20bls%20signatures%20(i.e.%20the%20bls%20signatures%20of%20the%20sync%20comittee%20for%20the%20blocks%20propogated)%0A-%20Stores%20the%20hashes%20of%20the%20blocks%20for%20the%20past%20%60hashes_gc_threshold%60%20headers.%20Events%20that%20happen%20past%20this%20threshold%20cannot%20be%20verified%20by%20the%20client.%20It%20is%20desirable%20that%20this%20number%20is%20larger%20than%207%20days'%20worth%20of%20headers%2C%20which%20is%20roughly%2051k%20Ethereum%20blocks.%20So%20this%20number%20should%20be%2051k%20in%20production.%0A-%20Stores%20the%20Ethereum%20Network%20(e.g.%20mainnet%2C%20kiln)%0A-%20Stores%20Hashes%20of%20the%20finalized%20execution%20blocks%20mapped%20to%20their%20numbers.%0A-%20Stores%20All%20unfinalized%20execution%20blocks'%20headers%20hashes%20mapped%20to%20their%20%60HeaderInfo%60.%0A-%20Stores%20%60AccountId%60s%20mapped%20to%20their%20number%20of%20submitted%20headers.%0A-%20Stores%20Max%20number%20of%20unfinalized%20blocks%20allowed%20to%20be%20stored%20by%20one%20submitter%20account.%20This%20value%20should%20be%20at%20least%2032%20blocks%20(1%20epoch)%2C%20but%20the%20recommended%20value%20is%201024%20(32%20epochs)%0A-%20Stores%20minimum%20balance%20that%20should%20be%20attached%20to%20register%20a%20new%20submitter%20account.%0A-%20Stores%20finalized%20beacon%20header%0A-%20Stores%20finalized%20execution%20header%0A-%20Stores%20current_sync_committee%0A-%20Stores%20next_sync_committee%0A%0A%23%23%23%23%20Ethereum%20to%20NEAR%20block%20propagation%20flow%0A%0A-%20%5BLight%20Clients%20are%20deployed%20on%20Near%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Fblob%2Fmaster%2Feth2near%2Feth2near-block-relay-rs%2Fsrc%2Fmain.rs%23L107)%3A%0A%20%20-%20%5Binit_contract%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Fblob%2Fmaster%2Feth2near%2Feth2near-block-relay-rs%2Fsrc%2Fmain.rs%23L107)%3A%20The%20eth2near%20relayer%20is%20called%20with%20an%20argument%20to%20initialize%20the%20%5Beth2-client%20contract%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Fblob%2Fmaster%2Fcontracts%2Fnear%2Feth2-client%2Fsrc%2Flib.rs)%0A%20%20%20%20-%20%5Beth_client_contract%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Fblob%2Fmaster%2Feth2near%2Feth2near-block-relay-rs%2Fsrc%2Fmain.rs%23L108)%3A%20is%20created%20using%20a%20contract_wrapper%0A%20%20%20%20%20%20-%20%60let%20mut%20eth_client_contract%20%3D%20EthClientContract%3A%3Anew(get_eth_contract_wrapper(%26config))%3B%60%0A%20%20%20%20-%20%5BEthClientContract%20Wrapper%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Fblob%2Fmaster%2Feth2near%2Fcontract_wrapper%2Fsrc%2Feth_client_contract.rs)%3A%20creates%20an%20instance%20of%20%5Beth2-client%20contract%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Fblob%2Fmaster%2Fcontracts%2Fnear%2Feth2-client%2Fsrc%2Flib.rs)%20with%20the%20following%20arguments%0A%20%20%20%20%20%20-%20%60network%60%20-%20the%20name%20of%20Ethereum%20network%20such%20as%20%60mainnet%60%2C%20%60goerli%60%2C%20%60kiln%60%2C%20etc.%0A%20%20%20%20%20%20-%20%60finalized_execution_header%60%20-%20the%20finalized%20execution%20header%20to%20start%20initialization%20with.%0A%20%20%20%20%20%20-%20%60finalized_beacon_header%60%20-%20correspondent%20finalized%20beacon%20header.%0A%20%20%20%20%20%20-%20%60current_sync_committee%60%20-%20sync%20committee%20correspondent%20for%20finalized%20block.%0A%20%20%20%20%20%20-%20%60next_sync_committee%60%20-%20sync%20committee%20for%20the%20next%20period%20after%20period%20for%20finalized%20block.%0A%20%20%20%20%20%20-%20%60hashes_gs_threshold%60%20-%20the%20maximum%20number%20of%20stored%20finalized%20blocks.%0A%20%20%20%20%20%20-%20%60max_submitted_block_by_account%60%20-%20the%20maximum%20number%20of%20unfinalized%20blocks%20which%20one%20relay%20can%20store%20in%20the%20client's%20storage.%0A%20%20%20%20%20%20-%20%60trusted_signer%60%20-%20the%20account%20address%20of%20the%20trusted%20signer%20which%20is%20allowed%20to%20submit%20light%20client%20updates.%0A-%20%5BRelayer%20is%20Created%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Fblob%2Fmaster%2Feth2near%2Feth2near-block-relay-rs%2Fsrc%2Fmain.rs%23L111)%3A%0A%20%20-%20%5Beth2near_relay%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Fblob%2Fmaster%2Feth2near%2Feth2near-block-relay-rs%2Fsrc%2Fmain.rs%23L111)%20is%20created%20using%20the%20following%20arguments%0A%20%20%20%20-%20%60let%20mut%20eth2near_relay%20%3D%20Eth2NearRelay%3A%3Ainit(%26config%2C%20get_eth_client_contract(%26config)%2C%20args.enable_binary_search%2C%20args.submit_only_finalized_blocks%2C)%3B%60%0A-%20%5BRelayer%20is%20Started%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Fblob%2Fmaster%2Feth2near%2Feth2near-block-relay-rs%2Fsrc%2Fmain.rs)%3A%0A%20%20-%20The%20relayer%20is%20started%20using%20%60eth2near_relay.run(None)%3B%60%0A%20%20-%20This%20executes%20the%20%5Beth2near_relay%20run%20function%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Fblob%2Fmaster%2Feth2near%2Feth2near-block-relay-rs%2Fsrc%2Feth2near_relay.rs%23L257)%20%60pub%20fn%20run(%26mut%20self%2C%20max_iterations%3A%20Option%3Cu64%3E)%60%20which%20runs%20until%20terminated%20doing%20using%20the%20following%20loop%20%60while%20!self.terminate%60%0A%20%20%20%20-%20%60self.wait_for_synchronization()%2C%60%3A%20gets%20the%20sync%20status%0A%20%20%20%20-%20%60sleep(Duration%3A%3Afrom_secs(12))%3B%60%3A%20waits%20for%2012%20seconds%0A%20%20%20%20-%20%60self.get_max_slot_for_submission()%60%3A%20gets%20the%20maximum%20slot%20for%20submission%20from%20Ethereum%0A%20%20%20%20-%20%60self.get_last_eth2_slot_on_near%60%3A%20gets%20the%20latest%20slot%20propogated%20from%20Ethereum%20to%20NEAR%0A%20%20%20%20-%20%60if%20last_eth2_slot_on_near%20%3C%20max_slot_for_submission%60%3A%20If%20there%20are%20slots%20to%20process%0A%20%20%20%20%20%20-%20%60self.get_execution_blocks_between(last_eth2_slot_on_near%20%2B%201%2C%20max_slot_for_submission%2C)%2C%60%3A%20Get%20the%20execution%20blocks%20to%20be%20processed%0A%20%20%20%20%20%20-%20%60self.submit_execution_blocks(headers%2C%20current_slot%2C%20%26mut%20last_eth2_slot_on_near)%60%3A%20submit%20them%0A%20%20%20%20%20%20-%20%60were_submission_on_iter%20%3D%20true%3B%60%3A%20flags%20that%20there%20were%20submissions%0A%20%20%20%20-%20%60were_submission_on_iter%20%7C%3D%20self.send_light_client_updates_with_checks(last_eth2_slot_on_near)%3B%60%3A%20send%20light_client%20updates%20with%20checks%20and%20updates%20the%20submission%20flag%20to%20true%20if%20if%20passes.%20Following%20is%20some%20key%20logic%0A%20%20%20%20%20%20-%20%60self.is_enough_blocks_for_light_client_update%60%3A%20Checks%20if%20there%20are%20enough%20blocks%20for%20a%20light%20client%20update%0A%20%20%20%20%20%20%20%20-%20%60self.send_light_client_updates%60%20calls%20%60send_light_client_update%60%20which%0A%20%20%20%20%20%20%20%20%20%20-%20%60if%20last_finalized_slot_on_eth%20%3E%3D%20last_finalized_slot_on_near%20%2B%20self.max_blocks_for_finalization%60%3A%20checks%20if%20the%20gap%20is%20too%20big%20(i.e.%20we%20are%20at%20a%20new%20slot)%20between%20slot%20of%20finalized%20block%20on%20NEAR%20and%20ETH.%20If%20it%20is%20it%20sends%20a%20hand%20made%20client%20update%20(which%20will%20loop%20getting%20the%20new%20slots%20sync%20committees)%20otherwise%20it%20sends%20a%20regular%20client%20update%20(which%20propogates%20the%20block%20headers)%0A%20%20%20%20%20%20%20%20%20%20%20%20-%20%60self.send_hand_made_light_client_update(last_finalized_slot_on_near)%3B%60%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20-%20%60let%20include_next_sync_committee%20%3D%20BeaconRPCClient%3A%3Aget_period_for_slot%20(last_finalized_slot_on_near)%20!%3D%20BeaconRPCClient%3A%3Aget_period_for_slot(attested_slot)%3B%60%0A%20%20%20%20%20%20%20%20%20%20%20%20-%20%60self.send_regular_light_client_update(last_finalized_slot_on_eth%2C%20last_finalized_slot_on_near%2C)%3B%60%0A%20%20%20%20%20%20%20%20%20%20-%20%60self.send_specific_light_client_update(light_client_update)%60%20is%20called%20for%20both%20regular%20and%20hand%20made%20updates.%0A%20%20%20%20%20%20%20%20%20%20%20%20-%20%60self.eth_client_contract.is_known_block%60%3A%20Checks%20if%20the%20block%20is%20already%20known%20on%20the%20Etherum%20Client%20Contract%20on%20NEAR%0A%20%20%20%20%20%20%20%20%20%20%20%20-%20%60self.verify_bls_signature_for_finality_update(%26light_client_update)%60%3A%20Verifies%20the%20BLS%20signatures.%20This%20calls%20%60is_correct_finality_update%60%20in%20%60eth2near%2Ffinality-update-verify%2Fsrc%2Flib.rs%60%20%5C*%0A%20%20%20%20%20%20%20%20%20%20%20%20-%20%60self.eth_client_contract.send_light_client_update(light_client_update.clone())%60%3A%20Updates%20the%20light%20client%20with%20the%20finalized%20block%0A%20%20%20%20%20%20%20%20%20%20%20%20-%20%60self.beacon_rpc_client.get_block_number_for_slot(types%3A%3ASlot%3A%3Anew(light_client_update.finality_update.header_update.beacon_header.slot.as_u64()))%2C%60%3A%20Validates%20Finalized%20block%20number%20is%20correct%20on%20Ethereum%20usng%20the%20%60beacon_rpc_client%60.%0A%20%20%20%20%20%20%20%20%20%20%20%20-%20%60sleep(Duration%3A%3Afrom_secs(self.sleep_time_after_submission_secs))%3B%60%3A%20sleeps%20for%20the%20configured%20submission%20sleep%20time.%0A%20%20%20%20-%20%60if%20!were_submission_on_iter%20%7Bthread%3A%3Asleep(Duration%3A%3Afrom_secs(self.sleep_time_on_sync_secs))%3B%7D%60%3A%20if%20there%20were%20submissions%20sleep%20for%20however%20many%20seconds%20were%20configured%20for%20sync%20sleep%20time.%0A%0A%23%23%23%23%20Ethereum%20to%20NEAR%20block%20propagation%20components%0A%0A-%20%5BEthClientContract%20Wrapper%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Fblob%2Fmaster%2Feth2near%2Fcontract_wrapper%2Fsrc%2Feth_client_contract.rs)%3A%20supports%20%5Beth2-client%20contract%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Fblob%2Fmaster%2Fcontracts%2Fnear%2Feth2-client%2Fsrc%2Flib.rs)%20functions%20%60impl%20EthClientContractTrait%20for%20EthClientContract%60%0A%20%20-%20%60fn%20get_last_submitted_slot(%26self)%20-%3E%20u64%60%0A%20%20-%20%60fn%20is_known_block(%26self%2C%20execution_block_hash%3A%20%26H256)%20-%3E%20Result%3Cbool%2C%20Box%3Cdyn%20Error%3E%3E%60%0A%20%20-%20%60fn%20send_light_client_update(%26mut%20self%2C%20light_client_update%3A%20LightClientUpdate%2C)%20-%3E%20Result%3CFinalExecutionOutcomeView%2C%20Box%3Cdyn%20Error%3E%3E%60%0A%20%20-%20%60fn%20get_finalized_beacon_block_hash(%26self)%20-%3E%20Result%3CH256%2C%20Box%3Cdyn%20Error%3E%3E%60%0A%20%20-%20%60fn%20get_finalized_beacon_block_slot(%26self)%20-%3E%20Result%3Cu64%2C%20Box%3Cdyn%20Error%3E%3E%60%0A%20%20-%20%60fn%20send_headers(%26mut%20self%2C%20headers%3A%20%26%5BBlockHeader%5D%2C%20end_slot%3A%20u64%2C)%20-%3E%20Result%3CFinalExecutionOutcomeView%2C%20Box%3Cdyn%20std%3A%3Aerror%3A%3AError%3E%3E%60%0A%20%20-%20%60fn%20get_min_deposit(%26self)%20-%3E%20Result%3CBalance%2C%20Box%3Cdyn%20Error%3E%3E%60%0A%20%20-%20%60fn%20register_submitter(%26self)%20-%3E%20Result%3CFinalExecutionOutcomeView%2C%20Box%3Cdyn%20Error%3E%3E%60%0A%20%20-%20%60fn%20is_submitter_registered(%26self%2Caccount_id%3A%20Option%3CAccountId%3E%2C)%20-%3E%20Result%3Cbool%2C%20Box%3Cdyn%20Error%3E%3E%60%0A%20%20-%20%60fn%20get_light_client_state(%26self)%20-%3E%20Result%3CLightClientState%2C%20Box%3Cdyn%20Error%3E%3E%60%0A%20%20-%20%60fn%20get_num_of_submitted_blocks_by_account(%26self)%20-%3E%20Result%3Cu32%2C%20Box%3Cdyn%20Error%3E%3E%60%0A%20%20-%20%60fn%20get_max_submitted_blocks_by_account(%26self)%20-%3E%20Result%3Cu32%2C%20Box%3Cdyn%20Error%3E%3E%60%0A-%20%5Beth2-client%20contract%20storage%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Fblob%2Fmaster%2Fcontracts%2Fnear%2Feth2-client%2Fsrc%2Flib.rs)%3A%0A%20%20-%20High%20level%20storage%20overview%0A%20%20-%20provides%20the%20%60Eth2Client%60%20public%20data%20stucture%0A%0A%20%20%20%20%60%60%60%0A%20%20%20%20pub%20struct%20Eth2Client%20%7B%0A%20%20%20%20%20%20%20%20%2F%2F%2F%20If%20set%2C%20only%20light%20client%20updates%20by%20the%20trusted%20signer%20will%20be%20accepted%0A%20%20%20%20%20%20%20%20trusted_signer%3A%20Option%3CAccountId%3E%2C%0A%20%20%20%20%20%20%20%20%2F%2F%2F%20Mask%20determining%20all%20paused%20functions%0A%20%20%20%20%20%20%20%20paused%3A%20Mask%2C%0A%20%20%20%20%20%20%20%20%2F%2F%2F%20Whether%20the%20client%20validates%20the%20updates.%0A%20%20%20%20%20%20%20%20%2F%2F%2F%20Should%20only%20be%20set%20to%20%60false%60%20for%20debugging%2C%20testing%2C%20and%20diagnostic%20purposes%0A%20%20%20%20%20%20%20%20validate_updates%3A%20bool%2C%0A%20%20%20%20%20%20%20%20%2F%2F%2F%20Whether%20the%20client%20verifies%20BLS%20signatures.%0A%20%20%20%20%20%20%20%20verify_bls_signatures%3A%20bool%2C%0A%20%20%20%20%20%20%20%20%2F%2F%2F%20We%20store%20the%20hashes%20of%20the%20blocks%20for%20the%20past%20%60hashes_gc_threshold%60%20headers.%0A%20%20%20%20%20%20%20%20%2F%2F%2F%20Events%20that%20happen%20past%20this%20threshold%20cannot%20be%20verified%20by%20the%20client.%0A%20%20%20%20%20%20%20%20%2F%2F%2F%20It%20is%20desirable%20that%20this%20number%20is%20larger%20than%207%20days'%20worth%20of%20headers%2C%20which%20is%20roughly%0A%20%20%20%20%20%20%20%20%2F%2F%2F%2051k%20Ethereum%20blocks.%20So%20this%20number%20should%20be%2051k%20in%20production.%0A%20%20%20%20%20%20%20%20hashes_gc_threshold%3A%20u64%2C%0A%20%20%20%20%20%20%20%20%2F%2F%2F%20Network.%20e.g.%20mainnet%2C%20kiln%0A%20%20%20%20%20%20%20%20network%3A%20Network%2C%0A%20%20%20%20%20%20%20%20%2F%2F%2F%20Hashes%20of%20the%20finalized%20execution%20blocks%20mapped%20to%20their%20numbers.%20Stores%20up%20to%20%60hashes_gc_threshold%60%20entries.%0A%20%20%20%20%20%20%20%20%2F%2F%2F%20Execution%20block%20number%20-%3E%20execution%20block%20hash%0A%20%20%20%20%20%20%20%20finalized_execution_blocks%3A%20LookupMap%3Cu64%2C%20H256%3E%2C%0A%20%20%20%20%20%20%20%20%2F%2F%2F%20All%20unfinalized%20execution%20blocks'%20headers%20hashes%20mapped%20to%20their%20%60HeaderInfo%60.%0A%20%20%20%20%20%20%20%20%2F%2F%2F%20Execution%20block%20hash%20-%3E%20ExecutionHeaderInfo%20object%0A%20%20%20%20%20%20%20%20unfinalized_headers%3A%20UnorderedMap%3CH256%2C%20ExecutionHeaderInfo%3E%2C%0A%20%20%20%20%20%20%20%20%2F%2F%2F%20%60AccountId%60s%20mapped%20to%20their%20number%20of%20submitted%20headers.%0A%20%20%20%20%20%20%20%20%2F%2F%2F%20Submitter%20account%20-%3E%20Num%20of%20submitted%20headers%0A%20%20%20%20%20%20%20%20submitters%3A%20LookupMap%3CAccountId%2C%20u32%3E%2C%0A%20%20%20%20%20%20%20%20%2F%2F%2F%20Max%20number%20of%20unfinalized%20blocks%20allowed%20to%20be%20stored%20by%20one%20submitter%20account%0A%20%20%20%20%20%20%20%20%2F%2F%2F%20This%20value%20should%20be%20at%20least%2032%20blocks%20(1%20epoch)%2C%20but%20the%20recommended%20value%20is%201024%20(32%20epochs)%0A%20%20%20%20%20%20%20%20max_submitted_blocks_by_account%3A%20u32%2C%0A%20%20%20%20%20%20%20%20%2F%2F%20The%20minimum%20balance%20that%20should%20be%20attached%20to%20register%20a%20new%20submitter%20account%0A%20%20%20%20%20%20%20%20min_storage_balance_for_submitter%3A%20Balance%2C%0A%20%20%20%20%20%20%20%20%2F%2F%2F%20Light%20client%20state%0A%20%20%20%20%20%20%20%20finalized_beacon_header%3A%20ExtendedBeaconBlockHeader%2C%0A%20%20%20%20%20%20%20%20finalized_execution_header%3A%20LazyOption%3CExecutionHeaderInfo%3E%2C%0A%20%20%20%20%20%20%20%20current_sync_committee%3A%20LazyOption%3CSyncCommittee%3E%2C%0A%20%20%20%20%20%20%20%20next_sync_committee%3A%20LazyOption%3CSyncCommittee%3E%2C%0A%20%20%20%20%7D%0A%20%20%20%20%60%60%60%0A%0A-%20%5Beth2-client%20dependencies%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Fblob%2Fmaster%2Fcontracts%2Fnear%2Feth2-client%2FCargo.toml)%20relys%20heavily%20on%20the%20%5Blighthouse%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Flighthouse)%20codebase%20for%20it's%20consensus%20and%20cryptogrphic%20primitives.%20See%20%5BCryptographic%20Primitives%5D(%23cryptographic-primitives)%20for%20more%20information.%0A%20%20-%20%60ethereum-types%20%3D%20%220.9.2%22%60%0A%20%20-%20%60eth-types%20%3D%20%20%7B%20path%20%3D%20%22..%2Feth-types%22%20%7D%60%0A%20%20-%20%60eth2-utility%20%3D%20%20%7B%20path%20%3D%20%22..%2Feth2-utility%22%20%7D%60%0A%20%20-%20%60tree_hash%20%3D%20%7B%20git%20%3D%20%22https%3A%2F%2Fgithub.com%2Faurora-is-near%2Flighthouse.git%22%2C%20rev%20%3D%20%22b624c3f0d3c5bc9ea46faa14c9cb2d90ee1e1dec%22%20%7D%60%0A%20%20-%20%60merkle_proof%20%3D%20%7B%20git%20%3D%20%22https%3A%2F%2Fgithub.com%2Faurora-is-near%2Flighthouse.git%22%2C%20rev%20%3D%20%22b624c3f0d3c5bc9ea46faa14c9cb2d90ee1e1dec%22%20%7D%60%0A%20%20-%20%60bls%20%3D%20%7B%20git%20%3D%20%22https%3A%2F%2Fgithub.com%2Faurora-is-near%2Flighthouse.git%22%2C%20optional%20%3D%20true%2C%20rev%20%3D%20%22b624c3f0d3c5bc9ea46faa14c9cb2d90ee1e1dec%22%2C%20default-features%20%3D%20false%2C%20features%20%3D%20%5B%22milagro%22%5D%7D%60%0A%20%20-%20%60admin-controlled%20%3D%20%20%7B%20path%20%3D%20%22..%2Fadmin-controlled%22%20%7D%60%0A%20%20-%20%60near-sdk%20%3D%20%224.0.0%22%60%0A%20%20-%20%60borsh%20%3D%20%220.9.3%22%60%0A%20%20-%20%60bitvec%20%3D%20%221.0.0%22%60%0A%0A-%20%5Beth2-client%20contract%20functions%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Fblob%2Fmaster%2Fcontracts%2Fnear%2Feth2-client%2Fsrc%2Flib.rs)%3A%20provides%20the%20following%20functions%20in%20%60impl%20Eth2Client%60%0A%20%20-%20%60fn%20validate_light_client_update(%26self%2C%20update%3A%20%26LightClientUpdate)%60%0A%20%20-%20%60fn%20verify_finality_branch(%26self%2C%20update%3A%20%26LightClientUpdate%2C%20finalized_period%3A%20u64)%60%0A%20%20-%20%60fn%20verify_bls_signatures(%26self%2C%20update%3A%20%26LightClientUpdate%2C%20sync_committee_bits%3A%20BitVec%3Cu8%3E%2C%20finalized_period%3A%20u64%2C)%60%0A%20%20-%20%60fn%20update_finalized_header(%26mut%20self%2C%20finalized_header%3A%20ExtendedBeaconBlockHeader)%60%0A%20%20-%20%60fn%20commit_light_client_update(%26mut%20self%2C%20update%3A%20LightClientUpdate)%60%0A%20%20-%20%60fn%20gc_finalized_execution_blocks(%26mut%20self%2C%20mut%20header_number%3A%20u64)%60%0A%20%20-%20%60fn%20update_submitter(%26mut%20self%2C%20submitter%3A%20%26AccountId%2C%20value%3A%20i64)%60%0A%20%20-%20%60fn%20is_light_client_update_allowed(%26self)%60%0A-%20%5BEth2NearRelay%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Fblob%2Fmaster%2Feth2near%2Feth2near-block-relay-rs%2Fsrc%2Feth2near_relay.rs%23L84)%3A%20has%20the%20following%20public%20structure%0A%0A%20%20%60%60%60%0A%20%20pub%20struct%20Eth2NearRelay%20%7B%0A%20%20%20%20%20%20beacon_rpc_client%3A%20BeaconRPCClient%2C%0A%20%20%20%20%20%20eth1_rpc_client%3A%20Eth1RPCClient%2C%0A%20%20%20%20%20%20near_rpc_client%3A%20NearRPCClient%2C%0A%20%20%20%20%20%20eth_client_contract%3A%20Box%3Cdyn%20EthClientContractTrait%3E%2C%0A%20%20%20%20%20%20headers_batch_size%3A%20u64%2C%0A%20%20%20%20%20%20ethereum_network%3A%20String%2C%0A%20%20%20%20%20%20interval_between_light_client_updates_submission_in_epochs%3A%20u64%2C%0A%20%20%20%20%20%20max_blocks_for_finalization%3A%20u64%2C%0A%20%20%20%20%20%20near_network_name%3A%20String%2C%0A%20%20%20%20%20%20last_slot_searcher%3A%20LastSlotSearcher%2C%0A%20%20%20%20%20%20terminate%3A%20bool%2C%0A%20%20%20%20%20%20submit_only_finalized_blocks%3A%20bool%2C%0A%20%20%20%20%20%20next_light_client_update%3A%20Option%3CLightClientUpdate%3E%2C%0A%20%20%20%20%20%20sleep_time_on_sync_secs%3A%20u64%2C%0A%20%20%20%20%20%20sleep_time_after_submission_secs%3A%20u64%2C%0A%20%20%20%20%20%20max_submitted_blocks_by_account%3A%20u32%2C%0A%20%20%7D%0A%20%20%60%60%60%0A%0A-%20%5BEth2NearRelay%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Fblob%2Fmaster%2Feth2near%2Feth2near-block-relay-rs%2Fsrc%2Feth2near_relay.rs%23L103)%3A%20Implements%20the%20following%20functions%0A%20%20-%20%60fn%20get_max_slot_for_submission(%26self)%20-%3E%20Result%3Cu64%2C%20Box%3Cdyn%20Error%3E%3E%60%0A%20%20-%20%60fn%20get_last_eth2_slot_on_near(%26mut%20self%2C%20max_slot%3A%20u64)%20-%3E%20Result%3Cu64%2C%20Box%3Cdyn%20Error%3E%3E%60%0A%20%20-%20%60fn%20get_last_finalized_slot_on_near(%26self)%20-%3E%20Result%3Cu64%2C%20Box%3Cdyn%20Error%3E%3E%60%0A%20%20-%20%60fn%20get_last_finalized_slot_on_eth(%26self)%20-%3E%20Result%3Cu64%2C%20Box%3Cdyn%20Error%3E%3E%60%0A%20%20-%20**%60pub%20fn%20run(%26mut%20self%2C%20max_iterations%3A%20Option%3Cu64%3E)%60**%0A%20%20-%20%60fn%20wait_for_synchronization(%26self)%20-%3E%20Result%3C()%2C%20Box%3Cdyn%20Error%3E%3E%60%0A%20%20-%20%60fn%20get_light_client_update_from_file(config%3A%20%26Config%2C%20beacon_rpc_client%3A%20%26BeaconRPCClient%2C)%20-%3E%20Result%3COption%3CLightClientUpdate%3E%2C%20Box%3Cdyn%20Error%3E%3E%60%0A%20%20-%20%60fn%20set_terminate(%26mut%20self%2C%20iter_id%3A%20u64%2C%20max_iterations%3A%20Option%3Cu64%3E)%60%0A%20%20-%20%60fn%20get_execution_blocks_between(%26self%2C%20start_slot%3A%20u64%2C%20last_eth2_slot_on_eth_chain%3A%20u64%2C)%20-%3E%20Result%3C(Vec%3CBlockHeader%3E%2C%20u64)%2C%20Box%3Cdyn%20Error%3E%3E%60%0A%20%20-%20%60fn%20submit_execution_blocks(%26mut%20self%2C%20headers%3A%20Vec%3CBlockHeader%3E%2C%20current_slot%3A%20u64%2Clast_eth2_slot_on_near%3A%20%26mut%20u64%2C)%60%0A%20%20-%20%60fn%20verify_bls_signature_for_finality_update(%26mut%20self%2C%20light_client_update%3A%20%26LightClientUpdate%2C)%20-%3E%20Result%3Cbool%2C%20Box%3Cdyn%20Error%3E%3E%60%0A%20%20-%20%60fn%20get_execution_block_by_slot(%26self%2C%20slot%3A%20u64)%20-%3E%20Result%3CBlockHeader%2C%20Box%3Cdyn%20Error%3E%3E%60%0A%0A-%20%5BEth2NearRelay%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Fblob%2Fmaster%2Feth2near%2Feth2near-block-relay-rs%2Fsrc%2Feth2near_relay.rs%23L461)%3A%20has%20a%20second%20implementation%20of%20functions%20for%20submitting%20light%20client%20updates%0A%20%20-%20%60fn%20is_enough_blocks_for_light_client_update(%26self%2C%20last_submitted_slot%3A%20u64%2Clast_finalized_slot_on_near%3A%20u64%2C%20last_finalized_slot_on_eth%3A%20u64%2C)%20-%3E%20bool%60%0A%20%20-%20%60fn%20is_shot_run_mode(%26self)%20-%3E%20bool%60%0A%20%20-%20%60fn%20send_light_client_updates_with_checks(%26mut%20self%2C%20last_submitted_slot%3A%20u64)%20-%3E%20bool%60%0A%20%20-%20%60fn%20send_light_client_updates(%26mut%20self%2C%20last_submitted_slot%3A%20u64%2C%20last_finalized_slot_on_near%3A%20u64%2C%20last_finalized_slot_on_eth%3A%20u64%2C)%60%0A%20%20-%20%60fn%20send_light_client_update_from_file(%26mut%20self%2C%20last_submitted_slot%3A%20u64)%60%0A%20%20-%20%60fn%20send_regular_light_client_update(%26mut%20self%2C%20last_finalized_slot_on_eth%3A%20u64%2Clast_finalized_slot_on_near%3A%20u64%2C)%60%0A%20%20-%20%60fn%20get_attested_slot(%26mut%20self%2C%20last_finalized_slot_on_near%3A%20u64%2C)%20-%3E%20Result%3Cu64%2C%20Box%3Cdyn%20Error%3E%3E%60%0A%20%20-%20%60fn%20send_hand_made_light_client_update(%26mut%20self%2C%20last_finalized_slot_on_near%3A%20u64)%60%0A%20%20-%20%60fn%20send_specific_light_client_update(%26mut%20self%2C%20light_client_update%3A%20LightClientUpdate)%60%0A%0A-%20%5Beth2-contract-init%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Ftree%2Fmaster%2Feth2near%2Feth2-contract-init)%20includes%20(but%20not%20limited%20to)%20the%20following%20additional%20components%0A%20%20-%20%5Binit_contract.rs%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Fblob%2Fmaster%2Feth2near%2Feth2-contract-init%2Fsrc%2Finit_contract.rs)%3A%20Verifies%20light%20client%20snapshot%20and%20initializes%20the%20Ethereum%20Light%20Contract%20on%20Near.%0A%20%20%20%20-%20%60pub%20fn%20verify_light_client_snapshot(block_root%3A%20String%2C%20light_client_snapshot%3A%20%26LightClientSnapshotWithProof%2C)%20-%3E%20bool%60%3A%20Verifies%20the%20light%20client%20by%20checking%20the%20snapshot%20format%20getting%20the%20current%20consensus%20branch%20and%20verifying%20it%20via%20a%20merkle%20proof.%0A%20%20%20%20-%20%60pub%20fn%20init_contract(config%3A%20%26Config%2C%20eth_client_contract%3A%20%26mut%20EthClientContract%2C%20mut%20init_block_root%3A%20String%2C)%20-%3E%20Result%3C()%2C%20Box%3Cdyn%20std%3A%3Aerror%3A%3AError%3E%3E%60%3A%20Initializes%20the%20Ethereum%20Light%20Client%20Contract%20on%20Near.%0A-%20%5Beth_rpc_client%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Ftree%2Fmaster%2Feth2near%2Feth_rpc_client)%20includes%20(but%20not%20limited%20to)%20the%20following%20additional%20components%0A%20%20-%20%5Beth1_rpc_client.rs%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Fblob%2Fmaster%2Feth2near%2Feth2near-block-relay-rs%2Fsrc%2Feth1_rpc_client.rs)%3A%20Is%20used%20to%20get%20block%20headers%20and%20check%20sync%20status.%20It%20has%20the%20following%20functions%0A%20%20%20%20-%20%60pub%20fn%20new(endpoint_url%3A%20%26str)%20-%3E%20Self%60%0A%20%20%20%20-%20%60pub%20fn%20get_block_header_by_number(%26self%2C%20number%3A%20u64)%20-%3E%20Result%3CBlockHeader%2C%20Box%3Cdyn%20Error%3E%3E%60%0A%20%20%20%20-%20%60pub%20fn%20is_syncing(%26self)%20-%3E%20Result%3Cbool%2C%20Box%3Cdyn%20Error%3E%3E%60%0A%20%20-%20%5Bexecution_block_proof.rs%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Fblob%2Fmaster%2Feth2near%2Feth2near-block-relay-rs%2Fsrc%2Fexecution_block_proof.rs)%3A%20%60ExecutionBlockProof%60%20contains%20a%20%60block_hash%60%20(execution%20block)%20and%20a%20proof%20of%20its%20inclusion%20in%20the%20%60BeaconBlockBody%60%20tree%20hash.%20The%20%60block_hash%60%20is%20the%2012th%20field%20in%20execution_payload%2C%20which%20is%20the%209th%20field%20in%20%60BeaconBlockBody%60.%20The%20first%204%20elements%20in%20proof%20correspondent%20to%20the%20proof%20of%20inclusion%20of%20%60block_hash%60%20in%20Merkle%20tree%20built%20for%20%60ExecutionPayload%60.%20The%20last%204%20elements%20of%20the%20proof%20of%20%60ExecutionPayload%60%20in%20the%20Merkle%20tree%20are%20built%20on%20high-level%20%60BeaconBlockBody%60%20fields.%20The%20proof%20starts%20from%20the%20leaf.%20It%20has%20the%20following%20structure%20and%20functions%0A%20%20%20%20-%20%60pub%20struct%20ExecutionBlockProof%20%7Bblock_hash%3A%20H256%2C%20proof%3A%20%5BH256%3B%20Self%3A%3APROOF_SIZE%5D%2C%7D%60%0A%20%20%20%20-%20%60pub%20fn%20construct_from_raw_data(block_hash%3A%20%26H256%2C%20proof%3A%20%26%5BH256%3B%20Self%3A%3APROOF_SIZE%5D)%20-%3E%20Self%60%0A%20%20%20%20-%20%60pub%20fn%20construct_from_beacon_block_body(beacon_block_body%3A%20%26BeaconBlockBody%3CMainnetEthSpec%3E%2C)%20-%3E%20Result%3CSelf%2C%20Box%3Cdyn%20Error%3E%3E%60%0A%20%20%20%20-%20%60pub%20fn%20get_proof(%26self)%20-%3E%20%5BH256%3B%20Self%3A%3APROOF_SIZE%5D%60%0A%20%20%20%20-%20%60pub%20fn%20get_execution_block_hash(%26self)%20-%3E%20H256%60%0A%20%20%20%20-%20%60pub%20fn%20verify_proof_for_hash(%26self%2C%20beacon_block_body_hash%3A%20%26H256%2C)%20-%3E%20Result%3Cbool%2C%20IncorrectBranchLength%3E%60%0A%20%20%20%20-%20%60fn%20merkle_root_from_branch(leaf%3A%20H256%2C%20branch%3A%20%26%5BH256%5D%2C%20depth%3A%20usize%2C%20index%3A%20usize%2C)%20-%3E%20Result%3CH256%2C%20IncorrectBranchLength%3E%60%0A%20%20-%20%5Bbeacon_block_body_merkle_tree.rs%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Fblob%2Fmaster%2Feth2near%2Feth_rpc_client%2Fsrc%2Fbeacon_block_body_merkle_tree.rs)%3A%20implements%20merkle%20trees%20for%20the%20Beacon%20and%20the%20ExecutionPayload%0A%20%20%20%20-%20%60BeaconBlockBodyMerkleTree%60%20is%20built%20on%20the%20%60BeaconBlockBody%60%20data%20structure%2C%20where%20the%20leaves%20of%20the%20Merkle%20Tree%20are%20the%20hashes%20of%20the%20high-level%20fields%20of%20the%20%60BeaconBlockBody%60.%20The%20hashes%20of%20each%20element%20are%20produced%20by%20using%20%60ssz%60%20serialization.%0A%20%20%20%20-%20%60ExecutionPayloadMerkleTree%60%20is%20a%20built%20on%20the%20%60ExecutionPayload%60%20data%20structure%2C%20where%20the%20leaves%20of%20the%20Merkle%20Tree%20are%20the%20hashes%20of%20the%20high-level%20fields%20of%20the%20%60ExecutionPayload%60.%20The%20hashes%20of%20each%20element%20are%20produced%20by%20using%20%60ssz%60%20serialization.%20%60ExecutionPayload%60%20is%20one%20of%20the%20field%20in%20BeaconBlockBody.%20The%20hash%20of%20the%20root%20of%20%60ExecutionPlayloadMerkleTree%60%20is%20the%209th%20leaf%20in%20BeaconBlockBody%20Merkle%20Tree.%0A%20%20-%20%5Bbeacon_rpc_client.rs%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Fblob%2Fmaster%2Feth2near%2Feth_rpc_client%2Fsrc%2Fbeacon_rpc_client.rs)%3A%20allows%20getting%20beacon%20block%20body%2C%20beacon%20block%20header%20and%20light%20client%20updates%20using%20%5BBeacon%20RPC%20API%5D(https%3A%2F%2Fethereum.github.io%2Fbeacon-APIs%2F).%20It%20has%20the%20following%20functions%0A%20%20%20%20-%20%60pub%20fn%20new(endpoint_url%3A%20%26str%2C%20timeout_seconds%3A%20u64%2C%20timeout_state_seconds%3A%20u64)%20-%3E%20Self%60%3A%20Creates%20%60BeaconRPCClient%60%20for%20the%20given%20BeaconAPI%20%60endpoint_url%60%0A%20%20%20%20-%20%60pub%20fn%20get_beacon_block_body_for_block_id(%26self%2C%20block_id%3A%20%26str%2C)%20-%3E%20Result%3CBeaconBlockBody%3CMainnetEthSpec%3E%2C%20Box%3Cdyn%20Error%3E%3E%60%3A%20Returns%20%60BeaconBlockBody%60%20struct%20for%20the%20given%20%60block_id%60.%20It%20uses%20the%20following%20arguments%0A%20%20%20%20%20%20-%20%60block_id%60%20-%20Block%20identifier.%20Can%20be%20one%20of%3A%20%60%22head%22%20(canonical%20head%20in%20node's%20view)%2C%22genesis%22%2C%20%22finalized%22%2C%20%3Cslot%3E%2C%20%3Chex%20encoded%20blockRoot%20with%200x%20prefix%3E%60(see%20%5Bbeacon-APIs%2F%23%2FBeacon%2FgetBlockV2%5D(https%3A%2F%2Fethereum.github.io%2Fbeacon-APIs%2F%23%2FBeacon%2FgetBlockV2)).%0A%20%20%20%20-%20%60pub%20fn%20get_beacon_block_header_for_block_id(%26self%2C%20block_id%3A%20%26str%2C)%20-%3E%20Result%3Ctypes%3A%3ABeaconBlockHeader%2C%20Box%3Cdyn%20Error%3E%3E%60%3A%20Returns%20%60BeaconBlockHeader%60%20struct%20for%20the%20given%20%60block_id%60.%20It%20uses%20the%20following%20arguments%0A%20%20%20%20%20%20-%20%60block_id%60%20-%20Block%20identifier.%20Can%20be%20one%20of%3A%20%60%22head%22%20(canonical%20head%20in%20node's%20view)%2C%22genesis%22%2C%20%22finalized%22%2C%20%3Cslot%3E%2C%20%3Chex%20encoded%20blockRoot%20with%200x%20prefix%3E%60(see%20%5Bbeacon-APIs%2F%23%2FBeacon%2FgetBlockV2%5D(https%3A%2F%2Fethereum.github.io%2Fbeacon-APIs%2F%23%2FBeacon%2FgetBlockV2)).%0A%20%20%20%20-%20%60pub%20fn%20get_light_client_update(%26self%2C%20period%3A%20u64%2C)%20-%3E%20Result%3CLightClientUpdate%2C%20Box%3Cdyn%20Error%3E%3E%60%3A%20Returns%20%60LightClientUpdate%60%20struct%20for%20the%20given%20%60period%60.%20It%20uses%20the%20following%20arguments%0A%20%20%20%20%20%20-%20%60period%60%20-%20period%20id%20for%20which%20%60LightClientUpdate%60%20is%20fetched.%20On%20Mainnet%2C%20one%20period%20consists%20of%20256%20epochs%2C%20and%20one%20epoch%20consists%20of%2032%20slots%0A%20%20%20%20-%20%60pub%20fn%20get_bootstrap(%26self%2C%20block_root%3A%20String%2C)%20-%3E%20Result%3CLightClientSnapshotWithProof%2C%20Box%3Cdyn%20Error%3E%3E%60%3A%20Fetch%20a%20bootstrapping%20state%20with%20a%20proof%20to%20a%20trusted%20block%20root.%20The%20trusted%20block%20root%20should%20be%20fetched%20with%20similar%20means%20to%20a%20weak%20subjectivity%20checkpoint.%20Only%20block%20roots%20for%20checkpoints%20are%20guaranteed%20to%20be%20available.%0A%20%20%20%20-%20%60pub%20fn%20get_checkpoint_root(%26self)%20-%3E%20Result%3CString%2C%20Box%3Cdyn%20Error%3E%3E%60%0A%20%20%20%20-%20%60pub%20fn%20get_last_finalized_slot_number(%26self)%20-%3E%20Result%3Ctypes%3A%3ASlot%2C%20Box%3Cdyn%20Error%3E%3E%60%3A%20Return%20the%20last%20finalized%20slot%20in%20the%20Beacon%20chain%0A%20%20%20%20-%20%60pub%20fn%20get_last_slot_number(%26self)%20-%3E%20Result%3Ctypes%3A%3ASlot%2C%20Box%3Cdyn%20Error%3E%3E%60%3A%20Return%20the%20last%20slot%20in%20the%20Beacon%20chain%0A%20%20%20%20-%20%60pub%20fn%20get_slot_by_beacon_block_root(%26self%2C%20beacon_block_hash%3A%20H256%2C)%20-%3E%20Result%3Cu64%2C%20Box%3Cdyn%20Error%3E%3E%60%0A%20%20%20%20-%20%60pub%20fn%20get_block_number_for_slot(%26self%2C%20slot%3A%20types%3A%3ASlot)%20-%3E%20Result%3Cu64%2C%20Box%3Cdyn%20Error%3E%3E%60%0A%20%20%20%20-%20%60pub%20fn%20get_finality_light_client_update(%26self)%20-%3E%20Result%3CLightClientUpdate%2C%20Box%3Cdyn%20Error%3E%3E%60%0A%20%20%20%20-%20%60pub%20fn%20get_finality_light_client_update_with_sync_commity_update(%26self%2C)%20-%3E%20Result%3CLightClientUpdate%2C%20Box%3Cdyn%20Error%3E%3E%60%0A%20%20%20%20-%20%60pub%20fn%20get_beacon_state(%26self%2C%20state_id%3A%20%26str%2C)%20-%3E%20Result%3CBeaconState%3CMainnetEthSpec%3E%2C%20Box%3Cdyn%20Error%3E%3E%60%0A%20%20%20%20-%20%60pub%20fn%20is_syncing(%26self)%20-%3E%20Result%3Cbool%2C%20Box%3Cdyn%20Error%3E%3E%60%0A%20%20%20%20-%20%60fn%20get_json_from_client(client%3A%20%26Client%2C%20url%3A%20%26str)%20-%3E%20Result%3CString%2C%20Box%3Cdyn%20Error%3E%3E%60%0A%20%20%20%20-%20%60fn%20get_json_from_raw_request(%26self%2C%20url%3A%20%26str)%20-%3E%20Result%3CString%2C%20Box%3Cdyn%20Error%3E%3E%60%0A%20%20%20%20-%20%60fn%20get_body_json_from_rpc_result(block_json_str%3A%20%26str%2C)%20-%3E%20Result%3Cstd%3A%3Astring%3A%3AString%2C%20Box%3Cdyn%20Error%3E%3E%60%0A%20%20%20%20-%20%60fn%20get_header_json_from_rpc_result(json_str%3A%20%26str%2C)%20-%3E%20Result%3Cstd%3A%3Astring%3A%3AString%2C%20Box%3Cdyn%20Error%3E%3E%60%0A%20%20%20%20-%20%60fn%20get_attested_header_from_light_client_update_json_str(light_client_update_json_str%3A%20%26str%2C)%20-%3E%20Result%3CBeaconBlockHeader%2C%20Box%3Cdyn%20Error%3E%3E%60%0A%20%20%20%20-%20%60fn%20get_sync_aggregate_from_light_client_update_json_str(light_client_update_json_str%3A%20%26str%2C)%20-%3E%20Result%3CSyncAggregate%2C%20Box%3Cdyn%20Error%3E%3E%60%0A%20%20%20%20-%20%60fn%20get_signature_slot(%26self%2C%20light_client_update_json_str%3A%20%26str%2C)%20-%3E%20Result%3CSlot%2C%20Box%3Cdyn%20Error%3E%3E%60%3A%20%60signature_slot%60%20is%20not%20provided%20in%20the%20current%20API.%20The%20slot%20is%20brute-forced%20until%20%60SyncAggregate%60%20in%20%60BeconBlockBody%60%20in%20the%20current%20slot%20is%20equal%20to%20%60SyncAggregate%60%20in%20%60LightClientUpdate%60%0A%20%20%20%20-%20%60fn%20get_finality_update_from_light_client_update_json_str(%26self%2C%20light_client_update_json_str%3A%20%26str%2C)%20-%3E%20Result%3CFinalizedHeaderUpdate%2C%20Box%3Cdyn%20Error%3E%3E%60%0A%20%20%20%20-%20%60fn%20get_sync_committee_update_from_light_client_update_json_str(light_client_update_json_str%3A%20%26str%2C)%20-%3E%20Result%3CSyncCommitteeUpdate%2C%20Box%3Cdyn%20Error%3E%3E%60%0A%20%20%20%20-%20%60pub%20fn%20get_period_for_slot(slot%3A%20u64)%20-%3E%20u64%60%0A%20%20%20%20-%20%60pub%20fn%20get_non_empty_beacon_block_header(%26self%2C%20start_slot%3A%20u64%2C)%20-%3E%20Result%3Ctypes%3A%3ABeaconBlockHeader%2C%20Box%3Cdyn%20Error%3E%3E%60%0A%20%20%20%20-%20%60fn%20check_block_found_for_slot(%26self%2C%20json_str%3A%20%26str)%20-%3E%20Result%3C()%2C%20Box%3Cdyn%20Error%3E%3E%60%0A%20%20-%20%5Bhand_made_finality_light_client_update.rs%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Fblob%2Fmaster%2Feth2near%2Feth_rpc_client%2Fsrc%2Fhand_made_finality_light_client_update.rs)%3A%20Has%20two%20implementations%0A%20%20%20%20-%20The%20first%20implementation%20which%20calls%20functions%20in%20the%20second%0A%20%20%20%20%20%20-%20%60pub%20fn%20get_finality_light_client_update(beacon_rpc_client%3A%20%26BeaconRPCClient%2C%20attested_slot%3A%20u64%2C%20include_next_sync_committee%3A%20bool%2C)%20-%3E%20Result%3CLightClientUpdate%2C%20Box%3Cdyn%20Error%3E%3E%60%0A%20%20%20%20%20%20-%20%60pub%20fn%20get_finality_light_client_update_from_file(beacon_rpc_client%3A%20%26BeaconRPCClient%2C%20file_name%3A%20%26str%2C)%20-%3E%20Result%3CLightClientUpdate%2C%20Box%3Cdyn%20Error%3E%3E%60%0A%20%20%20%20%20%20-%20%60pub%20fn%20get_light_client_update_from_file_with_next_sync_committee(beacon_rpc_client%3A%20%26BeaconRPCClient%2C%20attested_state_file_name%3A%20%26str%2C%20finality_state_file_name%3A%20%26str%2C)%20-%3E%20Result%3CLightClientUpdate%2C%20Box%3Cdyn%20Error%3E%3E%60%0A%20%20%20%20-%20The%20second%20implementation%0A%20%20%20%20%20%20-%20%60fn%20get_attested_slot_with_enough_sync_committee_bits_sum(beacon_rpc_client%3A%20%26BeaconRPCClient%2Cattested_slot%3A%20u64%2C)%20-%3E%20Result%3C(u64%2C%20u64)%2C%20Box%3Cdyn%20Error%3E%3E%60%0A%20%20%20%20%20%20-%20%60fn%20get_state_from_file(file_name%3A%20%26str)%20-%3E%20Result%3CBeaconState%3CMainnetEthSpec%3E%2C%20Box%3Cdyn%20Error%3E%3E%60%0A%20%20%20%20%20%20-%20%60fn%20get_finality_light_client_update_for_state(beacon_rpc_client%3A%20%26BeaconRPCClient%2Cattested_slot%3A%20u64%2C%20signature_slot%3A%20u64%2C%20beacon_state%3A%20BeaconState%3CMainnetEthSpec%3E%2C%20finality_beacon_state%3A%20Option%3CBeaconState%3CMainnetEthSpec%3E%3E%2C)%20-%3E%20Result%3CLightClientUpdate%2C%20Box%3Cdyn%20Error%3E%3E%60%0A%20%20%20%20%20%20-%20%60fn%20get_next_sync_committee(beacon_state%3A%20%26BeaconState%3CMainnetEthSpec%3E%2C)%20-%3E%20Result%3CSyncCommitteeUpdate%2C%20Box%3Cdyn%20Error%3E%3E%60%0A%20%20%20%20%20%20-%20%60fn%20from_lighthouse_beacon_header(beacon_header%3A%20%26BeaconBlockHeader%2C)%20-%3E%20eth_types%3A%3Aeth2%3A%3ABeaconBlockHeader%60%0A%20%20%20%20%20%20-%20%60fn%20get_sync_committee_bits(sync_committee_signature%3A%20%26types%3A%3ASyncAggregate%3CMainnetEthSpec%3E%2C)%20-%3E%20Result%3C%5Bu8%3B%2064%5D%2C%20Box%3Cdyn%20Error%3E%3E%60%0A%20%20%20%20%20%20-%20%60fn%20get_finality_branch(beacon_state%3A%20%26BeaconState%3CMainnetEthSpec%3E%2C)%20-%3E%20Result%3CVec%3CH256%3E%2C%20Box%3Cdyn%20Error%3E%3E%60%0A%20%20%20%20%20%20-%20%60fn%20get_finality_update(finality_header%3A%20%26BeaconBlockHeader%2C%20beacon_state%3A%20%26BeaconState%3CMainnetEthSpec%3E%2C%20finalized_block_body%3A%20%26BeaconBlockBody%3CMainnetEthSpec%3E%2C)%20-%3E%20Result%3CFinalizedHeaderUpdate%2C%20Box%3Cdyn%20Error%3E%3E%60%0A%20%20-%20%5Blight_client_snapshot_with_proof.rs%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Fblob%2Fmaster%2Feth2near%2Feth_rpc_client%2Fsrc%2Flight_client_snapshot_with_proof.rs)%3A%20contains%20the%20structure%20for%20%60LightClientSnapshotWithProof%60%0A%0A%20%20%20%20%20%20%20%20%60%60%60%0A%20%20%20%20%20%20%20%20pub%20struct%20LightClientSnapshotWithProof%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20pub%20beacon_header%3A%20BeaconBlockHeader%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20pub%20current_sync_committee%3A%20SyncCommittee%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20pub%20current_sync_committee_branch%3A%20Vec%3CH256%3E%2C%0A%20%20%20%20%20%20%20%20%7D%0A%20%20%20%20%20%20%20%20%60%60%60%0A%0A-%20%5Beth2near-block-relay-rs%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Ftree%2Fmaster%2Feth2near%2Feth2near-block-relay-rs)%20includes%20(but%20not%20limited%20to)%20the%20following%20additional%20components%0A%20%20-%20%5Bconfig.rs%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Fblob%2Fmaster%2Feth2near%2Feth2near-block-relay-rs%2Fsrc%2Fconfig.rs)%3A%0A%20%20-%20%5Blast_slot_searcher.rs%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Fblob%2Fmaster%2Feth2near%2Feth2near-block-relay-rs%2Fsrc%2Flast_slot_searcher.rs)%3A%20Implementation%20of%20functions%20for%20searching%20last%20slot%20on%20NEAR%20contract.%20Supports%20both%20binary%20and%20linear%20searches.%0A%20%20%20%20-%20%60pub%20fn%20get_last_slot(%26mut%20self%2C%20last_eth_slot%3A%20u64%2C%20beacon_rpc_client%3A%20%26BeaconRPCClient%2C%20eth_client_contract%3A%20%26Box%3Cdyn%20EthClientContractTrait%3E%2C)%20-%3E%20Result%3Cu64%2C%20Box%3Cdyn%20Error%3E%3E%60%0A%20%20%20%20-%20%60n%20binary_slot_search(%26self%2C%20slot%3A%20u64%2C%20finalized_slot%3A%20u64%2C%20last_eth_slot%3A%20u64%2C%20beacon_rpc_client%3A%20%26BeaconRPCClient%2C%20eth_client_contract%3A%20%26Box%3Cdyn%20EthClientContractTrait%3E%2C)%20-%3E%20Result%3Cu64%2C%20Box%3Cdyn%20Error%3E%3E%60%20%3A%20Search%20for%20the%20slot%20before%20the%20first%20unknown%20slot%20on%20NEAR.%20Assumptions%3A%20(1)%20start_slot%20is%20known%20on%20NEAR%20(2)%20last_slot%20is%20unknown%20on%20NEAR.%20Return%20error%20in%20case%20of%20problem%20with%20network%20connection.%0A%20%20%20%20-%20%60fn%20binsearch_slot_forward(%26self%2C%20slot%3A%20u64%2C%20max_slot%3A%20u64%2C%20beacon_rpc_client%3A%20%26BeaconRPCClient%2Ceth_client_contract%3A%20%26Box%3Cdyn%20EthClientContractTrait%3E%2C)%20-%3E%20Result%3Cu64%2C%20Box%3Cdyn%20Error%3E%3E%20%7B%60%3A%20Search%20for%20the%20slot%20before%20the%20first%20unknown%20slot%20on%20NEAR.%20Assumptions%3A%20(1)%20start_slot%20is%20known%20on%20NEAR%20(2)%20last_slot%20is%20unknown%20on%20NEAR.%20Return%20error%20in%20case%20of%20problem%20with%20network%20connection.%0A%20%20%20%20-%20%60fn%20binsearch_slot_range(%26self%2C%20start_slot%3A%20u64%2C%20last_slot%3A%20u64%2C%20beacon_rpc_client%3A%20%26BeaconRPCClient%2C%20eth_client_contract%3A%20%26Box%3Cdyn%20EthClientContractTrait%3E%2C)%20-%3E%20Result%3Cu64%2C%20Box%3Cdyn%20Error%3E%3E%60%3A%20Search%20for%20the%20slot%20before%20the%20first%20unknown%20slot%20on%20NEAR.%20Assumptions%3A%20(1)%20start_slot%20is%20known%20on%20NEAR%20(2)%20last_slot%20is%20unknown%20on%20NEAR.%20Return%20error%20in%20case%20of%20problem%20with%20network%20connection.%0A%20%20%20%20-%20%60fn%20linear_slot_search(%26self%2C%20slot%3A%20u64%2C%20finalized_slot%3A%20u64%2C%20last_eth_slot%3A%20u64%2C%20beacon_rpc_client%3A%20%26BeaconRPCClient%2C%20eth_client_contract%3A%20%26Box%3Cdyn%20EthClientContractTrait%3E%2C)%20-%3E%20Result%3Cu64%2C%20Box%3Cdyn%20Error%3E%3E%60%3A%20Returns%20the%20last%20slot%20known%20with%20block%20known%20on%20NEAR.%20%60Slot%60%20--%20expected%20last%20known%20slot.%20%60finalized_slot%60%20--%20last%20finalized%20slot%20on%20NEAR%2C%20assume%20as%20known%20slot.%20%60last_eth_slot%60%20--%20head%20slot%20on%20Eth.%0A%20%20%20%20-%20%60fn%20linear_search_forward(%26self%2C%20slot%3A%20u64%2C%20max_slot%3A%20u64%2C%20beacon_rpc_client%3A%20%26BeaconRPCClient%2Ceth_client_contract%3A%20%26Box%3Cdyn%20EthClientContractTrait%3E%2C)%20-%3E%20Result%3Cu64%2C%20Box%3Cdyn%20Error%3E%3E%60%3A%20Returns%20the%20slot%20before%20the%20first%20unknown%20block%20on%20NEAR.%20The%20search%20range%20is%20%5Bslot%20..%20max_slot).%20If%20there%20is%20no%20unknown%20block%20in%20this%20range%20max_slot%20-%201%20will%20be%20returned.%20Assumptions%3A%20(1)%20block%20for%20slot%20is%20submitted%20to%20NEAR.%20(2)%20block%20for%20max_slot%20is%20not%20submitted%20to%20NEAR.%0A%20%20%20%20-%20%60fn%20linear_search_backward(%26self%2C%20start_slot%3A%20u64%2C%20last_slot%3A%20u64%2C%20beacon_rpc_client%3A%20%26BeaconRPCClient%2C%20eth_client_contract%3A%20%26Box%3Cdyn%20EthClientContractTrait%3E%2C)%20-%3E%20Result%3Cu64%2C%20Box%3Cdyn%20Error%3E%3E%60%3A%20Returns%20the%20slot%20before%20the%20first%20unknown%20block%20on%20NEAR.%20The%20search%20range%20is%20%5Blast_slot%20..%20start_slot).%20If%20no%20such%20block%20are%20found%20the%20start_slot%20will%20be%20returned.%20Assumptions%3A%20(1)%20block%20for%20start_slot%20is%20submitted%20to%20NEAR%20(2)%20block%20for%20last_slot%20%2B%201%20is%20not%20submitted%20to%20NEAR.%0A%20%20%20%20-%20%60fn%20find_left_non_error_slot(%26self%2C%20left_slot%3A%20u64%2C%20right_slot%3A%20u64%2C%20step%3A%20i8%2C%20beacon_rpc_client%3A%20%26BeaconRPCClient%2C%20eth_client_contract%3A%20%26Box%3Cdyn%20EthClientContractTrait%3E%2C)%20-%3E%20(u64%2C%20bool)%60%3A%20Find%20the%20leftmost%20non-empty%20slot.%20Search%20range%3A%20%5Bleft_slot%2C%20right_slot).%20Returns%20pair%3A%20(1)%20slot_id%20and%20(2)%20is%20this%20block%20already%20known%20on%20Eth%20client%20on%20NEAR.%20Assume%20that%20right_slot%20is%20non-empty%20and%20it's%20block%20were%20submitted%20to%20NEAR%2C%20so%20if%20non%20correspondent%20block%20is%20found%20we%20return%20(right_slot%2C%20false).%0A%20%20%20%20-%20%60fn%20block_known_on_near(%20%26self%2C%20slot%3A%20u64%2C%20beacon_rpc_client%3A%20%26BeaconRPCClient%2Ceth_client_contract%3A%20%26Box%3Cdyn%20EthClientContractTrait%3E%2C)%20-%3E%20Result%3Cbool%2C%20Box%3Cdyn%20Error%3E%3E%60%3A%20Check%20if%20the%20block%20for%20current%20slot%20in%20Eth2%20already%20were%20submitted%20to%20NEAR.%20Returns%20Error%20if%20slot%20doesn't%20contain%20any%20block.%0A%20%20-%20%5Bmain.rs%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Fblob%2Fmaster%2Feth2near%2Feth2near-block-relay-rs%2Fsrc%2Fmain.rs)%3A%20%5BCommand%20Line%20Argument%20Parser%5D(https%3A%2F%2Fdocs.rs%2Fclap%2Flatest%2Fclap%2F)%20used%20to%20run%20the%20Ethereum%20to%20Near%20Block%20Relay.%20It%20contains%20the%20following%20functions%0A%20%20%20%20-%20%60fn%20get_eth_contract_wrapper(config%3A%20%26Config)%20-%3E%20Box%3Cdyn%20ContractWrapper%3E%60%0A%20%20%20%20-%20%60fn%20get_dao_contract_wrapper(config%3A%20%26Config)%20-%3E%20Box%3Cdyn%20ContractWrapper%3E%60%0A%20%20%20%20-%20%60fn%20get_eth_client_contract(config%3A%20%26Config)%20-%3E%20Box%3Cdyn%20EthClientContractTrait%3E%60%0A%20%20%20%20-%20%60fn%20init_log(args%3A%20%26Arguments%2C%20config%3A%20%26Config)%60%0A%20%20%20%20-%20%60fn%20main()%20-%3E%20Result%3C()%2C%20Box%3Cdyn%20std%3A%3Aerror%3A%3AError%3E%3E%60%0A%20%20-%20%5Bnear_rpc_client.rs%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Fblob%2Fmaster%2Feth2near%2Feth2near-block-relay-rs%2Fsrc%2Fnear_rpc_client.rs)%0A%20%20%20%20-%20%60pub%20fn%20new(endpoint_url%3A%20%26str)%20-%3E%20Self%60%0A%20%20%20%20-%20%60pub%20fn%20check_account_exists(%26self%2C%20account_id%3A%20%26str)%20-%3E%20Result%3Cbool%2C%20Box%3Cdyn%20Error%3E%3E%60%0A%20%20%20%20-%20%60pub%20fn%20is_syncing(%26self)%20-%3E%20Result%3Cbool%2C%20Box%3Cdyn%20Error%3E%3E%60%0A%0A%23%23%23%23%20Ethereum%20Light%20Client%20Finality%20Update%20Verify%20Components%0A%0A%5Bfinality-update-verify%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Ftree%2Fmaster%2Feth2near%2Ffinality-update-verify)%20is%20called%20from%20%5Bfn%20verify_bls_signature_for_finality_update%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Fblob%2Fmaster%2Feth2near%2Feth2near-block-relay-rs%2Fsrc%2Feth2near_relay.rs%23L422)%20to%20verify%20signatures%20as%20part%20of%20light_client%20updates.%20It%20relies%20heavily%20on%20the%20%5Blighthouse%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Flighthouse)%20codebase%20for%20it's%20consensus%20and%20cryptogrphic%20primitives.%20See%20%5BCryptographic%20Primitives%5D(%23cryptographic-primitives)%20for%20more%20information.%0A%0A-%20Dependencies%20in%20%5BCargo.toml%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Fblob%2Fmaster%2Feth2near%2Ffinality-update-verify%2FCargo.toml)%0A%20%20-%20%60eth-types%20%3D%20%7B%20path%20%3D%22..%2F..%2Fcontracts%2Fnear%2Feth-types%2F%22%2C%20features%20%3D%20%5B%22eip1559%22%5D%7D%60%0A%20%20-%20%60bls%20%3D%20%7B%20git%20%3D%20%22https%3A%2F%2Fgithub.com%2Faurora-is-near%2Flighthouse.git%22%2C%20rev%20%3D%20%22b624c3f0d3c5bc9ea46faa14c9cb2d90ee1e1dec%22%20%7D%60%0A%20%20-%20%60eth2-utility%20%20%3D%20%7B%20path%20%3D%22..%2F..%2Fcontracts%2Fnear%2Feth2-utility%22%7D%60%0A%20%20-%20%60tree_hash%20%3D%20%7B%20git%20%3D%20%22https%3A%2F%2Fgithub.com%2Faurora-is-near%2Flighthouse.git%22%2C%20rev%20%3D%20%22b624c3f0d3c5bc9ea46faa14c9cb2d90ee1e1dec%22%20%7D%60%0A%20%20-%20%60types%20%3D%20%20%7B%20git%20%3D%20%22https%3A%2F%2Fgithub.com%2Faurora-is-near%2Flighthouse.git%22%2C%20rev%20%3D%20%22b624c3f0d3c5bc9ea46faa14c9cb2d90ee1e1dec%22%20%7D%60%0A%20%20-%20%60bitvec%20%3D%20%221.0.0%22%60%0A%0A-%20Functions%20in%20%5Blib.rs%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Fblob%2Fmaster%2Feth2near%2Ffinality-update-verify%2Fsrc%2Flib.rs)%0A%20%20-%20%60fn%20h256_to_hash256(hash%3A%20H256)%20-%3E%20Hash256%60%0A%20%20-%20%60fn%20tree_hash_h256_to_eth_type_h256(hash%3A%20tree_hash%3A%3AHash256)%20-%3E%20eth_types%3A%3AH256%60%0A%20%20-%20%60fn%20to_lighthouse_beacon_block_header(bridge_beacon_block_header%3A%20%26BeaconBlockHeader%2C)%20-%3E%20types%3A%3ABeaconBlockHeader%60%0A%20%20-%20%60pub%20fn%20is_correct_finality_update(ethereum_network%3A%20%26str%2C%20light_client_update%3A%20%26LightClientUpdate%2C%20%20%20sync_committee%3A%20SyncCommittee%2C)%20-%3E%20Result%3Cbool%2C%20Box%3Cdyn%20Error%3E%3E%60%0A%0A%23%23%23%23%20Cryptographic%20Primitives%0A%0AFollowing%20are%20cryptographic%20primitives%20used%20in%20the%20%5Beth2-client%20contract%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Ftree%2Fmaster%2Fcontracts%2Fnear%2Feth2-client)%20and%20%5Bfinality-update-verify%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Ftree%2Fmaster%2Feth2near%2Ffinality-update-verify).%20Many%20are%20from%20the%20%5Blighthouse%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Flighthouse)%20codebase.%20Specifically%20%5Bconsensus%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Flighthouse%2Ftree%2Fstable%2Fconsensus)%20and%20%5Bcrypto%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Flighthouse%2Ftree%2Fstable%2Fcrypto)%20functions.%0A%0ASome%20common%20primitives%0A%0A-%20%5Bbitvec%5D(https%3A%2F%2Fdocs.rs%2Fbitvec%2F1.0.1%2Fbitvec%2F)%3A%20Addresses%20memory%20by%20bits%2C%20for%20packed%20collections%20and%20bitfields%0A-%20%5Beth2_serde_utils%5D(https%3A%2F%2Fdocs.rs%2Feth2_serde_utils%2F0.1.0%2Feth2_serde_utils%2F)%3A%20Serialization%20and%20deserialization%20utilities%20useful%20for%20JSON%20representations%20of%20Ethereum%202.0%20types.%0A-%20%5Beth2_hashing%5D(https%3A%2F%2Fdocs.rs%2Feth2_hashing%2F0.2.0%2Feth2_hashing%2F)%3A%20Hashing%20primitives%20used%20in%20Ethereum%202.0%0A-%20%5Bblst%5D(https%3A%2F%2Fdocs.rs%2Fblst%2F0.3.10%2Fblst%2F)%3A%20The%20blst%20crate%20provides%20a%20rust%20interface%20to%20the%20blst%20BLS12-381%20signature%20library.%0A-%20%5Btree_hash%5D(https%3A%2F%2Fdocs.rs%2Ftree_hash%2F0.4.0%2Ftree_hash%2F)%3A%20Efficient%20Merkle-hashing%20as%20used%20in%20Ethereum%202.0%0A-%20%5Beth2_ssz_types%5D(https%3A%2F%2Fdocs.rs%2Feth2_ssz_types%2F0.2.1%2Fssz_types%2F)%3A%20Provides%20types%20with%20unique%20properties%20required%20for%20SSZ%20serialization%20and%20Merklization.%0A%0ASome%20Primitives%20from%20Lighthouse%0A%0A-%20%5Bbls%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Flighthouse%2Ftree%2Fstable%2Fcrypto%2Fbls)%3A%20%5BBoneh%E2%80%93Lynn%E2%80%93Shacham%5D(https%3A%2F%2Fen.wikipedia.org%2Fwiki%2FBLS_digital_signature)%20digital%20signature%20support%0A%20%20-%20%5Bimpls%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Flighthouse%2Ftree%2Fstable%2Fcrypto%2Fbls%2Fsrc%2Fimpls)%3A%20Implementations%0A%20%20%20%20-%20%5Bblst%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Flighthouse%2Fblob%2Fstable%2Fcrypto%2Fbls%2Fsrc%2Fimpls%2Fblst.rs)%0A%20%20%20%20-%20%5Bfake_crypto%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Flighthouse%2Fblob%2Fstable%2Fcrypto%2Fbls%2Fsrc%2Fimpls%2Ffake_crypto.rs)%0A%20%20%20%20-%20%5Bmilagro%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Flighthouse%2Fblob%2Fstable%2Fcrypto%2Fbls%2Fsrc%2Fimpls%2Fmilagro.rs)%3A%20support%20for%20%5BApache%20Milagro%5D(https%3A%2F%2Fmilagro.apache.org%2Fdocs%2Fmilagro-intro%2F)%0A%20%20%20%20-%20%5Bfunctionality%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Flighthouse%2Ftree%2Fstable%2Fcrypto%2Fbls%2Fsrc)%0A%20%20%20%20%20%20-%20%5Bgeneric_aggregate_public_key%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Flighthouse%2Fblob%2Fstable%2Fcrypto%2Fbls%2Fsrc%2Fgeneric_aggregate_public_key.rs)%0A%20%20%20%20%20%20-%20%5Bgeneric_aggregate_signature%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Flighthouse%2Fblob%2Fstable%2Fcrypto%2Fbls%2Fsrc%2Fgeneric_aggregate_signature.rs)%0A%20%20%20%20%20%20-%20%5Bgeneric_keypair%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Flighthouse%2Fblob%2Fstable%2Fcrypto%2Fbls%2Fsrc%2Fgeneric_keypair.rs)%0A%20%20%20%20%20%20-%20%5Bgeneric_public_key%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Flighthouse%2Fblob%2Fstable%2Fcrypto%2Fbls%2Fsrc%2Fgeneric_public_key.rs)%0A%20%20%20%20%20%20-%20%5Bgeneric_public_key_bytes%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Flighthouse%2Fblob%2Fstable%2Fcrypto%2Fbls%2Fsrc%2Fgeneric_public_key_bytes.rs)%0A%20%20%20%20%20%20-%20%5Bgeneric_secret_key%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Flighthouse%2Fblob%2Fstable%2Fcrypto%2Fbls%2Fsrc%2Fgeneric_secret_key.rs)%0A%20%20%20%20%20%20-%20%5Bgeneric_signature%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Flighthouse%2Fblob%2Fstable%2Fcrypto%2Fbls%2Fsrc%2Fgeneric_signature.rs)%0A%20%20%20%20%20%20-%20%5Bgeneric_signature_bytes%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Flighthouse%2Fblob%2Fstable%2Fcrypto%2Fbls%2Fsrc%2Fgeneric_signature_bytes.rs)%0A%20%20%20%20%20%20-%20%5Bgeneric_signature_set%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Flighthouse%2Fblob%2Fstable%2Fcrypto%2Fbls%2Fsrc%2Fgeneric_signature_set.rs)%0A%20%20%20%20%20%20-%20%5Bget_withdrawal_credentials%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Flighthouse%2Fblob%2Fstable%2Fcrypto%2Fbls%2Fsrc%2Fget_withdrawal_credentials.rs)%0A%20%20%20%20%20%20-%20%5Bzeroize_hash%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Flighthouse%2Fblob%2Fstable%2Fcrypto%2Fbls%2Fsrc%2Fzeroize_hash.rs)%0A-%20%5Bmerkle_proof%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Flighthouse%2Ftree%2Fstable%2Fconsensus%2Fmerkle_proof)%0A-%20%5Btree_hash%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Flighthouse%2Ftree%2Fstable%2Fconsensus%2Ftree_hash)%0A-%20%5Btypes%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Flighthouse%2Ftree%2Fstable%2Fconsensus%2Ftypes%2Fsrc)%3A%20Implements%20Ethereum%202.0%20types%20including%20but%20not%20limited%20to%0A%20%20-%20%5Battestation%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Flighthouse%2Fblob%2Fstable%2Fconsensus%2Ftypes%2Fsrc%2Fattestation.rs)%0A%20%20-%20%5Bbeacon_block%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Flighthouse%2Fblob%2Fstable%2Fconsensus%2Ftypes%2Fsrc%2Fbeacon_block.rs)%0A%20%20-%20%5Bbeacon_committee%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Flighthouse%2Fblob%2Fstable%2Fconsensus%2Ftypes%2Fsrc%2Fbeacon_committee.rs)%0A%20%20-%20%5Bbeacon_state%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Flighthouse%2Fblob%2Fstable%2Fconsensus%2Ftypes%2Fsrc%2Fbeacon_state.rs)%0A%20%20-%20%5Bbuilder_bid%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Flighthouse%2Fblob%2Fstable%2Fconsensus%2Ftypes%2Fsrc%2Fbuilder_bid.rs)%0A%20%20-%20%5Bchain_spec%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Flighthouse%2Fblob%2Fstable%2Fconsensus%2Ftypes%2Fsrc%2Fchain_spec.rs)%0A%20%20-%20%5Bcheckpoint%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Flighthouse%2Fblob%2Fstable%2Fconsensus%2Ftypes%2Fsrc%2Fcheckpoint.rs)%0A%20%20-%20%5Bcontribution_and_proof%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Flighthouse%2Fblob%2Fstable%2Fconsensus%2Ftypes%2Fsrc%2Fcontribution_and_proof.rs)%3A%20A%20Validators%20aggregate%20sync%20committee%20contribution%20and%20selection%20proof.%0A%20%20-%20%5Bdeposit%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Flighthouse%2Fblob%2Fstable%2Fconsensus%2Ftypes%2Fsrc%2Fdeposit.rs)%3A%20A%20deposit%20to%20potentially%20become%20a%20beacon%20chain%20validator.%0A%20%20-%20%5Benr_fork_id%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Flighthouse%2Fblob%2Fstable%2Fconsensus%2Ftypes%2Fsrc%2Fenr_fork_id.rs)%3A%20Specifies%20a%20fork%20which%20allows%20nodes%20to%20identify%20each%20other%20on%20the%20network.%20This%20fork%20is%20used%20in%20a%20nodes%20local%20ENR.%0A%20%20-%20%5Beth_spec%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Flighthouse%2Fblob%2Fstable%2Fconsensus%2Ftypes%2Fsrc%2Feth_spec.rs)%3A%20Ethereum%20Foundation%20specifications.%0A%20%20-%20%5Bexecution_block_hash%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Flighthouse%2Fblob%2Fstable%2Fconsensus%2Ftypes%2Fsrc%2Fexecution_block_hash.rs)%0A%20%20-%20%5Bexecution_payload%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Flighthouse%2Fblob%2Fstable%2Fconsensus%2Ftypes%2Fsrc%2Fexecution_payload.rs)%0A%20%20-%20%5Bfork%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Flighthouse%2Fblob%2Fstable%2Fconsensus%2Ftypes%2Fsrc%2Ffork.rs)%3A%20Specifies%20a%20fork%20of%20the%20%60BeaconChain%60%2C%20to%20prevent%20replay%20attacks.%0A%20%20-%20%5Bfree_attestation%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Flighthouse%2Fblob%2Fstable%2Fconsensus%2Ftypes%2Fsrc%2Ffree_attestation.rs)%3A%20Note%3A%20this%20object%20does%20not%20actually%20exist%20in%20the%20spec.%20We%20use%20it%20for%20managing%20attestations%20that%20have%20not%20been%20aggregated.%0A%20%20-%20%5Bpayload%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Flighthouse%2Fblob%2Fstable%2Fconsensus%2Ftypes%2Fsrc%2Fpayload.rs)%0A%20%20-%20%5Bsigned_aggregate_and_proof%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Flighthouse%2Fblob%2Fstable%2Fconsensus%2Ftypes%2Fsrc%2Fsigned_aggregate_and_proof.rs)%3A%20A%20Validators%20signed%20aggregate%20proof%20to%20publish%20on%20the%20%60beacon_aggregate_and_proof%60%20gossipsub%20topic.%0A%20%20-%20%5Bsigned_beacon_block%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Flighthouse%2Fblob%2Fstable%2Fconsensus%2Ftypes%2Fsrc%2Fsigned_beacon_block.rs)%3A%20A%20%60BeaconBlock%60%20and%20a%20signature%20from%20its%20proposer.%0A%20%20-%20%5Bslot_data%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Flighthouse%2Fblob%2Fstable%2Fconsensus%2Ftypes%2Fsrc%2Fslot_data.rs)%3A%20A%20trait%20providing%20a%20%60Slot%60%20getter%20for%20messages%20that%20are%20related%20to%20a%20single%20slot.%20Useful%20in%20making%20parts%20of%20attestation%20and%20sync%20committee%20processing%20generic.%0A%20%20-%20%5Bslot_epoch%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Flighthouse%2Fblob%2Fstable%2Fconsensus%2Ftypes%2Fsrc%2Fslot_epoch.rs)%3A%20The%20%60Slot%60%20and%20%60Epoch%60%20types%20are%20defined%20as%20new%20types%20over%20u64%20to%20enforce%20type-safety%20between%20the%20two%20types.%20Note%3A%20Time%20on%20Ethereum%202.0%20Proof%20of%20Stake%20is%20divided%20into%20slots%20and%20epochs.%20One%20slot%20is%2012%20seconds.%20One%20epoch%20is%206.4%20minutes%2C%20consisting%20of%2032%20slots.%20One%20block%20can%20be%20created%20for%20each%20slot.%0A%20%20-%20%5Bsync_aggregate%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Flighthouse%2Fblob%2Fstable%2Fconsensus%2Ftypes%2Fsrc%2Fsync_aggregate.rs)%3A%20Create%20a%20%60SyncAggregate%60%20from%20a%20slice%20of%20%60SyncCommitteeContribution%60s.%20Equivalent%20to%20%60process_sync_committee_contributions%60%20from%20the%20spec.%0A%20%20-%20%5Bsync_committee%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Flighthouse%2Fblob%2Fstable%2Fconsensus%2Ftypes%2Fsrc%2Fsync_committee.rs)%0A%20%20-%20%5Btree_hash_impls%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Flighthouse%2Fblob%2Fstable%2Fconsensus%2Ftypes%2Fsrc%2Ftree_hash_impls.rs)%3A%20contains%20custom%20implementations%20of%20%60CachedTreeHash%60%20for%20ETH2-specific%20types.%20It%20makes%20some%20assumptions%20about%20the%20layouts%20and%20update%20patterns%20of%20other%20structs%20in%20this%20crate%2C%20and%20should%20be%20updated%20carefully%20whenever%20those%20structs%20are%20changed.%0A%20%20-%20%5Bvalidator%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Flighthouse%2Fblob%2Fstable%2Fconsensus%2Ftypes%2Fsrc%2Fvalidator.rs)%3A%20Information%20about%20a%20%60BeaconChain%60%20validator.%0A%0ASome%20Smart%20Contracts%20deployed%20on%20Ethereum%0A%0A-%20%5Bnearprover%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Ftree%2Fmaster%2Fcontracts%2Feth%2Fnearprover)%0A%20%20-%20%5BProofDecoder.sol%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Fblob%2Fmaster%2Fcontracts%2Feth%2Fnearprover%2Fcontracts%2FProofDecoder.sol)%0A%20%20-%20%5BNearProver.sol%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Fblob%2Fmaster%2Fcontracts%2Feth%2Fnearprover%2Fcontracts%2FNearProver.sol)%0A-%20%5Bnearbridge%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Ftree%2Fmaster%2Fcontracts%2Feth%2Fnearbridge%2Fcontracts)%0A%20%20-%20%5BNearDecoder.sol%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Fblob%2Fmaster%2Fcontracts%2Feth%2Fnearbridge%2Fcontracts%2FNearDecoder.sol)%3A%20handles%20decoing%20of%20Public%20Keys%2C%20Signatures%2C%20BlockProducers%20and%20LightClientBlocks%20using%20%60Borsh.sol%60%0A%20%20-%20%5BUtils.sol%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Fblob%2Fmaster%2Fcontracts%2Feth%2Fnearbridge%2Fcontracts%2FUtils.sol)%3A%20handles%20reading%20and%20writing%20to%20memory%2C%20memoryToBytes%20and%20has%20functions%20such%20as%20%60keccak256Raw%60%20and%20%60sha256Raw%60%0A%20%20-%20%5BBorsh.sol%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Fblob%2Fmaster%2Fcontracts%2Feth%2Fnearbridge%2Fcontracts%2FBorsh.sol)%3A%20%5BBorsh%5D(https%3A%2F%2Fborsh.io%2F)%3A%20Binary%20Object%20Representation%20Serializer%20for%20Hashing.%20It%20is%20meant%20to%20be%20used%20in%20security-critical%20projects%20as%20it%20prioritizes%20consistency%2C%20safety%2C%20speed%3B%20and%20comes%20with%20a%20strict%20specification.%0A%20%20-%20%5BEd25519.sol%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Fblob%2Fmaster%2Fcontracts%2Feth%2Fnearbridge%2Fcontracts%2FEd25519.sol)%3A%20%5BEd25519%5D(https%3A%2F%2Fed25519.cr.yp.to%2F)%20high-speed%20high-security%20signatures%0A%0ASome%20Primitives%20from%20NEAR%20Rainbow%20Bridge%0A%0A-%20%5Beth-types%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Ftree%2Fmaster%2Fcontracts%2Fnear%2Feth-types)%3A%20utilities%20to%20serialize%20and%20encode%20eth2%20types%20using%20%5Bborsh%5D(https%3A%2F%2Fborsh.io%2F)%20and%20%5Brlp%5D(https%3A%2F%2Fethereum.org%2Fen%2Fdevelopers%2Fdocs%2Fdata-structures-and-encoding%2Frlp).%0A-%20%5Beth2-utility%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Ftree%2Fmaster%2Fcontracts%2Fnear%2Feth2-utility)%3A%20Utility%20functions%20used%20for%20Ethereum%202.0%20Consensus.%20Functions%20include%0A%20%20-%20%60fn%20from_str(input%3A%20%26str)%20-%3E%20Result%3CNetwork%2C%20Self%3A%3AErr%3E%60%0A%20%20-%20%60pub%20fn%20new(network%3A%20%26Network)%20-%3E%20Self%60%0A%20%20-%20%60pub%20fn%20compute_fork_version(%26self%2C%20epoch%3A%20Epoch)%20-%3E%20Option%3CForkVersion%3E%60%0A%20%20-%20%60pub%20fn%20compute_fork_version_by_slot(%26self%2C%20slot%3A%20Slot)%20-%3E%20Option%3CForkVersion%3E%60%0A%20%20-%20%60pub%20const%20fn%20compute_epoch_at_slot(slot%3A%20Slot)%20-%3E%20u64%60%0A%20%20-%20%60pub%20const%20fn%20compute_sync_committee_period(slot%3A%20Slot)%20-%3E%20u64%60%0A%20%20-%20%60pub%20const%20fn%20floorlog2(x%3A%20u32)%20-%3E%20u32%60%3A%20Compute%20floor%20of%20log2%20of%20a%20u32.%0A%20%20-%20%60pub%20const%20fn%20get_subtree_index(generalized_index%3A%20u32)%20-%3E%20u32%60%0A%20%20-%20%60pub%20fn%20compute_domain(domain_constant%3A%20DomainType%2C%20fork_version%3A%20ForkVersion%2C%20genesis_validators_root%3A%20H256%2C)%20-%3E%20H256%60%0A%20%20-%20%60pub%20fn%20compute_signing_root(object_root%3A%20H256%2C%20domain%3A%20H256)%20-%3E%20H256%60%0A%20%20-%20%60pub%20fn%20get_participant_pubkeys(public_keys%3A%20%26%5BPublicKeyBytes%5D%2C%20sync_committee_bits%3A%20%26BitVec%3Cu8%2C%20Lsb0%3E%2C)%20-%3E%20Vec%3CPublicKeyBytes%3E%60%0A%20%20-%20%60pub%20fn%20convert_branch(branch%3A%20%26%5BH256%5D)%20-%3E%20Vec%3Cethereum_types%3A%3AH256%3E%60%0A%20%20-%20%60pub%20fn%20validate_beacon_block_header_update(header_update%3A%20%26HeaderUpdate)%20-%3E%20bool%60%0A%20%20-%20%60pub%20fn%20calculate_min_storage_balance_for_submitter(max_submitted_blocks_by_account%3A%20u32%2C)%20-%3E%20Balance%60%0A%0A%23%23%23%20Near%20Rainbow%20Bridge%20Near%20Light%20Client%20Walkthrough%0A%0AThe%20following%20is%20a%20walkthrough%20of%20how%20a%20transaction%20executed%20on%20NEAR%20is%20propogated%20to%20Ethereum's%20%5Bnearbridge%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Ftree%2Fmaster%2Fcontracts%2Feth%2Fnearbridge).%20See%20%5Bnearbridge%20Cryptographic%20Primitives%5D(%23nearbridge-cryptographic-primitives)%20for%20more%20information%20on%20the%20cryptography%20used.%0A%0A**NearOnEthClient%20Overview**%0A%0A_The%20following%20is%20an%20excerpt%20from%20a%20blog%20by%20near%20on%20%5Beth-near-rainbow-bridge%5D(https%3A%2F%2Fnear.org%2Fblog%2Feth-near-rainbow-bridge%2F)_%0A%0A%3E%20NearOnEthClient%20is%20an%20implementation%20of%20the%20NEAR%20light%20client%20in%20Solidity%20as%20an%20Ethereum%20contract.%20Unlike%20EthOnNearClient%20it%20does%20not%20need%20to%20verify%20every%20single%20NEAR%20header%20and%20can%20skip%20most%20of%20them%20as%20long%20as%20it%20verifies%20at%20least%20one%20header%20per%20NEAR%20epoch%2C%20which%20is%20about%2043k%20blocks%20and%20lasts%20about%20half%20a%20day.%20As%20a%20result%2C%20NearOnEthClient%20can%20memorize%20hashes%20of%20all%20submitted%20NEAR%20headers%20in%20history%2C%20so%20if%20you%20are%20making%20a%20transfer%20from%20NEAR%20to%20Ethereum%20and%20it%20gets%20interrupted%20you%20don%E2%80%99t%20need%20to%20worry%20and%20you%20can%20resume%20it%20any%20time%2C%20even%20months%20later.%20Another%20useful%20property%20of%20the%20NEAR%20light%20client%20is%20that%20every%20NEAR%20header%20contains%20a%20root%20of%20the%20merkle%20tree%20computed%20from%20all%20headers%20before%20it.%20As%20a%20result%2C%20if%20you%20have%20one%20NEAR%20header%20you%20can%20efficiently%20verify%20any%20event%20that%20happened%20in%20any%20header%20before%20it.%0A%3E%0A%3E%20Another%20useful%20property%20of%20the%20NEAR%20light%20client%20is%20that%20it%20only%20accepts%20final%20blocks%2C%20and%20final%20blocks%20cannot%20leave%20the%20canonical%20chain%20in%20NEAR.%20This%20means%20that%20NearOnEthClient%20does%20not%20need%20to%20worry%20about%20forks.%0A%3E%0A%3E%20However%2C%20unfortunately%2C%20NEAR%20uses%20%5BEd25519%5D(https%3A%2F%2Fgithub.com%2Fethereum%2FEIPs%2Fblob%2Fmaster%2FEIPS%2Feip-665.mdx)%20to%20sign%20messages%20of%20the%20validators%20who%20approve%20the%20blocks%2C%20and%20this%20signature%20is%20not%20available%20as%20an%20EVM%20precompile.%20It%20makes%20verification%20of%20all%20signatures%20of%20a%20single%20NEAR%20header%20prohibitively%20expensive.%20So%20technically%2C%20we%20cannot%20verify%20one%20NEAR%20header%20within%20one%20contract%20call%20to%20NearOnEthClient.%20Therefore%20we%20adopt%20the%20%5Boptimistic%20approach%5D(https%3A%2F%2Fmedium.com%2F%40deaneigenmann%2Foptimistic-contracts-fb75efa7ca84)%20where%20NearOnEthClient%20verifies%20everything%20in%20the%20NEAR%20header%20except%20the%20signatures.%20Then%20anyone%20can%20challenge%20a%20signature%20in%20a%20submitted%20header%20within%20a%204-hour%20challenge%20window.%20The%20challenge%20requires%20verification%20of%20a%20single%20Ed25519%20signature%20which%20would%20cost%20about%20500k%20Ethereum%20gas%20(expensive%2C%20but%20possible).%20The%20user%20submitting%20the%20NEAR%20header%20would%20have%20to%20post%20a%20bond%20in%20Ethereum%20tokens%2C%20and%20a%20successful%20challenge%20would%20burn%20half%20of%20the%20bond%20and%20return%20the%20other%20half%20to%20the%20challenger.%20The%20bond%20should%20be%20large%20enough%20to%20pay%20for%20the%20gas%20even%20if%20the%20gas%20price%20increases%20exponentially%20during%20the%204%20hours.%20For%20instance%2C%20a%2020%20ETH%20bond%20would%20cover%20gas%20price%20hikes%20up%20to%2020000%20Gwei.%20This%20optimistic%20approach%20requires%20having%20a%20watchdog%20service%20that%20monitors%20submitted%20NEAR%20headers%20and%20challenges%20any%20headers%20with%20invalid%20signatures.%20For%20added%20security%2C%20independent%20users%20can%20run%20several%20watchdog%20services.%0A%3E%0A%3E%20Once%20EIP665%20is%20accepted%2C%20Ethereum%20will%20have%20the%20Ed25519%20signature%20available%20as%20an%20EVM%20precompile.%20This%20will%20make%20watchdog%20services%20and%20the%204-hour%20challenge%20window%20unnecessary.%0A%3E%0A%3E%20At%20its%20bare%20minimum%2C%20Rainbow%20Bridge%20consists%20of%20EthOnNearClient%20and%20NearOnEthClient%20contracts%2C%20and%20three%20services%3A%20Eth2NearRelay%2C%20Near2EthRelay%2C%20and%20the%20Watchdog.%20We%20might%20argue%20that%20this%20already%20constitutes%20a%20bridge%20since%20we%20have%20established%20a%20cryptographic%20link%20between%20two%20blockchains%2C%20but%20practically%20speaking%20it%20requires%20a%20large%20portion%20of%20additional%20code%20to%20make%20application%20developers%20even%20consider%20using%20the%20Rainbow%20Bridge%20for%20their%20applications.%0A%0A_The%20following%20information%20on%20sending%20assets%20from%20NEAR%20back%20to%20Ethereum%20is%20an%20excerpt%20from%20%5Bhttps%3A%2F%2Fnear.org%2Fbridge%2F%5D(https%3A%2F%2Fnear.org%2Fbridge%2F)._%0A%0A%3E%20Sending%20assets%20from%20NEAR%20back%20to%20Ethereum%20currently%20takes%20a%20maximum%20of%20sixteen%20hours%20(due%20to%20Ethereum%20finality%20times)%20and%20costs%20around%20%2460%20(due%20to%20ETH%20gas%20costs%20and%20at%20current%20ETH%20price).%20These%20costs%20and%20speeds%20will%20improve%20in%20the%20near%20future.%0A%0A%23%23%23%23%20NEAR%20to%20Ethereum%20block%20propagation%20costing%0A%0AThe%20following%20links%20provide%20the%20production%20Ethereum%20addresses%20and%20blockexplorer%20views%20for%20NearBridge.sol%20and%20the%20ERC20%20Locker%0A%0A-%20%5BEthereum%20Mainnet%20Bridge%20addresses%20and%20parameters%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge-client%2Ftree%2Fmain%2Fpackages%2Fclient%23ethereum-mainnet-bridge-addresses-and-parameters)%0A-%20%5BNearBridge.sol%20on%20Ethereum%20Block%20Explorer%5D(https%3A%2F%2Fetherscan.io%2Faddress%2F0x3fefc5a4b1c02f21cbc8d3613643ba0635b9a873)%0A%20%20-%20%5BSample%20%60addLightClientBlock(bytes%20data)%60%20function%20call%5D(https%3A%2F%2Fetherscan.io%2Ftx%2F0xa0fbf1405747dbc1c1bda1227e46bc7c5feac36c0eeaab051022cfdb268e60cc%2Fadvanced)%0A-%20%5BNEAR%20ERC20Locker%20on%20Ethereum%20Block%20Explorer%5D(https%3A%2F%2Fetherscan.io%2Faddress%2F0x23ddd3e3692d1861ed57ede224608875809e127f%23code)%0A%0AAt%20time%20of%20writing%20(Oct%2026th%2C%202022).%0A%0A-%20NEAR%20Light%20Client%20Blocks%20are%20propogated%20every%20%604%20hours%60%0A-%20Sample%20Transaction%20fee%20%600.061600109576901025%20Ether%20(%2496.56)%60%0A-%20Daily%20Transaction%20fees%20cost%20approximately%20%60%24600%60%0A-%20_Note%3A%20Infrastructure%20costs%20for%20running%20relayer%2C%20watchdog%2C%20etc%20are%20not%20included._%0A%0A%23%23%23%23%20NEAR%20to%20Ethereum%20block%20propagation%20flow%0A%0A%5BNEAR%20Light%20Client%20Documentation%5D(https%3A%2F%2Fnomicon.io%2FChainSpec%2FLightClient)%20gives%20an%20overview%20of%20how%20light%20clients%20work.%20At%20a%20high%20level%20the%20light%20client%20needs%20to%20fetch%20at%20least%20one%20block%20per%20%5Bepoch%5D(https%3A%2F%2Fdocs.near.org%2Fconcepts%2Fbasics%2Fepoch)%20i.e.%20every%2042%2C200%20blocks%20or%20approxmiately%2012%20hours.%20Also%20Having%20the%20LightClientBlockView%20for%20block%20B%20is%20sufficient%20to%20be%20able%20to%20verify%20any%20statement%20about%20state%20or%20outcomes%20in%20any%20block%20in%20the%20ancestry%20of%20B%20(including%20B%20itself).%0A%0AThe%20current%20scripts%20and%20codebase%20indicates%20that%20a%20block%20would%20be%20fetched%20every%2030%20seconds%20with%20a%20max%20delay%20of%2010%20seconds.%20It%20feels%20that%20this%20would%20be%20expensive%20to%20update%20Ethereum%20so%20frequently.%20%5BNEAR's%20bridge%20documentation%5D(https%3A%2F%2Fnear.org%2Fbridge%2F)%20states%20_Sending%20assets%20from%20NEAR%20back%20to%20Ethereum%20currently%20takes%20a%20maximum%20of%20sixteen%20hours%20(due%20to%20Ethereum%20finality%20times)_.%20This%20seems%20to%20align%20with%20sending%20light%20client%20updates%20once%20per%20NEAR%20epoch.%20The%20block%20fetch%20period%20is%20configurable%20in%20the%20relayer.%0A%0A%3E%20The%20RPC%20returns%20the%20LightClientBlock%20for%20the%20block%20as%20far%20into%20the%20future%20from%20the%20last%20known%20hash%20as%20possible%20for%20the%20light%20client%20to%20still%20accept%20it.%20Specifically%2C%20it%20either%20returns%20the%20last%20final%20block%20of%20the%20next%20epoch%2C%20or%20the%20last%20final%20known%20block.%20If%20there's%20no%20newer%20final%20block%20than%20the%20one%20the%20light%20client%20knows%20about%2C%20the%20RPC%20returns%20an%20empty%20result.%0A%3E%0A%3E%20A%20standalone%20light%20client%20would%20bootstrap%20by%20requesting%20next%20blocks%20until%20it%20receives%20an%20empty%20result%2C%20and%20then%20periodically%20request%20the%20next%20light%20client%20block.%0A%3E%0A%3E%20A%20smart%20contract-based%20light%20client%20that%20enables%20a%20bridge%20to%20NEAR%20on%20a%20different%20blockchain%20naturally%20cannot%20request%20blocks%20itself.%20Instead%20external%20oracles%20query%20the%20next%20light%20client%20block%20from%20one%20of%20the%20full%20nodes%2C%20and%20submit%20it%20to%20the%20light%20client%20smart%20contract.%20The%20smart%20contract-based%20light%20client%20performs%20the%20same%20checks%20described%20above%2C%20so%20the%20oracle%20doesn't%20need%20to%20be%20trusted.%0A%0ABlock%20Submitters%20stake%20ETH%20to%20be%20allowed%20to%20submit%20blocks%20which%20get's%20slashed%20if%20the%20watchdog%20identifies%20blocks%20with%20invalid%20signatures.%0A%0A_Note%3A%20Have%20not%20identified%20how%20the%20block%20submitters%20are%20rewarded%20for%20submitting%20blocks.%20Currently%20have%20only%20identified%20them%20locking%20ETH%20to%20be%20able%20to%20submit%20blocks%20and%20being%20slashed%20if%20they%20submit%20blocks%20with%20invalid%20signatures._%0A%0A-%20%5BLight%20Clients%20are%20deployed%20on%20Ethereum%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Fblob%2Fmaster%2Fcli%2Findex.js%23L518)%20via%20the%20CLI%20using%20%5Beth-contracts.js%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Fblob%2Fmaster%2Fcli%2Finit%2Feth-contracts.js)%0A%20%20-%20%5Binit-eth-ed25519%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Fblob%2Fmaster%2Fcli%2Findex.js%23L505)%3A%20Deploys%20%60Ed25519.sol%60%20see%20more%20information%20under%20%5Bnearbridge%20Cryptographic%20Primitives%5D(%23nearbridge-cryptographic-primitives)%0A%20%20-%20%5Binit-eth-client%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Fblob%2Fmaster%2Fcli%2Findex.js%23L520)%3A%20Deploys%20%60NearBridge.sol%60%20see%20more%20information%20under%20%5BNEAR%20to%20Ethereum%20block%20propagation%20components%5D(%23near-to-ethereum-block-propagation-components).%20It%20takes%20the%20following%20arguments%0A%20%20%20%20-%20%60ethEd25519Address%60%3A%20The%20address%20of%20the%20ECDSA%20signature%20checker%20using%20Ed25519%20curve%20(see%20%5Bhere%5D(https%3A%2F%2Fnbeguier.medium.com%2Fa-real-world-comparison-of-the-ssh-key-algorithms-b26b0b31bfd9))%0A%20%20%20%20-%20%60lockEthAmount%60%3A%20The%20amount%20that%20%60BLOCK_PRODUCERS%60%20need%20to%20deposit%20(in%20wei)to%20be%20able%20to%20provide%20blocks.%20This%20amount%20will%20be%20slashed%20if%20the%20block%20is%20challenged%20and%20proven%20not%20to%20have%20a%20valid%20signature.%20Default%20value%20is%20100000000000000000000%20WEI%20%3D%20100%20ETH.%0A%20%20%20%20-%20%60lockDuration%60%20%3A%2030%20seconds%0A%20%20%20%20-%20%60replaceDuration%60%3A%2060%20seconds%20it%20is%20passed%20in%20nanoseconds%2C%20because%20it%20is%20a%20difference%20between%20NEAR%20timestamps.%0A%20%20%20%20-%20%60ethAdminAddress%60%3A%20Bridge%20Administrator%20Address%0A%20%20%20%20-%20%600%60%20%3A%20Indicates%20nothing%20is%20paused%20%60UNPAUSE_ALL%60%0A%20%20-%20%5Binit-eth-prover%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Fblob%2Fmaster%2Fcli%2Findex.js%23L538)%3A%20Deploys%20%60NearProver.sol%60%20see%20more%20information%20under%20%5BNEAR%20to%20Ethereum%20block%20propagation%20components%5D(%23near-to-ethereum-block-propagation-components).%20It%20takes%20the%20following%20arguments%0A%20%20%20%20-%20%60ethClientAddress%60%3A%20Interface%20to%20%60NearBridge.sol%60%0A%20%20%20%20-%20%60ethAdminAddress%60%3A%20Administrator%20address%0A%20%20%20%20-%20%600%60%3A%20paused%20indicator%20defaults%20to%20%60UNPAUSE_ALL%20%3D%200%60%0A-%20%5BRelayer%20is%20Started%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Fblob%2Fmaster%2Fcli%2Fcommands%2Fstart%2Fnear2eth-relay.js)%0A%20%20-%20Relayer%20is%20started%20using%20the%20following%20command%0A%0A%20%20%20%20%20%20%20%20%60%60%60%0A%20%20%20%20%20%20%20%20cli%2Findex.js%20start%20near2eth-relay%20%5C%0A%20%20%20%20%20%20%20%20--eth-node-url%20http%3A%2F%2F127.0.0.1%3A8545%2F%20%5C%0A%20%20%20%20%20%20%20%20--eth-master-sk%200xac0974bec39a17e36ba4a6b4d238ff944bacb478cbed5efcae784d7bf4f2ff80%20%5C%0A%20%20%20%20%20%20%20%20--near-node-url%20https%3A%2F%2Frpc.testnet.near.org%2F%20%5C%0A%20%20%20%20%20%20%20%20--near-network-id%20testnet%20%5C%0A%20%20%20%20%20%20%20%20--eth-client-address%200xe7f1725e7734ce288f8367e1bb143e90bb3f0512%20%5C%0A%20%20%20%20%20%20%20%20--eth-use-eip-1559%20true%20%5C%0A%20%20%20%20%20%20%20%20--near2eth-relay-max-delay%2010%20%5C%0A%20%20%20%20%20%20%20%20--near2eth-relay-block-select-duration%2030%20%5C%0A%20%20%20%20%20%20%20%20--near2eth-relay-after-submit-delay-ms%201000%20%5C%0A%20%20%20%20%20%20%20%20--log-verbose%20true%20%5C%0A%20%20%20%20%20%20%20%20--daemon%20false%0A%20%20%20%20%20%20%20%20%60%60%60%0A%0A-%20%5BRelayer%20Logic%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Fblob%2Fmaster%2Fnear2eth%2Fnear2eth-block-relay%2Findex.js)%0A%20%20-%20Loops%20%60while%20(true)%60%0A%20%20%20%20-%20Get%20the%20bridge%20state%20(including%20%60currentHeight%60%2C%20%60nextTimestamp%60%2C%20%60nextValidAt%60%2C%20%60numBlockProducers%60%20)%0A%20%20%20%20-%20Get%20the%20%60currentBlockHash%60%20the%20hash%20of%20the%20current%20untrursted%20block%20based%20on%20%60lastValidAt%60%0A%20%20%20%20-%20Gets%20the%20%60lastBlock%60%20by%20calling%20the%20NEAR%20rpc%20%60next_light_client_block%60%20using%20the%20hash%20of%20last%20untrusted%20block%20%60bs58.encode(currentBlockHash)%60%0A%20%20%20%20-%20Get's%20the%20%60replaceDuration%60%20by%20%60clientContract.methods.replaceDuration().call()%60%20this%20will%20be%2060%20seconds%20if%20we%20deployed%20%60NearBridge.sol%60%20with%20the%20default%20values%20above%0A%20%20%20%20-%20Sets%20%60nextValidAt%60%20from%20the%20bridge%20state%20%60web3.utils.toBN(bridgeState.nextValidAt)%60%0A%20%20%20%20-%20Sets%20%60replaceDelay%60%20to%200%20then%20updates%20it%20to%20the%20%60nextTimestamp%60%20%2B%20%60replaceDuration%60%20-%20%60lastBlock.inner_lite.timestamp%60%20i.e.%20The%20new%20block%20has%20to%20be%20at%20least%2060%20seconds%20after%20the%20current%20block%20stored%20on%20the%20light%20client.%0A%20%20%20%20-%20Checks%20the%20height%20of%20the%20%60currentHeight%60%20of%20the%20bridge%20is%20less%20than%20the%20%60lastblock%60%20from%20the%20near%20light%20client%20%60(bridgeState.currentHeight%20%3C%20lastBlock.inner_lite.height)%60%0A%20%20%20%20-%20Serializes%20the%20%60lastBlock%60%20using%20Borsh%20and%20check%20that%20the%20block%20is%20suitable%0A%20%20%20%20-%20Checks%20that%20the%20%60replaceDelay%60%20has%20been%20met%2C%20if%20not%20sleeps%20until%20it%20has%0A%20%20%20%20-%20Checks%20that%20the%20Master%20Account%20(the%20one%20submitting%20the%20block)%20has%20enough%20locked%20ETH%20(if%20not%20tries%20to%20deposit%20more).%20So%20that%20it%20can%20be%20slashed%20if%20the%20block%20proposed%20is%20invalid.%0A%20%20%20%20-%20Adds%20the%20light%20client%20block%20%60await%20clientContract.methods.addLightClientBlock(nextBlockSelection.borshBlock).send%60%0A%20%20%20%20%20%20-%20Checks%20%60NearBridge.sol%60%20(the%20light%20client)%20has%20been%20initialized%0A%20%20%20%20%20%20-%20Checks%20%60balanceOf%5Bmsg.sender%5D%20%3E%3D%20lockEthAmount%60%20that%20the%20sender%20has%20locked%20enough%20Eth%20to%20allow%20them%20to%20submit%20blocks%0A%20%20%20%20%20%20-%20Decodes%20the%20nearBlock%20using%20%60Borsh.from(data)%60%20and%20%60borsh.decodeLightClientBlock()%60%0A%20%20%20%20%20%20-%20Commis%20the%20previous%20block%2C%20or%20make%20sure%20that%20it%20is%20OK%20to%20replace%20it%20using%0A%20%20%20%20%20%20%20%20-%20%60lastValidAt%20%3D%200%3B%60%0A%20%20%20%20%20%20%20%20-%20%60blockHashes_%5BcurHeight%5D%20%3D%20untrustedHash%3B%60%0A%20%20%20%20%20%20%20%20-%20%60blockMerkleRoots_%5BcurHeight%5D%20%3D%20untrustedMerkleRoot%3B%60%0A%20%20%20%20%20%20-%20Check%20that%20the%20new%20block's%20height%20is%20greater%20than%20the%20current%20one's.%20%60nearBlock.inner_lite.height%20%3E%20curHeight%60%0A%20%20%20%20%20%20-%20Check%20that%20the%20new%20block%20is%20from%20the%20same%20epoch%20as%20the%20current%20one%2C%20or%20from%20the%20next%20one.%0A%20%20%20%20%20%20-%20Check%20that%20the%20new%20block%20is%20signed%20by%20more%20than%202%2F3%20of%20the%20validators.%0A%20%20%20%20%20%20-%20If%20the%20block%20is%20from%20the%20next%20epoch%2C%20make%20sure%20that%20the%20Block%20producers%20%60next_bps%60%20are%20supplied%20and%20have%20a%20correct%20hash.%0A%20%20%20%20%20%20-%20Add%20the%20Block%20to%20the%20Light%20client%0A%20%20%20%20%20%20%20%20-%20Updates%20untrusted%20information%20to%20this%20block%20including%20%60untrustedHeight%60%2C%20%60untrustedTimestamp%60%2C%20%60untrustedHash%60%2C%20%60untrustedMerkleRoot%60%2C%20%60untrustedNextHash%60%2C%20%60untrustedSignatureSet%60%2C%20%60untrustedNextEpoch%60%0A%20%20%20%20%20%20%20%20-%20If%20%60fromNextEpoch%60%20also%20update%20the%20Block%20Producers%0A%20%20%20%20%20%20%20%20-%20Updates%20the%20%60lastSubmitter%60%20and%20%60lastValidAt%60%0A%20%20%20%20-%20Cleans%20up%20the%20selected%20block%20to%20prevent%20submitting%20the%20same%20block%20again%20%60await%20sleep(afterSubmitDelayMs)%60%0A%20%20%20%20-%20Sets%20the%20HeightGauuges%20to%20the%20correct%20block%20height%0A%20%20%20%20%20%20-%20%60clientHeightGauge.set(Number(BigInt(bridgeState.currentHeight))%60%0A%20%20%20%20%20%20-%20%60chainHeightGauge.set(Number(BigInt(lastBlock.inner_lite.height)))%60%0A%20%20%20%20-%20Sleeps%20for%20delay%20calculated%20from%20the%20maximum%20of%20the%20relayer%20days%20(10%20seconds)%20and%20differnce%20between%20the%20current%20and%20next%20block%20time%20stamps%20and%20%60await%20sleep(1000%20*%20delay)%60%0A%0A%23%23%23%23%20NEAR%20to%20Ethereum%20watchdog%0A%0AThe%20%5Bwatchdog%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Fblob%2Fmaster%2Fnear2eth%2Fwatchdog%2Findex.js)%20runs%20every%2010%20seconds%20and%20validates%20blocks%20on%20%60NearBridge.sol%60%20challenging%20blocks%20with%20incorrect%20signatures.%20_Note%3A%20It%20uses%20%5Bheep-prometheus%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Fblob%2Fmaster%2Futils%2Fhttp-prometheus.js)%20for%20monitoring%20and%20storing%20block%20and%20producer%20information%20using%20%60gauges%60%20and%20%60counters%60._%0A%0A-%20%5Bwatchdog%20is%20started%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Fblob%2Fmaster%2Fcli%2Fcommands%2Fstart%2Fwatchdog.js)%20from%20the%20CLI%0A-%20%5Bwatchdog%20logic%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Fblob%2Fmaster%2Fnear2eth%2Fwatchdog%2Findex.js)%0A%20%20-%20Initializes%20monitoring%20information%20on%20%60Prometheus%60%0A%20%20%20%20-%20%60const%20httpPrometheus%20%3D%20new%20HttpPrometheus(this.metricsPort%2C%20'near_bridge_watchdog_')%60%0A%20%20%20%20-%20%60const%20lastBlockVerified%20%3D%20httpPrometheus.gauge('last_block_verified'%2C%20'last%20block%20that%20was%20already%20verified')%60%0A%20%20%20%20-%20%60const%20totBlockProducers%20%3D%20httpPrometheus.gauge('block_producers'%2C%20'number%20of%20block%20producers%20for%20current%20block')%60%0A%20%20%20%20-%20%60const%20incorrectBlocks%20%3D%20httpPrometheus.counter('incorrect_blocks'%2C%20'number%20of%20incorrect%20blocks%20found')%60%0A%20%20%20%20-%20%60const%20challengesSubmitted%20%3D%20httpPrometheus.counter('challenges_submitted'%2C%20'number%20of%20blocks%20challenged')%60%0A%20%20-%20Loops%20%60while%20(true)%60%0A%20%20%20%20-%20Gets%20the%20%60bridgeState%60%0A%20%20%20%20-%20Loops%20through%20all%20blockProducers%20checking%20their%20signatures%0A%20%20%20%20-%20%60for%20(let%20i%20%3D%200%3B%20i%20%3C%20numBlockProducers%3B%20i%2B%2B)%60%0A%20%20%20%20%20%20-%20Check%20each%20signature%20%60this.clientContract.methods.checkBlockProducerSignatureInHead(i).call()%60%0A%20%20%20%20%20%20-%20If%20invalid%20challenge%20the%20signature%3A%20%60this.clientContract.methods.challenge(this.ethMasterAccount%2C%20i).encodeABI()%60%20calls%20%5Bchallenge%20function%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Fblob%2Fmaster%2Fcontracts%2Feth%2Fnearbridge%2Fcontracts%2FNearBridge.sol%23L93)%0A%20%20%20%20%20%20%20%20-%20%60function%20challenge(address%20payable%20receiver%2C%20uint%20signatureIndex)%20external%20override%20pausable(PAUSED_CHALLENGE)%60%0A%20%20%20%20%20%20%20%20%20%20-%20checks%20block.timestamp%20is%20less%20than%20lastValidAt%20%60block.timestamp%20%3C%20lastValidAt%2C%60%0A%20%20%20%20%20%20%20%20%20%20-%20Check%20if%20the%20signature%20is%20valid%20%60!checkBlockProducerSignatureInHead(signatureIndex)%60%0A%20%20%20%20%20%20%20%20%20%20-%20slashes%20the%20last%20submitter%20%60balanceOf%5BlastSubmitter%5D%20%3D%20balanceOf%5BlastSubmitter%5D%20-%20lockEthAmount%3B%60%0A%20%20%20%20%20%20%20%20%20%20-%20resets%20lastValidAt%20%60lastValidAt%20%3D%200%3B%60%0A%20%20%20%20%20%20%20%20%20%20-%20Refunds%20half%20of%20the%20funds%20to%20the%20watchdog%20account%20%60receiver.call%7Bvalue%3A%20lockEthAmount%20%2F%202%7D(%22%22)%3B%60%0A%20%20%20%20%20%20-%20Sleeps%20for%20watchdog%20Delay%20seconds%20%60await%20sleep(watchdogDelay%20*%201000)%60%0A%0A%23%23%23%23%20NEAR%20to%20Ethereum%20block%20propagation%20components%0A%0A-%20%5Beth2near-relay%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Fblob%2Fmaster%2Fcli%2Fcommands%2Fstart%2Feth2near-relay.js)%3A%20Command%20to%20start%20the%20NEAR%20to%20Ethereum%20relay.%20See%20sample%20invocation%20%5Bhere%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Fblob%2Fmaster%2Fdocs%2Fdevelopment.md%23near2eth-relay)%0A-%20%5Bnear2eth-block-relay%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Ftree%2Fmaster%2Fnear2eth%2Fnear2eth-block-relay)%20is%20written%20in%20javascript%0A%20%20-%20Has%20%5Bdependencies%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Fblob%2Fmaster%2Fnear2eth%2Fnear2eth-block-relay%2Fpackage.json)%20including%20%5Brainbow-bridge-utils%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Ftree%2Fmaster%2Futils)%20see%20%5Bhere%5D(near-rainbow-bridge-utils)%20for%20more%20information.%20It's%20other%20dependencies%20are%20also%20included%20in%20%60rainbow-bridge-utils%60.%0A%20%20%20%20-%20%5Bethereumjs-util%5D(https%3A%2F%2Fwww.npmjs.com%2Fpackage%2Fethereumjs-util)%3A%20A%20collection%20of%20utility%20functions%20for%20Ethereum.%0A%20%20-%20Has%20the%20following%20functions%20and%20classes%0A%20%20%20%20-%20%60class%20Near2EthRelay%60%0A%20%20%20%20%20%20-%20%60async%20initialize%20(%7BnearNodeUrl%2C%20nearNetworkId%2C%20ethNodeUrl%2C%20ethMasterSk%2C%20ethClientArtifactPath%2C%20ethClientAddress%2C%20ethGasMultiplier%2C%20metricsPort%20%7D)%60%0A%20%20%20%20%20%20-%20%60async%20withdraw%20(%7BethGasMultiplier%7D)%60%0A%20%20%20%20%20%20-%20%60async%20runInternal%20(%7BsubmitInvalidBlock%2C%20near2ethRelayMinDelay%2C%20near2ethRelayMaxDelay%2C%20near2ethRelayErrorDelay%2C%20near2ethRelayBlockSelectDuration%2C%20near2ethRelayNextBlockSelectDelayMs%2C%20near2ethRelayAfterSubmitDelayMs%2C%20ethGasMultiplier%2C%20ethUseEip1559%2C%20logVerbose%7D)%60%0A%20%20%20%20%20%20-%20%60run%20(options)%20%7Breturn%20this.runInternal(%7B...options%2C%20submitInvalidBlock%3A%20false%7D)%20%7D%60%0A-%20%5BNearBridge.sol%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Fblob%2Fmaster%2Fcontracts%2Feth%2Fnearbridge%2Fcontracts%2FNearBridge.sol)%3A%20Is%20the%20NEAR%20light%20client%20deployed%20on%20ethereum.%0A%20%20-%20It%20imports%20the%20following%20contracts%20(see%20%5Bnearbridge%20cryptographic%20primitives%5D(%23nearbridge-cryptographic-primitives))%0A%20%20%20%20-%20%60import%20%22.%2FAdminControlled.sol%22%3B%60%0A%20%20%20%20-%20%60import%20%22.%2FINearBridge.sol%22%3B%60%0A%20%20%20%20-%20%60import%20%22.%2FNearDecoder.sol%22%3B%60%0A%20%20%20%20-%20%60import%20%22.%2FEd25519.sol%22%3B%60%0A%20%20-%20It%20provides%20the%20following%20structure%20for%20Bridge%20State.%20If%20there%20is%20currently%20no%20unconfirmed%20block%2C%20the%20last%20three%20fields%20are%20zero.%0A%20%20%20%20-%20%60uint%20currentHeight%3B%60%3A%20Height%20of%20the%20current%20confirmed%20block%0A%20%20%20%20-%20%60uint%20nextTimestamp%3B%60%3A%20Timestamp%20of%20the%20current%20unconfirmed%20block%0A%20%20%20%20-%20%60uint%20nextValidAt%3B%60%3A%20Timestamp%20when%20the%20current%20unconfirmed%20block%20will%20be%20confirmed%0A%20%20%20%20-%20%60uint%20numBlockProducers%3B%60%3A%20Number%20of%20block%20producers%20for%20the%20current%20unconfirmed%20block%0A%20%20-%20It%20provides%20the%20following%20storage%0A%20%20%20%20-%20%60uint%20constant%20MAX_BLOCK_PRODUCERS%20%3D%20100%3B%60%3A%20Assumed%20to%20be%20even%20and%20to%20not%20exceed%20256.%0A%20%20%20%20-%20%60struct%20Epoch%20%7Bbytes32%20epochId%3B%20uint%20numBPs%3B%20bytes%20%5BMAX_BLOCK_PRODUCERS%5D%20keys%3B%20bytes32%5BMAX_BLOCK_PRODUCERS%20%2F%202%5D%20packedStakes%3B%20uint256%20stakeThreshold%3B%7D%60%0A%20%20%20%20-%20%60uint256%20public%20lockEthAmount%3B%60%0A%20%20%20%20-%20%60uint256%20public%20lockDuration%3B%60%3A%20lockDuration%20and%20replaceDuration%20shouldn't%20be%20extremely%20big%2C%20so%20adding%20them%20to%20an%20uint64%20timestamp%20should%20not%20overflow%20uint256.%0A%20%20%20%20-%20%60uint256%20public%20replaceDuration%3B%60%3A%20replaceDuration%20is%20in%20nanoseconds%2C%20because%20it%20is%20a%20difference%20between%20NEAR%20timestamps.%0A%20%20%20%20-%20%60Ed25519%20immutable%20edwards%3B%60%0A%20%20%20%20-%20%60uint256%20public%20lastValidAt%3B%60%3A%20End%20of%20challenge%20period.%20If%20zero%2C%20_%60untrusted%60_%20fields%20and%20%60lastSubmitter%60%20are%20not%20meaningful.%0A%20%20%20%20-%20%60uint64%20curHeight%3B%60%0A%20%20%20%20-%20%60uint64%20untrustedHeight%3B%60%3A%20The%20most%20recently%20added%20block.%20May%20still%20be%20in%20its%20challenge%20period%2C%20so%20should%20not%20be%20trusted.%0A%20%20%20%20-%20%60address%20lastSubmitter%3B%60%3A%20Address%20of%20the%20account%20which%20submitted%20the%20last%20block.%0A%20%20%20%20-%20%60bool%20public%20initialized%3B%60%3A%20Whether%20the%20contract%20was%20initialized.%0A%20%20%20%20-%20%60bool%20untrustedNextEpoch%3B%60%0A%20%20%20%20-%20%60bytes32%20untrustedHash%3B%60%0A%20%20%20%20-%20%60bytes32%20untrustedMerkleRoot%3B%60%0A%20%20%20%20-%20%60bytes32%20untrustedNextHash%3B%60%0A%20%20%20%20-%20%60uint256%20untrustedTimestamp%3B%60%0A%20%20%20%20-%20%60uint256%20untrustedSignatureSet%3B%60%0A%20%20%20%20-%20%60NearDecoder.Signature%5BMAX_BLOCK_PRODUCERS%5D%20untrustedSignatures%3B%60%0A%20%20%20%20-%20%60Epoch%5B3%5D%20epochs%3B%60%0A%20%20%20%20-%20%60uint256%20curEpoch%3B%60%0A%20%20%20%20-%20%60mapping(uint64%20%3D%3E%20bytes32)%20blockHashes_%3B%60%0A%20%20%20%20-%20%60mapping(uint64%20%3D%3E%20bytes32)%20blockMerkleRoots_%3B%60%0A%20%20%20%20-%20%60mapping(address%20%3D%3E%20uint256)%20public%20override%20balanceOf%3B%60%0A%20%20-%20It%20provides%20the%20following%20functions%0A%20%20%20%20-%20%60constructor(Ed25519%20ed%2C%20uint256%20lockEthAmount_%2C%20uint256%20lockDuration_%2C%20uint256%20replaceDuration_%2C%20address%20admin_%2C%20uint256%20pausedFlags_)%60%3A%20_Note%3A%20require%20the%20%60lockDuration%60%20(in%20seconds)%20to%20be%20at%20least%20one%20second%20less%20than%20the%20%60replaceDuration%60%20(in%20nanoseconds)%20%60require(replaceDuration*%20%3E%20lockDuration*%20_%201000000000)%3B%60%0A%20%20%20%20%20%20-%20%60ethEd25519Address%60%3A%20The%20address%20of%20the%20ECDSA%20signature%20checker%20using%20Ed25519%20curve%20(see%20%5Bhere%5D(https%3A%2F%2Fnbeguier.medium.com%2Fa-real-world-comparison-of-the-ssh-key-algorithms-b26b0b31bfd9))%0A%20%20%20%20%20%20-%20%60lockEthAmount%60%3A%20The%20amount%20that%20%60BLOCK_PRODUCERS%60%20need%20to%20deposit%20(in%20wei)to%20be%20able%20to%20provide%20blocks.%20This%20amount%20will%20be%20slashed%20if%20the%20block%20is%20challenged%20and%20proven%20not%20to%20have%20a%20valid%20signature.%20Default%20value%20is%20100000000000000000000%20WEI%20%3D%20100%20ETH.%0A%20%20%20%20%20%20-%20%60lockDuration%60%20%3A%2030%20seconds%0A%20%20%20%20%20%20-%20%60replaceDuration%60%3A%2060%20seconds%20it%20is%20passed%20in%20nanoseconds%2C%20because%20it%20is%20a%20difference%20between%20NEAR%20timestamps.%0A%20%20%20%20%20%20-%20%60ethAdminAddress%60%3A%20Bridge%20Administrator%20Address%0A%20%20%20%20%20%20-%20%600%60%20%3A%20Indicates%20nothing%20is%20paused%20%60UNPAUSE_ALL%60%0A%20%20%20%20-%20%60function%20deposit()%20public%20payable%20override%20pausable(PAUSED_DEPOSIT)%60%0A%20%20%20%20-%20%60function%20withdraw()%20public%20override%20pausable(PAUSED_WITHDRAW)%60%0A%20%20%20%20-%20%60function%20challenge(address%20payable%20receiver%2C%20uint%20signatureIndex)%20external%20override%20pausable(PAUSED_CHALLENGE%60%0A%20%20%20%20-%20%60function%20checkBlockProducerSignatureInHead(uint%20signatureIndex)%20public%20view%20override%20returns%20(bool)%60%0A%20%20%20%20-%20%60function%20initWithValidators(bytes%20memory%20data)%20public%20override%20onlyAdmin%60%3A%20The%20first%20part%20of%20initialization%20--%20setting%20the%20validators%20of%20the%20current%20epoch.%0A%20%20%20%20-%20%60function%20initWithBlock(bytes%20memory%20data)%20public%20override%20onlyAdmin%60%3A%20The%20second%20part%20of%20the%20initialization%20--%20setting%20the%20current%20head.%0A%20%20%20%20-%20%60function%20bridgeState()%20public%20view%20returns%20(BridgeState%20memory%20res)%60%0A%20%20%20%20-%20%60function%20bridgeState()%20public%20view%20returns%20(BridgeState%20memory%20res)%60%0A%20%20%20%20-%20%60function%20addLightClientBlock(bytes%20memory%20data)%20public%20override%20pausable(PAUSED_ADD_BLOCK)%60%0A%20%20%20%20-%20%60function%20setBlockProducers(NearDecoder.BlockProducer%5B%5D%20memory%20src%2C%20Epoch%20storage%20epoch)%20internal%60%0A%20%20%20%20-%20%60function%20blockHashes(uint64%20height)%20public%20view%20override%20pausable(PAUSED_VERIFY)%20returns%20(bytes32%20res)%60%0A%20%20%20%20-%20%60function%20blockMerkleRoots(uint64%20height)%20public%20view%20override%20pausable(PAUSED_VERIFY)%20returns%20(bytes32%20res)%60%0A-%20%5BNearProver.sol%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Fblob%2Fmaster%2Fcontracts%2Feth%2Fnearprover%2Fcontracts%2FNearProver.sol)%3A%20Is%20used%20to%20prove%20the%20validity%20of%20NEAR%20blocks%20on%20Ethereum.%0A%20%20-%20It%20imports%20the%20following%20contracts%20(see%20%5Bnearbridge%20cryptographic%20primitives%5D(%23nearbridge-cryptographic-primitives))%0A%20%20%20%20-%20%60import%20%22rainbow-bridge-sol%2Fnearbridge%2Fcontracts%2FNearDecoder.sol%22%3B%60%0A%20%20%20%20-%20%60import%20%22.%2FProofDecoder.sol%22%3B%60%0A%20%20-%20It%20has%20the%20following%20functions%0A%20%20%20%20-%20%60constructor(INearBridge%20_bridge%2C%20address%20_admin%2C%20uint%20_pausedFlags)%60%0A%20%20%20%20%20%20-%20%60_bridge%60%3A%20Interface%20to%20%60NearBridge.sol%60%0A%20%20%20%20%20%20-%20%60_admin%60%3A%20Administrator%20address%0A%20%20%20%20%20%20-%20%60_pausedFlags%60%3A%20paused%20indicator%20defaults%20to%20%60UNPAUSE_ALL%20%3D%200%60%0A%20%20%20%20-%20%60function%20proveOutcome(bytes%20memory%20proofData%2C%20uint64%20blockHeight)%60%0A%20%20%20%20-%20%60function%20_computeRoot(bytes32%20node%2C%20ProofDecoder.MerklePath%20memory%20proof)%20internal%20pure%20returns%20(bytes32%20hash)%60%0A%0A%23%23%23%23%20NEAR%20Rainbow%20Bridge%20Utils%0A%0A%5Brainbow-bridge-utils%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Ftree%2Fmaster%2Futils)%20provides%20a%20set%20of%20utilities%20for%20the%20near%20rainbow%20bridge%20written%20in%20javascript.%0A%0A-%20It%20has%20the%20following%20%5Bdependencies%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Fblob%2Fmaster%2Futils%2Fpackage.json)%0A%20%20-%20%5Bbn.js%5D(https%3A%2F%2Fwww.npmjs.com%2Fpackage%2Fbn.js)%3A%20Big%20number%20implementation%20in%20pure%20javascript%0A%20%20-%20%5Bbsert%5D(https%3A%2F%2Fwww.npmjs.com%2Fpackage%2Fbsert)%3A%20Minimal%20assert%20with%20type%20checking.%0A%20%20-%20%5Bbs58%5D(https%3A%2F%2Fwww.npmjs.com%2Fpackage%2Fbs58)%3A%20JavaScript%20component%20to%20compute%20base%2058%20encoding%0A%20%20-%20%5Bchange-case%5D(https%3A%2F%2Fwww.npmjs.com%2Fpackage%2Fchange-case)%3A%20Transform%20a%20string%20between%20camelCase%2C%20PascalCase%2C%20Capital%20Case%2C%20snake_case%2C%20param-case%2C%20CONSTANT_CASE%20and%20others.%0A%20%20-%20%5Bconfigstore%5D(https%3A%2F%2Fwww.npmjs.com%2Fpackage%2Fconfigstore)%3A%20Easily%20load%20and%20save%20config%20without%20having%20to%20think%20about%20where%20and%20how%0A%20%20-%20%5Beth-object%5D(https%3A%2F%2Fgithub.com%2Fnear%2Feth-object%23383b6ea68c7050bea4cab6950c1d5a7fa553e72b)%3A%20re-usable%20and%20composable%20objects%20that%20you%20can%20just%20call%20Object.from%20to%20ingest%20new%20data%20to%20serialize%20Ethereum%20Trie%20%2F%20LevelDB%20data%20from%20hex%2C%20buffers%20and%20rpc%20into%20the%20same%20format.%0A%20%20-%20%5Beth-util-lite%5D(https%3A%2F%2Fgithub.com%2Fnear%2Feth-util-lite)%3A%20a%20low-dependency%20utility%20for%20Ethereum.%20It%20replaces%20a%20small%20subset%20of%20the%20ethereumjs-util%20and%20ethjs-util%20APIs.%0A%20%20-%20%5Blodash%5D(https%3A%2F%2Fwww.npmjs.com%2Fpackage%2Flodash)%3A%20A%20set%20of%20utilities%20for%20working%20with%20arrays%2C%20numbers%2C%20objects%2C%20strings%2C%20etc.%0A%20%20-%20%5Bnear-api-js%5D(https%3A%2F%2Fwww.npmjs.com%2Fpackage%2Fnear-api-js)%3A%20JavaScript%20library%20to%20interact%20with%20NEAR%20Protocol%20via%20RPC%20API%0A%20%20-%20%5Bweb3%5D(https%3A%2F%2Fwww.npmjs.com%2Fpackage%2Fweb3)%3A%20Ethereum%20JavaScript%20API%0A-%20It%20provides%20the%20following%20functions%0A%20%20-%20%5Baddress-watcher%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Fblob%2Fmaster%2Futils%2Faddress-watcher.js)%3A%20Watches%20a%20group%20of%20near%20and%20ethereum%20acccounts%20polling%20NEAR%20and%20Ethereum%20every%20second%20and%20updating%20%60nearAccount.balanceGauge%60%2C%20%60nearAccount.stateStorageGauge%60%20and%20%60ethereumAccount.balanceGauge%60.%0A%20%20-%20%5Bborsh%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Fblob%2Fmaster%2Futils%2Fborsh.js)%3A%20provides%20the%20following%20functions%20for%20Binary%20Object%20Representation%20Serializer%20for%20Hashing%20%5Bborsh%5D(https%3A%2F%2Fborsh.io%2F)%0A%20%20%20%20-%20%60function%20serializeField%20(schema%2C%20value%2C%20fieldType%2C%20writer)%60%0A%20%20%20%20-%20%60function%20deserializeField%20(schema%2C%20fieldType%2C%20reader)%60%0A%20%20%20%20-%20%60function%20serialize%20(schema%2C%20fieldType%2C%20obj)%60%3A%20Serialize%20given%20object%20using%20schema%20of%20the%20form%3A%20%60%7B%20class_name%20-%3E%20%5B%20%5Bfield_name%2C%20field_type%5D%2C%20..%20%5D%2C%20..%20%7D%60%0A%20%20%20%20-%20%60class%20BinaryReader%60%3A%20Includes%20utilities%20to%20read%20numbers%2C%20strings%20arrays%20and%20burggers%0A%20%20%20%20-%20%60function%20deserialize%20(schema%2C%20fieldType%2C%20buffer)%60%0A%20%20%20%20-%20%60const%20signAndSendTransactionAsync%20%3D%20async%20(accessKey%2C%20account%2C%20receiverId%2Cactions)%20%3D%3E%60%0A%20%20%20%20-%20%60const%20txnStatus%20%3D%20async%20(account%2C%20txHash%2C%20retries%20%3D%20RETRY_TX_STATUS%2C%20wait%20%3D%201000)%20%3D%3E%60%0A%20%20%20%20-%20%60function%20getBorshTransactionLastResult%20(txResult)%60%0A%20%20%20%20-%20%60class%20BorshContract%20%7B%60%0A%20%20%20%20%20%20-%20%60constructor%20(borshSchema%2C%20account%2C%20contractId%2C%20options)%60%0A%20%20%20%20%20%20-%20%60async%20accessKeyInit%20()%60%0A%20%20%20%20-%20%60function%20borshify%20(block)%60%0A%20%20%20%20-%20%60function%20borshifyInitialValidators%20(initialValidators)%60%0A%20%20%20%20-%20%60const%20hexToBuffer%20%3D%20(hex)%20%3D%3E%60%0A%20%20%20%20-%20%60const%20readerToHex%20%3D%20(len)%20%3D%3E%60%0A%20%20-%20%5Bborshify-proof%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Fblob%2Fmaster%2Futils%2Fborshify-proof.js)%0A%20%20%20%20-%20%60function%20borshifyOutcomeProof%20(proof)%60%0A%20%20-%20%5Brobust%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Fblob%2Fmaster%2Futils%2Frobust.js)%3A%20his%20module%20gives%20a%20few%20utils%20for%20robust%20error%20handling%2C%20and%20wrap%20web3%20with%20error%20handling%20and%20retry%0A%20%20-%20%5Butils%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Fblob%2Fmaster%2Futils%2Futils.js)%0A%20%20%20%20-%20%60async%20function%20setupNear%20(config)%60%0A%20%20%20%20-%20%60async%20function%20setupEth%20(config)%60%0A%20%20%20%20-%20%60async%20function%20setupEthNear%20(config)%60%3A%20Setup%20connection%20to%20NEAR%20and%20Ethereum%20from%20given%20configuration.%0A%20%20%20%20-%20%60function%20remove0x%20(value)%60%3A%20Remove%200x%20if%20prepended%0A%20%20%20%20-%20%60function%20normalizeHex%20(value)%60%0A%20%20%20%20-%20%60async%20function%20accountExists%20(connection%2C%20accountId)%60%0A%20%20%20%20-%20%60async%20function%20createLocalKeyStore%20(networkId%2C%20keyPath)%60%0A%20%20%20%20-%20%60function%20getWeb3%20(config)%60%0A%20%20%20%20-%20%60function%20getEthContract%20(web3%2C%20path%2C%20address)%60%0A%20%20%20%20-%20%60function%20addSecretKey%20(web3%2C%20secretKey)%60%0A%20%20%20%20-%20%60async%20function%20ethCallContract%20(contract%2C%20methodName%2C%20args)%60%3A%20Wrap%20pure%20calls%20to%20Web3%20contract%20to%20handle%20errors%2Freverts%2Fgas%20usage.%0A%0A%23%23%23%23%20nearbridge%20Cryptographic%20Primitives%0A%0A-%20%5BEd25519.sol%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Fblob%2Fmaster%2Fcontracts%2Feth%2Fnearbridge%2Fcontracts%2FEd25519.sol)%3A%20Solidity%20implementation%20of%20the%20%5BEd25519%5D(https%3A%2F%2Fen.wikipedia.org%2Fwiki%2FEdDSA)%20which%20is%20the%20EdDSA%20signature%20scheme%20using%20SHA-512%20(SHA-2)%20and%20Curve25519%20(see%20%5Bhere%5D(https%3A%2F%2Fnbeguier.medium.com%2Fa-real-world-comparison-of-the-ssh-key-algorithms-b26b0b31bfd9)).%20It%20has%20the%20following%20functions%0A%20%20-%20%60function%20pow22501(uint256%20v)%20private%20pure%20returns%20(uint256%20p22501%2C%20uint256%20p11)%60%20%3A%20Computes%20(v%5E(2%5E250-1)%2C%20v%5E11)%20mod%20p%0A%20%20-%20%60function%20check(bytes32%20k%2C%20bytes32%20r%2C%20bytes32%20s%2C%20bytes32%20m1%2C%20bytes9%20m2)%60%20%3A%20has%20the%20following%20steps%0A%20%20%20%20-%20Step%201%3A%20compute%20SHA-512(R%2C%20A%2C%20M)%0A%20%20%20%20-%20Step%202%3A%20unpack%20k%0A%20%20%20%20-%20Step%203%3A%20compute%20multiples%20of%20k%0A%20%20%20%20-%20Step%204%3A%20compute%20s*G%20-%20h*A%0A%20%20%20%20-%20Step%205%3A%20compare%20the%20points%0A-%20%5BUtils.sol%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Fblob%2Fmaster%2Fcontracts%2Feth%2Fnearbridge%2Fcontracts%2FUtils.sol)%3A%20A%20set%20of%20utilty%20functions%20for%20byte%20manipulation%2C%20memory%20updates%20and%20%5Bkeccak%5D(https%3A%2F%2Fkeccak.team%2Fkeccak_specs_summary.html)%20functions.%0A%20%20-%20%60function%20swapBytes2(uint16%20v)%20internal%20pure%20returns%20(uint16)%60%0A%20%20-%20%60function%20swapBytes4(uint32%20v)%20internal%20pure%20returns%20(uint32)%60%0A%20%20-%20%60function%20swapBytes8(uint64%20v)%20internal%20pure%20returns%20(uint64)%60%0A%20%20-%20%60function%20swapBytes16(uint128%20v)%20internal%20pure%20returns%20(uint128)%60%0A%20%20-%20%60function%20swapBytes32(uint256%20v)%20internal%20pure%20returns%20(uint256)%60%0A%20%20-%20%60function%20readMemory(uint%20ptr)%20internal%20pure%20returns%20(uint%20res)%60%0A%20%20-%20%60function%20writeMemory(uint%20ptr%2C%20uint%20value)%20internal%20pure%60%0A%20%20-%20%60function%20memoryToBytes(uint%20ptr%2C%20uint%20length)%20internal%20pure%20returns%20(bytes%20memory%20res)%60%0A%20%20-%20%60function%20keccak256Raw(uint%20ptr%2C%20uint%20length)%20internal%20pure%20returns%20(bytes32%20res)%60%0A%20%20-%20%60function%20sha256Raw(uint%20ptr%2C%20uint%20length)%20internal%20view%20returns%20(bytes32%20res)%60%0A-%20%5BBorsh.sol%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Fblob%2Fmaster%2Fcontracts%2Feth%2Fnearbridge%2Fcontracts%2FBorsh.sol)%20provides%20Binary%20Object%20Representation%20Serializer%20for%20Hashing%20%5Bborsh%5D(https%3A%2F%2Fborsh.io%2F)%20functionality%20and%20imports%20%60Utils.sols%60.%20Structures%20and%20functions%20include%0A%20%20-%20%60struct%20Data%20%7Buint%20ptr%3B%20uint%20end%3B%7D%60%0A%20%20-%20%60function%20from(bytes%20memory%20data)%20internal%20pure%20returns%20(Data%20memory%20res)%60%0A%20%20-%20%60function%20requireSpace(Data%20memory%20data%2C%20uint%20length)%20internal%20pure%60%3A%20This%20function%20assumes%20that%20length%20is%20reasonably%20small%2C%20so%20that%20data.ptr%20%2B%20length%20will%20not%20overflow.%20In%20the%20current%20code%2C%20length%20is%20always%20less%20than%202%5E32.%0A%20%20-%20%60function%20read(Data%20memory%20data%2C%20uint%20length)%20internal%20pure%20returns%20(bytes32%20res)%60%0A%20%20-%20%60function%20done(Data%20memory%20data)%20internal%20pure%60%0A%20%20-%20%60function%20peekKeccak256(Data%20memory%20data%2C%20uint%20length)%20internal%20pure%20returns%20(bytes32)%60%3A%20Same%20considerations%20as%20for%20requireSpace.%0A%20%20-%20%60function%20peekSha256(Data%20memory%20data%2C%20uint%20length)%20internal%20view%20returns%20(bytes32)%60%3A%20Same%20considerations%20as%20for%20requireSpace.%0A%20%20-%20%60function%20decodeU8(Data%20memory%20data)%20internal%20pure%20returns%20(uint8)%60%0A%20%20-%20%60function%20decodeU16(Data%20memory%20data)%20internal%20pure%20returns%20(uint16)%60%0A%20%20-%20%60function%20decodeU32(Data%20memory%20data)%20internal%20pure%20returns%20(uint32)%60%0A%20%20-%20%60function%20decodeU64(Data%20memory%20data)%20internal%20pure%20returns%20(uint64)%60%0A%20%20-%20%60function%20decodeU128(Data%20memory%20data)%20internal%20pure%20returns%20(uint128)%60%0A%20%20-%20%60function%20decodeU256(Data%20memory%20data)%20internal%20pure%20returns%20(uint256)%60%0A%20%20-%20%60function%20decodeBytes20(Data%20memory%20data)%20internal%20pure%20returns%20(bytes20)%60%0A%20%20-%20%60function%20decodeBytes32(Data%20memory%20data)%20internal%20pure%20returns%20(bytes32)%60%0A%20%20-%20%60function%20decodeBool(Data%20memory%20data)%20internal%20pure%20returns%20(bool)%60%0A%20%20-%20%60function%20skipBytes(Data%20memory%20data)%20internal%20pure%60%0A%20%20-%20%60function%20decodeBytes(Data%20memory%20data)%20internal%20pure%20returns%20(bytes%20memory%20res)%60%0A-%20%5BNearDecoder.sol%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Fblob%2Fmaster%2Fcontracts%2Feth%2Fnearbridge%2Fcontracts%2FNearDecoder.sol)%3A%20Imports%20%60Borsh.sol%60%20and%20has%20utilities%20for%20decoding%20Public%20Keys%2C%20Signatures%2C%20Block%20Producers%2C%20Block%20Headers%20and%20Light%20Client%20Blocks.%0A%20%20-%20%60function%20decodePublicKey(Borsh.Data%20memory%20data)%20internal%20pure%20returns%20(PublicKey%20memory%20res)%60%0A%20%20-%20%60function%20decodeSignature(Borsh.Data%20memory%20data)%20internal%20pure%20returns%20(Signature%20memory%20res)%60%0A%20%20-%20%60function%20decodeBlockProducer(Borsh.Data%20memory%20data)%20internal%20pure%20returns%20(BlockProducer%20memory%20res)%60%0A%20%20-%20%60function%20decodeBlockProducers(Borsh.Data%20memory%20data)%20internal%20pure%20returns%20(BlockProducer%5B%5D%20memory%20res)%60%0A%20%20-%20%60function%20decodeOptionalBlockProducers(Borsh.Data%20memory%20data)%20internal%20view%20returns%20(OptionalBlockProducers%20memory%20res)%60%0A%20%20-%20%60function%20decodeOptionalSignature(Borsh.Data%20memory%20data)%20internal%20pure%20returns%20(OptionalSignature%20memory%20res)%60%0A%20%20-%20%60function%20decodeBlockHeaderInnerLite(Borsh.Data%20memory%20data)%20internal%20view%20returns%20(BlockHeaderInnerLite%20memory%20res)%60%0A%20%20-%20%60function%20decodeLightClientBlock(Borsh.Data%20memory%20data)%20internal%20view%20returns%20(LightClientBlock%20memory%20res)%60%0A-%20%5BProofDecoder.sol%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Fblob%2Fmaster%2Fcontracts%2Feth%2Fnearprover%2Fcontracts%2FProofDecoder.sol)%3A%20Imports%20%60Borsh.sol%60%20and%20%60NearDecoder.sol%60%20and%20has%20utilities%20for%20decoding%20Proofs%2C%20BlockHeader%2C%20ExecutionStatus%2C%20ExecutionOutcome%20and%20MerklePaths.%20Structures%20and%20functions%20include%0A%20%20-%20%60struct%20FullOutcomeProof%20%7BExecutionOutcomeWithIdAndProof%20outcome_proof%3B%20MerklePath%20outcome_root_proof%3B%20BlockHeaderLight%20block_header_lite%3B%20MerklePath%20block_proof%3B%7D%60%0A%20%20-%20%60function%20decodeFullOutcomeProof(Borsh.Data%20memory%20data)%20internal%20view%20returns%20(FullOutcomeProof%20memory%20proof)%60%0A%20%20-%20%60struct%20BlockHeaderLight%20%7Bbytes32%20prev_block_hash%3B%20bytes32%20inner_rest_hash%3B%20NearDecoder.BlockHeaderInnerLite%20inner_lite%3B%20bytes32%20hash%3B%7D%60%0A%20%20-%20%60function%20decodeBlockHeaderLight(Borsh.Data%20memory%20data)%20internal%20view%20returns%20(BlockHeaderLight%20memory%20header)%60%0A%20%20-%20%60struct%20ExecutionStatus%20%7Buint8%20enumIndex%3B%20bool%20unknown%3B%20bool%20failed%3B%20bytes%20successValue%3B%20bytes32%20successReceiptId%3B%7D%60%0A%20%20%20%20-%20%60successValue%60%20indicates%20if%20the%20final%20action%20succeeded%20and%20returned%20some%20value%20or%20an%20empty%20vec.%0A%20%20%20%20-%20%60successReceiptId%60%20is%20the%20final%20action%20of%20the%20receipt%20returned%20a%20promise%20or%20the%20signed%20transaction%20was%20converted%20to%20a%20receipt.%20Contains%20the%20receipt_id%20of%20the%20generated%20receipt.%0A%20%20-%20%60function%20decodeExecutionStatus(Borsh.Data%20memory%20data)%20internal%20pure%20returns%20(ExecutionStatus%20memory%20executionStatus)%60%0A%20%20-%20%60struct%20ExecutionOutcome%20%7Bbytes%5B%5D%20logs%3B%20bytes32%5B%5D%20receipt_ids%3B%20uint64%20gas_burnt%3B%20uint128%20tokens_burnt%3B%20bytes%20executor_id%3B%20ExecutionStatus%20status%3B%20bytes32%5B%5D%20merkelization_hashes%3B%7D%60%0A%20%20%20%20-%20%60bytes%5B%5D%20logs%3B%60%3A%20Logs%20from%20this%20transaction%20or%20receipt.%0A%20%20%20%20-%20%60bytes32%5B%5D%20receipt_ids%3B%60%3A%20Receipt%20IDs%20generated%20by%20this%20transaction%20or%20receipt.%0A%20%20%20%20-%20%60uint64%20gas_burnt%3B%60%3A%20The%20amount%20of%20the%20gas%20burnt%20by%20the%20given%20transaction%20or%20receipt.%0A%20%20%20%20-%20%60uint128%20tokens_burnt%3B%60%3A%20The%20total%20number%20of%20the%20tokens%20burnt%20by%20the%20given%20transaction%20or%20receipt.%0A%20%20%20%20-%20%60bytes%20executor_id%3B%60%3A%20Hash%20of%20the%20transaction%20or%20receipt%20id%20that%20produced%20this%20outcome.%0A%20%20%20%20-%20%60ExecutionStatus%20status%60%3A%20Execution%20status.%20Contains%20the%20result%20in%20case%20of%20successful%20execution.%0A%20%20%20%20-%20%60bytes32%5B%5D%20merkelization_hashes%3B%60%0A%20%20-%20%60function%20decodeExecutionOutcome(Borsh.Data%20memory%20data)%20internal%20view%20returns%20(ExecutionOutcome%20memory%20outcome)%60%0A%20%20-%20%60struct%20ExecutionOutcomeWithId%20%7Bbytes32%20id%3B%20ExecutionOutcome%20outcome%3B%20bytes32%20hash%3B%7D%60%0A%20%20%20%20-%20%60bytes32%20id%60%3A%20is%20the%20transaction%20hash%20or%20the%20receipt%20ID.%0A%20%20-%20%60function%20decodeExecutionOutcomeWithId(Borsh.Data%20memory%20data)%20internal%20view%20returns%20(ExecutionOutcomeWithId%20memory%20outcome)%60%0A%20%20-%20%60struct%20MerklePathItem%20%7Bbytes32%20hash%3B%20uint8%20direction%3B%7D%60%0A%20%20%20%20-%20%60uint8%20direction%60%3A%20where%200%20%3D%20left%2C%201%20%3D%20right%0A%20%20-%20%60function%20decodeMerklePathItem(Borsh.Data%20memory%20data)%20internal%20pure%20returns%20(MerklePathItem%20memory%20item)%60%0A%20%20-%20%60struct%20MerklePath%20%7BMerklePathItem%5B%5D%20items%3B%7D%60%0A%20%20-%20%60function%20decodeMerklePath(Borsh.Data%20memory%20data)%20internal%20pure%20returns%20(MerklePath%20memory%20path)%60%0A%20%20-%20%60struct%20ExecutionOutcomeWithIdAndProof%20%7BMerklePath%20proof%3B%20bytes32%20block_hash%3B%20ExecutionOutcomeWithId%20outcome_with_id%3B%7D%60%0A%20%20-%20%60function%20decodeExecutionOutcomeWithIdAndProof(Borsh.Data%20memory%20data)internal%20view%20returns%20(ExecutionOutcomeWithIdAndProof%20memory%20outcome)%60%0A%0A%23%23%23%20Token%20Transfer%20Process%20Flow%0A%0AThe%20%5BNEAR%20Rainbow%20Bridge%5D(https%3A%2F%2Fnear.org%2Fbridge%2F)%20uses%20ERC-20%20connectors%20which%20are%20developed%20in%20%5Brainbow-token-connector%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-token-connector)%20and%20%5Brainbow-bridge-client%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge-client).%20Also%20see%20%5Beth2near-fun-transfer.md%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Fblob%2Fmaster%2Fdocs%2Fworkflows%2Feth2near-fun-transfer.mdx).%0A%0AFollowing%20is%20an%20overview%20of%20timing%20and%20anticipated%20costs%0A%0A-%20Once%20on%20NEAR%2C%20transactions%20will%20confirm%20in%201-2%20seconds%20and%20cost%20well%20under%20%241%20in%20most%20cases.%0A-%20Since%20the%20Bridge%20requires%20transactions%20on%20Ethereum%20for%20NEAR%20and%20Ethereum%2C%20the%20following%20costs%20are%20expected.%0A-%20Sending%20assets%20from%20Ethereum%20to%20NEAR%20takes%20about%20six%20minutes%20(20%20blocks)%20and%20for%20ERC-20%20costs%20about%20%2410%20on%20average.%0A-%20Sending%20assets%20from%20NEAR%20back%20to%20Ethereum%20currently%20takes%20a%20maximum%20of%20sixteen%20hours%20(due%20to%20Ethereum%20finality%20times)%20and%20costs%20around%20%2460%20(due%20to%20ETH%20gas%20costs%20and%20at%20current%20ETH%20price).%20These%20costs%20and%20speeds%20will%20improve%20in%20the%20near%20future.%0A%0A_Note%3A%20This%20uses%20Ethreum%20%5BERC20%5D(https%3A%2F%2Feips.ethereum.org%2FEIPS%2Feip-20)%20and%20NEAR%20%5BNEP-141%5D(https%3A%2F%2Fnomicon.io%2FStandards%2FTokens%2FFungibleToken%2FCore)%20initally%20developed%20for%20%5BNEP-21%5D(https%3A%2F%2Fgithub.com%2Fnear%2FNEPs%2Fpull%2F21)_%0A%0A**%5BGeneric%20ERC-20%2FNEP-141%20connector%20for%20Rainbow%20Bridge%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-token-connector%2Fblob%2Fmaster%2FREADME.mdx)**%0A%0A**Specification**%0A%0A**Ethereum's%20side**%0A%0A%60%60%60solidity%0Acontract%20ERC20Locker%20%7B%0A%20%20constructor(bytes%20memory%20nearTokenFactory%2C%20INearProver%20prover)%20public%3B%0A%20%20function%20lockToken(IERC20%20token%2C%20uint256%20amount%2C%20string%20memory%20accountId)%20public%3B%0A%20%20function%20unlockToken(bytes%20memory%20proofData%2C%20uint64%20proofBlockHeader)%20public%3B%0A%7D%0A%60%60%60%0A%0A**NEAR's%20side**%0A%0A%60%60%60rust%0Astruct%20BridgeTokenFactory%20%7B%0A%20%20%20%20%2F%2F%2F%20The%20account%20of%20the%20prover%20that%20we%20can%20use%20to%20prove%0A%20%20%20%20pub%20prover_account%3A%20AccountId%2C%0A%20%20%20%20%2F%2F%2F%20Address%20of%20the%20Ethereum%20locker%20contract.%0A%20%20%20%20pub%20locker_address%3A%20%5Bu8%3B%2020%5D%2C%0A%20%20%20%20%2F%2F%2F%20Hashes%20of%20the%20events%20that%20were%20already%20used.%0A%20%20%20%20pub%20used_events%3A%20UnorderedSet%3CVec%3Cu8%3E%3E%2C%0A%20%20%20%20%2F%2F%2F%20Mapping%20from%20Ethereum%20tokens%20to%20NEAR%20tokens.%0A%20%20%20%20pub%20tokens%3A%20UnorderedMap%3CEvmAddress%2C%20AccountId%3E%3B%0A%7D%0A%0Aimpl%20BridgeTokenFactory%20%7B%0A%20%20%20%20%2F%2F%2F%20Initializes%20the%20contract.%0A%20%20%20%20%2F%2F%2F%20%60prover_account%60%3A%20NEAR%20account%20of%20the%20Near%20Prover%20contract%3B%0A%20%20%20%20%2F%2F%2F%20%60locker_address%60%3A%20Ethereum%20address%20of%20the%20locker%20contract%2C%20in%20hex.%0A%20%20%20%20%23%5Binit%5D%0A%20%20%20%20pub%20fn%20new(prover_account%3A%20AccountId%2C%20locker_address%3A%20String)%20-%3E%20Self%3B%0A%0A%20%20%20%20%2F%2F%2F%20Relays%20the%20lock%20event%20from%20Ethereum.%0A%20%20%20%20%2F%2F%2F%20Uses%20prover%20to%20validate%20that%20proof%20is%20correct%20and%20relies%20on%20a%20canonical%20Ethereum%20chain.%0A%20%20%20%20%2F%2F%2F%20Send%20%60mint%60%20action%20to%20the%20token%20that%20is%20specified%20in%20the%20proof.%0A%20%20%20%20%23%5Bpayable%5D%0A%20%20%20%20pub%20fn%20deposit(%26mut%20self%2C%20proof%3A%20Proof)%3B%0A%0A%20%20%20%20%2F%2F%2F%20A%20callback%20from%20BridgeToken%20contract%20deployed%20under%20this%20factory.%0A%20%20%20%20%2F%2F%2F%20Is%20called%20after%20tokens%20are%20burned%20there%20to%20create%20an%20receipt%20result%20%60(amount%2C%20token_address%2C%20recipient_address)%60%20for%20Ethereum%20to%20unlock%20the%20token.%0A%20%20%20%20pub%20fn%20finish_withdraw(token_account%3A%20AccountId%2C%20amount%3A%20Balance%2C%20recipient%3A%20EvmAddress)%3B%0A%0A%20%20%20%20%2F%2F%2F%20Transfers%20given%20NEP-21%20token%20from%20%60predecessor_id%60%20to%20factory%20to%20lock.%0A%20%20%20%20%2F%2F%2F%20On%20success%2C%20leaves%20a%20receipt%20result%20%60(amount%2C%20token_address%2C%20recipient_address)%60.%0A%20%20%20%20%23%5Bpayable%5D%0A%20%20%20%20pub%20fn%20lock(%26mut%20self%2C%20token%3A%20AccountId%2C%20amount%3A%20Balance%2C%20recipient%3A%20String)%3B%0A%0A%20%20%20%20%2F%2F%2F%20Relays%20the%20unlock%20event%20from%20Ethereum.%0A%20%20%20%20%2F%2F%2F%20Uses%20prover%20to%20validate%20that%20proof%20is%20correct%20and%20relies%20on%20a%20canonical%20Ethereum%20chain.%0A%20%20%20%20%2F%2F%2F%20Uses%20NEP-21%20%60transfer%60%20action%20to%20move%20funds%20to%20%60recipient%60%20account.%0A%20%20%20%20%23%5Bpayable%5D%0A%20%20%20%20pub%20fn%20unlock(%26mut%20self%2C%20proof%3A%20Proof)%3B%0A%0A%20%20%20%20%2F%2F%2F%20Deploys%20BridgeToken%20contract%20for%20the%20given%20EVM%20address%20in%20hex%20code.%0A%20%20%20%20%2F%2F%2F%20The%20name%20of%20new%20NEP21%20compatible%20contract%20will%20be%20%3Chex(evm_address)%3E.%3Ccurrent_id%3E.%0A%20%20%20%20%2F%2F%2F%20Expects%20~35N%20attached%20to%20cover%20storage%20for%20BridgeToken.%0A%20%20%20%20%23%5Bpayable%5D%0A%20%20%20%20pub%20fn%20deploy_bridge_token(address%3A%20String)%3B%0A%0A%20%20%20%20%2F%2F%2F%20Checks%20if%20Bridge%20Token%20has%20been%20successfully%20deployed%20with%20%60deploy_bridge_token%60.%0A%20%20%20%20%2F%2F%2F%20On%20success%2C%20returns%20the%20name%20of%20NEP21%20contract%20associated%20with%20given%20address%20(%3Chex(evm_address)%3E.%3Ccurrent_id%3E).%0A%20%20%20%20%2F%2F%2F%20Otherwise%2C%20returns%20%22token%20do%20not%20exists%22%20error.%0A%20%20%20%20pub%20fn%20get_bridge_token_account_id(%26self%2C%20address%3A%20String)%20-%3E%20AccountId%3B%0A%7D%0A%0Astruct%20BridgeToken%20%7B%0A%20%20%20controller%3A%20AccountId%2C%0A%20%20%20token%3A%20Token%2C%20%2F%2F%20uses%20https%3A%2F%2Fgithub.com%2Filblackdragon%2Fbalancer-near%2Ftree%2Fmaster%2Fnear-lib-rs%0A%7D%0A%0Aimpl%20BridgeToken%20%7B%0A%20%20%20%20%2F%2F%2F%20Setup%20the%20Token%20contract%20with%20given%20factory%2Fcontroller.%0A%20%20%20%20pub%20fn%20new(controller%3A%20AccountId)%20-%3E%20Self%3B%0A%0A%20%20%20%20%2F%2F%2F%20Mint%20tokens%20to%20given%20user.%20Only%20can%20be%20called%20by%20the%20controller.%0A%20%20%20%20pub%20fn%20mint(%26mut%20self%2C%20account_id%3A%20AccountId%2C%20amount%3A%20Balance)%3B%0A%0A%20%20%20%20%2F%2F%2F%20Withdraw%20tokens%20from%20this%20contract.%0A%20%20%20%20%2F%2F%2F%20Burns%20sender's%20tokens%20and%20calls%20controller%20to%20create%20event%20for%20relaying.%0A%20%20%20%20pub%20fn%20withdraw(%26mut%20self%2C%20amount%3A%20U128%2C%20recipient%3A%20String)%20-%3E%20Promise%3B%0A%7D%0A%0Aimpl%20FungibleToken%20for%20BridgeToken%20%7B%0A%20%20%20%2F%2F%20see%20example%20https%3A%2F%2Fgithub.com%2Filblackdragon%2Fbalancer-near%2Fblob%2Fmaster%2Fbalancer-pool%2Fsrc%2Flib.rs%23L329%0A%7D%0A%60%60%60%0A%0A**Setup%20new%20ERC-20%20on%20NEAR**%0A%0ATo%20setup%20token%20contract%20on%20NEAR%20side%2C%20anyone%20can%20call%20%60%3Cbridge_token_factory%3E.deploy_bridge_token(%3Cerc20%3E)%60%20where%20%60%3Cerc20%3E%60%20is%20the%20address%20of%20the%20token.%0AWith%20this%20call%20must%20attach%20the%20amount%20of%20%24NEAR%20to%20cover%20storage%20for%20(at%20least%2030%20%24NEAR%20currently).%0A%0AThis%20will%20create%20%60%3C%3Chex(erc20)%3E.%3Cbridge_token_factory%3E%3E%60%20NEP141-compatible%20contract.%0A%0A**Usage%20flow%20Ethereum%20-%3E%20NEAR**%0A%0A1.%20User%20sends%20%60%3Cerc20%3E.approve(%3Cerc20locker%3E%2C%20%3Camount%3E)%60%20Ethereum%20transaction.%0A2.%20User%20sends%20%60%3Cerc20locker%3E.lock(%3Cerc20%3E%2C%20%3Camount%3E%2C%20%3Cdestination%3E)%60%20Ethereum%20transaction.%20This%20transaction%20will%20create%20%60Locked%60%20event.%0A3.%20Relayers%20will%20be%20sending%20Ethereum%20blocks%20to%20the%20%60EthClient%60%20on%20NEAR%20side.%0A4.%20After%20sufficient%20number%20of%20confirmations%20on%20top%20of%20the%20mined%20Ethereum%20block%20that%20contain%20the%20%60lock%60%20transaction%2C%20user%20or%20relayer%20can%20call%20%60BridgeTokenFactory.deposit(proof)%60.%20Proof%20is%20the%20extracted%20information%20from%20the%20event%20on%20Ethereum%20side.%0A5.%20%60BridgeTokenFactory.deposit%60%20function%20will%20call%20%60EthProver%60%20and%20verify%20that%20proof%20is%20correct%20and%20relies%20on%20a%20block%20with%20sufficient%20number%20of%20confirmations.%0A6.%20%60EthProver%60%20will%20return%20callback%20to%20%60BridgeTokenFactory%60%20confirming%20that%20proof%20is%20correct.%0A7.%20%60BridgeTokenFactory%60%20will%20call%20%60%3C%3Chex(erc20)%3E.%3Cbridge_token_factory%3E%3E.mint(%3Cnear_account_id%3E%2C%20%3Camount%3E)%60.%0A8.%20User%20can%20use%20%60%3C%3Chex(erc20)%3E.%3Cbridge_token_factory%3E%3E%60%20token%20in%20other%20applications%20now%20on%20NEAR.%0A%0A**Usage%20flow%20NEAR%20-%3E%20Ethereum**%0A%0A1.%20%60token-locker%60%20locks%20NEP141%20tokens%20on%20NEAR%20side.%0A%0ATo%20deposit%20funds%20into%20the%20locker%2C%20call%20%60ft_transfer_call%60%20where%20%60msg%60%20contains%20Ethereum%20address%20the%20funds%20should%20arrive%20to.%0AThis%20will%20emit%20%60%3Ctoken%3A%20String%2C%20amount%3A%20u128%2C%20recipient%20address%3A%20EthAddress%3E%60%20(which%20arrives%20to%20%60deposit%60%20on%20Ethereum%20side).%0A%0AAccepts%20%60Unlock(token%3A%20String%2C%20sender_id%3A%20EthAddress%2C%20amount%3A%20u256%2C%20recipient%3A%20String)%60%20event%20from%20Ethereum%20side%20with%20a%20proof%2C%20verifies%20its%20correctness.%0AIf%20%60recipient%60%20contains%20'%3A'%20will%20split%20it%20into%20%60%3Crecipient%2C%20msg%3E%60%20and%20do%20%60ft_transfer_call(recipient%2C%20amount%2C%20None%2C%20msg)%60.%20Otherwise%20will%20%60ft_transfer%60%20to%20%60recipient%60.%0A%0ATo%20get%20metadata%20of%20token%20to%20Ethereum%2C%20need%20to%20call%20%60log_metadata%60%2C%20which%20will%20create%20a%20result%20%60%3Ctoken%3A%20String%2C%20name%3A%20String%2C%20symbol%3A%20String%2C%20decimals%3A%20u8%2C%20blockHeight%3A%20u64%3E%60.%0A%0A2.%20%60erc20-bridge-token%60%20-%20%60BridgeTokenFactory%60%20and%20%60BridgeToken%60%20Ethereum%20contracts.%0A%0A%60BridgeTokenFactory%60%20creates%20new%20%60BridgeToken%60%20that%20correspond%20to%20specific%20token%20account%20id%20on%20NEAR%20side.%0A%0A%60BridgeTokenFactory%60%20receives%20%60deposit%60%20with%20proof%20from%20NEAR%2C%20verify%20them%20and%20mint%20appropriate%20amounts%20on%20recipient%20addresses.%0A%0ACalling%20%60withdraw%60%20will%20burn%20tokens%20of%20this%20user%20and%20will%20generate%20event%20%60%3Ctoken%3A%20String%2C%20sender_id%3A%20EthAddress%2C%20amount%3A%20u256%2C%20recipient%3A%20String%3E%60%20that%20can%20be%20relayed%20to%20%60token-factory%60.%0A%0A**Caveats**%0A%0AGenerally%2C%20this%20connector%20allows%20any%20account%20to%20call%20%60ft_transfer_call%60%20opening%20for%20potential%20malicious%20tokens%20to%20be%20bridged%20to%20Ethereum.%0AThe%20expectation%20here%20is%20that%20on%20Ethereum%20side%2C%20the%20token%20lists%20will%20handle%20this%2C%20as%20it's%20the%20same%20attack%20model%20as%20malicious%20tokens%20on%20Uniswap%20and%20other%20DEXs.%0A%0AUsing%20Ethereum%20%60BridgeTokenFactory%60%20contract%20can%20always%20resolve%20Ethereum%20address%20of%20a%20contract%20back%20to%20NEAR%20one%20to%20check%20that%20it%20is%20indeed%20bridging%20token%20from%20NEAR%20and%20is%20created%20by%20this%20factory.%0A%0A**Testing**%0A%0ATesting%20Ethereum%20side%0A%0A%60%60%60%0Acd%20erc20-connector%0Ayarn%0Ayarn%20run%20test%0A%60%60%60%0A%0ATesting%20NEAR%20side%0A%0A%60%60%60%0Amake%20res%2Fbridge_token_factory.wasm%0Acargo%20test%20--all%0A%60%60%60%0A%0A%23%23%23%23%20Token%20Transfer%20Components%0A%0A_Note%3A%20This%20uses%20Ethreum%20%5BERC20%5D(https%3A%2F%2Feips.ethereum.org%2FEIPS%2Feip-20)%20and%20NEAR%20%5BNEP-141%5D(https%3A%2F%2Fnomicon.io%2FStandards%2FTokens%2FFungibleToken%2FCore)%20initally%20developed%20for%20%5BNEP-21%5D(https%3A%2F%2Fgithub.com%2Fnear%2FNEPs%2Fpull%2F21)_%0A%0A-%20%5Brainbow-token-connector%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-token-connector)%0A%20%20-%20NEAR%20rust%20based%20contracts%0A%20%20%20%20-%20%5Bbridge-common%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-token-connector%2Ftree%2Fmaster%2Fbridge-common)%3A%20Common%20functions%20for%20NEAR%2C%20currently%20only%20%60pub%20fn%20parse_recipient(recipient%3A%20String)%20-%3E%20Recipient%60%0A%20%20%20%20-%20%5Bbridge-token-factory%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-token-connector%2Ftree%2Fmaster%2Fbridge-token-factory)%3A%20Functions%20for%20managing%20tokens%20on%20NEAR%20including%20but%20not%20limited%20to%20%60update_metadata%60%2C%20%60deposit%60%2C%20%60get_tokens%60%2C%20%60finish_updating_metadata%60%2C%20%60finish_updating_metadata%60%2C%20%60finish_withdraw%60%2C%20%60deploy_bridge_token%60%2C%20%60get_bridge_token_account_id%60%2C%20%60is_used_proof%60%2C%20%60record_proof%60%0A%20%20%20%20-%20%5Bbridge-token%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-token-connector%2Ftree%2Fmaster%2Fbridge-token)%3A%20Token%20functions%20on%20NEAR%20including%20but%20not%20limited%20to%20%60mint%60%20and%20%60withdraw%60%0A%20%20%20%20-%20%5Btoken-locker%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-token-connector%2Ftree%2Fmaster%2Ftoken-locker)%3A%20Token%20Locker%20functions%20on%20NEAR%20including%20but%20not%20limited%20to%20%60withdraw%60%2C%20%60finish_deposit%60%2C%20%60is_used_proof%60%0A%20%20-%20Ethereum%20solidity%20based%20contracts%0A%20%20%20%20-%20%5Berc20-bridge-token%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-token-connector%2Ftree%2Fmaster%2Ferc20-bridge-token)%3A%20Ethereum%20Bridge%20token%20contracts%20including%20but%20not%20limited%20to%0A%20%20%20%20%20%20-%20%5BBridgeToken.sol%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-token-connector%2Fblob%2Fmaster%2Ferc20-bridge-token%2Fcontracts%2FBridgeToken.sol)%0A%20%20%20%20%20%20-%20%5BBridgeTokenFactory.sol%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-token-connector%2Fblob%2Fmaster%2Ferc20-bridge-token%2Fcontracts%2FBridgeTokenFactory.sol)%0A%20%20%20%20%20%20-%20%5BBridgeTokenProxy.sol%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-token-connector%2Fblob%2Fmaster%2Ferc20-bridge-token%2Fcontracts%2FBridgeTokenProxy.sol)%0A%20%20%20%20%20%20-%20%5BProofConsumer.sol%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-token-connector%2Fblob%2Fmaster%2Ferc20-bridge-token%2Fcontracts%2FProofConsumer.sol)%0A%20%20%20%20%20%20-%20%5BResultsDecoder%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-token-connector%2Fblob%2Fmaster%2Ferc20-bridge-token%2Fcontracts%2FResultsDecoder.sol)%0A%20%20%20%20-%20%5Berc20-connector%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-token-connector%2Ftree%2Fmaster%2Ferc20-connector)%3A%20has%20%5BERC20Locker.sol%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-token-connector%2Fblob%2Fmaster%2Ferc20-connector%2Fcontracts%2FERC20Locker.sol)%20which%20is%20used%20to%20lock%20and%20unlock%20tokens.%20It%20is%20linked%20to%20the%20bridge%20token%20factory%20on%20NEAR%20side.%20It%20also%20links%20to%20the%20prover%20that%20it%20uses%20to%20unlock%20the%20tokens.%20(see%20%5Bhere%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Ftree%2Fmaster%2Fcontracts%2Feth%2Fnearbridge%2Fcontracts))%0A%0A%23%23%23%23%20References%0A%0A-%20%5BLighthouse%20Documentation%5D(https%3A%2F%2Flighthouse-book.sigmaprime.io%2F)%3A%20ETH%202.0%20Consensus%20Client%20Lighthouse%20documentation%0A%0A-%20%5BLighthouse%20Github%5D(https%3A%2F%2Fgithub.com%2Fsigp%2Flighthouse)%3A%20ETH%202.0%20Consensus%20Client%20Lighthouse%20Github%0A-%20%5BLighthouse%3A%20Blog%5D(https%3A%2F%2Flighthouse-blog.sigmaprime.io%2F)%3A%20ETH%202.0%20Consensus%20Client%20Lighthouse%20Blog%0A-%20%5Beth2near-block-relay-rs%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Ftree%2Fmaster%2Feth2near%2Feth2near-block-relay-rs)%0A-%20%5Bnearbridge%20contracts%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Ftree%2Fmaster%2Fcontracts%2Feth%2Fnearbridge)%0A-%20%5Bnearprover%20contracts%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Ftree%2Fmaster%2Fcontracts%2Feth%2Fnearprover)%0A%0A%23%23%23%20Prysm%20Light%20Client%0A%0A%23%23%23%23%20References%0A%0A-%20%5BPrysm%3A%20Light-client%20(WORK%20IN%20PROGRESS)%5D(https%3A%2F%2Fgithub.com%2Fjinfwhuang%2Fprysm%2Fpull%2F5)%3A%0A%0A-%20%5BPrysm%3A%20Light-client%20Client%20WIP%5D(https%3A%2F%2Fgithub.com%2Fjinfwhuang%2Fprysm%2Ftree%2Fjin-light%2Fcmd%2Flight-client%23light-client-client)%3A%20An%20independent%20light%20client%20client%0A-%20%5BPrysm%3A%20light-client%20server%20PR%5D(https%3A%2F%2Fgithub.com%2Fprysmaticlabs%2Fprysm%2Fpull%2F10034)%3A%20a%20feature%20PR%20that%20implements%20the%20basic%20production%20level%20changes%20to%20Prysm%20to%20comply%20as%20a%20light-client%20server%20to%20begin%20serving%20light%20client%20requests%0A%0A%23%23%20Harmony%20Merkle%20Mount%20Range%0A%0A-%20Harmony%20%5BMMR%20PR%20Review%5D(https%3A%2F%2Fgithub.com%2Fharmony-one%2Fharmony%2Fpull%2F3872)%20and%20%5Blatest%20PR%5D(https%3A%2F%2Fgithub.com%2Fharmony-one%2Fharmony%2Fpull%2F4198%2Ffiles)%20uses%20Merkle%20Mountain%20Ranges%20to%20facilitate%20light%20client%20development%20against%20Harmony's%20sharded%20Proof%20of%20Stake%20Chain%0A%0A%23%23%20Near%20Rainbow%20Bridge%20Review%0A%0AThe%20%5BNEAR%20Rainbow%20bridge%5D(https%3A%2F%2Fnear.org%2Fbridge%2F)%20is%20in%20%5Bthis%20github%20repository%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge)%20and%20is%20supported%20by%20%5BAurora-labs%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near).%0A%0AIt%20recently%20provided%20support%20for%20ETH%202.0%20in%20this%20%5BPull%20Request%20(762)%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Fpull%2F762).%0A%0AIt%20interacts%20%5Blighthouse%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Flighthouse)%20for%20Ethereum%202.0%20Consensus%20and%20tree_hash%20functions%20as%20well%20as%20bls%20signatures.%0A%0AHigh%20Level%20their%20architecture%20is%20similar%20to%20the%20Horizon%20Bridge%20but%20with%20some%20key%20differences%2C%20including%20but%20not%20limited%20to%0A%0A-%20interacting%20with%20the%20beacon%20chain%20now%20for%20finality%20%60is_correct_finality_update%60%20%5Bsee%20finality-update-verify%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Fblob%2Fmaster%2Feth2near%2Ffinality-update-verify%2Fsrc%2Flib.rs%23L36)%0A-%20Updated%20execution%20block%20proof%20to%20use%20the%20BEACONRPCClient%20and%20with%20an%20updated%20merkle%20tree%0A%20%20-%20Design%20can%20be%20found%20in%20%5BPR-762%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Fpull%2F762)%0A%0A%23%23%23%20NEAR%20Rainbow%20Bridge%3A%20Component%20Overview%0A%0AThe%20following%20smart%20contracts%20are%20deployed%20on%20NEAR%20and%20work%20in%20conjunction%20with%20eth2near%20bridging%20functionality%20to%20propogate%20blocks%20from%20Ethereum%20to%20NEAR.%0A%0A**%5C*Note**%20here%20we%20will%20focus%20on%20the%20%60eth2-client%60%20for%20ETH%202.0%20Proof%20of%20Stake%20Bridging%20however%20if%20interested%20in%20however%20there%20is%20also%20an%20%60eth-client%60%20which%20was%20used%20for%20ETH%201.0%20Proof%20of%20Work%20Integration%20using%20%5Brust-ethhash%5D(https%3A%2F%2Fgithub.com%2Fnearprotocol%2Frust-ethash).%5C*%0A%0A-%20%5BSmart%20Contracts%20Deployed%20on%20NEAR%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Ftree%2Fmaster%2Fcontracts%2Fnear)%0A%20%20-%20%5Beth2-client%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Ftree%2Fmaster%2Fcontracts%2Fnear%2Feth2-client)%20implements%20the%20Ethereum%20Light%20Client%20on%20Near%0A%20%20%20%20-%20it%20provides%20functions%20including%20but%20not%20limited%20to%3A%0A%20%20%20%20%20%20-%20validate%20the%20light%20client%0A%20%20%20%20%20%20-%20verify%20the%20finality%20branch%0A%20%20%20%20%20%20-%20verify%20bls%20signatures%0A%20%20%20%20%20%20-%20update%20finalized%20headers%0A%20%20%20%20%20%20-%20updates%20the%20submittes%0A%20%20%20%20%20%20-%20prune%20finalized%20blocks.%0A%20%20%20%20-%20It%20interacts%20with%20the%20beach%20chain%2C%20uses%20%5BBorsh%5D(https%3A%2F%2Fborsh.io%2F)%20for%20serialization%20and%20%5Blighthouse%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Flighthouse)%20for%20Ethereum%202.0%20Consensus%20and%20tree_hash%20functions%20as%20well%20as%20bls%20signatures.%20See%20%5Bhere%5D(https%3A%2F%2Flighthouse-book.sigmaprime.io%2F)%20for%20more%20information%20on%20lighthouse.%20Below%20is%20a%20list%20of%20dependencies%20from%20%5Beth2-client%2FCargo.toml%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Fblob%2Fmaster%2Fcontracts%2Fnear%2Feth2-client%2FCargo.toml)%0A%0A%20%20%20%20%20%20%20%20%20%20%20%20%60%60%60%0A%20%20%20%20%20%20%20%20%20%20%20%20%5Bdependencies%5D%0A%20%20%20%20%20%20%20%20%20%20%20%20ethereum-types%20%3D%20%220.9.2%22%0A%20%20%20%20%20%20%20%20%20%20%20%20eth-types%20%3D%20%20%7B%20path%20%3D%20%22..%2Feth-types%22%20%7D%0A%20%20%20%20%20%20%20%20%20%20%20%20eth2-utility%20%3D%20%20%7B%20path%20%3D%20%22..%2Feth2-utility%22%20%7D%0A%20%20%20%20%20%20%20%20%20%20%20%20tree_hash%20%3D%20%7B%20git%20%3D%20%22https%3A%2F%2Fgithub.com%2Faurora-is-near%2Flighthouse.git%22%2C%20rev%20%3D%20%22b624c3f0d3c5bc9ea46faa14c9cb2d90ee1e1dec%22%20%7D%0A%20%20%20%20%20%20%20%20%20%20%20%20merkle_proof%20%3D%20%7B%20git%20%3D%20%22https%3A%2F%2Fgithub.com%2Faurora-is-near%2Flighthouse.git%22%2C%20rev%20%3D%20%22b624c3f0d3c5bc9ea46faa14c9cb2d90ee1e1dec%22%20%7D%0A%20%20%20%20%20%20%20%20%20%20%20%20bls%20%3D%20%7B%20git%20%3D%20%22https%3A%2F%2Fgithub.com%2Faurora-is-near%2Flighthouse.git%22%2C%20optional%20%3D%20true%2C%20rev%20%3D%20%22b624c3f0d3c5bc9ea46faa14c9cb2d90ee1e1dec%22%2C%20default-features%20%3D%20false%2C%20features%20%3D%20%5B%22milagro%22%5D%7D%0A%20%20%20%20%20%20%20%20%20%20%20%20admin-controlled%20%3D%20%20%7B%20path%20%3D%20%22..%2Fadmin-controlled%22%20%7D%0A%20%20%20%20%20%20%20%20%20%20%20%20near-sdk%20%3D%20%224.0.0%22%0A%20%20%20%20%20%20%20%20%20%20%20%20borsh%20%3D%20%220.9.3%22%0A%20%20%20%20%20%20%20%20%20%20%20%20bitvec%20%3D%20%221.0.0%22%0A%20%20%20%20%20%20%20%20%20%20%20%20%60%60%60%0A%0A-%20%5Beth2near%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Ftree%2Fmaster%2Feth2near)%20supports%20the%20relaying%20of%20blocks%20and%20the%20verification%20of%20finality%20between%20etherum%20and%20Near.%20It%20has%20the%20following%20components%0A%20%20-%20%5Bcontract_wrapper%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Ftree%2Fmaster%2Feth2near%2Fcontract_wrapper)%3A%20provides%20rust%20wrappers%20for%20interacting%20with%20the%20%5Bsolidity%20contracts%20on%20near%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Ftree%2Fmaster%2Fcontracts%2Fnear)%0A%20%20%20%20-%20Contracts%20include%20(from%20%5B%60lib.rs%60%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Fblob%2Fmaster%2Feth2near%2Fcontract_wrapper%2Fsrc%2Flib.rs))%0A%0A%20%20%20%20%20%20%20%20%20%20%20%20%60%60%60%0A%20%20%20%20%20%20%20%20%20%20%20%20pub%20mod%20contract_wrapper_trait%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20pub%20mod%20dao_contract%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20pub%20mod%20dao_eth_client_contract%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20pub%20mod%20dao_types%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20pub%20mod%20errors%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20pub%20mod%20eth_client_contract%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20pub%20mod%20eth_client_contract_trait%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20pub%20mod%20file_eth_client_contract%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20pub%20mod%20near_contract_wrapper%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20pub%20mod%20sandbox_contract_wrapper%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20pub%20mod%20utils%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20%60%60%60%0A%0A%20%20%20%20-%20Dependencies%20include%20(from%20%5Bcontract_wrapper%2FCargo.toml%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Fblob%2Fmaster%2Feth2near%2Fcontract_wrapper%2FCargo.toml))%0A%0A%20%20%20%20%20%20%20%20%20%20%20%20%60%60%60%0A%20%20%20%20%20%20%20%20%20%20%20%20%5Bdependencies%5D%0A%20%20%20%20%20%20%20%20%20%20%20%20borsh%20%3D%20%220.9.3%22%0A%20%20%20%20%20%20%20%20%20%20%20%20futures%20%3D%20%220.3.21%22%0A%20%20%20%20%20%20%20%20%20%20%20%20async-std%20%3D%20%221.12.0%22%0A%20%20%20%20%20%20%20%20%20%20%20%20near-sdk%20%3D%20%224.0.0%22%0A%20%20%20%20%20%20%20%20%20%20%20%20near-jsonrpc-client%20%3D%20%22%3D0.4.0-beta.0%22%0A%20%20%20%20%20%20%20%20%20%20%20%20near-crypto%20%3D%20%220.14.0%22%0A%20%20%20%20%20%20%20%20%20%20%20%20near-primitives%20%3D%20%220.14.0%22%0A%20%20%20%20%20%20%20%20%20%20%20%20near-chain-configs%20%3D%20%220.14.0%22%0A%20%20%20%20%20%20%20%20%20%20%20%20near-jsonrpc-primitives%20%3D%20%220.14.0%22%0A%20%20%20%20%20%20%20%20%20%20%20%20tokio%20%3D%20%7B%20version%20%3D%20%221.1%22%2C%20features%20%3D%20%5B%22rt%22%2C%20%22macros%22%5D%20%7D%0A%20%20%20%20%20%20%20%20%20%20%20%20reqwest%20%3D%20%7B%20version%20%3D%20%220.11%22%2C%20features%20%3D%20%5B%22blocking%22%5D%20%7D%0A%20%20%20%20%20%20%20%20%20%20%20%20serde_json%20%3D%20%221.0.74%22%0A%20%20%20%20%20%20%20%20%20%20%20%20serde%20%3D%20%7B%20version%20%3D%20%221.0%22%2C%20features%20%3D%20%5B%22derive%22%5D%20%7D%0A%20%20%20%20%20%20%20%20%20%20%20%20eth-types%20%3D%20%7B%20path%20%3D%20%22..%2F..%2Fcontracts%2Fnear%2Feth-types%2F%22%2C%20features%20%3D%20%5B%22eip1559%22%5D%7D%0A%20%20%20%20%20%20%20%20%20%20%20%20workspaces%20%3D%20%220.5.0%22%0A%20%20%20%20%20%20%20%20%20%20%20%20anyhow%20%3D%20%221.0%22%0A%20%20%20%20%20%20%20%20%20%20%20%20%60%60%60%0A%0A%20%20-%20%5Beth2near-block-relay-rs%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Ftree%2Fmaster%2Feth2near%2Feth2near-block-relay-rs)%20is%20built%20in%20rust%20and%20integrates%20with%20the%20Ethereum%202.0%20lgihthouse%20consensus%20client%20to%20propogate%20blocks%20to%20near.%0A%20%20%20%20-%20Functionality%20includes%20(from%20%5Blib.rs%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Fblob%2Fmaster%2Feth2near%2Feth2near-block-relay-rs%2Fsrc%2Flib.rs))%0A%0A%20%20%20%20%20%20%20%20%20%20%20%20%60%60%60%0A%20%20%20%20%20%20%20%20%20%20%20%20pub%20mod%20beacon_block_body_merkle_tree%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20pub%20mod%20beacon_rpc_client%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20pub%20mod%20config%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20pub%20mod%20eth1_rpc_client%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20pub%20mod%20eth2near_relay%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20pub%20mod%20execution_block_proof%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20pub%20mod%20hand_made_finality_light_client_update%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20pub%20mod%20init_contract%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20pub%20mod%20last_slot_searcher%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20pub%20mod%20light_client_snapshot_with_proof%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20pub%20mod%20logger%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20pub%20mod%20near_rpc_client%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20pub%20mod%20prometheus_metrics%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20pub%20mod%20relay_errors%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20%60%60%60%0A%0A%20%20%20%20-%20Dependencies%20include%20(from%20%5Beth2near-block-relay-rs%2FCargo.toml%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Fblob%2Fmaster%2Feth2near%2Feth2near-block-relay-rs%2FCargo.toml))%0A%0A%20%20%20%20%20%20%20%20%20%20%20%20%60%60%60%0A%20%20%20%20%20%20%20%20%20%20%20%20types%20%3D%20%20%7B%20git%20%3D%20%22https%3A%2F%2Fgithub.com%2Faurora-is-near%2Flighthouse.git%22%2C%20rev%20%3D%20%22b624c3f0d3c5bc9ea46faa14c9cb2d90ee1e1dec%22%20%7D%0A%20%20%20%20%20%20%20%20%20%20%20%20tree_hash%20%3D%20%7B%20git%20%3D%20%22https%3A%2F%2Fgithub.com%2Faurora-is-near%2Flighthouse.git%22%2C%20%20rev%20%3D%20%22b624c3f0d3c5bc9ea46faa14c9cb2d90ee1e1dec%22%20%7D%0A%20%20%20%20%20%20%20%20%20%20%20%20merkle_proof%20%3D%20%7B%20git%20%3D%20%22https%3A%2F%2Fgithub.com%2Faurora-is-near%2Flighthouse.git%22%2C%20rev%20%3D%20%22b624c3f0d3c5bc9ea46faa14c9cb2d90ee1e1dec%22%20%7D%0A%20%20%20%20%20%20%20%20%20%20%20%20eth2_hashing%20%3D%20%7B%20git%20%3D%20%22https%3A%2F%2Fgithub.com%2Faurora-is-near%2Flighthouse.git%22%2C%20rev%20%3D%20%22b624c3f0d3c5bc9ea46faa14c9cb2d90ee1e1dec%22%20%7D%0A%20%20%20%20%20%20%20%20%20%20%20%20eth2_ssz%20%3D%20%7B%20git%20%3D%20%22https%3A%2F%2Fgithub.com%2Faurora-is-near%2Flighthouse.git%22%2C%20rev%20%3D%20%22b624c3f0d3c5bc9ea46faa14c9cb2d90ee1e1dec%22%20%7D%0A%0A%20%20%20%20%20%20%20%20%20%20%20%20eth-types%20%3D%20%7B%20path%20%3D%20%22..%2F..%2Fcontracts%2Fnear%2Feth-types%2F%22%2C%20features%20%3D%20%5B%22eip1559%22%5D%7D%0A%20%20%20%20%20%20%20%20%20%20%20%20eth2-utility%20%20%3D%20%7B%20path%20%3D%20%22..%2F..%2Fcontracts%2Fnear%2Feth2-utility%22%20%7D%0A%0A%20%20%20%20%20%20%20%20%20%20%20%20contract_wrapper%20%3D%20%7B%20path%20%3D%20%22..%2Fcontract_wrapper%22%20%7D%0A%20%20%20%20%20%20%20%20%20%20%20%20finality-update-verify%20%3D%20%7B%20path%20%3D%20%22..%2Ffinality-update-verify%22%20%7D%0A%0A%20%20%20%20%20%20%20%20%20%20%20%20log%20%3D%20%7B%20version%20%3D%20%220.4%22%2C%20features%20%3D%20%5B%22std%22%2C%20%22serde%22%5D%20%7D%0A%20%20%20%20%20%20%20%20%20%20%20%20serde_json%20%3D%20%221.0.74%22%0A%20%20%20%20%20%20%20%20%20%20%20%20serde%20%3D%20%7B%20version%20%3D%20%221.0%22%2C%20features%20%3D%20%5B%22derive%22%5D%20%7D%0A%20%20%20%20%20%20%20%20%20%20%20%20ethereum-types%20%3D%20%220.9.2%22%0A%20%20%20%20%20%20%20%20%20%20%20%20reqwest%20%3D%20%7B%20version%20%3D%20%220.11%22%2C%20features%20%3D%20%5B%22blocking%22%5D%20%7D%0A%20%20%20%20%20%20%20%20%20%20%20%20clap%20%3D%20%7B%20version%20%3D%20%223.1.6%22%2C%20features%20%3D%20%5B%22derive%22%5D%20%7D%0A%20%20%20%20%20%20%20%20%20%20%20%20tokio%20%3D%20%7B%20version%20%3D%20%221.1%22%2C%20features%20%3D%20%5B%22macros%22%2C%20%22rt%22%2C%20%22time%22%5D%20%7D%0A%20%20%20%20%20%20%20%20%20%20%20%20env_logger%20%3D%20%220.9.0%22%0A%20%20%20%20%20%20%20%20%20%20%20%20borsh%20%3D%20%220.9.3%22%0A%20%20%20%20%20%20%20%20%20%20%20%20near-sdk%20%3D%20%224.0.0%22%0A%20%20%20%20%20%20%20%20%20%20%20%20futures%20%3D%20%7B%20version%20%3D%20%220.3.21%22%2C%20default-features%20%3D%20false%20%7D%0A%20%20%20%20%20%20%20%20%20%20%20%20async-std%20%3D%20%221.12.0%22%0A%20%20%20%20%20%20%20%20%20%20%20%20hex%20%3D%20%22*%22%0A%20%20%20%20%20%20%20%20%20%20%20%20toml%20%3D%20%220.5.9%22%0A%20%20%20%20%20%20%20%20%20%20%20%20atomic_refcell%20%3D%20%220.1.8%22%0A%20%20%20%20%20%20%20%20%20%20%20%20bitvec%20%3D%20%22*%22%0A%20%20%20%20%20%20%20%20%20%20%20%20primitive-types%20%3D%20%220.7.3%22%0A%0A%20%20%20%20%20%20%20%20%20%20%20%20near-jsonrpc-client%20%3D%20%22%3D0.4.0-beta.0%22%0A%20%20%20%20%20%20%20%20%20%20%20%20near-crypto%20%3D%20%220.14.0%22%0A%20%20%20%20%20%20%20%20%20%20%20%20near-primitives%20%3D%20%220.14.0%22%0A%20%20%20%20%20%20%20%20%20%20%20%20near-chain-configs%20%3D%20%220.14.0%22%0A%20%20%20%20%20%20%20%20%20%20%20%20near-jsonrpc-primitives%20%3D%20%220.14.0%22%0A%0A%20%20%20%20%20%20%20%20%20%20%20%20prometheus%20%3D%20%7B%20version%20%3D%20%220.9%22%2C%20features%20%3D%20%5B%22process%22%5D%20%7D%0A%20%20%20%20%20%20%20%20%20%20%20%20lazy_static%20%3D%20%221.4%22%0A%20%20%20%20%20%20%20%20%20%20%20%20warp%20%3D%20%220.2%22%0A%20%20%20%20%20%20%20%20%20%20%20%20thread%20%3D%20%22*%22%0A%0A%20%20%20%20%20%20%20%20%20%20%20%20%60%60%60%0A%0A%20%20-%20%5Beth2near-block-relay%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Ftree%2Fmaster%2Feth2near%2Feth2near-block-relay)%20is%20built%20using%20javascript%20and%20supports%20ETH%201.0%20Proof%20of%20Work%20(%60ethhash%60)%20using%20merkle%20patrica%20trees.%0A%20%20%20%20-%20key%20classes%20from%20%5Bindex.js%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Fblob%2Fmaster%2Feth2near%2Feth2near-block-relay%2Findex.js)%20include%0A%20%20%20%20%20%20-%20%60Ethashproof%60%20%3A%20which%20has%20functions%20to%20%60getParseBlock%60%20and%20%60calculateNextEpoch%60%0A%20%20%20%20%20%20-%20%60Eth2NearRelay%60%20%3A%20which%20interacts%20with%20the%20%60ethClientContract%60%20and%20has%20a%20%60run()%60%20function%20which%20loops%20through%20relaying%20blocks%20and%20includes%20additional%20functions%20such%20as%20%60getParseBlock%60%20%2C%20%60submitBlock%60%0A%20%20%20%20-%20Dependencies%20include%20(from%20%5Bpackage.json%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Fblob%2Fmaster%2Feth2near%2Feth2near-block-relay%2Fpackage.json))%0A%0A%20%20%20%20%20%20%20%20%20%20%20%20%60%60%60%0A%20%20%20%20%20%20%20%20%20%20%20%20%22dependencies%22%3A%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%22bn.js%22%3A%20%22%5E5.1.3%22%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%22eth-object%22%3A%20%22https%3A%2F%2Fgithub.com%2Fnear%2Feth-object%23383b6ea68c7050bea4cab6950c1d5a7fa553e72b%22%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%22eth-util-lite%22%3A%20%22near%2Feth-util-lite%23master%22%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%22%40ethereumjs%2Fblock%22%3A%20%22%5E3.4.0%22%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%22merkle-patricia-tree%22%3A%20%22%5E2.1.2%22%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%22prom-client%22%3A%20%22%5E12.0.0%22%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%22promisfy%22%3A%20%22%5E1.2.0%22%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%22rainbow-bridge-utils%22%3A%20%221.0.0%22%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%22got%22%3A%20%22%5E11.8.5%22%0A%20%20%20%20%20%20%20%20%20%20%20%20%7D%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20%60%60%60%0A%0A%20%20-%20%5Bethhashproof%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Ftree%2Fmaster%2Feth2near%2Fethashproof)%3A%20is%20a%20commandline%20to%20calculate%20proof%20data%20for%20an%20ethash%20POW%2C%20it%20is%20used%20by%20project%20%60SmartPool%60%20and%20a%20decentralizedbridge%20between%20Etherum%20and%20EOS%20developed%20by%20Kyber%20Network%20team.%20It%20is%20written%20in%20%60GO%60.%0A%20%20%20%20-%20Features%20Include%201.%20Calculate%20merkle%20root%20of%20the%20ethash%20dag%20dataset%20with%20given%20epoch%202.%20Calculate%20merkle%20proof%20of%20the%20pow%20(dataset%20elements%20and%20their%20merkle%20proofs)%20given%20the%20pow%20submission%20with%20given%20block%20header%203.%20Generate%20dag%20datase%0A%20%20%20%20-%20Dependencies%20include%20(from%20%5Bethahsproof%2Fgo.mod%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Fblob%2Fmaster%2Feth2near%2Fethashproof%2Fgo.mod))%0A%0A%20%20%20%20%20%20%20%20%20%20%20%20%60%60%60%0A%20%20%20%20%20%20%20%20%20%20%20%20require%20(%0A%20%20%20%20%20%20%20%20%20%20%20%20%20github.com%2Fdeckarep%2Fgolang-set%20v1.7.1%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20github.com%2Fedsrzf%2Fmmap-go%20v1.0.0%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20github.com%2Fethereum%2Fgo-ethereum%20v1.10.4%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20github.com%2Fhashicorp%2Fgolang-lru%20v0.5.5-0.20210104140557-80c98217689d%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20golang.org%2Fx%2Fcrypto%20v0.0.0-20210322153248-0c34fe9e7dc2%0A%20%20%20%20%20%20%20%20%20%20%20%20)%0A%20%20%20%20%20%20%20%20%20%20%20%20%60%60%60%0A%0A%20%20-%20%5Bfinality-update-verify%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Ftree%2Fmaster%2Feth2near%2Ffinality-update-verify)%20checks%20and%20updates%20finality%20using%20the%20lighthouse%20beacon%20blocks.%0A%20%20%20%20-%20Functions%20include%20(from%20%5Blib.rs%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Fblob%2Fmaster%2Feth2near%2Ffinality-update-verify%2Fsrc%2Flib.rs))%0A%20%20%20%20%20%20-%20%60fn%20h256_to_hash256(hash%3A%20H256)%20-%3E%20Hash256%60%0A%20%20%20%20%20%20-%20%60fn%20tree_hash_h256_to_eth_type_h256(hash%3A%20tree_hash%3A%3AHash256)%20-%3E%20eth_types%3A%3AH256%60%0A%20%20%20%20%20%20-%20%60fn%20to_lighthouse_beacon_block_header(bridge_beacon_block_header%3A%20%26BeaconBlockHeader%2C)%20-%3E%20types%3A%3ABeaconBlockHeader%20%7Btypes%3A%3ABeaconBlockHeader%60%0A%20%20%20%20%20%20-%20%60pub%20fn%20is_correct_finality_update(ethereum_network%3A%20%26str%2C%20light_client_update%3A%20%26LightClientUpdate%2C%20sync_committee%3A%20SyncCommittee%2C%20)%20-%3E%20Result%3Cbool%2C%20Box%3Cdyn%20Error%3E%3E%60%0A%20%20%20%20-%20Dependencies%20include%20(from%20%5Bfinality-update-verify%2FCargo.toml%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Fblob%2Fmaster%2Feth2near%2Ffinality-update-verify%2FCargo.toml))%0A%0A%20%20%20%20%20%20%20%20%20%20%20%20%60%60%60%0A%20%20%20%20%20%20%20%20%20%20%20%20%5Bdependencies%5D%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20eth-types%20%3D%20%7B%20path%20%3D%22..%2F..%2Fcontracts%2Fnear%2Feth-types%2F%22%2C%20features%20%3D%20%5B%22eip1559%22%5D%7D%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20bls%20%3D%20%7B%20git%20%3D%20%22https%3A%2F%2Fgithub.com%2Faurora-is-near%2Flighthouse.git%22%2C%20rev%20%3D%20%22b624c3f0d3c5bc9ea46faa14c9cb2d90ee1e1dec%22%20%7D%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20eth2-utility%20%20%3D%20%7B%20path%20%3D%22..%2F..%2Fcontracts%2Fnear%2Feth2-utility%22%7D%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20tree_hash%20%3D%20%7B%20git%20%3D%20%22https%3A%2F%2Fgithub.com%2Faurora-is-near%2Flighthouse.git%22%2C%20rev%20%3D%20%22b624c3f0d3c5bc9ea46faa14c9cb2d90ee1e1dec%22%20%7D%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20types%20%3D%20%20%7B%20git%20%3D%20%22https%3A%2F%2Fgithub.com%2Faurora-is-near%2Flighthouse.git%22%2C%20rev%20%3D%20%22b624c3f0d3c5bc9ea46faa14c9cb2d90ee1e1dec%22%20%7D%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20bitvec%20%3D%20%221.0.0%22%0A%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%5Bdev-dependencies%5D%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20eth2_to_near_relay%20%3D%20%7B%20path%20%3D%20%22..%2Feth2near-block-relay-rs%22%7D%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20serde_json%20%3D%20%221.0.74%22%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20serde%20%3D%20%7B%20version%20%3D%20%221.0%22%2C%20features%20%3D%20%5B%22derive%22%5D%20%7D%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20toml%20%3D%20%220.5.9%22%0A%20%20%20%20%20%20%20%20%20%20%20%20%60%60%60%0A%0AThe%20following%20smart%20contracts%20are%20deployed%20on%20Ethereum%20and%20used%20for%20propogating%20blocks%20from%20NEAR%20to%20Ethereum.%0A%0A-%20%5BSmart%20Contracts%20deployed%20on%20Ethereum%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Ftree%2Fmaster%2Fcontracts%2Feth)%20including%0A%20%20-%20%5BNear%20Bridge%20Contracts%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Ftree%2Fmaster%2Fcontracts%2Feth%2Fnearbridge%2Fcontracts)%20including%20%5BNearBridge.sol%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Fblob%2Fmaster%2Fcontracts%2Feth%2Fnearbridge%2Fcontracts%2FNearBridge.sol)%20which%20the%20interface%20%5BINearBridge.sol%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Fblob%2Fmaster%2Fcontracts%2Feth%2Fnearbridge%2Fcontracts%2FINearBridge.sol)%0A%20%20-%20Interface%20Overview%0A%0A%20%20%20%20%20%20%20%20%60%60%60%0A%20%20%20%20%20%20%20%20interface%20INearBridge%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20event%20BlockHashAdded(uint64%20indexed%20height%2C%20bytes32%20blockHash)%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20event%20BlockHashReverted(uint64%20indexed%20height%2C%20bytes32%20blockHash)%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20function%20blockHashes(uint64%20blockNumber)%20external%20view%20returns%20(bytes32)%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20function%20blockMerkleRoots(uint64%20blockNumber)%20external%20view%20returns%20(bytes32)%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20function%20balanceOf(address%20wallet)%20external%20view%20returns%20(uint256)%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20function%20deposit()%20external%20payable%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20function%20withdraw()%20external%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20function%20initWithValidators(bytes%20calldata%20initialValidators)%20external%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20function%20initWithBlock(bytes%20calldata%20data)%20external%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20function%20addLightClientBlock(bytes%20calldata%20data)%20external%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20function%20challenge(address%20payable%20receiver%2C%20uint256%20signatureIndex)%20external%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20function%20checkBlockProducerSignatureInHead(uint256%20signatureIndex)%20external%20view%20returns%20(bool)%3B%0A%20%20%20%20%20%20%20%20%7D%0A%20%20%20%20%20%20%20%20%60%60%60%0A%0A%20%20-%20Key%20Storage%20items%20for%20epoch%20and%20block%20information%0A%0A%20%20%20%20%20%20%20%20%60%60%60%0A%20%20%20%20%20%20%20%20%20%20%20%20Epoch%5B3%5D%20epochs%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20uint256%20curEpoch%3B%0A%0A%20%20%20%20%20%20%20%20%20%20%20%20mapping(uint64%20%3D%3E%20bytes32)%20blockHashes_%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20mapping(uint64%20%3D%3E%20bytes32)%20blockMerkleRoots_%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20mapping(address%20%3D%3E%20uint256)%20public%20override%20balanceOf%3B%0A%20%20%20%20%20%20%20%20%60%60%60%0A%0A%20%20-%20Signing%20and%20Serializing%20Primitives%0A%20%20%20%20-%20%5BNearDecoder.sol%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Fblob%2Fmaster%2Fcontracts%2Feth%2Fnearbridge%2Fcontracts%2FNearDecoder.sol)%3A%20handles%20decoing%20of%20Public%20Keys%2C%20Signatures%2C%20BlockProducers%20and%20LightClientBlocks%20using%20%60Borsh.sol%60%0A%20%20%20%20-%20%5BUtils.sol%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Fblob%2Fmaster%2Fcontracts%2Feth%2Fnearbridge%2Fcontracts%2FUtils.sol)%3A%20handles%20reading%20and%20writing%20to%20memory%2C%20memoryToBytes%20and%20has%20functions%20such%20as%20%60keccak256Raw%60%20and%20%60sha256Raw%60%0A%20%20%20%20-%20%5BBorsh.sol%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Fblob%2Fmaster%2Fcontracts%2Feth%2Fnearbridge%2Fcontracts%2FBorsh.sol)%3A%20%5BBorsh%5D(https%3A%2F%2Fborsh.io%2F)%3A%20Binary%20Object%20Representation%20Serializer%20for%20Hashing.%20It%20is%20meant%20to%20be%20used%20in%20security-critical%20projects%20as%20it%20prioritizes%20consistency%2C%20safety%2C%20speed%3B%20and%20comes%20with%20a%20strict%20specification.%0A%20%20%20%20-%20%5BEd25519.sol%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Fblob%2Fmaster%2Fcontracts%2Feth%2Fnearbridge%2Fcontracts%2FEd25519.sol)%3A%20%5BEd25519%5D(https%3A%2F%2Fed25519.cr.yp.to%2F)%20high-speed%20high-security%20signatures%0A%0A%20%20-%20%5BNear%20Prover%20Contracts%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Ftree%2Fmaster%2Fcontracts%2Feth%2Fnearprover%2Fcontracts)%0A%20%20%20%20-%20%5BNearProver.sol%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Fblob%2Fmaster%2Fcontracts%2Feth%2Fnearprover%2Fcontracts%2FNearProver.sol)%3A%20Has%20a%20%60proveOutcome%60%20which%20validates%20the%20outcome%20merkle%20proof%20and%20the%20block%20proof%20is%20valid%20using%20%60_computeRoot%60%20which%20is%20passed%20in%20a%20%60bytes32%20node%2C%20ProofDecoder.MerklePath%20memory%20proof%60%0A%20%20%20%20-%20%5BProofDecoder.sol%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Fblob%2Fmaster%2Fcontracts%2Feth%2Fnearprover%2Fcontracts%2FProofDecoder.sol)%3A%20Uses%20MerklePaths%20to%20provide%20decoding%20functions%20such%20as%20%60decodeExecutionStatus%60%2C%20%60decodeExecutionOutcome%60%2C%20%60decodeExecutionOutcomeWithId%60%2C%20%60decodeMerklePathItem%60%2C%20%60decodeMerklePath%60%20and%20%60decodeExecutionOutcomeWithIdAndProof%60.%20It%20relies%20on%20the%20primitives%20%60Borsh.sol%60%20and%20%60NearDecoder.sol%60%20above.%0A",lastUpdatedAt:1753129136e3},{lazy:()=>o2(()=>import("./ethereum-near-iiX1rCdG.js"),[]),path:"/research/code/ethereum-near.html",type:"mdx",filePath:"research/code/ethereum-near.mdx",content:"%23%20Ethereum%20Near%20Bridging%0A%0A-%20date%3A%202023-02-04%0A-%20last%20updated%3A%202023-02-04%0A%0A%23%23%20Overview%0A%0AThis%20document%20reviews%20the%20Ethereum%202.0%20specifications%20including%20Light%20Client%20specifications.%20It%20does%20a%20detailed%20review%20of%20the%20NEAR%20Rainbow%20Bridge%20implementation%20and%20also%20includes%20references%20to%20Harmony's%20design%20to%20support%20Mountain%20Merkle%20Ranges.%0A%0AKey%20differences%20in%20supporting%20Ethereum%202.0%20(Proof%20of%20Stake)%20vs%20Proof%20of%20Work%20involves%20removing%20the%20ETHHASH%20logic%20and%20SPV%20client%20and%20potentially%20replacing%20with%20MMR%20trees%20per%20epoch%20and%20checkpoints%20similar%20to%20Harmony%20Light%20Client%20on%20Ethereum.%0A%0A%23%23%20Ethereum%202.0%20Specifications%0A%0A-%20%5BBeacon%20Chain%20Specification%5D(https%3A%2F%2Fgithub.com%2Fethereum%2Fconsensus-specs%2Fblob%2Fmaster%2Fspecs%2Fphase0%2Fbeacon-chain.mdx)%0A-%20%5BExtended%20light%20client%20protocol%5D(https%3A%2F%2Fnotes.ethereum.org%2F%40vbuterin%2Fextended_light_client_protocol)%0A-%20%5BAltair%20Light%20Client%20--%20Light%20Client%5D(https%3A%2F%2Fgithub.com%2Fethereum%2Fconsensus-specs%2Fblob%2Fdev%2Fspecs%2Faltair%2Flight-client%2Flight-client.mdx)%0A-%20%5BAltair%20Light%20Client%20--%20Sync%20Protocol%5D(https%3A%2F%2Fgithub.com%2Fethereum%2Fconsensus-specs%2Fblob%2Fdev%2Fspecs%2Faltair%2Flight-client%2Fsync-protocol.mdx)%0A-%20%5BBeacon%20Chain%20Fork%20Choice%5D(https%3A%2F%2Fgithub.com%2Fethereum%2Fconsensus-specs%2Fblob%2Fdev%2Fspecs%2Fphase0%2Ffork-choice.mdx)%0A%0A%23%23%20Ethereum%202.0%20Light%20Client%20Support%0A%0AHow%20light%20client%20implementation%20and%20verification%20of%20ETH%20and%20ETH2%20can%20be%20done%20via%20smart%20contracts%20in%20other%20protocols.%0A%0AFor%20this%20we%20review%20three%20Key%20items%0A%0A1.%20Light%20Client%20Specifications%20including%20%5BExtended%20light%20client%20protocol%5D(https%3A%2F%2Fnotes.ethereum.org%2F%40vbuterin%2Fextended_light_client_protocol)%20described%20by%20%5BAltair%20Light%20Client%20--%20Sync%20Protocol%5D(https%3A%2F%2Fgithub.com%2Fethereum%2Fconsensus-specs%2Fblob%2Fdev%2Fspecs%2Faltair%2Flight-client%2Fsync-protocol.mdx)%20and%20the%20%5BThe%20Portal%20Network%20Specification%5D(https%3A%2F%2Fgithub.com%2Fethereum%2Fportal-network-specs)%0A2.%20Near%20Rainbow%20Bridge%20Light%20Client%20Walkthrough%20include%20%5Beth2near-block-relay-rs%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Ftree%2Fmaster%2Feth2near%2Feth2near-block-relay-rs)%2C%20%5Bnearbridge%20contracts%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Ftree%2Fmaster%2Fcontracts%2Feth%2Fnearbridge)%20and%20%5Bnearprover%20contracts%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Ftree%2Fmaster%2Fcontracts%2Feth%2Fnearprover)%0A3.%20Prysm%20light-client%20%5Bprototype%5D(https%3A%2F%2Fgithub.com%2Fjinfwhuang%2Fprysm%2Ftree%2Fjin-light%2Fcmd%2Flight-client)%0A%0A_Note%3A%20Time%20on%20Ethereum%202.0%20Proof%20of%20Stake%20is%20divided%20into%20slots%20and%20epochs.%20One%20slot%20is%2012%20seconds.%20One%20epoch%20is%206.4%20minutes%2C%20consisting%20of%2032%20slots.%20One%20block%20can%20be%20created%20for%20each%20slot._%0A%0A%23%23%23%20Light%20Client%20Specification%0A%0A%23%23%23%23%20Altair%20Light%20Client%20--%20Sync%20Protocol%0A%0A-%20%5BAltair%20Light%20Client%20--%20Sync%20Protocol%5D(https%3A%2F%2Fgithub.com%2Fethereum%2Fconsensus-specs%2Fblob%2Fdev%2Fspecs%2Faltair%2Flight-client%2Fsync-protocol.mdx)%3A%20The%20beacon%20chain%20is%20designed%20to%20be%20light%20client%20friendly%20for%20constrained%20environments%20to%20access%20Ethereum%20with%20reasonable%20safety%20and%20liveness.%0A%0A%20%20Such%20environments%20include%20resource-constrained%20devices%20(e.g.%20phones%20for%20trust-minimized%20wallets)and%20metered%20VMs%20(e.g.%20blockchain%20VMs%20for%20cross-chain%20bridges).%0A%0A%20%20This%20document%20suggests%20a%20minimal%20light%20client%20design%20for%20the%20beacon%20chain%20thatuses%20sync%20committees%20introduced%20in%20%5Bthis%20beacon%20chain%20extension%5D(https%3A%2F%2Fgithub.com%2Fethereum%2Fconsensus-specs%2Fblob%2Fdev%2Fspecs%2Faltair%2Fbeacon-chain.mdx).%0A%0A%20%20Additional%20documents%20describe%20how%20the%20light%20client%20sync%20protocol%20can%20be%20used%3A%0A%20%20-%20%5BFull%20node%5D(https%3A%2F%2Fgithub.com%2Fethereum%2Fconsensus-specs%2Fblob%2Fdev%2Fspecs%2Faltair%2Flight-client%2Ffull-node.mdx)%0A%20%20-%20%5BLight%20client%5D(https%3A%2F%2Fgithub.com%2Fethereum%2Fconsensus-specs%2Fblob%2Fdev%2Fspecs%2Faltair%2Flight-client%2Flight-client.mdx)%0A%20%20-%20%5BNetworking%5D(https%3A%2F%2Fgithub.com%2Fethereum%2Fconsensus-specs%2Fblob%2Fdev%2Fspecs%2Faltair%2Flight-client%2Fp2p-interface.mdx)%0A%0A-%20%5BLight%20client%20sync%20process%5D(https%3A%2F%2Fgithub.com%2Fethereum%2Fconsensus-specs%2Fblob%2Fdev%2Fspecs%2Faltair%2Flight-client%2Flight-client.mdx)%3A%20explains%20how%20light%20clients%20MAY%20obtain%20light%20client%20data%20to%20sync%20with%20the%20network.%0A%20%201.%20The%20light%20client%20MUST%20be%20configured%20out-of-band%20with%20a%20spec%2Fpreset%20(including%20fork%20schedule)%2C%20with%20%60genesis_state%60%20(including%20%60genesis_time%60%20and%20%60genesis_validators_root%60)%2C%20and%20with%20a%20trusted%20block%20root.%20The%20trusted%20block%20SHOULD%20be%20within%20the%20weak%20subjectivity%20period%2C%20and%20its%20root%20SHOULD%20be%20from%20a%20finalized%20%60Checkpoint%60.%0A%20%202.%20The%20local%20clock%20is%20initialized%20based%20on%20the%20configured%20%60genesis_time%60%2C%20and%20the%20current%20fork%20digest%20is%20determined%20to%20browse%20for%20and%20connect%20to%20relevant%20light%20client%20data%20providers.%0A%20%203.%20The%20light%20client%20fetches%20a%20%5B%60LightClientBootstrap%60%5D(https%3A%2F%2Fgithub.com%2Fethereum%2Fconsensus-specs%2Fblob%2Fdev%2Fspecs%2Faltair%2Flight-client%2Flight-client.mdx)%20object%20for%20the%20configured%20trusted%20block%20root.%20The%20%60bootstrap%60%20object%20is%20passed%20to%20%5B%60initialize_light_client_store%60%5D(https%3A%2F%2Fgithub.com%2Fethereum%2Fconsensus-specs%2Fblob%2Fdev%2Fspecs%2Faltair%2Flight-client%2Fsync-protocol.md%23initialize_light_client_store)%20to%20obtain%20a%20local%20%5B%60LightClientStore%60%5D(https%3A%2F%2Fgithub.com%2Fethereum%2Fconsensus-specs%2Fblob%2Fdev%2Fspecs%2Faltair%2Flight-client%2Fsync-protocol.md%23lightclientstore).%0A%20%204.%20The%20light%20client%20tracks%20the%20sync%20committee%20periods%20%60finalized_period%60%20from%20%60store.finalized_header.slot%60%2C%20%60optimistic_period%60%20from%20%60store.optimistic_header.slot%60%2C%20and%20%60current_period%60%20from%20%60current_slot%60%20based%20on%20the%20local%20clock.%0A%20%20%20%20%201.%20When%20%60finalized_period%20%3D%3D%20optimistic_period%60%20and%20%5B%60is_next_sync_committee_known%60%5D(https%3A%2F%2Fgithub.com%2Fethereum%2Fconsensus-specs%2Fblob%2Fdev%2Fspecs%2Faltair%2Flight-client%2Fsync-protocol.md%23is_next_sync_committee_known)%20indicates%20%60False%60%2C%20the%20light%20client%20fetches%20a%20%5B%60LightClientUpdate%60%5D(https%3A%2F%2Fgithub.com%2Fethereum%2Fconsensus-specs%2Fblob%2Fdev%2Fspecs%2Faltair%2Flight-client%2Fsync-protocol.md%23lightclientupdate)%20for%20%60finalized_period%60.%20If%20%60finalized_period%20%3D%3D%20current_period%60%2C%20this%20fetch%20SHOULD%20be%20scheduled%20at%20a%20random%20time%20before%20%60current_period%60%20advances.%0A%20%20%20%20%202.%20When%20%60finalized_period%20%2B%201%20%3C%20current_period%60%2C%20the%20light%20client%20fetches%20a%20%60LightClientUpdate%60%20for%20each%20sync%20committee%20period%20in%20range%20%60%5Bfinalized_period%20%2B%201%2C%20current_period)%60%20(current%20period%20excluded)%0A%20%20%20%20%203.%20When%20%60finalized_period%20%2B%201%20%3E%3D%20current_period%60%2C%20the%20light%20client%20keeps%20observing%20%5B%60LightClientFinalityUpdate%60%5D(https%3A%2F%2Fgithub.com%2Fethereum%2Fconsensus-specs%2Fblob%2Fdev%2Fspecs%2Faltair%2Flight-client%2Fsync-protocol.md%23lightclientfinalityupdate)%20and%20%5B%60LightClientOptimisticUpdate%60%5D(https%3A%2F%2Fgithub.com%2Fethereum%2Fconsensus-specs%2Fblob%2Fdev%2Fspecs%2Faltair%2Flight-client%2Fsync-protocol.md%23lightclientoptimisticupdate).%20Received%20objects%20are%20passed%20to%20%5B%60process_light_client_finality_update%60%5D(https%3A%2F%2Fgithub.com%2Fethereum%2Fconsensus-specs%2Fblob%2Fdev%2Fspecs%2Faltair%2Flight-client%2Fsync-protocol.md%23process_light_client_finality_update)%20and%20%5B%60process_light_client_optimistic_update%60%5D(https%3A%2F%2Fgithub.com%2Fethereum%2Fconsensus-specs%2Fblob%2Fdev%2Fspecs%2Faltair%2Flight-client%2Fsync-protocol.md%23process_light_client_optimistic_update).%20This%20ensures%20that%20%60finalized_header%60%20and%20%60optimistic_header%60%20reflect%20the%20latest%20blocks.%0A%20%205.%20%5B%60process_light_client_store_force_update%60%5D(https%3A%2F%2Fgithub.com%2Fethereum%2Fconsensus-specs%2Fblob%2Fdev%2Fspecs%2Faltair%2Flight-client%2Fsync-protocol.md%23process_light_client_store_force_update)%20MAY%20be%20called%20based%20on%20use%20case%20dependent%20heuristics%20if%20light%20client%20sync%20appears%20stuck.%20If%20available%2C%20falling%20back%20to%20an%20alternative%20syncing%20mechanism%20to%20cover%20the%20affected%20sync%20committee%20period%20is%20preferred.%0A%0A%23%23%23%23%20The%20Portal%20Network%0A%0A-%20%5BThe%20Portal%20Network%5D(https%3A%2F%2Fgithub.com%2Fethereum%2Fportal-network-specs)%3A%20The%20Portal%20Network%20is%20an%20in%20progess%20effort%20to%20enable%20lightweight%20protocol%20access%20by%20resource%20constrained%20devices.%20The%20term%20_%22portal%22_%20is%20used%20to%20indicate%20that%20these%20networks%20provide%20a%20_view_%20into%20the%20protocol%20but%20are%20not%20critical%20to%20the%20operation%20of%20the%20core%20Ethereum%20protocol.%0A%0A%20%20The%20Portal%20Network%20is%20comprised%20of%20multiple%20peer-to-peer%20networks%20which%20together%20provide%20the%20data%20and%20functionality%20necessary%20to%20expose%20the%20standard%20%5BJSON-RPC%20API%5D(https%3A%2F%2Feth.wiki%2Fjson-rpc%2FAPI).%20These%20networks%20are%20specially%20designed%20to%20ensure%20that%20clients%20participating%20in%20these%20networks%20can%20do%20so%20with%20minimal%20expenditure%20of%20networking%20bandwidth%2C%20CPU%2C%20RAM%2C%20and%20HDD%20resources.%0A%0A%20%20The%20term%20'Portal%20Client'%20describes%20a%20piece%20of%20software%20which%20participates%20in%20these%20networks.%20Portal%20Clients%20typically%20expose%20the%20standard%20JSON-RPC%20API.%0A%20%20-%20Motivation%3A%20The%20Portal%20Network%20is%20focused%20on%20delivering%20reliable%2C%20lightweight%2C%20and%20decentralized%20access%20to%20the%20Ethereum%20protocol.%0A%0A%20%20-%20Prior%20Work%20on%20the%20%22Light%20Ethereum%20Subprotocol%22%20(LES)%3A%20The%20term%20%22light%20client%22%20has%20historically%20refered%20to%20a%20client%20of%20the%20existing%20%5BDevP2P%5D(https%3A%2F%2Fgithub.com%2Fethereum%2Fdevp2p%2Fblob%2Fmaster%2Frlpx.mdx)%20based%20%5BLES%5D(https%3A%2F%2Fgithub.com%2Fethereum%2Fdevp2p%2Fblob%2Fmaster%2Fcaps%2Fles.mdx)%20network.%20This%20network%20is%20designed%20using%20a%20client%2Fserver%20architecture.%20The%20LES%20network%20has%20a%20total%20capacity%20dictated%20by%20the%20number%20of%20%22servers%22%20on%20the%20network.%20In%20order%20for%20this%20network%20to%20scale%2C%20the%20%22server%22%20capacity%20has%20to%20increase.%20This%20also%20means%20that%20at%20any%20point%20in%20time%20the%20network%20has%20some%20total%20capacity%20which%20if%20exceeded%20will%20cause%20service%20degradation%20across%20the%20network.%20Because%20of%20this%20the%20LES%20network%20is%20unreliable%20when%20operating%20near%20capacity.%0A%0A-%20Block%20Relay%0A%20%20-%20%5BBeacon%20State%5D(https%3A%2F%2Fgithub.com%2Fethereum%2Fportal-network-specs%2Fblob%2Fmaster%2Fbeacon-chain%2Fbeacon-state-network.md%23dht-overview)%3A%20A%20client%20has%20a%20trusted%20beacon%20state%20root%2C%20and%20it%20wants%20to%20access%20some%20parts%20of%20the%20state.%20Each%20of%20the%20access%20request%20corresponds%20to%20some%20leave%20nodes%20of%20the%20beacon%20state.%20The%20request%20is%20a%20content%20lookup%20on%20a%20DHT.%20The%20response%20is%20a%20Merkle%20proof.%0A%0A%20%20%20%20%20%20%20%20A%20Distributed%20Hash%20Table%20(DHT)%20allows%20network%20participants%20to%20have%20retrieve%20data%20on-demand%20based%20on%20a%20content%0A%0A%20%20-%20%5BSyncing%20Block%20Headers%5D(https%3A%2F%2Fgithub.com%2Fethereum%2Fportal-network-specs%2Fblob%2Fmaster%2Fbeacon-chain%2Fsync-gossip.mdx)%3A%20A%20beacon%20chain%20client%20could%20sync%20committee%20to%20perform%20state%20updates.%20The%20data%20object%20LightClientSkipSyncUpdate%20allows%20a%20client%20to%20quickly%20sync%20to%20a%20recent%20header%20with%20the%20appropriate%20sync%20committee.%20Once%20the%20client%20establishes%20a%20recent%20header%2C%20it%20could%20sync%20to%20other%20headers%20by%20processing%20LightClientUpdates.%20These%20two%20data%20types%20allow%20a%20client%20to%20stay%20up-to-date%20with%20the%20beacon%20chain.%0A%20%20%20%20-%20%5BSync%20State%5D(https%3A%2F%2Fgithub.com%2Fethereum%2Fportal-network-specs%2Fblob%2Fmaster%2Fbeacon-chain%2Fskip-sync-network.mdx)%3A%20A%20client%20uses%20SkipSyncUpdate%20to%20skip%20sync%20from%20a%20known%20header%20to%20a%20recent%20header.%20A%20client%20with%20a%20trusted%20but%20outdated%20header%20cannot%20use%20the%20messages%20in%20the%20gossip%20channel%20bc-light-client-update%20to%20update.%20The%20client's%20sync-committee%20in%20the%20stored%20snapshot%20is%20too%20old%20and%20not%20connected%20to%20any%20update%20messages.%20The%20client%20look%20for%20the%20appropriate%20SkipSyncUpdate%20to%20skip%20sync%20its%20header.%0A%20%20%20%20-%20%5BAdvance%20Block%20Headers%5D(https%3A%2F%2Fgithub.com%2Fethereum%2Fportal-network-specs%2Fblob%2Fmaster%2Fbeacon-chain%2Fsync-gossip.mdx)%3A%20A%20beacon%20chain%20client%20could%20sync%20committee%20to%20perform%20%5Bstate%20updates%5D(https%3A%2F%2Fgithub.com%2Fethereum%2Fconsensus-specs%2Fblob%2Fdev%2Fspecs%2Faltair%2Fsync-protocol.mdx).%20The%20data%20object%20%5BLightClientSkipSyncUpdate%5D(skip-sync-network)%20allows%20a%20client%20to%20quickly%20sync%20to%20a%20recent%20header%20with%20the%20appropriate%20sync%20committee.%20Once%20the%20client%20establishes%20a%20recent%20header%2C%20it%20could%20sync%20to%20other%20headers%20by%20processing%20%5BLightClientUpdates%5D(https%3A%2F%2Fgithub.com%2Fethereum%2Fconsensus-specs%2Fblob%2Fdev%2Fspecs%2Faltair%2Fsync-protocol.md%23lightclientupdate).%20These%20two%20data%20types%20allow%20a%20client%20to%20stay%20up-to-date%20with%20the%20beacon%20chain.%0A%0A%20%20%20%20%20%20%20%20%20%20%20%20These%20two%20data%20types%20are%20placed%20into%20separate%20sub-networks.%20A%20light%20client%20make%20find-content%20requests%20on%20%60skip-sync-network%60%20at%20start%20of%20the%20sync%20to%20get%20a%20header%20with%20the%20same%20%60SyncCommittee%60%20object%20as%20in%20the%20current%20sync%20period.%20The%20client%20uses%20messages%20in%20the%20gossip%20topic%20%60bc-light-client-update%60%20to%20advance%20its%20header.%0A%0A%20%20%20%20%20%20%20%20%20%20%20%20The%20gossip%20topics%20described%20in%20this%20document%20is%20part%20of%20a%20%5Bproposal%5D(https%3A%2F%2Fethresear.ch%2Ft%2Fa-beacon-chain-light-client-proposal%2F11064)%20for%20a%20beacon%20chain%20light%20client.%0A%0A%23%23%23%23%20Transaction%20Proofs%0A%0A-%20%5BRetrieving%20Beacon%20State%5D(https%3A%2F%2Fgithub.com%2Fethereum%2Fportal-network-specs%2Fblob%2Fmaster%2Fbeacon-chain%2Fbeacon-state-network.mdx)%3A%20A%20client%20has%20a%20trusted%20beacon%20state%20root%2C%20and%20it%20wants%20to%20access%20some%20parts%20of%20the%20state.%20Each%20of%20the%20access%20request%20corresponds%20to%20some%20leave%20nodes%20of%20the%20beacon%20state.%20The%20request%20is%20a%20content%20lookup%20on%20a%20DHT.%20The%20response%20is%20a%20Merkle%20proof.%0A%0A%20%20A%20Distributed%20Hash%20Table%20(DHT)%20allows%20network%20participants%20to%20have%20retrieve%20data%20on-demand%20based%20on%20a%20content%20key.%20A%20portal-network%20DHT%20is%20different%20than%20a%20traditional%20one%20in%20that%20each%20participant%20could%20selectively%20limit%20its%20workload%20by%20choosing%20a%20small%20interest%20radius%20r.%20A%20participants%20only%20process%20messages%20that%20are%20within%20its%20chosen%20radius%20boundary.%0A%20%20-%20%5BWire%20Protocol%5D(https%3A%2F%2Fgithub.com%2Fethereum%2Fportal-network-specs%2Fblob%2Fmaster%2Fbeacon-chain%2Fbeacon-state-network.md%23wire-protocol)%3A%20For%20a%20subprotocol%2C%20we%20need%20to%20further%20define%20the%20following%20to%20be%20able%20to%20instantiate%20the%20wire%20format%20of%20each%20message%20type.%201.%20%60content_key%60%202.%20%60content_id%60%203.%20%60payload%60%0A%0A%20%20%20%20%20%20%20%20The%20content%20of%20the%20message%20is%20a%20Merkle%20proof%20contains%20multiple%20leave%20nodes%20for%20a%20%5BBeaconState%5D(https%3A%2F%2Fgithub.com%2Fethereum%2Fconsensus-specs%2Fblob%2Fdev%2Fspecs%2Faltair%2Fbeacon-chain.md%23beaconstate).%0A%0A%20%20%20%20%20%20%20%20Finally%2C%20we%20define%20the%20necessary%20encodings.%20A%20light%20client%20only%20knows%20the%20root%20of%20the%20beacon%20state.%20The%20client%20wants%20to%20know%20the%20details%20of%20some%20leave%20nodes.%20The%20client%20has%20to%20be%20able%20to%20construct%20the%20%60content_key%60%20only%20knowing%20the%20root%20and%20which%20leave%20nodes%20it%20wants%20see.%20The%20%60content_key%60%20is%20the%20ssz%20serialization%20of%20the%20paths.%20The%20paths%20represent%20the%20part%20of%20the%20beacon%20state%20that%20one%20wants%20to%20know%20about.%20The%20paths%20are%20represented%20by%20generalized%20indices.%20Note%20that%20%60hash_tree_root%60%20and%20%60serialize%60%20are%20the%20same%20as%20those%20defined%20in%20%5Bsync-gossip%5D(https%3A%2F%2Fgithub.com%2Fethereum%2Fportal-network-specs%2Fblob%2Fmaster%2Fbeacon-chain%2Fsync-gossip.mdx).%0A%0A-%20TODO%3A%20Review%20of%20Retrieving%20a%20transaction%20proof%20not%20just%20retrieving%20data%20on-demand%0A%0A%23%23%23%23%20References%0A%0A-%20Ethereum%202.0%20Specifications%0A%20%20-%20%5BBeacon%20Chain%20Specification%5D(https%3A%2F%2Fgithub.com%2Fethereum%2Fconsensus-specs%2Fblob%2Fmaster%2Fspecs%2Fphase0%2Fbeacon-chain.mdx)%0A%20%20-%20%5BExtended%20light%20client%20protocol%5D(https%3A%2F%2Fnotes.ethereum.org%2F%40vbuterin%2Fextended_light_client_protocol)%0A%20%20-%20%5BAltair%20Light%20Client%20--%20Light%20Client%5D(https%3A%2F%2Fgithub.com%2Fethereum%2Fconsensus-specs%2Fblob%2Fdev%2Fspecs%2Faltair%2Flight-client%2Flight-client.mdx)%0A%20%20-%20%5BAltair%20Light%20Client%20--%20Sync%20Protocol%5D(https%3A%2F%2Fgithub.com%2Fethereum%2Fconsensus-specs%2Fblob%2Fdev%2Fspecs%2Faltair%2Flight-client%2Fsync-protocol.mdx)%0A%20%20-%20%5BBeacon%20Chain%20Fork%20Choice%5D(https%3A%2F%2Fgithub.com%2Fethereum%2Fconsensus-specs%2Fblob%2Fdev%2Fspecs%2Fphase0%2Ffork-choice.mdx)%0A%20%20-%20%5BThe%20Portal%20Network%20Specification%5D(https%3A%2F%2Fgithub.com%2Fethereum%2Fportal-network-specs)%3A%20an%20in%20progess%20effort%20to%20enable%20lightweight%20protocol%20access%20by%20resource%20constrained%20devices.%0A%0A-%20%5BLight%20Ethereum%20Subprotocol%20(LES)%5D(https%3A%2F%2Fgithub.com%2Fethereum%2Fdevp2p%2Fblob%2Fmaster%2Fcaps%2Fles.mdx)%3A%20the%20protocol%20used%20by%20%22light%22%20clients%2C%20which%20only%20download%20block%20headers%20as%20they%20appear%20and%20fetch%20other%20parts%20of%20the%20blockchain%20on-demand.%0A-%20%5BBlockDaemon%3A%20Ethereum%20Altair%20Hard%20Folk%3A%20Light%20Clients%20%26%20Sync%20Committees%5D(https%3A%2F%2Fblockdaemon.com%2Fblog%2Fethereum-altair-hard-folk-light-clients-sync-committees%2F)%0A-%20%5BEfficient%20algorithms%20for%20CBC%20Casper%5D(https%3A%2F%2Fdocs.google.com%2Fpresentation%2Fd%2F1oc_zdywOsHxz3zez1ILAgrerS7RkaF1hHoW0FLtp0Gw%2Fedit%23slide%3Did.p)%3A%20Review%20of%20LMD%20GHOST%20(Latest%20Message%20Driven%2C%20Greediest%20Heaviest%20Observed%20Sub-Tree)%0A-%20%5BSSZ%3A%20Simple%20Serialize%5D(https%3A%2F%2Fethereum.org%2Fen%2Fdevelopers%2Fdocs%2Fdata-structures-and-encoding%2Fssz%2F)%3A%20Overview%20of%20Simple%20serialize%20(SSZ)%20is%20the%20serialization%20method%20used%20on%20the%20Beacon%20Chain.%20(including%20merkalization%20and%20multiproofs)%0A-%20%5BThe%20Noise%20Protocol%20Framework%5D(https%3A%2F%2Fnoiseprotocol.org%2Fnoise.html)%3A%20Noise%20is%20a%20framework%20for%20crypto%20protocols%20based%20on%20Diffie-Hellman%20key%20agreement.%0A-%20%5BFlashbots%20for%20Ethereum%20Consensus%20Clients%5D(https%3A%2F%2Fhackmd.io%2FQoLwVQf3QK6EiVt15YOYqQ%3Fview)%0A-%20%5BOptimistic%20Sync%20Specification%5D(https%3A%2F%2Fgithub.com%2Fethereum%2Fconsensus-specs%2Fblob%2Fdev%2Fsync%2Foptimistic.mdx)%3A%20Optimistic%20Sync%20is%20a%20stop-gap%20measure%20to%20allow%20execution%20nodes%20to%20sync%20via%20established%20methods%20until%20future%20Ethereum%20roadmap%20items%20are%20implemented%20(e.g.%2C%20statelessness).%0A-%20%5BConsensus%20Light%20Client%20Server%20Implementation%20Notes%5D(https%3A%2F%2Fhackmd.io%2FhsCz1G3BTyiwwJtjT4pe2Q%3Fview)%3A%20How%20Lodestar%20beacon%20node%20was%20tweaked%20to%20serve%20light%20clients%0A-%20%5Bbeacon%20chain%20light%20client%20design%20doc%5D(https%3A%2F%2Fnotes.ethereum.org%2F%40ralexstokes%2FHJxDMi8vY)%3A%20notes%20about%20the%20design%2Fimplementation%20of%20a%20beacon%20chain%20light%20client%20using%20standard%20APIs%20and%20protocol%20features%0A-%20%5BA%20Beacon%20Chain%20Light%20Client%20Proposal%5D(https%3A%2F%2Fethresear.ch%2Ft%2Fa-beacon-chain-light-client-proposal%2F11064)%3A%20proposing%20a%20light%20client%20implementation%20that%20goes%20a%20step%20further%20than%20the%20minimum%20light%20client%20described%20in%20the%20altair%20consensus-spec.%20The%20proposed%20client%20aims%20to%20allow%20queries%20into%20the%20beacon%20state.%0A-%20%5BDistributed%20Hash%20Table%20(DHT)%20Overview%5D(https%3A%2F%2Fgithub.com%2Fethereum%2Fportal-network-specs%2Fblob%2Fmaster%2Fbeacon-chain%2Fbeacon-state-network.md%23dht-overview)%3A%20allows%20network%20participants%20to%20have%20retrieve%20data%20on-demand%20based%20on%20a%20content%20key.%0A-%20%5B(WIP)%20Light%20client%20p2p%20interface%20Specification%5D(https%3A%2F%2Fgithub.com%2Fethereum%2Fconsensus-specs%2Fpull%2F2786)%3A%20a%20PR%20to%20get%20the%20conversation%20going%20about%20a%20p2p%20approach.%0A%0A%23%23%23%20Near%20Rainbow%20Bridge%20Ethereum%20Light%20Client%20Walkthrough%0A%0AThe%20following%20is%20a%20walkthrough%20of%20how%20a%20transaction%20executed%20on%20Ethereum%20is%20propogated%20to%20NEAR's%20%5Beth2-client%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Ftree%2Fmaster%2Fcontracts%2Fnear%2Feth2-client).%20See%20%5BCryptographic%20Primitives%5D(%23cryptographic-primitives)%20for%20more%20information%20on%20the%20cryptography%20used.%0A%0A**At%20a%20high%20level%20the%20ethereum%20light%20client%20contract**%0A%0A-%20Optionally%20accepts%20client%20updates%20only%20from%20a%20trusted%20client%0A-%20Can%20pause%20functions%0A-%20Validates%20a%20sync%20committee%20exists%20for%20the%20curremt%20slot%0A-%20Validates%20sync%20committe%20has%20greater%20than%20the%20minimum%20required%20sync%20committee%20members%0A-%20Validates%202%2F3%20or%20more%20of%20the%20committe%20members%20have%20signed%20the%20blocks%0A-%20Validates%20bls%20signatures%20(i.e.%20the%20bls%20signatures%20of%20the%20sync%20comittee%20for%20the%20blocks%20propogated)%0A-%20Stores%20the%20hashes%20of%20the%20blocks%20for%20the%20past%20%60hashes_gc_threshold%60%20headers.%20Events%20that%20happen%20past%20this%20threshold%20cannot%20be%20verified%20by%20the%20client.%20It%20is%20desirable%20that%20this%20number%20is%20larger%20than%207%20days'%20worth%20of%20headers%2C%20which%20is%20roughly%2051k%20Ethereum%20blocks.%20So%20this%20number%20should%20be%2051k%20in%20production.%0A-%20Stores%20the%20Ethereum%20Network%20(e.g.%20mainnet%2C%20kiln)%0A-%20Stores%20Hashes%20of%20the%20finalized%20execution%20blocks%20mapped%20to%20their%20numbers.%0A-%20Stores%20All%20unfinalized%20execution%20blocks'%20headers%20hashes%20mapped%20to%20their%20%60HeaderInfo%60.%0A-%20Stores%20%60AccountId%60s%20mapped%20to%20their%20number%20of%20submitted%20headers.%0A-%20Stores%20Max%20number%20of%20unfinalized%20blocks%20allowed%20to%20be%20stored%20by%20one%20submitter%20account.%20This%20value%20should%20be%20at%20least%2032%20blocks%20(1%20epoch)%2C%20but%20the%20recommended%20value%20is%201024%20(32%20epochs)%0A-%20Stores%20minimum%20balance%20that%20should%20be%20attached%20to%20register%20a%20new%20submitter%20account.%0A-%20Stores%20finalized%20beacon%20header%0A-%20Stores%20finalized%20execution%20header%0A-%20Stores%20current_sync_committee%0A-%20Stores%20next_sync_committee%0A%0A%23%23%23%23%20Ethereum%20to%20NEAR%20block%20propagation%20flow%0A%0A-%20%5BLight%20Clients%20are%20deployed%20on%20Near%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Fblob%2Fmaster%2Feth2near%2Feth2near-block-relay-rs%2Fsrc%2Fmain.rs%23L107)%3A%0A%20%20-%20%5Binit_contract%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Fblob%2Fmaster%2Feth2near%2Feth2near-block-relay-rs%2Fsrc%2Fmain.rs%23L107)%3A%20The%20eth2near%20relayer%20is%20called%20with%20an%20argument%20to%20initialize%20the%20%5Beth2-client%20contract%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Fblob%2Fmaster%2Fcontracts%2Fnear%2Feth2-client%2Fsrc%2Flib.rs)%0A%20%20%20%20-%20%5Beth_client_contract%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Fblob%2Fmaster%2Feth2near%2Feth2near-block-relay-rs%2Fsrc%2Fmain.rs%23L108)%3A%20is%20created%20using%20a%20contract_wrapper%0A%20%20%20%20%20%20-%20%60let%20mut%20eth_client_contract%20%3D%20EthClientContract%3A%3Anew(get_eth_contract_wrapper(%26config))%3B%60%0A%20%20%20%20-%20%5BEthClientContract%20Wrapper%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Fblob%2Fmaster%2Feth2near%2Fcontract_wrapper%2Fsrc%2Feth_client_contract.rs)%3A%20creates%20an%20instance%20of%20%5Beth2-client%20contract%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Fblob%2Fmaster%2Fcontracts%2Fnear%2Feth2-client%2Fsrc%2Flib.rs)%20with%20the%20following%20arguments%0A%20%20%20%20%20%20-%20%60network%60%20-%20the%20name%20of%20Ethereum%20network%20such%20as%20%60mainnet%60%2C%20%60goerli%60%2C%20%60kiln%60%2C%20etc.%0A%20%20%20%20%20%20-%20%60finalized_execution_header%60%20-%20the%20finalized%20execution%20header%20to%20start%20initialization%20with.%0A%20%20%20%20%20%20-%20%60finalized_beacon_header%60%20-%20correspondent%20finalized%20beacon%20header.%0A%20%20%20%20%20%20-%20%60current_sync_committee%60%20-%20sync%20committee%20correspondent%20for%20finalized%20block.%0A%20%20%20%20%20%20-%20%60next_sync_committee%60%20-%20sync%20committee%20for%20the%20next%20period%20after%20period%20for%20finalized%20block.%0A%20%20%20%20%20%20-%20%60hashes_gs_threshold%60%20-%20the%20maximum%20number%20of%20stored%20finalized%20blocks.%0A%20%20%20%20%20%20-%20%60max_submitted_block_by_account%60%20-%20the%20maximum%20number%20of%20unfinalized%20blocks%20which%20one%20relay%20can%20store%20in%20the%20client's%20storage.%0A%20%20%20%20%20%20-%20%60trusted_signer%60%20-%20the%20account%20address%20of%20the%20trusted%20signer%20which%20is%20allowed%20to%20submit%20light%20client%20updates.%0A-%20%5BRelayer%20is%20Created%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Fblob%2Fmaster%2Feth2near%2Feth2near-block-relay-rs%2Fsrc%2Fmain.rs%23L111)%3A%0A%20%20-%20%5Beth2near_relay%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Fblob%2Fmaster%2Feth2near%2Feth2near-block-relay-rs%2Fsrc%2Fmain.rs%23L111)%20is%20created%20using%20the%20following%20arguments%0A%20%20%20%20-%20%60let%20mut%20eth2near_relay%20%3D%20Eth2NearRelay%3A%3Ainit(%26config%2C%20get_eth_client_contract(%26config)%2C%20args.enable_binary_search%2C%20args.submit_only_finalized_blocks%2C)%3B%60%0A-%20%5BRelayer%20is%20Started%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Fblob%2Fmaster%2Feth2near%2Feth2near-block-relay-rs%2Fsrc%2Fmain.rs)%3A%0A%20%20-%20The%20relayer%20is%20started%20using%20%60eth2near_relay.run(None)%3B%60%0A%20%20-%20This%20executes%20the%20%5Beth2near_relay%20run%20function%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Fblob%2Fmaster%2Feth2near%2Feth2near-block-relay-rs%2Fsrc%2Feth2near_relay.rs%23L257)%20%60pub%20fn%20run(%26mut%20self%2C%20max_iterations%3A%20Option%3Cu64%3E)%60%20which%20runs%20until%20terminated%20doing%20using%20the%20following%20loop%20%60while%20!self.terminate%60%0A%20%20%20%20-%20%60self.wait_for_synchronization()%2C%60%3A%20gets%20the%20sync%20status%0A%20%20%20%20-%20%60sleep(Duration%3A%3Afrom_secs(12))%3B%60%3A%20waits%20for%2012%20seconds%0A%20%20%20%20-%20%60self.get_max_slot_for_submission()%60%3A%20gets%20the%20maximum%20slot%20for%20submission%20from%20Ethereum%0A%20%20%20%20-%20%60self.get_last_eth2_slot_on_near%60%3A%20gets%20the%20latest%20slot%20propogated%20from%20Ethereum%20to%20NEAR%0A%20%20%20%20-%20%60if%20last_eth2_slot_on_near%20%3C%20max_slot_for_submission%60%3A%20If%20there%20are%20slots%20to%20process%0A%20%20%20%20%20%20-%20%60self.get_execution_blocks_between(last_eth2_slot_on_near%20%2B%201%2C%20max_slot_for_submission%2C)%2C%60%3A%20Get%20the%20execution%20blocks%20to%20be%20processed%0A%20%20%20%20%20%20-%20%60self.submit_execution_blocks(headers%2C%20current_slot%2C%20%26mut%20last_eth2_slot_on_near)%60%3A%20submit%20them%0A%20%20%20%20%20%20-%20%60were_submission_on_iter%20%3D%20true%3B%60%3A%20flags%20that%20there%20were%20submissions%0A%20%20%20%20-%20%60were_submission_on_iter%20%7C%3D%20self.send_light_client_updates_with_checks(last_eth2_slot_on_near)%3B%60%3A%20send%20light_client%20updates%20with%20checks%20and%20updates%20the%20submission%20flag%20to%20true%20if%20if%20passes.%20Following%20is%20some%20key%20logic%0A%20%20%20%20%20%20-%20%60self.is_enough_blocks_for_light_client_update%60%3A%20Checks%20if%20there%20are%20enough%20blocks%20for%20a%20light%20client%20update%0A%20%20%20%20%20%20%20%20-%20%60self.send_light_client_updates%60%20calls%20%60send_light_client_update%60%20which%0A%20%20%20%20%20%20%20%20%20%20-%20%60if%20last_finalized_slot_on_eth%20%3E%3D%20last_finalized_slot_on_near%20%2B%20self.max_blocks_for_finalization%60%3A%20checks%20if%20the%20gap%20is%20too%20big%20(i.e.%20we%20are%20at%20a%20new%20slot)%20between%20slot%20of%20finalized%20block%20on%20NEAR%20and%20ETH.%20If%20it%20is%20it%20sends%20a%20hand%20made%20client%20update%20(which%20will%20loop%20getting%20the%20new%20slots%20sync%20committees)%20otherwise%20it%20sends%20a%20regular%20client%20update%20(which%20propogates%20the%20block%20headers)%0A%20%20%20%20%20%20%20%20%20%20%20%20-%20%60self.send_hand_made_light_client_update(last_finalized_slot_on_near)%3B%60%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20-%20%60let%20include_next_sync_committee%20%3D%20BeaconRPCClient%3A%3Aget_period_for_slot%20(last_finalized_slot_on_near)%20!%3D%20BeaconRPCClient%3A%3Aget_period_for_slot(attested_slot)%3B%60%0A%20%20%20%20%20%20%20%20%20%20%20%20-%20%60self.send_regular_light_client_update(last_finalized_slot_on_eth%2C%20last_finalized_slot_on_near%2C)%3B%60%0A%20%20%20%20%20%20%20%20%20%20-%20%60self.send_specific_light_client_update(light_client_update)%60%20is%20called%20for%20both%20regular%20and%20hand%20made%20updates.%0A%20%20%20%20%20%20%20%20%20%20%20%20-%20%60self.eth_client_contract.is_known_block%60%3A%20Checks%20if%20the%20block%20is%20already%20known%20on%20the%20Etherum%20Client%20Contract%20on%20NEAR%0A%20%20%20%20%20%20%20%20%20%20%20%20-%20%60self.verify_bls_signature_for_finality_update(%26light_client_update)%60%3A%20Verifies%20the%20BLS%20signatures.%20This%20calls%20%60is_correct_finality_update%60%20in%20%60eth2near%2Ffinality-update-verify%2Fsrc%2Flib.rs%60%20%5C*%0A%20%20%20%20%20%20%20%20%20%20%20%20-%20%60self.eth_client_contract.send_light_client_update(light_client_update.clone())%60%3A%20Updates%20the%20light%20client%20with%20the%20finalized%20block%0A%20%20%20%20%20%20%20%20%20%20%20%20-%20%60self.beacon_rpc_client.get_block_number_for_slot(types%3A%3ASlot%3A%3Anew(light_client_update.finality_update.header_update.beacon_header.slot.as_u64()))%2C%60%3A%20Validates%20Finalized%20block%20number%20is%20correct%20on%20Ethereum%20usng%20the%20%60beacon_rpc_client%60.%0A%20%20%20%20%20%20%20%20%20%20%20%20-%20%60sleep(Duration%3A%3Afrom_secs(self.sleep_time_after_submission_secs))%3B%60%3A%20sleeps%20for%20the%20configured%20submission%20sleep%20time.%0A%20%20%20%20-%20%60if%20!were_submission_on_iter%20%7Bthread%3A%3Asleep(Duration%3A%3Afrom_secs(self.sleep_time_on_sync_secs))%3B%7D%60%3A%20if%20there%20were%20submissions%20sleep%20for%20however%20many%20seconds%20were%20configured%20for%20sync%20sleep%20time.%0A%0A%23%23%23%23%20Ethereum%20to%20NEAR%20block%20propagation%20components%0A%0A-%20%5BEthClientContract%20Wrapper%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Fblob%2Fmaster%2Feth2near%2Fcontract_wrapper%2Fsrc%2Feth_client_contract.rs)%3A%20supports%20%5Beth2-client%20contract%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Fblob%2Fmaster%2Fcontracts%2Fnear%2Feth2-client%2Fsrc%2Flib.rs)%20functions%20%60impl%20EthClientContractTrait%20for%20EthClientContract%60%0A%20%20-%20%60fn%20get_last_submitted_slot(%26self)%20-%3E%20u64%60%0A%20%20-%20%60fn%20is_known_block(%26self%2C%20execution_block_hash%3A%20%26H256)%20-%3E%20Result%3Cbool%2C%20Box%3Cdyn%20Error%3E%3E%60%0A%20%20-%20%60fn%20send_light_client_update(%26mut%20self%2C%20light_client_update%3A%20LightClientUpdate%2C)%20-%3E%20Result%3CFinalExecutionOutcomeView%2C%20Box%3Cdyn%20Error%3E%3E%60%0A%20%20-%20%60fn%20get_finalized_beacon_block_hash(%26self)%20-%3E%20Result%3CH256%2C%20Box%3Cdyn%20Error%3E%3E%60%0A%20%20-%20%60fn%20get_finalized_beacon_block_slot(%26self)%20-%3E%20Result%3Cu64%2C%20Box%3Cdyn%20Error%3E%3E%60%0A%20%20-%20%60fn%20send_headers(%26mut%20self%2C%20headers%3A%20%26%5BBlockHeader%5D%2C%20end_slot%3A%20u64%2C)%20-%3E%20Result%3CFinalExecutionOutcomeView%2C%20Box%3Cdyn%20std%3A%3Aerror%3A%3AError%3E%3E%60%0A%20%20-%20%60fn%20get_min_deposit(%26self)%20-%3E%20Result%3CBalance%2C%20Box%3Cdyn%20Error%3E%3E%60%0A%20%20-%20%60fn%20register_submitter(%26self)%20-%3E%20Result%3CFinalExecutionOutcomeView%2C%20Box%3Cdyn%20Error%3E%3E%60%0A%20%20-%20%60fn%20is_submitter_registered(%26self%2Caccount_id%3A%20Option%3CAccountId%3E%2C)%20-%3E%20Result%3Cbool%2C%20Box%3Cdyn%20Error%3E%3E%60%0A%20%20-%20%60fn%20get_light_client_state(%26self)%20-%3E%20Result%3CLightClientState%2C%20Box%3Cdyn%20Error%3E%3E%60%0A%20%20-%20%60fn%20get_num_of_submitted_blocks_by_account(%26self)%20-%3E%20Result%3Cu32%2C%20Box%3Cdyn%20Error%3E%3E%60%0A%20%20-%20%60fn%20get_max_submitted_blocks_by_account(%26self)%20-%3E%20Result%3Cu32%2C%20Box%3Cdyn%20Error%3E%3E%60%0A-%20%5Beth2-client%20contract%20storage%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Fblob%2Fmaster%2Fcontracts%2Fnear%2Feth2-client%2Fsrc%2Flib.rs)%3A%0A%20%20-%20High%20level%20storage%20overview%0A%20%20-%20provides%20the%20%60Eth2Client%60%20public%20data%20stucture%0A%0A%20%20%20%20%60%60%60%0A%20%20%20%20pub%20struct%20Eth2Client%20%7B%0A%20%20%20%20%20%20%20%20%2F%2F%2F%20If%20set%2C%20only%20light%20client%20updates%20by%20the%20trusted%20signer%20will%20be%20accepted%0A%20%20%20%20%20%20%20%20trusted_signer%3A%20Option%3CAccountId%3E%2C%0A%20%20%20%20%20%20%20%20%2F%2F%2F%20Mask%20determining%20all%20paused%20functions%0A%20%20%20%20%20%20%20%20paused%3A%20Mask%2C%0A%20%20%20%20%20%20%20%20%2F%2F%2F%20Whether%20the%20client%20validates%20the%20updates.%0A%20%20%20%20%20%20%20%20%2F%2F%2F%20Should%20only%20be%20set%20to%20%60false%60%20for%20debugging%2C%20testing%2C%20and%20diagnostic%20purposes%0A%20%20%20%20%20%20%20%20validate_updates%3A%20bool%2C%0A%20%20%20%20%20%20%20%20%2F%2F%2F%20Whether%20the%20client%20verifies%20BLS%20signatures.%0A%20%20%20%20%20%20%20%20verify_bls_signatures%3A%20bool%2C%0A%20%20%20%20%20%20%20%20%2F%2F%2F%20We%20store%20the%20hashes%20of%20the%20blocks%20for%20the%20past%20%60hashes_gc_threshold%60%20headers.%0A%20%20%20%20%20%20%20%20%2F%2F%2F%20Events%20that%20happen%20past%20this%20threshold%20cannot%20be%20verified%20by%20the%20client.%0A%20%20%20%20%20%20%20%20%2F%2F%2F%20It%20is%20desirable%20that%20this%20number%20is%20larger%20than%207%20days'%20worth%20of%20headers%2C%20which%20is%20roughly%0A%20%20%20%20%20%20%20%20%2F%2F%2F%2051k%20Ethereum%20blocks.%20So%20this%20number%20should%20be%2051k%20in%20production.%0A%20%20%20%20%20%20%20%20hashes_gc_threshold%3A%20u64%2C%0A%20%20%20%20%20%20%20%20%2F%2F%2F%20Network.%20e.g.%20mainnet%2C%20kiln%0A%20%20%20%20%20%20%20%20network%3A%20Network%2C%0A%20%20%20%20%20%20%20%20%2F%2F%2F%20Hashes%20of%20the%20finalized%20execution%20blocks%20mapped%20to%20their%20numbers.%20Stores%20up%20to%20%60hashes_gc_threshold%60%20entries.%0A%20%20%20%20%20%20%20%20%2F%2F%2F%20Execution%20block%20number%20-%3E%20execution%20block%20hash%0A%20%20%20%20%20%20%20%20finalized_execution_blocks%3A%20LookupMap%3Cu64%2C%20H256%3E%2C%0A%20%20%20%20%20%20%20%20%2F%2F%2F%20All%20unfinalized%20execution%20blocks'%20headers%20hashes%20mapped%20to%20their%20%60HeaderInfo%60.%0A%20%20%20%20%20%20%20%20%2F%2F%2F%20Execution%20block%20hash%20-%3E%20ExecutionHeaderInfo%20object%0A%20%20%20%20%20%20%20%20unfinalized_headers%3A%20UnorderedMap%3CH256%2C%20ExecutionHeaderInfo%3E%2C%0A%20%20%20%20%20%20%20%20%2F%2F%2F%20%60AccountId%60s%20mapped%20to%20their%20number%20of%20submitted%20headers.%0A%20%20%20%20%20%20%20%20%2F%2F%2F%20Submitter%20account%20-%3E%20Num%20of%20submitted%20headers%0A%20%20%20%20%20%20%20%20submitters%3A%20LookupMap%3CAccountId%2C%20u32%3E%2C%0A%20%20%20%20%20%20%20%20%2F%2F%2F%20Max%20number%20of%20unfinalized%20blocks%20allowed%20to%20be%20stored%20by%20one%20submitter%20account%0A%20%20%20%20%20%20%20%20%2F%2F%2F%20This%20value%20should%20be%20at%20least%2032%20blocks%20(1%20epoch)%2C%20but%20the%20recommended%20value%20is%201024%20(32%20epochs)%0A%20%20%20%20%20%20%20%20max_submitted_blocks_by_account%3A%20u32%2C%0A%20%20%20%20%20%20%20%20%2F%2F%20The%20minimum%20balance%20that%20should%20be%20attached%20to%20register%20a%20new%20submitter%20account%0A%20%20%20%20%20%20%20%20min_storage_balance_for_submitter%3A%20Balance%2C%0A%20%20%20%20%20%20%20%20%2F%2F%2F%20Light%20client%20state%0A%20%20%20%20%20%20%20%20finalized_beacon_header%3A%20ExtendedBeaconBlockHeader%2C%0A%20%20%20%20%20%20%20%20finalized_execution_header%3A%20LazyOption%3CExecutionHeaderInfo%3E%2C%0A%20%20%20%20%20%20%20%20current_sync_committee%3A%20LazyOption%3CSyncCommittee%3E%2C%0A%20%20%20%20%20%20%20%20next_sync_committee%3A%20LazyOption%3CSyncCommittee%3E%2C%0A%20%20%20%20%7D%0A%20%20%20%20%60%60%60%0A%0A-%20%5Beth2-client%20dependencies%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Fblob%2Fmaster%2Fcontracts%2Fnear%2Feth2-client%2FCargo.toml)%20relys%20heavily%20on%20the%20%5Blighthouse%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Flighthouse)%20codebase%20for%20it's%20consensus%20and%20cryptogrphic%20primitives.%20See%20%5BCryptographic%20Primitives%5D(%23cryptographic-primitives)%20for%20more%20information.%0A%20%20-%20%60ethereum-types%20%3D%20%220.9.2%22%60%0A%20%20-%20%60eth-types%20%3D%20%20%7B%20path%20%3D%20%22..%2Feth-types%22%20%7D%60%0A%20%20-%20%60eth2-utility%20%3D%20%20%7B%20path%20%3D%20%22..%2Feth2-utility%22%20%7D%60%0A%20%20-%20%60tree_hash%20%3D%20%7B%20git%20%3D%20%22https%3A%2F%2Fgithub.com%2Faurora-is-near%2Flighthouse.git%22%2C%20rev%20%3D%20%22b624c3f0d3c5bc9ea46faa14c9cb2d90ee1e1dec%22%20%7D%60%0A%20%20-%20%60merkle_proof%20%3D%20%7B%20git%20%3D%20%22https%3A%2F%2Fgithub.com%2Faurora-is-near%2Flighthouse.git%22%2C%20rev%20%3D%20%22b624c3f0d3c5bc9ea46faa14c9cb2d90ee1e1dec%22%20%7D%60%0A%20%20-%20%60bls%20%3D%20%7B%20git%20%3D%20%22https%3A%2F%2Fgithub.com%2Faurora-is-near%2Flighthouse.git%22%2C%20optional%20%3D%20true%2C%20rev%20%3D%20%22b624c3f0d3c5bc9ea46faa14c9cb2d90ee1e1dec%22%2C%20default-features%20%3D%20false%2C%20features%20%3D%20%5B%22milagro%22%5D%7D%60%0A%20%20-%20%60admin-controlled%20%3D%20%20%7B%20path%20%3D%20%22..%2Fadmin-controlled%22%20%7D%60%0A%20%20-%20%60near-sdk%20%3D%20%224.0.0%22%60%0A%20%20-%20%60borsh%20%3D%20%220.9.3%22%60%0A%20%20-%20%60bitvec%20%3D%20%221.0.0%22%60%0A%0A-%20%5Beth2-client%20contract%20functions%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Fblob%2Fmaster%2Fcontracts%2Fnear%2Feth2-client%2Fsrc%2Flib.rs)%3A%20provides%20the%20following%20functions%20in%20%60impl%20Eth2Client%60%0A%20%20-%20%60fn%20validate_light_client_update(%26self%2C%20update%3A%20%26LightClientUpdate)%60%0A%20%20-%20%60fn%20verify_finality_branch(%26self%2C%20update%3A%20%26LightClientUpdate%2C%20finalized_period%3A%20u64)%60%0A%20%20-%20%60fn%20verify_bls_signatures(%26self%2C%20update%3A%20%26LightClientUpdate%2C%20sync_committee_bits%3A%20BitVec%3Cu8%3E%2C%20finalized_period%3A%20u64%2C)%60%0A%20%20-%20%60fn%20update_finalized_header(%26mut%20self%2C%20finalized_header%3A%20ExtendedBeaconBlockHeader)%60%0A%20%20-%20%60fn%20commit_light_client_update(%26mut%20self%2C%20update%3A%20LightClientUpdate)%60%0A%20%20-%20%60fn%20gc_finalized_execution_blocks(%26mut%20self%2C%20mut%20header_number%3A%20u64)%60%0A%20%20-%20%60fn%20update_submitter(%26mut%20self%2C%20submitter%3A%20%26AccountId%2C%20value%3A%20i64)%60%0A%20%20-%20%60fn%20is_light_client_update_allowed(%26self)%60%0A-%20%5BEth2NearRelay%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Fblob%2Fmaster%2Feth2near%2Feth2near-block-relay-rs%2Fsrc%2Feth2near_relay.rs%23L84)%3A%20has%20the%20following%20public%20structure%0A%0A%20%20%60%60%60%0A%20%20pub%20struct%20Eth2NearRelay%20%7B%0A%20%20%20%20%20%20beacon_rpc_client%3A%20BeaconRPCClient%2C%0A%20%20%20%20%20%20eth1_rpc_client%3A%20Eth1RPCClient%2C%0A%20%20%20%20%20%20near_rpc_client%3A%20NearRPCClient%2C%0A%20%20%20%20%20%20eth_client_contract%3A%20Box%3Cdyn%20EthClientContractTrait%3E%2C%0A%20%20%20%20%20%20headers_batch_size%3A%20u64%2C%0A%20%20%20%20%20%20ethereum_network%3A%20String%2C%0A%20%20%20%20%20%20interval_between_light_client_updates_submission_in_epochs%3A%20u64%2C%0A%20%20%20%20%20%20max_blocks_for_finalization%3A%20u64%2C%0A%20%20%20%20%20%20near_network_name%3A%20String%2C%0A%20%20%20%20%20%20last_slot_searcher%3A%20LastSlotSearcher%2C%0A%20%20%20%20%20%20terminate%3A%20bool%2C%0A%20%20%20%20%20%20submit_only_finalized_blocks%3A%20bool%2C%0A%20%20%20%20%20%20next_light_client_update%3A%20Option%3CLightClientUpdate%3E%2C%0A%20%20%20%20%20%20sleep_time_on_sync_secs%3A%20u64%2C%0A%20%20%20%20%20%20sleep_time_after_submission_secs%3A%20u64%2C%0A%20%20%20%20%20%20max_submitted_blocks_by_account%3A%20u32%2C%0A%20%20%7D%0A%20%20%60%60%60%0A%0A-%20%5BEth2NearRelay%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Fblob%2Fmaster%2Feth2near%2Feth2near-block-relay-rs%2Fsrc%2Feth2near_relay.rs%23L103)%3A%20Implements%20the%20following%20functions%0A%20%20-%20%60fn%20get_max_slot_for_submission(%26self)%20-%3E%20Result%3Cu64%2C%20Box%3Cdyn%20Error%3E%3E%60%0A%20%20-%20%60fn%20get_last_eth2_slot_on_near(%26mut%20self%2C%20max_slot%3A%20u64)%20-%3E%20Result%3Cu64%2C%20Box%3Cdyn%20Error%3E%3E%60%0A%20%20-%20%60fn%20get_last_finalized_slot_on_near(%26self)%20-%3E%20Result%3Cu64%2C%20Box%3Cdyn%20Error%3E%3E%60%0A%20%20-%20%60fn%20get_last_finalized_slot_on_eth(%26self)%20-%3E%20Result%3Cu64%2C%20Box%3Cdyn%20Error%3E%3E%60%0A%20%20-%20**%60pub%20fn%20run(%26mut%20self%2C%20max_iterations%3A%20Option%3Cu64%3E)%60**%0A%20%20-%20%60fn%20wait_for_synchronization(%26self)%20-%3E%20Result%3C()%2C%20Box%3Cdyn%20Error%3E%3E%60%0A%20%20-%20%60fn%20get_light_client_update_from_file(config%3A%20%26Config%2C%20beacon_rpc_client%3A%20%26BeaconRPCClient%2C)%20-%3E%20Result%3COption%3CLightClientUpdate%3E%2C%20Box%3Cdyn%20Error%3E%3E%60%0A%20%20-%20%60fn%20set_terminate(%26mut%20self%2C%20iter_id%3A%20u64%2C%20max_iterations%3A%20Option%3Cu64%3E)%60%0A%20%20-%20%60fn%20get_execution_blocks_between(%26self%2C%20start_slot%3A%20u64%2C%20last_eth2_slot_on_eth_chain%3A%20u64%2C)%20-%3E%20Result%3C(Vec%3CBlockHeader%3E%2C%20u64)%2C%20Box%3Cdyn%20Error%3E%3E%60%0A%20%20-%20%60fn%20submit_execution_blocks(%26mut%20self%2C%20headers%3A%20Vec%3CBlockHeader%3E%2C%20current_slot%3A%20u64%2Clast_eth2_slot_on_near%3A%20%26mut%20u64%2C)%60%0A%20%20-%20%60fn%20verify_bls_signature_for_finality_update(%26mut%20self%2C%20light_client_update%3A%20%26LightClientUpdate%2C)%20-%3E%20Result%3Cbool%2C%20Box%3Cdyn%20Error%3E%3E%60%0A%20%20-%20%60fn%20get_execution_block_by_slot(%26self%2C%20slot%3A%20u64)%20-%3E%20Result%3CBlockHeader%2C%20Box%3Cdyn%20Error%3E%3E%60%0A%0A-%20%5BEth2NearRelay%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Fblob%2Fmaster%2Feth2near%2Feth2near-block-relay-rs%2Fsrc%2Feth2near_relay.rs%23L461)%3A%20has%20a%20second%20implementation%20of%20functions%20for%20submitting%20light%20client%20updates%0A%20%20-%20%60fn%20is_enough_blocks_for_light_client_update(%26self%2C%20last_submitted_slot%3A%20u64%2Clast_finalized_slot_on_near%3A%20u64%2C%20last_finalized_slot_on_eth%3A%20u64%2C)%20-%3E%20bool%60%0A%20%20-%20%60fn%20is_shot_run_mode(%26self)%20-%3E%20bool%60%0A%20%20-%20%60fn%20send_light_client_updates_with_checks(%26mut%20self%2C%20last_submitted_slot%3A%20u64)%20-%3E%20bool%60%0A%20%20-%20%60fn%20send_light_client_updates(%26mut%20self%2C%20last_submitted_slot%3A%20u64%2C%20last_finalized_slot_on_near%3A%20u64%2C%20last_finalized_slot_on_eth%3A%20u64%2C)%60%0A%20%20-%20%60fn%20send_light_client_update_from_file(%26mut%20self%2C%20last_submitted_slot%3A%20u64)%60%0A%20%20-%20%60fn%20send_regular_light_client_update(%26mut%20self%2C%20last_finalized_slot_on_eth%3A%20u64%2Clast_finalized_slot_on_near%3A%20u64%2C)%60%0A%20%20-%20%60fn%20get_attested_slot(%26mut%20self%2C%20last_finalized_slot_on_near%3A%20u64%2C)%20-%3E%20Result%3Cu64%2C%20Box%3Cdyn%20Error%3E%3E%60%0A%20%20-%20%60fn%20send_hand_made_light_client_update(%26mut%20self%2C%20last_finalized_slot_on_near%3A%20u64)%60%0A%20%20-%20%60fn%20send_specific_light_client_update(%26mut%20self%2C%20light_client_update%3A%20LightClientUpdate)%60%0A%0A-%20%5Beth2-contract-init%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Ftree%2Fmaster%2Feth2near%2Feth2-contract-init)%20includes%20(but%20not%20limited%20to)%20the%20following%20additional%20components%0A%20%20-%20%5Binit_contract.rs%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Fblob%2Fmaster%2Feth2near%2Feth2-contract-init%2Fsrc%2Finit_contract.rs)%3A%20Verifies%20light%20client%20snapshot%20and%20initializes%20the%20Ethereum%20Light%20Contract%20on%20Near.%0A%20%20%20%20-%20%60pub%20fn%20verify_light_client_snapshot(block_root%3A%20String%2C%20light_client_snapshot%3A%20%26LightClientSnapshotWithProof%2C)%20-%3E%20bool%60%3A%20Verifies%20the%20light%20client%20by%20checking%20the%20snapshot%20format%20getting%20the%20current%20consensus%20branch%20and%20verifying%20it%20via%20a%20merkle%20proof.%0A%20%20%20%20-%20%60pub%20fn%20init_contract(config%3A%20%26Config%2C%20eth_client_contract%3A%20%26mut%20EthClientContract%2C%20mut%20init_block_root%3A%20String%2C)%20-%3E%20Result%3C()%2C%20Box%3Cdyn%20std%3A%3Aerror%3A%3AError%3E%3E%60%3A%20Initializes%20the%20Ethereum%20Light%20Client%20Contract%20on%20Near.%0A-%20%5Beth_rpc_client%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Ftree%2Fmaster%2Feth2near%2Feth_rpc_client)%20includes%20(but%20not%20limited%20to)%20the%20following%20additional%20components%0A%20%20-%20%5Beth1_rpc_client.rs%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Fblob%2Fmaster%2Feth2near%2Feth2near-block-relay-rs%2Fsrc%2Feth1_rpc_client.rs)%3A%20Is%20used%20to%20get%20block%20headers%20and%20check%20sync%20status.%20It%20has%20the%20following%20functions%0A%20%20%20%20-%20%60pub%20fn%20new(endpoint_url%3A%20%26str)%20-%3E%20Self%60%0A%20%20%20%20-%20%60pub%20fn%20get_block_header_by_number(%26self%2C%20number%3A%20u64)%20-%3E%20Result%3CBlockHeader%2C%20Box%3Cdyn%20Error%3E%3E%60%0A%20%20%20%20-%20%60pub%20fn%20is_syncing(%26self)%20-%3E%20Result%3Cbool%2C%20Box%3Cdyn%20Error%3E%3E%60%0A%20%20-%20%5Bexecution_block_proof.rs%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Fblob%2Fmaster%2Feth2near%2Feth2near-block-relay-rs%2Fsrc%2Fexecution_block_proof.rs)%3A%20%60ExecutionBlockProof%60%20contains%20a%20%60block_hash%60%20(execution%20block)%20and%20a%20proof%20of%20its%20inclusion%20in%20the%20%60BeaconBlockBody%60%20tree%20hash.%20The%20%60block_hash%60%20is%20the%2012th%20field%20in%20execution_payload%2C%20which%20is%20the%209th%20field%20in%20%60BeaconBlockBody%60.%20The%20first%204%20elements%20in%20proof%20correspondent%20to%20the%20proof%20of%20inclusion%20of%20%60block_hash%60%20in%20Merkle%20tree%20built%20for%20%60ExecutionPayload%60.%20The%20last%204%20elements%20of%20the%20proof%20of%20%60ExecutionPayload%60%20in%20the%20Merkle%20tree%20are%20built%20on%20high-level%20%60BeaconBlockBody%60%20fields.%20The%20proof%20starts%20from%20the%20leaf.%20It%20has%20the%20following%20structure%20and%20functions%0A%20%20%20%20-%20%60pub%20struct%20ExecutionBlockProof%20%7Bblock_hash%3A%20H256%2C%20proof%3A%20%5BH256%3B%20Self%3A%3APROOF_SIZE%5D%2C%7D%60%0A%20%20%20%20-%20%60pub%20fn%20construct_from_raw_data(block_hash%3A%20%26H256%2C%20proof%3A%20%26%5BH256%3B%20Self%3A%3APROOF_SIZE%5D)%20-%3E%20Self%60%0A%20%20%20%20-%20%60pub%20fn%20construct_from_beacon_block_body(beacon_block_body%3A%20%26BeaconBlockBody%3CMainnetEthSpec%3E%2C)%20-%3E%20Result%3CSelf%2C%20Box%3Cdyn%20Error%3E%3E%60%0A%20%20%20%20-%20%60pub%20fn%20get_proof(%26self)%20-%3E%20%5BH256%3B%20Self%3A%3APROOF_SIZE%5D%60%0A%20%20%20%20-%20%60pub%20fn%20get_execution_block_hash(%26self)%20-%3E%20H256%60%0A%20%20%20%20-%20%60pub%20fn%20verify_proof_for_hash(%26self%2C%20beacon_block_body_hash%3A%20%26H256%2C)%20-%3E%20Result%3Cbool%2C%20IncorrectBranchLength%3E%60%0A%20%20%20%20-%20%60fn%20merkle_root_from_branch(leaf%3A%20H256%2C%20branch%3A%20%26%5BH256%5D%2C%20depth%3A%20usize%2C%20index%3A%20usize%2C)%20-%3E%20Result%3CH256%2C%20IncorrectBranchLength%3E%60%0A%20%20-%20%5Bbeacon_block_body_merkle_tree.rs%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Fblob%2Fmaster%2Feth2near%2Feth_rpc_client%2Fsrc%2Fbeacon_block_body_merkle_tree.rs)%3A%20implements%20merkle%20trees%20for%20the%20Beacon%20and%20the%20ExecutionPayload%0A%20%20%20%20-%20%60BeaconBlockBodyMerkleTree%60%20is%20built%20on%20the%20%60BeaconBlockBody%60%20data%20structure%2C%20where%20the%20leaves%20of%20the%20Merkle%20Tree%20are%20the%20hashes%20of%20the%20high-level%20fields%20of%20the%20%60BeaconBlockBody%60.%20The%20hashes%20of%20each%20element%20are%20produced%20by%20using%20%60ssz%60%20serialization.%0A%20%20%20%20-%20%60ExecutionPayloadMerkleTree%60%20is%20a%20built%20on%20the%20%60ExecutionPayload%60%20data%20structure%2C%20where%20the%20leaves%20of%20the%20Merkle%20Tree%20are%20the%20hashes%20of%20the%20high-level%20fields%20of%20the%20%60ExecutionPayload%60.%20The%20hashes%20of%20each%20element%20are%20produced%20by%20using%20%60ssz%60%20serialization.%20%60ExecutionPayload%60%20is%20one%20of%20the%20field%20in%20BeaconBlockBody.%20The%20hash%20of%20the%20root%20of%20%60ExecutionPlayloadMerkleTree%60%20is%20the%209th%20leaf%20in%20BeaconBlockBody%20Merkle%20Tree.%0A%20%20-%20%5Bbeacon_rpc_client.rs%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Fblob%2Fmaster%2Feth2near%2Feth_rpc_client%2Fsrc%2Fbeacon_rpc_client.rs)%3A%20allows%20getting%20beacon%20block%20body%2C%20beacon%20block%20header%20and%20light%20client%20updates%20using%20%5BBeacon%20RPC%20API%5D(https%3A%2F%2Fethereum.github.io%2Fbeacon-APIs%2F).%20It%20has%20the%20following%20functions%0A%20%20%20%20-%20%60pub%20fn%20new(endpoint_url%3A%20%26str%2C%20timeout_seconds%3A%20u64%2C%20timeout_state_seconds%3A%20u64)%20-%3E%20Self%60%3A%20Creates%20%60BeaconRPCClient%60%20for%20the%20given%20BeaconAPI%20%60endpoint_url%60%0A%20%20%20%20-%20%60pub%20fn%20get_beacon_block_body_for_block_id(%26self%2C%20block_id%3A%20%26str%2C)%20-%3E%20Result%3CBeaconBlockBody%3CMainnetEthSpec%3E%2C%20Box%3Cdyn%20Error%3E%3E%60%3A%20Returns%20%60BeaconBlockBody%60%20struct%20for%20the%20given%20%60block_id%60.%20It%20uses%20the%20following%20arguments%0A%20%20%20%20%20%20-%20%60block_id%60%20-%20Block%20identifier.%20Can%20be%20one%20of%3A%20%60%22head%22%20(canonical%20head%20in%20node's%20view)%2C%22genesis%22%2C%20%22finalized%22%2C%20%3Cslot%3E%2C%20%3Chex%20encoded%20blockRoot%20with%200x%20prefix%3E%60(see%20%5Bbeacon-APIs%2F%23%2FBeacon%2FgetBlockV2%5D(https%3A%2F%2Fethereum.github.io%2Fbeacon-APIs%2F%23%2FBeacon%2FgetBlockV2)).%0A%20%20%20%20-%20%60pub%20fn%20get_beacon_block_header_for_block_id(%26self%2C%20block_id%3A%20%26str%2C)%20-%3E%20Result%3Ctypes%3A%3ABeaconBlockHeader%2C%20Box%3Cdyn%20Error%3E%3E%60%3A%20Returns%20%60BeaconBlockHeader%60%20struct%20for%20the%20given%20%60block_id%60.%20It%20uses%20the%20following%20arguments%0A%20%20%20%20%20%20-%20%60block_id%60%20-%20Block%20identifier.%20Can%20be%20one%20of%3A%20%60%22head%22%20(canonical%20head%20in%20node's%20view)%2C%22genesis%22%2C%20%22finalized%22%2C%20%3Cslot%3E%2C%20%3Chex%20encoded%20blockRoot%20with%200x%20prefix%3E%60(see%20%5Bbeacon-APIs%2F%23%2FBeacon%2FgetBlockV2%5D(https%3A%2F%2Fethereum.github.io%2Fbeacon-APIs%2F%23%2FBeacon%2FgetBlockV2)).%0A%20%20%20%20-%20%60pub%20fn%20get_light_client_update(%26self%2C%20period%3A%20u64%2C)%20-%3E%20Result%3CLightClientUpdate%2C%20Box%3Cdyn%20Error%3E%3E%60%3A%20Returns%20%60LightClientUpdate%60%20struct%20for%20the%20given%20%60period%60.%20It%20uses%20the%20following%20arguments%0A%20%20%20%20%20%20-%20%60period%60%20-%20period%20id%20for%20which%20%60LightClientUpdate%60%20is%20fetched.%20On%20Mainnet%2C%20one%20period%20consists%20of%20256%20epochs%2C%20and%20one%20epoch%20consists%20of%2032%20slots%0A%20%20%20%20-%20%60pub%20fn%20get_bootstrap(%26self%2C%20block_root%3A%20String%2C)%20-%3E%20Result%3CLightClientSnapshotWithProof%2C%20Box%3Cdyn%20Error%3E%3E%60%3A%20Fetch%20a%20bootstrapping%20state%20with%20a%20proof%20to%20a%20trusted%20block%20root.%20The%20trusted%20block%20root%20should%20be%20fetched%20with%20similar%20means%20to%20a%20weak%20subjectivity%20checkpoint.%20Only%20block%20roots%20for%20checkpoints%20are%20guaranteed%20to%20be%20available.%0A%20%20%20%20-%20%60pub%20fn%20get_checkpoint_root(%26self)%20-%3E%20Result%3CString%2C%20Box%3Cdyn%20Error%3E%3E%60%0A%20%20%20%20-%20%60pub%20fn%20get_last_finalized_slot_number(%26self)%20-%3E%20Result%3Ctypes%3A%3ASlot%2C%20Box%3Cdyn%20Error%3E%3E%60%3A%20Return%20the%20last%20finalized%20slot%20in%20the%20Beacon%20chain%0A%20%20%20%20-%20%60pub%20fn%20get_last_slot_number(%26self)%20-%3E%20Result%3Ctypes%3A%3ASlot%2C%20Box%3Cdyn%20Error%3E%3E%60%3A%20Return%20the%20last%20slot%20in%20the%20Beacon%20chain%0A%20%20%20%20-%20%60pub%20fn%20get_slot_by_beacon_block_root(%26self%2C%20beacon_block_hash%3A%20H256%2C)%20-%3E%20Result%3Cu64%2C%20Box%3Cdyn%20Error%3E%3E%60%0A%20%20%20%20-%20%60pub%20fn%20get_block_number_for_slot(%26self%2C%20slot%3A%20types%3A%3ASlot)%20-%3E%20Result%3Cu64%2C%20Box%3Cdyn%20Error%3E%3E%60%0A%20%20%20%20-%20%60pub%20fn%20get_finality_light_client_update(%26self)%20-%3E%20Result%3CLightClientUpdate%2C%20Box%3Cdyn%20Error%3E%3E%60%0A%20%20%20%20-%20%60pub%20fn%20get_finality_light_client_update_with_sync_commity_update(%26self%2C)%20-%3E%20Result%3CLightClientUpdate%2C%20Box%3Cdyn%20Error%3E%3E%60%0A%20%20%20%20-%20%60pub%20fn%20get_beacon_state(%26self%2C%20state_id%3A%20%26str%2C)%20-%3E%20Result%3CBeaconState%3CMainnetEthSpec%3E%2C%20Box%3Cdyn%20Error%3E%3E%60%0A%20%20%20%20-%20%60pub%20fn%20is_syncing(%26self)%20-%3E%20Result%3Cbool%2C%20Box%3Cdyn%20Error%3E%3E%60%0A%20%20%20%20-%20%60fn%20get_json_from_client(client%3A%20%26Client%2C%20url%3A%20%26str)%20-%3E%20Result%3CString%2C%20Box%3Cdyn%20Error%3E%3E%60%0A%20%20%20%20-%20%60fn%20get_json_from_raw_request(%26self%2C%20url%3A%20%26str)%20-%3E%20Result%3CString%2C%20Box%3Cdyn%20Error%3E%3E%60%0A%20%20%20%20-%20%60fn%20get_body_json_from_rpc_result(block_json_str%3A%20%26str%2C)%20-%3E%20Result%3Cstd%3A%3Astring%3A%3AString%2C%20Box%3Cdyn%20Error%3E%3E%60%0A%20%20%20%20-%20%60fn%20get_header_json_from_rpc_result(json_str%3A%20%26str%2C)%20-%3E%20Result%3Cstd%3A%3Astring%3A%3AString%2C%20Box%3Cdyn%20Error%3E%3E%60%0A%20%20%20%20-%20%60fn%20get_attested_header_from_light_client_update_json_str(light_client_update_json_str%3A%20%26str%2C)%20-%3E%20Result%3CBeaconBlockHeader%2C%20Box%3Cdyn%20Error%3E%3E%60%0A%20%20%20%20-%20%60fn%20get_sync_aggregate_from_light_client_update_json_str(light_client_update_json_str%3A%20%26str%2C)%20-%3E%20Result%3CSyncAggregate%2C%20Box%3Cdyn%20Error%3E%3E%60%0A%20%20%20%20-%20%60fn%20get_signature_slot(%26self%2C%20light_client_update_json_str%3A%20%26str%2C)%20-%3E%20Result%3CSlot%2C%20Box%3Cdyn%20Error%3E%3E%60%3A%20%60signature_slot%60%20is%20not%20provided%20in%20the%20current%20API.%20The%20slot%20is%20brute-forced%20until%20%60SyncAggregate%60%20in%20%60BeconBlockBody%60%20in%20the%20current%20slot%20is%20equal%20to%20%60SyncAggregate%60%20in%20%60LightClientUpdate%60%0A%20%20%20%20-%20%60fn%20get_finality_update_from_light_client_update_json_str(%26self%2C%20light_client_update_json_str%3A%20%26str%2C)%20-%3E%20Result%3CFinalizedHeaderUpdate%2C%20Box%3Cdyn%20Error%3E%3E%60%0A%20%20%20%20-%20%60fn%20get_sync_committee_update_from_light_client_update_json_str(light_client_update_json_str%3A%20%26str%2C)%20-%3E%20Result%3CSyncCommitteeUpdate%2C%20Box%3Cdyn%20Error%3E%3E%60%0A%20%20%20%20-%20%60pub%20fn%20get_period_for_slot(slot%3A%20u64)%20-%3E%20u64%60%0A%20%20%20%20-%20%60pub%20fn%20get_non_empty_beacon_block_header(%26self%2C%20start_slot%3A%20u64%2C)%20-%3E%20Result%3Ctypes%3A%3ABeaconBlockHeader%2C%20Box%3Cdyn%20Error%3E%3E%60%0A%20%20%20%20-%20%60fn%20check_block_found_for_slot(%26self%2C%20json_str%3A%20%26str)%20-%3E%20Result%3C()%2C%20Box%3Cdyn%20Error%3E%3E%60%0A%20%20-%20%5Bhand_made_finality_light_client_update.rs%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Fblob%2Fmaster%2Feth2near%2Feth_rpc_client%2Fsrc%2Fhand_made_finality_light_client_update.rs)%3A%20Has%20two%20implementations%0A%20%20%20%20-%20The%20first%20implementation%20which%20calls%20functions%20in%20the%20second%0A%20%20%20%20%20%20-%20%60pub%20fn%20get_finality_light_client_update(beacon_rpc_client%3A%20%26BeaconRPCClient%2C%20attested_slot%3A%20u64%2C%20include_next_sync_committee%3A%20bool%2C)%20-%3E%20Result%3CLightClientUpdate%2C%20Box%3Cdyn%20Error%3E%3E%60%0A%20%20%20%20%20%20-%20%60pub%20fn%20get_finality_light_client_update_from_file(beacon_rpc_client%3A%20%26BeaconRPCClient%2C%20file_name%3A%20%26str%2C)%20-%3E%20Result%3CLightClientUpdate%2C%20Box%3Cdyn%20Error%3E%3E%60%0A%20%20%20%20%20%20-%20%60pub%20fn%20get_light_client_update_from_file_with_next_sync_committee(beacon_rpc_client%3A%20%26BeaconRPCClient%2C%20attested_state_file_name%3A%20%26str%2C%20finality_state_file_name%3A%20%26str%2C)%20-%3E%20Result%3CLightClientUpdate%2C%20Box%3Cdyn%20Error%3E%3E%60%0A%20%20%20%20-%20The%20second%20implementation%0A%20%20%20%20%20%20-%20%60fn%20get_attested_slot_with_enough_sync_committee_bits_sum(beacon_rpc_client%3A%20%26BeaconRPCClient%2Cattested_slot%3A%20u64%2C)%20-%3E%20Result%3C(u64%2C%20u64)%2C%20Box%3Cdyn%20Error%3E%3E%60%0A%20%20%20%20%20%20-%20%60fn%20get_state_from_file(file_name%3A%20%26str)%20-%3E%20Result%3CBeaconState%3CMainnetEthSpec%3E%2C%20Box%3Cdyn%20Error%3E%3E%60%0A%20%20%20%20%20%20-%20%60fn%20get_finality_light_client_update_for_state(beacon_rpc_client%3A%20%26BeaconRPCClient%2Cattested_slot%3A%20u64%2C%20signature_slot%3A%20u64%2C%20beacon_state%3A%20BeaconState%3CMainnetEthSpec%3E%2C%20finality_beacon_state%3A%20Option%3CBeaconState%3CMainnetEthSpec%3E%3E%2C)%20-%3E%20Result%3CLightClientUpdate%2C%20Box%3Cdyn%20Error%3E%3E%60%0A%20%20%20%20%20%20-%20%60fn%20get_next_sync_committee(beacon_state%3A%20%26BeaconState%3CMainnetEthSpec%3E%2C)%20-%3E%20Result%3CSyncCommitteeUpdate%2C%20Box%3Cdyn%20Error%3E%3E%60%0A%20%20%20%20%20%20-%20%60fn%20from_lighthouse_beacon_header(beacon_header%3A%20%26BeaconBlockHeader%2C)%20-%3E%20eth_types%3A%3Aeth2%3A%3ABeaconBlockHeader%60%0A%20%20%20%20%20%20-%20%60fn%20get_sync_committee_bits(sync_committee_signature%3A%20%26types%3A%3ASyncAggregate%3CMainnetEthSpec%3E%2C)%20-%3E%20Result%3C%5Bu8%3B%2064%5D%2C%20Box%3Cdyn%20Error%3E%3E%60%0A%20%20%20%20%20%20-%20%60fn%20get_finality_branch(beacon_state%3A%20%26BeaconState%3CMainnetEthSpec%3E%2C)%20-%3E%20Result%3CVec%3CH256%3E%2C%20Box%3Cdyn%20Error%3E%3E%60%0A%20%20%20%20%20%20-%20%60fn%20get_finality_update(finality_header%3A%20%26BeaconBlockHeader%2C%20beacon_state%3A%20%26BeaconState%3CMainnetEthSpec%3E%2C%20finalized_block_body%3A%20%26BeaconBlockBody%3CMainnetEthSpec%3E%2C)%20-%3E%20Result%3CFinalizedHeaderUpdate%2C%20Box%3Cdyn%20Error%3E%3E%60%0A%20%20-%20%5Blight_client_snapshot_with_proof.rs%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Fblob%2Fmaster%2Feth2near%2Feth_rpc_client%2Fsrc%2Flight_client_snapshot_with_proof.rs)%3A%20contains%20the%20structure%20for%20%60LightClientSnapshotWithProof%60%0A%0A%20%20%20%20%20%20%20%20%60%60%60%0A%20%20%20%20%20%20%20%20pub%20struct%20LightClientSnapshotWithProof%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20pub%20beacon_header%3A%20BeaconBlockHeader%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20pub%20current_sync_committee%3A%20SyncCommittee%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20pub%20current_sync_committee_branch%3A%20Vec%3CH256%3E%2C%0A%20%20%20%20%20%20%20%20%7D%0A%20%20%20%20%20%20%20%20%60%60%60%0A%0A-%20%5Beth2near-block-relay-rs%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Ftree%2Fmaster%2Feth2near%2Feth2near-block-relay-rs)%20includes%20(but%20not%20limited%20to)%20the%20following%20additional%20components%0A%20%20-%20%5Bconfig.rs%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Fblob%2Fmaster%2Feth2near%2Feth2near-block-relay-rs%2Fsrc%2Fconfig.rs)%3A%0A%20%20-%20%5Blast_slot_searcher.rs%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Fblob%2Fmaster%2Feth2near%2Feth2near-block-relay-rs%2Fsrc%2Flast_slot_searcher.rs)%3A%20Implementation%20of%20functions%20for%20searching%20last%20slot%20on%20NEAR%20contract.%20Supports%20both%20binary%20and%20linear%20searches.%0A%20%20%20%20-%20%60pub%20fn%20get_last_slot(%26mut%20self%2C%20last_eth_slot%3A%20u64%2C%20beacon_rpc_client%3A%20%26BeaconRPCClient%2C%20eth_client_contract%3A%20%26Box%3Cdyn%20EthClientContractTrait%3E%2C)%20-%3E%20Result%3Cu64%2C%20Box%3Cdyn%20Error%3E%3E%60%0A%20%20%20%20-%20%60n%20binary_slot_search(%26self%2C%20slot%3A%20u64%2C%20finalized_slot%3A%20u64%2C%20last_eth_slot%3A%20u64%2C%20beacon_rpc_client%3A%20%26BeaconRPCClient%2C%20eth_client_contract%3A%20%26Box%3Cdyn%20EthClientContractTrait%3E%2C)%20-%3E%20Result%3Cu64%2C%20Box%3Cdyn%20Error%3E%3E%60%20%3A%20Search%20for%20the%20slot%20before%20the%20first%20unknown%20slot%20on%20NEAR.%20Assumptions%3A%20(1)%20start_slot%20is%20known%20on%20NEAR%20(2)%20last_slot%20is%20unknown%20on%20NEAR.%20Return%20error%20in%20case%20of%20problem%20with%20network%20connection.%0A%20%20%20%20-%20%60fn%20binsearch_slot_forward(%26self%2C%20slot%3A%20u64%2C%20max_slot%3A%20u64%2C%20beacon_rpc_client%3A%20%26BeaconRPCClient%2Ceth_client_contract%3A%20%26Box%3Cdyn%20EthClientContractTrait%3E%2C)%20-%3E%20Result%3Cu64%2C%20Box%3Cdyn%20Error%3E%3E%20%7B%60%3A%20Search%20for%20the%20slot%20before%20the%20first%20unknown%20slot%20on%20NEAR.%20Assumptions%3A%20(1)%20start_slot%20is%20known%20on%20NEAR%20(2)%20last_slot%20is%20unknown%20on%20NEAR.%20Return%20error%20in%20case%20of%20problem%20with%20network%20connection.%0A%20%20%20%20-%20%60fn%20binsearch_slot_range(%26self%2C%20start_slot%3A%20u64%2C%20last_slot%3A%20u64%2C%20beacon_rpc_client%3A%20%26BeaconRPCClient%2C%20eth_client_contract%3A%20%26Box%3Cdyn%20EthClientContractTrait%3E%2C)%20-%3E%20Result%3Cu64%2C%20Box%3Cdyn%20Error%3E%3E%60%3A%20Search%20for%20the%20slot%20before%20the%20first%20unknown%20slot%20on%20NEAR.%20Assumptions%3A%20(1)%20start_slot%20is%20known%20on%20NEAR%20(2)%20last_slot%20is%20unknown%20on%20NEAR.%20Return%20error%20in%20case%20of%20problem%20with%20network%20connection.%0A%20%20%20%20-%20%60fn%20linear_slot_search(%26self%2C%20slot%3A%20u64%2C%20finalized_slot%3A%20u64%2C%20last_eth_slot%3A%20u64%2C%20beacon_rpc_client%3A%20%26BeaconRPCClient%2C%20eth_client_contract%3A%20%26Box%3Cdyn%20EthClientContractTrait%3E%2C)%20-%3E%20Result%3Cu64%2C%20Box%3Cdyn%20Error%3E%3E%60%3A%20Returns%20the%20last%20slot%20known%20with%20block%20known%20on%20NEAR.%20%60Slot%60%20--%20expected%20last%20known%20slot.%20%60finalized_slot%60%20--%20last%20finalized%20slot%20on%20NEAR%2C%20assume%20as%20known%20slot.%20%60last_eth_slot%60%20--%20head%20slot%20on%20Eth.%0A%20%20%20%20-%20%60fn%20linear_search_forward(%26self%2C%20slot%3A%20u64%2C%20max_slot%3A%20u64%2C%20beacon_rpc_client%3A%20%26BeaconRPCClient%2Ceth_client_contract%3A%20%26Box%3Cdyn%20EthClientContractTrait%3E%2C)%20-%3E%20Result%3Cu64%2C%20Box%3Cdyn%20Error%3E%3E%60%3A%20Returns%20the%20slot%20before%20the%20first%20unknown%20block%20on%20NEAR.%20The%20search%20range%20is%20%5Bslot%20..%20max_slot).%20If%20there%20is%20no%20unknown%20block%20in%20this%20range%20max_slot%20-%201%20will%20be%20returned.%20Assumptions%3A%20(1)%20block%20for%20slot%20is%20submitted%20to%20NEAR.%20(2)%20block%20for%20max_slot%20is%20not%20submitted%20to%20NEAR.%0A%20%20%20%20-%20%60fn%20linear_search_backward(%26self%2C%20start_slot%3A%20u64%2C%20last_slot%3A%20u64%2C%20beacon_rpc_client%3A%20%26BeaconRPCClient%2C%20eth_client_contract%3A%20%26Box%3Cdyn%20EthClientContractTrait%3E%2C)%20-%3E%20Result%3Cu64%2C%20Box%3Cdyn%20Error%3E%3E%60%3A%20Returns%20the%20slot%20before%20the%20first%20unknown%20block%20on%20NEAR.%20The%20search%20range%20is%20%5Blast_slot%20..%20start_slot).%20If%20no%20such%20block%20are%20found%20the%20start_slot%20will%20be%20returned.%20Assumptions%3A%20(1)%20block%20for%20start_slot%20is%20submitted%20to%20NEAR%20(2)%20block%20for%20last_slot%20%2B%201%20is%20not%20submitted%20to%20NEAR.%0A%20%20%20%20-%20%60fn%20find_left_non_error_slot(%26self%2C%20left_slot%3A%20u64%2C%20right_slot%3A%20u64%2C%20step%3A%20i8%2C%20beacon_rpc_client%3A%20%26BeaconRPCClient%2C%20eth_client_contract%3A%20%26Box%3Cdyn%20EthClientContractTrait%3E%2C)%20-%3E%20(u64%2C%20bool)%60%3A%20Find%20the%20leftmost%20non-empty%20slot.%20Search%20range%3A%20%5Bleft_slot%2C%20right_slot).%20Returns%20pair%3A%20(1)%20slot_id%20and%20(2)%20is%20this%20block%20already%20known%20on%20Eth%20client%20on%20NEAR.%20Assume%20that%20right_slot%20is%20non-empty%20and%20it's%20block%20were%20submitted%20to%20NEAR%2C%20so%20if%20non%20correspondent%20block%20is%20found%20we%20return%20(right_slot%2C%20false).%0A%20%20%20%20-%20%60fn%20block_known_on_near(%20%26self%2C%20slot%3A%20u64%2C%20beacon_rpc_client%3A%20%26BeaconRPCClient%2Ceth_client_contract%3A%20%26Box%3Cdyn%20EthClientContractTrait%3E%2C)%20-%3E%20Result%3Cbool%2C%20Box%3Cdyn%20Error%3E%3E%60%3A%20Check%20if%20the%20block%20for%20current%20slot%20in%20Eth2%20already%20were%20submitted%20to%20NEAR.%20Returns%20Error%20if%20slot%20doesn't%20contain%20any%20block.%0A%20%20-%20%5Bmain.rs%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Fblob%2Fmaster%2Feth2near%2Feth2near-block-relay-rs%2Fsrc%2Fmain.rs)%3A%20%5BCommand%20Line%20Argument%20Parser%5D(https%3A%2F%2Fdocs.rs%2Fclap%2Flatest%2Fclap%2F)%20used%20to%20run%20the%20Ethereum%20to%20Near%20Block%20Relay.%20It%20contains%20the%20following%20functions%0A%20%20%20%20-%20%60fn%20get_eth_contract_wrapper(config%3A%20%26Config)%20-%3E%20Box%3Cdyn%20ContractWrapper%3E%60%0A%20%20%20%20-%20%60fn%20get_dao_contract_wrapper(config%3A%20%26Config)%20-%3E%20Box%3Cdyn%20ContractWrapper%3E%60%0A%20%20%20%20-%20%60fn%20get_eth_client_contract(config%3A%20%26Config)%20-%3E%20Box%3Cdyn%20EthClientContractTrait%3E%60%0A%20%20%20%20-%20%60fn%20init_log(args%3A%20%26Arguments%2C%20config%3A%20%26Config)%60%0A%20%20%20%20-%20%60fn%20main()%20-%3E%20Result%3C()%2C%20Box%3Cdyn%20std%3A%3Aerror%3A%3AError%3E%3E%60%0A%20%20-%20%5Bnear_rpc_client.rs%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Fblob%2Fmaster%2Feth2near%2Feth2near-block-relay-rs%2Fsrc%2Fnear_rpc_client.rs)%0A%20%20%20%20-%20%60pub%20fn%20new(endpoint_url%3A%20%26str)%20-%3E%20Self%60%0A%20%20%20%20-%20%60pub%20fn%20check_account_exists(%26self%2C%20account_id%3A%20%26str)%20-%3E%20Result%3Cbool%2C%20Box%3Cdyn%20Error%3E%3E%60%0A%20%20%20%20-%20%60pub%20fn%20is_syncing(%26self)%20-%3E%20Result%3Cbool%2C%20Box%3Cdyn%20Error%3E%3E%60%0A%0A%23%23%23%23%20Ethereum%20Light%20Client%20Finality%20Update%20Verify%20Components%0A%0A%5Bfinality-update-verify%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Ftree%2Fmaster%2Feth2near%2Ffinality-update-verify)%20is%20called%20from%20%5Bfn%20verify_bls_signature_for_finality_update%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Fblob%2Fmaster%2Feth2near%2Feth2near-block-relay-rs%2Fsrc%2Feth2near_relay.rs%23L422)%20to%20verify%20signatures%20as%20part%20of%20light_client%20updates.%20It%20relies%20heavily%20on%20the%20%5Blighthouse%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Flighthouse)%20codebase%20for%20it's%20consensus%20and%20cryptogrphic%20primitives.%20See%20%5BCryptographic%20Primitives%5D(%23cryptographic-primitives)%20for%20more%20information.%0A%0A-%20Dependencies%20in%20%5BCargo.toml%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Fblob%2Fmaster%2Feth2near%2Ffinality-update-verify%2FCargo.toml)%0A%20%20-%20%60eth-types%20%3D%20%7B%20path%20%3D%22..%2F..%2Fcontracts%2Fnear%2Feth-types%2F%22%2C%20features%20%3D%20%5B%22eip1559%22%5D%7D%60%0A%20%20-%20%60bls%20%3D%20%7B%20git%20%3D%20%22https%3A%2F%2Fgithub.com%2Faurora-is-near%2Flighthouse.git%22%2C%20rev%20%3D%20%22b624c3f0d3c5bc9ea46faa14c9cb2d90ee1e1dec%22%20%7D%60%0A%20%20-%20%60eth2-utility%20%20%3D%20%7B%20path%20%3D%22..%2F..%2Fcontracts%2Fnear%2Feth2-utility%22%7D%60%0A%20%20-%20%60tree_hash%20%3D%20%7B%20git%20%3D%20%22https%3A%2F%2Fgithub.com%2Faurora-is-near%2Flighthouse.git%22%2C%20rev%20%3D%20%22b624c3f0d3c5bc9ea46faa14c9cb2d90ee1e1dec%22%20%7D%60%0A%20%20-%20%60types%20%3D%20%20%7B%20git%20%3D%20%22https%3A%2F%2Fgithub.com%2Faurora-is-near%2Flighthouse.git%22%2C%20rev%20%3D%20%22b624c3f0d3c5bc9ea46faa14c9cb2d90ee1e1dec%22%20%7D%60%0A%20%20-%20%60bitvec%20%3D%20%221.0.0%22%60%0A%0A-%20Functions%20in%20%5Blib.rs%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Fblob%2Fmaster%2Feth2near%2Ffinality-update-verify%2Fsrc%2Flib.rs)%0A%20%20-%20%60fn%20h256_to_hash256(hash%3A%20H256)%20-%3E%20Hash256%60%0A%20%20-%20%60fn%20tree_hash_h256_to_eth_type_h256(hash%3A%20tree_hash%3A%3AHash256)%20-%3E%20eth_types%3A%3AH256%60%0A%20%20-%20%60fn%20to_lighthouse_beacon_block_header(bridge_beacon_block_header%3A%20%26BeaconBlockHeader%2C)%20-%3E%20types%3A%3ABeaconBlockHeader%60%0A%20%20-%20%60pub%20fn%20is_correct_finality_update(ethereum_network%3A%20%26str%2C%20light_client_update%3A%20%26LightClientUpdate%2C%20%20%20sync_committee%3A%20SyncCommittee%2C)%20-%3E%20Result%3Cbool%2C%20Box%3Cdyn%20Error%3E%3E%60%0A%0A%23%23%23%23%20Cryptographic%20Primitives%0A%0AFollowing%20are%20cryptographic%20primitives%20used%20in%20the%20%5Beth2-client%20contract%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Ftree%2Fmaster%2Fcontracts%2Fnear%2Feth2-client)%20and%20%5Bfinality-update-verify%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Ftree%2Fmaster%2Feth2near%2Ffinality-update-verify).%20Many%20are%20from%20the%20%5Blighthouse%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Flighthouse)%20codebase.%20Specifically%20%5Bconsensus%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Flighthouse%2Ftree%2Fstable%2Fconsensus)%20and%20%5Bcrypto%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Flighthouse%2Ftree%2Fstable%2Fcrypto)%20functions.%0A%0ASome%20common%20primitives%0A%0A-%20%5Bbitvec%5D(https%3A%2F%2Fdocs.rs%2Fbitvec%2F1.0.1%2Fbitvec%2F)%3A%20Addresses%20memory%20by%20bits%2C%20for%20packed%20collections%20and%20bitfields%0A-%20%5Beth2_serde_utils%5D(https%3A%2F%2Fdocs.rs%2Feth2_serde_utils%2F0.1.0%2Feth2_serde_utils%2F)%3A%20Serialization%20and%20deserialization%20utilities%20useful%20for%20JSON%20representations%20of%20Ethereum%202.0%20types.%0A-%20%5Beth2_hashing%5D(https%3A%2F%2Fdocs.rs%2Feth2_hashing%2F0.2.0%2Feth2_hashing%2F)%3A%20Hashing%20primitives%20used%20in%20Ethereum%202.0%0A-%20%5Bblst%5D(https%3A%2F%2Fdocs.rs%2Fblst%2F0.3.10%2Fblst%2F)%3A%20The%20blst%20crate%20provides%20a%20rust%20interface%20to%20the%20blst%20BLS12-381%20signature%20library.%0A-%20%5Btree_hash%5D(https%3A%2F%2Fdocs.rs%2Ftree_hash%2F0.4.0%2Ftree_hash%2F)%3A%20Efficient%20Merkle-hashing%20as%20used%20in%20Ethereum%202.0%0A-%20%5Beth2_ssz_types%5D(https%3A%2F%2Fdocs.rs%2Feth2_ssz_types%2F0.2.1%2Fssz_types%2F)%3A%20Provides%20types%20with%20unique%20properties%20required%20for%20SSZ%20serialization%20and%20Merklization.%0A%0ASome%20Primitives%20from%20Lighthouse%0A%0A-%20%5Bbls%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Flighthouse%2Ftree%2Fstable%2Fcrypto%2Fbls)%3A%20%5BBoneh%E2%80%93Lynn%E2%80%93Shacham%5D(https%3A%2F%2Fen.wikipedia.org%2Fwiki%2FBLS_digital_signature)%20digital%20signature%20support%0A%20%20-%20%5Bimpls%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Flighthouse%2Ftree%2Fstable%2Fcrypto%2Fbls%2Fsrc%2Fimpls)%3A%20Implementations%0A%20%20%20%20-%20%5Bblst%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Flighthouse%2Fblob%2Fstable%2Fcrypto%2Fbls%2Fsrc%2Fimpls%2Fblst.rs)%0A%20%20%20%20-%20%5Bfake_crypto%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Flighthouse%2Fblob%2Fstable%2Fcrypto%2Fbls%2Fsrc%2Fimpls%2Ffake_crypto.rs)%0A%20%20%20%20-%20%5Bmilagro%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Flighthouse%2Fblob%2Fstable%2Fcrypto%2Fbls%2Fsrc%2Fimpls%2Fmilagro.rs)%3A%20support%20for%20%5BApache%20Milagro%5D(https%3A%2F%2Fmilagro.apache.org%2Fdocs%2Fmilagro-intro%2F)%0A%20%20%20%20-%20%5Bfunctionality%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Flighthouse%2Ftree%2Fstable%2Fcrypto%2Fbls%2Fsrc)%0A%20%20%20%20%20%20-%20%5Bgeneric_aggregate_public_key%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Flighthouse%2Fblob%2Fstable%2Fcrypto%2Fbls%2Fsrc%2Fgeneric_aggregate_public_key.rs)%0A%20%20%20%20%20%20-%20%5Bgeneric_aggregate_signature%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Flighthouse%2Fblob%2Fstable%2Fcrypto%2Fbls%2Fsrc%2Fgeneric_aggregate_signature.rs)%0A%20%20%20%20%20%20-%20%5Bgeneric_keypair%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Flighthouse%2Fblob%2Fstable%2Fcrypto%2Fbls%2Fsrc%2Fgeneric_keypair.rs)%0A%20%20%20%20%20%20-%20%5Bgeneric_public_key%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Flighthouse%2Fblob%2Fstable%2Fcrypto%2Fbls%2Fsrc%2Fgeneric_public_key.rs)%0A%20%20%20%20%20%20-%20%5Bgeneric_public_key_bytes%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Flighthouse%2Fblob%2Fstable%2Fcrypto%2Fbls%2Fsrc%2Fgeneric_public_key_bytes.rs)%0A%20%20%20%20%20%20-%20%5Bgeneric_secret_key%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Flighthouse%2Fblob%2Fstable%2Fcrypto%2Fbls%2Fsrc%2Fgeneric_secret_key.rs)%0A%20%20%20%20%20%20-%20%5Bgeneric_signature%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Flighthouse%2Fblob%2Fstable%2Fcrypto%2Fbls%2Fsrc%2Fgeneric_signature.rs)%0A%20%20%20%20%20%20-%20%5Bgeneric_signature_bytes%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Flighthouse%2Fblob%2Fstable%2Fcrypto%2Fbls%2Fsrc%2Fgeneric_signature_bytes.rs)%0A%20%20%20%20%20%20-%20%5Bgeneric_signature_set%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Flighthouse%2Fblob%2Fstable%2Fcrypto%2Fbls%2Fsrc%2Fgeneric_signature_set.rs)%0A%20%20%20%20%20%20-%20%5Bget_withdrawal_credentials%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Flighthouse%2Fblob%2Fstable%2Fcrypto%2Fbls%2Fsrc%2Fget_withdrawal_credentials.rs)%0A%20%20%20%20%20%20-%20%5Bzeroize_hash%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Flighthouse%2Fblob%2Fstable%2Fcrypto%2Fbls%2Fsrc%2Fzeroize_hash.rs)%0A-%20%5Bmerkle_proof%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Flighthouse%2Ftree%2Fstable%2Fconsensus%2Fmerkle_proof)%0A-%20%5Btree_hash%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Flighthouse%2Ftree%2Fstable%2Fconsensus%2Ftree_hash)%0A-%20%5Btypes%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Flighthouse%2Ftree%2Fstable%2Fconsensus%2Ftypes%2Fsrc)%3A%20Implements%20Ethereum%202.0%20types%20including%20but%20not%20limited%20to%0A%20%20-%20%5Battestation%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Flighthouse%2Fblob%2Fstable%2Fconsensus%2Ftypes%2Fsrc%2Fattestation.rs)%0A%20%20-%20%5Bbeacon_block%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Flighthouse%2Fblob%2Fstable%2Fconsensus%2Ftypes%2Fsrc%2Fbeacon_block.rs)%0A%20%20-%20%5Bbeacon_committee%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Flighthouse%2Fblob%2Fstable%2Fconsensus%2Ftypes%2Fsrc%2Fbeacon_committee.rs)%0A%20%20-%20%5Bbeacon_state%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Flighthouse%2Fblob%2Fstable%2Fconsensus%2Ftypes%2Fsrc%2Fbeacon_state.rs)%0A%20%20-%20%5Bbuilder_bid%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Flighthouse%2Fblob%2Fstable%2Fconsensus%2Ftypes%2Fsrc%2Fbuilder_bid.rs)%0A%20%20-%20%5Bchain_spec%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Flighthouse%2Fblob%2Fstable%2Fconsensus%2Ftypes%2Fsrc%2Fchain_spec.rs)%0A%20%20-%20%5Bcheckpoint%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Flighthouse%2Fblob%2Fstable%2Fconsensus%2Ftypes%2Fsrc%2Fcheckpoint.rs)%0A%20%20-%20%5Bcontribution_and_proof%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Flighthouse%2Fblob%2Fstable%2Fconsensus%2Ftypes%2Fsrc%2Fcontribution_and_proof.rs)%3A%20A%20Validators%20aggregate%20sync%20committee%20contribution%20and%20selection%20proof.%0A%20%20-%20%5Bdeposit%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Flighthouse%2Fblob%2Fstable%2Fconsensus%2Ftypes%2Fsrc%2Fdeposit.rs)%3A%20A%20deposit%20to%20potentially%20become%20a%20beacon%20chain%20validator.%0A%20%20-%20%5Benr_fork_id%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Flighthouse%2Fblob%2Fstable%2Fconsensus%2Ftypes%2Fsrc%2Fenr_fork_id.rs)%3A%20Specifies%20a%20fork%20which%20allows%20nodes%20to%20identify%20each%20other%20on%20the%20network.%20This%20fork%20is%20used%20in%20a%20nodes%20local%20ENR.%0A%20%20-%20%5Beth_spec%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Flighthouse%2Fblob%2Fstable%2Fconsensus%2Ftypes%2Fsrc%2Feth_spec.rs)%3A%20Ethereum%20Foundation%20specifications.%0A%20%20-%20%5Bexecution_block_hash%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Flighthouse%2Fblob%2Fstable%2Fconsensus%2Ftypes%2Fsrc%2Fexecution_block_hash.rs)%0A%20%20-%20%5Bexecution_payload%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Flighthouse%2Fblob%2Fstable%2Fconsensus%2Ftypes%2Fsrc%2Fexecution_payload.rs)%0A%20%20-%20%5Bfork%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Flighthouse%2Fblob%2Fstable%2Fconsensus%2Ftypes%2Fsrc%2Ffork.rs)%3A%20Specifies%20a%20fork%20of%20the%20%60BeaconChain%60%2C%20to%20prevent%20replay%20attacks.%0A%20%20-%20%5Bfree_attestation%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Flighthouse%2Fblob%2Fstable%2Fconsensus%2Ftypes%2Fsrc%2Ffree_attestation.rs)%3A%20Note%3A%20this%20object%20does%20not%20actually%20exist%20in%20the%20spec.%20We%20use%20it%20for%20managing%20attestations%20that%20have%20not%20been%20aggregated.%0A%20%20-%20%5Bpayload%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Flighthouse%2Fblob%2Fstable%2Fconsensus%2Ftypes%2Fsrc%2Fpayload.rs)%0A%20%20-%20%5Bsigned_aggregate_and_proof%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Flighthouse%2Fblob%2Fstable%2Fconsensus%2Ftypes%2Fsrc%2Fsigned_aggregate_and_proof.rs)%3A%20A%20Validators%20signed%20aggregate%20proof%20to%20publish%20on%20the%20%60beacon_aggregate_and_proof%60%20gossipsub%20topic.%0A%20%20-%20%5Bsigned_beacon_block%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Flighthouse%2Fblob%2Fstable%2Fconsensus%2Ftypes%2Fsrc%2Fsigned_beacon_block.rs)%3A%20A%20%60BeaconBlock%60%20and%20a%20signature%20from%20its%20proposer.%0A%20%20-%20%5Bslot_data%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Flighthouse%2Fblob%2Fstable%2Fconsensus%2Ftypes%2Fsrc%2Fslot_data.rs)%3A%20A%20trait%20providing%20a%20%60Slot%60%20getter%20for%20messages%20that%20are%20related%20to%20a%20single%20slot.%20Useful%20in%20making%20parts%20of%20attestation%20and%20sync%20committee%20processing%20generic.%0A%20%20-%20%5Bslot_epoch%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Flighthouse%2Fblob%2Fstable%2Fconsensus%2Ftypes%2Fsrc%2Fslot_epoch.rs)%3A%20The%20%60Slot%60%20and%20%60Epoch%60%20types%20are%20defined%20as%20new%20types%20over%20u64%20to%20enforce%20type-safety%20between%20the%20two%20types.%20Note%3A%20Time%20on%20Ethereum%202.0%20Proof%20of%20Stake%20is%20divided%20into%20slots%20and%20epochs.%20One%20slot%20is%2012%20seconds.%20One%20epoch%20is%206.4%20minutes%2C%20consisting%20of%2032%20slots.%20One%20block%20can%20be%20created%20for%20each%20slot.%0A%20%20-%20%5Bsync_aggregate%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Flighthouse%2Fblob%2Fstable%2Fconsensus%2Ftypes%2Fsrc%2Fsync_aggregate.rs)%3A%20Create%20a%20%60SyncAggregate%60%20from%20a%20slice%20of%20%60SyncCommitteeContribution%60s.%20Equivalent%20to%20%60process_sync_committee_contributions%60%20from%20the%20spec.%0A%20%20-%20%5Bsync_committee%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Flighthouse%2Fblob%2Fstable%2Fconsensus%2Ftypes%2Fsrc%2Fsync_committee.rs)%0A%20%20-%20%5Btree_hash_impls%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Flighthouse%2Fblob%2Fstable%2Fconsensus%2Ftypes%2Fsrc%2Ftree_hash_impls.rs)%3A%20contains%20custom%20implementations%20of%20%60CachedTreeHash%60%20for%20ETH2-specific%20types.%20It%20makes%20some%20assumptions%20about%20the%20layouts%20and%20update%20patterns%20of%20other%20structs%20in%20this%20crate%2C%20and%20should%20be%20updated%20carefully%20whenever%20those%20structs%20are%20changed.%0A%20%20-%20%5Bvalidator%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Flighthouse%2Fblob%2Fstable%2Fconsensus%2Ftypes%2Fsrc%2Fvalidator.rs)%3A%20Information%20about%20a%20%60BeaconChain%60%20validator.%0A%0ASome%20Smart%20Contracts%20deployed%20on%20Ethereum%0A%0A-%20%5Bnearprover%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Ftree%2Fmaster%2Fcontracts%2Feth%2Fnearprover)%0A%20%20-%20%5BProofDecoder.sol%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Fblob%2Fmaster%2Fcontracts%2Feth%2Fnearprover%2Fcontracts%2FProofDecoder.sol)%0A%20%20-%20%5BNearProver.sol%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Fblob%2Fmaster%2Fcontracts%2Feth%2Fnearprover%2Fcontracts%2FNearProver.sol)%0A-%20%5Bnearbridge%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Ftree%2Fmaster%2Fcontracts%2Feth%2Fnearbridge%2Fcontracts)%0A%20%20-%20%5BNearDecoder.sol%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Fblob%2Fmaster%2Fcontracts%2Feth%2Fnearbridge%2Fcontracts%2FNearDecoder.sol)%3A%20handles%20decoing%20of%20Public%20Keys%2C%20Signatures%2C%20BlockProducers%20and%20LightClientBlocks%20using%20%60Borsh.sol%60%0A%20%20-%20%5BUtils.sol%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Fblob%2Fmaster%2Fcontracts%2Feth%2Fnearbridge%2Fcontracts%2FUtils.sol)%3A%20handles%20reading%20and%20writing%20to%20memory%2C%20memoryToBytes%20and%20has%20functions%20such%20as%20%60keccak256Raw%60%20and%20%60sha256Raw%60%0A%20%20-%20%5BBorsh.sol%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Fblob%2Fmaster%2Fcontracts%2Feth%2Fnearbridge%2Fcontracts%2FBorsh.sol)%3A%20%5BBorsh%5D(https%3A%2F%2Fborsh.io%2F)%3A%20Binary%20Object%20Representation%20Serializer%20for%20Hashing.%20It%20is%20meant%20to%20be%20used%20in%20security-critical%20projects%20as%20it%20prioritizes%20consistency%2C%20safety%2C%20speed%3B%20and%20comes%20with%20a%20strict%20specification.%0A%20%20-%20%5BEd25519.sol%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Fblob%2Fmaster%2Fcontracts%2Feth%2Fnearbridge%2Fcontracts%2FEd25519.sol)%3A%20%5BEd25519%5D(https%3A%2F%2Fed25519.cr.yp.to%2F)%20high-speed%20high-security%20signatures%0A%0ASome%20Primitives%20from%20NEAR%20Rainbow%20Bridge%0A%0A-%20%5Beth-types%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Ftree%2Fmaster%2Fcontracts%2Fnear%2Feth-types)%3A%20utilities%20to%20serialize%20and%20encode%20eth2%20types%20using%20%5Bborsh%5D(https%3A%2F%2Fborsh.io%2F)%20and%20%5Brlp%5D(https%3A%2F%2Fethereum.org%2Fen%2Fdevelopers%2Fdocs%2Fdata-structures-and-encoding%2Frlp).%0A-%20%5Beth2-utility%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Ftree%2Fmaster%2Fcontracts%2Fnear%2Feth2-utility)%3A%20Utility%20functions%20used%20for%20Ethereum%202.0%20Consensus.%20Functions%20include%0A%20%20-%20%60fn%20from_str(input%3A%20%26str)%20-%3E%20Result%3CNetwork%2C%20Self%3A%3AErr%3E%60%0A%20%20-%20%60pub%20fn%20new(network%3A%20%26Network)%20-%3E%20Self%60%0A%20%20-%20%60pub%20fn%20compute_fork_version(%26self%2C%20epoch%3A%20Epoch)%20-%3E%20Option%3CForkVersion%3E%60%0A%20%20-%20%60pub%20fn%20compute_fork_version_by_slot(%26self%2C%20slot%3A%20Slot)%20-%3E%20Option%3CForkVersion%3E%60%0A%20%20-%20%60pub%20const%20fn%20compute_epoch_at_slot(slot%3A%20Slot)%20-%3E%20u64%60%0A%20%20-%20%60pub%20const%20fn%20compute_sync_committee_period(slot%3A%20Slot)%20-%3E%20u64%60%0A%20%20-%20%60pub%20const%20fn%20floorlog2(x%3A%20u32)%20-%3E%20u32%60%3A%20Compute%20floor%20of%20log2%20of%20a%20u32.%0A%20%20-%20%60pub%20const%20fn%20get_subtree_index(generalized_index%3A%20u32)%20-%3E%20u32%60%0A%20%20-%20%60pub%20fn%20compute_domain(domain_constant%3A%20DomainType%2C%20fork_version%3A%20ForkVersion%2C%20genesis_validators_root%3A%20H256%2C)%20-%3E%20H256%60%0A%20%20-%20%60pub%20fn%20compute_signing_root(object_root%3A%20H256%2C%20domain%3A%20H256)%20-%3E%20H256%60%0A%20%20-%20%60pub%20fn%20get_participant_pubkeys(public_keys%3A%20%26%5BPublicKeyBytes%5D%2C%20sync_committee_bits%3A%20%26BitVec%3Cu8%2C%20Lsb0%3E%2C)%20-%3E%20Vec%3CPublicKeyBytes%3E%60%0A%20%20-%20%60pub%20fn%20convert_branch(branch%3A%20%26%5BH256%5D)%20-%3E%20Vec%3Cethereum_types%3A%3AH256%3E%60%0A%20%20-%20%60pub%20fn%20validate_beacon_block_header_update(header_update%3A%20%26HeaderUpdate)%20-%3E%20bool%60%0A%20%20-%20%60pub%20fn%20calculate_min_storage_balance_for_submitter(max_submitted_blocks_by_account%3A%20u32%2C)%20-%3E%20Balance%60%0A%0A%23%23%23%20Near%20Rainbow%20Bridge%20Near%20Light%20Client%20Walkthrough%0A%0AThe%20following%20is%20a%20walkthrough%20of%20how%20a%20transaction%20executed%20on%20NEAR%20is%20propogated%20to%20Ethereum's%20%5Bnearbridge%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Ftree%2Fmaster%2Fcontracts%2Feth%2Fnearbridge).%20See%20%5Bnearbridge%20Cryptographic%20Primitives%5D(%23nearbridge-cryptographic-primitives)%20for%20more%20information%20on%20the%20cryptography%20used.%0A%0A**NearOnEthClient%20Overview**%0A%0A_The%20following%20is%20an%20excerpt%20from%20a%20blog%20by%20near%20on%20%5Beth-near-rainbow-bridge%5D(https%3A%2F%2Fnear.org%2Fblog%2Feth-near-rainbow-bridge%2F)_%0A%0A%3E%20NearOnEthClient%20is%20an%20implementation%20of%20the%20NEAR%20light%20client%20in%20Solidity%20as%20an%20Ethereum%20contract.%20Unlike%20EthOnNearClient%20it%20does%20not%20need%20to%20verify%20every%20single%20NEAR%20header%20and%20can%20skip%20most%20of%20them%20as%20long%20as%20it%20verifies%20at%20least%20one%20header%20per%20NEAR%20epoch%2C%20which%20is%20about%2043k%20blocks%20and%20lasts%20about%20half%20a%20day.%20As%20a%20result%2C%20NearOnEthClient%20can%20memorize%20hashes%20of%20all%20submitted%20NEAR%20headers%20in%20history%2C%20so%20if%20you%20are%20making%20a%20transfer%20from%20NEAR%20to%20Ethereum%20and%20it%20gets%20interrupted%20you%20don%E2%80%99t%20need%20to%20worry%20and%20you%20can%20resume%20it%20any%20time%2C%20even%20months%20later.%20Another%20useful%20property%20of%20the%20NEAR%20light%20client%20is%20that%20every%20NEAR%20header%20contains%20a%20root%20of%20the%20merkle%20tree%20computed%20from%20all%20headers%20before%20it.%20As%20a%20result%2C%20if%20you%20have%20one%20NEAR%20header%20you%20can%20efficiently%20verify%20any%20event%20that%20happened%20in%20any%20header%20before%20it.%0A%3E%0A%3E%20Another%20useful%20property%20of%20the%20NEAR%20light%20client%20is%20that%20it%20only%20accepts%20final%20blocks%2C%20and%20final%20blocks%20cannot%20leave%20the%20canonical%20chain%20in%20NEAR.%20This%20means%20that%20NearOnEthClient%20does%20not%20need%20to%20worry%20about%20forks.%0A%3E%0A%3E%20However%2C%20unfortunately%2C%20NEAR%20uses%20%5BEd25519%5D(https%3A%2F%2Fgithub.com%2Fethereum%2FEIPs%2Fblob%2Fmaster%2FEIPS%2Feip-665.mdx)%20to%20sign%20messages%20of%20the%20validators%20who%20approve%20the%20blocks%2C%20and%20this%20signature%20is%20not%20available%20as%20an%20EVM%20precompile.%20It%20makes%20verification%20of%20all%20signatures%20of%20a%20single%20NEAR%20header%20prohibitively%20expensive.%20So%20technically%2C%20we%20cannot%20verify%20one%20NEAR%20header%20within%20one%20contract%20call%20to%20NearOnEthClient.%20Therefore%20we%20adopt%20the%20%5Boptimistic%20approach%5D(https%3A%2F%2Fmedium.com%2F%40deaneigenmann%2Foptimistic-contracts-fb75efa7ca84)%20where%20NearOnEthClient%20verifies%20everything%20in%20the%20NEAR%20header%20except%20the%20signatures.%20Then%20anyone%20can%20challenge%20a%20signature%20in%20a%20submitted%20header%20within%20a%204-hour%20challenge%20window.%20The%20challenge%20requires%20verification%20of%20a%20single%20Ed25519%20signature%20which%20would%20cost%20about%20500k%20Ethereum%20gas%20(expensive%2C%20but%20possible).%20The%20user%20submitting%20the%20NEAR%20header%20would%20have%20to%20post%20a%20bond%20in%20Ethereum%20tokens%2C%20and%20a%20successful%20challenge%20would%20burn%20half%20of%20the%20bond%20and%20return%20the%20other%20half%20to%20the%20challenger.%20The%20bond%20should%20be%20large%20enough%20to%20pay%20for%20the%20gas%20even%20if%20the%20gas%20price%20increases%20exponentially%20during%20the%204%20hours.%20For%20instance%2C%20a%2020%20ETH%20bond%20would%20cover%20gas%20price%20hikes%20up%20to%2020000%20Gwei.%20This%20optimistic%20approach%20requires%20having%20a%20watchdog%20service%20that%20monitors%20submitted%20NEAR%20headers%20and%20challenges%20any%20headers%20with%20invalid%20signatures.%20For%20added%20security%2C%20independent%20users%20can%20run%20several%20watchdog%20services.%0A%3E%0A%3E%20Once%20EIP665%20is%20accepted%2C%20Ethereum%20will%20have%20the%20Ed25519%20signature%20available%20as%20an%20EVM%20precompile.%20This%20will%20make%20watchdog%20services%20and%20the%204-hour%20challenge%20window%20unnecessary.%0A%3E%0A%3E%20At%20its%20bare%20minimum%2C%20Rainbow%20Bridge%20consists%20of%20EthOnNearClient%20and%20NearOnEthClient%20contracts%2C%20and%20three%20services%3A%20Eth2NearRelay%2C%20Near2EthRelay%2C%20and%20the%20Watchdog.%20We%20might%20argue%20that%20this%20already%20constitutes%20a%20bridge%20since%20we%20have%20established%20a%20cryptographic%20link%20between%20two%20blockchains%2C%20but%20practically%20speaking%20it%20requires%20a%20large%20portion%20of%20additional%20code%20to%20make%20application%20developers%20even%20consider%20using%20the%20Rainbow%20Bridge%20for%20their%20applications.%0A%0A_The%20following%20information%20on%20sending%20assets%20from%20NEAR%20back%20to%20Ethereum%20is%20an%20excerpt%20from%20%5Bhttps%3A%2F%2Fnear.org%2Fbridge%2F%5D(https%3A%2F%2Fnear.org%2Fbridge%2F)._%0A%0A%3E%20Sending%20assets%20from%20NEAR%20back%20to%20Ethereum%20currently%20takes%20a%20maximum%20of%20sixteen%20hours%20(due%20to%20Ethereum%20finality%20times)%20and%20costs%20around%20%2460%20(due%20to%20ETH%20gas%20costs%20and%20at%20current%20ETH%20price).%20These%20costs%20and%20speeds%20will%20improve%20in%20the%20near%20future.%0A%0A%23%23%23%23%20NEAR%20to%20Ethereum%20block%20propagation%20costing%0A%0AThe%20following%20links%20provide%20the%20production%20Ethereum%20addresses%20and%20blockexplorer%20views%20for%20NearBridge.sol%20and%20the%20ERC20%20Locker%0A%0A-%20%5BEthereum%20Mainnet%20Bridge%20addresses%20and%20parameters%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge-client%2Ftree%2Fmain%2Fpackages%2Fclient%23ethereum-mainnet-bridge-addresses-and-parameters)%0A-%20%5BNearBridge.sol%20on%20Ethereum%20Block%20Explorer%5D(https%3A%2F%2Fetherscan.io%2Faddress%2F0x3fefc5a4b1c02f21cbc8d3613643ba0635b9a873)%0A%20%20-%20%5BSample%20%60addLightClientBlock(bytes%20data)%60%20function%20call%5D(https%3A%2F%2Fetherscan.io%2Ftx%2F0xa0fbf1405747dbc1c1bda1227e46bc7c5feac36c0eeaab051022cfdb268e60cc%2Fadvanced)%0A-%20%5BNEAR%20ERC20Locker%20on%20Ethereum%20Block%20Explorer%5D(https%3A%2F%2Fetherscan.io%2Faddress%2F0x23ddd3e3692d1861ed57ede224608875809e127f%23code)%0A%0AAt%20time%20of%20writing%20(Oct%2026th%2C%202022).%0A%0A-%20NEAR%20Light%20Client%20Blocks%20are%20propogated%20every%20%604%20hours%60%0A-%20Sample%20Transaction%20fee%20%600.061600109576901025%20Ether%20(%2496.56)%60%0A-%20Daily%20Transaction%20fees%20cost%20approximately%20%60%24600%60%0A-%20_Note%3A%20Infrastructure%20costs%20for%20running%20relayer%2C%20watchdog%2C%20etc%20are%20not%20included._%0A%0A%23%23%23%23%20NEAR%20to%20Ethereum%20block%20propagation%20flow%0A%0A%5BNEAR%20Light%20Client%20Documentation%5D(https%3A%2F%2Fnomicon.io%2FChainSpec%2FLightClient)%20gives%20an%20overview%20of%20how%20light%20clients%20work.%20At%20a%20high%20level%20the%20light%20client%20needs%20to%20fetch%20at%20least%20one%20block%20per%20%5Bepoch%5D(https%3A%2F%2Fdocs.near.org%2Fconcepts%2Fbasics%2Fepoch)%20i.e.%20every%2042%2C200%20blocks%20or%20approxmiately%2012%20hours.%20Also%20Having%20the%20LightClientBlockView%20for%20block%20B%20is%20sufficient%20to%20be%20able%20to%20verify%20any%20statement%20about%20state%20or%20outcomes%20in%20any%20block%20in%20the%20ancestry%20of%20B%20(including%20B%20itself).%0A%0AThe%20current%20scripts%20and%20codebase%20indicates%20that%20a%20block%20would%20be%20fetched%20every%2030%20seconds%20with%20a%20max%20delay%20of%2010%20seconds.%20It%20feels%20that%20this%20would%20be%20expensive%20to%20update%20Ethereum%20so%20frequently.%20%5BNEAR's%20bridge%20documentation%5D(https%3A%2F%2Fnear.org%2Fbridge%2F)%20states%20_Sending%20assets%20from%20NEAR%20back%20to%20Ethereum%20currently%20takes%20a%20maximum%20of%20sixteen%20hours%20(due%20to%20Ethereum%20finality%20times)_.%20This%20seems%20to%20align%20with%20sending%20light%20client%20updates%20once%20per%20NEAR%20epoch.%20The%20block%20fetch%20period%20is%20configurable%20in%20the%20relayer.%0A%0A%3E%20The%20RPC%20returns%20the%20LightClientBlock%20for%20the%20block%20as%20far%20into%20the%20future%20from%20the%20last%20known%20hash%20as%20possible%20for%20the%20light%20client%20to%20still%20accept%20it.%20Specifically%2C%20it%20either%20returns%20the%20last%20final%20block%20of%20the%20next%20epoch%2C%20or%20the%20last%20final%20known%20block.%20If%20there's%20no%20newer%20final%20block%20than%20the%20one%20the%20light%20client%20knows%20about%2C%20the%20RPC%20returns%20an%20empty%20result.%0A%3E%0A%3E%20A%20standalone%20light%20client%20would%20bootstrap%20by%20requesting%20next%20blocks%20until%20it%20receives%20an%20empty%20result%2C%20and%20then%20periodically%20request%20the%20next%20light%20client%20block.%0A%3E%0A%3E%20A%20smart%20contract-based%20light%20client%20that%20enables%20a%20bridge%20to%20NEAR%20on%20a%20different%20blockchain%20naturally%20cannot%20request%20blocks%20itself.%20Instead%20external%20oracles%20query%20the%20next%20light%20client%20block%20from%20one%20of%20the%20full%20nodes%2C%20and%20submit%20it%20to%20the%20light%20client%20smart%20contract.%20The%20smart%20contract-based%20light%20client%20performs%20the%20same%20checks%20described%20above%2C%20so%20the%20oracle%20doesn't%20need%20to%20be%20trusted.%0A%0ABlock%20Submitters%20stake%20ETH%20to%20be%20allowed%20to%20submit%20blocks%20which%20get's%20slashed%20if%20the%20watchdog%20identifies%20blocks%20with%20invalid%20signatures.%0A%0A_Note%3A%20Have%20not%20identified%20how%20the%20block%20submitters%20are%20rewarded%20for%20submitting%20blocks.%20Currently%20have%20only%20identified%20them%20locking%20ETH%20to%20be%20able%20to%20submit%20blocks%20and%20being%20slashed%20if%20they%20submit%20blocks%20with%20invalid%20signatures._%0A%0A-%20%5BLight%20Clients%20are%20deployed%20on%20Ethereum%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Fblob%2Fmaster%2Fcli%2Findex.js%23L518)%20via%20the%20CLI%20using%20%5Beth-contracts.js%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Fblob%2Fmaster%2Fcli%2Finit%2Feth-contracts.js)%0A%20%20-%20%5Binit-eth-ed25519%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Fblob%2Fmaster%2Fcli%2Findex.js%23L505)%3A%20Deploys%20%60Ed25519.sol%60%20see%20more%20information%20under%20%5Bnearbridge%20Cryptographic%20Primitives%5D(%23nearbridge-cryptographic-primitives)%0A%20%20-%20%5Binit-eth-client%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Fblob%2Fmaster%2Fcli%2Findex.js%23L520)%3A%20Deploys%20%60NearBridge.sol%60%20see%20more%20information%20under%20%5BNEAR%20to%20Ethereum%20block%20propagation%20components%5D(%23near-to-ethereum-block-propagation-components).%20It%20takes%20the%20following%20arguments%0A%20%20%20%20-%20%60ethEd25519Address%60%3A%20The%20address%20of%20the%20ECDSA%20signature%20checker%20using%20Ed25519%20curve%20(see%20%5Bhere%5D(https%3A%2F%2Fnbeguier.medium.com%2Fa-real-world-comparison-of-the-ssh-key-algorithms-b26b0b31bfd9))%0A%20%20%20%20-%20%60lockEthAmount%60%3A%20The%20amount%20that%20%60BLOCK_PRODUCERS%60%20need%20to%20deposit%20(in%20wei)to%20be%20able%20to%20provide%20blocks.%20This%20amount%20will%20be%20slashed%20if%20the%20block%20is%20challenged%20and%20proven%20not%20to%20have%20a%20valid%20signature.%20Default%20value%20is%20100000000000000000000%20WEI%20%3D%20100%20ETH.%0A%20%20%20%20-%20%60lockDuration%60%20%3A%2030%20seconds%0A%20%20%20%20-%20%60replaceDuration%60%3A%2060%20seconds%20it%20is%20passed%20in%20nanoseconds%2C%20because%20it%20is%20a%20difference%20between%20NEAR%20timestamps.%0A%20%20%20%20-%20%60ethAdminAddress%60%3A%20Bridge%20Administrator%20Address%0A%20%20%20%20-%20%600%60%20%3A%20Indicates%20nothing%20is%20paused%20%60UNPAUSE_ALL%60%0A%20%20-%20%5Binit-eth-prover%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Fblob%2Fmaster%2Fcli%2Findex.js%23L538)%3A%20Deploys%20%60NearProver.sol%60%20see%20more%20information%20under%20%5BNEAR%20to%20Ethereum%20block%20propagation%20components%5D(%23near-to-ethereum-block-propagation-components).%20It%20takes%20the%20following%20arguments%0A%20%20%20%20-%20%60ethClientAddress%60%3A%20Interface%20to%20%60NearBridge.sol%60%0A%20%20%20%20-%20%60ethAdminAddress%60%3A%20Administrator%20address%0A%20%20%20%20-%20%600%60%3A%20paused%20indicator%20defaults%20to%20%60UNPAUSE_ALL%20%3D%200%60%0A-%20%5BRelayer%20is%20Started%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Fblob%2Fmaster%2Fcli%2Fcommands%2Fstart%2Fnear2eth-relay.js)%0A%20%20-%20Relayer%20is%20started%20using%20the%20following%20command%0A%0A%20%20%20%20%20%20%20%20%60%60%60%0A%20%20%20%20%20%20%20%20cli%2Findex.js%20start%20near2eth-relay%20%5C%0A%20%20%20%20%20%20%20%20--eth-node-url%20http%3A%2F%2F127.0.0.1%3A8545%2F%20%5C%0A%20%20%20%20%20%20%20%20--eth-master-sk%200xac0974bec39a17e36ba4a6b4d238ff944bacb478cbed5efcae784d7bf4f2ff80%20%5C%0A%20%20%20%20%20%20%20%20--near-node-url%20https%3A%2F%2Frpc.testnet.near.org%2F%20%5C%0A%20%20%20%20%20%20%20%20--near-network-id%20testnet%20%5C%0A%20%20%20%20%20%20%20%20--eth-client-address%200xe7f1725e7734ce288f8367e1bb143e90bb3f0512%20%5C%0A%20%20%20%20%20%20%20%20--eth-use-eip-1559%20true%20%5C%0A%20%20%20%20%20%20%20%20--near2eth-relay-max-delay%2010%20%5C%0A%20%20%20%20%20%20%20%20--near2eth-relay-block-select-duration%2030%20%5C%0A%20%20%20%20%20%20%20%20--near2eth-relay-after-submit-delay-ms%201000%20%5C%0A%20%20%20%20%20%20%20%20--log-verbose%20true%20%5C%0A%20%20%20%20%20%20%20%20--daemon%20false%0A%20%20%20%20%20%20%20%20%60%60%60%0A%0A-%20%5BRelayer%20Logic%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Fblob%2Fmaster%2Fnear2eth%2Fnear2eth-block-relay%2Findex.js)%0A%20%20-%20Loops%20%60while%20(true)%60%0A%20%20%20%20-%20Get%20the%20bridge%20state%20(including%20%60currentHeight%60%2C%20%60nextTimestamp%60%2C%20%60nextValidAt%60%2C%20%60numBlockProducers%60%20)%0A%20%20%20%20-%20Get%20the%20%60currentBlockHash%60%20the%20hash%20of%20the%20current%20untrursted%20block%20based%20on%20%60lastValidAt%60%0A%20%20%20%20-%20Gets%20the%20%60lastBlock%60%20by%20calling%20the%20NEAR%20rpc%20%60next_light_client_block%60%20using%20the%20hash%20of%20last%20untrusted%20block%20%60bs58.encode(currentBlockHash)%60%0A%20%20%20%20-%20Get's%20the%20%60replaceDuration%60%20by%20%60clientContract.methods.replaceDuration().call()%60%20this%20will%20be%2060%20seconds%20if%20we%20deployed%20%60NearBridge.sol%60%20with%20the%20default%20values%20above%0A%20%20%20%20-%20Sets%20%60nextValidAt%60%20from%20the%20bridge%20state%20%60web3.utils.toBN(bridgeState.nextValidAt)%60%0A%20%20%20%20-%20Sets%20%60replaceDelay%60%20to%200%20then%20updates%20it%20to%20the%20%60nextTimestamp%60%20%2B%20%60replaceDuration%60%20-%20%60lastBlock.inner_lite.timestamp%60%20i.e.%20The%20new%20block%20has%20to%20be%20at%20least%2060%20seconds%20after%20the%20current%20block%20stored%20on%20the%20light%20client.%0A%20%20%20%20-%20Checks%20the%20height%20of%20the%20%60currentHeight%60%20of%20the%20bridge%20is%20less%20than%20the%20%60lastblock%60%20from%20the%20near%20light%20client%20%60(bridgeState.currentHeight%20%3C%20lastBlock.inner_lite.height)%60%0A%20%20%20%20-%20Serializes%20the%20%60lastBlock%60%20using%20Borsh%20and%20check%20that%20the%20block%20is%20suitable%0A%20%20%20%20-%20Checks%20that%20the%20%60replaceDelay%60%20has%20been%20met%2C%20if%20not%20sleeps%20until%20it%20has%0A%20%20%20%20-%20Checks%20that%20the%20Master%20Account%20(the%20one%20submitting%20the%20block)%20has%20enough%20locked%20ETH%20(if%20not%20tries%20to%20deposit%20more).%20So%20that%20it%20can%20be%20slashed%20if%20the%20block%20proposed%20is%20invalid.%0A%20%20%20%20-%20Adds%20the%20light%20client%20block%20%60await%20clientContract.methods.addLightClientBlock(nextBlockSelection.borshBlock).send%60%0A%20%20%20%20%20%20-%20Checks%20%60NearBridge.sol%60%20(the%20light%20client)%20has%20been%20initialized%0A%20%20%20%20%20%20-%20Checks%20%60balanceOf%5Bmsg.sender%5D%20%3E%3D%20lockEthAmount%60%20that%20the%20sender%20has%20locked%20enough%20Eth%20to%20allow%20them%20to%20submit%20blocks%0A%20%20%20%20%20%20-%20Decodes%20the%20nearBlock%20using%20%60Borsh.from(data)%60%20and%20%60borsh.decodeLightClientBlock()%60%0A%20%20%20%20%20%20-%20Commis%20the%20previous%20block%2C%20or%20make%20sure%20that%20it%20is%20OK%20to%20replace%20it%20using%0A%20%20%20%20%20%20%20%20-%20%60lastValidAt%20%3D%200%3B%60%0A%20%20%20%20%20%20%20%20-%20%60blockHashes_%5BcurHeight%5D%20%3D%20untrustedHash%3B%60%0A%20%20%20%20%20%20%20%20-%20%60blockMerkleRoots_%5BcurHeight%5D%20%3D%20untrustedMerkleRoot%3B%60%0A%20%20%20%20%20%20-%20Check%20that%20the%20new%20block's%20height%20is%20greater%20than%20the%20current%20one's.%20%60nearBlock.inner_lite.height%20%3E%20curHeight%60%0A%20%20%20%20%20%20-%20Check%20that%20the%20new%20block%20is%20from%20the%20same%20epoch%20as%20the%20current%20one%2C%20or%20from%20the%20next%20one.%0A%20%20%20%20%20%20-%20Check%20that%20the%20new%20block%20is%20signed%20by%20more%20than%202%2F3%20of%20the%20validators.%0A%20%20%20%20%20%20-%20If%20the%20block%20is%20from%20the%20next%20epoch%2C%20make%20sure%20that%20the%20Block%20producers%20%60next_bps%60%20are%20supplied%20and%20have%20a%20correct%20hash.%0A%20%20%20%20%20%20-%20Add%20the%20Block%20to%20the%20Light%20client%0A%20%20%20%20%20%20%20%20-%20Updates%20untrusted%20information%20to%20this%20block%20including%20%60untrustedHeight%60%2C%20%60untrustedTimestamp%60%2C%20%60untrustedHash%60%2C%20%60untrustedMerkleRoot%60%2C%20%60untrustedNextHash%60%2C%20%60untrustedSignatureSet%60%2C%20%60untrustedNextEpoch%60%0A%20%20%20%20%20%20%20%20-%20If%20%60fromNextEpoch%60%20also%20update%20the%20Block%20Producers%0A%20%20%20%20%20%20%20%20-%20Updates%20the%20%60lastSubmitter%60%20and%20%60lastValidAt%60%0A%20%20%20%20-%20Cleans%20up%20the%20selected%20block%20to%20prevent%20submitting%20the%20same%20block%20again%20%60await%20sleep(afterSubmitDelayMs)%60%0A%20%20%20%20-%20Sets%20the%20HeightGauuges%20to%20the%20correct%20block%20height%0A%20%20%20%20%20%20-%20%60clientHeightGauge.set(Number(BigInt(bridgeState.currentHeight))%60%0A%20%20%20%20%20%20-%20%60chainHeightGauge.set(Number(BigInt(lastBlock.inner_lite.height)))%60%0A%20%20%20%20-%20Sleeps%20for%20delay%20calculated%20from%20the%20maximum%20of%20the%20relayer%20days%20(10%20seconds)%20and%20differnce%20between%20the%20current%20and%20next%20block%20time%20stamps%20and%20%60await%20sleep(1000%20*%20delay)%60%0A%0A%23%23%23%23%20NEAR%20to%20Ethereum%20watchdog%0A%0AThe%20%5Bwatchdog%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Fblob%2Fmaster%2Fnear2eth%2Fwatchdog%2Findex.js)%20runs%20every%2010%20seconds%20and%20validates%20blocks%20on%20%60NearBridge.sol%60%20challenging%20blocks%20with%20incorrect%20signatures.%20_Note%3A%20It%20uses%20%5Bheep-prometheus%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Fblob%2Fmaster%2Futils%2Fhttp-prometheus.js)%20for%20monitoring%20and%20storing%20block%20and%20producer%20information%20using%20%60gauges%60%20and%20%60counters%60._%0A%0A-%20%5Bwatchdog%20is%20started%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Fblob%2Fmaster%2Fcli%2Fcommands%2Fstart%2Fwatchdog.js)%20from%20the%20CLI%0A-%20%5Bwatchdog%20logic%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Fblob%2Fmaster%2Fnear2eth%2Fwatchdog%2Findex.js)%0A%20%20-%20Initializes%20monitoring%20information%20on%20%60Prometheus%60%0A%20%20%20%20-%20%60const%20httpPrometheus%20%3D%20new%20HttpPrometheus(this.metricsPort%2C%20'near_bridge_watchdog_')%60%0A%20%20%20%20-%20%60const%20lastBlockVerified%20%3D%20httpPrometheus.gauge('last_block_verified'%2C%20'last%20block%20that%20was%20already%20verified')%60%0A%20%20%20%20-%20%60const%20totBlockProducers%20%3D%20httpPrometheus.gauge('block_producers'%2C%20'number%20of%20block%20producers%20for%20current%20block')%60%0A%20%20%20%20-%20%60const%20incorrectBlocks%20%3D%20httpPrometheus.counter('incorrect_blocks'%2C%20'number%20of%20incorrect%20blocks%20found')%60%0A%20%20%20%20-%20%60const%20challengesSubmitted%20%3D%20httpPrometheus.counter('challenges_submitted'%2C%20'number%20of%20blocks%20challenged')%60%0A%20%20-%20Loops%20%60while%20(true)%60%0A%20%20%20%20-%20Gets%20the%20%60bridgeState%60%0A%20%20%20%20-%20Loops%20through%20all%20blockProducers%20checking%20their%20signatures%0A%20%20%20%20-%20%60for%20(let%20i%20%3D%200%3B%20i%20%3C%20numBlockProducers%3B%20i%2B%2B)%60%0A%20%20%20%20%20%20-%20Check%20each%20signature%20%60this.clientContract.methods.checkBlockProducerSignatureInHead(i).call()%60%0A%20%20%20%20%20%20-%20If%20invalid%20challenge%20the%20signature%3A%20%60this.clientContract.methods.challenge(this.ethMasterAccount%2C%20i).encodeABI()%60%20calls%20%5Bchallenge%20function%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Fblob%2Fmaster%2Fcontracts%2Feth%2Fnearbridge%2Fcontracts%2FNearBridge.sol%23L93)%0A%20%20%20%20%20%20%20%20-%20%60function%20challenge(address%20payable%20receiver%2C%20uint%20signatureIndex)%20external%20override%20pausable(PAUSED_CHALLENGE)%60%0A%20%20%20%20%20%20%20%20%20%20-%20checks%20block.timestamp%20is%20less%20than%20lastValidAt%20%60block.timestamp%20%3C%20lastValidAt%2C%60%0A%20%20%20%20%20%20%20%20%20%20-%20Check%20if%20the%20signature%20is%20valid%20%60!checkBlockProducerSignatureInHead(signatureIndex)%60%0A%20%20%20%20%20%20%20%20%20%20-%20slashes%20the%20last%20submitter%20%60balanceOf%5BlastSubmitter%5D%20%3D%20balanceOf%5BlastSubmitter%5D%20-%20lockEthAmount%3B%60%0A%20%20%20%20%20%20%20%20%20%20-%20resets%20lastValidAt%20%60lastValidAt%20%3D%200%3B%60%0A%20%20%20%20%20%20%20%20%20%20-%20Refunds%20half%20of%20the%20funds%20to%20the%20watchdog%20account%20%60receiver.call%7Bvalue%3A%20lockEthAmount%20%2F%202%7D(%22%22)%3B%60%0A%20%20%20%20%20%20-%20Sleeps%20for%20watchdog%20Delay%20seconds%20%60await%20sleep(watchdogDelay%20*%201000)%60%0A%0A%23%23%23%23%20NEAR%20to%20Ethereum%20block%20propagation%20components%0A%0A-%20%5Beth2near-relay%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Fblob%2Fmaster%2Fcli%2Fcommands%2Fstart%2Feth2near-relay.js)%3A%20Command%20to%20start%20the%20NEAR%20to%20Ethereum%20relay.%20See%20sample%20invocation%20%5Bhere%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Fblob%2Fmaster%2Fdocs%2Fdevelopment.md%23near2eth-relay)%0A-%20%5Bnear2eth-block-relay%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Ftree%2Fmaster%2Fnear2eth%2Fnear2eth-block-relay)%20is%20written%20in%20javascript%0A%20%20-%20Has%20%5Bdependencies%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Fblob%2Fmaster%2Fnear2eth%2Fnear2eth-block-relay%2Fpackage.json)%20including%20%5Brainbow-bridge-utils%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Ftree%2Fmaster%2Futils)%20see%20%5Bhere%5D(near-rainbow-bridge-utils)%20for%20more%20information.%20It's%20other%20dependencies%20are%20also%20included%20in%20%60rainbow-bridge-utils%60.%0A%20%20%20%20-%20%5Bethereumjs-util%5D(https%3A%2F%2Fwww.npmjs.com%2Fpackage%2Fethereumjs-util)%3A%20A%20collection%20of%20utility%20functions%20for%20Ethereum.%0A%20%20-%20Has%20the%20following%20functions%20and%20classes%0A%20%20%20%20-%20%60class%20Near2EthRelay%60%0A%20%20%20%20%20%20-%20%60async%20initialize%20(%7BnearNodeUrl%2C%20nearNetworkId%2C%20ethNodeUrl%2C%20ethMasterSk%2C%20ethClientArtifactPath%2C%20ethClientAddress%2C%20ethGasMultiplier%2C%20metricsPort%20%7D)%60%0A%20%20%20%20%20%20-%20%60async%20withdraw%20(%7BethGasMultiplier%7D)%60%0A%20%20%20%20%20%20-%20%60async%20runInternal%20(%7BsubmitInvalidBlock%2C%20near2ethRelayMinDelay%2C%20near2ethRelayMaxDelay%2C%20near2ethRelayErrorDelay%2C%20near2ethRelayBlockSelectDuration%2C%20near2ethRelayNextBlockSelectDelayMs%2C%20near2ethRelayAfterSubmitDelayMs%2C%20ethGasMultiplier%2C%20ethUseEip1559%2C%20logVerbose%7D)%60%0A%20%20%20%20%20%20-%20%60run%20(options)%20%7Breturn%20this.runInternal(%7B...options%2C%20submitInvalidBlock%3A%20false%7D)%20%7D%60%0A-%20%5BNearBridge.sol%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Fblob%2Fmaster%2Fcontracts%2Feth%2Fnearbridge%2Fcontracts%2FNearBridge.sol)%3A%20Is%20the%20NEAR%20light%20client%20deployed%20on%20ethereum.%0A%20%20-%20It%20imports%20the%20following%20contracts%20(see%20%5Bnearbridge%20cryptographic%20primitives%5D(%23nearbridge-cryptographic-primitives))%0A%20%20%20%20-%20%60import%20%22.%2FAdminControlled.sol%22%3B%60%0A%20%20%20%20-%20%60import%20%22.%2FINearBridge.sol%22%3B%60%0A%20%20%20%20-%20%60import%20%22.%2FNearDecoder.sol%22%3B%60%0A%20%20%20%20-%20%60import%20%22.%2FEd25519.sol%22%3B%60%0A%20%20-%20It%20provides%20the%20following%20structure%20for%20Bridge%20State.%20If%20there%20is%20currently%20no%20unconfirmed%20block%2C%20the%20last%20three%20fields%20are%20zero.%0A%20%20%20%20-%20%60uint%20currentHeight%3B%60%3A%20Height%20of%20the%20current%20confirmed%20block%0A%20%20%20%20-%20%60uint%20nextTimestamp%3B%60%3A%20Timestamp%20of%20the%20current%20unconfirmed%20block%0A%20%20%20%20-%20%60uint%20nextValidAt%3B%60%3A%20Timestamp%20when%20the%20current%20unconfirmed%20block%20will%20be%20confirmed%0A%20%20%20%20-%20%60uint%20numBlockProducers%3B%60%3A%20Number%20of%20block%20producers%20for%20the%20current%20unconfirmed%20block%0A%20%20-%20It%20provides%20the%20following%20storage%0A%20%20%20%20-%20%60uint%20constant%20MAX_BLOCK_PRODUCERS%20%3D%20100%3B%60%3A%20Assumed%20to%20be%20even%20and%20to%20not%20exceed%20256.%0A%20%20%20%20-%20%60struct%20Epoch%20%7Bbytes32%20epochId%3B%20uint%20numBPs%3B%20bytes%20%5BMAX_BLOCK_PRODUCERS%5D%20keys%3B%20bytes32%5BMAX_BLOCK_PRODUCERS%20%2F%202%5D%20packedStakes%3B%20uint256%20stakeThreshold%3B%7D%60%0A%20%20%20%20-%20%60uint256%20public%20lockEthAmount%3B%60%0A%20%20%20%20-%20%60uint256%20public%20lockDuration%3B%60%3A%20lockDuration%20and%20replaceDuration%20shouldn't%20be%20extremely%20big%2C%20so%20adding%20them%20to%20an%20uint64%20timestamp%20should%20not%20overflow%20uint256.%0A%20%20%20%20-%20%60uint256%20public%20replaceDuration%3B%60%3A%20replaceDuration%20is%20in%20nanoseconds%2C%20because%20it%20is%20a%20difference%20between%20NEAR%20timestamps.%0A%20%20%20%20-%20%60Ed25519%20immutable%20edwards%3B%60%0A%20%20%20%20-%20%60uint256%20public%20lastValidAt%3B%60%3A%20End%20of%20challenge%20period.%20If%20zero%2C%20_%60untrusted%60_%20fields%20and%20%60lastSubmitter%60%20are%20not%20meaningful.%0A%20%20%20%20-%20%60uint64%20curHeight%3B%60%0A%20%20%20%20-%20%60uint64%20untrustedHeight%3B%60%3A%20The%20most%20recently%20added%20block.%20May%20still%20be%20in%20its%20challenge%20period%2C%20so%20should%20not%20be%20trusted.%0A%20%20%20%20-%20%60address%20lastSubmitter%3B%60%3A%20Address%20of%20the%20account%20which%20submitted%20the%20last%20block.%0A%20%20%20%20-%20%60bool%20public%20initialized%3B%60%3A%20Whether%20the%20contract%20was%20initialized.%0A%20%20%20%20-%20%60bool%20untrustedNextEpoch%3B%60%0A%20%20%20%20-%20%60bytes32%20untrustedHash%3B%60%0A%20%20%20%20-%20%60bytes32%20untrustedMerkleRoot%3B%60%0A%20%20%20%20-%20%60bytes32%20untrustedNextHash%3B%60%0A%20%20%20%20-%20%60uint256%20untrustedTimestamp%3B%60%0A%20%20%20%20-%20%60uint256%20untrustedSignatureSet%3B%60%0A%20%20%20%20-%20%60NearDecoder.Signature%5BMAX_BLOCK_PRODUCERS%5D%20untrustedSignatures%3B%60%0A%20%20%20%20-%20%60Epoch%5B3%5D%20epochs%3B%60%0A%20%20%20%20-%20%60uint256%20curEpoch%3B%60%0A%20%20%20%20-%20%60mapping(uint64%20%3D%3E%20bytes32)%20blockHashes_%3B%60%0A%20%20%20%20-%20%60mapping(uint64%20%3D%3E%20bytes32)%20blockMerkleRoots_%3B%60%0A%20%20%20%20-%20%60mapping(address%20%3D%3E%20uint256)%20public%20override%20balanceOf%3B%60%0A%20%20-%20It%20provides%20the%20following%20functions%0A%20%20%20%20-%20%60constructor(Ed25519%20ed%2C%20uint256%20lockEthAmount_%2C%20uint256%20lockDuration_%2C%20uint256%20replaceDuration_%2C%20address%20admin_%2C%20uint256%20pausedFlags_)%60%3A%20_Note%3A%20require%20the%20%60lockDuration%60%20(in%20seconds)%20to%20be%20at%20least%20one%20second%20less%20than%20the%20%60replaceDuration%60%20(in%20nanoseconds)%20%60require(replaceDuration*%20%3E%20lockDuration*%20_%201000000000)%3B%60%0A%20%20%20%20%20%20-%20%60ethEd25519Address%60%3A%20The%20address%20of%20the%20ECDSA%20signature%20checker%20using%20Ed25519%20curve%20(see%20%5Bhere%5D(https%3A%2F%2Fnbeguier.medium.com%2Fa-real-world-comparison-of-the-ssh-key-algorithms-b26b0b31bfd9))%0A%20%20%20%20%20%20-%20%60lockEthAmount%60%3A%20The%20amount%20that%20%60BLOCK_PRODUCERS%60%20need%20to%20deposit%20(in%20wei)to%20be%20able%20to%20provide%20blocks.%20This%20amount%20will%20be%20slashed%20if%20the%20block%20is%20challenged%20and%20proven%20not%20to%20have%20a%20valid%20signature.%20Default%20value%20is%20100000000000000000000%20WEI%20%3D%20100%20ETH.%0A%20%20%20%20%20%20-%20%60lockDuration%60%20%3A%2030%20seconds%0A%20%20%20%20%20%20-%20%60replaceDuration%60%3A%2060%20seconds%20it%20is%20passed%20in%20nanoseconds%2C%20because%20it%20is%20a%20difference%20between%20NEAR%20timestamps.%0A%20%20%20%20%20%20-%20%60ethAdminAddress%60%3A%20Bridge%20Administrator%20Address%0A%20%20%20%20%20%20-%20%600%60%20%3A%20Indicates%20nothing%20is%20paused%20%60UNPAUSE_ALL%60%0A%20%20%20%20-%20%60function%20deposit()%20public%20payable%20override%20pausable(PAUSED_DEPOSIT)%60%0A%20%20%20%20-%20%60function%20withdraw()%20public%20override%20pausable(PAUSED_WITHDRAW)%60%0A%20%20%20%20-%20%60function%20challenge(address%20payable%20receiver%2C%20uint%20signatureIndex)%20external%20override%20pausable(PAUSED_CHALLENGE%60%0A%20%20%20%20-%20%60function%20checkBlockProducerSignatureInHead(uint%20signatureIndex)%20public%20view%20override%20returns%20(bool)%60%0A%20%20%20%20-%20%60function%20initWithValidators(bytes%20memory%20data)%20public%20override%20onlyAdmin%60%3A%20The%20first%20part%20of%20initialization%20--%20setting%20the%20validators%20of%20the%20current%20epoch.%0A%20%20%20%20-%20%60function%20initWithBlock(bytes%20memory%20data)%20public%20override%20onlyAdmin%60%3A%20The%20second%20part%20of%20the%20initialization%20--%20setting%20the%20current%20head.%0A%20%20%20%20-%20%60function%20bridgeState()%20public%20view%20returns%20(BridgeState%20memory%20res)%60%0A%20%20%20%20-%20%60function%20bridgeState()%20public%20view%20returns%20(BridgeState%20memory%20res)%60%0A%20%20%20%20-%20%60function%20addLightClientBlock(bytes%20memory%20data)%20public%20override%20pausable(PAUSED_ADD_BLOCK)%60%0A%20%20%20%20-%20%60function%20setBlockProducers(NearDecoder.BlockProducer%5B%5D%20memory%20src%2C%20Epoch%20storage%20epoch)%20internal%60%0A%20%20%20%20-%20%60function%20blockHashes(uint64%20height)%20public%20view%20override%20pausable(PAUSED_VERIFY)%20returns%20(bytes32%20res)%60%0A%20%20%20%20-%20%60function%20blockMerkleRoots(uint64%20height)%20public%20view%20override%20pausable(PAUSED_VERIFY)%20returns%20(bytes32%20res)%60%0A-%20%5BNearProver.sol%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Fblob%2Fmaster%2Fcontracts%2Feth%2Fnearprover%2Fcontracts%2FNearProver.sol)%3A%20Is%20used%20to%20prove%20the%20validity%20of%20NEAR%20blocks%20on%20Ethereum.%0A%20%20-%20It%20imports%20the%20following%20contracts%20(see%20%5Bnearbridge%20cryptographic%20primitives%5D(%23nearbridge-cryptographic-primitives))%0A%20%20%20%20-%20%60import%20%22rainbow-bridge-sol%2Fnearbridge%2Fcontracts%2FNearDecoder.sol%22%3B%60%0A%20%20%20%20-%20%60import%20%22.%2FProofDecoder.sol%22%3B%60%0A%20%20-%20It%20has%20the%20following%20functions%0A%20%20%20%20-%20%60constructor(INearBridge%20_bridge%2C%20address%20_admin%2C%20uint%20_pausedFlags)%60%0A%20%20%20%20%20%20-%20%60_bridge%60%3A%20Interface%20to%20%60NearBridge.sol%60%0A%20%20%20%20%20%20-%20%60_admin%60%3A%20Administrator%20address%0A%20%20%20%20%20%20-%20%60_pausedFlags%60%3A%20paused%20indicator%20defaults%20to%20%60UNPAUSE_ALL%20%3D%200%60%0A%20%20%20%20-%20%60function%20proveOutcome(bytes%20memory%20proofData%2C%20uint64%20blockHeight)%60%0A%20%20%20%20-%20%60function%20_computeRoot(bytes32%20node%2C%20ProofDecoder.MerklePath%20memory%20proof)%20internal%20pure%20returns%20(bytes32%20hash)%60%0A%0A%23%23%23%23%20NEAR%20Rainbow%20Bridge%20Utils%0A%0A%5Brainbow-bridge-utils%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Ftree%2Fmaster%2Futils)%20provides%20a%20set%20of%20utilities%20for%20the%20near%20rainbow%20bridge%20written%20in%20javascript.%0A%0A-%20It%20has%20the%20following%20%5Bdependencies%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Fblob%2Fmaster%2Futils%2Fpackage.json)%0A%20%20-%20%5Bbn.js%5D(https%3A%2F%2Fwww.npmjs.com%2Fpackage%2Fbn.js)%3A%20Big%20number%20implementation%20in%20pure%20javascript%0A%20%20-%20%5Bbsert%5D(https%3A%2F%2Fwww.npmjs.com%2Fpackage%2Fbsert)%3A%20Minimal%20assert%20with%20type%20checking.%0A%20%20-%20%5Bbs58%5D(https%3A%2F%2Fwww.npmjs.com%2Fpackage%2Fbs58)%3A%20JavaScript%20component%20to%20compute%20base%2058%20encoding%0A%20%20-%20%5Bchange-case%5D(https%3A%2F%2Fwww.npmjs.com%2Fpackage%2Fchange-case)%3A%20Transform%20a%20string%20between%20camelCase%2C%20PascalCase%2C%20Capital%20Case%2C%20snake_case%2C%20param-case%2C%20CONSTANT_CASE%20and%20others.%0A%20%20-%20%5Bconfigstore%5D(https%3A%2F%2Fwww.npmjs.com%2Fpackage%2Fconfigstore)%3A%20Easily%20load%20and%20save%20config%20without%20having%20to%20think%20about%20where%20and%20how%0A%20%20-%20%5Beth-object%5D(https%3A%2F%2Fgithub.com%2Fnear%2Feth-object%23383b6ea68c7050bea4cab6950c1d5a7fa553e72b)%3A%20re-usable%20and%20composable%20objects%20that%20you%20can%20just%20call%20Object.from%20to%20ingest%20new%20data%20to%20serialize%20Ethereum%20Trie%20%2F%20LevelDB%20data%20from%20hex%2C%20buffers%20and%20rpc%20into%20the%20same%20format.%0A%20%20-%20%5Beth-util-lite%5D(https%3A%2F%2Fgithub.com%2Fnear%2Feth-util-lite)%3A%20a%20low-dependency%20utility%20for%20Ethereum.%20It%20replaces%20a%20small%20subset%20of%20the%20ethereumjs-util%20and%20ethjs-util%20APIs.%0A%20%20-%20%5Blodash%5D(https%3A%2F%2Fwww.npmjs.com%2Fpackage%2Flodash)%3A%20A%20set%20of%20utilities%20for%20working%20with%20arrays%2C%20numbers%2C%20objects%2C%20strings%2C%20etc.%0A%20%20-%20%5Bnear-api-js%5D(https%3A%2F%2Fwww.npmjs.com%2Fpackage%2Fnear-api-js)%3A%20JavaScript%20library%20to%20interact%20with%20NEAR%20Protocol%20via%20RPC%20API%0A%20%20-%20%5Bweb3%5D(https%3A%2F%2Fwww.npmjs.com%2Fpackage%2Fweb3)%3A%20Ethereum%20JavaScript%20API%0A-%20It%20provides%20the%20following%20functions%0A%20%20-%20%5Baddress-watcher%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Fblob%2Fmaster%2Futils%2Faddress-watcher.js)%3A%20Watches%20a%20group%20of%20near%20and%20ethereum%20acccounts%20polling%20NEAR%20and%20Ethereum%20every%20second%20and%20updating%20%60nearAccount.balanceGauge%60%2C%20%60nearAccount.stateStorageGauge%60%20and%20%60ethereumAccount.balanceGauge%60.%0A%20%20-%20%5Bborsh%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Fblob%2Fmaster%2Futils%2Fborsh.js)%3A%20provides%20the%20following%20functions%20for%20Binary%20Object%20Representation%20Serializer%20for%20Hashing%20%5Bborsh%5D(https%3A%2F%2Fborsh.io%2F)%0A%20%20%20%20-%20%60function%20serializeField%20(schema%2C%20value%2C%20fieldType%2C%20writer)%60%0A%20%20%20%20-%20%60function%20deserializeField%20(schema%2C%20fieldType%2C%20reader)%60%0A%20%20%20%20-%20%60function%20serialize%20(schema%2C%20fieldType%2C%20obj)%60%3A%20Serialize%20given%20object%20using%20schema%20of%20the%20form%3A%20%60%7B%20class_name%20-%3E%20%5B%20%5Bfield_name%2C%20field_type%5D%2C%20..%20%5D%2C%20..%20%7D%60%0A%20%20%20%20-%20%60class%20BinaryReader%60%3A%20Includes%20utilities%20to%20read%20numbers%2C%20strings%20arrays%20and%20burggers%0A%20%20%20%20-%20%60function%20deserialize%20(schema%2C%20fieldType%2C%20buffer)%60%0A%20%20%20%20-%20%60const%20signAndSendTransactionAsync%20%3D%20async%20(accessKey%2C%20account%2C%20receiverId%2Cactions)%20%3D%3E%60%0A%20%20%20%20-%20%60const%20txnStatus%20%3D%20async%20(account%2C%20txHash%2C%20retries%20%3D%20RETRY_TX_STATUS%2C%20wait%20%3D%201000)%20%3D%3E%60%0A%20%20%20%20-%20%60function%20getBorshTransactionLastResult%20(txResult)%60%0A%20%20%20%20-%20%60class%20BorshContract%20%7B%60%0A%20%20%20%20%20%20-%20%60constructor%20(borshSchema%2C%20account%2C%20contractId%2C%20options)%60%0A%20%20%20%20%20%20-%20%60async%20accessKeyInit%20()%60%0A%20%20%20%20-%20%60function%20borshify%20(block)%60%0A%20%20%20%20-%20%60function%20borshifyInitialValidators%20(initialValidators)%60%0A%20%20%20%20-%20%60const%20hexToBuffer%20%3D%20(hex)%20%3D%3E%60%0A%20%20%20%20-%20%60const%20readerToHex%20%3D%20(len)%20%3D%3E%60%0A%20%20-%20%5Bborshify-proof%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Fblob%2Fmaster%2Futils%2Fborshify-proof.js)%0A%20%20%20%20-%20%60function%20borshifyOutcomeProof%20(proof)%60%0A%20%20-%20%5Brobust%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Fblob%2Fmaster%2Futils%2Frobust.js)%3A%20his%20module%20gives%20a%20few%20utils%20for%20robust%20error%20handling%2C%20and%20wrap%20web3%20with%20error%20handling%20and%20retry%0A%20%20-%20%5Butils%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Fblob%2Fmaster%2Futils%2Futils.js)%0A%20%20%20%20-%20%60async%20function%20setupNear%20(config)%60%0A%20%20%20%20-%20%60async%20function%20setupEth%20(config)%60%0A%20%20%20%20-%20%60async%20function%20setupEthNear%20(config)%60%3A%20Setup%20connection%20to%20NEAR%20and%20Ethereum%20from%20given%20configuration.%0A%20%20%20%20-%20%60function%20remove0x%20(value)%60%3A%20Remove%200x%20if%20prepended%0A%20%20%20%20-%20%60function%20normalizeHex%20(value)%60%0A%20%20%20%20-%20%60async%20function%20accountExists%20(connection%2C%20accountId)%60%0A%20%20%20%20-%20%60async%20function%20createLocalKeyStore%20(networkId%2C%20keyPath)%60%0A%20%20%20%20-%20%60function%20getWeb3%20(config)%60%0A%20%20%20%20-%20%60function%20getEthContract%20(web3%2C%20path%2C%20address)%60%0A%20%20%20%20-%20%60function%20addSecretKey%20(web3%2C%20secretKey)%60%0A%20%20%20%20-%20%60async%20function%20ethCallContract%20(contract%2C%20methodName%2C%20args)%60%3A%20Wrap%20pure%20calls%20to%20Web3%20contract%20to%20handle%20errors%2Freverts%2Fgas%20usage.%0A%0A%23%23%23%23%20nearbridge%20Cryptographic%20Primitives%0A%0A-%20%5BEd25519.sol%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Fblob%2Fmaster%2Fcontracts%2Feth%2Fnearbridge%2Fcontracts%2FEd25519.sol)%3A%20Solidity%20implementation%20of%20the%20%5BEd25519%5D(https%3A%2F%2Fen.wikipedia.org%2Fwiki%2FEdDSA)%20which%20is%20the%20EdDSA%20signature%20scheme%20using%20SHA-512%20(SHA-2)%20and%20Curve25519%20(see%20%5Bhere%5D(https%3A%2F%2Fnbeguier.medium.com%2Fa-real-world-comparison-of-the-ssh-key-algorithms-b26b0b31bfd9)).%20It%20has%20the%20following%20functions%0A%20%20-%20%60function%20pow22501(uint256%20v)%20private%20pure%20returns%20(uint256%20p22501%2C%20uint256%20p11)%60%20%3A%20Computes%20(v%5E(2%5E250-1)%2C%20v%5E11)%20mod%20p%0A%20%20-%20%60function%20check(bytes32%20k%2C%20bytes32%20r%2C%20bytes32%20s%2C%20bytes32%20m1%2C%20bytes9%20m2)%60%20%3A%20has%20the%20following%20steps%0A%20%20%20%20-%20Step%201%3A%20compute%20SHA-512(R%2C%20A%2C%20M)%0A%20%20%20%20-%20Step%202%3A%20unpack%20k%0A%20%20%20%20-%20Step%203%3A%20compute%20multiples%20of%20k%0A%20%20%20%20-%20Step%204%3A%20compute%20s*G%20-%20h*A%0A%20%20%20%20-%20Step%205%3A%20compare%20the%20points%0A-%20%5BUtils.sol%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Fblob%2Fmaster%2Fcontracts%2Feth%2Fnearbridge%2Fcontracts%2FUtils.sol)%3A%20A%20set%20of%20utilty%20functions%20for%20byte%20manipulation%2C%20memory%20updates%20and%20%5Bkeccak%5D(https%3A%2F%2Fkeccak.team%2Fkeccak_specs_summary.html)%20functions.%0A%20%20-%20%60function%20swapBytes2(uint16%20v)%20internal%20pure%20returns%20(uint16)%60%0A%20%20-%20%60function%20swapBytes4(uint32%20v)%20internal%20pure%20returns%20(uint32)%60%0A%20%20-%20%60function%20swapBytes8(uint64%20v)%20internal%20pure%20returns%20(uint64)%60%0A%20%20-%20%60function%20swapBytes16(uint128%20v)%20internal%20pure%20returns%20(uint128)%60%0A%20%20-%20%60function%20swapBytes32(uint256%20v)%20internal%20pure%20returns%20(uint256)%60%0A%20%20-%20%60function%20readMemory(uint%20ptr)%20internal%20pure%20returns%20(uint%20res)%60%0A%20%20-%20%60function%20writeMemory(uint%20ptr%2C%20uint%20value)%20internal%20pure%60%0A%20%20-%20%60function%20memoryToBytes(uint%20ptr%2C%20uint%20length)%20internal%20pure%20returns%20(bytes%20memory%20res)%60%0A%20%20-%20%60function%20keccak256Raw(uint%20ptr%2C%20uint%20length)%20internal%20pure%20returns%20(bytes32%20res)%60%0A%20%20-%20%60function%20sha256Raw(uint%20ptr%2C%20uint%20length)%20internal%20view%20returns%20(bytes32%20res)%60%0A-%20%5BBorsh.sol%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Fblob%2Fmaster%2Fcontracts%2Feth%2Fnearbridge%2Fcontracts%2FBorsh.sol)%20provides%20Binary%20Object%20Representation%20Serializer%20for%20Hashing%20%5Bborsh%5D(https%3A%2F%2Fborsh.io%2F)%20functionality%20and%20imports%20%60Utils.sols%60.%20Structures%20and%20functions%20include%0A%20%20-%20%60struct%20Data%20%7Buint%20ptr%3B%20uint%20end%3B%7D%60%0A%20%20-%20%60function%20from(bytes%20memory%20data)%20internal%20pure%20returns%20(Data%20memory%20res)%60%0A%20%20-%20%60function%20requireSpace(Data%20memory%20data%2C%20uint%20length)%20internal%20pure%60%3A%20This%20function%20assumes%20that%20length%20is%20reasonably%20small%2C%20so%20that%20data.ptr%20%2B%20length%20will%20not%20overflow.%20In%20the%20current%20code%2C%20length%20is%20always%20less%20than%202%5E32.%0A%20%20-%20%60function%20read(Data%20memory%20data%2C%20uint%20length)%20internal%20pure%20returns%20(bytes32%20res)%60%0A%20%20-%20%60function%20done(Data%20memory%20data)%20internal%20pure%60%0A%20%20-%20%60function%20peekKeccak256(Data%20memory%20data%2C%20uint%20length)%20internal%20pure%20returns%20(bytes32)%60%3A%20Same%20considerations%20as%20for%20requireSpace.%0A%20%20-%20%60function%20peekSha256(Data%20memory%20data%2C%20uint%20length)%20internal%20view%20returns%20(bytes32)%60%3A%20Same%20considerations%20as%20for%20requireSpace.%0A%20%20-%20%60function%20decodeU8(Data%20memory%20data)%20internal%20pure%20returns%20(uint8)%60%0A%20%20-%20%60function%20decodeU16(Data%20memory%20data)%20internal%20pure%20returns%20(uint16)%60%0A%20%20-%20%60function%20decodeU32(Data%20memory%20data)%20internal%20pure%20returns%20(uint32)%60%0A%20%20-%20%60function%20decodeU64(Data%20memory%20data)%20internal%20pure%20returns%20(uint64)%60%0A%20%20-%20%60function%20decodeU128(Data%20memory%20data)%20internal%20pure%20returns%20(uint128)%60%0A%20%20-%20%60function%20decodeU256(Data%20memory%20data)%20internal%20pure%20returns%20(uint256)%60%0A%20%20-%20%60function%20decodeBytes20(Data%20memory%20data)%20internal%20pure%20returns%20(bytes20)%60%0A%20%20-%20%60function%20decodeBytes32(Data%20memory%20data)%20internal%20pure%20returns%20(bytes32)%60%0A%20%20-%20%60function%20decodeBool(Data%20memory%20data)%20internal%20pure%20returns%20(bool)%60%0A%20%20-%20%60function%20skipBytes(Data%20memory%20data)%20internal%20pure%60%0A%20%20-%20%60function%20decodeBytes(Data%20memory%20data)%20internal%20pure%20returns%20(bytes%20memory%20res)%60%0A-%20%5BNearDecoder.sol%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Fblob%2Fmaster%2Fcontracts%2Feth%2Fnearbridge%2Fcontracts%2FNearDecoder.sol)%3A%20Imports%20%60Borsh.sol%60%20and%20has%20utilities%20for%20decoding%20Public%20Keys%2C%20Signatures%2C%20Block%20Producers%2C%20Block%20Headers%20and%20Light%20Client%20Blocks.%0A%20%20-%20%60function%20decodePublicKey(Borsh.Data%20memory%20data)%20internal%20pure%20returns%20(PublicKey%20memory%20res)%60%0A%20%20-%20%60function%20decodeSignature(Borsh.Data%20memory%20data)%20internal%20pure%20returns%20(Signature%20memory%20res)%60%0A%20%20-%20%60function%20decodeBlockProducer(Borsh.Data%20memory%20data)%20internal%20pure%20returns%20(BlockProducer%20memory%20res)%60%0A%20%20-%20%60function%20decodeBlockProducers(Borsh.Data%20memory%20data)%20internal%20pure%20returns%20(BlockProducer%5B%5D%20memory%20res)%60%0A%20%20-%20%60function%20decodeOptionalBlockProducers(Borsh.Data%20memory%20data)%20internal%20view%20returns%20(OptionalBlockProducers%20memory%20res)%60%0A%20%20-%20%60function%20decodeOptionalSignature(Borsh.Data%20memory%20data)%20internal%20pure%20returns%20(OptionalSignature%20memory%20res)%60%0A%20%20-%20%60function%20decodeBlockHeaderInnerLite(Borsh.Data%20memory%20data)%20internal%20view%20returns%20(BlockHeaderInnerLite%20memory%20res)%60%0A%20%20-%20%60function%20decodeLightClientBlock(Borsh.Data%20memory%20data)%20internal%20view%20returns%20(LightClientBlock%20memory%20res)%60%0A-%20%5BProofDecoder.sol%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Fblob%2Fmaster%2Fcontracts%2Feth%2Fnearprover%2Fcontracts%2FProofDecoder.sol)%3A%20Imports%20%60Borsh.sol%60%20and%20%60NearDecoder.sol%60%20and%20has%20utilities%20for%20decoding%20Proofs%2C%20BlockHeader%2C%20ExecutionStatus%2C%20ExecutionOutcome%20and%20MerklePaths.%20Structures%20and%20functions%20include%0A%20%20-%20%60struct%20FullOutcomeProof%20%7BExecutionOutcomeWithIdAndProof%20outcome_proof%3B%20MerklePath%20outcome_root_proof%3B%20BlockHeaderLight%20block_header_lite%3B%20MerklePath%20block_proof%3B%7D%60%0A%20%20-%20%60function%20decodeFullOutcomeProof(Borsh.Data%20memory%20data)%20internal%20view%20returns%20(FullOutcomeProof%20memory%20proof)%60%0A%20%20-%20%60struct%20BlockHeaderLight%20%7Bbytes32%20prev_block_hash%3B%20bytes32%20inner_rest_hash%3B%20NearDecoder.BlockHeaderInnerLite%20inner_lite%3B%20bytes32%20hash%3B%7D%60%0A%20%20-%20%60function%20decodeBlockHeaderLight(Borsh.Data%20memory%20data)%20internal%20view%20returns%20(BlockHeaderLight%20memory%20header)%60%0A%20%20-%20%60struct%20ExecutionStatus%20%7Buint8%20enumIndex%3B%20bool%20unknown%3B%20bool%20failed%3B%20bytes%20successValue%3B%20bytes32%20successReceiptId%3B%7D%60%0A%20%20%20%20-%20%60successValue%60%20indicates%20if%20the%20final%20action%20succeeded%20and%20returned%20some%20value%20or%20an%20empty%20vec.%0A%20%20%20%20-%20%60successReceiptId%60%20is%20the%20final%20action%20of%20the%20receipt%20returned%20a%20promise%20or%20the%20signed%20transaction%20was%20converted%20to%20a%20receipt.%20Contains%20the%20receipt_id%20of%20the%20generated%20receipt.%0A%20%20-%20%60function%20decodeExecutionStatus(Borsh.Data%20memory%20data)%20internal%20pure%20returns%20(ExecutionStatus%20memory%20executionStatus)%60%0A%20%20-%20%60struct%20ExecutionOutcome%20%7Bbytes%5B%5D%20logs%3B%20bytes32%5B%5D%20receipt_ids%3B%20uint64%20gas_burnt%3B%20uint128%20tokens_burnt%3B%20bytes%20executor_id%3B%20ExecutionStatus%20status%3B%20bytes32%5B%5D%20merkelization_hashes%3B%7D%60%0A%20%20%20%20-%20%60bytes%5B%5D%20logs%3B%60%3A%20Logs%20from%20this%20transaction%20or%20receipt.%0A%20%20%20%20-%20%60bytes32%5B%5D%20receipt_ids%3B%60%3A%20Receipt%20IDs%20generated%20by%20this%20transaction%20or%20receipt.%0A%20%20%20%20-%20%60uint64%20gas_burnt%3B%60%3A%20The%20amount%20of%20the%20gas%20burnt%20by%20the%20given%20transaction%20or%20receipt.%0A%20%20%20%20-%20%60uint128%20tokens_burnt%3B%60%3A%20The%20total%20number%20of%20the%20tokens%20burnt%20by%20the%20given%20transaction%20or%20receipt.%0A%20%20%20%20-%20%60bytes%20executor_id%3B%60%3A%20Hash%20of%20the%20transaction%20or%20receipt%20id%20that%20produced%20this%20outcome.%0A%20%20%20%20-%20%60ExecutionStatus%20status%60%3A%20Execution%20status.%20Contains%20the%20result%20in%20case%20of%20successful%20execution.%0A%20%20%20%20-%20%60bytes32%5B%5D%20merkelization_hashes%3B%60%0A%20%20-%20%60function%20decodeExecutionOutcome(Borsh.Data%20memory%20data)%20internal%20view%20returns%20(ExecutionOutcome%20memory%20outcome)%60%0A%20%20-%20%60struct%20ExecutionOutcomeWithId%20%7Bbytes32%20id%3B%20ExecutionOutcome%20outcome%3B%20bytes32%20hash%3B%7D%60%0A%20%20%20%20-%20%60bytes32%20id%60%3A%20is%20the%20transaction%20hash%20or%20the%20receipt%20ID.%0A%20%20-%20%60function%20decodeExecutionOutcomeWithId(Borsh.Data%20memory%20data)%20internal%20view%20returns%20(ExecutionOutcomeWithId%20memory%20outcome)%60%0A%20%20-%20%60struct%20MerklePathItem%20%7Bbytes32%20hash%3B%20uint8%20direction%3B%7D%60%0A%20%20%20%20-%20%60uint8%20direction%60%3A%20where%200%20%3D%20left%2C%201%20%3D%20right%0A%20%20-%20%60function%20decodeMerklePathItem(Borsh.Data%20memory%20data)%20internal%20pure%20returns%20(MerklePathItem%20memory%20item)%60%0A%20%20-%20%60struct%20MerklePath%20%7BMerklePathItem%5B%5D%20items%3B%7D%60%0A%20%20-%20%60function%20decodeMerklePath(Borsh.Data%20memory%20data)%20internal%20pure%20returns%20(MerklePath%20memory%20path)%60%0A%20%20-%20%60struct%20ExecutionOutcomeWithIdAndProof%20%7BMerklePath%20proof%3B%20bytes32%20block_hash%3B%20ExecutionOutcomeWithId%20outcome_with_id%3B%7D%60%0A%20%20-%20%60function%20decodeExecutionOutcomeWithIdAndProof(Borsh.Data%20memory%20data)internal%20view%20returns%20(ExecutionOutcomeWithIdAndProof%20memory%20outcome)%60%0A%0A%23%23%23%20Token%20Transfer%20Process%20Flow%0A%0AThe%20%5BNEAR%20Rainbow%20Bridge%5D(https%3A%2F%2Fnear.org%2Fbridge%2F)%20uses%20ERC-20%20connectors%20which%20are%20developed%20in%20%5Brainbow-token-connector%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-token-connector)%20and%20%5Brainbow-bridge-client%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge-client).%20Also%20see%20%5Beth2near-fun-transfer.md%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Fblob%2Fmaster%2Fdocs%2Fworkflows%2Feth2near-fun-transfer.mdx).%0A%0AFollowing%20is%20an%20overview%20of%20timing%20and%20anticipated%20costs%0A%0A-%20Once%20on%20NEAR%2C%20transactions%20will%20confirm%20in%201-2%20seconds%20and%20cost%20well%20under%20%241%20in%20most%20cases.%0A-%20Since%20the%20Bridge%20requires%20transactions%20on%20Ethereum%20for%20NEAR%20and%20Ethereum%2C%20the%20following%20costs%20are%20expected.%0A-%20Sending%20assets%20from%20Ethereum%20to%20NEAR%20takes%20about%20six%20minutes%20(20%20blocks)%20and%20for%20ERC-20%20costs%20about%20%2410%20on%20average.%0A-%20Sending%20assets%20from%20NEAR%20back%20to%20Ethereum%20currently%20takes%20a%20maximum%20of%20sixteen%20hours%20(due%20to%20Ethereum%20finality%20times)%20and%20costs%20around%20%2460%20(due%20to%20ETH%20gas%20costs%20and%20at%20current%20ETH%20price).%20These%20costs%20and%20speeds%20will%20improve%20in%20the%20near%20future.%0A%0A_Note%3A%20This%20uses%20Ethreum%20%5BERC20%5D(https%3A%2F%2Feips.ethereum.org%2FEIPS%2Feip-20)%20and%20NEAR%20%5BNEP-141%5D(https%3A%2F%2Fnomicon.io%2FStandards%2FTokens%2FFungibleToken%2FCore)%20initally%20developed%20for%20%5BNEP-21%5D(https%3A%2F%2Fgithub.com%2Fnear%2FNEPs%2Fpull%2F21)_%0A%0A**%5BGeneric%20ERC-20%2FNEP-141%20connector%20for%20Rainbow%20Bridge%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-token-connector%2Fblob%2Fmaster%2FREADME.mdx)**%0A%0A**Specification**%0A%0A**Ethereum's%20side**%0A%0A%60%60%60solidity%0Acontract%20ERC20Locker%20%7B%0A%20%20constructor(bytes%20memory%20nearTokenFactory%2C%20INearProver%20prover)%20public%3B%0A%20%20function%20lockToken(IERC20%20token%2C%20uint256%20amount%2C%20string%20memory%20accountId)%20public%3B%0A%20%20function%20unlockToken(bytes%20memory%20proofData%2C%20uint64%20proofBlockHeader)%20public%3B%0A%7D%0A%60%60%60%0A%0A**NEAR's%20side**%0A%0A%60%60%60rust%0Astruct%20BridgeTokenFactory%20%7B%0A%20%20%20%20%2F%2F%2F%20The%20account%20of%20the%20prover%20that%20we%20can%20use%20to%20prove%0A%20%20%20%20pub%20prover_account%3A%20AccountId%2C%0A%20%20%20%20%2F%2F%2F%20Address%20of%20the%20Ethereum%20locker%20contract.%0A%20%20%20%20pub%20locker_address%3A%20%5Bu8%3B%2020%5D%2C%0A%20%20%20%20%2F%2F%2F%20Hashes%20of%20the%20events%20that%20were%20already%20used.%0A%20%20%20%20pub%20used_events%3A%20UnorderedSet%3CVec%3Cu8%3E%3E%2C%0A%20%20%20%20%2F%2F%2F%20Mapping%20from%20Ethereum%20tokens%20to%20NEAR%20tokens.%0A%20%20%20%20pub%20tokens%3A%20UnorderedMap%3CEvmAddress%2C%20AccountId%3E%3B%0A%7D%0A%0Aimpl%20BridgeTokenFactory%20%7B%0A%20%20%20%20%2F%2F%2F%20Initializes%20the%20contract.%0A%20%20%20%20%2F%2F%2F%20%60prover_account%60%3A%20NEAR%20account%20of%20the%20Near%20Prover%20contract%3B%0A%20%20%20%20%2F%2F%2F%20%60locker_address%60%3A%20Ethereum%20address%20of%20the%20locker%20contract%2C%20in%20hex.%0A%20%20%20%20%23%5Binit%5D%0A%20%20%20%20pub%20fn%20new(prover_account%3A%20AccountId%2C%20locker_address%3A%20String)%20-%3E%20Self%3B%0A%0A%20%20%20%20%2F%2F%2F%20Relays%20the%20lock%20event%20from%20Ethereum.%0A%20%20%20%20%2F%2F%2F%20Uses%20prover%20to%20validate%20that%20proof%20is%20correct%20and%20relies%20on%20a%20canonical%20Ethereum%20chain.%0A%20%20%20%20%2F%2F%2F%20Send%20%60mint%60%20action%20to%20the%20token%20that%20is%20specified%20in%20the%20proof.%0A%20%20%20%20%23%5Bpayable%5D%0A%20%20%20%20pub%20fn%20deposit(%26mut%20self%2C%20proof%3A%20Proof)%3B%0A%0A%20%20%20%20%2F%2F%2F%20A%20callback%20from%20BridgeToken%20contract%20deployed%20under%20this%20factory.%0A%20%20%20%20%2F%2F%2F%20Is%20called%20after%20tokens%20are%20burned%20there%20to%20create%20an%20receipt%20result%20%60(amount%2C%20token_address%2C%20recipient_address)%60%20for%20Ethereum%20to%20unlock%20the%20token.%0A%20%20%20%20pub%20fn%20finish_withdraw(token_account%3A%20AccountId%2C%20amount%3A%20Balance%2C%20recipient%3A%20EvmAddress)%3B%0A%0A%20%20%20%20%2F%2F%2F%20Transfers%20given%20NEP-21%20token%20from%20%60predecessor_id%60%20to%20factory%20to%20lock.%0A%20%20%20%20%2F%2F%2F%20On%20success%2C%20leaves%20a%20receipt%20result%20%60(amount%2C%20token_address%2C%20recipient_address)%60.%0A%20%20%20%20%23%5Bpayable%5D%0A%20%20%20%20pub%20fn%20lock(%26mut%20self%2C%20token%3A%20AccountId%2C%20amount%3A%20Balance%2C%20recipient%3A%20String)%3B%0A%0A%20%20%20%20%2F%2F%2F%20Relays%20the%20unlock%20event%20from%20Ethereum.%0A%20%20%20%20%2F%2F%2F%20Uses%20prover%20to%20validate%20that%20proof%20is%20correct%20and%20relies%20on%20a%20canonical%20Ethereum%20chain.%0A%20%20%20%20%2F%2F%2F%20Uses%20NEP-21%20%60transfer%60%20action%20to%20move%20funds%20to%20%60recipient%60%20account.%0A%20%20%20%20%23%5Bpayable%5D%0A%20%20%20%20pub%20fn%20unlock(%26mut%20self%2C%20proof%3A%20Proof)%3B%0A%0A%20%20%20%20%2F%2F%2F%20Deploys%20BridgeToken%20contract%20for%20the%20given%20EVM%20address%20in%20hex%20code.%0A%20%20%20%20%2F%2F%2F%20The%20name%20of%20new%20NEP21%20compatible%20contract%20will%20be%20%3Chex(evm_address)%3E.%3Ccurrent_id%3E.%0A%20%20%20%20%2F%2F%2F%20Expects%20~35N%20attached%20to%20cover%20storage%20for%20BridgeToken.%0A%20%20%20%20%23%5Bpayable%5D%0A%20%20%20%20pub%20fn%20deploy_bridge_token(address%3A%20String)%3B%0A%0A%20%20%20%20%2F%2F%2F%20Checks%20if%20Bridge%20Token%20has%20been%20successfully%20deployed%20with%20%60deploy_bridge_token%60.%0A%20%20%20%20%2F%2F%2F%20On%20success%2C%20returns%20the%20name%20of%20NEP21%20contract%20associated%20with%20given%20address%20(%3Chex(evm_address)%3E.%3Ccurrent_id%3E).%0A%20%20%20%20%2F%2F%2F%20Otherwise%2C%20returns%20%22token%20do%20not%20exists%22%20error.%0A%20%20%20%20pub%20fn%20get_bridge_token_account_id(%26self%2C%20address%3A%20String)%20-%3E%20AccountId%3B%0A%7D%0A%0Astruct%20BridgeToken%20%7B%0A%20%20%20controller%3A%20AccountId%2C%0A%20%20%20token%3A%20Token%2C%20%2F%2F%20uses%20https%3A%2F%2Fgithub.com%2Filblackdragon%2Fbalancer-near%2Ftree%2Fmaster%2Fnear-lib-rs%0A%7D%0A%0Aimpl%20BridgeToken%20%7B%0A%20%20%20%20%2F%2F%2F%20Setup%20the%20Token%20contract%20with%20given%20factory%2Fcontroller.%0A%20%20%20%20pub%20fn%20new(controller%3A%20AccountId)%20-%3E%20Self%3B%0A%0A%20%20%20%20%2F%2F%2F%20Mint%20tokens%20to%20given%20user.%20Only%20can%20be%20called%20by%20the%20controller.%0A%20%20%20%20pub%20fn%20mint(%26mut%20self%2C%20account_id%3A%20AccountId%2C%20amount%3A%20Balance)%3B%0A%0A%20%20%20%20%2F%2F%2F%20Withdraw%20tokens%20from%20this%20contract.%0A%20%20%20%20%2F%2F%2F%20Burns%20sender's%20tokens%20and%20calls%20controller%20to%20create%20event%20for%20relaying.%0A%20%20%20%20pub%20fn%20withdraw(%26mut%20self%2C%20amount%3A%20U128%2C%20recipient%3A%20String)%20-%3E%20Promise%3B%0A%7D%0A%0Aimpl%20FungibleToken%20for%20BridgeToken%20%7B%0A%20%20%20%2F%2F%20see%20example%20https%3A%2F%2Fgithub.com%2Filblackdragon%2Fbalancer-near%2Fblob%2Fmaster%2Fbalancer-pool%2Fsrc%2Flib.rs%23L329%0A%7D%0A%60%60%60%0A%0A**Setup%20new%20ERC-20%20on%20NEAR**%0A%0ATo%20setup%20token%20contract%20on%20NEAR%20side%2C%20anyone%20can%20call%20%60%3Cbridge_token_factory%3E.deploy_bridge_token(%3Cerc20%3E)%60%20where%20%60%3Cerc20%3E%60%20is%20the%20address%20of%20the%20token.%0AWith%20this%20call%20must%20attach%20the%20amount%20of%20%24NEAR%20to%20cover%20storage%20for%20(at%20least%2030%20%24NEAR%20currently).%0A%0AThis%20will%20create%20%60%3C%3Chex(erc20)%3E.%3Cbridge_token_factory%3E%3E%60%20NEP141-compatible%20contract.%0A%0A**Usage%20flow%20Ethereum%20-%3E%20NEAR**%0A%0A1.%20User%20sends%20%60%3Cerc20%3E.approve(%3Cerc20locker%3E%2C%20%3Camount%3E)%60%20Ethereum%20transaction.%0A2.%20User%20sends%20%60%3Cerc20locker%3E.lock(%3Cerc20%3E%2C%20%3Camount%3E%2C%20%3Cdestination%3E)%60%20Ethereum%20transaction.%20This%20transaction%20will%20create%20%60Locked%60%20event.%0A3.%20Relayers%20will%20be%20sending%20Ethereum%20blocks%20to%20the%20%60EthClient%60%20on%20NEAR%20side.%0A4.%20After%20sufficient%20number%20of%20confirmations%20on%20top%20of%20the%20mined%20Ethereum%20block%20that%20contain%20the%20%60lock%60%20transaction%2C%20user%20or%20relayer%20can%20call%20%60BridgeTokenFactory.deposit(proof)%60.%20Proof%20is%20the%20extracted%20information%20from%20the%20event%20on%20Ethereum%20side.%0A5.%20%60BridgeTokenFactory.deposit%60%20function%20will%20call%20%60EthProver%60%20and%20verify%20that%20proof%20is%20correct%20and%20relies%20on%20a%20block%20with%20sufficient%20number%20of%20confirmations.%0A6.%20%60EthProver%60%20will%20return%20callback%20to%20%60BridgeTokenFactory%60%20confirming%20that%20proof%20is%20correct.%0A7.%20%60BridgeTokenFactory%60%20will%20call%20%60%3C%3Chex(erc20)%3E.%3Cbridge_token_factory%3E%3E.mint(%3Cnear_account_id%3E%2C%20%3Camount%3E)%60.%0A8.%20User%20can%20use%20%60%3C%3Chex(erc20)%3E.%3Cbridge_token_factory%3E%3E%60%20token%20in%20other%20applications%20now%20on%20NEAR.%0A%0A**Usage%20flow%20NEAR%20-%3E%20Ethereum**%0A%0A1.%20%60token-locker%60%20locks%20NEP141%20tokens%20on%20NEAR%20side.%0A%0ATo%20deposit%20funds%20into%20the%20locker%2C%20call%20%60ft_transfer_call%60%20where%20%60msg%60%20contains%20Ethereum%20address%20the%20funds%20should%20arrive%20to.%0AThis%20will%20emit%20%60%3Ctoken%3A%20String%2C%20amount%3A%20u128%2C%20recipient%20address%3A%20EthAddress%3E%60%20(which%20arrives%20to%20%60deposit%60%20on%20Ethereum%20side).%0A%0AAccepts%20%60Unlock(token%3A%20String%2C%20sender_id%3A%20EthAddress%2C%20amount%3A%20u256%2C%20recipient%3A%20String)%60%20event%20from%20Ethereum%20side%20with%20a%20proof%2C%20verifies%20its%20correctness.%0AIf%20%60recipient%60%20contains%20'%3A'%20will%20split%20it%20into%20%60%3Crecipient%2C%20msg%3E%60%20and%20do%20%60ft_transfer_call(recipient%2C%20amount%2C%20None%2C%20msg)%60.%20Otherwise%20will%20%60ft_transfer%60%20to%20%60recipient%60.%0A%0ATo%20get%20metadata%20of%20token%20to%20Ethereum%2C%20need%20to%20call%20%60log_metadata%60%2C%20which%20will%20create%20a%20result%20%60%3Ctoken%3A%20String%2C%20name%3A%20String%2C%20symbol%3A%20String%2C%20decimals%3A%20u8%2C%20blockHeight%3A%20u64%3E%60.%0A%0A2.%20%60erc20-bridge-token%60%20-%20%60BridgeTokenFactory%60%20and%20%60BridgeToken%60%20Ethereum%20contracts.%0A%0A%60BridgeTokenFactory%60%20creates%20new%20%60BridgeToken%60%20that%20correspond%20to%20specific%20token%20account%20id%20on%20NEAR%20side.%0A%0A%60BridgeTokenFactory%60%20receives%20%60deposit%60%20with%20proof%20from%20NEAR%2C%20verify%20them%20and%20mint%20appropriate%20amounts%20on%20recipient%20addresses.%0A%0ACalling%20%60withdraw%60%20will%20burn%20tokens%20of%20this%20user%20and%20will%20generate%20event%20%60%3Ctoken%3A%20String%2C%20sender_id%3A%20EthAddress%2C%20amount%3A%20u256%2C%20recipient%3A%20String%3E%60%20that%20can%20be%20relayed%20to%20%60token-factory%60.%0A%0A**Caveats**%0A%0AGenerally%2C%20this%20connector%20allows%20any%20account%20to%20call%20%60ft_transfer_call%60%20opening%20for%20potential%20malicious%20tokens%20to%20be%20bridged%20to%20Ethereum.%0AThe%20expectation%20here%20is%20that%20on%20Ethereum%20side%2C%20the%20token%20lists%20will%20handle%20this%2C%20as%20it's%20the%20same%20attack%20model%20as%20malicious%20tokens%20on%20Uniswap%20and%20other%20DEXs.%0A%0AUsing%20Ethereum%20%60BridgeTokenFactory%60%20contract%20can%20always%20resolve%20Ethereum%20address%20of%20a%20contract%20back%20to%20NEAR%20one%20to%20check%20that%20it%20is%20indeed%20bridging%20token%20from%20NEAR%20and%20is%20created%20by%20this%20factory.%0A%0A**Testing**%0A%0ATesting%20Ethereum%20side%0A%0A%60%60%60%0Acd%20erc20-connector%0Ayarn%0Ayarn%20run%20test%0A%60%60%60%0A%0ATesting%20NEAR%20side%0A%0A%60%60%60%0Amake%20res%2Fbridge_token_factory.wasm%0Acargo%20test%20--all%0A%60%60%60%0A%0A%23%23%23%23%20Token%20Transfer%20Components%0A%0A_Note%3A%20This%20uses%20Ethreum%20%5BERC20%5D(https%3A%2F%2Feips.ethereum.org%2FEIPS%2Feip-20)%20and%20NEAR%20%5BNEP-141%5D(https%3A%2F%2Fnomicon.io%2FStandards%2FTokens%2FFungibleToken%2FCore)%20initally%20developed%20for%20%5BNEP-21%5D(https%3A%2F%2Fgithub.com%2Fnear%2FNEPs%2Fpull%2F21)_%0A%0A-%20%5Brainbow-token-connector%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-token-connector)%0A%20%20-%20NEAR%20rust%20based%20contracts%0A%20%20%20%20-%20%5Bbridge-common%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-token-connector%2Ftree%2Fmaster%2Fbridge-common)%3A%20Common%20functions%20for%20NEAR%2C%20currently%20only%20%60pub%20fn%20parse_recipient(recipient%3A%20String)%20-%3E%20Recipient%60%0A%20%20%20%20-%20%5Bbridge-token-factory%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-token-connector%2Ftree%2Fmaster%2Fbridge-token-factory)%3A%20Functions%20for%20managing%20tokens%20on%20NEAR%20including%20but%20not%20limited%20to%20%60update_metadata%60%2C%20%60deposit%60%2C%20%60get_tokens%60%2C%20%60finish_updating_metadata%60%2C%20%60finish_updating_metadata%60%2C%20%60finish_withdraw%60%2C%20%60deploy_bridge_token%60%2C%20%60get_bridge_token_account_id%60%2C%20%60is_used_proof%60%2C%20%60record_proof%60%0A%20%20%20%20-%20%5Bbridge-token%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-token-connector%2Ftree%2Fmaster%2Fbridge-token)%3A%20Token%20functions%20on%20NEAR%20including%20but%20not%20limited%20to%20%60mint%60%20and%20%60withdraw%60%0A%20%20%20%20-%20%5Btoken-locker%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-token-connector%2Ftree%2Fmaster%2Ftoken-locker)%3A%20Token%20Locker%20functions%20on%20NEAR%20including%20but%20not%20limited%20to%20%60withdraw%60%2C%20%60finish_deposit%60%2C%20%60is_used_proof%60%0A%20%20-%20Ethereum%20solidity%20based%20contracts%0A%20%20%20%20-%20%5Berc20-bridge-token%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-token-connector%2Ftree%2Fmaster%2Ferc20-bridge-token)%3A%20Ethereum%20Bridge%20token%20contracts%20including%20but%20not%20limited%20to%0A%20%20%20%20%20%20-%20%5BBridgeToken.sol%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-token-connector%2Fblob%2Fmaster%2Ferc20-bridge-token%2Fcontracts%2FBridgeToken.sol)%0A%20%20%20%20%20%20-%20%5BBridgeTokenFactory.sol%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-token-connector%2Fblob%2Fmaster%2Ferc20-bridge-token%2Fcontracts%2FBridgeTokenFactory.sol)%0A%20%20%20%20%20%20-%20%5BBridgeTokenProxy.sol%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-token-connector%2Fblob%2Fmaster%2Ferc20-bridge-token%2Fcontracts%2FBridgeTokenProxy.sol)%0A%20%20%20%20%20%20-%20%5BProofConsumer.sol%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-token-connector%2Fblob%2Fmaster%2Ferc20-bridge-token%2Fcontracts%2FProofConsumer.sol)%0A%20%20%20%20%20%20-%20%5BResultsDecoder%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-token-connector%2Fblob%2Fmaster%2Ferc20-bridge-token%2Fcontracts%2FResultsDecoder.sol)%0A%20%20%20%20-%20%5Berc20-connector%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-token-connector%2Ftree%2Fmaster%2Ferc20-connector)%3A%20has%20%5BERC20Locker.sol%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-token-connector%2Fblob%2Fmaster%2Ferc20-connector%2Fcontracts%2FERC20Locker.sol)%20which%20is%20used%20to%20lock%20and%20unlock%20tokens.%20It%20is%20linked%20to%20the%20bridge%20token%20factory%20on%20NEAR%20side.%20It%20also%20links%20to%20the%20prover%20that%20it%20uses%20to%20unlock%20the%20tokens.%20(see%20%5Bhere%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Ftree%2Fmaster%2Fcontracts%2Feth%2Fnearbridge%2Fcontracts))%0A%0A%23%23%23%23%20References%0A%0A-%20%5BLighthouse%20Documentation%5D(https%3A%2F%2Flighthouse-book.sigmaprime.io%2F)%3A%20ETH%202.0%20Consensus%20Client%20Lighthouse%20documentation%0A%0A-%20%5BLighthouse%20Github%5D(https%3A%2F%2Fgithub.com%2Fsigp%2Flighthouse)%3A%20ETH%202.0%20Consensus%20Client%20Lighthouse%20Github%0A-%20%5BLighthouse%3A%20Blog%5D(https%3A%2F%2Flighthouse-blog.sigmaprime.io%2F)%3A%20ETH%202.0%20Consensus%20Client%20Lighthouse%20Blog%0A-%20%5Beth2near-block-relay-rs%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Ftree%2Fmaster%2Feth2near%2Feth2near-block-relay-rs)%0A-%20%5Bnearbridge%20contracts%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Ftree%2Fmaster%2Fcontracts%2Feth%2Fnearbridge)%0A-%20%5Bnearprover%20contracts%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Ftree%2Fmaster%2Fcontracts%2Feth%2Fnearprover)%0A%0A%23%23%23%20Prysm%20Light%20Client%0A%0A%23%23%23%23%20References%0A%0A-%20%5BPrysm%3A%20Light-client%20(WORK%20IN%20PROGRESS)%5D(https%3A%2F%2Fgithub.com%2Fjinfwhuang%2Fprysm%2Fpull%2F5)%3A%0A%0A-%20%5BPrysm%3A%20Light-client%20Client%20WIP%5D(https%3A%2F%2Fgithub.com%2Fjinfwhuang%2Fprysm%2Ftree%2Fjin-light%2Fcmd%2Flight-client%23light-client-client)%3A%20An%20independent%20light%20client%20client%0A-%20%5BPrysm%3A%20light-client%20server%20PR%5D(https%3A%2F%2Fgithub.com%2Fprysmaticlabs%2Fprysm%2Fpull%2F10034)%3A%20a%20feature%20PR%20that%20implements%20the%20basic%20production%20level%20changes%20to%20Prysm%20to%20comply%20as%20a%20light-client%20server%20to%20begin%20serving%20light%20client%20requests%0A%0A%23%23%20Harmony%20Merkle%20Mount%20Range%0A%0A-%20Harmony%20%5BMMR%20PR%20Review%5D(https%3A%2F%2Fgithub.com%2Fharmony-one%2Fharmony%2Fpull%2F3872)%20and%20%5Blatest%20PR%5D(https%3A%2F%2Fgithub.com%2Fharmony-one%2Fharmony%2Fpull%2F4198%2Ffiles)%20uses%20Merkle%20Mountain%20Ranges%20to%20facilitate%20light%20client%20development%20against%20Harmony's%20sharded%20Proof%20of%20Stake%20Chain%0A%0A%23%23%20Near%20Rainbow%20Bridge%20Review%0A%0AThe%20%5BNEAR%20Rainbow%20bridge%5D(https%3A%2F%2Fnear.org%2Fbridge%2F)%20is%20in%20%5Bthis%20github%20repository%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge)%20and%20is%20supported%20by%20%5BAurora-labs%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near).%0A%0AIt%20recently%20provided%20support%20for%20ETH%202.0%20in%20this%20%5BPull%20Request%20(762)%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Fpull%2F762).%0A%0AIt%20interacts%20%5Blighthouse%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Flighthouse)%20for%20Ethereum%202.0%20Consensus%20and%20tree_hash%20functions%20as%20well%20as%20bls%20signatures.%0A%0AHigh%20Level%20their%20architecture%20is%20similar%20to%20the%20Horizon%20Bridge%20but%20with%20some%20key%20differences%2C%20including%20but%20not%20limited%20to%0A%0A-%20interacting%20with%20the%20beacon%20chain%20now%20for%20finality%20%60is_correct_finality_update%60%20%5Bsee%20finality-update-verify%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Fblob%2Fmaster%2Feth2near%2Ffinality-update-verify%2Fsrc%2Flib.rs%23L36)%0A-%20Updated%20execution%20block%20proof%20to%20use%20the%20BEACONRPCClient%20and%20with%20an%20updated%20merkle%20tree%0A%20%20-%20Design%20can%20be%20found%20in%20%5BPR-762%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Fpull%2F762)%0A%0A%23%23%23%20NEAR%20Rainbow%20Bridge%3A%20Component%20Overview%0A%0AThe%20following%20smart%20contracts%20are%20deployed%20on%20NEAR%20and%20work%20in%20conjunction%20with%20eth2near%20bridging%20functionality%20to%20propogate%20blocks%20from%20Ethereum%20to%20NEAR.%0A%0A**%5C*Note**%20here%20we%20will%20focus%20on%20the%20%60eth2-client%60%20for%20ETH%202.0%20Proof%20of%20Stake%20Bridging%20however%20if%20interested%20in%20however%20there%20is%20also%20an%20%60eth-client%60%20which%20was%20used%20for%20ETH%201.0%20Proof%20of%20Work%20Integration%20using%20%5Brust-ethhash%5D(https%3A%2F%2Fgithub.com%2Fnearprotocol%2Frust-ethash).%5C*%0A%0A-%20%5BSmart%20Contracts%20Deployed%20on%20NEAR%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Ftree%2Fmaster%2Fcontracts%2Fnear)%0A%20%20-%20%5Beth2-client%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Ftree%2Fmaster%2Fcontracts%2Fnear%2Feth2-client)%20implements%20the%20Ethereum%20Light%20Client%20on%20Near%0A%20%20%20%20-%20it%20provides%20functions%20including%20but%20not%20limited%20to%3A%0A%20%20%20%20%20%20-%20validate%20the%20light%20client%0A%20%20%20%20%20%20-%20verify%20the%20finality%20branch%0A%20%20%20%20%20%20-%20verify%20bls%20signatures%0A%20%20%20%20%20%20-%20update%20finalized%20headers%0A%20%20%20%20%20%20-%20updates%20the%20submittes%0A%20%20%20%20%20%20-%20prune%20finalized%20blocks.%0A%20%20%20%20-%20It%20interacts%20with%20the%20beach%20chain%2C%20uses%20%5BBorsh%5D(https%3A%2F%2Fborsh.io%2F)%20for%20serialization%20and%20%5Blighthouse%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Flighthouse)%20for%20Ethereum%202.0%20Consensus%20and%20tree_hash%20functions%20as%20well%20as%20bls%20signatures.%20See%20%5Bhere%5D(https%3A%2F%2Flighthouse-book.sigmaprime.io%2F)%20for%20more%20information%20on%20lighthouse.%20Below%20is%20a%20list%20of%20dependencies%20from%20%5Beth2-client%2FCargo.toml%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Fblob%2Fmaster%2Fcontracts%2Fnear%2Feth2-client%2FCargo.toml)%0A%0A%20%20%20%20%20%20%20%20%20%20%20%20%60%60%60%0A%20%20%20%20%20%20%20%20%20%20%20%20%5Bdependencies%5D%0A%20%20%20%20%20%20%20%20%20%20%20%20ethereum-types%20%3D%20%220.9.2%22%0A%20%20%20%20%20%20%20%20%20%20%20%20eth-types%20%3D%20%20%7B%20path%20%3D%20%22..%2Feth-types%22%20%7D%0A%20%20%20%20%20%20%20%20%20%20%20%20eth2-utility%20%3D%20%20%7B%20path%20%3D%20%22..%2Feth2-utility%22%20%7D%0A%20%20%20%20%20%20%20%20%20%20%20%20tree_hash%20%3D%20%7B%20git%20%3D%20%22https%3A%2F%2Fgithub.com%2Faurora-is-near%2Flighthouse.git%22%2C%20rev%20%3D%20%22b624c3f0d3c5bc9ea46faa14c9cb2d90ee1e1dec%22%20%7D%0A%20%20%20%20%20%20%20%20%20%20%20%20merkle_proof%20%3D%20%7B%20git%20%3D%20%22https%3A%2F%2Fgithub.com%2Faurora-is-near%2Flighthouse.git%22%2C%20rev%20%3D%20%22b624c3f0d3c5bc9ea46faa14c9cb2d90ee1e1dec%22%20%7D%0A%20%20%20%20%20%20%20%20%20%20%20%20bls%20%3D%20%7B%20git%20%3D%20%22https%3A%2F%2Fgithub.com%2Faurora-is-near%2Flighthouse.git%22%2C%20optional%20%3D%20true%2C%20rev%20%3D%20%22b624c3f0d3c5bc9ea46faa14c9cb2d90ee1e1dec%22%2C%20default-features%20%3D%20false%2C%20features%20%3D%20%5B%22milagro%22%5D%7D%0A%20%20%20%20%20%20%20%20%20%20%20%20admin-controlled%20%3D%20%20%7B%20path%20%3D%20%22..%2Fadmin-controlled%22%20%7D%0A%20%20%20%20%20%20%20%20%20%20%20%20near-sdk%20%3D%20%224.0.0%22%0A%20%20%20%20%20%20%20%20%20%20%20%20borsh%20%3D%20%220.9.3%22%0A%20%20%20%20%20%20%20%20%20%20%20%20bitvec%20%3D%20%221.0.0%22%0A%20%20%20%20%20%20%20%20%20%20%20%20%60%60%60%0A%0A-%20%5Beth2near%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Ftree%2Fmaster%2Feth2near)%20supports%20the%20relaying%20of%20blocks%20and%20the%20verification%20of%20finality%20between%20etherum%20and%20Near.%20It%20has%20the%20following%20components%0A%20%20-%20%5Bcontract_wrapper%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Ftree%2Fmaster%2Feth2near%2Fcontract_wrapper)%3A%20provides%20rust%20wrappers%20for%20interacting%20with%20the%20%5Bsolidity%20contracts%20on%20near%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Ftree%2Fmaster%2Fcontracts%2Fnear)%0A%20%20%20%20-%20Contracts%20include%20(from%20%5B%60lib.rs%60%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Fblob%2Fmaster%2Feth2near%2Fcontract_wrapper%2Fsrc%2Flib.rs))%0A%0A%20%20%20%20%20%20%20%20%20%20%20%20%60%60%60%0A%20%20%20%20%20%20%20%20%20%20%20%20pub%20mod%20contract_wrapper_trait%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20pub%20mod%20dao_contract%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20pub%20mod%20dao_eth_client_contract%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20pub%20mod%20dao_types%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20pub%20mod%20errors%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20pub%20mod%20eth_client_contract%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20pub%20mod%20eth_client_contract_trait%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20pub%20mod%20file_eth_client_contract%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20pub%20mod%20near_contract_wrapper%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20pub%20mod%20sandbox_contract_wrapper%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20pub%20mod%20utils%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20%60%60%60%0A%0A%20%20%20%20-%20Dependencies%20include%20(from%20%5Bcontract_wrapper%2FCargo.toml%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Fblob%2Fmaster%2Feth2near%2Fcontract_wrapper%2FCargo.toml))%0A%0A%20%20%20%20%20%20%20%20%20%20%20%20%60%60%60%0A%20%20%20%20%20%20%20%20%20%20%20%20%5Bdependencies%5D%0A%20%20%20%20%20%20%20%20%20%20%20%20borsh%20%3D%20%220.9.3%22%0A%20%20%20%20%20%20%20%20%20%20%20%20futures%20%3D%20%220.3.21%22%0A%20%20%20%20%20%20%20%20%20%20%20%20async-std%20%3D%20%221.12.0%22%0A%20%20%20%20%20%20%20%20%20%20%20%20near-sdk%20%3D%20%224.0.0%22%0A%20%20%20%20%20%20%20%20%20%20%20%20near-jsonrpc-client%20%3D%20%22%3D0.4.0-beta.0%22%0A%20%20%20%20%20%20%20%20%20%20%20%20near-crypto%20%3D%20%220.14.0%22%0A%20%20%20%20%20%20%20%20%20%20%20%20near-primitives%20%3D%20%220.14.0%22%0A%20%20%20%20%20%20%20%20%20%20%20%20near-chain-configs%20%3D%20%220.14.0%22%0A%20%20%20%20%20%20%20%20%20%20%20%20near-jsonrpc-primitives%20%3D%20%220.14.0%22%0A%20%20%20%20%20%20%20%20%20%20%20%20tokio%20%3D%20%7B%20version%20%3D%20%221.1%22%2C%20features%20%3D%20%5B%22rt%22%2C%20%22macros%22%5D%20%7D%0A%20%20%20%20%20%20%20%20%20%20%20%20reqwest%20%3D%20%7B%20version%20%3D%20%220.11%22%2C%20features%20%3D%20%5B%22blocking%22%5D%20%7D%0A%20%20%20%20%20%20%20%20%20%20%20%20serde_json%20%3D%20%221.0.74%22%0A%20%20%20%20%20%20%20%20%20%20%20%20serde%20%3D%20%7B%20version%20%3D%20%221.0%22%2C%20features%20%3D%20%5B%22derive%22%5D%20%7D%0A%20%20%20%20%20%20%20%20%20%20%20%20eth-types%20%3D%20%7B%20path%20%3D%20%22..%2F..%2Fcontracts%2Fnear%2Feth-types%2F%22%2C%20features%20%3D%20%5B%22eip1559%22%5D%7D%0A%20%20%20%20%20%20%20%20%20%20%20%20workspaces%20%3D%20%220.5.0%22%0A%20%20%20%20%20%20%20%20%20%20%20%20anyhow%20%3D%20%221.0%22%0A%20%20%20%20%20%20%20%20%20%20%20%20%60%60%60%0A%0A%20%20-%20%5Beth2near-block-relay-rs%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Ftree%2Fmaster%2Feth2near%2Feth2near-block-relay-rs)%20is%20built%20in%20rust%20and%20integrates%20with%20the%20Ethereum%202.0%20lgihthouse%20consensus%20client%20to%20propogate%20blocks%20to%20near.%0A%20%20%20%20-%20Functionality%20includes%20(from%20%5Blib.rs%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Fblob%2Fmaster%2Feth2near%2Feth2near-block-relay-rs%2Fsrc%2Flib.rs))%0A%0A%20%20%20%20%20%20%20%20%20%20%20%20%60%60%60%0A%20%20%20%20%20%20%20%20%20%20%20%20pub%20mod%20beacon_block_body_merkle_tree%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20pub%20mod%20beacon_rpc_client%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20pub%20mod%20config%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20pub%20mod%20eth1_rpc_client%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20pub%20mod%20eth2near_relay%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20pub%20mod%20execution_block_proof%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20pub%20mod%20hand_made_finality_light_client_update%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20pub%20mod%20init_contract%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20pub%20mod%20last_slot_searcher%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20pub%20mod%20light_client_snapshot_with_proof%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20pub%20mod%20logger%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20pub%20mod%20near_rpc_client%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20pub%20mod%20prometheus_metrics%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20pub%20mod%20relay_errors%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20%60%60%60%0A%0A%20%20%20%20-%20Dependencies%20include%20(from%20%5Beth2near-block-relay-rs%2FCargo.toml%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Fblob%2Fmaster%2Feth2near%2Feth2near-block-relay-rs%2FCargo.toml))%0A%0A%20%20%20%20%20%20%20%20%20%20%20%20%60%60%60%0A%20%20%20%20%20%20%20%20%20%20%20%20types%20%3D%20%20%7B%20git%20%3D%20%22https%3A%2F%2Fgithub.com%2Faurora-is-near%2Flighthouse.git%22%2C%20rev%20%3D%20%22b624c3f0d3c5bc9ea46faa14c9cb2d90ee1e1dec%22%20%7D%0A%20%20%20%20%20%20%20%20%20%20%20%20tree_hash%20%3D%20%7B%20git%20%3D%20%22https%3A%2F%2Fgithub.com%2Faurora-is-near%2Flighthouse.git%22%2C%20%20rev%20%3D%20%22b624c3f0d3c5bc9ea46faa14c9cb2d90ee1e1dec%22%20%7D%0A%20%20%20%20%20%20%20%20%20%20%20%20merkle_proof%20%3D%20%7B%20git%20%3D%20%22https%3A%2F%2Fgithub.com%2Faurora-is-near%2Flighthouse.git%22%2C%20rev%20%3D%20%22b624c3f0d3c5bc9ea46faa14c9cb2d90ee1e1dec%22%20%7D%0A%20%20%20%20%20%20%20%20%20%20%20%20eth2_hashing%20%3D%20%7B%20git%20%3D%20%22https%3A%2F%2Fgithub.com%2Faurora-is-near%2Flighthouse.git%22%2C%20rev%20%3D%20%22b624c3f0d3c5bc9ea46faa14c9cb2d90ee1e1dec%22%20%7D%0A%20%20%20%20%20%20%20%20%20%20%20%20eth2_ssz%20%3D%20%7B%20git%20%3D%20%22https%3A%2F%2Fgithub.com%2Faurora-is-near%2Flighthouse.git%22%2C%20rev%20%3D%20%22b624c3f0d3c5bc9ea46faa14c9cb2d90ee1e1dec%22%20%7D%0A%0A%20%20%20%20%20%20%20%20%20%20%20%20eth-types%20%3D%20%7B%20path%20%3D%20%22..%2F..%2Fcontracts%2Fnear%2Feth-types%2F%22%2C%20features%20%3D%20%5B%22eip1559%22%5D%7D%0A%20%20%20%20%20%20%20%20%20%20%20%20eth2-utility%20%20%3D%20%7B%20path%20%3D%20%22..%2F..%2Fcontracts%2Fnear%2Feth2-utility%22%20%7D%0A%0A%20%20%20%20%20%20%20%20%20%20%20%20contract_wrapper%20%3D%20%7B%20path%20%3D%20%22..%2Fcontract_wrapper%22%20%7D%0A%20%20%20%20%20%20%20%20%20%20%20%20finality-update-verify%20%3D%20%7B%20path%20%3D%20%22..%2Ffinality-update-verify%22%20%7D%0A%0A%20%20%20%20%20%20%20%20%20%20%20%20log%20%3D%20%7B%20version%20%3D%20%220.4%22%2C%20features%20%3D%20%5B%22std%22%2C%20%22serde%22%5D%20%7D%0A%20%20%20%20%20%20%20%20%20%20%20%20serde_json%20%3D%20%221.0.74%22%0A%20%20%20%20%20%20%20%20%20%20%20%20serde%20%3D%20%7B%20version%20%3D%20%221.0%22%2C%20features%20%3D%20%5B%22derive%22%5D%20%7D%0A%20%20%20%20%20%20%20%20%20%20%20%20ethereum-types%20%3D%20%220.9.2%22%0A%20%20%20%20%20%20%20%20%20%20%20%20reqwest%20%3D%20%7B%20version%20%3D%20%220.11%22%2C%20features%20%3D%20%5B%22blocking%22%5D%20%7D%0A%20%20%20%20%20%20%20%20%20%20%20%20clap%20%3D%20%7B%20version%20%3D%20%223.1.6%22%2C%20features%20%3D%20%5B%22derive%22%5D%20%7D%0A%20%20%20%20%20%20%20%20%20%20%20%20tokio%20%3D%20%7B%20version%20%3D%20%221.1%22%2C%20features%20%3D%20%5B%22macros%22%2C%20%22rt%22%2C%20%22time%22%5D%20%7D%0A%20%20%20%20%20%20%20%20%20%20%20%20env_logger%20%3D%20%220.9.0%22%0A%20%20%20%20%20%20%20%20%20%20%20%20borsh%20%3D%20%220.9.3%22%0A%20%20%20%20%20%20%20%20%20%20%20%20near-sdk%20%3D%20%224.0.0%22%0A%20%20%20%20%20%20%20%20%20%20%20%20futures%20%3D%20%7B%20version%20%3D%20%220.3.21%22%2C%20default-features%20%3D%20false%20%7D%0A%20%20%20%20%20%20%20%20%20%20%20%20async-std%20%3D%20%221.12.0%22%0A%20%20%20%20%20%20%20%20%20%20%20%20hex%20%3D%20%22*%22%0A%20%20%20%20%20%20%20%20%20%20%20%20toml%20%3D%20%220.5.9%22%0A%20%20%20%20%20%20%20%20%20%20%20%20atomic_refcell%20%3D%20%220.1.8%22%0A%20%20%20%20%20%20%20%20%20%20%20%20bitvec%20%3D%20%22*%22%0A%20%20%20%20%20%20%20%20%20%20%20%20primitive-types%20%3D%20%220.7.3%22%0A%0A%20%20%20%20%20%20%20%20%20%20%20%20near-jsonrpc-client%20%3D%20%22%3D0.4.0-beta.0%22%0A%20%20%20%20%20%20%20%20%20%20%20%20near-crypto%20%3D%20%220.14.0%22%0A%20%20%20%20%20%20%20%20%20%20%20%20near-primitives%20%3D%20%220.14.0%22%0A%20%20%20%20%20%20%20%20%20%20%20%20near-chain-configs%20%3D%20%220.14.0%22%0A%20%20%20%20%20%20%20%20%20%20%20%20near-jsonrpc-primitives%20%3D%20%220.14.0%22%0A%0A%20%20%20%20%20%20%20%20%20%20%20%20prometheus%20%3D%20%7B%20version%20%3D%20%220.9%22%2C%20features%20%3D%20%5B%22process%22%5D%20%7D%0A%20%20%20%20%20%20%20%20%20%20%20%20lazy_static%20%3D%20%221.4%22%0A%20%20%20%20%20%20%20%20%20%20%20%20warp%20%3D%20%220.2%22%0A%20%20%20%20%20%20%20%20%20%20%20%20thread%20%3D%20%22*%22%0A%0A%20%20%20%20%20%20%20%20%20%20%20%20%60%60%60%0A%0A%20%20-%20%5Beth2near-block-relay%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Ftree%2Fmaster%2Feth2near%2Feth2near-block-relay)%20is%20built%20using%20javascript%20and%20supports%20ETH%201.0%20Proof%20of%20Work%20(%60ethhash%60)%20using%20merkle%20patrica%20trees.%0A%20%20%20%20-%20key%20classes%20from%20%5Bindex.js%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Fblob%2Fmaster%2Feth2near%2Feth2near-block-relay%2Findex.js)%20include%0A%20%20%20%20%20%20-%20%60Ethashproof%60%20%3A%20which%20has%20functions%20to%20%60getParseBlock%60%20and%20%60calculateNextEpoch%60%0A%20%20%20%20%20%20-%20%60Eth2NearRelay%60%20%3A%20which%20interacts%20with%20the%20%60ethClientContract%60%20and%20has%20a%20%60run()%60%20function%20which%20loops%20through%20relaying%20blocks%20and%20includes%20additional%20functions%20such%20as%20%60getParseBlock%60%20%2C%20%60submitBlock%60%0A%20%20%20%20-%20Dependencies%20include%20(from%20%5Bpackage.json%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Fblob%2Fmaster%2Feth2near%2Feth2near-block-relay%2Fpackage.json))%0A%0A%20%20%20%20%20%20%20%20%20%20%20%20%60%60%60%0A%20%20%20%20%20%20%20%20%20%20%20%20%22dependencies%22%3A%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%22bn.js%22%3A%20%22%5E5.1.3%22%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%22eth-object%22%3A%20%22https%3A%2F%2Fgithub.com%2Fnear%2Feth-object%23383b6ea68c7050bea4cab6950c1d5a7fa553e72b%22%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%22eth-util-lite%22%3A%20%22near%2Feth-util-lite%23master%22%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%22%40ethereumjs%2Fblock%22%3A%20%22%5E3.4.0%22%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%22merkle-patricia-tree%22%3A%20%22%5E2.1.2%22%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%22prom-client%22%3A%20%22%5E12.0.0%22%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%22promisfy%22%3A%20%22%5E1.2.0%22%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%22rainbow-bridge-utils%22%3A%20%221.0.0%22%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%22got%22%3A%20%22%5E11.8.5%22%0A%20%20%20%20%20%20%20%20%20%20%20%20%7D%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20%60%60%60%0A%0A%20%20-%20%5Bethhashproof%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Ftree%2Fmaster%2Feth2near%2Fethashproof)%3A%20is%20a%20commandline%20to%20calculate%20proof%20data%20for%20an%20ethash%20POW%2C%20it%20is%20used%20by%20project%20%60SmartPool%60%20and%20a%20decentralizedbridge%20between%20Etherum%20and%20EOS%20developed%20by%20Kyber%20Network%20team.%20It%20is%20written%20in%20%60GO%60.%0A%20%20%20%20-%20Features%20Include%201.%20Calculate%20merkle%20root%20of%20the%20ethash%20dag%20dataset%20with%20given%20epoch%202.%20Calculate%20merkle%20proof%20of%20the%20pow%20(dataset%20elements%20and%20their%20merkle%20proofs)%20given%20the%20pow%20submission%20with%20given%20block%20header%203.%20Generate%20dag%20datase%0A%20%20%20%20-%20Dependencies%20include%20(from%20%5Bethahsproof%2Fgo.mod%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Fblob%2Fmaster%2Feth2near%2Fethashproof%2Fgo.mod))%0A%0A%20%20%20%20%20%20%20%20%20%20%20%20%60%60%60%0A%20%20%20%20%20%20%20%20%20%20%20%20require%20(%0A%20%20%20%20%20%20%20%20%20%20%20%20%20github.com%2Fdeckarep%2Fgolang-set%20v1.7.1%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20github.com%2Fedsrzf%2Fmmap-go%20v1.0.0%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20github.com%2Fethereum%2Fgo-ethereum%20v1.10.4%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20github.com%2Fhashicorp%2Fgolang-lru%20v0.5.5-0.20210104140557-80c98217689d%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20golang.org%2Fx%2Fcrypto%20v0.0.0-20210322153248-0c34fe9e7dc2%0A%20%20%20%20%20%20%20%20%20%20%20%20)%0A%20%20%20%20%20%20%20%20%20%20%20%20%60%60%60%0A%0A%20%20-%20%5Bfinality-update-verify%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Ftree%2Fmaster%2Feth2near%2Ffinality-update-verify)%20checks%20and%20updates%20finality%20using%20the%20lighthouse%20beacon%20blocks.%0A%20%20%20%20-%20Functions%20include%20(from%20%5Blib.rs%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Fblob%2Fmaster%2Feth2near%2Ffinality-update-verify%2Fsrc%2Flib.rs))%0A%20%20%20%20%20%20-%20%60fn%20h256_to_hash256(hash%3A%20H256)%20-%3E%20Hash256%60%0A%20%20%20%20%20%20-%20%60fn%20tree_hash_h256_to_eth_type_h256(hash%3A%20tree_hash%3A%3AHash256)%20-%3E%20eth_types%3A%3AH256%60%0A%20%20%20%20%20%20-%20%60fn%20to_lighthouse_beacon_block_header(bridge_beacon_block_header%3A%20%26BeaconBlockHeader%2C)%20-%3E%20types%3A%3ABeaconBlockHeader%20%7Btypes%3A%3ABeaconBlockHeader%60%0A%20%20%20%20%20%20-%20%60pub%20fn%20is_correct_finality_update(ethereum_network%3A%20%26str%2C%20light_client_update%3A%20%26LightClientUpdate%2C%20sync_committee%3A%20SyncCommittee%2C%20)%20-%3E%20Result%3Cbool%2C%20Box%3Cdyn%20Error%3E%3E%60%0A%20%20%20%20-%20Dependencies%20include%20(from%20%5Bfinality-update-verify%2FCargo.toml%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Fblob%2Fmaster%2Feth2near%2Ffinality-update-verify%2FCargo.toml))%0A%0A%20%20%20%20%20%20%20%20%20%20%20%20%60%60%60%0A%20%20%20%20%20%20%20%20%20%20%20%20%5Bdependencies%5D%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20eth-types%20%3D%20%7B%20path%20%3D%22..%2F..%2Fcontracts%2Fnear%2Feth-types%2F%22%2C%20features%20%3D%20%5B%22eip1559%22%5D%7D%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20bls%20%3D%20%7B%20git%20%3D%20%22https%3A%2F%2Fgithub.com%2Faurora-is-near%2Flighthouse.git%22%2C%20rev%20%3D%20%22b624c3f0d3c5bc9ea46faa14c9cb2d90ee1e1dec%22%20%7D%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20eth2-utility%20%20%3D%20%7B%20path%20%3D%22..%2F..%2Fcontracts%2Fnear%2Feth2-utility%22%7D%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20tree_hash%20%3D%20%7B%20git%20%3D%20%22https%3A%2F%2Fgithub.com%2Faurora-is-near%2Flighthouse.git%22%2C%20rev%20%3D%20%22b624c3f0d3c5bc9ea46faa14c9cb2d90ee1e1dec%22%20%7D%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20types%20%3D%20%20%7B%20git%20%3D%20%22https%3A%2F%2Fgithub.com%2Faurora-is-near%2Flighthouse.git%22%2C%20rev%20%3D%20%22b624c3f0d3c5bc9ea46faa14c9cb2d90ee1e1dec%22%20%7D%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20bitvec%20%3D%20%221.0.0%22%0A%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%5Bdev-dependencies%5D%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20eth2_to_near_relay%20%3D%20%7B%20path%20%3D%20%22..%2Feth2near-block-relay-rs%22%7D%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20serde_json%20%3D%20%221.0.74%22%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20serde%20%3D%20%7B%20version%20%3D%20%221.0%22%2C%20features%20%3D%20%5B%22derive%22%5D%20%7D%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20toml%20%3D%20%220.5.9%22%0A%20%20%20%20%20%20%20%20%20%20%20%20%60%60%60%0A%0AThe%20following%20smart%20contracts%20are%20deployed%20on%20Ethereum%20and%20used%20for%20propogating%20blocks%20from%20NEAR%20to%20Ethereum.%0A%0A-%20%5BSmart%20Contracts%20deployed%20on%20Ethereum%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Ftree%2Fmaster%2Fcontracts%2Feth)%20including%0A%20%20-%20%5BNear%20Bridge%20Contracts%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Ftree%2Fmaster%2Fcontracts%2Feth%2Fnearbridge%2Fcontracts)%20including%20%5BNearBridge.sol%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Fblob%2Fmaster%2Fcontracts%2Feth%2Fnearbridge%2Fcontracts%2FNearBridge.sol)%20which%20the%20interface%20%5BINearBridge.sol%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Fblob%2Fmaster%2Fcontracts%2Feth%2Fnearbridge%2Fcontracts%2FINearBridge.sol)%0A%20%20-%20Interface%20Overview%0A%0A%20%20%20%20%20%20%20%20%60%60%60%0A%20%20%20%20%20%20%20%20interface%20INearBridge%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20event%20BlockHashAdded(uint64%20indexed%20height%2C%20bytes32%20blockHash)%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20event%20BlockHashReverted(uint64%20indexed%20height%2C%20bytes32%20blockHash)%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20function%20blockHashes(uint64%20blockNumber)%20external%20view%20returns%20(bytes32)%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20function%20blockMerkleRoots(uint64%20blockNumber)%20external%20view%20returns%20(bytes32)%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20function%20balanceOf(address%20wallet)%20external%20view%20returns%20(uint256)%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20function%20deposit()%20external%20payable%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20function%20withdraw()%20external%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20function%20initWithValidators(bytes%20calldata%20initialValidators)%20external%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20function%20initWithBlock(bytes%20calldata%20data)%20external%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20function%20addLightClientBlock(bytes%20calldata%20data)%20external%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20function%20challenge(address%20payable%20receiver%2C%20uint256%20signatureIndex)%20external%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20function%20checkBlockProducerSignatureInHead(uint256%20signatureIndex)%20external%20view%20returns%20(bool)%3B%0A%20%20%20%20%20%20%20%20%7D%0A%20%20%20%20%20%20%20%20%60%60%60%0A%0A%20%20-%20Key%20Storage%20items%20for%20epoch%20and%20block%20information%0A%0A%20%20%20%20%20%20%20%20%60%60%60%0A%20%20%20%20%20%20%20%20%20%20%20%20Epoch%5B3%5D%20epochs%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20uint256%20curEpoch%3B%0A%0A%20%20%20%20%20%20%20%20%20%20%20%20mapping(uint64%20%3D%3E%20bytes32)%20blockHashes_%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20mapping(uint64%20%3D%3E%20bytes32)%20blockMerkleRoots_%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20mapping(address%20%3D%3E%20uint256)%20public%20override%20balanceOf%3B%0A%20%20%20%20%20%20%20%20%60%60%60%0A%0A%20%20-%20Signing%20and%20Serializing%20Primitives%0A%20%20%20%20-%20%5BNearDecoder.sol%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Fblob%2Fmaster%2Fcontracts%2Feth%2Fnearbridge%2Fcontracts%2FNearDecoder.sol)%3A%20handles%20decoing%20of%20Public%20Keys%2C%20Signatures%2C%20BlockProducers%20and%20LightClientBlocks%20using%20%60Borsh.sol%60%0A%20%20%20%20-%20%5BUtils.sol%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Fblob%2Fmaster%2Fcontracts%2Feth%2Fnearbridge%2Fcontracts%2FUtils.sol)%3A%20handles%20reading%20and%20writing%20to%20memory%2C%20memoryToBytes%20and%20has%20functions%20such%20as%20%60keccak256Raw%60%20and%20%60sha256Raw%60%0A%20%20%20%20-%20%5BBorsh.sol%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Fblob%2Fmaster%2Fcontracts%2Feth%2Fnearbridge%2Fcontracts%2FBorsh.sol)%3A%20%5BBorsh%5D(https%3A%2F%2Fborsh.io%2F)%3A%20Binary%20Object%20Representation%20Serializer%20for%20Hashing.%20It%20is%20meant%20to%20be%20used%20in%20security-critical%20projects%20as%20it%20prioritizes%20consistency%2C%20safety%2C%20speed%3B%20and%20comes%20with%20a%20strict%20specification.%0A%20%20%20%20-%20%5BEd25519.sol%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Fblob%2Fmaster%2Fcontracts%2Feth%2Fnearbridge%2Fcontracts%2FEd25519.sol)%3A%20%5BEd25519%5D(https%3A%2F%2Fed25519.cr.yp.to%2F)%20high-speed%20high-security%20signatures%0A%0A%20%20-%20%5BNear%20Prover%20Contracts%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Ftree%2Fmaster%2Fcontracts%2Feth%2Fnearprover%2Fcontracts)%0A%20%20%20%20-%20%5BNearProver.sol%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Fblob%2Fmaster%2Fcontracts%2Feth%2Fnearprover%2Fcontracts%2FNearProver.sol)%3A%20Has%20a%20%60proveOutcome%60%20which%20validates%20the%20outcome%20merkle%20proof%20and%20the%20block%20proof%20is%20valid%20using%20%60_computeRoot%60%20which%20is%20passed%20in%20a%20%60bytes32%20node%2C%20ProofDecoder.MerklePath%20memory%20proof%60%0A%20%20%20%20-%20%5BProofDecoder.sol%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Fblob%2Fmaster%2Fcontracts%2Feth%2Fnearprover%2Fcontracts%2FProofDecoder.sol)%3A%20Uses%20MerklePaths%20to%20provide%20decoding%20functions%20such%20as%20%60decodeExecutionStatus%60%2C%20%60decodeExecutionOutcome%60%2C%20%60decodeExecutionOutcomeWithId%60%2C%20%60decodeMerklePathItem%60%2C%20%60decodeMerklePath%60%20and%20%60decodeExecutionOutcomeWithIdAndProof%60.%20It%20relies%20on%20the%20primitives%20%60Borsh.sol%60%20and%20%60NearDecoder.sol%60%20above.%0A",lastUpdatedAt:1753129136e3},{lazy:()=>o2(()=>import("./ethereum-DFJJOuHp.js"),[]),path:"/research/code/ethereum",type:"mdx",filePath:"research/code/ethereum.mdx",content:"%23%20Ethereum%20Code%0A%0A-%20date%3A%202023-02-04%0A-%20last%20updated%3A%202023-02-04%0A%0A%23%23%20Overview%0A%0AWith%20the%20Introduction%20of%20Ethereum%202.0%3Csup%3E%5B1%5D(%23bp1)%3C%2Fsup%3E%20%3Csup%3E%5B2%5D(%23bp2)%3C%2Fsup%3E%20%3Csup%3E%5B3%5D(%23bp3)%3C%2Fsup%3E%20block%20production%20and%20consensus%20were%20separated%3Csup%3E%5B4%5D(%23bp4)%3C%2Fsup%3E%20into%20execution%20clients%3Csup%3E%5B5%5D(%23bp5)%3C%2Fsup%3E%20and%20consensus%20clients%3Csup%3E%5B6%5D(%23ts6)%3C%2Fsup%3E%20%3Csup%3E%5B7%5D(%23bp7)%3C%2Fsup%3E.%0A%0AThe%20execution%20chain%20implemented%20a%20simplified%20Proof%20of%20Work%3Csup%3E%5B1%5D(%23bp1)%3C%2Fsup%3E%20reducing%20difficutly%20to%20zero%20and%20removing%20the%20need%20for%20omners%20(uncles)%20which%20would%20now%20be%20handled%20by%20the%20beacon%20chain%3Csup%3E%5B3%5D(%23bp3)%3C%2Fsup%3E%20which%20is%20responsible%20for%20providing%20consensus%20%3Csup%3E%5B2%5D(%23bp2)%3C%2Fsup%3E.%0A%0ALight%20Clients%3Csup%3E%5B11%5D(%23ts11)%3C%2Fsup%3E%20were%20also%20introduced.%20To%20facilate%20this%0Aa%20sync%20committee%20of%20512%20current%20validators%20is%20elected%20every%20255%20epochs%2C%20approximately%20every%2027%20hours%20(see%20%5Bsample%20sync%20comittee%20data%5D(%23sync-committee-latest))%2C%20they%20are%20responsible%20for%20signing%20each%20block.%0A%0AAs%20at%20December%2011th%2C%202022%20Ethereum%20has%20487%2C920%20validators%3Csup%3E%5B8%5D(%23bp8)%3C%2Fsup%3E%20with%20a%20sample%20epoch%20(%5B166581%5D(https%3A%2F%2Fbeaconcha.in%2Fepoch%2F166581))%20and%20slot%20(%5B5%2C330%2C592%5D(https%3A%2F%2Fbeaconcha.in%2Fslot%2F5330592))%20having%20%5B139%20transactions%5D(https%3A%2F%2Fbeaconcha.in%2Fslot%2F5330592%23transactions)%20with%20%5B19%2C227%20votes%5D(https%3A%2F%2Fbeaconcha.in%2Fslot%2F5330592%23votes)%20from%2063%20committees%20and%20%5B126%20aggregated%20committe%20attestations%5D(https%3A%2F%2Fbeaconcha.in%2Fslot%2F5330592%23attestations).%0A%0A%23%23%20Abstract%0A%0AThis%20research%20follows%20on%20from%20What%20to%20build%20next%20in%20Zero%20Knowledge%3Csup%3E%5B1%5D(%23ov1)%3C%2Fsup%3E%2C%20Crosschain%20Future%3Csup%3E%5B2%5D(%23ov2)%3C%2Fsup%3E%20and%20Technical%20Problems%20Overview%3Csup%3E%5B3%5D(%23ov3)%3C%2Fsup%3E.%0A%0AHere%20we%20propose%20an%20approach%20for%20building%20a%20trustless%20bridging%20infrastructure%20between%20Ethereum%20and%20Multiple%20Chains%2C%20complete%20with%20costing%20information%20for%20storage%2C%20proof%20generation%20and%20verification%20across%20multiple%20chains.%0A%0AWe%20review%20technical%20approaches%20for%20Trustless%20Bridge%20Design%20using%20Zero%20Knowledge%20Proofs%20including%20storage%20and%20validation%20of%20block%20headers%2C%20verification%20of%20ethereum%20events%20on%20other%20chains%20and%20asset%20bridging%20functionality.%0A%0AFor%20completenes%20we%20include%20a%20technical%20review%20of%20Ethereum%202.0%20block%20production%2C%20consensus%2C%20signature%20schemes%20and%20light%20client%20functionality.%0A%0A%23%23%20Trustless%20Bridge%20Design%0A%0A%23%23%23%20High%20level%20Approach%0A%0A1.%20Define%20logic%20flow%20for%20bridging%20data%20(ERC20%20initially)%20between%20Etheruem%20and%20a%20target%20chain.%0A2.%20Identify%20Key%20Data%20Points%20which%20Need%20to%20be%20Synched%20and%20Frequency%0A%20%20%201.%20Active%20Validators%20(Sync%20Committee%3Csup%3E%5B10%5D(%23ts10)%3C%2Fsup%3E)%20%3A%20every%20255%20epochs%2C%20approximately%2027%20hours.%0A%20%20%202.%20Epoch%20Committee%20Verification%3A%20every%20epoch%20(32%20slots)%2C%20approx%206.4%20minutes.%0A%20%20%203.%20Block%20Headers%3A%20every%20epoch%20(32%20slots)%2C%20approx%206.4%20minutes.%0A%20%20%204.%20Bridge%20Transactions%3A%20as%20Needed.%0A3.%20Identify%20Proving%20Mechanisms%20for%20Data%20Points%0A%20%20%201.%20Sync%20Committee%3A%20SSZ%20Proof%0A%20%20%202.%20Epoch%20Comittees%0A%20%20%203.%20Block%20Headers%3A%20Aggregated%20BLS%20Signature%20Verification%20Proof%2C%20Patricia%20Merkle%0A%20%20%204.%20Bridge%20Transactions%3A%20Transaction%20Proofs%0A4.%20Use%20Zero%20Knowledge%20Proofs%20where%20possible%20to%20reduce%20storage%20and%20compute%20costing%0A%20%20%201.%20Sync%20Committee%3A%20SSZ%20Proof%0A%20%20%202.%20Epoch%20Comittees%3A%0A%20%20%203.%20Block%20Headers%3A%20Aggregated%20BLS%20Signature%20Verification%20Proof%2C%20Patricia%20Merkle%0A%20%20%204.%20Bridge%20Transactions%3A%20Transaction%20Proofs%0A5.%20Relayer%20and%20Proving%20Infrastructure%0A%20%20%201.%20Relayer%20operational%20and%20verification%20costs%20and%20incentives%0A%20%20%202.%20Proving%20infrastructure%20and%20proof%20generation%20costs%20(proofs%20can%20be%20used%20for%20multiple%20chains)%0A%20%20%203.%20Bridging%20assets%20infrastructure%2C%20incentives%20and%20transactional%20costs%0A%0AReference%20design%20articles%20include%20Succinct%3Csup%3E%5B1%5D(%23tb1)%3C%2Fsup%3E%20and%20%5BAppendix%20B%5D(%23appendix-b-proving-and-verification-mechanisms)%20includes%20codebases%20for%20proving%20and%20verification%20mechanisms.%0A%0A%23%23%23%20Logic%20Flow%0A%0A**Consensus**%0A%0A1.%20Active%20Validator%20Set%20is%20retrieved%0A2.%20Sync%20Committee%20is%20Validated%20(27%20hours)%0A3.%20Finality%20Checkpoint%20is%20Validated%20(per%20epoch)%0A4.%20Block%20(headers)%20are%20relayed%0A5.%20Block%20(headers)%20are%20validated%3A%20BLS%20Signatures%20on%20Block%20and%20Block%20is%20in%20the%20canonical%20chain.%0A%0A**Transaction**%0A%0A1.%20Ethereum%3A%20A%20transaction%20to%20bridge%20100%20ISO%20Tokens%20is%20sent%0A2.%20Relayer%3A%20Picks%20up%20Transaction%20(via%20event%20listening)%20and%20forwards%20to%20Target%20Light%20Client.%0A3.%20Light%20Client%20Verifies%20Transaction%20is%20in%20a%20valid%20block.%0A%20%20%201.%20Transaction%20is%20in%20Block%0A%20%20%202.%20Block%20is%20in%20Cannonical%20Chain%0A%20%20%203.%20Block%20has%20been%20signed%20correctly%20by%20valid%20committee%0A%20%20%204.%20Committe%20is%20valid%20based%20on%20the%20committe%20allocated%20to%20the%20slot%0A%20%20%205.%20Sync%20Committee%20signed%20the%20Comittee%20Allocation%0A%0A%23%23%23%20Key%20Data%20Points%20and%20Storage%0A%0A-%20Sync%20Committe%20Validator%20Set%20Change%20(Every%20255%20epochs%20approx%2027%20hours)%0A%0A-%20Epoch%20Committee%20Verification%20(Every%20Epoch%20(32%20slots)%20approx%206.4%20minutes)%0A-%20Block%20Verification%20(Every%20slot%20appox%2012%20seconds)%0A-%20Transaction%20Verifications%20(As%20Needed)%0A%0A%23%23%23%20Proving%20Logic%20and%20Costs%0A%0A-%20Sync%20committee%20proof%0A%0A-%20Epoch%20comittees%20proof%0A-%20Block%20proofs%0A-%20Transaction%20proofs%0A%0A%23%23%23%20ZKP%20Proving%20and%20Verification%20Costs%20ZKP%20Comparison%0A%0A%23%23%23%20Relayer%20and%20Prover%20Infrastructure%0A%0A%23%23%23%20Bridging%20Assets%0A%0A-%20Asset%20Lockers%0A-%20Mint%20and%20Burn%20Process%0A-%20Utilization%20of%20Locked%20Assets%0A%0A%23%23%20Ethereum%202.0%20Technical%20Overview%0A%0A%23%23%23%20Block%20Production%0A%0AValidators%20run%20both%20an%20Ethereum%201%20client%20(e.g.%20geth)%20and%20a%20Beacon%20Chain%20Client%20(e.g.%20prysm).%20The%20geth%20client%20recieves%20transactions%20and%20places%20them%20into%20blocks.%20For%20additional%20details%20see%20the%20Ethereum%20Builder%20Specs%3Csup%3E%5B12%5D(%23ts12)%3C%2Fsup%3E.%20The%20following%20diagrams%20give%20an%20overview%20of%20how%20blocks%20are%20proposed%20and%20how%20MEV%20Boost%3Csup%3E%5B13%5D(%23ts13)%3C%2Fsup%3E%20could%20be%20integrated.%20For%20simplification%20we%20can%20replace%20mev_boost%20and%20relay%20with%20geth%20in%20the%20block%20proposal%20diagram%20as%20the%20majority%20of%20validators%20simply%20run%20a%20geth%20node.%0A%0A!%5BBlock%20Proposal%5D(%2Fassets%2Fresearch%2Fblock-proposal.png%20%22Block%20Proposal%22)%0A%0A%23%23%23%20Slots%20and%20Epochs%20%3Csup%3E%5B6%5D(%23ts6)%3C%2Fsup%3E%0A%0A%3E%20The%20Beacon%20Chain%20provides%20the%20heartbeat%20to%20Ethereum%E2%80%99s%20consensus.%20Each%20slot%20is%2012%20seconds%20and%20an%20epoch%20is%2032%20slots%3A%206.4%20minutes.%0A%0A!%5BSlots%20and%20Epochs%5D(%2Fassets%2Fresearch%2FBeacon-Chain-Slots-and-Epochs.png.webp%20%22Slots%20and%20Epochs%22)%0A%0A%23%23%23%20Block%20Proposals%0A%0AWhen%20a%20validator%20is%20nominated%20as%20a%20proposer%20for%20a%20slot%20in%20an%20Epoch%20they%20propose%20a%20block%20gathered%20from%20there%20Ethereum%201%20client.%0A%0AThis%20proposed%20block%20is%20attested%20to%20by%20other%20validators%20who%20have%20been%20assigned%20as%20committe%20members%20for%20this%20slot%3Csup%3E%5B6%5D(%23ts6)%3C%2Fsup%3E.%0A%0A%3E%20A%20block%20proposer%20is%20a%20validator%20that%20has%20been%20pseudorandomly%20selected%20to%20build%20a%20block.%0A%3E%0A%3E%20Most%20of%20the%20time%2C%20validators%20are%20attesters%20that%20vote%20on%20blocks.%20These%20votes%20are%20recorded%20in%20the%20Beacon%20Chain%20and%20determine%20the%20head%20of%20the%20Beacon%20Chain.%0A%0A!%5BValidators%20and%20Attestations%5D(%2Fassets%2Fresearch%2FBeacon-Chain-Validators.png%20%22Validators%20and%20Attestations%22)%0A%0A%23%23%23%20Committees%0A%0A%3E%20A%20committee%20is%20a%20group%20of%20validators.%20For%20security%2C%20each%20slot%20has%20committees%20of%20at%20least%20128%20validators.%20An%20attacker%20has%20less%20than%20a%20one%20in%20a%20trillion%20probability%20of%20controlling%20%E2%85%94%20of%20a%20committee.%0A%3E%0A%3E%20The%20concept%20of%20a%20randomness%20beacon%20that%20emits%20random%20numbers%20for%20the%20public%2C%20lends%20its%20name%20to%20the%20Ethereum%20Beacon%20Chain.%20The%20Beacon%20Chain%20enforces%20consensus%20on%20a%20pseudorandom%20process%20called%20RANDAO.%0A%0A!%5BCommittees%5D(%2Fassets%2Fresearch%2FBeacon-Chain-RANDAO.png%20%22Committees%22)%0A%0A%23%23%23%20Attestations%0A%0AThe%20attestation%20lifecyle%3Csup%3E%5B9%5D(%23ts9)%3C%2Fsup%3E%20involves%0A%0A1.%20Generation%20of%20the%20proposed%20Block%0A2.%20Propagation%20of%20the%20block%20to%20committee%20members%20to%20vote%20on%20and%20sign%0A3.%20Aggregation%20of%20the%20votes%20(signatures)%20of%20the%20committee%20members%20by%20Aggregators%0A4.%20Propagation%20of%20the%20aggregated%20attestations%20back%20to%20the%20block%20Proposer%0A5.%20Inclusion%20of%20the%20block%20in%20the%20Beaconchain%0A%0A!%5BAttestation%20Life%20Cycle%5D(%2Fassets%2Fresearch%2FAttestationLifeCycle.png%20%22Attestation%20Life%20Cycle%22)%0A%0A%23%23%23%20Checkpoints%20and%20Finality%3Csup%3E%5B6b%5D(%23ts6b)%3C%2Fsup%3E%0A%0A%3E%20When%20an%20epoch%20ends%2C%20if%20its%20checkpoint%20has%20garnered%20a%20%E2%85%94%20supermajority%2C%20the%20checkpoint%20gets%20justified.%0A%0A!%5BCheckpoints%5D(%2Fassets%2Fresearch%2FBeacon-Chain-Checkpoints.jpg%20%22Checkpoints%22)%0A%0A%3E%20If%20a%20checkpoint%20B%20is%20justified%20and%20the%20checkpoint%20in%20the%20immediate%20next%20epoch%20becomes%20justified%2C%20then%20B%20becomes%20finalized.%20Typically%2C%20a%20checkpoint%20is%20finalized%20in%20two%20epochs%2C%2012.8%20minutes.%0A%0A!%5BFinality%5D(%2Fassets%2Fresearch%2FBeacon-Chain-Justification-and-Finalization.png%20%22Finality%22)%0A%0A%23%23%23%20Sync%20Committee%20%3Csup%3E%5B10%5D(%23ts10)%3C%2Fsup%3E%0A%0AA%20sync%20committee%20of%20512%20current%20validators%20is%20elected%20every%20255%20epochs%2C%20approximately%20every%2027%20hours%20(see%20%5Bsample%20sync%20comittee%20data%5D(%23sync-committee-latest)).%0AThey%20are%20responsible%20for%20signing%20each%20block%20which%20records%20which%20sync%20committee%20members%20(validtors)%20signed%20the%20block%2C%20held%20in%20%60syncaggregate_bits%60%2C%20and%20creates%20a%20bls%20aggregate%20signature%20held%20in%20%60syncaggregate_signature%60%20(see%20%5Bblock-data%5D(%23block-data-for-slot-5330592)).%0A%0A%60%60%60%0A%20%20%20%20%22syncaggregate_bits%22%3A%20%220xdffffffffffffffffffffffffffffff7fffffffffffffffffffffffffffffffffffffffffffffffffffffffdfffffffffffffffdffffffffffffffffffffffff%22%2C%0A%20%20%20%20%22syncaggregate_participation%22%3A%200.9921875%2C%0A%20%20%20%20%22syncaggregate_signature%22%3A%20%220x95332c55790018eed3d17eada01cb4045348d09137505bc8697eeedaa3800a830ee2c138251850a9577f62a5488419ef0a722579156a177fb3a147017f1077af5d778f46a4cdf815fc450129d135fe5286e16df68333592e4aa45821bde780dd%22%2C%0A%60%60%60%0A%0AThis%20is%20used%20in%20Altair%20Light%20Client%20--%20Sync%20Protocol%3Csup%3E%5B11%5D(%23ts11)%3C%2Fsup%3E%20which%20enables%20the%20beacon%20chain%20to%20be%20light%20client%20friendly%20for%20constrained%20environments%20to%20access%20Ethereum.%0A%0A%23%23%23%20Validator%20Lifecycle%0A%0AFollowing%20is%20an%20overview%20of%20statuses%20for%20validators%20in%20Ethereum%202.0%20phase%200%20%3Csup%3E%5B14%5D(%23ts14)%3C%2Fsup%3E.%0A%0A%3E%201.%20**Deposited**%3A%20the%20validator%20has%20made%20a%20deposit%20and%20has%20registered%20in%20BeaconState.%0A%3E%202.%20**Eligible%20to%20be%20activated%20(Pending)**%3A%20the%20validator%20is%20eligible%20to%20be%20activated.%0A%3E%203.%20**Activated**%3A%20the%20validator%20is%20activated%0A%3E%20%20%20%20-%20_Note%20that%20the%20validator%20may%20be%20%E2%80%9Celigible%20to%20be%20activated%2C%20but%20has%20not%20been%20activated%20yet%E2%80%9D._%0A%3E%204.%20**Slashed**%3A%20the%20validator%20has%20been%20slashed%0A%3E%205.%20**Exited**%3A%20the%20validator%20is%20exited%0A%3E%206.%20**Withdrawable**%3A%20the%20validator%20is%20withdrawable%0A%3E%20%20%20%20-%20_Note%20that%20the%20validator%20will%20be%20able%20to%20withdraw%20to%20EEs%20in%20phase%202_%0A%3E%0A%3E%20_Note%20that%20in%20some%20cases%2C%20a%20validator%20can%20be%20in%20multiple%20statuses%20at%20the%20same%20time%2C%20e.g.%2C%20an%20active%20validator%20may%20be%20%E2%80%9Cactivated%20and%20slashed%E2%80%9D._%0A%0A!%5BValidator%20Status%20Transition%5D(%2Fassets%2Fresearch%2FValidatorStateTransition.png%20%22Validator%20Status%20Transition%22)%0A%0A%23%23%20Ethreum%202.0%20Technical%20Deep%20Dive%0A%0A%23%23%23%20Block%20Production%0A%0A**Process%20Flow**%0A%0A-%20Transactions%20are%20placed%20in%20%5Btxpool%5D(https%3A%2F%2Fgithub.com%2Fethereum%2Fgo-ethereum%2Ftree%2Fmaster%2Fcore%2Ftxpool)%0A-%20The%20transaction%20pool%20is%20read%20and%20%5Bblocks%5D(https%3A%2F%2Fgithub.com%2Fethereum%2Fgo-ethereum%2Fblob%2Frelease%2F1.9%2Fcore%2Ftypes%2Fblock.go%23L169)%20are%20produced%20by%20the%20%5Bminer%5D(https%3A%2F%2Fgithub.com%2Fethereum%2Fgo-ethereum%2Fblob%2Fmaster%2Fminer%2Fminer.go)%0A-%20Blocks%20Headers%20get%20forwarded%20to%20the%20Beacon%20chain%20once%20they%20pass%20%5Bbeacon%20consensus%5D(https%3A%2F%2Fgithub.com%2Fethereum%2Fgo-ethereum%2Fblob%2Fmaster%2Fconsensus%2Fbeacon%2Fconsensus.go)%0A-%20The%20Beacon%20chain%20embeds%20the%20EthChain%20Header%20into%20a%20%5BBeaconBlock%5D(https%3A%2F%2Fgithub.com%2Fprysmaticlabs%2Fprysm%2Fblob%2Fdevelop%2Fconsensus-types%2Fblocks%2Ftypes.go%23L43)%0A%0A%23%23%23%20Consensus%20and%20Finality%0A%0AAttestation%20Process%20Flow%0A%0A-%20Proposing%20Block%0A-%20Signing%20Blocks%0A-%20Aggregated%20Attestation%20generation%0A-%20Block%20Proposal%20and%20Inclusion%20of%20Attestation%0A-%20The%20%5BSignedBeaconBlock%5D(https%3A%2F%2Fgithub.com%2Fprysmaticlabs%2Fprysm%2Fblob%2Fdevelop%2Fconsensus-types%2Fblocks%2Ftypes.go%23L72)%20is%20added%20to%20the%20chain%0A%0AAttestations%20Block(LMD%20Ghost%20Vote)%20and%20Epoch%20Checkpoints%20(FFG%20Votes)%0A%0A-%20The%20validators%20in%20the%20committee%20attest%20to%20the%20validity%20of%20the%20block%20(LMD%20Ghost%20Vote)%0A-%20The%20validators%20in%20the%20comittee%20attest%20to%20the%20first%20block%20in%20the%20Epoch%20(FFG%20Vote)%0A%0AFrom%20%5BAttestations%2C%20ethereum.org%5D(https%3A%2F%2Fethereum.org%2Fen%2Fdevelopers%2Fdocs%2Fconsensus-mechanisms%2Fpos%2Fattestations)%0A%0A%3E%20Every%20epoch%20(6.4%20minutes)%20a%20validator%20proposes%20an%20attestation%20to%20the%20network.%20The%20attestation%20is%20for%20a%20specific%20slot%20in%20the%20epoch.%20The%20purpose%20of%20the%20attestation%20is%20to%20vote%20in%20favor%20of%20the%20validator's%20view%20of%20the%20chain%2C%20in%20particular%20the%20most%20recent%20justified%20block%20and%20the%20first%20block%20in%20the%20current%20epoch%20(known%20as%20source%20and%20target%20checkpoints).%20This%20information%20is%20combined%20for%20all%20participating%20validators%2C%20enabling%20the%20network%20to%20reach%20consensus%20about%20the%20state%20of%20the%20blockchain.%0A%3E%0A%3E%20The%20attestation%20contains%20the%20following%20components%3A%0A%3E%0A%3E%20-%20aggregation_bits%3A%20a%20bitlist%20of%20validators%20where%20the%20position%20maps%20to%20the%20validator%20index%20in%20their%20committee%3B%20the%20value%20(0%2F1)%20indicates%20whether%20the%20validator%20signed%20the%20data%20(i.e.%20whether%20they%20are%20active%20and%20agree%20with%20the%20block%20proposer)%0A%3E%20-%20data%3A%20details%20relating%20to%20the%20attestation%2C%20as%20defined%20below%0A%3E%20-%20signature%3A%20a%20BLS%20signature%20that%20aggregates%20the%20signatures%20of%20individual%20validators%0A%3E%0A%3E%20The%20first%20task%20for%20an%20attesting%20validator%20is%20to%20build%20the%20data.%20The%20data%20contains%20the%20following%20information%3A%0A%3E%0A%3E%20-%20slot%3A%20The%20slot%20number%20that%20the%20attestation%20refers%20to%0A%3E%20-%20index%3A%20A%20number%20that%20identifies%20which%20committee%20the%20validator%20belongs%20to%20in%20a%20given%20slot%0A%3E%20-%20beacon_block_root%3A%20Root%20hash%20of%20the%20block%20the%20validator%20sees%20at%20the%20head%20of%20the%20chain%20(the%20result%20of%20applying%20the%20fork-choice%20algorithm)%0A%3E%20-%20source%3A%20Part%20of%20the%20finality%20vote%20indicating%20what%20the%20validators%20see%20as%20the%20most%20recent%20justified%20block%0A%3E%20-%20target%3A%20Part%20of%20the%20finality%20vote%20indicating%20what%20the%20validators%20see%20as%20the%20first%20block%20in%20the%20current%20epoch%0A%3E%0A%3E%20Once%20the%20data%20is%20built%2C%20the%20validator%20can%20flip%20the%20bit%20in%20aggregation_bits%20corresponding%20to%20their%20own%20validator%20index%20from%200%20to%201%20to%20show%20that%20they%20participated.%0A%3E%0A%3E%20Finally%2C%20the%20validator%20signs%20the%20attestation%20and%20broadcasts%20it%20to%20the%20network.%0A%0A**Technical%20Details**%0A%0AFollowing%20is%20an%20overview%20of%20the%20state%20structure%20and%20logic%20for%20generating%20committees%20and%20aggregating%20attestations.%20For%20data%20structures%2C%20please%20see%20%5BBeacon%20State%20Data%20Structures%20from%20Prysm%5D(%23beacon-state-data-structures-from-prysm)%20and%20%5Bweb3signer_types%20from%20prysm%5D(%23web3signer_types-from-prysm).%0A%0A%5BBeaconState%5D(https%3A%2F%2Fpkg.go.dev%2Fgithub.com%2Fprysmaticlabs%2Fprysm%2Fv3%40v3.1.2%2Fbeacon-chain%2Fstate%23BeaconState)%20contains%20both%20a%20%5BReadOnlyBeaconState%5D(https%3A%2F%2Fpkg.go.dev%2Fgithub.com%2Fprysmaticlabs%2Fprysm%2Fv3%40v3.1.2%2Fbeacon-chain%2Fstate%23ReadOnlyBeaconState)%20and%20a%20%5BWriteOnlyBeaconState%5D(https%3A%2F%2Fpkg.go.dev%2Fgithub.com%2Fprysmaticlabs%2Fprysm%2Fv3%40v3.1.2%2Fbeacon-chain%2Fstate%23WriteOnlyBeaconState)%20wich%20contain%20%5BReadOnlyValidators%5D(https%3A%2F%2Fpkg.go.dev%2Fgithub.com%2Fprysmaticlabs%2Fprysm%2Fv3%40v3.1.2%2Fbeacon-chain%2Fstate%23ReadOnlyValidators)%20and%20%5BReadOnlyRandaoMixes%5D(https%3A%2F%2Fpkg.go.dev%2Fgithub.com%2Fprysmaticlabs%2Fprysm%2Fv3%40v3.1.2%2Fbeacon-chain%2Fstate%23ReadOnlyRandaoMixes)%20and%20%5BWriteOnlyValidators%5D(https%3A%2F%2Fpkg.go.dev%2Fgithub.com%2Fprysmaticlabs%2Fprysm%2Fv3%40v3.1.2%2Fbeacon-chain%2Fstate%23WriteOnlyValidators)%20and%20%5BWriteOnlyRandaoMixes%5D(https%3A%2F%2Fpkg.go.dev%2Fgithub.com%2Fprysmaticlabs%2Fprysm%2Fv3%40v3.1.2%2Fbeacon-chain%2Fstate%23WriteOnlyRandaoMixes)%20respectively.%0A%0AAt%20the%20beginning%20of%20each%20epoch%20%5Bfunc%20ProcessRandaoMixesReset%5D(https%3A%2F%2Fpkg.go.dev%2Fgithub.com%2Fprysmaticlabs%2Fprysm%2Fv3%40v3.1.2%2Fbeacon-chain%2Fcore%2Fepoch%23ProcessRandaoMixesReset)%20processes%20the%20final%20updates%20to%20RANDAO%20mix%20during%20epoch%20processing.%20This%20calls%20%5BRandaoMix%5D(https%3A%2F%2Fpkg.go.dev%2Fgithub.com%2Fprysmaticlabs%2Fprysm%2Fv3%40v3.1.2%2Fbeacon-chain%2Fcore%2Fhelpers%23RandaoMix)%20which%20returns%20the%20randao%20mix%20(xor'ed%20seed)%20of%20a%20given%20slot.%20It%20is%20used%20to%20shuffle%20validators.%0A%0AFollowing%20are%20sample%20mixes%20generated%20from%20%5Bfunc%20TestRandaoMix_OK%5D(https%3A%2F%2Fgithub.com%2Fprysmaticlabs%2Fprysm%2Fblob%2Fv3.1.2%2Fbeacon-chain%2Fcore%2Fhelpers%2Frandao_test.go%23L16)%20by%20adding%20the%20statement%20%60fmt.Printf(%22mix%3A%20%25v%5Cn%22%2C%20mix)%60%0A%0A%60%60%60%0Amix%3A%20%5B10%200%200%200%200%200%200%200%200%200%200%200%200%200%200%200%200%200%200%200%200%200%200%200%200%200%200%200%200%200%200%200%5D%0Amix%3A%20%5B40%209%200%200%200%200%200%200%200%200%200%200%200%200%200%200%200%200%200%200%200%200%200%200%200%200%200%200%200%200%200%200%5D%0Amix%3A%20%5B159%20134%200%200%200%200%200%200%200%200%200%200%200%200%200%200%200%200%200%200%200%200%200%200%200%200%200%200%200%200%200%200%5D%0A%60%60%60%0A%0AThe%20shuffle%20functions%20consist%20of%0A%0A-%20%5Bfunc%20ShuffleList%5D(https%3A%2F%2Fpkg.go.dev%2Fgithub.com%2Fprysmaticlabs%2Fprysm%2Fv3%40v3.1.2%2Fbeacon-chain%2Fcore%2Fhelpers%23ShuffleList)%3A%20returns%20list%20of%20shuffled%20indexes%20in%20a%20pseudorandom%20permutation%20%60p%60%20of%20%600...list_size%20-%201%60%20with%20%E2%80%9Cseed%E2%80%9C%20as%20entropy.%20We%20utilize%20'swap%20or%20not'%20shuffling%20in%20this%20implementation%3B%20we%20are%20allocating%20the%20memory%20with%20the%20seed%20that%20stays%20constant%20between%20iterations%20instead%20of%20reallocating%20it%20each%20iteration%20as%20in%20the%20spec.%20This%20implementation%20is%20based%20on%20the%20original%20implementation%20from%20protolambda%2C%20https%3A%2F%2Fgithub.com%2Fprotolambda%2Feth2-shuffle%0A%0A%20%20Following%20is%20an%20example%20of%20a%20shuffled%20list%20generated%20from%20%5BTestShuffleList_OK%5D(https%3A%2F%2Fgithub.com%2Fprysmaticlabs%2Fprysm%2Fblob%2Fv3.1.2%2Fbeacon-chain%2Fcore%2Fhelpers%2Fshuffle_test.go%23L25)%0A%0A%20%20%60%60%60%0A%20%20list1%3A%20%5B0%201%202%203%204%205%206%207%208%209%5D%0A%20%20seed1%3A%20%5B1%20128%2012%200%200%200%200%200%200%200%200%200%200%200%200%200%200%200%200%200%200%200%200%200%200%200%200%200%200%200%200%200%5D%0A%20%20shuffledList1%3A%20%5B0%207%208%206%203%209%204%205%202%201%5D%0A%20%20%60%60%60%0A%0A-%20%5Bfunc%20ShuffleIndex%5D(https%3A%2F%2Fpkg.go.dev%2Fgithub.com%2Fprysmaticlabs%2Fprysm%2Fv3%40v3.1.2%2Fbeacon-chain%2Fcore%2Fhelpers%23ShuffledIndex)%3A%20returns%20%60p(index)%60%20in%20a%20pseudorandom%20permutation%20%60p%60%20of%20%600...list_size%20-%201%60%20with%20%E2%80%9Cseed%E2%80%9C%20as%20entropy.%20We%20utilize%20'swap%20or%20not'%20shuffling%20in%20this%20implementation%3B%20we%20are%20allocating%20the%20memory%20with%20the%20seed%20that%20stays%20constant%20between%20iterations%20instead%20of%20reallocating%20it%20each%20iteration%20as%20in%20the%20spec.%20This%20implementation%20is%20based%20on%20the%20original%20implementation%20from%20protolambda%2C%20https%3A%2F%2Fgithub.com%2Fprotolambda%2Feth2-shuffle%0A%0A-%20%5Bfunc%20ShuffleIndices%5D(https%3A%2F%2Fpkg.go.dev%2Fgithub.com%2Fprysmaticlabs%2Fprysm%2Fv3%40v3.1.2%2Fbeacon-chain%2Fcore%2Fhelpers%23ShuffledIndices)%3A%20ShuffledIndices%20uses%20input%20beacon%20state%20and%20returns%20the%20shuffled%20indices%20of%20the%20input%20epoch%2C%20the%20shuffled%20indices%20then%20can%20be%20used%20to%20break%20up%20into%20committees.%0A%0ACommittes%20are%20formed%20using%20functions%20from%20%5Bbeacon_comittee.go%5D(https%3A%2F%2Fgithub.com%2Fprysmaticlabs%2Fprysm%2Fblob%2Fv3.1.2%2Fbeacon-chain%2Fcore%2Fhelpers%2Fbeacon_committee.go)%0A%0A-%20%5Bfunc%20BeaconComittee%5D(https%3A%2F%2Fpkg.go.dev%2Fgithub.com%2Fprysmaticlabs%2Fprysm%2Fv3%40v3.1.2%2Fbeacon-chain%2Fcore%2Fhelpers%23BeaconCommittee)%3A%20returns%20the%20beacon%20committee%20of%20a%20given%20slot%20and%20committee%20index.%20The%20validator%20indices%20and%20seed%20are%20provided%20as%20an%20argument%20rather%20than%20an%20imported%20implementation%20from%20the%20spec%20definition.%20Having%20them%20as%20an%20argument%20allows%20for%20cheaper%20computation%20run%20time.%20(This%20is%20an%20optomized%20version%20of%20%5Bfunc%20BeaconComitteFromState%5D(https%3A%2F%2Fpkg.go.dev%2Fgithub.com%2Fprysmaticlabs%2Fprysm%2Fv3%40v3.1.2%2Fbeacon-chain%2Fcore%2Fhelpers%23BeaconCommitteeFromState))%0A%0A%20%20Following%20is%20an%20example%20of%20a%20%60beaconComittee%60%20generated%20by%20adding%20the%20following%20lines%20to%20%5BTestBeaconCommitteeFromState_UpdateCacheForPreviousEpoch%5D(https%3A%2F%2Fgithub.com%2Fprysmaticlabs%2Fprysm%2Fblob%2Fv3.1.2%2Fbeacon-chain%2Fcore%2Fhelpers%2Fbeacon_committee_test.go%23L574)%3A%0A%0A%60%60%60%0Avar%20beaconCommittee%20%5B%5Dtypes.ValidatorIndex%0AbeaconCommittee%2C%20err%20%3D%20BeaconCommitteeFromState(context.Background()%2C%20state%2C%201%20%2F_previous%20epoch_%2F%2C%200)%0Afmt.Printf(%22beaconComittee%3A%20%25%2Bv%5Cn%22%2C%20beaconCommittee)%0A%60%60%60%0A%0AResult%0A%0A%60%60%60%0AbeaconComittee%3A%20%5B160%20338%20313%20307%20320%20324%2045%20469%20196%20303%2023%2014%2097%20312%20126%20488%5D%0A%60%60%60%0A%0A-%20%5Bfunc%20CommitteeAssignments%5D(https%3A%2F%2Fpkg.go.dev%2Fgithub.com%2Fprysmaticlabs%2Fprysm%2Fv3%40v3.1.2%2Fbeacon-chain%2Fcore%2Fhelpers%23CommitteeAssignments)%3A%20is%20a%20map%20of%20validator%20indices%20pointing%20to%20the%20appropriate%20committee%20assignment%20for%20the%20given%20epoch.%0A%0A1.%20Determine%20the%20proposer%20validator%20index%20for%20each%20slot.%0A2.%20Compute%20all%20committees.%0A3.%20Determine%20the%20attesting%20slot%20for%20each%20committee.%0A4.%20Construct%20a%20map%20of%20validator%20indices%20pointing%20to%20the%20respective%20committees.%0A%0AFollowing%20is%20an%20example%20of%20%60commitees%60%20generated%20by%20adding%20the%20following%20lines%20to%20%5BTestComputeCommittee_WithoutCache%5D(https%3A%2F%2Fgithub.com%2Fprysmaticlabs%2Fprysm%2Fblob%2Fv3.1.2%2Fbeacon-chain%2Fcore%2Fhelpers%2Fbeacon_committee_test.go%23L23)%0A%0A%60%60%60%0Acommittees%2C%20err%20%3A%3D%20computeCommittee(indices%2C%20seed%2C%200%2C%201%20%2F_%20Total%20committee_%2F)%0Afmt.Printf(%22committees%3A%20%25%2Bv%5Cn%22%2C%20committees)%0A%60%60%60%0A%0A%20%20%20%20%3Cdetails%3E%0A%20%20%20%20%3Csummary%3Eresult%3C%2Fsummary%3E%0A%0A%20%20%20%20%60%60%60%0A%20%20%20%20committeesdetails%3E%0A%0AAttestations%20are%20managed%20using%20functions%20from%20%5Battestation.go%5D(https%3A%2F%2Fgithub.com%2Fprysmaticlabs%2Fprysm%2Fblob%2Fv3.1.2%2Fbeacon-chain%2Fcore%2Fhelpers%2Fattestation.go)%0A%0A-%20%5Bfunc%20ValidateNilAttestation%5D(https%3A%2F%2Fpkg.go.dev%2Fgithub.com%2Fprysmaticlabs%2Fprysm%2Fv3%40v3.1.2%2Fbeacon-chain%2Fcore%2Fhelpers%23ValidateNilAttestation)%3A%20checks%20if%20any%20composite%20field%20of%20input%20attestation%20is%20nil.%20Access%20to%20these%20nil%20fields%20will%20result%20in%20run%20time%20panic%2C%20it%20is%20recommended%20to%20run%20these%20checks%20as%20first%20line%20of%20defense.%0A-%20%5Bfunc%20ValidateSlotTargetEpoch%5D(https%3A%2F%2Fpkg.go.dev%2Fgithub.com%2Fprysmaticlabs%2Fprysm%2Fv3%40v3.1.2%2Fbeacon-chain%2Fcore%2Fhelpers%23ValidateSlotTargetEpoch)%3A%20ValidateSlotTargetEpoch%20checks%20if%20attestation%20data's%20epoch%20matches%20target%20checkpoint's%20epoch.%20It%20is%20recommended%20to%20run%20%60ValidateNilAttestation%60%20first%20to%20ensure%20%60data.Target%60%20can't%20be%20nil.%0A-%20%5Bfunc%20IsAggregator%5D(https%3A%2F%2Fpkg.go.dev%2Fgithub.com%2Fprysmaticlabs%2Fprysm%2Fv3%40v3.1.2%2Fbeacon-chain%2Fcore%2Fhelpers%23IsAggregator)%3A%20IsAggregator%20returns%20true%20if%20the%20signature%20is%20from%20the%20input%20validator.%20The%20committee%20count%20is%20provided%20as%20an%20argument%20rather%20than%20imported%20implementation%20from%20spec.%20Having%20committee%20count%20as%20an%20argument%20allows%20cheaper%20computation%20at%20run%20time.%0A-%20%5Bfunc%20AggregateSignature%5D(https%3A%2F%2Fpkg.go.dev%2Fgithub.com%2Fprysmaticlabs%2Fprysm%2Fv3%40v3.1.2%2Fbeacon-chain%2Fcore%2Fhelpers%23AggregateSignature)%3A%20returns%20the%20aggregated%20signature%20of%20the%20input%20attestations.%0A%0A%20%20Spec%20pseudocode%20definition%3A%0A%0A%60%60%60%0Adef%20get_aggregate_signature(attestations%3A%20Sequence%5BAttestation%5D)%20-%3E%20BLSSignature%3A%0Asignatures%20%3D%20%5Battestation.signature%20for%20attestation%20in%20attestations%5D%0Areturn%20bls.Aggregate(signatures)%0A%60%60%60%0A%0AFollowing%20is%20an%20example%20aggregrated%20signature%20by%20adding%20the%20following%20lines%20to%20%5BTestAttestation_AggregateSignature%5D(https%3A%2F%2Fgithub.com%2Fprysmaticlabs%2Fprysm%2Fblob%2Fv3.1.2%2Fbeacon-chain%2Fcore%2Fhelpers%2Fattestation_test.go%23L48)%0A%0A%60%60%60%0AaggSig%2C%20err%20%3A%3D%20helpers.AggregateSignature(atts)%0A%60%60%60%0A%0Afmt.Printf(%22aggSig%3A%20%25%2Bv%5Cn%22%2C%20aggSig)%0A%0AResult%0A%0A%60%60%60%0A%20%20%20%20aggSig%3A%20%26%7Bs%3A0xc0003fe000%7D%0A%60%60%60%0A%0A-%20%5Bfunc%20IsAggregated%5D(https%3A%2F%2Fpkg.go.dev%2Fgithub.com%2Fprysmaticlabs%2Fprysm%2Fv3%40v3.1.2%2Fbeacon-chain%2Fcore%2Fhelpers%23IsAggregated)%3A%20IsAggregated%20returns%20true%20if%20the%20attestation%20is%20an%20aggregated%20attestation%2C%20false%20otherwise.%0A%0A-%20%5Bfunc%20ComputeSubnetForAttestation%5D(https%3A%2F%2Fpkg.go.dev%2Fgithub.com%2Fprysmaticlabs%2Fprysm%2Fv3%40v3.1.2%2Fbeacon-chain%2Fcore%2Fhelpers%23ComputeSubnetForAttestation)%3A%20returns%20the%20subnet%20for%20which%20the%20provided%20attestation%20will%20be%20broadcasted%20to.This%20differs%20from%20the%20spec%20definition%20by%20instead%20passing%20in%20the%20active%20validators%20indices%20in%20the%20attestation's%20given%20epoch.%0A%0ASpec%20pseudocode%20definition%3A%0A%0A%60%60%60%0Adef%20compute_subnet_for_attestation(committees_per_slot%3A%20uint64%2C%20slot%3A%20Slot%2C%20committee_index%3A%20CommitteeIndex)%20-%3E%20uint64%3A%0A%0A%22%22%22%0ACompute%20the%20correct%20subnet%20for%20an%20attestation%20for%20Phase%200.%0ANote%2C%20this%20mimics%20expected%20future%20behavior%20where%20attestations%20will%20be%20mapped%20to%20their%20shard%20subnet.%0A%22%22%22%0Aslots_since_epoch_start%20%3D%20uint64(slot%20%25%20SLOTS_PER_EPOCH)%0Acommittees_since_epoch_start%20%3D%20committees_per_slot%20%5C*%20slots_since_epoch_start%0A%0Areturn%20uint64((committees_since_epoch_start%20%2B%20committee_index)%20%25%20ATTESTATION_SUBNET_COUNT)%0A%60%60%60%0A%0A-%20%5Bfunc%20ComputeSubnetFromCommitteeAndSlot%5D(https%3A%2F%2Fpkg.go.dev%2Fgithub.com%2Fprysmaticlabs%2Fprysm%2Fv3%40v3.1.2%2Fbeacon-chain%2Fcore%2Fhelpers%23ComputeSubnetFromCommitteeAndSlot)%3A%20is%20a%20flattened%20version%20of%20ComputeSubnetForAttestation%20where%20we%20only%20pass%20in%20the%20relevant%20fields%20from%20the%20attestation%20as%20function%20arguments.%0A%0ASpec%20pseudocode%20definition%3A%0A%0A%60%60%60%0A%0Adef%20compute_subnet_for_attestation(committees_per_slot%3A%20uint64%2C%20slot%3A%20Slot%2C%20committee_index%3A%20CommitteeIndex)%20-%3E%20uint64%3A%0A%0A%22%22%22%0ACompute%20the%20correct%20subnet%20for%20an%20attestation%20for%20Phase%200.%0ANote%2C%20this%20mimics%20expected%20future%20behavior%20where%20attestations%20will%20be%20mapped%20to%20their%20shard%20subnet.%0A%22%22%22%0Aslots_since_epoch_start%20%3D%20uint64(slot%20%25%20SLOTS_PER_EPOCH)%0Acommittees_since_epoch_start%20%3D%20committees_per_slot%20%5C*%20slots_since_epoch_start%0A%0Areturn%20uint64((committees_since_epoch_start%20%2B%20committee_index)%20%25%20ATTESTATION_SUBNET_COUNT)%0A%0A%60%60%60%0A%0A-%20%5Bfunc%20ValidateAttestationTime%5D(https%3A%2F%2Fpkg.go.dev%2Fgithub.com%2Fprysmaticlabs%2Fprysm%2Fv3%40v3.1.2%2Fbeacon-chain%2Fcore%2Fhelpers%23ValidateAttestationTime)%3A%20Validates%20that%20the%20incoming%20attestation%20is%20in%20the%20desired%20time%20range.%0A%20%20An%20attestation%20is%20valid%20only%20if%20received%20within%20the%20last%20ATTESTATION_PROPAGATION_SLOT_RANGE%20slots.%0A%0AExample%3A%0A%0A%60%60%60%0A%0AATTESTATION_PROPAGATION_SLOT_RANGE%20%3D%205%0AclockDisparity%20%3D%2024%20seconds%0Acurrent_slot%20%3D%20100%0Ainvalid_attestation_slot%20%3D%2092%0Ainvalid_attestation_slot%20%3D%20103%0Avalid_attestation_slot%20%3D%2098%0Avalid_attestation_slot%20%3D%20101%0A%0A%60%60%60%0A%0AIn%20the%20attestation%20must%20be%20within%20the%20range%20of%2095%20to%20102%20in%20the%20example%20above.%0A%0A-%20%5Bfunc%20VerifyCheckpointEpoch%5D(https%3A%2F%2Fpkg.go.dev%2Fgithub.com%2Fprysmaticlabs%2Fprysm%2Fv3%40v3.1.2%2Fbeacon-chain%2Fcore%2Fhelpers%23VerifyCheckpointEpoch)%3A%20VerifyCheckpointEpoch%20is%20within%20current%20epoch%20and%20previous%20epoch%20with%20respect%20to%20current%20time.%20Returns%20true%20if%20it's%20within%2C%20false%20if%20it's%20not.%0A%0A_Note%3A%20Sample%20command%20for%20running%20tests%20in%20Prysm%3A%20%60bazel%20test%20%2F%2Fbeacon-chain%2Fcore%2Fhelpers%3Ago_default_test%20--test_output%3Dstreamed%20--test_filter%3DTestAttestation_AggregateSignature%60._%0A%0A**Consensus%20Committee%20Selection**%0A%0A-%20%5Bfunc%20ProcessRandoa%5D(https%3A%2F%2Fpkg.go.dev%2Fgithub.com%2Fprysmaticlabs%2Fprysm%2Fv3%40v3.1.2%2Fbeacon-chain%2Fcore%2Fblocks%23ProcessRandao)%3A%20checks%20the%20block%20proposer's%20randao%20commitment%20and%20generates%20a%20new%20randao%20mix%20to%20update%20in%20the%20beacon%20state's%20latest%20randao%20mixes%20slice.%0A-%20%5Bfunc%20randaoSigningData%5D(https%3A%2F%2Fgithub.com%2Fprysmaticlabs%2Fprysm%2Fblob%2Fv3.1.2%2Fbeacon-chain%2Fcore%2Fblocks%2Fsignature.go%23L157)%3A%20retrieves%20the%20randao%20related%20signing%20data%20from%20the%20state.%0A%20%20-%20%5Bfunc%20(b%20%5C*BeaconState)%20PubkeyAtIndex(idx%20types.ValidatorIndex)%20%5Bfieldparams.BLSPubkeyLength%5Dbyte%20%5D(https%3A%2F%2Fgithub.com%2Fprysmaticlabs%2Fprysm%2Fblob%2Fv3.1.2%2Fbeacon-chain%2Fstate%2Fstate-native%2Fgetters_validator.go%23L135)%3A%20returns%20the%20pubkey%20at%20the%20given%20validator%20index.%0A%0A%23%23%23%20Light%20Client%20Support%0A%0A%23%23%23%20Signature%20Schemes%20Review%0A%0A-%20Execution%20Chain%20Block%20Signing%0A%0A-%20Vote%20Signing%0A-%20Aggregated%20Attestations%20Signing%0A-%20Synch%20Committee%20Signing%0A%0A%23%23%20Ethereum%202.0%20Light%20Client%0A%0A%23%23%23%20Key%20Concepts%0A%0A-%20Syncing%20to%20Current%20state%0A%0A-%20Advancing%20Blocks%0A-%20Communication%20can%20be%20either%20via%0A-%20RPC%20to%20the%20%5BEth%20BEACON%20Node%20API%5D(https%3A%2F%2Fethereum.github.io%2Fbeacon-APIs%2F%23%2FBeacon)%0A-%20%5BNetworking%20Gossip%20Topics%5D(https%3A%2F%2Fgithub.com%2Fethereum%2Fconsensus-specs%2Fblob%2Fdev%2Fspecs%2Faltair%2Flight-client%2Fp2p-interface.md%23global-topics)%0A%20%20-%20%5Blight_client_finality_update%5D(https%3A%2F%2Fgithub.com%2Fethereum%2Fconsensus-specs%2Fblob%2Fdev%2Fspecs%2Faltair%2Flight-client%2Fp2p-interface.md%23light_client_finality_update)%3A%20This%20topic%20is%20used%20to%20propagate%20the%20latest%20%60LightClientFinalityUpdate%60%20to%20light%20clients%2C%20allowing%20them%20to%20keep%20track%20of%20the%20latest%20%60finalized_header%60.%0A%20%20-%20%5Blight_client_optimistic_update%5D(https%3A%2F%2Fgithub.com%2Fethereum%2Fconsensus-specs%2Fblob%2Fdev%2Fspecs%2Faltair%2Flight-client%2Fp2p-interface.md%23light_client_optimistic_update)%3A%20This%20topic%20is%20used%20to%20propagate%20the%20latest%60LightClientOptimisticUpdate%60%20to%20light%20clients%2C%20allowing%20them%20to%20keep%20track%20of%20the%20latest%20%60optimistic_header%60.%0A%0A_Note%3A%20Time%20on%20Ethereum%202.0%20Proof%20of%20Stake%20is%20divided%20into%20slots%20and%20epochs.%20One%20slot%20is%2012%20seconds.%20One%20epoch%20is%206.4%20minutes%2C%20consisting%20of%2032%20slots.%20One%20block%20can%20be%20created%20for%20each%20slot._%0A%0A%23%23%23%20Altair%20Light%20Client%20--%20Sync%20Protocol%0A%0A-%20%5BAltair%20Light%20Client%20--%20Sync%20Protocol%5D(https%3A%2F%2Fgithub.com%2Fethereum%2Fconsensus-specs%2Fblob%2Fdev%2Fspecs%2Faltair%2Flight-client%2Fsync-protocol.mdx)%3A%20The%20beacon%20chain%20is%20designed%20to%20be%20light%20client%20friendly%20for%20constrained%20environments%20to%20access%20Ethereum%20with%20reasonable%20safety%20and%20liveness.%0A%0ASuch%20environments%20include%20resource-constrained%20devices%20(e.g.%20phones%20for%20trust-minimized%20wallets)and%20metered%20VMs%20(e.g.%20blockchain%20VMs%20for%20cross-chain%20bridges).%0A%0AThis%20document%20suggests%20a%20minimal%20light%20client%20design%20for%20the%20beacon%20chain%20thatuses%20sync%20committees%20introduced%20in%20%5Bthis%20beacon%20chain%20extension%5D(https%3A%2F%2Fgithub.com%2Fethereum%2Fconsensus-specs%2Fblob%2Fdev%2Fspecs%2Faltair%2Fbeacon-chain.mdx).%0A%0AAdditional%20documents%20describe%20how%20the%20light%20client%20sync%20protocol%20can%20be%20used%3A%0A%0A-%20%5BFull%20node%5D(https%3A%2F%2Fgithub.com%2Fethereum%2Fconsensus-specs%2Fblob%2Fdev%2Fspecs%2Faltair%2Flight-client%2Ffull-node.mdx)%0A-%20%5BLight%20client%5D(https%3A%2F%2Fgithub.com%2Fethereum%2Fconsensus-specs%2Fblob%2Fdev%2Fspecs%2Faltair%2Flight-client%2Flight-client.mdx)%0A-%20%5BNetworking%5D(https%3A%2F%2Fgithub.com%2Fethereum%2Fconsensus-specs%2Fblob%2Fdev%2Fspecs%2Faltair%2Flight-client%2Fp2p-interface.mdx)%0A%0A-%20%5BLight%20client%20sync%20process%5D(https%3A%2F%2Fgithub.com%2Fethereum%2Fconsensus-specs%2Fblob%2Fdev%2Fspecs%2Faltair%2Flight-client%2Flight-client.mdx)%3A%20explains%20how%20light%20clients%20MAY%20obtain%20light%20client%20data%20to%20sync%20with%20the%20network.%0A%0A1.%20The%20light%20client%20MUST%20be%20configured%20out-of-band%20with%20a%20spec%2Fpreset%20(including%20fork%20schedule)%2C%20with%20%60genesis_state%60%20(including%20%60genesis_time%60%20and%20%60genesis_validators_root%60)%2C%20and%20with%20a%20trusted%20block%20root.%20The%20trusted%20block%20SHOULD%20be%20within%20the%20weak%20subjectivity%20period%2C%20and%20its%20root%20SHOULD%20be%20from%20a%20finalized%20%60Checkpoint%60.%0A2.%20The%20local%20clock%20is%20initialized%20based%20on%20the%20configured%20%60genesis_time%60%2C%20and%20the%20current%20fork%20digest%20is%20determined%20to%20browse%20for%20and%20connect%20to%20relevant%20light%20client%20data%20providers.%0A3.%20The%20light%20client%20fetches%20a%20%5B%60LightClientBootstrap%60%5D(https%3A%2F%2Fgithub.com%2Fethereum%2Fconsensus-specs%2Fblob%2Fdev%2Fspecs%2Faltair%2Flight-client%2Flight-client.mdx)%20object%20for%20the%20configured%20trusted%20block%20root.%20The%20%60bootstrap%60%20object%20is%20passed%20to%20%5B%60initialize_light_client_store%60%5D(https%3A%2F%2Fgithub.com%2Fethereum%2Fconsensus-specs%2Fblob%2Fdev%2Fspecs%2Faltair%2Flight-client%2Fsync-protocol.md%23initialize_light_client_store)%20to%20obtain%20a%20local%20%5B%60LightClientStore%60%5D(https%3A%2F%2Fgithub.com%2Fethereum%2Fconsensus-specs%2Fblob%2Fdev%2Fspecs%2Faltair%2Flight-client%2Fsync-protocol.md%23lightclientstore).%0A4.%20The%20light%20client%20tracks%20the%20sync%20committee%20periods%20%60finalized_period%60%20from%20%60store.finalized_header.slot%60%2C%20%60optimistic_period%60%20from%20%60store.optimistic_header.slot%60%2C%20and%20%60current_period%60%20from%20%60current_slot%60%20based%20on%20the%20local%20clock.%0A%20%20%201.%20When%20%60finalized_period%20%3D%3D%20optimistic_period%60%20and%20%5B%60is_next_sync_committee_known%60%5D(https%3A%2F%2Fgithub.com%2Fethereum%2Fconsensus-specs%2Fblob%2Fdev%2Fspecs%2Faltair%2Flight-client%2Fsync-protocol.md%23is_next_sync_committee_known)%20indicates%20%60False%60%2C%20the%20light%20client%20fetches%20a%20%5B%60LightClientUpdate%60%5D(https%3A%2F%2Fgithub.com%2Fethereum%2Fconsensus-specs%2Fblob%2Fdev%2Fspecs%2Faltair%2Flight-client%2Fsync-protocol.md%23lightclientupdate)%20for%20%60finalized_period%60.%20If%20%60finalized_period%20%3D%3D%20current_period%60%2C%20this%20fetch%20SHOULD%20be%20scheduled%20at%20a%20random%20time%20before%20%60current_period%60%20advances.%0A%20%20%202.%20When%20%60finalized_period%20%2B%201%20%3C%20current_period%60%2C%20the%20light%20client%20fetches%20a%20%60LightClientUpdate%60%20for%20each%20sync%20committee%20period%20in%20range%20%60%5Bfinalized_period%20%2B%201%2C%20current_period)%60%20(current%20period%20excluded)%0A%20%20%203.%20When%20%60finalized_period%20%2B%201%20%3E%3D%20current_period%60%2C%20the%20light%20client%20keeps%20observing%20%5B%60LightClientFinalityUpdate%60%5D(https%3A%2F%2Fgithub.com%2Fethereum%2Fconsensus-specs%2Fblob%2Fdev%2Fspecs%2Faltair%2Flight-client%2Fsync-protocol.md%23lightclientfinalityupdate)%20and%20%5B%60LightClientOptimisticUpdate%60%5D(https%3A%2F%2Fgithub.com%2Fethereum%2Fconsensus-specs%2Fblob%2Fdev%2Fspecs%2Faltair%2Flight-client%2Fsync-protocol.md%23lightclientoptimisticupdate).%20Received%20objects%20are%20passed%20to%20%5B%60process_light_client_finality_update%60%5D(https%3A%2F%2Fgithub.com%2Fethereum%2Fconsensus-specs%2Fblob%2Fdev%2Fspecs%2Faltair%2Flight-client%2Fsync-protocol.md%23process_light_client_finality_update)%20and%20%5B%60process_light_client_optimistic_update%60%5D(https%3A%2F%2Fgithub.com%2Fethereum%2Fconsensus-specs%2Fblob%2Fdev%2Fspecs%2Faltair%2Flight-client%2Fsync-protocol.md%23process_light_client_optimistic_update).%20This%20ensures%20that%20%60finalized_header%60%20and%20%60optimistic_header%60%20reflect%20the%20latest%20blocks.%0A5.%20%5B%60process_light_client_store_force_update%60%5D(https%3A%2F%2Fgithub.com%2Fethereum%2Fconsensus-specs%2Fblob%2Fdev%2Fspecs%2Faltair%2Flight-client%2Fsync-protocol.md%23process_light_client_store_force_update)%20MAY%20be%20called%20based%20on%20use%20case%20dependent%20heuristics%20if%20light%20client%20sync%20appears%20stuck.%20If%20available%2C%20falling%20back%20to%20an%20alternative%20syncing%20mechanism%20to%20cover%20the%20affected%20sync%20committee%20period%20is%20preferred.%0A%0A%23%23%23%20The%20Portal%20Network%0A%0A-%20%5BThe%20Portal%20Network%5D(https%3A%2F%2Fgithub.com%2Fethereum%2Fportal-network-specs)%3A%20The%20Portal%20Network%20is%20an%20in%20progess%20effort%20to%20enable%20lightweight%20protocol%20access%20by%20resource%20constrained%20devices.%20The%20term%20_%22portal%22_%20is%20used%20to%20indicate%20that%20these%20networks%20provide%20a%20_view_%20into%20the%20protocol%20but%20are%20not%20critical%20to%20the%20operation%20of%20the%20core%20Ethereum%20protocol.%0A%0AThe%20Portal%20Network%20is%20comprised%20of%20multiple%20peer-to-peer%20networks%20which%20together%20provide%20the%20data%20and%20functionality%20necessary%20to%20expose%20the%20standard%20%5BJSON-RPC%20API%5D(https%3A%2F%2Feth.wiki%2Fjson-rpc%2FAPI).%20These%20networks%20are%20specially%20designed%20to%20ensure%20that%20clients%20participating%20in%20these%20networks%20can%20do%20so%20with%20minimal%20expenditure%20of%20networking%20bandwidth%2C%20CPU%2C%20RAM%2C%20and%20HDD%20resources.%0A%0AThe%20term%20'Portal%20Client'%20describes%20a%20piece%20of%20software%20which%20participates%20in%20these%20networks.%20Portal%20Clients%20typically%20expose%20the%20standard%20JSON-RPC%20API.%0A%0A-%20Motivation%3A%20The%20Portal%20Network%20is%20focused%20on%20delivering%20reliable%2C%20lightweight%2C%20and%20decentralized%20access%20to%20the%20Ethereum%20protocol.%0A%0A-%20Prior%20Work%20on%20the%20%22Light%20Ethereum%20Subprotocol%22%20(LES)%3A%20The%20term%20%22light%20client%22%20has%20historically%20refered%20to%20a%20client%20of%20the%20existing%20%5BDevP2P%5D(https%3A%2F%2Fgithub.com%2Fethereum%2Fdevp2p%2Fblob%2Fmaster%2Frlpx.mdx)%20based%20%5BLES%5D(https%3A%2F%2Fgithub.com%2Fethereum%2Fdevp2p%2Fblob%2Fmaster%2Fcaps%2Fles.mdx)%20network.%20This%20network%20is%20designed%20using%20a%20client%2Fserver%20architecture.%20The%20LES%20network%20has%20a%20total%20capacity%20dictated%20by%20the%20number%20of%20%22servers%22%20on%20the%20network.%20In%20order%20for%20this%20network%20to%20scale%2C%20the%20%22server%22%20capacity%20has%20to%20increase.%20This%20also%20means%20that%20at%20any%20point%20in%20time%20the%20network%20has%20some%20total%20capacity%20which%20if%20exceeded%20will%20cause%20service%20degradation%20across%20the%20network.%20Because%20of%20this%20the%20LES%20network%20is%20unreliable%20when%20operating%20near%20capacity.%0A%0A-%20Block%20Relay%0A%0A-%20%5BBeacon%20State%5D(https%3A%2F%2Fgithub.com%2Fethereum%2Fportal-network-specs%2Fblob%2Fmaster%2Fbeacon-chain%2Fbeacon-state-network.md%23dht-overview)%3A%20A%20client%20has%20a%20trusted%20beacon%20state%20root%2C%20and%20it%20wants%20to%20access%20some%20parts%20of%20the%20state.%20Each%20of%20the%20access%20request%20corresponds%20to%20some%20leave%20nodes%20of%20the%20beacon%20state.%20The%20request%20is%20a%20content%20lookup%20on%20a%20DHT.%20The%20response%20is%20a%20Merkle%20proof.%0A%0A%20%20%20%20%20%20A%20Distributed%20Hash%20Table%20(DHT)%20allows%20network%20participants%20to%20have%20retrieve%20data%20on-demand%20based%20on%20a%20content%0A%0A-%20%5BSyncing%20Block%20Headers%5D(https%3A%2F%2Fgithub.com%2Fethereum%2Fportal-network-specs%2Fblob%2Fmaster%2Fbeacon-chain%2Fsync-gossip.mdx)%3A%20A%20beacon%20chain%20client%20could%20sync%20committee%20to%20perform%20state%20updates.%20The%20data%20object%20LightClientSkipSyncUpdate%20allows%20a%20client%20to%20quickly%20sync%20to%20a%20recent%20header%20with%20the%20appropriate%20sync%20committee.%20Once%20the%20client%20establishes%20a%20recent%20header%2C%20it%20could%20sync%20to%20other%20headers%20by%20processing%20LightClientUpdates.%20These%20two%20data%20types%20allow%20a%20client%20to%20stay%20up-to-date%20with%20the%20beacon%20chain.%0A%20%20-%20%5BSync%20State%5D(https%3A%2F%2Fgithub.com%2Fethereum%2Fportal-network-specs%2Fblob%2Fmaster%2Fbeacon-chain%2Fskip-sync-network.mdx)%3A%20A%20client%20uses%20SkipSyncUpdate%20to%20skip%20sync%20from%20a%20known%20header%20to%20a%20recent%20header.%20A%20client%20with%20a%20trusted%20but%20outdated%20header%20cannot%20use%20the%20messages%20in%20the%20gossip%20channel%20bc-light-client-update%20to%20update.%20The%20client's%20sync-committee%20in%20the%20stored%20snapshot%20is%20too%20old%20and%20not%20connected%20to%20any%20update%20messages.%20The%20client%20look%20for%20the%20appropriate%20SkipSyncUpdate%20to%20skip%20sync%20its%20header.%0A%20%20-%20%5BAdvance%20Block%20Headers%5D(https%3A%2F%2Fgithub.com%2Fethereum%2Fportal-network-specs%2Fblob%2Fmaster%2Fbeacon-chain%2Fsync-gossip.mdx)%3A%20A%20beacon%20chain%20client%20could%20sync%20committee%20to%20perform%20%5Bstate%20updates%5D(https%3A%2F%2Fgithub.com%2Fethereum%2Fconsensus-specs%2Fblob%2Fdev%2Fspecs%2Faltair%2Fsync-protocol.mdx).%20The%20data%20object%20%5BLightClientSkipSyncUpdate%5D(skip-sync-network)%20allows%20a%20client%20to%20quickly%20sync%20to%20a%20recent%20header%20with%20the%20appropriate%20sync%20committee.%20Once%20the%20client%20establishes%20a%20recent%20header%2C%20it%20could%20sync%20to%20other%20headers%20by%20processing%20%5BLightClientUpdates%5D(https%3A%2F%2Fgithub.com%2Fethereum%2Fconsensus-specs%2Fblob%2Fdev%2Fspecs%2Faltair%2Fsync-protocol.md%23lightclientupdate).%20These%20two%20data%20types%20allow%20a%20client%20to%20stay%20up-to-date%20with%20the%20beacon%20chain.%0A%0A%20%20%20%20%20%20%20%20%20%20These%20two%20data%20types%20are%20placed%20into%20separate%20sub-networks.%20A%20light%20client%20make%20find-content%20requests%20on%20%60skip-sync-network%60%20at%20start%20of%20the%20sync%20to%20get%20a%20header%20with%20the%20same%20%60SyncCommittee%60%20object%20as%20in%20the%20current%20sync%20period.%20The%20client%20uses%20messages%20in%20the%20gossip%20topic%20%60bc-light-client-update%60%20to%20advance%20its%20header.%0A%0A%20%20%20%20%20%20%20%20%20%20The%20gossip%20topics%20described%20in%20this%20document%20is%20part%20of%20a%20%5Bproposal%5D(https%3A%2F%2Fethresear.ch%2Ft%2Fa-beacon-chain-light-client-proposal%2F11064)%20for%20a%20beacon%20chain%20light%20client.%0A%0A%23%23%23%20Transaction%20Proofs%0A%0A-%20%5BRetrieving%20Beacon%20State%5D(https%3A%2F%2Fgithub.com%2Fethereum%2Fportal-network-specs%2Fblob%2Fmaster%2Fbeacon-chain%2Fbeacon-state-network.mdx)%3A%20A%20client%20has%20a%20trusted%20beacon%20state%20root%2C%20and%20it%20wants%20to%20access%20some%20parts%20of%20the%20state.%20Each%20of%20the%20access%20request%20corresponds%20to%20some%20leave%20nodes%20of%20the%20beacon%20state.%20The%20request%20is%20a%20content%20lookup%20on%20a%20DHT.%20The%20response%20is%20a%20Merkle%20proof.%0A%0AA%20Distributed%20Hash%20Table%20(DHT)%20allows%20network%20participants%20to%20have%20retrieve%20data%20on-demand%20based%20on%20a%20content%20key.%20A%20portal-network%20DHT%20is%20different%20than%20a%20traditional%20one%20in%20that%20each%20participant%20could%20selectively%20limit%20its%20workload%20by%20choosing%20a%20small%20interest%20radius%20r.%20A%20participants%20only%20process%20messages%20that%20are%20within%20its%20chosen%20radius%20boundary.%0A%0A-%20%5BWire%20Protocol%5D(https%3A%2F%2Fgithub.com%2Fethereum%2Fportal-network-specs%2Fblob%2Fmaster%2Fbeacon-chain%2Fbeacon-state-network.md%23wire-protocol)%3A%20For%20a%20subprotocol%2C%20we%20need%20to%20further%20define%20the%20following%20to%20be%20able%20to%20instantiate%20the%20wire%20format%20of%20each%20message%20type.%201.%20%60content_key%60%202.%20%60content_id%60%203.%20%60payload%60%0A%0A%20%20%20%20%20%20The%20content%20of%20the%20message%20is%20a%20Merkle%20proof%20contains%20multiple%20leave%20nodes%20for%20a%20%5BBeaconState%5D(https%3A%2F%2Fgithub.com%2Fethereum%2Fconsensus-specs%2Fblob%2Fdev%2Fspecs%2Faltair%2Fbeacon-chain.md%23beaconstate).%0A%0A%20%20%20%20%20%20Finally%2C%20we%20define%20the%20necessary%20encodings.%20A%20light%20client%20only%20knows%20the%20root%20of%20the%20beacon%20state.%20The%20client%20wants%20to%20know%20the%20details%20of%20some%20leave%20nodes.%20The%20client%20has%20to%20be%20able%20to%20construct%20the%20%60content_key%60%20only%20knowing%20the%20root%20and%20which%20leave%20nodes%20it%20wants%20see.%20The%20%60content_key%60%20is%20the%20ssz%20serialization%20of%20the%20paths.%20The%20paths%20represent%20the%20part%20of%20the%20beacon%20state%20that%20one%20wants%20to%20know%20about.%20The%20paths%20are%20represented%20by%20generalized%20indices.%20Note%20that%20%60hash_tree_root%60%20and%20%60serialize%60%20are%20the%20same%20as%20those%20defined%20in%20%5Bsync-gossip%5D(https%3A%2F%2Fgithub.com%2Fethereum%2Fportal-network-specs%2Fblob%2Fmaster%2Fbeacon-chain%2Fsync-gossip.mdx).%0A%0A-%20TODO%3A%20Review%20of%20Retrieving%20a%20transaction%20proof%20not%20just%20retrieving%20data%20on-demand%0A%0A%23%23%23%20Further%20Information%0A%0A-%20Ethereum%202.0%20Specifications%0A-%20%5BBeacon%20Chain%20Specification%5D(https%3A%2F%2Fgithub.com%2Fethereum%2Fconsensus-specs%2Fblob%2Fmaster%2Fspecs%2Fphase0%2Fbeacon-chain.mdx)%0A-%20%5BExtended%20light%20client%20protocol%5D(https%3A%2F%2Fnotes.ethereum.org%2F%40vbuterin%2Fextended_light_client_protocol)%0A-%20%5BAltair%20Light%20Client%20--%20Light%20Client%5D(https%3A%2F%2Fgithub.com%2Fethereum%2Fconsensus-specs%2Fblob%2Fdev%2Fspecs%2Faltair%2Flight-client%2Flight-client.mdx)%0A-%20%5BAltair%20Light%20Client%20--%20Sync%20Protocol%5D(https%3A%2F%2Fgithub.com%2Fethereum%2Fconsensus-specs%2Fblob%2Fdev%2Fspecs%2Faltair%2Flight-client%2Fsync-protocol.mdx)%0A-%20%5BBeacon%20Chain%20Fork%20Choice%5D(https%3A%2F%2Fgithub.com%2Fethereum%2Fconsensus-specs%2Fblob%2Fdev%2Fspecs%2Fphase0%2Ffork-choice.mdx)%0A-%20%5BThe%20Portal%20Network%20Specification%5D(https%3A%2F%2Fgithub.com%2Fethereum%2Fportal-network-specs)%3A%20an%20in%20progess%20effort%20to%20enable%20lightweight%20protocol%20access%20by%20resource%20constrained%20devices.%0A-%20%5BLight%20Ethereum%20Subprotocol%20(LES)%5D(https%3A%2F%2Fgithub.com%2Fethereum%2Fdevp2p%2Fblob%2Fmaster%2Fcaps%2Fles.mdx)%3A%20the%20protocol%20used%20by%20%22light%22%20clients%2C%20which%20only%20download%20block%20headers%20as%20they%20appear%20and%20fetch%20other%20parts%20of%20the%20blockchain%20on-demand.%0A-%20%5BBlockDaemon%3A%20Ethereum%20Altair%20Hard%20Folk%3A%20Light%20Clients%20%26%20Sync%20Committees%5D(https%3A%2F%2Fblockdaemon.com%2Fblog%2Fethereum-altair-hard-folk-light-clients-sync-committees%2F)%0A-%20%5BEfficient%20algorithms%20for%20CBC%20Casper%5D(https%3A%2F%2Fdocs.google.com%2Fpresentation%2Fd%2F1oc_zdywOsHxz3zez1ILAgrerS7RkaF1hHoW0FLtp0Gw%2Fedit%23slide%3Did.p)%3A%20Review%20of%20LMD%20GHOST%20(Latest%20Message%20Driven%2C%20Greediest%20Heaviest%20Observed%20Sub-Tree)%0A-%20%5BSSZ%3A%20Simple%20Serialize%5D(https%3A%2F%2Fethereum.org%2Fen%2Fdevelopers%2Fdocs%2Fdata-structures-and-encoding%2Fssz%2F)%3A%20Overview%20of%20Simple%20serialize%20(SSZ)%20is%20the%20serialization%20method%20used%20on%20the%20Beacon%20Chain.%20(including%20merkalization%20and%20multiproofs)%0A-%20%5BThe%20Noise%20Protocol%20Framework%5D(https%3A%2F%2Fnoiseprotocol.org%2Fnoise.html)%3A%20Noise%20is%20a%20framework%20for%20crypto%20protocols%20based%20on%20Diffie-Hellman%20key%20agreement.%0A-%20%5BFlashbots%20for%20Ethereum%20Consensus%20Clients%5D(https%3A%2F%2Fhackmd.io%2FQoLwVQf3QK6EiVt15YOYqQ%3Fview)%0A-%20%5BOptimistic%20Sync%20Specification%5D(https%3A%2F%2Fgithub.com%2Fethereum%2Fconsensus-specs%2Fblob%2Fdev%2Fsync%2Foptimistic.mdx)%3A%20Optimistic%20Sync%20is%20a%20stop-gap%20measure%20to%20allow%20execution%20nodes%20to%20sync%20via%20established%20methods%20until%20future%20Ethereum%20roadmap%20items%20are%20implemented%20(e.g.%2C%20statelessness).%0A-%20%5BConsensus%20Light%20Client%20Server%20Implementation%20Notes%5D(https%3A%2F%2Fhackmd.io%2FhsCz1G3BTyiwwJtjT4pe2Q%3Fview)%3A%20How%20Lodestar%20beacon%20node%20was%20tweaked%20to%20serve%20light%20clients%0A-%20%5Bbeacon%20chain%20light%20client%20design%20doc%5D(https%3A%2F%2Fnotes.ethereum.org%2F%40ralexstokes%2FHJxDMi8vY)%3A%20notes%20about%20the%20design%2Fimplementation%20of%20a%20beacon%20chain%20light%20client%20using%20standard%20APIs%20and%20protocol%20features%0A-%20%5BA%20Beacon%20Chain%20Light%20Client%20Proposal%5D(https%3A%2F%2Fethresear.ch%2Ft%2Fa-beacon-chain-light-client-proposal%2F11064)%3A%20proposing%20a%20light%20client%20implementation%20that%20goes%20a%20step%20further%20than%20the%20minimum%20light%20client%20described%20in%20the%20altair%20consensus-spec.%20The%20proposed%20client%20aims%20to%20allow%20queries%20into%20the%20beacon%20state.%0A-%20%5BDistributed%20Hash%20Table%20(DHT)%20Overview%5D(https%3A%2F%2Fgithub.com%2Fethereum%2Fportal-network-specs%2Fblob%2Fmaster%2Fbeacon-chain%2Fbeacon-state-network.md%23dht-overview)%3A%20allows%20network%20participants%20to%20have%20retrieve%20data%20on-demand%20based%20on%20a%20content%20key.%0A-%20%5B(WIP)%20Light%20client%20p2p%20interface%20Specification%5D(https%3A%2F%2Fgithub.com%2Fethereum%2Fconsensus-specs%2Fpull%2F2786)%3A%20a%20PR%20to%20get%20the%20conversation%20going%20about%20a%20p2p%20approach.%0A%20%20Here%20we%20cover%20two%20approaches%20which%20may%20be%20combined%0A%0A%23%23%20References%0A%0A**References%20Overview**%0A%0A%3Ca%20name%3D%22ov1%22%3E%5B1%5D%3C%2Fa%3E%20%5BPart%20I%3A%20What%20to%20build%20next%20in%20Zero%0AKnowledge%3F%5D(https%3A%2F%2Fdelendum.xyz%2F2022%2F11%2F22%2Fwhat-to-build-next-in-zero-knowledge.html)%3A%0AWhat%20are%20the%20problems%20that%20haven%E2%80%99t%20been%20solved%20in%20blockchain%20and%20how%20can%20we%0Aleverage%20zero-knowledge%20proof%20as%20a%20tool%20to%20solve%20these%20problems%3F%0A%0A%3Ca%20name%3D%22ov1%22%3E%5B2%5D%3C%2Fa%3E%20%5BCrosschain%0AFuture%5D(https%3A%2F%2Fgithub.com%2Fisolab-gg%2Fisomorph%2Fblob%2Fmain%2Fdocs%2Fblog%2Fcrosschain-future.mdx)%3A%0AA%20review%20of%20the%20growing%20blockchain%20ecosystem%20and%20the%20role%20of%20zkp%20in%20building%0Atrustless%20bridges.%0A%0A%3Ca%20name%3D%22ov2%22%3E%5B3%5D%3C%2Fa%3E%20%5BTechnical%20Problems%0AOverview%5D(https%3A%2F%2Fgithub.com%2Fisolab-gg%2Fisomorph%2Fblob%2Fmain%2Fdocs%2Fproblems%2Ftechnical-problems-part-1.mdx)%3A%0ATrustless%20Bridging%20Technical%20Problems%20-%20PART%201%3A%20Problem%20Overview%2C%20Consensus%0AProtocols%2C%20Signature%20Schemes.%0A%0A**Reference%20Trustless%20Bridge%20Design**%0A%0A%3Ca%20name%3D%22tb1%22%3E%5B1%5D%3C%2Fa%3E%20%5BSuccinct%3A%20Proof%20of%20Consensus%20Bridging%20between%20Ethereum%0Aand%20Gnosis%20Chain%5D(https%3A%2F%2Fblog.succinct.xyz%2Fblog%2Fproof-of-consensus%2F)%3A%20gas%0Aefficient%20on-chain%20light%20client%20for%20Ethereum%20PoS%2C%20powered%20by%20succinct%0Azero-knowledge%20proofs%20(zkSNARKs)%2C%20allowing%20for%20arbitrary%2C%20trust-minimized%0Across-chain%20communication%20between%20Ethereum%20and%20Gnosis%20Chain.%0A%0A**References%20Block%20Production**%0A%0A%3Ca%20name%3D%22bp1%22%3E%5B1%5D%3C%2Fa%3E%20%5BEIP-3675%3A%20Upgrade%20consensus%20to%0AProof-of-Stake%5D(https%3A%2F%2Feips.ethereum.org%2FEIPS%2Feip-3675%23pow-block-processing)%3A%0ASpecification%20of%20the%20consensus%20mechanism%20upgrade%20on%20Ethereum%20Mainnet%20that%0Aintroduces%20Proof-of-Stake.%0A%0A%3Ca%20name%3D%22bp2%22%3E%5B2%5D%3C%2Fa%3E%20%5BEIP-2982%3A%20Serenity%20Phase%0A0%5D(https%3A%2F%2Feips.ethereum.org%2FEIPS%2Feip-2982)%3A%20Phase%200%20of%20the%20release%20schedule%20of%0ASerenity%2C%20a%20series%20of%20updates%20to%20Ethereum%20a%20scalable%2C%20proof-of-stake%20consensus.%0A%0A%3Ca%20name%3D%22bp3%22%3E%5B3%5D%3C%2Fa%3E%20%5BEthreum%20Consensus%20Specs%20Phase%0A0%5D(https%3A%2F%2Fgithub.com%2Fethereum%2Fconsensus-specs%2Ftree%2Fdev%2Fspecs%2Fphase0)%3A%0ASpecifications%20for%20Ethereum%202.0%20Phase%200%20including%0A%5Bbeacon-chain%5D(https%3A%2F%2Fgithub.com%2Fethereum%2Fconsensus-specs%2Fblob%2Fdev%2Fspecs%2Fphase0%2Fbeacon-chain.mdx)%2C%0A%5Bdeposit-contract%5D(https%3A%2F%2Fgithub.com%2Fethereum%2Fconsensus-specs%2Fblob%2Fdev%2Fspecs%2Fphase0%2Fdeposit-contract.mdx)%2C%0A%5Bfork-choice%5D(https%3A%2F%2Fgithub.com%2Fethereum%2Fconsensus-specs%2Fblob%2Fdev%2Fspecs%2Fphase0%2Ffork-choice.mdx)%2C%0A%5Bp2p-interface%5D(https%3A%2F%2Fgithub.com%2Fethereum%2Fconsensus-specs%2Fblob%2Fdev%2Fspecs%2Fphase0%2Fp2p-interface.mdx)%2C%0A%5Bvalidator%5D(https%3A%2F%2Fgithub.com%2Fethereum%2Fconsensus-specs%2Fblob%2Fdev%2Fspecs%2Fphase0%2Fvalidator.mdx)%0Aand%0A%5Bweak-subjectivity%5D(https%3A%2F%2Fgithub.com%2Fethereum%2Fconsensus-specs%2Fblob%2Fdev%2Fspecs%2Fphase0%2Fweak-subjectivity.mdx)%0A%0A%3Ca%20name%3D%22bp4%22%3E%5B6%5D%3C%2Fa%3E%20%5BEthereum%20Consensus%20and%20Execution%20Client%0ADistribution%5D(https%3A%2F%2Fclientdiversity.org%2F%23distribution)%3A%20Percentages%20of%20nodes%0Arunning%20client%20types%20for%20both%20Consensus%20(Prysm%2C%20Lighthours%2C%20Nimbus%2C%20Teku)%20and%0AExecution%20(Geth%2C%20Erigon%2C%20Besu%2C%20Nethermind)%20clients.%0A%0A%3Ca%20name%3D%22bp5%22%3E%5B5%5D%3C%2Fa%3E%20%5Bgo-ethereum%20go%0Adocumentation%5D(https%3A%2F%2Fpkg.go.dev%2Fgithub.com%2Fethereum%2Fgo-ethereum%40v1.10.26)%3A%0ADocumentation%20for%20Go%20Ethereum%2C%20Official%20Golang%20implementation%20of%20the%20Ethereum%0Aprotocol.%20Which%20is%20an%20execution%20chain%20implementation.%0A%0A%3Ca%20name%3D%22bp6%22%3E%5B6%5D%3C%2Fa%3E%20%5Bprysm%20go%0Adocumentation%5D(https%3A%2F%2Fpkg.go.dev%2Fgithub.com%2Fprysmaticlabs%2Fprysm%2Fv3%40v3.1.2)%3A%0ADocumentation%20for%20prysm%2C%20An%20Ethereum%20Consensus%20Implementation%20Written%20in%20Go.%20A%0Abeacon-chain%20immplementation.%20Also%20see%20%5BPrysm%0ADocumentation%5D(https%3A%2F%2Fdocs.prylabs.network%2Fdocs%2Fgetting-started)%0A%0A%3Ca%20name%3D%22bp7%22%3E%5B7%5D%3C%2Fa%3E%20%5Blighthouse%0Adocumentation%5D(https%3A%2F%2Fpkg.go.dev%2Fgithub.com%2Fprysmaticlabs%2Fprysm%2Fv3%40v3.1.2)%3A%0ADocumentation%20for%20lighthouse%2C%20written%20in%20Rust.%20A%20beacon-chain%20immplementation.%0A%0A%3Ca%20name%3D%22bp8%22%3E%5B8%5D%3C%2Fa%3E%20%5BEtherum%202.0%20Validators%0AOverview%5D(https%3A%2F%2Fbeaconcha.in%2Fvalidators)%3A%20Live%20Monitoring%20of%20Ethreum%202.0%0AValidators%20from%20beachoncha.in%0A%0A**References%20Technical%20Summary**%0A%0A%3Ca%20name%3D%22ts1%22%3E%5B1%5D%3C%2Fa%3E%20%5BEthereum%20EVM%0Aillustrated%5D(https%3A%2F%2Ftakenobu-hs.github.io%2Fdownloads%2Fethereum_evm_illustrated.pdf)%3A%0AA%20technical%20overview%20of%20Ethereum%20including%20state%2C%20accounts%2C%20transactions%20and%0Amessages%20as%20well%20as%20the%20EVM.%20%5BAppendix%20E%5D(%23appendix-e-data-structures)%20has%20links%0Ato%20type%20definitions%20for%20blocks%2C%20transactions%2C%20state%20etc%20in%20geth.%0A%0A%3Ca%20name%3D%22ts2%22%3E%5B2%5D%3C%2Fa%3E%20%5BBlocks%5D(https%3A%2F%2Fethereum.org%2Fen%2Fdevelopers%2Fdocs%2Fblocks%2F)%3A%0ABlock%20data%20definitions%20including%20attestations%20from%20ethereum.org%0A%0A%3Ca%20name%3D%22ts3%22%3E%5B3%5D%3C%2Fa%3E%20%5Beth1%20block%0Aproposal%5D(https%3A%2F%2Fhackmd.io%2F%40flashbots%2Fmev-in-eth2%23eth1-block-proposal)%3A%0ATechnical%20walkthrough%20of%20how%20blocks%20are%20proposed%20and%20potential%20MEV%20opportunities%0Afrom%20FlashBots.%0A%0A%3Ca%20name%3D%22ts4%22%3E%5B4%5D%3C%2Fa%3E%20%5BAssemble%0ABlock%5D(https%3A%2F%2Fgithub.com%2Fethereum%2Frayonism%2Fblob%2Fmaster%2Fspecs%2Fmerge.md%23assemble-block)%3A%0AEthereum%20Specification%20for%20block%20Assembly%20as%20part%20of%20Rayonism%20--%20The%20Merge%20spec.%0A%0A%3Ca%20name%3D%22ts5%22%3E%5B5%5D%3C%2Fa%3E%20%5BPrysm%20running%20a%0Anode%5D(https%3A%2F%2Fdocs.prylabs.network%2Fdocs%2Finstall%2Finstall-with-script)%3A%0AOperational%20procedures%20for%20Validators%20by%20Prysm.%20Note%20validators%20run%20both%20the%0Abeacon%20chain(consensus)%20and%20a%20geth%20node(execution)%0A%0A%3Ca%20name%3D%22ts6%22%3E%5B6%5D%3C%2Fa%3E%5BThe%20Beacon%20Chain%20Ethereum%202.0%20explainer%20you%20need%20to%20read%0Afirst%5D(https%3A%2F%2Fethos.dev%2Fbeacon-chain)%3A%20Detailed%20walk%20through%20og%20Ethereum%202.0%0Ablock%20production%20including%20slots%2C%20epochs%2C%20validators%2C%20commitees%20and%20finality.%0A%0A%3Ca%20name%3D%22ts6b%22%3E%5B6%5D%3C%2Fa%3E%5BThe%20Beacon%20Chain%20Ethereum%202.0%20explainer%20you%20need%20to%20read%0Afirst%5D(https%3A%2F%2Fethos.dev%2Fbeacon-chain)%3A%20Detailed%20walk%20through%20og%20Ethereum%202.0%0Ablock%20production%20including%20slots%2C%20epochs%2C%20validators%2C%20commitees%20and%20finality.%0A%0A%3Ca%20name%3D%22ts7%22%3E%5B7%5D%3C%2Fa%3E%20%5BEtherum%202.0%20Validators%0AOverview%5D(https%3A%2F%2Fbeaconcha.in%2Fvalidators)%3A%20Live%20Monitoring%20of%20Ethreum%202.0%0AValidators%20from%20beachoncha.in%0A%0A%3Ca%20name%3D%22ts8%22%3E%5B8%5D%3C%2Fa%3E%5BBLS%0ASignatures%5D(https%3A%2F%2Feth2book.info%2Fbellatrix%2Fpart2%2Fbuilding_blocks%2Fsignatures%2F)%3A%0ADetailed%20walkthrough%20of%20BLS%20Signatures%20and%20how%20they%20can%20be%20used%20in%20aggregation.%0A%0A%3Ca%20name%3D%22ts9%22%3E%5B8%5D%3C%2Fa%3E%5BAttestation%20Inclusion%0ALifecycle%5D(https%3A%2F%2Fkb.beaconcha.in%2Fattestation%23attestation-inclusion-lifecycle)%3A%0AHigh%20Level%20overview%20of%20the%20attestation%20life%20cycle%20including%20geeration%2C%0Apropogation%2C%20aggregation%20and%20inclusion.Attest%0A%0A%3Ca%20name%3D%22ts10%22%3E%5Bts10%5D%3C%2Fa%3E%20%5BBeacon%20Chain%20Proposal%3A%20Sync%0AComittees%5D(https%3A%2F%2Fnotes.ethereum.org%2F%40vbuterin%2FHF1_proposal%23Sync-committees)%3A%0AFor%20each%20period%20(~27%20hours)%2C%201024%20validators%20are%20randomly%20selected%20to%20be%20part%20of%0Athe%20sync%20committee%20during%20that%20period.%20Validators%20in%20the%20sync%20committee%20would%0Apublish%20signatures%20attesting%20to%20the%20current%20head.%20These%20signatures%20would%20be%0Abroadcasted%20as%20part%20of%20a%20LightClientUpdate%20object%20that%20could%20help%20light%20clients%0Afind%20the%20head%2C%20and%20would%20be%20included%20in%20the%20beacon%20chain%20to%20be%20rewarded.%0A%0A%3Ca%20name%3D%22ts11%22%3E%5Bts11%5D%3C%2Fa%3E%20%5BAltair%20Light%20Client%20--%20Sync%0AProtocol%5D(https%3A%2F%2Fnotes.ethereum.org%2F%40vbuterin%2FHF1_proposal%23Sync-committees)%3A%0AThis%20document%20suggests%20a%20minimal%20light%20client%20design%20for%20the%20beacon%20chain%20that%0Auses%20sync%20committees.%0A%0A%3Ca%20name%3D%22ts12%22%3E%5Bts12%5D%3C%2Fa%3E%20%5BEthereum%20Builder%20Specifications%3A%20Honest%0AValidator%5D(https%3A%2F%2Fgithub.com%2Fethereum%2Fbuilder-specs%2Fblob%2Fmain%2Fspecs%2Fvalidator.mdx)%3A%0Aexplains%20the%20way%20in%20which%20a%20beacon%20chain%20validator%20is%20expected%20to%20use%20the%0ABuilder%20spec%20to%20participate%20in%20an%20external%20builder%20network.%0A%0A%3Ca%20name%3D%22ts13%22%3E%5Bts13%5D%3C%2Fa%3E%20%5BFlashbots%3A%0Amev-boost%5D(https%3A%2F%2Fgithub.com%2Fflashbots%2Fmev-boost)%3A%20open%20source%20middleware%20run%0Aby%20validators%20to%20access%20a%20competitive%20block-building%20market.%0A%0A%3Ca%20name%3D%22ts14%22%3E%5Bts14%5D%3C%2Fa%3E%20%5BA%20note%20on%20Ethereum%202.0%20phase%200%20validator%0Alifecycle%5D(https%3A%2F%2Fnotes.ethereum.org%2F7CFxjwMgQSWOHIxLgJP2Bw%23A-note-on-Ethereum-20-phase-0-validator-lifecycle)%3A%0Adescribes%20the%20concept%20of%20validator%20status%20epochs%20and%20the%20cases%20of%20validator%0Alifecycle%20in%20the%20view%20of%20%E2%80%9Cvalidator%20status%20transition%E2%80%9D%20in%20phase%200.%0A%0A%23%23%20Appendices%0A%0A%23%23%23%20Appendix%20A%3A%20Signing%20Libraries%0A%0A%23%23%23%20Appendix%20B%3A%20Proving%20and%20Verification%20Mechanisms%0A%0A%23%23%23%23%20%5Beth-proof-of-consensus%5D(https%3A%2F%2Fgithub.com%2Fsuccinctlabs%2Feth-proof-of-consensus)%3A%20Proof%20of%20Consensus%20for%20Ethereum%20by%20succinctlabs%0A%0ACircuits%0A%0A-%20%5Baggregate_bls_verify.circom%5D(https%3A%2F%2Fgithub.com%2Fsuccinctlabs%2Feth-proof-of-consensus%2Fblob%2Fmain%2Fcircuits%2Fcircuits%2Faggregate_bls_verify.circom)%3A%20Computes%20an%20aggregate%20BLS12-381%20public%20key%20over%20a%20set%20of%20public%20keys%20and%20a%20bitmask%0A-%20%5Bassert_valid_signed_header.circom%5D(https%3A%2F%2Fgithub.com%2Fsuccinctlabs%2Feth-proof-of-consensus%2Fblob%2Fmain%2Fcircuits%2Fcircuits%2Fassert_valid_signed_header.circom)%0A-%20%5Bpubkey_poseidon.circom%5D(https%3A%2F%2Fgithub.com%2Fsuccinctlabs%2Feth-proof-of-consensus%2Fblob%2Fmain%2Fcircuits%2Fcircuits%2Fpubkey_poseidon.circom)%3A%20Computes%20the%20Poseidon%20merkle%20root%20of%20a%20list%20of%20field%20elements%0A-%20%5Bsha256_bytes.circom%5D(https%3A%2F%2Fgithub.com%2Fsuccinctlabs%2Feth-proof-of-consensus%2Fblob%2Fmain%2Fcircuits%2Fcircuits%2Fsha256_bytes.circom)%3A%20Wrapper%20around%20SHA256%20to%20support%20bytes%20as%20input%20instead%20of%20bits%0A-%20%5Bsimple_serialize.circom%5D(https%3A%2F%2Fgithub.com%2Fsuccinctlabs%2Feth-proof-of-consensus%2Fblob%2Fmain%2Fcircuits%2Fcircuits%2Fsimple_serialize.circom)%3A%20Helper%20function%20to%20implement%20SSZArray%0A-%20%5Bsync_committee_committments.circom%5D(https%3A%2F%2Fgithub.com%2Fsuccinctlabs%2Feth-proof-of-consensus%2Fblob%2Fmain%2Fcircuits%2Fcircuits%2Fsync_committee_committments.circom)%3A%20Asserts%20that%20the%20byte%20representation%20of%20a%20BLS12-381%20public%20key's%20x-coordinate%20matches%20the%20BigInt%20representation%0A%0AVerification%0A%0A-%20%5BAMB%5D(https%3A%2F%2Fgithub.com%2Fsuccinctlabs%2Feth-proof-of-consensus%2Ftree%2Fmain%2Fcontracts%2Fsrc%2Famb)%3A%20Arbitrary%20Message%20Passing%0A-%20%5BTrustlessAMB.sol%5D(https%3A%2F%2Fgithub.com%2Fsuccinctlabs%2Feth-proof-of-consensus%2Fblob%2Fmain%2Fcontracts%2Fsrc%2Famb%2FTrustlessAMB.sol)%3A%20sends%20and%20executes%20messages%0A-%20%5BTrustlessAMBStorage.sol%5D(https%3A%2F%2Fgithub.com%2Fsuccinctlabs%2Feth-proof-of-consensus%2Fblob%2Fmain%2Fcontracts%2Fsrc%2Famb%2FTrustlessAMBStorage.sol)%3A%20Storage%20for%20messages%20between%20two%20chains%0A-%20%5Bbridge%5D(https%3A%2F%2Fgithub.com%2Fsuccinctlabs%2Feth-proof-of-consensus%2Ftree%2Fmain%2Fcontracts%2Fsrc%2Fbridge)%3A%20Allows%20for%20the%20deposit%20and%20withdrawal%20of%20ERC20%20tokens%0A-%20%5BBridge.sol%5D(https%3A%2F%2Fgithub.com%2Fsuccinctlabs%2Feth-proof-of-consensus%2Fblob%2Fmain%2Fcontracts%2Fsrc%2Fbridge%2FBridge.sol)%3A%20Deposit%20and%20withdraw%20functionality%0A-%20%5BToken.sol%5D(https%3A%2F%2Fgithub.com%2Fsuccinctlabs%2Feth-proof-of-consensus%2Fblob%2Fmain%2Fcontracts%2Fsrc%2Fbridge%2FTokens.sol)%3A%20ERC20%20bridge%20token%20definitions%0A-%20%5Blightclient%5D(https%3A%2F%2Fgithub.com%2Fsuccinctlabs%2Feth-proof-of-consensus%2Ftree%2Fmain%2Fcontracts%2Fsrc%2Flightclient)%0A-%20%5BBLSAggregatedSignatureVerifier.sol%5D(https%3A%2F%2Fgithub.com%2Fsuccinctlabs%2Feth-proof-of-consensus%2Fblob%2Fmain%2Fcontracts%2Fsrc%2Flightclient%2FBLSAggregatedSignatureVerifier.sol)%3A%20Verifies%20BLS%20aggregated%20signature%20proofs%0A-%20%5BBeaconLightClient.sol%5D(https%3A%2F%2Fgithub.com%2Fsuccinctlabs%2Feth-proof-of-consensus%2Fblob%2Fmain%2Fcontracts%2Fsrc%2Flightclient%2FBeaconLightClient.sol)%3A%20Beacon%20Light%20Client%20Functionality%20including%0A%20%20-%20%5Bstep(LightClientUpdate%20memory%20update)%5D(https%3A%2F%2Fgithub.com%2Fsuccinctlabs%2Feth-proof-of-consensus%2Fblob%2Fmain%2Fcontracts%2Fsrc%2Flightclient%2FBeaconLightClient.sol%23L86)%3A%20Updates%20the%20head%20given%20a%20finalized%20light%20client%20update.%0A%20%20-%20%5Bfunction%20updateSyncCommittee(LightClientUpdate%20memory%20update%2C%20bytes32%20nextSyncCommitteePoseidon%2C%20Groth16Proof%20memory%20commitmentMappingProof)%5D(https%3A%2F%2Fgithub.com%2Fsuccinctlabs%2Feth-proof-of-consensus%2Fblob%2Fmain%2Fcontracts%2Fsrc%2Flightclient%2FBeaconLightClient.sol%23L102)%3A%20Set%20the%20sync%20committee%20validator%20set%20root%20for%20the%20next%20sync%20commitee%20period.%0A%20%20-%20%5Bfunction%20forceUpdate()%5D(https%3A%2F%2Fgithub.com%2Fsuccinctlabs%2Feth-proof-of-consensus%2Fblob%2Fmain%2Fcontracts%2Fsrc%2Flightclient%2FBeaconLightClient.sol%23L131)%3A%20Finalizes%20the%20optimistic%20update%20and%20sets%20the%20next%20sync%20committee%20if%20no%20finalized%20updates%20have%20been%20received%20for%20a%20period.%0A%20%20-%20%5Bfunction%20processLightClientUpdate(LightClientUpdate%20memory%20update)%5D(https%3A%2F%2Fgithub.com%2Fsuccinctlabs%2Feth-proof-of-consensus%2Fblob%2Fmain%2Fcontracts%2Fsrc%2Flightclient%2FBeaconLightClient.sol%23L131)%3A%20Implements%20shared%20logic%20for%20processing%20light%20client%20updates.%0A%20%20-%20%5Bfunction%20zkMapSSZToPoseidon(bytes32%20sszCommitment%2C%20bytes32%20poseidonCommitment%2C%20Groth16Proof%20memory%20proof)%5D(https%3A%2F%2Fgithub.com%2Fsuccinctlabs%2Feth-proof-of-consensus%2Fblob%2Fmain%2Fcontracts%2Fsrc%2Flightclient%2FBeaconLightClient.sol%23L190)%3A%20Maps%20a%20simple%20serialize%20merkle%20root%20to%20a%20poseidon%20merkle%20root%20with%20a%20zkSNARK.%20The%20proof%20asserts%20that%3A%20SimpleSerialize(syncCommittee)%20%3D%3D%20Poseidon(syncCommittee).%0A%20%20-%20%5Bfunction%20zkBLSVerify(bytes32%20signingRoot%2C%20bytes32%20syncCommitteeRoot%2C%20uint256%20claimedParticipation%2C%20Groth16Proof%20memory%20proof)%5D(https%3A%2F%2Fgithub.com%2Fsuccinctlabs%2Feth-proof-of-consensus%2Fblob%2Fmain%2Fcontracts%2Fsrc%2Flightclient%2FBeaconLightClient.sol%23L208)%3A%20Does%20an%20aggregated%20BLS%20signature%20verification%20with%20a%20zkSNARK.%0A-%20%5Bscripts%5D(https%3A%2F%2Fgithub.com%2Fsuccinctlabs%2Feth-proof-of-consensus%2Ftree%2Fmain%2Fcontracts%2Fsrc%2Fscripts)%3A%20A%20collection%20of%20%5Bforge-scripts%5D(https%3A%2F%2Fbook.getfoundry.sh%2Freference%2Fforge%2Fforge-script)%20for%20contract%20deployment.%0A%0A%23%23%23%20Appendix%20C%3A%20Topics%0A%0ABeacon%20Chain%20Topics%20%5BPrysm%5D(https%3A%2F%2Fgithub.com%2Fprysmaticlabs%2Fprysm%2Fblob%2Fdevelop%2Fbeacon-chain%2Fp2p%2Ftopics.go)%0A%0Apackage%20p2p%0A%0Aconst%20(%0A%2F%2F%20GossipProtocolAndDigest%20represents%20the%20protocol%20and%20fork%20digest%20prefix%20in%20a%20gossip%20topic.%0AGossipProtocolAndDigest%20%3D%20%22%2Feth2%2F%25x%2F%22%0A%0A%2F%2F%20Message%20Types%0A%2F%2F%0A%2F%2F%20GossipAttestationMessage%20is%20the%20name%20for%20the%20attestation%20message%20type.%20It%20is%0A%2F%2F%20specially%20extracted%20so%20as%20to%20determine%20the%20correct%20message%20type%20from%20an%20attestation%0A%2F%2F%20subnet.%0AGossipAttestationMessage%20%3D%20%22beacon_attestation%22%0A%2F%2F%20GossipSyncCommitteeMessage%20is%20the%20name%20for%20the%20sync%20committee%20message%20type.%20It%20is%0A%2F%2F%20specially%20extracted%20so%20as%20to%20determine%20the%20correct%20message%20type%20from%20a%20sync%20committee%0A%2F%2F%20subnet.%0AGossipSyncCommitteeMessage%20%3D%20%22sync_committee%22%0A%2F%2F%20GossipBlockMessage%20is%20the%20name%20for%20the%20block%20message%20type.%0AGossipBlockMessage%20%3D%20%22beacon_block%22%0A%2F%2F%20GossipExitMessage%20is%20the%20name%20for%20the%20voluntary%20exit%20message%20type.%0AGossipExitMessage%20%3D%20%22voluntary_exit%22%0A%2F%2F%20GossipProposerSlashingMessage%20is%20the%20name%20for%20the%20proposer%20slashing%20message%20type.%0AGossipProposerSlashingMessage%20%3D%20%22proposer_slashing%22%0A%2F%2F%20GossipAttesterSlashingMessage%20is%20the%20name%20for%20the%20attester%20slashing%20message%20type.%0AGossipAttesterSlashingMessage%20%3D%20%22attester_slashing%22%0A%2F%2F%20GossipAggregateAndProofMessage%20is%20the%20name%20for%20the%20attestation%20aggregate%20and%20proof%20message%20type.%0AGossipAggregateAndProofMessage%20%3D%20%22beacon_aggregate_and_proof%22%0A%2F%2F%20GossipContributionAndProofMessage%20is%20the%20name%20for%20the%20sync%20contribution%20and%20proof%20message%20type.%0AGossipContributionAndProofMessage%20%3D%20%22sync_committee_contribution_and_proof%22%0A%2F%2F%20GossipBlsToExecutionChangeMessage%20is%20the%20name%20for%20the%20bls%20to%20execution%20change%20message%20type.%0AGossipBlsToExecutionChangeMessage%20%3D%20%22bls_to_execution_change%22%0A%0A%2F%2F%20Topic%20Formats%0A%2F%2F%0A%2F%2F%20AttestationSubnetTopicFormat%20is%20the%20topic%20format%20for%20the%20attestation%20subnet.%0AAttestationSubnetTopicFormat%20%3D%20GossipProtocolAndDigest%20%2B%20GossipAttestationMessage%20%2B%20%22_%25d%22%0A%2F%2F%20SyncCommitteeSubnetTopicFormat%20is%20the%20topic%20format%20for%20the%20sync%20committee%20subnet.%0ASyncCommitteeSubnetTopicFormat%20%3D%20GossipProtocolAndDigest%20%2B%20GossipSyncCommitteeMessage%20%2B%20%22_%25d%22%0A%2F%2F%20BlockSubnetTopicFormat%20is%20the%20topic%20format%20for%20the%20block%20subnet.%0ABlockSubnetTopicFormat%20%3D%20GossipProtocolAndDigest%20%2B%20GossipBlockMessage%0A%2F%2F%20ExitSubnetTopicFormat%20is%20the%20topic%20format%20for%20the%20voluntary%20exit%20subnet.%0AExitSubnetTopicFormat%20%3D%20GossipProtocolAndDigest%20%2B%20GossipExitMessage%0A%2F%2F%20ProposerSlashingSubnetTopicFormat%20is%20the%20topic%20format%20for%20the%20proposer%20slashing%20subnet.%0AProposerSlashingSubnetTopicFormat%20%3D%20GossipProtocolAndDigest%20%2B%20GossipProposerSlashingMessage%0A%2F%2F%20AttesterSlashingSubnetTopicFormat%20is%20the%20topic%20format%20for%20the%20attester%20slashing%20subnet.%0AAttesterSlashingSubnetTopicFormat%20%3D%20GossipProtocolAndDigest%20%2B%20GossipAttesterSlashingMessage%0A%2F%2F%20AggregateAndProofSubnetTopicFormat%20is%20the%20topic%20format%20for%20the%20aggregate%20and%20proof%20subnet.%0AAggregateAndProofSubnetTopicFormat%20%3D%20GossipProtocolAndDigest%20%2B%20GossipAggregateAndProofMessage%0A%2F%2F%20SyncContributionAndProofSubnetTopicFormat%20is%20the%20topic%20format%20for%20the%20sync%20aggregate%20and%20proof%20subnet.%0ASyncContributionAndProofSubnetTopicFormat%20%3D%20GossipProtocolAndDigest%20%2B%20GossipContributionAndProofMessage%0A%2F%2F%20BlsToExecutionChangeSubnetTopicFormat%20is%20the%20topic%20format%20for%20the%20bls%20to%20execution%20change%20subnet.%0ABlsToExecutionChangeSubnetTopicFormat%20%3D%20GossipProtocolAndDigest%20%2B%20GossipBlsToExecutionChangeMessage%0A)%0A%0A%23%23%23%20Appendix%20D%3A%20gRPC%20and%20API's%0A%0A%5BBeaconcha.in%20ETH2%20API%5D(https%3A%2F%2Fbeaconcha.in%2Fapi%2Fv1%2Fdocs%2Findex.html)%0A%0A%23%23%23%20Appendix%20E%3A%20Data%20Structures%0A%0A-%20Block%20Structure%20from%20%5Bgo-ethereum%5D(https%3A%2F%2Fgithub.com%2Fethereum%2Fgo-ethereum%2Fblob%2Frelease%2F1.9%2Fconsensus%2Fethash%2Fconsensus.go)%0A%0A%60%60%60%0A%0A%2F%2F%20SealHash%20returns%20the%20hash%20of%20a%20block%20prior%20to%20it%20being%20sealed.%0Afunc%20(ethash%20*Ethash)%20SealHash(header%20*types.Header)%20(hash%20common.Hash)%20%7B%0Ahasher%20%3A%3D%20sha3.NewLegacyKeccak256()%0A%0Arlp.Encode(hasher%2C%20%5B%5Dinterface%7B%7D%7B%0Aheader.ParentHash%2C%0Aheader.UncleHash%2C%0Aheader.Coinbase%2C%0Aheader.Root%2C%0Aheader.TxHash%2C%0Aheader.ReceiptHash%2C%0Aheader.Bloom%2C%0Aheader.Difficulty%2C%0Aheader.Number%2C%0Aheader.GasLimit%2C%0Aheader.GasUsed%2C%0Aheader.Time%2C%0Aheader.Extra%2C%0A%7D)%0Ahasher.Sum(hash%5B%3A0%5D)%0Areturn%20hash%0A%7D%0A%0A%60%60%60%0A%0A-%20Blocks%20Headers%20get%20forwarded%20to%20the%20Beacon%20chain%20once%20they%20pass%20%5Bbeacon%20consensus%5D(https%3A%2F%2Fgithub.com%2Fethereum%2Fgo-ethereum%2Fblob%2Fmaster%2Fconsensus%2Fbeacon%2Fconsensus.go)%0A-%20The%20Beacon%20chain%20embeds%20the%20EthChain%20Header%20into%20a%20%5BBeaconBlock%5D(https%3A%2F%2Fgithub.com%2Fprysmaticlabs%2Fprysm%2Fblob%2Fdevelop%2Fconsensus-types%2Fblocks%2Ftypes.go%23L43)%0A%0ABeaconBlockBody%20from%20%5Bprysm%5D(https%3A%2F%2Fgithub.com%2Fprysmaticlabs%2Fprysm%2Fblob%2Fdevelop%2Fconsensus-types%2Fblocks%2Ftypes.go)%20(golang)%0A%0A%60%60%60%0A%0A%2F%2F%20BeaconBlockBody%20is%20the%20main%20beacon%20block%20body%20structure.%20It%20can%20represent%20any%20block%20type.%0Atype%20BeaconBlockBody%20struct%20%7B%0Aversion%20int%0AisBlinded%20bool%0ArandaoReveal%20%5Bfield_params.BLSSignatureLength%5Dbyte%0Aeth1Data%20*eth.Eth1Data%0Agraffiti%20%5Bfield_params.RootLength%5Dbyte%0AproposerSlashings%20%5B%5D*eth.ProposerSlashing%0AattesterSlashings%20%5B%5D*eth.AttesterSlashing%0Aattestations%20%5B%5D*eth.Attestation%0Adeposits%20%5B%5D*eth.Deposit%0AvoluntaryExits%20%5B%5D*eth.SignedVoluntaryExit%0AsyncAggregate%20*eth.SyncAggregate%0AexecutionPayload%20*engine.ExecutionPayload%0AexecutionPayloadHeader%20%5C*engine.ExecutionPayloadHeader%0A%7D%0A%0A%2F%2F%20BeaconBlock%20is%20the%20main%20beacon%20block%20structure.%20It%20can%20represent%20any%20block%20type.%0Atype%20BeaconBlock%20struct%20%7B%0Aversion%20int%0Aslot%20types.Slot%0AproposerIndex%20types.ValidatorIndex%0AparentRoot%20%5Bfield_params.RootLength%5Dbyte%0AstateRoot%20%5Bfield_params.RootLength%5Dbyte%0Abody%20%5C*BeaconBlockBody%0A%7D%0A%0A%2F%2F%20SignedBeaconBlock%20is%20the%20main%20signed%20beacon%20block%20structure.%20It%20can%20represent%20any%20block%20type.%0Atype%20SignedBeaconBlock%20struct%20%7B%0Aversion%20int%0Ablock%20%5C*BeaconBlock%0Asignature%20%5Bfield_params.BLSSignatureLength%5Dbyte%0A%7D%0A%0A%60%60%60%0A%0AEth1Data%20from%20%5Bprysm%5D(https%3A%2F%2Fgithub.com%2Fprysmaticlabs%2Fprysm%2Fblob%2Fdevelop%2Fproto%2Fprysm%2Fv1alpha1%2Fpowchain.pb.go%23L24)%20(golang)%0A%0A%60%60%60%0A%0Atype%20ETH1ChainData%20struct%20%7B%0Astate%20protoimpl.MessageState%0AsizeCache%20protoimpl.SizeCache%0AunknownFields%20protoimpl.UnknownFields%0A%0ACurrentEth1Data%20*LatestETH1Data%20%60protobuf%3A%22bytes%2C1%2Copt%2Cname%3Dcurrent_eth1_data%2Cjson%3DcurrentEth1Data%2Cproto3%22%20json%3A%22current_eth1_data%2Comitempty%22%60%0AChainstartData%20*ChainStartData%20%60protobuf%3A%22bytes%2C2%2Copt%2Cname%3Dchainstart_data%2Cjson%3DchainstartData%2Cproto3%22%20json%3A%22chainstart_data%2Comitempty%22%60%0ABeaconState%20*BeaconState%20%60protobuf%3A%22bytes%2C3%2Copt%2Cname%3Dbeacon_state%2Cjson%3DbeaconState%2Cproto3%22%20json%3A%22beacon_state%2Comitempty%22%60%0ATrie%20*SparseMerkleTrie%20%60protobuf%3A%22bytes%2C4%2Copt%2Cname%3Dtrie%2Cproto3%22%20json%3A%22trie%2Comitempty%22%60%0ADepositContainers%20%5B%5D%5C*DepositContainer%20%60protobuf%3A%22bytes%2C5%2Crep%2Cname%3Ddeposit_containers%2Cjson%3DdepositContainers%2Cproto3%22%20json%3A%22deposit_containers%2Comitempty%22%60%0A%7D%0A%0Atype%20LatestETH1Data%20struct%20%7B%0Astate%20protoimpl.MessageState%0AsizeCache%20protoimpl.SizeCache%0AunknownFields%20protoimpl.UnknownFields%0A%0ABlockHeight%20uint64%20%60protobuf%3A%22varint%2C2%2Copt%2Cname%3Dblock_height%2Cjson%3DblockHeight%2Cproto3%22%20json%3A%22block_height%2Comitempty%22%60%0ABlockTime%20uint64%20%60protobuf%3A%22varint%2C3%2Copt%2Cname%3Dblock_time%2Cjson%3DblockTime%2Cproto3%22%20json%3A%22block_time%2Comitempty%22%60%0ABlockHash%20%5B%5Dbyte%20%60protobuf%3A%22bytes%2C4%2Copt%2Cname%3Dblock_hash%2Cjson%3DblockHash%2Cproto3%22%20json%3A%22block_hash%2Comitempty%22%60%0ALastRequestedBlock%20uint64%20%60protobuf%3A%22varint%2C5%2Copt%2Cname%3Dlast_requested_block%2Cjson%3DlastRequestedBlock%2Cproto3%22%20json%3A%22last_requested_block%2Comitempty%22%60%0A%7D%0A%0A%60%60%60%0A%0ABeaconBlockAltair%20from%20%5Blighthouse%5D(https%3A%2F%2Fgithub.com%2Fsigp%2Flighthouse%2Fblob%2Fstable%2Fconsensus%2Ftypes%2Fsrc%2Fbeacon_block.rs%23L407)%20rust%0A%0A%60%60%60%0A%0A%20%20%20%20%2F%2F%2F%20Return%20an%20Altair%20block%20where%20the%20block%20has%20maximum%20size.%0A%20%20%20%20pub%20fn%20full(spec%3A%20%26ChainSpec)%20-%3E%20Self%20%7B%0A%20%20%20%20%20%20%20%20let%20base_block%3A%20BeaconBlockBase%3C_%2C%20Payload%3E%20%3D%20BeaconBlockBase%3A%3Afull(spec)%3B%0A%20%20%20%20%20%20%20%20let%20sync_aggregate%20%3D%20SyncAggregate%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20sync_committee_signature%3A%20AggregateSignature%3A%3Aempty()%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20sync_committee_bits%3A%20BitVector%3A%3Adefault()%2C%0A%20%20%20%20%20%20%20%20%7D%3B%0A%20%20%20%20%20%20%20%20BeaconBlockAltair%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20slot%3A%20spec.genesis_slot%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20proposer_index%3A%200%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20parent_root%3A%20Hash256%3A%3Azero()%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20state_root%3A%20Hash256%3A%3Azero()%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20body%3A%20BeaconBlockBodyAltair%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20proposer_slashings%3A%20base_block.body.proposer_slashings%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20attester_slashings%3A%20base_block.body.attester_slashings%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20attestations%3A%20base_block.body.attestations%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20deposits%3A%20base_block.body.deposits%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20voluntary_exits%3A%20base_block.body.voluntary_exits%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20sync_aggregate%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20randao_reveal%3A%20Signature%3A%3Aempty()%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20eth1_data%3A%20Eth1Data%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20deposit_root%3A%20Hash256%3A%3Azero()%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20block_hash%3A%20Hash256%3A%3Azero()%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20deposit_count%3A%200%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7D%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20graffiti%3A%20Graffiti%3A%3Adefault()%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20_phantom%3A%20PhantomData%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20%7D%2C%0A%20%20%20%20%20%20%20%20%7D%0A%20%20%20%20%7D%0A%0A%7D%0A%0A%60%60%60%0A%0A%23%23%23%23%20Beacon%20State%20Data%20Structures%20from%20Prysm%0A%0A%60%60%60%0A%0Atype%20BeaconState%20interface%20%7B%0ASpecParametersProvider%0AReadOnlyBeaconState%0AWriteOnlyBeaconState%0ACopy()%20BeaconState%0AHashTreeRoot(ctx%20context.Context)%20(%5B32%5Dbyte%2C%20error)%0AFutureForkStub%0AStateProver%0A%7D%0A%0A%60%60%60%0A%0A%60%60%60%0A%0Atype%20ReadOnlyBeaconState%20interface%20%7B%0AReadOnlyBlockRoots%0AReadOnlyStateRoots%0AReadOnlyRandaoMixes%0AReadOnlyEth1Data%0AReadOnlyValidators%0AReadOnlyBalances%0AReadOnlyCheckpoint%0AReadOnlyAttestations%0AToProtoUnsafe()%20interface%7B%7D%0AToProto()%20interface%7B%7D%0AGenesisTime()%20uint64%0AGenesisValidatorsRoot()%20%5B%5Dbyte%0ASlot()%20types.Slot%0AFork()%20*ethpb.Fork%0ALatestBlockHeader()%20*ethpb.BeaconBlockHeader%0AHistoricalRoots()%20%5B%5D%5B%5Dbyte%0ASlashings()%20%5B%5Duint64%0AFieldReferencesCount()%20map%5Bstring%5Duint64%0AMarshalSSZ()%20(%5B%5Dbyte%2C%20error)%0AIsNil()%20bool%0AVersion()%20int%0ALatestExecutionPayloadHeader()%20(interfaces.ExecutionData%2C%20error)%0A%7D%0A%0A%60%60%60%0A%0A%60%60%60%0A%0Atype%20ReadOnlyValidators%20interface%20%7B%0AValidators()%20%5B%5D*ethpb.Validator%0AValidatorAtIndex(idx%20types.ValidatorIndex)%20(*ethpb.Validator%2C%20error)%0AValidatorAtIndexReadOnly(idx%20types.ValidatorIndex)%20(ReadOnlyValidator%2C%20error)%0AValidatorIndexByPubkey(key%20%5Bfieldparams.BLSPubkeyLength%5Dbyte)%20(types.ValidatorIndex%2C%20bool)%0APubkeyAtIndex(idx%20types.ValidatorIndex)%20%5Bfieldparams.BLSPubkeyLength%5Dbyte%0ANumValidators()%20int%0AReadFromEveryValidator(f%20func(idx%20int%2C%20val%20ReadOnlyValidator)%20error)%20error%0A%7D%0A%0A%60%60%60%0A%0A%60%60%60%0A%0Atype%20ReadOnlyRandaoMixes%20interface%20%7B%0ARandaoMixes()%20%5B%5D%5B%5Dbyte%0ARandaoMixAtIndex(idx%20uint64)%20(%5B%5Dbyte%2C%20error)%0ARandaoMixesLength()%20int%0A%7D%0A%0A%60%60%60%0A%0A%60%60%60%0A%0Atype%20WriteOnlyBeaconState%20interface%20%7B%0AWriteOnlyBlockRoots%0AWriteOnlyStateRoots%0AWriteOnlyRandaoMixes%0AWriteOnlyEth1Data%0AWriteOnlyValidators%0AWriteOnlyBalances%0AWriteOnlyCheckpoint%0AWriteOnlyAttestations%0ASetGenesisTime(val%20uint64)%20error%0ASetGenesisValidatorsRoot(val%20%5B%5Dbyte)%20error%0ASetSlot(val%20types.Slot)%20error%0ASetFork(val%20*ethpb.Fork)%20error%0ASetLatestBlockHeader(val%20*ethpb.BeaconBlockHeader)%20error%0ASetHistoricalRoots(val%20%5B%5D%5B%5Dbyte)%20error%0ASetSlashings(val%20%5B%5Duint64)%20error%0AUpdateSlashingsAtIndex(idx%2C%20val%20uint64)%20error%0AAppendHistoricalRoots(root%20%5B32%5Dbyte)%20error%0ASetLatestExecutionPayloadHeader(payload%20interfaces.ExecutionData)%20error%0ASetWithdrawalQueue(val%20%5B%5D*enginev1.Withdrawal)%20error%0AAppendWithdrawal(val%20*enginev1.Withdrawal)%20error%0ASetNextWithdrawalIndex(i%20uint64)%20error%0ASetNextPartialWithdrawalValidatorIndex(i%20types.ValidatorIndex)%20error%0A%7D%0A%0A%60%60%60%0A%0A%60%60%60%0A%0Atype%20WriteOnlyValidators%20interface%20%7B%0ASetValidators(val%20%5B%5D*ethpb.Validator)%20error%0AApplyToEveryValidator(f%20func(idx%20int%2C%20val%20*ethpb.Validator)%20(bool%2C%20*ethpb.Validator%2C%20error))%20error%0AUpdateValidatorAtIndex(idx%20types.ValidatorIndex%2C%20val%20*ethpb.Validator)%20error%0AAppendValidator(val%20%5C*ethpb.Validator)%20error%0A%7D%0A%0A%60%60%60%0A%0A%60%60%60%0A%0Atype%20WriteOnlyRandaoMixes%20interface%20%7B%0ASetRandaoMixes(val%20%5B%5D%5B%5Dbyte)%20error%0AUpdateRandaoMixesAtIndex(idx%20uint64%2C%20val%20%5B%5Dbyte)%20error%0A%7D%0A%0A%60%60%60%0A%0A%5BValidator%5D(https%3A%2F%2Fpkg.go.dev%2Fgithub.com%2Fprysmaticlabs%2Fprysm%2Fv3%40v3.1.2%2Fproto%2Fprysm%2Fv1alpha1%23Validator)%20information%0A%0A%60%60%60%0A%0Atype%20Validator%20struct%20%7B%0APublicKey%20%5B%5Dbyte%20%60protobuf%3A%22bytes%2C1%2Copt%2Cname%3Dpublic_key%2Cjson%3DpublicKey%2Cproto3%22%20json%3A%22public_key%2Comitempty%22%20spec-name%3A%22pubkey%22%20ssz-size%3A%2248%22%60%0AWithdrawalCredentials%20%5B%5Dbyte%20%60%60%2F*%20138-byte%20string%20literal%20not%20displayed%20*%2F%0A%20EffectiveBalance%20%20%20%20%20%20%20%20%20%20%20uint64%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%60protobuf%3A%22varint%2C3%2Copt%2Cname%3Deffective_balance%2Cjson%3DeffectiveBalance%2Cproto3%22%20json%3A%22effective_balance%2Comitempty%22%60%0A%20Slashed%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20bool%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%60protobuf%3A%22varint%2C4%2Copt%2Cname%3Dslashed%2Cproto3%22%20json%3A%22slashed%2Comitempty%22%60%0A%20ActivationEligibilityEpoch%20github_com_prysmaticlabs_prysm_v3_consensus_types_primitives.Epoch%60%60%20%2F_%20221-byte%20string%20literal%20not%20displayed%20_%2F%0AActivationEpoch%20github*com_prysmaticlabs_prysm_v3_consensus_types_primitives.Epoch%20%60%2F*%20186-byte%20string%20literal%20not%20displayed%20_%2F%0AExitEpoch%20github_com_prysmaticlabs_prysm_v3_consensus_types_primitives.Epoch%60%20%2F_%20168-byte%20string%20literal%20not%20displayed%20_%2F%0AWithdrawableEpoch%20github_com_prysmaticlabs_prysm_v3_consensus_types_primitives.Epoch%20%60%60%20%2F_%20192-byte%20string%20literal%20not%20displayed%20%5C_%2F%0A%2F%2F%20contains%20filtered%20or%20unexported%20fields%0A%7D%0A%0A%60%60%60%0A%0A%23%23%23%23%20%5Bweb3signer_types%20from%20prysm%5D(https%3A%2F%2Fgithub.com%2Fprysmaticlabs%2Fprysm%2Fblob%2Fdevelop%2Fvalidator%2Fkeymanager%2Fremote-web3signer%2Fv1%2Fweb3signer_types.go%23L107)%0A%0A%60%60%60%0A%0A%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%0A%2F%2F%20sub%20properties%20of%20Sign%20Requests%20%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%0A%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%0A%0A%2F%2F%20ForkInfo%20a%20sub%20property%20object%20of%20the%20Sign%20request%0Atype%20ForkInfo%20struct%20%7B%0AFork%20%5C*Fork%20%60json%3A%22fork%22%60%0AGenesisValidatorsRoot%20hexutil.Bytes%20%60json%3A%22genesis_validators_root%22%60%0A%7D%0A%0A%2F%2F%20Fork%20a%20sub%20property%20of%20ForkInfo.%0Atype%20Fork%20struct%20%7B%0APreviousVersion%20hexutil.Bytes%20%60json%3A%22previous_version%22%60%0ACurrentVersion%20hexutil.Bytes%20%60json%3A%22current_version%22%60%0AEpoch%20string%20%60json%3A%22epoch%22%60%20%2F_uint64_%2F%0A%7D%0A%0A%2F%2F%20AggregationSlot%20a%20sub%20property%20of%20AggregationSlotSignRequest.%0Atype%20AggregationSlot%20struct%20%7B%0ASlot%20string%20%60json%3A%22slot%22%60%0A%7D%0A%0A%2F%2F%20AggregateAndProof%20a%20sub%20property%20of%20AggregateAndProofSignRequest.%0Atype%20AggregateAndProof%20struct%20%7B%0AAggregatorIndex%20string%20%60json%3A%22aggregator_index%22%60%20%2F_%20uint64%20_%2F%0AAggregate%20_Attestation%20%60json%3A%22aggregate%22%60%0ASelectionProof%20hexutil.Bytes%20%60json%3A%22selection_proof%22%60%20%2F_%2096%20bytes%20_%2F%0A%7D%0A%0A%2F%2F%20Attestation%20a%20sub%20property%20of%20AggregateAndProofSignRequest.%0Atype%20Attestation%20struct%20%7B%0AAggregationBits%20hexutil.Bytes%20%60json%3A%22aggregation_bits%22%60%20%2F_hex%20bitlist_%2F%0AData%20%5C*AttestationData%20%60json%3A%22data%22%60%0ASignature%20hexutil.Bytes%20%60json%3A%22signature%22%60%0A%7D%0A%0A%2F%2F%20AttestationData%20a%20sub%20property%20of%20Attestation.%0Atype%20AttestationData%20struct%20%7B%0ASlot%20string%20%60json%3A%22slot%22%60%20%2F_%20uint64%20_%2F%0AIndex%20string%20%60json%3A%22index%22%60%20%2F_%20uint64%20_%2F%20%2F%2F%20Prysm%20uses%20CommitteeIndex%20but%20web3signer%20uses%20index.%0ABeaconBlockRoot%20hexutil.Bytes%20%60json%3A%22beacon_block_root%22%60%0ASource%20*Checkpoint%20%60json%3A%22source%22%60%0ATarget%20*Checkpoint%20%60json%3A%22target%22%60%0A%7D%0A%0A%2F%2F%20Checkpoint%20a%20sub%20property%20of%20AttestationData.%0Atype%20Checkpoint%20struct%20%7B%0AEpoch%20string%20%60json%3A%22epoch%22%60%0ARoot%20string%20%60json%3A%22root%22%60%0A%7D%0A%0A%60%60%60%0A%0A%5Battestation.proto%20from%20prysm%20(Message%20Structure)%5D(https%3A%2F%2Fgithub.com%2Fprysmaticlabs%2Fprysm%2Fblob%2Fdevelop%2Fproto%2Fprysm%2Fv1alpha1%2Fattestation.proto)%0A%0A%60%60%60%0A%0Amessage%20AttestationData%20%7B%0A%2F%2F%20Attestation%20data%20includes%20information%20on%20Casper%20the%20Friendly%20Finality%20Gadget's%20votes%0A%2F%2F%20See%3A%20https%3A%2F%2Farxiv.org%2Fpdf%2F1710.09437.pdf%0A%0A%20%20%20%20%2F%2F%20Slot%20of%20the%20attestation%20attesting%20for.%0A%20%20%20%20uint64%20slot%20%3D%201%20%5B(ethereum.eth.ext.cast_type)%20%3D%20%22github.com%2Fprysmaticlabs%2Fprysm%2Fv3%2Fconsensus-types%2Fprimitives.Slot%22%5D%3B%0A%0A%20%20%20%20%2F%2F%20The%20committee%20index%20that%20submitted%20this%20attestation.%0A%20%20%20%20uint64%20committee_index%20%3D%202%20%20%5B(ethereum.eth.ext.cast_type)%20%3D%20%22github.com%2Fprysmaticlabs%2Fprysm%2Fv3%2Fconsensus-types%2Fprimitives.CommitteeIndex%22%5D%3B%0A%0A%20%20%20%20%2F%2F%2032%20byte%20root%20of%20the%20LMD%20GHOST%20block%20vote.%0A%20%20%20%20bytes%20beacon_block_root%20%3D%203%20%5B(ethereum.eth.ext.ssz_size)%20%3D%20%2232%22%5D%3B%0A%0A%20%20%20%20%2F%2F%20The%20most%20recent%20justified%20checkpoint%20in%20the%20beacon%20state%0A%20%20%20%20Checkpoint%20source%20%3D%204%3B%0A%0A%20%20%20%20%2F%2F%20The%20checkpoint%20attempting%20to%20be%20justified%20for%20the%20current%20epoch%20and%20its%20epoch%20boundary%20block%0A%20%20%20%20Checkpoint%20target%20%3D%205%3B%0A%0A%7D%0A%0A%60%60%60%0A%0A%23%23%23%20Appendix%20F%3A%20Sample%20Data%0A%0A%23%23%23%23%20Epoch%20Data%20for%20167040%0A%0AFollowing%20is%20the%20Epoch%20Data%20for%20167040%0AIt%20can%20be%20retrieved%20from%20%5Bhere%5D(https%3A%2F%2Fbeaconcha.in%2Fapi%2Fv1%2Fdocs%2Findex.html%23%2FEpoch%2Fget_api_v1_epoch__epoch_)%20or%20by%20using%20this%20curl%20command%0A%0A%60curl%20-X%20'GET'%20%5C%0A%20%20'https%3A%2F%2Fbeaconcha.in%2Fapi%2Fv1%2Fepoch%2F167040'%20%5C%0A%20%20-H%20'accept%3A%20application%2Fjson'%60%0A%0AResponse%0A%0A%60%60%60%0A%0A%7B%0A%22status%22%3A%20%22OK%22%2C%0A%22data%22%3A%20%7B%0A%22attestationscount%22%3A%203457%2C%0A%22attesterslashingscount%22%3A%200%2C%0A%22averagevalidatorbalance%22%3A%2033899775551%2C%0A%22blockscount%22%3A%2032%2C%0A%22depositscount%22%3A%200%2C%0A%22eligibleether%22%3A%2015596542000000000%2C%0A%22epoch%22%3A%20167040%2C%0A%22finalized%22%3A%20true%2C%0A%22globalparticipationrate%22%3A%200.9963188171386719%2C%0A%22missedblocks%22%3A%200%2C%0A%22orphanedblocks%22%3A%200%2C%0A%22proposedblocks%22%3A%2032%2C%0A%22proposerslashingscount%22%3A%200%2C%0A%22scheduledblocks%22%3A%200%2C%0A%22totalvalidatorbalance%22%3A%2016522615004645864%2C%0A%22validatorscount%22%3A%20487396%2C%0A%22voluntaryexitscount%22%3A%200%2C%0A%22votedether%22%3A%2015539128000000000%0A%7D%0A%7D%0A%0A%60%60%60%0A%0A%23%23%23%23%20Block%20Data%20for%20Slot%205%2C330%2C592%0A%0AFollowing%20is%20the%20Block%20Data%20for%20Slot%205%2C330%2C592%0AIt%20can%20be%20retrieved%20from%20%5Bhere%5D(https%3A%2F%2Fbeaconcha.in%2Fapi%2Fv1%2Fdocs%2Findex.html%23%2FBlock%2Fget_api_v1_block__slotOrHash_)%20or%20by%20using%20this%20curl%20command%0A%0A%60curl%20-X%20'GET'%20'https%3A%2F%2Fbeaconcha.in%2Fapi%2Fv1%2Fblock%2F5330592'%20-H%20'accept%3A%20application%2Fjson'%60%0A%0AResponse%0A%0A%60%60%60%0A%0A%7B%0A%22status%22%3A%20%22OK%22%2C%0A%22data%22%3A%20%7B%0A%22attestationscount%22%3A%20126%2C%0A%22attesterslashingscount%22%3A%200%2C%0A%22blockroot%22%3A%20%220xaebe891086c79ab79b325f474dc1150f1223e567337bff815cc318f14c64c233%22%2C%0A%22depositscount%22%3A%200%2C%0A%22epoch%22%3A%20166581%2C%0A%22eth1data_blockhash%22%3A%20%220xd346f84ffe7c600b7714d6411c8bea988d9d64dbdb432f26db58e72946337954%22%2C%0A%22eth1data_depositcount%22%3A%20498785%2C%0A%22eth1data_depositroot%22%3A%20%220x9a5603a34aa60f299384679bf4bfc267e99b68278a81f343bde8cb5650bf1d60%22%2C%0A%22exec_base_fee_per_gas%22%3A%2012376913565%2C%0A%22exec_block_hash%22%3A%20%220x26239efe09f51b24bdf7c518b1aa925a3b0b6453682408ec8a5c906d5038a6e7%22%2C%0A%22exec_block_number%22%3A%2016163905%2C%0A%22exec_extra_data%22%3A%20%220x496c6c756d696e61746520446d6f63726174697a6520447374726962757465%22%2C%0A%22exec_fee_recipient%22%3A%20%220xdafea492d9c6733ae3d56b7ed1adb60692c98bc5%22%2C%0A%22exec_gas_limit%22%3A%2030000000%2C%0A%22exec_gas_used%22%3A%209901267%2C%0A%22exec_logs_bloom%22%3A%20%220x8c21554815843b4084a999b2901917a52c58004a82a8440d94919a77f9241181388a0c404f000a8c0321ab024800bf899610e60ec801fb4b0352e34f147626192648619065381ded6b9d92bcd0861120adc1ec01064e7a016ea91c478d01b81316462d2d622a60010bc0139f6fb8ccf200499c0e211a85c042047d1601aa0c2ea2833902a2a3091528492dad09f6dc064529c455d328413b78c680c4699815ac9a91610f19e66542edca45a10518ee65b02cf02241a124232d5958b6004cd0a5846c5703d00b5e4d8353221015f7d38c1429074e34aaa11f3804f933082860c401152088251479918297a1a9237d9ac35539f6d069cca07a005819494a653913%22%2C%0A%22exec_parent_hash%22%3A%20%220x06746d5ff105e96a1b8961c2490c0261b474604fbcbf934e86295c0030e26ce2%22%2C%0A%22exec_random%22%3A%20%220xc2861c72cf4d34b37ec73519dbc20b690742b5cc119ed3738f1dd67d8ca52723%22%2C%0A%22exec_receipts_root%22%3A%20%220x33cdf5c6e03dd341f282d02d3c354c2361a6212692b2a3c06b520397045313f4%22%2C%0A%22exec_state_root%22%3A%20%220x517304bade8d83337c9a52f8ceeb13f924b64486b3b8033f7c348c176922104a%22%2C%0A%22exec_timestamp%22%3A%201670791127%2C%0A%22exec_transactions_count%22%3A%20139%2C%0A%22graffiti%22%3A%20%220x0000000000000000000000000000000000000000000000000000000000000000%22%2C%0A%22graffiti_text%22%3A%20%22%22%2C%0A%22parentroot%22%3A%20%220x0cab36616bbcbbc67c343ddce00241c27d0df2c367c5fa82fc7c0fdf0ed37405%22%2C%0A%22proposer%22%3A%204345%2C%0A%22proposerslashingscount%22%3A%200%2C%0A%22randaoreveal%22%3A%20%220x83950cb64781aff91f4bd14aa6abb0f5fdb7e08e4e81c264f0754c93d7672c4a9615de196491fdb53eafdeb8f49e9cf515f1bd3dc05bb5dc0e2dd8bff5a8d783b503e3385e80b61485f0ddac1caa9361132a863db84e7e234df5815e6908e4e7%22%2C%0A%22signature%22%3A%20%220x84865a9480ae6313b0e5fcadfa294b35f5963e06c66ad1c7613dc081e9700c07f82a2583ba4b62b2483b4a1b9d49aafe0690f22fcf4d0072f9f44a5ce3067ef4fda560d171001cc6bf5dc84e09d9055d92894b86b27695c297f25530cd8db7a0%22%2C%0A%22slot%22%3A%205330592%2C%0A%22stateroot%22%3A%20%220x9e7e40d844c3b229cd9497d662a6d94276d285945073849995aba93c7e73cfe7%22%2C%0A%22status%22%3A%20%221%22%2C%0A%22syncaggregate_bits%22%3A%20%220xdffffffffffffffffffffffffffffff7fffffffffffffffffffffffffffffffffffffffffffffffffffffffdfffffffffffffffdffffffffffffffffffffffff%22%2C%0A%22syncaggregate_participation%22%3A%200.9921875%2C%0A%22syncaggregate_signature%22%3A%20%220x95332c55790018eed3d17eada01cb4045348d09137505bc8697eeedaa3800a830ee2c138251850a9577f62a5488419ef0a722579156a177fb3a147017f1077af5d778f46a4cdf815fc450129d135fe5286e16df68333592e4aa45821bde780dd%22%2C%0A%22voluntaryexitscount%22%3A%200%2C%0A%22votes%22%3A%2019227%0A%7D%0A%7D%0A%0A%60%60%60%0A%0A%23%23%23%23%20Execution%20Block%20for%2016163905%0A%0AFollowing%20is%20the%20execution%20block%20data%20for%2016163905%0AIt%20can%20be%20retrieved%20from%20%5Bhere%5D(https%3A%2F%2Fbeaconcha.in%2Fapi%2Fv1%2Fdocs%2Findex.html%23%2FExecution%2Fget_api_v1_execution_block__blockNumber_)%20or%20by%20using%20this%20curl%20command%0A%0A%60curl%20-X%20'GET'%20'https%3A%2F%2Fbeaconcha.in%2Fapi%2Fv1%2Fexecution%2Fblock%2F16163905'%20%20-H%20'accept%3A%20application%2Fjson'%60%0A%0AResult%0A%0A%60%60%60%0A%0A%7B%0A%22status%22%3A%20%22OK%22%2C%0A%22data%22%3A%20%5B%0A%7B%0A%22blockHash%22%3A%20%220x26239efe09f51b24bdf7c518b1aa925a3b0b6453682408ec8a5c906d5038a6e7%22%2C%0A%22blockNumber%22%3A%2016163905%2C%0A%22timestamp%22%3A%201670791127%2C%0A%22blockReward%22%3A%2037343826945103810%2C%0A%22blockMevReward%22%3A%2037083911760238810%2C%0A%22producerReward%22%3A%2037083911760238810%2C%0A%22feeRecipient%22%3A%20%220xdafea492d9c6733ae3d56b7ed1adb60692c98bc5%22%2C%0A%22gasLimit%22%3A%2030000000%2C%0A%22gasUsed%22%3A%209901267%2C%0A%22baseFee%22%3A%2012376913565%2C%0A%22txCount%22%3A%20139%2C%0A%22internalTxCount%22%3A%2054%2C%0A%22uncleCount%22%3A%200%2C%0A%22parentHash%22%3A%20%220x06746d5ff105e96a1b8961c2490c0261b474604fbcbf934e86295c0030e26ce2%22%2C%0A%22uncleHash%22%3A%20%220x1dcc4de8dec75d7aab85b567b6ccd41ad312451b948a7413f0a142fd40d49347%22%2C%0A%22difficulty%22%3A%200%2C%0A%22posConsensus%22%3A%20%7B%0A%22executionBlockNumber%22%3A%2016163905%2C%0A%22proposerIndex%22%3A%204345%2C%0A%22slot%22%3A%205330592%2C%0A%22epoch%22%3A%20166581%2C%0A%22finalized%22%3A%20true%0A%7D%2C%0A%22relay%22%3A%20%7B%0A%22tag%22%3A%20%22flashbots-relay%22%2C%0A%22builderPubkey%22%3A%20%220x81beef03aafd3dd33ffd7deb337407142c80fea2690e5b3190cfc01bde5753f28982a7857c96172a75a234cb7bcb994f%22%2C%0A%22producerFeeRecipient%22%3A%20%220x60987e0d8b5e0095869ca6f0e642828e3f258bb5%22%0A%7D%2C%0A%22consensusAlgorithm%22%3A%20%22pos%22%0A%7D%0A%5D%0A%7D%0A%0A%60%60%60%0A%0A%23%23%23%23%20Sync%20Committee%20(latest)%0A%0AFollowing%20is%20a%20sample%20Sync%20Committee%0AIt%20can%20be%20retrieved%20from%20%5Bhere%5D(https%3A%2F%2Fbeaconcha.in%2Fapi%2Fv1%2Fdocs%2Findex.html%23%2FSyncCommittee%2Fget_api_v1_sync_committee__period_)%20or%20by%20using%20this%20curl%20command%0A%0A%60curl%20-X%20'GET'%20'https%3A%2F%2Fbeaconcha.in%2Fapi%2Fv1%2Fsync_committee%2Flatest'%20-H%20'accept%3A%20application%2Fjson'%60%0A%0AAbbrieviated%20Result%0A%0A%60%60%60%0A%0A%7B%0A%22status%22%3A%20%22OK%22%2C%0A%22data%22%3A%20%7B%0A%22end_epoch%22%3A%20167167%2C%0A%22period%22%3A%20652%2C%0A%22start_epoch%22%3A%20166912%2C%0A%22validators%22%3A%20%5B%0A328781%2C%0A184949%2C%0A...%0A%5D%0A%7D%0A%7D%0A%0A%60%60%60%0A%0A%3Cdetails%3E%0A%3Csummary%3EFull%20Result%3C%2Fsummary%3E%0A%0A%60%60%60%0A%0A%7B%0A%22status%22%3A%20%22OK%22%2C%0A%22data%22%3A%20%7B%0A%22end_epoch%22%3A%20167167%2C%0A%22period%22%3A%20652%2C%0A%22start_epoch%22%3A%20166912%2C%0A%22validatorsdetails%3E%0A%0A%23%23%23%20Appendix%20G%3A%20Storing%20minimal%20information%0A%0A%23%23%23%23%20Minimal%20footprint%0A%0A%23%23%23%23%20Header%20Checkpoints%0A%0A%23%23%23%23%23%20Inclusion%20Proof%0A%0A%23%23%23%23%23%20ZKP%20for%20Checkpoints%0A%0A%23%23%23%23%20Proving%0A%0A%23%23%23%23%20Verification%0A%0A%23%23%23%20Appendix%20H%3A%20Validating%20Header%0A%0A%23%23%23%23%20Tracking%20Validators%0A%0A%23%23%23%23%23%20ZKP%20for%20validator%20change%0A%0A%23%23%23%23%20Verifying%20Signatures%0A%0A%23%23%23%23%23%20ECDSA%0A%0A%23%23%23%23%23%20RSA%0A%0A%23%23%23%23%23%20EdDSA%0A%0A%23%23%23%23%20Pure%20on-chain%20implementation%20and%20costs%0A%0A%23%23%23%23%23%23%20ZKP%20for%20EdDSA%0A%0A%23%23%23%23%23%20BLS12-381%20and%20variants%0A%0A%23%23%23%23%23%23%20Pure%20on-chain%20implementation%20and%20costs%0A%0A%23%23%23%23%23%23%20ZKP%20for%20BLS12-381%0A%0A%23%23%23%20Appendix%20I%3A%20Cost%20analysis%20and%20benchmark%0A%0A%23%23%23%20Appendix%20J%3A%20Sync%20Committe%20Creation%20and%20Retrieval%0A%0A**Sync%20Committee%20Configuration**%0A%0A%60EPOCHS_PER_SYNC_COMMITTEE_PERIOD%60%20is%20set%20in%20%5Bconfig.go%5D(https%3A%2F%2Fgithub.com%2Fprysmaticlabs%2Fprysm%2Fblob%2Fdevelop%2Fconfig%2Fparams%2Fconfig.go%23L185)%20currently%20255%20epochs%20per%20synch%20comittee%20(approx%2027%20hrs)%20for%20Ethreum%20Mainnet.%0A%0A**Sync%20Committee%20Update%20Process**%0A%0A-%20%5Bbeacon-chain%2Fblockchain%5D(https%3A%2F%2Fgithub.com%2Fprysmaticlabs%2Fprysm%2Ftree%2Fdevelop%2Fbeacon-chain%2Fblockchain)%0A%20%20-%20%5Bprocess_block.go%5D(https%3A%2F%2Fgithub.com%2Fprysmaticlabs%2Fprysm%2Fblob%2Fdevelop%2Fbeacon-chain%2Fblockchain%2Fprocess_block.go)%3A%20has%20function%20%60onBlock%60%20which%20is%20called%20when%20a%20gossip%20block%20is%20received.%20It%20also%20has%20function%20%60handleEpochBoundary%60%20which%20calls%20%60ProcessSlots%60%20in%20%5Bbeacon-chain%2Fcore%2Ftransition%5D(https%3A%2F%2Fgithub.com%2Fprysmaticlabs%2Fprysm%2Ftree%2Fdevelop%2Fbeacon-chain%2Fcore%2Ftransition)%20and%20calls%20function%20%60UpdateCommitteeCache%60%20in%20%5Bbeacon-chain%2Fcore%2Fhelpers%5D(https%3A%2F%2Fgithub.com%2Fprysmaticlabs%2Fprysm%2Ftree%2Fdevelop%2Fbeacon-chain%2Fcore%2Fhelpers)%0A-%20%5Bbeacon-chain%2Fcore%2Ftransition%5D(https%3A%2F%2Fgithub.com%2Fprysmaticlabs%2Fprysm%2Ftree%2Fdevelop%2Fbeacon-chain%2Fcore%2Ftransition)%0A%20%20-%20%5Btransition.go%5D(https%3A%2F%2Fgithub.com%2Fprysmaticlabs%2Fprysm%2Fblob%2Fdevelop%2Fbeacon-chain%2Fcore%2Ftransition%2Ftransition.go)%3A%20implements%20the%20whole%20state%20transition%20function%20which%20consists%20of%20per%20slot%2C%20per-epoch%20transitions.%20function%20%60ProcessSlots%60%20calls%20%60ProcessEpoch%60%20in%20%5Bbeacon-chain%2Fcore%2Faltair%2Ftransition.go%5D(%3C(%253Chttps%3A%2F%2Fgithub.com%2Fprysmaticlabs%2Fprysm%2Fblob%2Fdevelop%2Fbeacon-chain%2Fcore%2Faltair%2Ftransition.go)%253E%3E)%0A-%20%5Bbeacon-chain%2Fcore%2Faltair%5D(https%3A%2F%2Fgithub.com%2Fprysmaticlabs%2Fprysm%2Ftree%2Fdevelop%2Fbeacon-chain%2Fcore%2Faltair)%0A%20%20-%20%5Btransition.go%5D(https%3A%2F%2Fgithub.com%2Fprysmaticlabs%2Fprysm%2Fblob%2Fdevelop%2Fbeacon-chain%2Fcore%2Faltair%2Ftransition.go)%3A%20includes%20function%20%60ProcessEpoch%60%20which%20calls%20%60ProcessSyncCommitteeUpdates%60%20in%20%5Bepoch_spec.go%5D(https%3A%2F%2Fgithub.com%2Fprysmaticlabs%2Fprysm%2Fblob%2Fdevelop%2Fbeacon-chain%2Fcore%2Faltair%2Fepoch_spec.go)%0A%20%20-%20%5Bepoch_spec.go%5D(https%3A%2F%2Fgithub.com%2Fprysmaticlabs%2Fprysm%2Fblob%2Fdevelop%2Fbeacon-chain%2Fcore%2Faltair%2Fepoch_spec.go)%3A%20includes%20function%20%60ProcessSyncCommitteeUpdates%60%20which%20calls%20%60NextSyncCommittee%60%20it%20also%20persists%20beacon%20state%20syncCommittee%20by%20calling%20%60beaconState.SetNextSyncCommittee(nextSyncCommittee)%60%20in%20%5Bsetters_sync_committee.go%5D(https%3A%2F%2Fgithub.com%2Fprysmaticlabs%2Fprysm%2Fblob%2Fdevelop%2Fbeacon-chain%2Fstate%2Fstate-native%2Fsetters_sync_committee.go)%0A%20%20-%20%5Bsync_committee.go%5D(https%3A%2F%2Fgithub.com%2Fprysmaticlabs%2Fprysm%2Fblob%2Fdevelop%2Fbeacon-chain%2Fcore%2Faltair%2Fsync_committee.go)%3A%20includes%20function%20%60NextSyncCommittee%60%20which%20calls%20%60NextSyncCommittee%60%20to%20return%20the%20sync%20committee%20indices%2C%20with%20possible%20duplicates%2C%20for%20the%20next%20sync%20committee.%0A%20%20-%20%5Bblock.go%5D(https%3A%2F%2Fgithub.com%2Fprysmaticlabs%2Fprysm%2Fblob%2Fdevelop%2Fbeacon-chain%2Fcore%2Faltair%2Fblock.go)%3A%20includes%20function%20%60VerifySyncCommitteeSig%60%0A-%20%5Bbeacon-chain%2Fcore%2Fhelpers%5D(https%3A%2F%2Fgithub.com%2Fprysmaticlabs%2Fprysm%2Ftree%2Fdevelop%2Fbeacon-chain%2Fcore%2Fhelpers)%0A%20%20-%20%5Bbeacon_committee.go%5D(https%3A%2F%2Fgithub.com%2Fprysmaticlabs%2Fprysm%2Fblob%2Fdevelop%2Fbeacon-chain%2Fcore%2Fhelpers%2Fbeacon_committee.go)%20has%20function%20%60UpdateCommitteeCache%60%20which%20gets%20called%20at%20the%20beginning%20of%20every%20epoch%20to%20cache%20the%20committee%20shuffled%20indices%20list%20with%20committee%20index%20and%20epoch%20number.%20It%20caches%20the%20shuffled%20indices%20for%20current%20epoch%20and%20next%20epoch.%20it%20calls%20%60UpdatePositionsInCommittee%60%20in%20%5Bsync_committee.go%5D(https%3A%2F%2Fgithub.com%2Fprysmaticlabs%2Fprysm%2Fblob%2Fdevelop%2Fbeacon-chain%2Fcache%2Fsync_committee.go)%0A-%20%5Bbeacon-chain%2Fcache%5D(https%3A%2F%2Fgithub.com%2Fprysmaticlabs%2Fprysm%2Ftree%2Fdevelop%2Fbeacon-chain%2Fcache)%0A%20%20-%20%5Bsync_committee.go%5D(https%3A%2F%2Fgithub.com%2Fprysmaticlabs%2Fprysm%2Fblob%2Fdevelop%2Fbeacon-chain%2Fcache%2Fsync_committee.go)%3A%20has%20function%20%60UpdatePositionsInCommittee%60%20which%20updates%20caching%20of%20validators%20position%20in%20sync%20committee%20in%20respect%20to%20current%20epoch%20and%20next%20epoch.%20This%20should%20be%20called%20when%20%60current_sync_committee%60%20and%20%60next_sync_committee%60%20change%20and%20that%20happens%20every%20%60EPOCHS_PER_SYNC_COMMITTEE_PERIOD%60.%0A%0A**Sync%20Committee%20Retrieval**%0AgRPC%20and%20API%20methods%0A%0A-%20%5Bbeacon-chain%2Frpc%5D(https%3A%2F%2Fgithub.com%2Fprysmaticlabs%2Fprysm%2Ftree%2Fdevelop%2Fbeacon-chain%2Frpc)%0A%20%20-%20%5Bprysm%2Fv1alpha1%5D(https%3A%2F%2Fgithub.com%2Fprysmaticlabs%2Fprysm%2Ftree%2Fdevelop%2Fbeacon-chain%2Frpc%2Fprysm%2Fv1alpha1)%0A%20%20%20%20-%20%5Bvalidator%5D(https%3A%2F%2Fgithub.com%2Fprysmaticlabs%2Fprysm%2Ftree%2Fdevelop%2Fbeacon-chain%2Frpc%2Fprysm%2Fv1alpha1%2Fvalidator)%0A%20%20%20%20%20%20-%20%5Bassignments.go%5D(https%3A%2F%2Fgithub.com%2Fprysmaticlabs%2Fprysm%2Fblob%2Fdevelop%2Fbeacon-chain%2Frpc%2Fprysm%2Fv1alpha1%2Fvalidator%2Fassignments.go)%3A%20has%20functions%20%60GetDuties%60%20and%20%60StreamDuties%60%20which%20calls%20function%20%60duties%60%20to%20compute%20the%20validator%20duties%20from%20the%20head%20state's%20corresponding%20epoch%20for%20validators%20public%20key%20%2F%20indices%20requested.%0A%0Awhich%20%5Bmanages%20sync%20committee%20duties%5D(https%3A%2F%2Fgithub.com%2Fprysmaticlabs%2Fprysm%2Fblob%2Fdevelop%2Fbeacon-chain%2Frpc%2Fprysm%2Fv1alpha1%2Fvalidator%2Fassignments.go%23L213)%20every%20%60EPOCHS_PER_SYNC_COMMITTEE_PERIOD%20-%201%60%20which%20is%20set%20in%20%5Bconfig.go%5D(https%3A%2F%2Fgithub.com%2Fprysmaticlabs%2Fprysm%2Fblob%2Fdevelop%2Fconfig%2Fparams%2Fconfig.go%23L185)%20currently%20255%20epochs%20per%20synch%20comittee%20(approx%2027%20hrs)%20for%20Ethreum%20Mainnet.%0A%0A%5BregisterSyncSubnetNextPeriod%5D(https%3A%2F%2Fgithub.com%2Fprysmaticlabs%2Fprysm%2Fblob%2Fdevelop%2Fbeacon-chain%2Frpc%2Fprysm%2Fv1alpha1%2Fvalidator%2Fassignments.go%23L281)%0A%0A%60%60%60%0A%0Afunc%20registerSyncSubnetNextPeriod(s%20beaconState.BeaconState%2C%20epoch%20types.Epoch%2C%20pubKey%20%5B%5Dbyte%2C%20status%20ethpb.ValidatorStatus)%20error%20%7B%0Acommittee%2C%20err%20%3A%3D%20s.NextSyncCommittee()%0Aif%20err%20!%3D%20nil%20%7B%0Areturn%20err%0A%7D%0AsyncCommPeriod%20%3A%3D%20slots.SyncCommitteePeriod(epoch)%0AregisterSyncSubnet(epoch%2C%20syncCommPeriod%2B1%2C%20pubKey%2C%20committee%2C%20status)%0Areturn%20nil%0A%7D%0A%0A%60%60%60%0A%0A**Sync%20Committee%20Storage**%0A%0APersistence%20Mechanism%0A%0A-%20%5Bproto%5D(https%3A%2F%2Fgithub.com%2Fprysmaticlabs%2Fprysm%2Ftree%2Fdevelop%2Fproto)%0A%20%20-%20%5Beth%2Fv2%5D(https%3A%2F%2Fgithub.com%2Fprysmaticlabs%2Fprysm%2Ftree%2Fdevelop%2Fproto%2Feth%2Fv2)%0A%20%20%20%20-%20%5Bvalidator.proto%5D(https%3A%2F%2Fgithub.com%2Fprysmaticlabs%2Fprysm%2Fblob%2Fdevelop%2Fproto%2Feth%2Fv2%2Fvalidator.proto)%3A%20messages%20for%20validators%20including%20%60SyncCommitteeDuty%60%0A%20%20%20%20-%20%5Bsync_committee.proto%5D(https%3A%2F%2Fgithub.com%2Fprysmaticlabs%2Fprysm%2Fblob%2Fdevelop%2Fproto%2Feth%2Fv2%2Fsync_committee.proto)%3A%20messages%20for%20SyncCommittee%20which%20serves%20as%20committees%20to%20facilitate%20light%20client%20syncing%20to%20beacon%20chain.%0A%0A%5Bbeacon_state_mainnet.go%5D(https%3A%2F%2Fgithub.com%2Fprysmaticlabs%2Fprysm%2Fblob%2Fv3.1.2%2Fbeacon-chain%2Fstate%2Fstate-native%2Fbeacon_state_mainnet.go)%0A%0A%60%60%60%0A%0A%2F%2F%20BeaconState%20defines%20a%20struct%20containing%20utilities%20for%20the%20Ethereum%20Beacon%20Chain%20state%2C%20defining%0A%2F%2F%20getters%20and%20setters%20for%20its%20respective%20values%20and%20helpful%20functions%20such%20as%20HashTreeRoot().%0Atype%20BeaconState%20struct%20%7B%0Aversion%20int%0AgenesisTime%20uint64%0AgenesisValidatorsRoot%20%5B32%5Dbyte%0Aslot%20eth2types.Slot%0Afork%20*ethpb.Fork%0AlatestBlockHeader%20*ethpb.BeaconBlockHeader%0AblockRoots%20*customtypes.BlockRoots%0AstateRoots%20*customtypes.StateRoots%0AhistoricalRoots%20customtypes.HistoricalRoots%0Aeth1Data%20*ethpb.Eth1Data%0Aeth1DataVotes%20%5B%5D*ethpb.Eth1Data%0Aeth1DepositIndex%20uint64%0Avalidators%20%5B%5D*ethpb.Validator%0Abalances%20%5B%5Duint64%0ArandaoMixes%20*customtypes.RandaoMixes%0Aslashings%20%5B%5Duint64%0ApreviousEpochAttestations%20%5B%5D*ethpb.PendingAttestation%0AcurrentEpochAttestations%20%5B%5D*ethpb.PendingAttestation%0ApreviousEpochParticipation%20%5B%5Dbyte%0AcurrentEpochParticipation%20%5B%5Dbyte%0AjustificationBits%20bitfield.Bitvector4%0ApreviousJustifiedCheckpoint%20*ethpb.Checkpoint%0AcurrentJustifiedCheckpoint%20*ethpb.Checkpoint%0AfinalizedCheckpoint%20*ethpb.Checkpoint%0AinactivityScores%20%5B%5Duint64%0AcurrentSyncCommittee%20*ethpb.SyncCommittee%0AnextSyncCommittee%20*ethpb.SyncCommittee%0AlatestExecutionPayloadHeader%20*enginev1.ExecutionPayloadHeader%0AlatestExecutionPayloadHeaderCapella%20%5C*enginev1.ExecutionPayloadHeaderCapella%0AnextWithdrawalIndex%20uint64%0AnextWithdrawalValidatorIndex%20eth2types.ValidatorIndex%0A%0Alock%20sync.RWMutex%0AdirtyFields%20map%5Bnativetypes.FieldIndex%5Dbool%0AdirtyIndices%20map%5Bnativetypes.FieldIndex%5D%5B%5Duint64%0AstateFieldLeaves%20map%5Bnativetypes.FieldIndex%5D*fieldtrie.FieldTrie%0ArebuildTrie%20map%5Bnativetypes.FieldIndex%5Dbool%0AvalMapHandler%20*stateutil.ValidatorMapHandler%0AmerkleLayers%20%5B%5D%5B%5D%5B%5Dbyte%0AsharedFieldReferences%20map%5Bnativetypes.FieldIndex%5D%5C*stateutil.Reference%0A%7D%0A%0A%60%60%60%0A%0A%5Bbeacon_state.pb.go%5D(https%3A%2F%2Fgithub.com%2Fprysmaticlabs%2Fprysm%2Fblob%2Fdevelop%2Fproto%2Fprysm%2Fv1alpha1%2Fbeacon_state.pb.go%23L962)%0A%0A%60%60%60%0A%0Atype%20SyncCommittee%20struct%20%7B%0Astate%20protoimpl.MessageState%0AsizeCache%20protoimpl.SizeCache%0AunknownFields%20protoimpl.UnknownFields%0A%0APubkeys%20%5B%5D%5B%5Dbyte%20%60protobuf%3A%22bytes%2C1%2Crep%2Cname%3Dpubkeys%2Cproto3%22%20json%3A%22pubkeys%2Comitempty%22%20ssz-size%3A%22512%2C48%22%60%0AAggregatePubkey%20%5B%5Dbyte%20%60protobuf%3A%22bytes%2C2%2Copt%2Cname%3Daggregate_pubkey%2Cjson%3DaggregatePubkey%2Cproto3%22%20json%3A%22aggregate_pubkey%2Comitempty%22%20ssz-size%3A%2248%22%60%0A%7D%0A%0A%60%60%60%0A%0A%5BInterfaces%5D(https%3A%2F%2Fgithub.com%2Fprysmaticlabs%2Fprysm%2Fblob%2Fv3.1.2%2Fbeacon-chain%2Fstate%2Finterfaces.go)%0A%0A%60%60%60%0A%0A%2F%2F%20BeaconState%20has%20read%20and%20write%20access%20to%20beacon%20state%20methods.%0Atype%20BeaconState%20interface%20%7B%0ASpecParametersProvider%0AReadOnlyBeaconState%0AReadOnlyWithdrawals%0AWriteOnlyBeaconState%0ACopy()%20BeaconState%0AHashTreeRoot(ctx%20context.Context)%20(%5B32%5Dbyte%2C%20error)%0AFutureForkStub%0AStateProver%0A%7D%0A%0A%60%60%60%0A%0A%60%60%60%0A%0A%2F%2F%20StateProver%20defines%20the%20ability%20to%20create%20Merkle%20proofs%20for%20beacon%20state%20fields.%0Atype%20StateProver%20interface%20%7B%0AFinalizedRootProof(ctx%20context.Context)%20(%5B%5D%5B%5Dbyte%2C%20error)%0ACurrentSyncCommitteeProof(ctx%20context.Context)%20(%5B%5D%5B%5Dbyte%2C%20error)%0ANextSyncCommitteeProof(ctx%20context.Context)%20(%5B%5D%5B%5Dbyte%2C%20error)%0A%7D%0A%0A%60%60%60%0A%0A%60%60%60%0A%0A%60%60%60%0A%0A%60%60%60%0A%0A%60%60%60%0A",lastUpdatedAt:1753129136e3},{lazy:()=>o2(()=>import("./ethereum-DFJJOuHp.js"),[]),path:"/research/code/ethereum.html",type:"mdx",filePath:"research/code/ethereum.mdx",content:"%23%20Ethereum%20Code%0A%0A-%20date%3A%202023-02-04%0A-%20last%20updated%3A%202023-02-04%0A%0A%23%23%20Overview%0A%0AWith%20the%20Introduction%20of%20Ethereum%202.0%3Csup%3E%5B1%5D(%23bp1)%3C%2Fsup%3E%20%3Csup%3E%5B2%5D(%23bp2)%3C%2Fsup%3E%20%3Csup%3E%5B3%5D(%23bp3)%3C%2Fsup%3E%20block%20production%20and%20consensus%20were%20separated%3Csup%3E%5B4%5D(%23bp4)%3C%2Fsup%3E%20into%20execution%20clients%3Csup%3E%5B5%5D(%23bp5)%3C%2Fsup%3E%20and%20consensus%20clients%3Csup%3E%5B6%5D(%23ts6)%3C%2Fsup%3E%20%3Csup%3E%5B7%5D(%23bp7)%3C%2Fsup%3E.%0A%0AThe%20execution%20chain%20implemented%20a%20simplified%20Proof%20of%20Work%3Csup%3E%5B1%5D(%23bp1)%3C%2Fsup%3E%20reducing%20difficutly%20to%20zero%20and%20removing%20the%20need%20for%20omners%20(uncles)%20which%20would%20now%20be%20handled%20by%20the%20beacon%20chain%3Csup%3E%5B3%5D(%23bp3)%3C%2Fsup%3E%20which%20is%20responsible%20for%20providing%20consensus%20%3Csup%3E%5B2%5D(%23bp2)%3C%2Fsup%3E.%0A%0ALight%20Clients%3Csup%3E%5B11%5D(%23ts11)%3C%2Fsup%3E%20were%20also%20introduced.%20To%20facilate%20this%0Aa%20sync%20committee%20of%20512%20current%20validators%20is%20elected%20every%20255%20epochs%2C%20approximately%20every%2027%20hours%20(see%20%5Bsample%20sync%20comittee%20data%5D(%23sync-committee-latest))%2C%20they%20are%20responsible%20for%20signing%20each%20block.%0A%0AAs%20at%20December%2011th%2C%202022%20Ethereum%20has%20487%2C920%20validators%3Csup%3E%5B8%5D(%23bp8)%3C%2Fsup%3E%20with%20a%20sample%20epoch%20(%5B166581%5D(https%3A%2F%2Fbeaconcha.in%2Fepoch%2F166581))%20and%20slot%20(%5B5%2C330%2C592%5D(https%3A%2F%2Fbeaconcha.in%2Fslot%2F5330592))%20having%20%5B139%20transactions%5D(https%3A%2F%2Fbeaconcha.in%2Fslot%2F5330592%23transactions)%20with%20%5B19%2C227%20votes%5D(https%3A%2F%2Fbeaconcha.in%2Fslot%2F5330592%23votes)%20from%2063%20committees%20and%20%5B126%20aggregated%20committe%20attestations%5D(https%3A%2F%2Fbeaconcha.in%2Fslot%2F5330592%23attestations).%0A%0A%23%23%20Abstract%0A%0AThis%20research%20follows%20on%20from%20What%20to%20build%20next%20in%20Zero%20Knowledge%3Csup%3E%5B1%5D(%23ov1)%3C%2Fsup%3E%2C%20Crosschain%20Future%3Csup%3E%5B2%5D(%23ov2)%3C%2Fsup%3E%20and%20Technical%20Problems%20Overview%3Csup%3E%5B3%5D(%23ov3)%3C%2Fsup%3E.%0A%0AHere%20we%20propose%20an%20approach%20for%20building%20a%20trustless%20bridging%20infrastructure%20between%20Ethereum%20and%20Multiple%20Chains%2C%20complete%20with%20costing%20information%20for%20storage%2C%20proof%20generation%20and%20verification%20across%20multiple%20chains.%0A%0AWe%20review%20technical%20approaches%20for%20Trustless%20Bridge%20Design%20using%20Zero%20Knowledge%20Proofs%20including%20storage%20and%20validation%20of%20block%20headers%2C%20verification%20of%20ethereum%20events%20on%20other%20chains%20and%20asset%20bridging%20functionality.%0A%0AFor%20completenes%20we%20include%20a%20technical%20review%20of%20Ethereum%202.0%20block%20production%2C%20consensus%2C%20signature%20schemes%20and%20light%20client%20functionality.%0A%0A%23%23%20Trustless%20Bridge%20Design%0A%0A%23%23%23%20High%20level%20Approach%0A%0A1.%20Define%20logic%20flow%20for%20bridging%20data%20(ERC20%20initially)%20between%20Etheruem%20and%20a%20target%20chain.%0A2.%20Identify%20Key%20Data%20Points%20which%20Need%20to%20be%20Synched%20and%20Frequency%0A%20%20%201.%20Active%20Validators%20(Sync%20Committee%3Csup%3E%5B10%5D(%23ts10)%3C%2Fsup%3E)%20%3A%20every%20255%20epochs%2C%20approximately%2027%20hours.%0A%20%20%202.%20Epoch%20Committee%20Verification%3A%20every%20epoch%20(32%20slots)%2C%20approx%206.4%20minutes.%0A%20%20%203.%20Block%20Headers%3A%20every%20epoch%20(32%20slots)%2C%20approx%206.4%20minutes.%0A%20%20%204.%20Bridge%20Transactions%3A%20as%20Needed.%0A3.%20Identify%20Proving%20Mechanisms%20for%20Data%20Points%0A%20%20%201.%20Sync%20Committee%3A%20SSZ%20Proof%0A%20%20%202.%20Epoch%20Comittees%0A%20%20%203.%20Block%20Headers%3A%20Aggregated%20BLS%20Signature%20Verification%20Proof%2C%20Patricia%20Merkle%0A%20%20%204.%20Bridge%20Transactions%3A%20Transaction%20Proofs%0A4.%20Use%20Zero%20Knowledge%20Proofs%20where%20possible%20to%20reduce%20storage%20and%20compute%20costing%0A%20%20%201.%20Sync%20Committee%3A%20SSZ%20Proof%0A%20%20%202.%20Epoch%20Comittees%3A%0A%20%20%203.%20Block%20Headers%3A%20Aggregated%20BLS%20Signature%20Verification%20Proof%2C%20Patricia%20Merkle%0A%20%20%204.%20Bridge%20Transactions%3A%20Transaction%20Proofs%0A5.%20Relayer%20and%20Proving%20Infrastructure%0A%20%20%201.%20Relayer%20operational%20and%20verification%20costs%20and%20incentives%0A%20%20%202.%20Proving%20infrastructure%20and%20proof%20generation%20costs%20(proofs%20can%20be%20used%20for%20multiple%20chains)%0A%20%20%203.%20Bridging%20assets%20infrastructure%2C%20incentives%20and%20transactional%20costs%0A%0AReference%20design%20articles%20include%20Succinct%3Csup%3E%5B1%5D(%23tb1)%3C%2Fsup%3E%20and%20%5BAppendix%20B%5D(%23appendix-b-proving-and-verification-mechanisms)%20includes%20codebases%20for%20proving%20and%20verification%20mechanisms.%0A%0A%23%23%23%20Logic%20Flow%0A%0A**Consensus**%0A%0A1.%20Active%20Validator%20Set%20is%20retrieved%0A2.%20Sync%20Committee%20is%20Validated%20(27%20hours)%0A3.%20Finality%20Checkpoint%20is%20Validated%20(per%20epoch)%0A4.%20Block%20(headers)%20are%20relayed%0A5.%20Block%20(headers)%20are%20validated%3A%20BLS%20Signatures%20on%20Block%20and%20Block%20is%20in%20the%20canonical%20chain.%0A%0A**Transaction**%0A%0A1.%20Ethereum%3A%20A%20transaction%20to%20bridge%20100%20ISO%20Tokens%20is%20sent%0A2.%20Relayer%3A%20Picks%20up%20Transaction%20(via%20event%20listening)%20and%20forwards%20to%20Target%20Light%20Client.%0A3.%20Light%20Client%20Verifies%20Transaction%20is%20in%20a%20valid%20block.%0A%20%20%201.%20Transaction%20is%20in%20Block%0A%20%20%202.%20Block%20is%20in%20Cannonical%20Chain%0A%20%20%203.%20Block%20has%20been%20signed%20correctly%20by%20valid%20committee%0A%20%20%204.%20Committe%20is%20valid%20based%20on%20the%20committe%20allocated%20to%20the%20slot%0A%20%20%205.%20Sync%20Committee%20signed%20the%20Comittee%20Allocation%0A%0A%23%23%23%20Key%20Data%20Points%20and%20Storage%0A%0A-%20Sync%20Committe%20Validator%20Set%20Change%20(Every%20255%20epochs%20approx%2027%20hours)%0A%0A-%20Epoch%20Committee%20Verification%20(Every%20Epoch%20(32%20slots)%20approx%206.4%20minutes)%0A-%20Block%20Verification%20(Every%20slot%20appox%2012%20seconds)%0A-%20Transaction%20Verifications%20(As%20Needed)%0A%0A%23%23%23%20Proving%20Logic%20and%20Costs%0A%0A-%20Sync%20committee%20proof%0A%0A-%20Epoch%20comittees%20proof%0A-%20Block%20proofs%0A-%20Transaction%20proofs%0A%0A%23%23%23%20ZKP%20Proving%20and%20Verification%20Costs%20ZKP%20Comparison%0A%0A%23%23%23%20Relayer%20and%20Prover%20Infrastructure%0A%0A%23%23%23%20Bridging%20Assets%0A%0A-%20Asset%20Lockers%0A-%20Mint%20and%20Burn%20Process%0A-%20Utilization%20of%20Locked%20Assets%0A%0A%23%23%20Ethereum%202.0%20Technical%20Overview%0A%0A%23%23%23%20Block%20Production%0A%0AValidators%20run%20both%20an%20Ethereum%201%20client%20(e.g.%20geth)%20and%20a%20Beacon%20Chain%20Client%20(e.g.%20prysm).%20The%20geth%20client%20recieves%20transactions%20and%20places%20them%20into%20blocks.%20For%20additional%20details%20see%20the%20Ethereum%20Builder%20Specs%3Csup%3E%5B12%5D(%23ts12)%3C%2Fsup%3E.%20The%20following%20diagrams%20give%20an%20overview%20of%20how%20blocks%20are%20proposed%20and%20how%20MEV%20Boost%3Csup%3E%5B13%5D(%23ts13)%3C%2Fsup%3E%20could%20be%20integrated.%20For%20simplification%20we%20can%20replace%20mev_boost%20and%20relay%20with%20geth%20in%20the%20block%20proposal%20diagram%20as%20the%20majority%20of%20validators%20simply%20run%20a%20geth%20node.%0A%0A!%5BBlock%20Proposal%5D(%2Fassets%2Fresearch%2Fblock-proposal.png%20%22Block%20Proposal%22)%0A%0A%23%23%23%20Slots%20and%20Epochs%20%3Csup%3E%5B6%5D(%23ts6)%3C%2Fsup%3E%0A%0A%3E%20The%20Beacon%20Chain%20provides%20the%20heartbeat%20to%20Ethereum%E2%80%99s%20consensus.%20Each%20slot%20is%2012%20seconds%20and%20an%20epoch%20is%2032%20slots%3A%206.4%20minutes.%0A%0A!%5BSlots%20and%20Epochs%5D(%2Fassets%2Fresearch%2FBeacon-Chain-Slots-and-Epochs.png.webp%20%22Slots%20and%20Epochs%22)%0A%0A%23%23%23%20Block%20Proposals%0A%0AWhen%20a%20validator%20is%20nominated%20as%20a%20proposer%20for%20a%20slot%20in%20an%20Epoch%20they%20propose%20a%20block%20gathered%20from%20there%20Ethereum%201%20client.%0A%0AThis%20proposed%20block%20is%20attested%20to%20by%20other%20validators%20who%20have%20been%20assigned%20as%20committe%20members%20for%20this%20slot%3Csup%3E%5B6%5D(%23ts6)%3C%2Fsup%3E.%0A%0A%3E%20A%20block%20proposer%20is%20a%20validator%20that%20has%20been%20pseudorandomly%20selected%20to%20build%20a%20block.%0A%3E%0A%3E%20Most%20of%20the%20time%2C%20validators%20are%20attesters%20that%20vote%20on%20blocks.%20These%20votes%20are%20recorded%20in%20the%20Beacon%20Chain%20and%20determine%20the%20head%20of%20the%20Beacon%20Chain.%0A%0A!%5BValidators%20and%20Attestations%5D(%2Fassets%2Fresearch%2FBeacon-Chain-Validators.png%20%22Validators%20and%20Attestations%22)%0A%0A%23%23%23%20Committees%0A%0A%3E%20A%20committee%20is%20a%20group%20of%20validators.%20For%20security%2C%20each%20slot%20has%20committees%20of%20at%20least%20128%20validators.%20An%20attacker%20has%20less%20than%20a%20one%20in%20a%20trillion%20probability%20of%20controlling%20%E2%85%94%20of%20a%20committee.%0A%3E%0A%3E%20The%20concept%20of%20a%20randomness%20beacon%20that%20emits%20random%20numbers%20for%20the%20public%2C%20lends%20its%20name%20to%20the%20Ethereum%20Beacon%20Chain.%20The%20Beacon%20Chain%20enforces%20consensus%20on%20a%20pseudorandom%20process%20called%20RANDAO.%0A%0A!%5BCommittees%5D(%2Fassets%2Fresearch%2FBeacon-Chain-RANDAO.png%20%22Committees%22)%0A%0A%23%23%23%20Attestations%0A%0AThe%20attestation%20lifecyle%3Csup%3E%5B9%5D(%23ts9)%3C%2Fsup%3E%20involves%0A%0A1.%20Generation%20of%20the%20proposed%20Block%0A2.%20Propagation%20of%20the%20block%20to%20committee%20members%20to%20vote%20on%20and%20sign%0A3.%20Aggregation%20of%20the%20votes%20(signatures)%20of%20the%20committee%20members%20by%20Aggregators%0A4.%20Propagation%20of%20the%20aggregated%20attestations%20back%20to%20the%20block%20Proposer%0A5.%20Inclusion%20of%20the%20block%20in%20the%20Beaconchain%0A%0A!%5BAttestation%20Life%20Cycle%5D(%2Fassets%2Fresearch%2FAttestationLifeCycle.png%20%22Attestation%20Life%20Cycle%22)%0A%0A%23%23%23%20Checkpoints%20and%20Finality%3Csup%3E%5B6b%5D(%23ts6b)%3C%2Fsup%3E%0A%0A%3E%20When%20an%20epoch%20ends%2C%20if%20its%20checkpoint%20has%20garnered%20a%20%E2%85%94%20supermajority%2C%20the%20checkpoint%20gets%20justified.%0A%0A!%5BCheckpoints%5D(%2Fassets%2Fresearch%2FBeacon-Chain-Checkpoints.jpg%20%22Checkpoints%22)%0A%0A%3E%20If%20a%20checkpoint%20B%20is%20justified%20and%20the%20checkpoint%20in%20the%20immediate%20next%20epoch%20becomes%20justified%2C%20then%20B%20becomes%20finalized.%20Typically%2C%20a%20checkpoint%20is%20finalized%20in%20two%20epochs%2C%2012.8%20minutes.%0A%0A!%5BFinality%5D(%2Fassets%2Fresearch%2FBeacon-Chain-Justification-and-Finalization.png%20%22Finality%22)%0A%0A%23%23%23%20Sync%20Committee%20%3Csup%3E%5B10%5D(%23ts10)%3C%2Fsup%3E%0A%0AA%20sync%20committee%20of%20512%20current%20validators%20is%20elected%20every%20255%20epochs%2C%20approximately%20every%2027%20hours%20(see%20%5Bsample%20sync%20comittee%20data%5D(%23sync-committee-latest)).%0AThey%20are%20responsible%20for%20signing%20each%20block%20which%20records%20which%20sync%20committee%20members%20(validtors)%20signed%20the%20block%2C%20held%20in%20%60syncaggregate_bits%60%2C%20and%20creates%20a%20bls%20aggregate%20signature%20held%20in%20%60syncaggregate_signature%60%20(see%20%5Bblock-data%5D(%23block-data-for-slot-5330592)).%0A%0A%60%60%60%0A%20%20%20%20%22syncaggregate_bits%22%3A%20%220xdffffffffffffffffffffffffffffff7fffffffffffffffffffffffffffffffffffffffffffffffffffffffdfffffffffffffffdffffffffffffffffffffffff%22%2C%0A%20%20%20%20%22syncaggregate_participation%22%3A%200.9921875%2C%0A%20%20%20%20%22syncaggregate_signature%22%3A%20%220x95332c55790018eed3d17eada01cb4045348d09137505bc8697eeedaa3800a830ee2c138251850a9577f62a5488419ef0a722579156a177fb3a147017f1077af5d778f46a4cdf815fc450129d135fe5286e16df68333592e4aa45821bde780dd%22%2C%0A%60%60%60%0A%0AThis%20is%20used%20in%20Altair%20Light%20Client%20--%20Sync%20Protocol%3Csup%3E%5B11%5D(%23ts11)%3C%2Fsup%3E%20which%20enables%20the%20beacon%20chain%20to%20be%20light%20client%20friendly%20for%20constrained%20environments%20to%20access%20Ethereum.%0A%0A%23%23%23%20Validator%20Lifecycle%0A%0AFollowing%20is%20an%20overview%20of%20statuses%20for%20validators%20in%20Ethereum%202.0%20phase%200%20%3Csup%3E%5B14%5D(%23ts14)%3C%2Fsup%3E.%0A%0A%3E%201.%20**Deposited**%3A%20the%20validator%20has%20made%20a%20deposit%20and%20has%20registered%20in%20BeaconState.%0A%3E%202.%20**Eligible%20to%20be%20activated%20(Pending)**%3A%20the%20validator%20is%20eligible%20to%20be%20activated.%0A%3E%203.%20**Activated**%3A%20the%20validator%20is%20activated%0A%3E%20%20%20%20-%20_Note%20that%20the%20validator%20may%20be%20%E2%80%9Celigible%20to%20be%20activated%2C%20but%20has%20not%20been%20activated%20yet%E2%80%9D._%0A%3E%204.%20**Slashed**%3A%20the%20validator%20has%20been%20slashed%0A%3E%205.%20**Exited**%3A%20the%20validator%20is%20exited%0A%3E%206.%20**Withdrawable**%3A%20the%20validator%20is%20withdrawable%0A%3E%20%20%20%20-%20_Note%20that%20the%20validator%20will%20be%20able%20to%20withdraw%20to%20EEs%20in%20phase%202_%0A%3E%0A%3E%20_Note%20that%20in%20some%20cases%2C%20a%20validator%20can%20be%20in%20multiple%20statuses%20at%20the%20same%20time%2C%20e.g.%2C%20an%20active%20validator%20may%20be%20%E2%80%9Cactivated%20and%20slashed%E2%80%9D._%0A%0A!%5BValidator%20Status%20Transition%5D(%2Fassets%2Fresearch%2FValidatorStateTransition.png%20%22Validator%20Status%20Transition%22)%0A%0A%23%23%20Ethreum%202.0%20Technical%20Deep%20Dive%0A%0A%23%23%23%20Block%20Production%0A%0A**Process%20Flow**%0A%0A-%20Transactions%20are%20placed%20in%20%5Btxpool%5D(https%3A%2F%2Fgithub.com%2Fethereum%2Fgo-ethereum%2Ftree%2Fmaster%2Fcore%2Ftxpool)%0A-%20The%20transaction%20pool%20is%20read%20and%20%5Bblocks%5D(https%3A%2F%2Fgithub.com%2Fethereum%2Fgo-ethereum%2Fblob%2Frelease%2F1.9%2Fcore%2Ftypes%2Fblock.go%23L169)%20are%20produced%20by%20the%20%5Bminer%5D(https%3A%2F%2Fgithub.com%2Fethereum%2Fgo-ethereum%2Fblob%2Fmaster%2Fminer%2Fminer.go)%0A-%20Blocks%20Headers%20get%20forwarded%20to%20the%20Beacon%20chain%20once%20they%20pass%20%5Bbeacon%20consensus%5D(https%3A%2F%2Fgithub.com%2Fethereum%2Fgo-ethereum%2Fblob%2Fmaster%2Fconsensus%2Fbeacon%2Fconsensus.go)%0A-%20The%20Beacon%20chain%20embeds%20the%20EthChain%20Header%20into%20a%20%5BBeaconBlock%5D(https%3A%2F%2Fgithub.com%2Fprysmaticlabs%2Fprysm%2Fblob%2Fdevelop%2Fconsensus-types%2Fblocks%2Ftypes.go%23L43)%0A%0A%23%23%23%20Consensus%20and%20Finality%0A%0AAttestation%20Process%20Flow%0A%0A-%20Proposing%20Block%0A-%20Signing%20Blocks%0A-%20Aggregated%20Attestation%20generation%0A-%20Block%20Proposal%20and%20Inclusion%20of%20Attestation%0A-%20The%20%5BSignedBeaconBlock%5D(https%3A%2F%2Fgithub.com%2Fprysmaticlabs%2Fprysm%2Fblob%2Fdevelop%2Fconsensus-types%2Fblocks%2Ftypes.go%23L72)%20is%20added%20to%20the%20chain%0A%0AAttestations%20Block(LMD%20Ghost%20Vote)%20and%20Epoch%20Checkpoints%20(FFG%20Votes)%0A%0A-%20The%20validators%20in%20the%20committee%20attest%20to%20the%20validity%20of%20the%20block%20(LMD%20Ghost%20Vote)%0A-%20The%20validators%20in%20the%20comittee%20attest%20to%20the%20first%20block%20in%20the%20Epoch%20(FFG%20Vote)%0A%0AFrom%20%5BAttestations%2C%20ethereum.org%5D(https%3A%2F%2Fethereum.org%2Fen%2Fdevelopers%2Fdocs%2Fconsensus-mechanisms%2Fpos%2Fattestations)%0A%0A%3E%20Every%20epoch%20(6.4%20minutes)%20a%20validator%20proposes%20an%20attestation%20to%20the%20network.%20The%20attestation%20is%20for%20a%20specific%20slot%20in%20the%20epoch.%20The%20purpose%20of%20the%20attestation%20is%20to%20vote%20in%20favor%20of%20the%20validator's%20view%20of%20the%20chain%2C%20in%20particular%20the%20most%20recent%20justified%20block%20and%20the%20first%20block%20in%20the%20current%20epoch%20(known%20as%20source%20and%20target%20checkpoints).%20This%20information%20is%20combined%20for%20all%20participating%20validators%2C%20enabling%20the%20network%20to%20reach%20consensus%20about%20the%20state%20of%20the%20blockchain.%0A%3E%0A%3E%20The%20attestation%20contains%20the%20following%20components%3A%0A%3E%0A%3E%20-%20aggregation_bits%3A%20a%20bitlist%20of%20validators%20where%20the%20position%20maps%20to%20the%20validator%20index%20in%20their%20committee%3B%20the%20value%20(0%2F1)%20indicates%20whether%20the%20validator%20signed%20the%20data%20(i.e.%20whether%20they%20are%20active%20and%20agree%20with%20the%20block%20proposer)%0A%3E%20-%20data%3A%20details%20relating%20to%20the%20attestation%2C%20as%20defined%20below%0A%3E%20-%20signature%3A%20a%20BLS%20signature%20that%20aggregates%20the%20signatures%20of%20individual%20validators%0A%3E%0A%3E%20The%20first%20task%20for%20an%20attesting%20validator%20is%20to%20build%20the%20data.%20The%20data%20contains%20the%20following%20information%3A%0A%3E%0A%3E%20-%20slot%3A%20The%20slot%20number%20that%20the%20attestation%20refers%20to%0A%3E%20-%20index%3A%20A%20number%20that%20identifies%20which%20committee%20the%20validator%20belongs%20to%20in%20a%20given%20slot%0A%3E%20-%20beacon_block_root%3A%20Root%20hash%20of%20the%20block%20the%20validator%20sees%20at%20the%20head%20of%20the%20chain%20(the%20result%20of%20applying%20the%20fork-choice%20algorithm)%0A%3E%20-%20source%3A%20Part%20of%20the%20finality%20vote%20indicating%20what%20the%20validators%20see%20as%20the%20most%20recent%20justified%20block%0A%3E%20-%20target%3A%20Part%20of%20the%20finality%20vote%20indicating%20what%20the%20validators%20see%20as%20the%20first%20block%20in%20the%20current%20epoch%0A%3E%0A%3E%20Once%20the%20data%20is%20built%2C%20the%20validator%20can%20flip%20the%20bit%20in%20aggregation_bits%20corresponding%20to%20their%20own%20validator%20index%20from%200%20to%201%20to%20show%20that%20they%20participated.%0A%3E%0A%3E%20Finally%2C%20the%20validator%20signs%20the%20attestation%20and%20broadcasts%20it%20to%20the%20network.%0A%0A**Technical%20Details**%0A%0AFollowing%20is%20an%20overview%20of%20the%20state%20structure%20and%20logic%20for%20generating%20committees%20and%20aggregating%20attestations.%20For%20data%20structures%2C%20please%20see%20%5BBeacon%20State%20Data%20Structures%20from%20Prysm%5D(%23beacon-state-data-structures-from-prysm)%20and%20%5Bweb3signer_types%20from%20prysm%5D(%23web3signer_types-from-prysm).%0A%0A%5BBeaconState%5D(https%3A%2F%2Fpkg.go.dev%2Fgithub.com%2Fprysmaticlabs%2Fprysm%2Fv3%40v3.1.2%2Fbeacon-chain%2Fstate%23BeaconState)%20contains%20both%20a%20%5BReadOnlyBeaconState%5D(https%3A%2F%2Fpkg.go.dev%2Fgithub.com%2Fprysmaticlabs%2Fprysm%2Fv3%40v3.1.2%2Fbeacon-chain%2Fstate%23ReadOnlyBeaconState)%20and%20a%20%5BWriteOnlyBeaconState%5D(https%3A%2F%2Fpkg.go.dev%2Fgithub.com%2Fprysmaticlabs%2Fprysm%2Fv3%40v3.1.2%2Fbeacon-chain%2Fstate%23WriteOnlyBeaconState)%20wich%20contain%20%5BReadOnlyValidators%5D(https%3A%2F%2Fpkg.go.dev%2Fgithub.com%2Fprysmaticlabs%2Fprysm%2Fv3%40v3.1.2%2Fbeacon-chain%2Fstate%23ReadOnlyValidators)%20and%20%5BReadOnlyRandaoMixes%5D(https%3A%2F%2Fpkg.go.dev%2Fgithub.com%2Fprysmaticlabs%2Fprysm%2Fv3%40v3.1.2%2Fbeacon-chain%2Fstate%23ReadOnlyRandaoMixes)%20and%20%5BWriteOnlyValidators%5D(https%3A%2F%2Fpkg.go.dev%2Fgithub.com%2Fprysmaticlabs%2Fprysm%2Fv3%40v3.1.2%2Fbeacon-chain%2Fstate%23WriteOnlyValidators)%20and%20%5BWriteOnlyRandaoMixes%5D(https%3A%2F%2Fpkg.go.dev%2Fgithub.com%2Fprysmaticlabs%2Fprysm%2Fv3%40v3.1.2%2Fbeacon-chain%2Fstate%23WriteOnlyRandaoMixes)%20respectively.%0A%0AAt%20the%20beginning%20of%20each%20epoch%20%5Bfunc%20ProcessRandaoMixesReset%5D(https%3A%2F%2Fpkg.go.dev%2Fgithub.com%2Fprysmaticlabs%2Fprysm%2Fv3%40v3.1.2%2Fbeacon-chain%2Fcore%2Fepoch%23ProcessRandaoMixesReset)%20processes%20the%20final%20updates%20to%20RANDAO%20mix%20during%20epoch%20processing.%20This%20calls%20%5BRandaoMix%5D(https%3A%2F%2Fpkg.go.dev%2Fgithub.com%2Fprysmaticlabs%2Fprysm%2Fv3%40v3.1.2%2Fbeacon-chain%2Fcore%2Fhelpers%23RandaoMix)%20which%20returns%20the%20randao%20mix%20(xor'ed%20seed)%20of%20a%20given%20slot.%20It%20is%20used%20to%20shuffle%20validators.%0A%0AFollowing%20are%20sample%20mixes%20generated%20from%20%5Bfunc%20TestRandaoMix_OK%5D(https%3A%2F%2Fgithub.com%2Fprysmaticlabs%2Fprysm%2Fblob%2Fv3.1.2%2Fbeacon-chain%2Fcore%2Fhelpers%2Frandao_test.go%23L16)%20by%20adding%20the%20statement%20%60fmt.Printf(%22mix%3A%20%25v%5Cn%22%2C%20mix)%60%0A%0A%60%60%60%0Amix%3A%20%5B10%200%200%200%200%200%200%200%200%200%200%200%200%200%200%200%200%200%200%200%200%200%200%200%200%200%200%200%200%200%200%200%5D%0Amix%3A%20%5B40%209%200%200%200%200%200%200%200%200%200%200%200%200%200%200%200%200%200%200%200%200%200%200%200%200%200%200%200%200%200%200%5D%0Amix%3A%20%5B159%20134%200%200%200%200%200%200%200%200%200%200%200%200%200%200%200%200%200%200%200%200%200%200%200%200%200%200%200%200%200%200%5D%0A%60%60%60%0A%0AThe%20shuffle%20functions%20consist%20of%0A%0A-%20%5Bfunc%20ShuffleList%5D(https%3A%2F%2Fpkg.go.dev%2Fgithub.com%2Fprysmaticlabs%2Fprysm%2Fv3%40v3.1.2%2Fbeacon-chain%2Fcore%2Fhelpers%23ShuffleList)%3A%20returns%20list%20of%20shuffled%20indexes%20in%20a%20pseudorandom%20permutation%20%60p%60%20of%20%600...list_size%20-%201%60%20with%20%E2%80%9Cseed%E2%80%9C%20as%20entropy.%20We%20utilize%20'swap%20or%20not'%20shuffling%20in%20this%20implementation%3B%20we%20are%20allocating%20the%20memory%20with%20the%20seed%20that%20stays%20constant%20between%20iterations%20instead%20of%20reallocating%20it%20each%20iteration%20as%20in%20the%20spec.%20This%20implementation%20is%20based%20on%20the%20original%20implementation%20from%20protolambda%2C%20https%3A%2F%2Fgithub.com%2Fprotolambda%2Feth2-shuffle%0A%0A%20%20Following%20is%20an%20example%20of%20a%20shuffled%20list%20generated%20from%20%5BTestShuffleList_OK%5D(https%3A%2F%2Fgithub.com%2Fprysmaticlabs%2Fprysm%2Fblob%2Fv3.1.2%2Fbeacon-chain%2Fcore%2Fhelpers%2Fshuffle_test.go%23L25)%0A%0A%20%20%60%60%60%0A%20%20list1%3A%20%5B0%201%202%203%204%205%206%207%208%209%5D%0A%20%20seed1%3A%20%5B1%20128%2012%200%200%200%200%200%200%200%200%200%200%200%200%200%200%200%200%200%200%200%200%200%200%200%200%200%200%200%200%200%5D%0A%20%20shuffledList1%3A%20%5B0%207%208%206%203%209%204%205%202%201%5D%0A%20%20%60%60%60%0A%0A-%20%5Bfunc%20ShuffleIndex%5D(https%3A%2F%2Fpkg.go.dev%2Fgithub.com%2Fprysmaticlabs%2Fprysm%2Fv3%40v3.1.2%2Fbeacon-chain%2Fcore%2Fhelpers%23ShuffledIndex)%3A%20returns%20%60p(index)%60%20in%20a%20pseudorandom%20permutation%20%60p%60%20of%20%600...list_size%20-%201%60%20with%20%E2%80%9Cseed%E2%80%9C%20as%20entropy.%20We%20utilize%20'swap%20or%20not'%20shuffling%20in%20this%20implementation%3B%20we%20are%20allocating%20the%20memory%20with%20the%20seed%20that%20stays%20constant%20between%20iterations%20instead%20of%20reallocating%20it%20each%20iteration%20as%20in%20the%20spec.%20This%20implementation%20is%20based%20on%20the%20original%20implementation%20from%20protolambda%2C%20https%3A%2F%2Fgithub.com%2Fprotolambda%2Feth2-shuffle%0A%0A-%20%5Bfunc%20ShuffleIndices%5D(https%3A%2F%2Fpkg.go.dev%2Fgithub.com%2Fprysmaticlabs%2Fprysm%2Fv3%40v3.1.2%2Fbeacon-chain%2Fcore%2Fhelpers%23ShuffledIndices)%3A%20ShuffledIndices%20uses%20input%20beacon%20state%20and%20returns%20the%20shuffled%20indices%20of%20the%20input%20epoch%2C%20the%20shuffled%20indices%20then%20can%20be%20used%20to%20break%20up%20into%20committees.%0A%0ACommittes%20are%20formed%20using%20functions%20from%20%5Bbeacon_comittee.go%5D(https%3A%2F%2Fgithub.com%2Fprysmaticlabs%2Fprysm%2Fblob%2Fv3.1.2%2Fbeacon-chain%2Fcore%2Fhelpers%2Fbeacon_committee.go)%0A%0A-%20%5Bfunc%20BeaconComittee%5D(https%3A%2F%2Fpkg.go.dev%2Fgithub.com%2Fprysmaticlabs%2Fprysm%2Fv3%40v3.1.2%2Fbeacon-chain%2Fcore%2Fhelpers%23BeaconCommittee)%3A%20returns%20the%20beacon%20committee%20of%20a%20given%20slot%20and%20committee%20index.%20The%20validator%20indices%20and%20seed%20are%20provided%20as%20an%20argument%20rather%20than%20an%20imported%20implementation%20from%20the%20spec%20definition.%20Having%20them%20as%20an%20argument%20allows%20for%20cheaper%20computation%20run%20time.%20(This%20is%20an%20optomized%20version%20of%20%5Bfunc%20BeaconComitteFromState%5D(https%3A%2F%2Fpkg.go.dev%2Fgithub.com%2Fprysmaticlabs%2Fprysm%2Fv3%40v3.1.2%2Fbeacon-chain%2Fcore%2Fhelpers%23BeaconCommitteeFromState))%0A%0A%20%20Following%20is%20an%20example%20of%20a%20%60beaconComittee%60%20generated%20by%20adding%20the%20following%20lines%20to%20%5BTestBeaconCommitteeFromState_UpdateCacheForPreviousEpoch%5D(https%3A%2F%2Fgithub.com%2Fprysmaticlabs%2Fprysm%2Fblob%2Fv3.1.2%2Fbeacon-chain%2Fcore%2Fhelpers%2Fbeacon_committee_test.go%23L574)%3A%0A%0A%60%60%60%0Avar%20beaconCommittee%20%5B%5Dtypes.ValidatorIndex%0AbeaconCommittee%2C%20err%20%3D%20BeaconCommitteeFromState(context.Background()%2C%20state%2C%201%20%2F_previous%20epoch_%2F%2C%200)%0Afmt.Printf(%22beaconComittee%3A%20%25%2Bv%5Cn%22%2C%20beaconCommittee)%0A%60%60%60%0A%0AResult%0A%0A%60%60%60%0AbeaconComittee%3A%20%5B160%20338%20313%20307%20320%20324%2045%20469%20196%20303%2023%2014%2097%20312%20126%20488%5D%0A%60%60%60%0A%0A-%20%5Bfunc%20CommitteeAssignments%5D(https%3A%2F%2Fpkg.go.dev%2Fgithub.com%2Fprysmaticlabs%2Fprysm%2Fv3%40v3.1.2%2Fbeacon-chain%2Fcore%2Fhelpers%23CommitteeAssignments)%3A%20is%20a%20map%20of%20validator%20indices%20pointing%20to%20the%20appropriate%20committee%20assignment%20for%20the%20given%20epoch.%0A%0A1.%20Determine%20the%20proposer%20validator%20index%20for%20each%20slot.%0A2.%20Compute%20all%20committees.%0A3.%20Determine%20the%20attesting%20slot%20for%20each%20committee.%0A4.%20Construct%20a%20map%20of%20validator%20indices%20pointing%20to%20the%20respective%20committees.%0A%0AFollowing%20is%20an%20example%20of%20%60commitees%60%20generated%20by%20adding%20the%20following%20lines%20to%20%5BTestComputeCommittee_WithoutCache%5D(https%3A%2F%2Fgithub.com%2Fprysmaticlabs%2Fprysm%2Fblob%2Fv3.1.2%2Fbeacon-chain%2Fcore%2Fhelpers%2Fbeacon_committee_test.go%23L23)%0A%0A%60%60%60%0Acommittees%2C%20err%20%3A%3D%20computeCommittee(indices%2C%20seed%2C%200%2C%201%20%2F_%20Total%20committee_%2F)%0Afmt.Printf(%22committees%3A%20%25%2Bv%5Cn%22%2C%20committees)%0A%60%60%60%0A%0A%20%20%20%20%3Cdetails%3E%0A%20%20%20%20%3Csummary%3Eresult%3C%2Fsummary%3E%0A%0A%20%20%20%20%60%60%60%0A%20%20%20%20committeesdetails%3E%0A%0AAttestations%20are%20managed%20using%20functions%20from%20%5Battestation.go%5D(https%3A%2F%2Fgithub.com%2Fprysmaticlabs%2Fprysm%2Fblob%2Fv3.1.2%2Fbeacon-chain%2Fcore%2Fhelpers%2Fattestation.go)%0A%0A-%20%5Bfunc%20ValidateNilAttestation%5D(https%3A%2F%2Fpkg.go.dev%2Fgithub.com%2Fprysmaticlabs%2Fprysm%2Fv3%40v3.1.2%2Fbeacon-chain%2Fcore%2Fhelpers%23ValidateNilAttestation)%3A%20checks%20if%20any%20composite%20field%20of%20input%20attestation%20is%20nil.%20Access%20to%20these%20nil%20fields%20will%20result%20in%20run%20time%20panic%2C%20it%20is%20recommended%20to%20run%20these%20checks%20as%20first%20line%20of%20defense.%0A-%20%5Bfunc%20ValidateSlotTargetEpoch%5D(https%3A%2F%2Fpkg.go.dev%2Fgithub.com%2Fprysmaticlabs%2Fprysm%2Fv3%40v3.1.2%2Fbeacon-chain%2Fcore%2Fhelpers%23ValidateSlotTargetEpoch)%3A%20ValidateSlotTargetEpoch%20checks%20if%20attestation%20data's%20epoch%20matches%20target%20checkpoint's%20epoch.%20It%20is%20recommended%20to%20run%20%60ValidateNilAttestation%60%20first%20to%20ensure%20%60data.Target%60%20can't%20be%20nil.%0A-%20%5Bfunc%20IsAggregator%5D(https%3A%2F%2Fpkg.go.dev%2Fgithub.com%2Fprysmaticlabs%2Fprysm%2Fv3%40v3.1.2%2Fbeacon-chain%2Fcore%2Fhelpers%23IsAggregator)%3A%20IsAggregator%20returns%20true%20if%20the%20signature%20is%20from%20the%20input%20validator.%20The%20committee%20count%20is%20provided%20as%20an%20argument%20rather%20than%20imported%20implementation%20from%20spec.%20Having%20committee%20count%20as%20an%20argument%20allows%20cheaper%20computation%20at%20run%20time.%0A-%20%5Bfunc%20AggregateSignature%5D(https%3A%2F%2Fpkg.go.dev%2Fgithub.com%2Fprysmaticlabs%2Fprysm%2Fv3%40v3.1.2%2Fbeacon-chain%2Fcore%2Fhelpers%23AggregateSignature)%3A%20returns%20the%20aggregated%20signature%20of%20the%20input%20attestations.%0A%0A%20%20Spec%20pseudocode%20definition%3A%0A%0A%60%60%60%0Adef%20get_aggregate_signature(attestations%3A%20Sequence%5BAttestation%5D)%20-%3E%20BLSSignature%3A%0Asignatures%20%3D%20%5Battestation.signature%20for%20attestation%20in%20attestations%5D%0Areturn%20bls.Aggregate(signatures)%0A%60%60%60%0A%0AFollowing%20is%20an%20example%20aggregrated%20signature%20by%20adding%20the%20following%20lines%20to%20%5BTestAttestation_AggregateSignature%5D(https%3A%2F%2Fgithub.com%2Fprysmaticlabs%2Fprysm%2Fblob%2Fv3.1.2%2Fbeacon-chain%2Fcore%2Fhelpers%2Fattestation_test.go%23L48)%0A%0A%60%60%60%0AaggSig%2C%20err%20%3A%3D%20helpers.AggregateSignature(atts)%0A%60%60%60%0A%0Afmt.Printf(%22aggSig%3A%20%25%2Bv%5Cn%22%2C%20aggSig)%0A%0AResult%0A%0A%60%60%60%0A%20%20%20%20aggSig%3A%20%26%7Bs%3A0xc0003fe000%7D%0A%60%60%60%0A%0A-%20%5Bfunc%20IsAggregated%5D(https%3A%2F%2Fpkg.go.dev%2Fgithub.com%2Fprysmaticlabs%2Fprysm%2Fv3%40v3.1.2%2Fbeacon-chain%2Fcore%2Fhelpers%23IsAggregated)%3A%20IsAggregated%20returns%20true%20if%20the%20attestation%20is%20an%20aggregated%20attestation%2C%20false%20otherwise.%0A%0A-%20%5Bfunc%20ComputeSubnetForAttestation%5D(https%3A%2F%2Fpkg.go.dev%2Fgithub.com%2Fprysmaticlabs%2Fprysm%2Fv3%40v3.1.2%2Fbeacon-chain%2Fcore%2Fhelpers%23ComputeSubnetForAttestation)%3A%20returns%20the%20subnet%20for%20which%20the%20provided%20attestation%20will%20be%20broadcasted%20to.This%20differs%20from%20the%20spec%20definition%20by%20instead%20passing%20in%20the%20active%20validators%20indices%20in%20the%20attestation's%20given%20epoch.%0A%0ASpec%20pseudocode%20definition%3A%0A%0A%60%60%60%0Adef%20compute_subnet_for_attestation(committees_per_slot%3A%20uint64%2C%20slot%3A%20Slot%2C%20committee_index%3A%20CommitteeIndex)%20-%3E%20uint64%3A%0A%0A%22%22%22%0ACompute%20the%20correct%20subnet%20for%20an%20attestation%20for%20Phase%200.%0ANote%2C%20this%20mimics%20expected%20future%20behavior%20where%20attestations%20will%20be%20mapped%20to%20their%20shard%20subnet.%0A%22%22%22%0Aslots_since_epoch_start%20%3D%20uint64(slot%20%25%20SLOTS_PER_EPOCH)%0Acommittees_since_epoch_start%20%3D%20committees_per_slot%20%5C*%20slots_since_epoch_start%0A%0Areturn%20uint64((committees_since_epoch_start%20%2B%20committee_index)%20%25%20ATTESTATION_SUBNET_COUNT)%0A%60%60%60%0A%0A-%20%5Bfunc%20ComputeSubnetFromCommitteeAndSlot%5D(https%3A%2F%2Fpkg.go.dev%2Fgithub.com%2Fprysmaticlabs%2Fprysm%2Fv3%40v3.1.2%2Fbeacon-chain%2Fcore%2Fhelpers%23ComputeSubnetFromCommitteeAndSlot)%3A%20is%20a%20flattened%20version%20of%20ComputeSubnetForAttestation%20where%20we%20only%20pass%20in%20the%20relevant%20fields%20from%20the%20attestation%20as%20function%20arguments.%0A%0ASpec%20pseudocode%20definition%3A%0A%0A%60%60%60%0A%0Adef%20compute_subnet_for_attestation(committees_per_slot%3A%20uint64%2C%20slot%3A%20Slot%2C%20committee_index%3A%20CommitteeIndex)%20-%3E%20uint64%3A%0A%0A%22%22%22%0ACompute%20the%20correct%20subnet%20for%20an%20attestation%20for%20Phase%200.%0ANote%2C%20this%20mimics%20expected%20future%20behavior%20where%20attestations%20will%20be%20mapped%20to%20their%20shard%20subnet.%0A%22%22%22%0Aslots_since_epoch_start%20%3D%20uint64(slot%20%25%20SLOTS_PER_EPOCH)%0Acommittees_since_epoch_start%20%3D%20committees_per_slot%20%5C*%20slots_since_epoch_start%0A%0Areturn%20uint64((committees_since_epoch_start%20%2B%20committee_index)%20%25%20ATTESTATION_SUBNET_COUNT)%0A%0A%60%60%60%0A%0A-%20%5Bfunc%20ValidateAttestationTime%5D(https%3A%2F%2Fpkg.go.dev%2Fgithub.com%2Fprysmaticlabs%2Fprysm%2Fv3%40v3.1.2%2Fbeacon-chain%2Fcore%2Fhelpers%23ValidateAttestationTime)%3A%20Validates%20that%20the%20incoming%20attestation%20is%20in%20the%20desired%20time%20range.%0A%20%20An%20attestation%20is%20valid%20only%20if%20received%20within%20the%20last%20ATTESTATION_PROPAGATION_SLOT_RANGE%20slots.%0A%0AExample%3A%0A%0A%60%60%60%0A%0AATTESTATION_PROPAGATION_SLOT_RANGE%20%3D%205%0AclockDisparity%20%3D%2024%20seconds%0Acurrent_slot%20%3D%20100%0Ainvalid_attestation_slot%20%3D%2092%0Ainvalid_attestation_slot%20%3D%20103%0Avalid_attestation_slot%20%3D%2098%0Avalid_attestation_slot%20%3D%20101%0A%0A%60%60%60%0A%0AIn%20the%20attestation%20must%20be%20within%20the%20range%20of%2095%20to%20102%20in%20the%20example%20above.%0A%0A-%20%5Bfunc%20VerifyCheckpointEpoch%5D(https%3A%2F%2Fpkg.go.dev%2Fgithub.com%2Fprysmaticlabs%2Fprysm%2Fv3%40v3.1.2%2Fbeacon-chain%2Fcore%2Fhelpers%23VerifyCheckpointEpoch)%3A%20VerifyCheckpointEpoch%20is%20within%20current%20epoch%20and%20previous%20epoch%20with%20respect%20to%20current%20time.%20Returns%20true%20if%20it's%20within%2C%20false%20if%20it's%20not.%0A%0A_Note%3A%20Sample%20command%20for%20running%20tests%20in%20Prysm%3A%20%60bazel%20test%20%2F%2Fbeacon-chain%2Fcore%2Fhelpers%3Ago_default_test%20--test_output%3Dstreamed%20--test_filter%3DTestAttestation_AggregateSignature%60._%0A%0A**Consensus%20Committee%20Selection**%0A%0A-%20%5Bfunc%20ProcessRandoa%5D(https%3A%2F%2Fpkg.go.dev%2Fgithub.com%2Fprysmaticlabs%2Fprysm%2Fv3%40v3.1.2%2Fbeacon-chain%2Fcore%2Fblocks%23ProcessRandao)%3A%20checks%20the%20block%20proposer's%20randao%20commitment%20and%20generates%20a%20new%20randao%20mix%20to%20update%20in%20the%20beacon%20state's%20latest%20randao%20mixes%20slice.%0A-%20%5Bfunc%20randaoSigningData%5D(https%3A%2F%2Fgithub.com%2Fprysmaticlabs%2Fprysm%2Fblob%2Fv3.1.2%2Fbeacon-chain%2Fcore%2Fblocks%2Fsignature.go%23L157)%3A%20retrieves%20the%20randao%20related%20signing%20data%20from%20the%20state.%0A%20%20-%20%5Bfunc%20(b%20%5C*BeaconState)%20PubkeyAtIndex(idx%20types.ValidatorIndex)%20%5Bfieldparams.BLSPubkeyLength%5Dbyte%20%5D(https%3A%2F%2Fgithub.com%2Fprysmaticlabs%2Fprysm%2Fblob%2Fv3.1.2%2Fbeacon-chain%2Fstate%2Fstate-native%2Fgetters_validator.go%23L135)%3A%20returns%20the%20pubkey%20at%20the%20given%20validator%20index.%0A%0A%23%23%23%20Light%20Client%20Support%0A%0A%23%23%23%20Signature%20Schemes%20Review%0A%0A-%20Execution%20Chain%20Block%20Signing%0A%0A-%20Vote%20Signing%0A-%20Aggregated%20Attestations%20Signing%0A-%20Synch%20Committee%20Signing%0A%0A%23%23%20Ethereum%202.0%20Light%20Client%0A%0A%23%23%23%20Key%20Concepts%0A%0A-%20Syncing%20to%20Current%20state%0A%0A-%20Advancing%20Blocks%0A-%20Communication%20can%20be%20either%20via%0A-%20RPC%20to%20the%20%5BEth%20BEACON%20Node%20API%5D(https%3A%2F%2Fethereum.github.io%2Fbeacon-APIs%2F%23%2FBeacon)%0A-%20%5BNetworking%20Gossip%20Topics%5D(https%3A%2F%2Fgithub.com%2Fethereum%2Fconsensus-specs%2Fblob%2Fdev%2Fspecs%2Faltair%2Flight-client%2Fp2p-interface.md%23global-topics)%0A%20%20-%20%5Blight_client_finality_update%5D(https%3A%2F%2Fgithub.com%2Fethereum%2Fconsensus-specs%2Fblob%2Fdev%2Fspecs%2Faltair%2Flight-client%2Fp2p-interface.md%23light_client_finality_update)%3A%20This%20topic%20is%20used%20to%20propagate%20the%20latest%20%60LightClientFinalityUpdate%60%20to%20light%20clients%2C%20allowing%20them%20to%20keep%20track%20of%20the%20latest%20%60finalized_header%60.%0A%20%20-%20%5Blight_client_optimistic_update%5D(https%3A%2F%2Fgithub.com%2Fethereum%2Fconsensus-specs%2Fblob%2Fdev%2Fspecs%2Faltair%2Flight-client%2Fp2p-interface.md%23light_client_optimistic_update)%3A%20This%20topic%20is%20used%20to%20propagate%20the%20latest%60LightClientOptimisticUpdate%60%20to%20light%20clients%2C%20allowing%20them%20to%20keep%20track%20of%20the%20latest%20%60optimistic_header%60.%0A%0A_Note%3A%20Time%20on%20Ethereum%202.0%20Proof%20of%20Stake%20is%20divided%20into%20slots%20and%20epochs.%20One%20slot%20is%2012%20seconds.%20One%20epoch%20is%206.4%20minutes%2C%20consisting%20of%2032%20slots.%20One%20block%20can%20be%20created%20for%20each%20slot._%0A%0A%23%23%23%20Altair%20Light%20Client%20--%20Sync%20Protocol%0A%0A-%20%5BAltair%20Light%20Client%20--%20Sync%20Protocol%5D(https%3A%2F%2Fgithub.com%2Fethereum%2Fconsensus-specs%2Fblob%2Fdev%2Fspecs%2Faltair%2Flight-client%2Fsync-protocol.mdx)%3A%20The%20beacon%20chain%20is%20designed%20to%20be%20light%20client%20friendly%20for%20constrained%20environments%20to%20access%20Ethereum%20with%20reasonable%20safety%20and%20liveness.%0A%0ASuch%20environments%20include%20resource-constrained%20devices%20(e.g.%20phones%20for%20trust-minimized%20wallets)and%20metered%20VMs%20(e.g.%20blockchain%20VMs%20for%20cross-chain%20bridges).%0A%0AThis%20document%20suggests%20a%20minimal%20light%20client%20design%20for%20the%20beacon%20chain%20thatuses%20sync%20committees%20introduced%20in%20%5Bthis%20beacon%20chain%20extension%5D(https%3A%2F%2Fgithub.com%2Fethereum%2Fconsensus-specs%2Fblob%2Fdev%2Fspecs%2Faltair%2Fbeacon-chain.mdx).%0A%0AAdditional%20documents%20describe%20how%20the%20light%20client%20sync%20protocol%20can%20be%20used%3A%0A%0A-%20%5BFull%20node%5D(https%3A%2F%2Fgithub.com%2Fethereum%2Fconsensus-specs%2Fblob%2Fdev%2Fspecs%2Faltair%2Flight-client%2Ffull-node.mdx)%0A-%20%5BLight%20client%5D(https%3A%2F%2Fgithub.com%2Fethereum%2Fconsensus-specs%2Fblob%2Fdev%2Fspecs%2Faltair%2Flight-client%2Flight-client.mdx)%0A-%20%5BNetworking%5D(https%3A%2F%2Fgithub.com%2Fethereum%2Fconsensus-specs%2Fblob%2Fdev%2Fspecs%2Faltair%2Flight-client%2Fp2p-interface.mdx)%0A%0A-%20%5BLight%20client%20sync%20process%5D(https%3A%2F%2Fgithub.com%2Fethereum%2Fconsensus-specs%2Fblob%2Fdev%2Fspecs%2Faltair%2Flight-client%2Flight-client.mdx)%3A%20explains%20how%20light%20clients%20MAY%20obtain%20light%20client%20data%20to%20sync%20with%20the%20network.%0A%0A1.%20The%20light%20client%20MUST%20be%20configured%20out-of-band%20with%20a%20spec%2Fpreset%20(including%20fork%20schedule)%2C%20with%20%60genesis_state%60%20(including%20%60genesis_time%60%20and%20%60genesis_validators_root%60)%2C%20and%20with%20a%20trusted%20block%20root.%20The%20trusted%20block%20SHOULD%20be%20within%20the%20weak%20subjectivity%20period%2C%20and%20its%20root%20SHOULD%20be%20from%20a%20finalized%20%60Checkpoint%60.%0A2.%20The%20local%20clock%20is%20initialized%20based%20on%20the%20configured%20%60genesis_time%60%2C%20and%20the%20current%20fork%20digest%20is%20determined%20to%20browse%20for%20and%20connect%20to%20relevant%20light%20client%20data%20providers.%0A3.%20The%20light%20client%20fetches%20a%20%5B%60LightClientBootstrap%60%5D(https%3A%2F%2Fgithub.com%2Fethereum%2Fconsensus-specs%2Fblob%2Fdev%2Fspecs%2Faltair%2Flight-client%2Flight-client.mdx)%20object%20for%20the%20configured%20trusted%20block%20root.%20The%20%60bootstrap%60%20object%20is%20passed%20to%20%5B%60initialize_light_client_store%60%5D(https%3A%2F%2Fgithub.com%2Fethereum%2Fconsensus-specs%2Fblob%2Fdev%2Fspecs%2Faltair%2Flight-client%2Fsync-protocol.md%23initialize_light_client_store)%20to%20obtain%20a%20local%20%5B%60LightClientStore%60%5D(https%3A%2F%2Fgithub.com%2Fethereum%2Fconsensus-specs%2Fblob%2Fdev%2Fspecs%2Faltair%2Flight-client%2Fsync-protocol.md%23lightclientstore).%0A4.%20The%20light%20client%20tracks%20the%20sync%20committee%20periods%20%60finalized_period%60%20from%20%60store.finalized_header.slot%60%2C%20%60optimistic_period%60%20from%20%60store.optimistic_header.slot%60%2C%20and%20%60current_period%60%20from%20%60current_slot%60%20based%20on%20the%20local%20clock.%0A%20%20%201.%20When%20%60finalized_period%20%3D%3D%20optimistic_period%60%20and%20%5B%60is_next_sync_committee_known%60%5D(https%3A%2F%2Fgithub.com%2Fethereum%2Fconsensus-specs%2Fblob%2Fdev%2Fspecs%2Faltair%2Flight-client%2Fsync-protocol.md%23is_next_sync_committee_known)%20indicates%20%60False%60%2C%20the%20light%20client%20fetches%20a%20%5B%60LightClientUpdate%60%5D(https%3A%2F%2Fgithub.com%2Fethereum%2Fconsensus-specs%2Fblob%2Fdev%2Fspecs%2Faltair%2Flight-client%2Fsync-protocol.md%23lightclientupdate)%20for%20%60finalized_period%60.%20If%20%60finalized_period%20%3D%3D%20current_period%60%2C%20this%20fetch%20SHOULD%20be%20scheduled%20at%20a%20random%20time%20before%20%60current_period%60%20advances.%0A%20%20%202.%20When%20%60finalized_period%20%2B%201%20%3C%20current_period%60%2C%20the%20light%20client%20fetches%20a%20%60LightClientUpdate%60%20for%20each%20sync%20committee%20period%20in%20range%20%60%5Bfinalized_period%20%2B%201%2C%20current_period)%60%20(current%20period%20excluded)%0A%20%20%203.%20When%20%60finalized_period%20%2B%201%20%3E%3D%20current_period%60%2C%20the%20light%20client%20keeps%20observing%20%5B%60LightClientFinalityUpdate%60%5D(https%3A%2F%2Fgithub.com%2Fethereum%2Fconsensus-specs%2Fblob%2Fdev%2Fspecs%2Faltair%2Flight-client%2Fsync-protocol.md%23lightclientfinalityupdate)%20and%20%5B%60LightClientOptimisticUpdate%60%5D(https%3A%2F%2Fgithub.com%2Fethereum%2Fconsensus-specs%2Fblob%2Fdev%2Fspecs%2Faltair%2Flight-client%2Fsync-protocol.md%23lightclientoptimisticupdate).%20Received%20objects%20are%20passed%20to%20%5B%60process_light_client_finality_update%60%5D(https%3A%2F%2Fgithub.com%2Fethereum%2Fconsensus-specs%2Fblob%2Fdev%2Fspecs%2Faltair%2Flight-client%2Fsync-protocol.md%23process_light_client_finality_update)%20and%20%5B%60process_light_client_optimistic_update%60%5D(https%3A%2F%2Fgithub.com%2Fethereum%2Fconsensus-specs%2Fblob%2Fdev%2Fspecs%2Faltair%2Flight-client%2Fsync-protocol.md%23process_light_client_optimistic_update).%20This%20ensures%20that%20%60finalized_header%60%20and%20%60optimistic_header%60%20reflect%20the%20latest%20blocks.%0A5.%20%5B%60process_light_client_store_force_update%60%5D(https%3A%2F%2Fgithub.com%2Fethereum%2Fconsensus-specs%2Fblob%2Fdev%2Fspecs%2Faltair%2Flight-client%2Fsync-protocol.md%23process_light_client_store_force_update)%20MAY%20be%20called%20based%20on%20use%20case%20dependent%20heuristics%20if%20light%20client%20sync%20appears%20stuck.%20If%20available%2C%20falling%20back%20to%20an%20alternative%20syncing%20mechanism%20to%20cover%20the%20affected%20sync%20committee%20period%20is%20preferred.%0A%0A%23%23%23%20The%20Portal%20Network%0A%0A-%20%5BThe%20Portal%20Network%5D(https%3A%2F%2Fgithub.com%2Fethereum%2Fportal-network-specs)%3A%20The%20Portal%20Network%20is%20an%20in%20progess%20effort%20to%20enable%20lightweight%20protocol%20access%20by%20resource%20constrained%20devices.%20The%20term%20_%22portal%22_%20is%20used%20to%20indicate%20that%20these%20networks%20provide%20a%20_view_%20into%20the%20protocol%20but%20are%20not%20critical%20to%20the%20operation%20of%20the%20core%20Ethereum%20protocol.%0A%0AThe%20Portal%20Network%20is%20comprised%20of%20multiple%20peer-to-peer%20networks%20which%20together%20provide%20the%20data%20and%20functionality%20necessary%20to%20expose%20the%20standard%20%5BJSON-RPC%20API%5D(https%3A%2F%2Feth.wiki%2Fjson-rpc%2FAPI).%20These%20networks%20are%20specially%20designed%20to%20ensure%20that%20clients%20participating%20in%20these%20networks%20can%20do%20so%20with%20minimal%20expenditure%20of%20networking%20bandwidth%2C%20CPU%2C%20RAM%2C%20and%20HDD%20resources.%0A%0AThe%20term%20'Portal%20Client'%20describes%20a%20piece%20of%20software%20which%20participates%20in%20these%20networks.%20Portal%20Clients%20typically%20expose%20the%20standard%20JSON-RPC%20API.%0A%0A-%20Motivation%3A%20The%20Portal%20Network%20is%20focused%20on%20delivering%20reliable%2C%20lightweight%2C%20and%20decentralized%20access%20to%20the%20Ethereum%20protocol.%0A%0A-%20Prior%20Work%20on%20the%20%22Light%20Ethereum%20Subprotocol%22%20(LES)%3A%20The%20term%20%22light%20client%22%20has%20historically%20refered%20to%20a%20client%20of%20the%20existing%20%5BDevP2P%5D(https%3A%2F%2Fgithub.com%2Fethereum%2Fdevp2p%2Fblob%2Fmaster%2Frlpx.mdx)%20based%20%5BLES%5D(https%3A%2F%2Fgithub.com%2Fethereum%2Fdevp2p%2Fblob%2Fmaster%2Fcaps%2Fles.mdx)%20network.%20This%20network%20is%20designed%20using%20a%20client%2Fserver%20architecture.%20The%20LES%20network%20has%20a%20total%20capacity%20dictated%20by%20the%20number%20of%20%22servers%22%20on%20the%20network.%20In%20order%20for%20this%20network%20to%20scale%2C%20the%20%22server%22%20capacity%20has%20to%20increase.%20This%20also%20means%20that%20at%20any%20point%20in%20time%20the%20network%20has%20some%20total%20capacity%20which%20if%20exceeded%20will%20cause%20service%20degradation%20across%20the%20network.%20Because%20of%20this%20the%20LES%20network%20is%20unreliable%20when%20operating%20near%20capacity.%0A%0A-%20Block%20Relay%0A%0A-%20%5BBeacon%20State%5D(https%3A%2F%2Fgithub.com%2Fethereum%2Fportal-network-specs%2Fblob%2Fmaster%2Fbeacon-chain%2Fbeacon-state-network.md%23dht-overview)%3A%20A%20client%20has%20a%20trusted%20beacon%20state%20root%2C%20and%20it%20wants%20to%20access%20some%20parts%20of%20the%20state.%20Each%20of%20the%20access%20request%20corresponds%20to%20some%20leave%20nodes%20of%20the%20beacon%20state.%20The%20request%20is%20a%20content%20lookup%20on%20a%20DHT.%20The%20response%20is%20a%20Merkle%20proof.%0A%0A%20%20%20%20%20%20A%20Distributed%20Hash%20Table%20(DHT)%20allows%20network%20participants%20to%20have%20retrieve%20data%20on-demand%20based%20on%20a%20content%0A%0A-%20%5BSyncing%20Block%20Headers%5D(https%3A%2F%2Fgithub.com%2Fethereum%2Fportal-network-specs%2Fblob%2Fmaster%2Fbeacon-chain%2Fsync-gossip.mdx)%3A%20A%20beacon%20chain%20client%20could%20sync%20committee%20to%20perform%20state%20updates.%20The%20data%20object%20LightClientSkipSyncUpdate%20allows%20a%20client%20to%20quickly%20sync%20to%20a%20recent%20header%20with%20the%20appropriate%20sync%20committee.%20Once%20the%20client%20establishes%20a%20recent%20header%2C%20it%20could%20sync%20to%20other%20headers%20by%20processing%20LightClientUpdates.%20These%20two%20data%20types%20allow%20a%20client%20to%20stay%20up-to-date%20with%20the%20beacon%20chain.%0A%20%20-%20%5BSync%20State%5D(https%3A%2F%2Fgithub.com%2Fethereum%2Fportal-network-specs%2Fblob%2Fmaster%2Fbeacon-chain%2Fskip-sync-network.mdx)%3A%20A%20client%20uses%20SkipSyncUpdate%20to%20skip%20sync%20from%20a%20known%20header%20to%20a%20recent%20header.%20A%20client%20with%20a%20trusted%20but%20outdated%20header%20cannot%20use%20the%20messages%20in%20the%20gossip%20channel%20bc-light-client-update%20to%20update.%20The%20client's%20sync-committee%20in%20the%20stored%20snapshot%20is%20too%20old%20and%20not%20connected%20to%20any%20update%20messages.%20The%20client%20look%20for%20the%20appropriate%20SkipSyncUpdate%20to%20skip%20sync%20its%20header.%0A%20%20-%20%5BAdvance%20Block%20Headers%5D(https%3A%2F%2Fgithub.com%2Fethereum%2Fportal-network-specs%2Fblob%2Fmaster%2Fbeacon-chain%2Fsync-gossip.mdx)%3A%20A%20beacon%20chain%20client%20could%20sync%20committee%20to%20perform%20%5Bstate%20updates%5D(https%3A%2F%2Fgithub.com%2Fethereum%2Fconsensus-specs%2Fblob%2Fdev%2Fspecs%2Faltair%2Fsync-protocol.mdx).%20The%20data%20object%20%5BLightClientSkipSyncUpdate%5D(skip-sync-network)%20allows%20a%20client%20to%20quickly%20sync%20to%20a%20recent%20header%20with%20the%20appropriate%20sync%20committee.%20Once%20the%20client%20establishes%20a%20recent%20header%2C%20it%20could%20sync%20to%20other%20headers%20by%20processing%20%5BLightClientUpdates%5D(https%3A%2F%2Fgithub.com%2Fethereum%2Fconsensus-specs%2Fblob%2Fdev%2Fspecs%2Faltair%2Fsync-protocol.md%23lightclientupdate).%20These%20two%20data%20types%20allow%20a%20client%20to%20stay%20up-to-date%20with%20the%20beacon%20chain.%0A%0A%20%20%20%20%20%20%20%20%20%20These%20two%20data%20types%20are%20placed%20into%20separate%20sub-networks.%20A%20light%20client%20make%20find-content%20requests%20on%20%60skip-sync-network%60%20at%20start%20of%20the%20sync%20to%20get%20a%20header%20with%20the%20same%20%60SyncCommittee%60%20object%20as%20in%20the%20current%20sync%20period.%20The%20client%20uses%20messages%20in%20the%20gossip%20topic%20%60bc-light-client-update%60%20to%20advance%20its%20header.%0A%0A%20%20%20%20%20%20%20%20%20%20The%20gossip%20topics%20described%20in%20this%20document%20is%20part%20of%20a%20%5Bproposal%5D(https%3A%2F%2Fethresear.ch%2Ft%2Fa-beacon-chain-light-client-proposal%2F11064)%20for%20a%20beacon%20chain%20light%20client.%0A%0A%23%23%23%20Transaction%20Proofs%0A%0A-%20%5BRetrieving%20Beacon%20State%5D(https%3A%2F%2Fgithub.com%2Fethereum%2Fportal-network-specs%2Fblob%2Fmaster%2Fbeacon-chain%2Fbeacon-state-network.mdx)%3A%20A%20client%20has%20a%20trusted%20beacon%20state%20root%2C%20and%20it%20wants%20to%20access%20some%20parts%20of%20the%20state.%20Each%20of%20the%20access%20request%20corresponds%20to%20some%20leave%20nodes%20of%20the%20beacon%20state.%20The%20request%20is%20a%20content%20lookup%20on%20a%20DHT.%20The%20response%20is%20a%20Merkle%20proof.%0A%0AA%20Distributed%20Hash%20Table%20(DHT)%20allows%20network%20participants%20to%20have%20retrieve%20data%20on-demand%20based%20on%20a%20content%20key.%20A%20portal-network%20DHT%20is%20different%20than%20a%20traditional%20one%20in%20that%20each%20participant%20could%20selectively%20limit%20its%20workload%20by%20choosing%20a%20small%20interest%20radius%20r.%20A%20participants%20only%20process%20messages%20that%20are%20within%20its%20chosen%20radius%20boundary.%0A%0A-%20%5BWire%20Protocol%5D(https%3A%2F%2Fgithub.com%2Fethereum%2Fportal-network-specs%2Fblob%2Fmaster%2Fbeacon-chain%2Fbeacon-state-network.md%23wire-protocol)%3A%20For%20a%20subprotocol%2C%20we%20need%20to%20further%20define%20the%20following%20to%20be%20able%20to%20instantiate%20the%20wire%20format%20of%20each%20message%20type.%201.%20%60content_key%60%202.%20%60content_id%60%203.%20%60payload%60%0A%0A%20%20%20%20%20%20The%20content%20of%20the%20message%20is%20a%20Merkle%20proof%20contains%20multiple%20leave%20nodes%20for%20a%20%5BBeaconState%5D(https%3A%2F%2Fgithub.com%2Fethereum%2Fconsensus-specs%2Fblob%2Fdev%2Fspecs%2Faltair%2Fbeacon-chain.md%23beaconstate).%0A%0A%20%20%20%20%20%20Finally%2C%20we%20define%20the%20necessary%20encodings.%20A%20light%20client%20only%20knows%20the%20root%20of%20the%20beacon%20state.%20The%20client%20wants%20to%20know%20the%20details%20of%20some%20leave%20nodes.%20The%20client%20has%20to%20be%20able%20to%20construct%20the%20%60content_key%60%20only%20knowing%20the%20root%20and%20which%20leave%20nodes%20it%20wants%20see.%20The%20%60content_key%60%20is%20the%20ssz%20serialization%20of%20the%20paths.%20The%20paths%20represent%20the%20part%20of%20the%20beacon%20state%20that%20one%20wants%20to%20know%20about.%20The%20paths%20are%20represented%20by%20generalized%20indices.%20Note%20that%20%60hash_tree_root%60%20and%20%60serialize%60%20are%20the%20same%20as%20those%20defined%20in%20%5Bsync-gossip%5D(https%3A%2F%2Fgithub.com%2Fethereum%2Fportal-network-specs%2Fblob%2Fmaster%2Fbeacon-chain%2Fsync-gossip.mdx).%0A%0A-%20TODO%3A%20Review%20of%20Retrieving%20a%20transaction%20proof%20not%20just%20retrieving%20data%20on-demand%0A%0A%23%23%23%20Further%20Information%0A%0A-%20Ethereum%202.0%20Specifications%0A-%20%5BBeacon%20Chain%20Specification%5D(https%3A%2F%2Fgithub.com%2Fethereum%2Fconsensus-specs%2Fblob%2Fmaster%2Fspecs%2Fphase0%2Fbeacon-chain.mdx)%0A-%20%5BExtended%20light%20client%20protocol%5D(https%3A%2F%2Fnotes.ethereum.org%2F%40vbuterin%2Fextended_light_client_protocol)%0A-%20%5BAltair%20Light%20Client%20--%20Light%20Client%5D(https%3A%2F%2Fgithub.com%2Fethereum%2Fconsensus-specs%2Fblob%2Fdev%2Fspecs%2Faltair%2Flight-client%2Flight-client.mdx)%0A-%20%5BAltair%20Light%20Client%20--%20Sync%20Protocol%5D(https%3A%2F%2Fgithub.com%2Fethereum%2Fconsensus-specs%2Fblob%2Fdev%2Fspecs%2Faltair%2Flight-client%2Fsync-protocol.mdx)%0A-%20%5BBeacon%20Chain%20Fork%20Choice%5D(https%3A%2F%2Fgithub.com%2Fethereum%2Fconsensus-specs%2Fblob%2Fdev%2Fspecs%2Fphase0%2Ffork-choice.mdx)%0A-%20%5BThe%20Portal%20Network%20Specification%5D(https%3A%2F%2Fgithub.com%2Fethereum%2Fportal-network-specs)%3A%20an%20in%20progess%20effort%20to%20enable%20lightweight%20protocol%20access%20by%20resource%20constrained%20devices.%0A-%20%5BLight%20Ethereum%20Subprotocol%20(LES)%5D(https%3A%2F%2Fgithub.com%2Fethereum%2Fdevp2p%2Fblob%2Fmaster%2Fcaps%2Fles.mdx)%3A%20the%20protocol%20used%20by%20%22light%22%20clients%2C%20which%20only%20download%20block%20headers%20as%20they%20appear%20and%20fetch%20other%20parts%20of%20the%20blockchain%20on-demand.%0A-%20%5BBlockDaemon%3A%20Ethereum%20Altair%20Hard%20Folk%3A%20Light%20Clients%20%26%20Sync%20Committees%5D(https%3A%2F%2Fblockdaemon.com%2Fblog%2Fethereum-altair-hard-folk-light-clients-sync-committees%2F)%0A-%20%5BEfficient%20algorithms%20for%20CBC%20Casper%5D(https%3A%2F%2Fdocs.google.com%2Fpresentation%2Fd%2F1oc_zdywOsHxz3zez1ILAgrerS7RkaF1hHoW0FLtp0Gw%2Fedit%23slide%3Did.p)%3A%20Review%20of%20LMD%20GHOST%20(Latest%20Message%20Driven%2C%20Greediest%20Heaviest%20Observed%20Sub-Tree)%0A-%20%5BSSZ%3A%20Simple%20Serialize%5D(https%3A%2F%2Fethereum.org%2Fen%2Fdevelopers%2Fdocs%2Fdata-structures-and-encoding%2Fssz%2F)%3A%20Overview%20of%20Simple%20serialize%20(SSZ)%20is%20the%20serialization%20method%20used%20on%20the%20Beacon%20Chain.%20(including%20merkalization%20and%20multiproofs)%0A-%20%5BThe%20Noise%20Protocol%20Framework%5D(https%3A%2F%2Fnoiseprotocol.org%2Fnoise.html)%3A%20Noise%20is%20a%20framework%20for%20crypto%20protocols%20based%20on%20Diffie-Hellman%20key%20agreement.%0A-%20%5BFlashbots%20for%20Ethereum%20Consensus%20Clients%5D(https%3A%2F%2Fhackmd.io%2FQoLwVQf3QK6EiVt15YOYqQ%3Fview)%0A-%20%5BOptimistic%20Sync%20Specification%5D(https%3A%2F%2Fgithub.com%2Fethereum%2Fconsensus-specs%2Fblob%2Fdev%2Fsync%2Foptimistic.mdx)%3A%20Optimistic%20Sync%20is%20a%20stop-gap%20measure%20to%20allow%20execution%20nodes%20to%20sync%20via%20established%20methods%20until%20future%20Ethereum%20roadmap%20items%20are%20implemented%20(e.g.%2C%20statelessness).%0A-%20%5BConsensus%20Light%20Client%20Server%20Implementation%20Notes%5D(https%3A%2F%2Fhackmd.io%2FhsCz1G3BTyiwwJtjT4pe2Q%3Fview)%3A%20How%20Lodestar%20beacon%20node%20was%20tweaked%20to%20serve%20light%20clients%0A-%20%5Bbeacon%20chain%20light%20client%20design%20doc%5D(https%3A%2F%2Fnotes.ethereum.org%2F%40ralexstokes%2FHJxDMi8vY)%3A%20notes%20about%20the%20design%2Fimplementation%20of%20a%20beacon%20chain%20light%20client%20using%20standard%20APIs%20and%20protocol%20features%0A-%20%5BA%20Beacon%20Chain%20Light%20Client%20Proposal%5D(https%3A%2F%2Fethresear.ch%2Ft%2Fa-beacon-chain-light-client-proposal%2F11064)%3A%20proposing%20a%20light%20client%20implementation%20that%20goes%20a%20step%20further%20than%20the%20minimum%20light%20client%20described%20in%20the%20altair%20consensus-spec.%20The%20proposed%20client%20aims%20to%20allow%20queries%20into%20the%20beacon%20state.%0A-%20%5BDistributed%20Hash%20Table%20(DHT)%20Overview%5D(https%3A%2F%2Fgithub.com%2Fethereum%2Fportal-network-specs%2Fblob%2Fmaster%2Fbeacon-chain%2Fbeacon-state-network.md%23dht-overview)%3A%20allows%20network%20participants%20to%20have%20retrieve%20data%20on-demand%20based%20on%20a%20content%20key.%0A-%20%5B(WIP)%20Light%20client%20p2p%20interface%20Specification%5D(https%3A%2F%2Fgithub.com%2Fethereum%2Fconsensus-specs%2Fpull%2F2786)%3A%20a%20PR%20to%20get%20the%20conversation%20going%20about%20a%20p2p%20approach.%0A%20%20Here%20we%20cover%20two%20approaches%20which%20may%20be%20combined%0A%0A%23%23%20References%0A%0A**References%20Overview**%0A%0A%3Ca%20name%3D%22ov1%22%3E%5B1%5D%3C%2Fa%3E%20%5BPart%20I%3A%20What%20to%20build%20next%20in%20Zero%0AKnowledge%3F%5D(https%3A%2F%2Fdelendum.xyz%2F2022%2F11%2F22%2Fwhat-to-build-next-in-zero-knowledge.html)%3A%0AWhat%20are%20the%20problems%20that%20haven%E2%80%99t%20been%20solved%20in%20blockchain%20and%20how%20can%20we%0Aleverage%20zero-knowledge%20proof%20as%20a%20tool%20to%20solve%20these%20problems%3F%0A%0A%3Ca%20name%3D%22ov1%22%3E%5B2%5D%3C%2Fa%3E%20%5BCrosschain%0AFuture%5D(https%3A%2F%2Fgithub.com%2Fisolab-gg%2Fisomorph%2Fblob%2Fmain%2Fdocs%2Fblog%2Fcrosschain-future.mdx)%3A%0AA%20review%20of%20the%20growing%20blockchain%20ecosystem%20and%20the%20role%20of%20zkp%20in%20building%0Atrustless%20bridges.%0A%0A%3Ca%20name%3D%22ov2%22%3E%5B3%5D%3C%2Fa%3E%20%5BTechnical%20Problems%0AOverview%5D(https%3A%2F%2Fgithub.com%2Fisolab-gg%2Fisomorph%2Fblob%2Fmain%2Fdocs%2Fproblems%2Ftechnical-problems-part-1.mdx)%3A%0ATrustless%20Bridging%20Technical%20Problems%20-%20PART%201%3A%20Problem%20Overview%2C%20Consensus%0AProtocols%2C%20Signature%20Schemes.%0A%0A**Reference%20Trustless%20Bridge%20Design**%0A%0A%3Ca%20name%3D%22tb1%22%3E%5B1%5D%3C%2Fa%3E%20%5BSuccinct%3A%20Proof%20of%20Consensus%20Bridging%20between%20Ethereum%0Aand%20Gnosis%20Chain%5D(https%3A%2F%2Fblog.succinct.xyz%2Fblog%2Fproof-of-consensus%2F)%3A%20gas%0Aefficient%20on-chain%20light%20client%20for%20Ethereum%20PoS%2C%20powered%20by%20succinct%0Azero-knowledge%20proofs%20(zkSNARKs)%2C%20allowing%20for%20arbitrary%2C%20trust-minimized%0Across-chain%20communication%20between%20Ethereum%20and%20Gnosis%20Chain.%0A%0A**References%20Block%20Production**%0A%0A%3Ca%20name%3D%22bp1%22%3E%5B1%5D%3C%2Fa%3E%20%5BEIP-3675%3A%20Upgrade%20consensus%20to%0AProof-of-Stake%5D(https%3A%2F%2Feips.ethereum.org%2FEIPS%2Feip-3675%23pow-block-processing)%3A%0ASpecification%20of%20the%20consensus%20mechanism%20upgrade%20on%20Ethereum%20Mainnet%20that%0Aintroduces%20Proof-of-Stake.%0A%0A%3Ca%20name%3D%22bp2%22%3E%5B2%5D%3C%2Fa%3E%20%5BEIP-2982%3A%20Serenity%20Phase%0A0%5D(https%3A%2F%2Feips.ethereum.org%2FEIPS%2Feip-2982)%3A%20Phase%200%20of%20the%20release%20schedule%20of%0ASerenity%2C%20a%20series%20of%20updates%20to%20Ethereum%20a%20scalable%2C%20proof-of-stake%20consensus.%0A%0A%3Ca%20name%3D%22bp3%22%3E%5B3%5D%3C%2Fa%3E%20%5BEthreum%20Consensus%20Specs%20Phase%0A0%5D(https%3A%2F%2Fgithub.com%2Fethereum%2Fconsensus-specs%2Ftree%2Fdev%2Fspecs%2Fphase0)%3A%0ASpecifications%20for%20Ethereum%202.0%20Phase%200%20including%0A%5Bbeacon-chain%5D(https%3A%2F%2Fgithub.com%2Fethereum%2Fconsensus-specs%2Fblob%2Fdev%2Fspecs%2Fphase0%2Fbeacon-chain.mdx)%2C%0A%5Bdeposit-contract%5D(https%3A%2F%2Fgithub.com%2Fethereum%2Fconsensus-specs%2Fblob%2Fdev%2Fspecs%2Fphase0%2Fdeposit-contract.mdx)%2C%0A%5Bfork-choice%5D(https%3A%2F%2Fgithub.com%2Fethereum%2Fconsensus-specs%2Fblob%2Fdev%2Fspecs%2Fphase0%2Ffork-choice.mdx)%2C%0A%5Bp2p-interface%5D(https%3A%2F%2Fgithub.com%2Fethereum%2Fconsensus-specs%2Fblob%2Fdev%2Fspecs%2Fphase0%2Fp2p-interface.mdx)%2C%0A%5Bvalidator%5D(https%3A%2F%2Fgithub.com%2Fethereum%2Fconsensus-specs%2Fblob%2Fdev%2Fspecs%2Fphase0%2Fvalidator.mdx)%0Aand%0A%5Bweak-subjectivity%5D(https%3A%2F%2Fgithub.com%2Fethereum%2Fconsensus-specs%2Fblob%2Fdev%2Fspecs%2Fphase0%2Fweak-subjectivity.mdx)%0A%0A%3Ca%20name%3D%22bp4%22%3E%5B6%5D%3C%2Fa%3E%20%5BEthereum%20Consensus%20and%20Execution%20Client%0ADistribution%5D(https%3A%2F%2Fclientdiversity.org%2F%23distribution)%3A%20Percentages%20of%20nodes%0Arunning%20client%20types%20for%20both%20Consensus%20(Prysm%2C%20Lighthours%2C%20Nimbus%2C%20Teku)%20and%0AExecution%20(Geth%2C%20Erigon%2C%20Besu%2C%20Nethermind)%20clients.%0A%0A%3Ca%20name%3D%22bp5%22%3E%5B5%5D%3C%2Fa%3E%20%5Bgo-ethereum%20go%0Adocumentation%5D(https%3A%2F%2Fpkg.go.dev%2Fgithub.com%2Fethereum%2Fgo-ethereum%40v1.10.26)%3A%0ADocumentation%20for%20Go%20Ethereum%2C%20Official%20Golang%20implementation%20of%20the%20Ethereum%0Aprotocol.%20Which%20is%20an%20execution%20chain%20implementation.%0A%0A%3Ca%20name%3D%22bp6%22%3E%5B6%5D%3C%2Fa%3E%20%5Bprysm%20go%0Adocumentation%5D(https%3A%2F%2Fpkg.go.dev%2Fgithub.com%2Fprysmaticlabs%2Fprysm%2Fv3%40v3.1.2)%3A%0ADocumentation%20for%20prysm%2C%20An%20Ethereum%20Consensus%20Implementation%20Written%20in%20Go.%20A%0Abeacon-chain%20immplementation.%20Also%20see%20%5BPrysm%0ADocumentation%5D(https%3A%2F%2Fdocs.prylabs.network%2Fdocs%2Fgetting-started)%0A%0A%3Ca%20name%3D%22bp7%22%3E%5B7%5D%3C%2Fa%3E%20%5Blighthouse%0Adocumentation%5D(https%3A%2F%2Fpkg.go.dev%2Fgithub.com%2Fprysmaticlabs%2Fprysm%2Fv3%40v3.1.2)%3A%0ADocumentation%20for%20lighthouse%2C%20written%20in%20Rust.%20A%20beacon-chain%20immplementation.%0A%0A%3Ca%20name%3D%22bp8%22%3E%5B8%5D%3C%2Fa%3E%20%5BEtherum%202.0%20Validators%0AOverview%5D(https%3A%2F%2Fbeaconcha.in%2Fvalidators)%3A%20Live%20Monitoring%20of%20Ethreum%202.0%0AValidators%20from%20beachoncha.in%0A%0A**References%20Technical%20Summary**%0A%0A%3Ca%20name%3D%22ts1%22%3E%5B1%5D%3C%2Fa%3E%20%5BEthereum%20EVM%0Aillustrated%5D(https%3A%2F%2Ftakenobu-hs.github.io%2Fdownloads%2Fethereum_evm_illustrated.pdf)%3A%0AA%20technical%20overview%20of%20Ethereum%20including%20state%2C%20accounts%2C%20transactions%20and%0Amessages%20as%20well%20as%20the%20EVM.%20%5BAppendix%20E%5D(%23appendix-e-data-structures)%20has%20links%0Ato%20type%20definitions%20for%20blocks%2C%20transactions%2C%20state%20etc%20in%20geth.%0A%0A%3Ca%20name%3D%22ts2%22%3E%5B2%5D%3C%2Fa%3E%20%5BBlocks%5D(https%3A%2F%2Fethereum.org%2Fen%2Fdevelopers%2Fdocs%2Fblocks%2F)%3A%0ABlock%20data%20definitions%20including%20attestations%20from%20ethereum.org%0A%0A%3Ca%20name%3D%22ts3%22%3E%5B3%5D%3C%2Fa%3E%20%5Beth1%20block%0Aproposal%5D(https%3A%2F%2Fhackmd.io%2F%40flashbots%2Fmev-in-eth2%23eth1-block-proposal)%3A%0ATechnical%20walkthrough%20of%20how%20blocks%20are%20proposed%20and%20potential%20MEV%20opportunities%0Afrom%20FlashBots.%0A%0A%3Ca%20name%3D%22ts4%22%3E%5B4%5D%3C%2Fa%3E%20%5BAssemble%0ABlock%5D(https%3A%2F%2Fgithub.com%2Fethereum%2Frayonism%2Fblob%2Fmaster%2Fspecs%2Fmerge.md%23assemble-block)%3A%0AEthereum%20Specification%20for%20block%20Assembly%20as%20part%20of%20Rayonism%20--%20The%20Merge%20spec.%0A%0A%3Ca%20name%3D%22ts5%22%3E%5B5%5D%3C%2Fa%3E%20%5BPrysm%20running%20a%0Anode%5D(https%3A%2F%2Fdocs.prylabs.network%2Fdocs%2Finstall%2Finstall-with-script)%3A%0AOperational%20procedures%20for%20Validators%20by%20Prysm.%20Note%20validators%20run%20both%20the%0Abeacon%20chain(consensus)%20and%20a%20geth%20node(execution)%0A%0A%3Ca%20name%3D%22ts6%22%3E%5B6%5D%3C%2Fa%3E%5BThe%20Beacon%20Chain%20Ethereum%202.0%20explainer%20you%20need%20to%20read%0Afirst%5D(https%3A%2F%2Fethos.dev%2Fbeacon-chain)%3A%20Detailed%20walk%20through%20og%20Ethereum%202.0%0Ablock%20production%20including%20slots%2C%20epochs%2C%20validators%2C%20commitees%20and%20finality.%0A%0A%3Ca%20name%3D%22ts6b%22%3E%5B6%5D%3C%2Fa%3E%5BThe%20Beacon%20Chain%20Ethereum%202.0%20explainer%20you%20need%20to%20read%0Afirst%5D(https%3A%2F%2Fethos.dev%2Fbeacon-chain)%3A%20Detailed%20walk%20through%20og%20Ethereum%202.0%0Ablock%20production%20including%20slots%2C%20epochs%2C%20validators%2C%20commitees%20and%20finality.%0A%0A%3Ca%20name%3D%22ts7%22%3E%5B7%5D%3C%2Fa%3E%20%5BEtherum%202.0%20Validators%0AOverview%5D(https%3A%2F%2Fbeaconcha.in%2Fvalidators)%3A%20Live%20Monitoring%20of%20Ethreum%202.0%0AValidators%20from%20beachoncha.in%0A%0A%3Ca%20name%3D%22ts8%22%3E%5B8%5D%3C%2Fa%3E%5BBLS%0ASignatures%5D(https%3A%2F%2Feth2book.info%2Fbellatrix%2Fpart2%2Fbuilding_blocks%2Fsignatures%2F)%3A%0ADetailed%20walkthrough%20of%20BLS%20Signatures%20and%20how%20they%20can%20be%20used%20in%20aggregation.%0A%0A%3Ca%20name%3D%22ts9%22%3E%5B8%5D%3C%2Fa%3E%5BAttestation%20Inclusion%0ALifecycle%5D(https%3A%2F%2Fkb.beaconcha.in%2Fattestation%23attestation-inclusion-lifecycle)%3A%0AHigh%20Level%20overview%20of%20the%20attestation%20life%20cycle%20including%20geeration%2C%0Apropogation%2C%20aggregation%20and%20inclusion.Attest%0A%0A%3Ca%20name%3D%22ts10%22%3E%5Bts10%5D%3C%2Fa%3E%20%5BBeacon%20Chain%20Proposal%3A%20Sync%0AComittees%5D(https%3A%2F%2Fnotes.ethereum.org%2F%40vbuterin%2FHF1_proposal%23Sync-committees)%3A%0AFor%20each%20period%20(~27%20hours)%2C%201024%20validators%20are%20randomly%20selected%20to%20be%20part%20of%0Athe%20sync%20committee%20during%20that%20period.%20Validators%20in%20the%20sync%20committee%20would%0Apublish%20signatures%20attesting%20to%20the%20current%20head.%20These%20signatures%20would%20be%0Abroadcasted%20as%20part%20of%20a%20LightClientUpdate%20object%20that%20could%20help%20light%20clients%0Afind%20the%20head%2C%20and%20would%20be%20included%20in%20the%20beacon%20chain%20to%20be%20rewarded.%0A%0A%3Ca%20name%3D%22ts11%22%3E%5Bts11%5D%3C%2Fa%3E%20%5BAltair%20Light%20Client%20--%20Sync%0AProtocol%5D(https%3A%2F%2Fnotes.ethereum.org%2F%40vbuterin%2FHF1_proposal%23Sync-committees)%3A%0AThis%20document%20suggests%20a%20minimal%20light%20client%20design%20for%20the%20beacon%20chain%20that%0Auses%20sync%20committees.%0A%0A%3Ca%20name%3D%22ts12%22%3E%5Bts12%5D%3C%2Fa%3E%20%5BEthereum%20Builder%20Specifications%3A%20Honest%0AValidator%5D(https%3A%2F%2Fgithub.com%2Fethereum%2Fbuilder-specs%2Fblob%2Fmain%2Fspecs%2Fvalidator.mdx)%3A%0Aexplains%20the%20way%20in%20which%20a%20beacon%20chain%20validator%20is%20expected%20to%20use%20the%0ABuilder%20spec%20to%20participate%20in%20an%20external%20builder%20network.%0A%0A%3Ca%20name%3D%22ts13%22%3E%5Bts13%5D%3C%2Fa%3E%20%5BFlashbots%3A%0Amev-boost%5D(https%3A%2F%2Fgithub.com%2Fflashbots%2Fmev-boost)%3A%20open%20source%20middleware%20run%0Aby%20validators%20to%20access%20a%20competitive%20block-building%20market.%0A%0A%3Ca%20name%3D%22ts14%22%3E%5Bts14%5D%3C%2Fa%3E%20%5BA%20note%20on%20Ethereum%202.0%20phase%200%20validator%0Alifecycle%5D(https%3A%2F%2Fnotes.ethereum.org%2F7CFxjwMgQSWOHIxLgJP2Bw%23A-note-on-Ethereum-20-phase-0-validator-lifecycle)%3A%0Adescribes%20the%20concept%20of%20validator%20status%20epochs%20and%20the%20cases%20of%20validator%0Alifecycle%20in%20the%20view%20of%20%E2%80%9Cvalidator%20status%20transition%E2%80%9D%20in%20phase%200.%0A%0A%23%23%20Appendices%0A%0A%23%23%23%20Appendix%20A%3A%20Signing%20Libraries%0A%0A%23%23%23%20Appendix%20B%3A%20Proving%20and%20Verification%20Mechanisms%0A%0A%23%23%23%23%20%5Beth-proof-of-consensus%5D(https%3A%2F%2Fgithub.com%2Fsuccinctlabs%2Feth-proof-of-consensus)%3A%20Proof%20of%20Consensus%20for%20Ethereum%20by%20succinctlabs%0A%0ACircuits%0A%0A-%20%5Baggregate_bls_verify.circom%5D(https%3A%2F%2Fgithub.com%2Fsuccinctlabs%2Feth-proof-of-consensus%2Fblob%2Fmain%2Fcircuits%2Fcircuits%2Faggregate_bls_verify.circom)%3A%20Computes%20an%20aggregate%20BLS12-381%20public%20key%20over%20a%20set%20of%20public%20keys%20and%20a%20bitmask%0A-%20%5Bassert_valid_signed_header.circom%5D(https%3A%2F%2Fgithub.com%2Fsuccinctlabs%2Feth-proof-of-consensus%2Fblob%2Fmain%2Fcircuits%2Fcircuits%2Fassert_valid_signed_header.circom)%0A-%20%5Bpubkey_poseidon.circom%5D(https%3A%2F%2Fgithub.com%2Fsuccinctlabs%2Feth-proof-of-consensus%2Fblob%2Fmain%2Fcircuits%2Fcircuits%2Fpubkey_poseidon.circom)%3A%20Computes%20the%20Poseidon%20merkle%20root%20of%20a%20list%20of%20field%20elements%0A-%20%5Bsha256_bytes.circom%5D(https%3A%2F%2Fgithub.com%2Fsuccinctlabs%2Feth-proof-of-consensus%2Fblob%2Fmain%2Fcircuits%2Fcircuits%2Fsha256_bytes.circom)%3A%20Wrapper%20around%20SHA256%20to%20support%20bytes%20as%20input%20instead%20of%20bits%0A-%20%5Bsimple_serialize.circom%5D(https%3A%2F%2Fgithub.com%2Fsuccinctlabs%2Feth-proof-of-consensus%2Fblob%2Fmain%2Fcircuits%2Fcircuits%2Fsimple_serialize.circom)%3A%20Helper%20function%20to%20implement%20SSZArray%0A-%20%5Bsync_committee_committments.circom%5D(https%3A%2F%2Fgithub.com%2Fsuccinctlabs%2Feth-proof-of-consensus%2Fblob%2Fmain%2Fcircuits%2Fcircuits%2Fsync_committee_committments.circom)%3A%20Asserts%20that%20the%20byte%20representation%20of%20a%20BLS12-381%20public%20key's%20x-coordinate%20matches%20the%20BigInt%20representation%0A%0AVerification%0A%0A-%20%5BAMB%5D(https%3A%2F%2Fgithub.com%2Fsuccinctlabs%2Feth-proof-of-consensus%2Ftree%2Fmain%2Fcontracts%2Fsrc%2Famb)%3A%20Arbitrary%20Message%20Passing%0A-%20%5BTrustlessAMB.sol%5D(https%3A%2F%2Fgithub.com%2Fsuccinctlabs%2Feth-proof-of-consensus%2Fblob%2Fmain%2Fcontracts%2Fsrc%2Famb%2FTrustlessAMB.sol)%3A%20sends%20and%20executes%20messages%0A-%20%5BTrustlessAMBStorage.sol%5D(https%3A%2F%2Fgithub.com%2Fsuccinctlabs%2Feth-proof-of-consensus%2Fblob%2Fmain%2Fcontracts%2Fsrc%2Famb%2FTrustlessAMBStorage.sol)%3A%20Storage%20for%20messages%20between%20two%20chains%0A-%20%5Bbridge%5D(https%3A%2F%2Fgithub.com%2Fsuccinctlabs%2Feth-proof-of-consensus%2Ftree%2Fmain%2Fcontracts%2Fsrc%2Fbridge)%3A%20Allows%20for%20the%20deposit%20and%20withdrawal%20of%20ERC20%20tokens%0A-%20%5BBridge.sol%5D(https%3A%2F%2Fgithub.com%2Fsuccinctlabs%2Feth-proof-of-consensus%2Fblob%2Fmain%2Fcontracts%2Fsrc%2Fbridge%2FBridge.sol)%3A%20Deposit%20and%20withdraw%20functionality%0A-%20%5BToken.sol%5D(https%3A%2F%2Fgithub.com%2Fsuccinctlabs%2Feth-proof-of-consensus%2Fblob%2Fmain%2Fcontracts%2Fsrc%2Fbridge%2FTokens.sol)%3A%20ERC20%20bridge%20token%20definitions%0A-%20%5Blightclient%5D(https%3A%2F%2Fgithub.com%2Fsuccinctlabs%2Feth-proof-of-consensus%2Ftree%2Fmain%2Fcontracts%2Fsrc%2Flightclient)%0A-%20%5BBLSAggregatedSignatureVerifier.sol%5D(https%3A%2F%2Fgithub.com%2Fsuccinctlabs%2Feth-proof-of-consensus%2Fblob%2Fmain%2Fcontracts%2Fsrc%2Flightclient%2FBLSAggregatedSignatureVerifier.sol)%3A%20Verifies%20BLS%20aggregated%20signature%20proofs%0A-%20%5BBeaconLightClient.sol%5D(https%3A%2F%2Fgithub.com%2Fsuccinctlabs%2Feth-proof-of-consensus%2Fblob%2Fmain%2Fcontracts%2Fsrc%2Flightclient%2FBeaconLightClient.sol)%3A%20Beacon%20Light%20Client%20Functionality%20including%0A%20%20-%20%5Bstep(LightClientUpdate%20memory%20update)%5D(https%3A%2F%2Fgithub.com%2Fsuccinctlabs%2Feth-proof-of-consensus%2Fblob%2Fmain%2Fcontracts%2Fsrc%2Flightclient%2FBeaconLightClient.sol%23L86)%3A%20Updates%20the%20head%20given%20a%20finalized%20light%20client%20update.%0A%20%20-%20%5Bfunction%20updateSyncCommittee(LightClientUpdate%20memory%20update%2C%20bytes32%20nextSyncCommitteePoseidon%2C%20Groth16Proof%20memory%20commitmentMappingProof)%5D(https%3A%2F%2Fgithub.com%2Fsuccinctlabs%2Feth-proof-of-consensus%2Fblob%2Fmain%2Fcontracts%2Fsrc%2Flightclient%2FBeaconLightClient.sol%23L102)%3A%20Set%20the%20sync%20committee%20validator%20set%20root%20for%20the%20next%20sync%20commitee%20period.%0A%20%20-%20%5Bfunction%20forceUpdate()%5D(https%3A%2F%2Fgithub.com%2Fsuccinctlabs%2Feth-proof-of-consensus%2Fblob%2Fmain%2Fcontracts%2Fsrc%2Flightclient%2FBeaconLightClient.sol%23L131)%3A%20Finalizes%20the%20optimistic%20update%20and%20sets%20the%20next%20sync%20committee%20if%20no%20finalized%20updates%20have%20been%20received%20for%20a%20period.%0A%20%20-%20%5Bfunction%20processLightClientUpdate(LightClientUpdate%20memory%20update)%5D(https%3A%2F%2Fgithub.com%2Fsuccinctlabs%2Feth-proof-of-consensus%2Fblob%2Fmain%2Fcontracts%2Fsrc%2Flightclient%2FBeaconLightClient.sol%23L131)%3A%20Implements%20shared%20logic%20for%20processing%20light%20client%20updates.%0A%20%20-%20%5Bfunction%20zkMapSSZToPoseidon(bytes32%20sszCommitment%2C%20bytes32%20poseidonCommitment%2C%20Groth16Proof%20memory%20proof)%5D(https%3A%2F%2Fgithub.com%2Fsuccinctlabs%2Feth-proof-of-consensus%2Fblob%2Fmain%2Fcontracts%2Fsrc%2Flightclient%2FBeaconLightClient.sol%23L190)%3A%20Maps%20a%20simple%20serialize%20merkle%20root%20to%20a%20poseidon%20merkle%20root%20with%20a%20zkSNARK.%20The%20proof%20asserts%20that%3A%20SimpleSerialize(syncCommittee)%20%3D%3D%20Poseidon(syncCommittee).%0A%20%20-%20%5Bfunction%20zkBLSVerify(bytes32%20signingRoot%2C%20bytes32%20syncCommitteeRoot%2C%20uint256%20claimedParticipation%2C%20Groth16Proof%20memory%20proof)%5D(https%3A%2F%2Fgithub.com%2Fsuccinctlabs%2Feth-proof-of-consensus%2Fblob%2Fmain%2Fcontracts%2Fsrc%2Flightclient%2FBeaconLightClient.sol%23L208)%3A%20Does%20an%20aggregated%20BLS%20signature%20verification%20with%20a%20zkSNARK.%0A-%20%5Bscripts%5D(https%3A%2F%2Fgithub.com%2Fsuccinctlabs%2Feth-proof-of-consensus%2Ftree%2Fmain%2Fcontracts%2Fsrc%2Fscripts)%3A%20A%20collection%20of%20%5Bforge-scripts%5D(https%3A%2F%2Fbook.getfoundry.sh%2Freference%2Fforge%2Fforge-script)%20for%20contract%20deployment.%0A%0A%23%23%23%20Appendix%20C%3A%20Topics%0A%0ABeacon%20Chain%20Topics%20%5BPrysm%5D(https%3A%2F%2Fgithub.com%2Fprysmaticlabs%2Fprysm%2Fblob%2Fdevelop%2Fbeacon-chain%2Fp2p%2Ftopics.go)%0A%0Apackage%20p2p%0A%0Aconst%20(%0A%2F%2F%20GossipProtocolAndDigest%20represents%20the%20protocol%20and%20fork%20digest%20prefix%20in%20a%20gossip%20topic.%0AGossipProtocolAndDigest%20%3D%20%22%2Feth2%2F%25x%2F%22%0A%0A%2F%2F%20Message%20Types%0A%2F%2F%0A%2F%2F%20GossipAttestationMessage%20is%20the%20name%20for%20the%20attestation%20message%20type.%20It%20is%0A%2F%2F%20specially%20extracted%20so%20as%20to%20determine%20the%20correct%20message%20type%20from%20an%20attestation%0A%2F%2F%20subnet.%0AGossipAttestationMessage%20%3D%20%22beacon_attestation%22%0A%2F%2F%20GossipSyncCommitteeMessage%20is%20the%20name%20for%20the%20sync%20committee%20message%20type.%20It%20is%0A%2F%2F%20specially%20extracted%20so%20as%20to%20determine%20the%20correct%20message%20type%20from%20a%20sync%20committee%0A%2F%2F%20subnet.%0AGossipSyncCommitteeMessage%20%3D%20%22sync_committee%22%0A%2F%2F%20GossipBlockMessage%20is%20the%20name%20for%20the%20block%20message%20type.%0AGossipBlockMessage%20%3D%20%22beacon_block%22%0A%2F%2F%20GossipExitMessage%20is%20the%20name%20for%20the%20voluntary%20exit%20message%20type.%0AGossipExitMessage%20%3D%20%22voluntary_exit%22%0A%2F%2F%20GossipProposerSlashingMessage%20is%20the%20name%20for%20the%20proposer%20slashing%20message%20type.%0AGossipProposerSlashingMessage%20%3D%20%22proposer_slashing%22%0A%2F%2F%20GossipAttesterSlashingMessage%20is%20the%20name%20for%20the%20attester%20slashing%20message%20type.%0AGossipAttesterSlashingMessage%20%3D%20%22attester_slashing%22%0A%2F%2F%20GossipAggregateAndProofMessage%20is%20the%20name%20for%20the%20attestation%20aggregate%20and%20proof%20message%20type.%0AGossipAggregateAndProofMessage%20%3D%20%22beacon_aggregate_and_proof%22%0A%2F%2F%20GossipContributionAndProofMessage%20is%20the%20name%20for%20the%20sync%20contribution%20and%20proof%20message%20type.%0AGossipContributionAndProofMessage%20%3D%20%22sync_committee_contribution_and_proof%22%0A%2F%2F%20GossipBlsToExecutionChangeMessage%20is%20the%20name%20for%20the%20bls%20to%20execution%20change%20message%20type.%0AGossipBlsToExecutionChangeMessage%20%3D%20%22bls_to_execution_change%22%0A%0A%2F%2F%20Topic%20Formats%0A%2F%2F%0A%2F%2F%20AttestationSubnetTopicFormat%20is%20the%20topic%20format%20for%20the%20attestation%20subnet.%0AAttestationSubnetTopicFormat%20%3D%20GossipProtocolAndDigest%20%2B%20GossipAttestationMessage%20%2B%20%22_%25d%22%0A%2F%2F%20SyncCommitteeSubnetTopicFormat%20is%20the%20topic%20format%20for%20the%20sync%20committee%20subnet.%0ASyncCommitteeSubnetTopicFormat%20%3D%20GossipProtocolAndDigest%20%2B%20GossipSyncCommitteeMessage%20%2B%20%22_%25d%22%0A%2F%2F%20BlockSubnetTopicFormat%20is%20the%20topic%20format%20for%20the%20block%20subnet.%0ABlockSubnetTopicFormat%20%3D%20GossipProtocolAndDigest%20%2B%20GossipBlockMessage%0A%2F%2F%20ExitSubnetTopicFormat%20is%20the%20topic%20format%20for%20the%20voluntary%20exit%20subnet.%0AExitSubnetTopicFormat%20%3D%20GossipProtocolAndDigest%20%2B%20GossipExitMessage%0A%2F%2F%20ProposerSlashingSubnetTopicFormat%20is%20the%20topic%20format%20for%20the%20proposer%20slashing%20subnet.%0AProposerSlashingSubnetTopicFormat%20%3D%20GossipProtocolAndDigest%20%2B%20GossipProposerSlashingMessage%0A%2F%2F%20AttesterSlashingSubnetTopicFormat%20is%20the%20topic%20format%20for%20the%20attester%20slashing%20subnet.%0AAttesterSlashingSubnetTopicFormat%20%3D%20GossipProtocolAndDigest%20%2B%20GossipAttesterSlashingMessage%0A%2F%2F%20AggregateAndProofSubnetTopicFormat%20is%20the%20topic%20format%20for%20the%20aggregate%20and%20proof%20subnet.%0AAggregateAndProofSubnetTopicFormat%20%3D%20GossipProtocolAndDigest%20%2B%20GossipAggregateAndProofMessage%0A%2F%2F%20SyncContributionAndProofSubnetTopicFormat%20is%20the%20topic%20format%20for%20the%20sync%20aggregate%20and%20proof%20subnet.%0ASyncContributionAndProofSubnetTopicFormat%20%3D%20GossipProtocolAndDigest%20%2B%20GossipContributionAndProofMessage%0A%2F%2F%20BlsToExecutionChangeSubnetTopicFormat%20is%20the%20topic%20format%20for%20the%20bls%20to%20execution%20change%20subnet.%0ABlsToExecutionChangeSubnetTopicFormat%20%3D%20GossipProtocolAndDigest%20%2B%20GossipBlsToExecutionChangeMessage%0A)%0A%0A%23%23%23%20Appendix%20D%3A%20gRPC%20and%20API's%0A%0A%5BBeaconcha.in%20ETH2%20API%5D(https%3A%2F%2Fbeaconcha.in%2Fapi%2Fv1%2Fdocs%2Findex.html)%0A%0A%23%23%23%20Appendix%20E%3A%20Data%20Structures%0A%0A-%20Block%20Structure%20from%20%5Bgo-ethereum%5D(https%3A%2F%2Fgithub.com%2Fethereum%2Fgo-ethereum%2Fblob%2Frelease%2F1.9%2Fconsensus%2Fethash%2Fconsensus.go)%0A%0A%60%60%60%0A%0A%2F%2F%20SealHash%20returns%20the%20hash%20of%20a%20block%20prior%20to%20it%20being%20sealed.%0Afunc%20(ethash%20*Ethash)%20SealHash(header%20*types.Header)%20(hash%20common.Hash)%20%7B%0Ahasher%20%3A%3D%20sha3.NewLegacyKeccak256()%0A%0Arlp.Encode(hasher%2C%20%5B%5Dinterface%7B%7D%7B%0Aheader.ParentHash%2C%0Aheader.UncleHash%2C%0Aheader.Coinbase%2C%0Aheader.Root%2C%0Aheader.TxHash%2C%0Aheader.ReceiptHash%2C%0Aheader.Bloom%2C%0Aheader.Difficulty%2C%0Aheader.Number%2C%0Aheader.GasLimit%2C%0Aheader.GasUsed%2C%0Aheader.Time%2C%0Aheader.Extra%2C%0A%7D)%0Ahasher.Sum(hash%5B%3A0%5D)%0Areturn%20hash%0A%7D%0A%0A%60%60%60%0A%0A-%20Blocks%20Headers%20get%20forwarded%20to%20the%20Beacon%20chain%20once%20they%20pass%20%5Bbeacon%20consensus%5D(https%3A%2F%2Fgithub.com%2Fethereum%2Fgo-ethereum%2Fblob%2Fmaster%2Fconsensus%2Fbeacon%2Fconsensus.go)%0A-%20The%20Beacon%20chain%20embeds%20the%20EthChain%20Header%20into%20a%20%5BBeaconBlock%5D(https%3A%2F%2Fgithub.com%2Fprysmaticlabs%2Fprysm%2Fblob%2Fdevelop%2Fconsensus-types%2Fblocks%2Ftypes.go%23L43)%0A%0ABeaconBlockBody%20from%20%5Bprysm%5D(https%3A%2F%2Fgithub.com%2Fprysmaticlabs%2Fprysm%2Fblob%2Fdevelop%2Fconsensus-types%2Fblocks%2Ftypes.go)%20(golang)%0A%0A%60%60%60%0A%0A%2F%2F%20BeaconBlockBody%20is%20the%20main%20beacon%20block%20body%20structure.%20It%20can%20represent%20any%20block%20type.%0Atype%20BeaconBlockBody%20struct%20%7B%0Aversion%20int%0AisBlinded%20bool%0ArandaoReveal%20%5Bfield_params.BLSSignatureLength%5Dbyte%0Aeth1Data%20*eth.Eth1Data%0Agraffiti%20%5Bfield_params.RootLength%5Dbyte%0AproposerSlashings%20%5B%5D*eth.ProposerSlashing%0AattesterSlashings%20%5B%5D*eth.AttesterSlashing%0Aattestations%20%5B%5D*eth.Attestation%0Adeposits%20%5B%5D*eth.Deposit%0AvoluntaryExits%20%5B%5D*eth.SignedVoluntaryExit%0AsyncAggregate%20*eth.SyncAggregate%0AexecutionPayload%20*engine.ExecutionPayload%0AexecutionPayloadHeader%20%5C*engine.ExecutionPayloadHeader%0A%7D%0A%0A%2F%2F%20BeaconBlock%20is%20the%20main%20beacon%20block%20structure.%20It%20can%20represent%20any%20block%20type.%0Atype%20BeaconBlock%20struct%20%7B%0Aversion%20int%0Aslot%20types.Slot%0AproposerIndex%20types.ValidatorIndex%0AparentRoot%20%5Bfield_params.RootLength%5Dbyte%0AstateRoot%20%5Bfield_params.RootLength%5Dbyte%0Abody%20%5C*BeaconBlockBody%0A%7D%0A%0A%2F%2F%20SignedBeaconBlock%20is%20the%20main%20signed%20beacon%20block%20structure.%20It%20can%20represent%20any%20block%20type.%0Atype%20SignedBeaconBlock%20struct%20%7B%0Aversion%20int%0Ablock%20%5C*BeaconBlock%0Asignature%20%5Bfield_params.BLSSignatureLength%5Dbyte%0A%7D%0A%0A%60%60%60%0A%0AEth1Data%20from%20%5Bprysm%5D(https%3A%2F%2Fgithub.com%2Fprysmaticlabs%2Fprysm%2Fblob%2Fdevelop%2Fproto%2Fprysm%2Fv1alpha1%2Fpowchain.pb.go%23L24)%20(golang)%0A%0A%60%60%60%0A%0Atype%20ETH1ChainData%20struct%20%7B%0Astate%20protoimpl.MessageState%0AsizeCache%20protoimpl.SizeCache%0AunknownFields%20protoimpl.UnknownFields%0A%0ACurrentEth1Data%20*LatestETH1Data%20%60protobuf%3A%22bytes%2C1%2Copt%2Cname%3Dcurrent_eth1_data%2Cjson%3DcurrentEth1Data%2Cproto3%22%20json%3A%22current_eth1_data%2Comitempty%22%60%0AChainstartData%20*ChainStartData%20%60protobuf%3A%22bytes%2C2%2Copt%2Cname%3Dchainstart_data%2Cjson%3DchainstartData%2Cproto3%22%20json%3A%22chainstart_data%2Comitempty%22%60%0ABeaconState%20*BeaconState%20%60protobuf%3A%22bytes%2C3%2Copt%2Cname%3Dbeacon_state%2Cjson%3DbeaconState%2Cproto3%22%20json%3A%22beacon_state%2Comitempty%22%60%0ATrie%20*SparseMerkleTrie%20%60protobuf%3A%22bytes%2C4%2Copt%2Cname%3Dtrie%2Cproto3%22%20json%3A%22trie%2Comitempty%22%60%0ADepositContainers%20%5B%5D%5C*DepositContainer%20%60protobuf%3A%22bytes%2C5%2Crep%2Cname%3Ddeposit_containers%2Cjson%3DdepositContainers%2Cproto3%22%20json%3A%22deposit_containers%2Comitempty%22%60%0A%7D%0A%0Atype%20LatestETH1Data%20struct%20%7B%0Astate%20protoimpl.MessageState%0AsizeCache%20protoimpl.SizeCache%0AunknownFields%20protoimpl.UnknownFields%0A%0ABlockHeight%20uint64%20%60protobuf%3A%22varint%2C2%2Copt%2Cname%3Dblock_height%2Cjson%3DblockHeight%2Cproto3%22%20json%3A%22block_height%2Comitempty%22%60%0ABlockTime%20uint64%20%60protobuf%3A%22varint%2C3%2Copt%2Cname%3Dblock_time%2Cjson%3DblockTime%2Cproto3%22%20json%3A%22block_time%2Comitempty%22%60%0ABlockHash%20%5B%5Dbyte%20%60protobuf%3A%22bytes%2C4%2Copt%2Cname%3Dblock_hash%2Cjson%3DblockHash%2Cproto3%22%20json%3A%22block_hash%2Comitempty%22%60%0ALastRequestedBlock%20uint64%20%60protobuf%3A%22varint%2C5%2Copt%2Cname%3Dlast_requested_block%2Cjson%3DlastRequestedBlock%2Cproto3%22%20json%3A%22last_requested_block%2Comitempty%22%60%0A%7D%0A%0A%60%60%60%0A%0ABeaconBlockAltair%20from%20%5Blighthouse%5D(https%3A%2F%2Fgithub.com%2Fsigp%2Flighthouse%2Fblob%2Fstable%2Fconsensus%2Ftypes%2Fsrc%2Fbeacon_block.rs%23L407)%20rust%0A%0A%60%60%60%0A%0A%20%20%20%20%2F%2F%2F%20Return%20an%20Altair%20block%20where%20the%20block%20has%20maximum%20size.%0A%20%20%20%20pub%20fn%20full(spec%3A%20%26ChainSpec)%20-%3E%20Self%20%7B%0A%20%20%20%20%20%20%20%20let%20base_block%3A%20BeaconBlockBase%3C_%2C%20Payload%3E%20%3D%20BeaconBlockBase%3A%3Afull(spec)%3B%0A%20%20%20%20%20%20%20%20let%20sync_aggregate%20%3D%20SyncAggregate%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20sync_committee_signature%3A%20AggregateSignature%3A%3Aempty()%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20sync_committee_bits%3A%20BitVector%3A%3Adefault()%2C%0A%20%20%20%20%20%20%20%20%7D%3B%0A%20%20%20%20%20%20%20%20BeaconBlockAltair%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20slot%3A%20spec.genesis_slot%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20proposer_index%3A%200%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20parent_root%3A%20Hash256%3A%3Azero()%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20state_root%3A%20Hash256%3A%3Azero()%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20body%3A%20BeaconBlockBodyAltair%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20proposer_slashings%3A%20base_block.body.proposer_slashings%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20attester_slashings%3A%20base_block.body.attester_slashings%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20attestations%3A%20base_block.body.attestations%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20deposits%3A%20base_block.body.deposits%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20voluntary_exits%3A%20base_block.body.voluntary_exits%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20sync_aggregate%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20randao_reveal%3A%20Signature%3A%3Aempty()%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20eth1_data%3A%20Eth1Data%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20deposit_root%3A%20Hash256%3A%3Azero()%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20block_hash%3A%20Hash256%3A%3Azero()%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20deposit_count%3A%200%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7D%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20graffiti%3A%20Graffiti%3A%3Adefault()%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20_phantom%3A%20PhantomData%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20%7D%2C%0A%20%20%20%20%20%20%20%20%7D%0A%20%20%20%20%7D%0A%0A%7D%0A%0A%60%60%60%0A%0A%23%23%23%23%20Beacon%20State%20Data%20Structures%20from%20Prysm%0A%0A%60%60%60%0A%0Atype%20BeaconState%20interface%20%7B%0ASpecParametersProvider%0AReadOnlyBeaconState%0AWriteOnlyBeaconState%0ACopy()%20BeaconState%0AHashTreeRoot(ctx%20context.Context)%20(%5B32%5Dbyte%2C%20error)%0AFutureForkStub%0AStateProver%0A%7D%0A%0A%60%60%60%0A%0A%60%60%60%0A%0Atype%20ReadOnlyBeaconState%20interface%20%7B%0AReadOnlyBlockRoots%0AReadOnlyStateRoots%0AReadOnlyRandaoMixes%0AReadOnlyEth1Data%0AReadOnlyValidators%0AReadOnlyBalances%0AReadOnlyCheckpoint%0AReadOnlyAttestations%0AToProtoUnsafe()%20interface%7B%7D%0AToProto()%20interface%7B%7D%0AGenesisTime()%20uint64%0AGenesisValidatorsRoot()%20%5B%5Dbyte%0ASlot()%20types.Slot%0AFork()%20*ethpb.Fork%0ALatestBlockHeader()%20*ethpb.BeaconBlockHeader%0AHistoricalRoots()%20%5B%5D%5B%5Dbyte%0ASlashings()%20%5B%5Duint64%0AFieldReferencesCount()%20map%5Bstring%5Duint64%0AMarshalSSZ()%20(%5B%5Dbyte%2C%20error)%0AIsNil()%20bool%0AVersion()%20int%0ALatestExecutionPayloadHeader()%20(interfaces.ExecutionData%2C%20error)%0A%7D%0A%0A%60%60%60%0A%0A%60%60%60%0A%0Atype%20ReadOnlyValidators%20interface%20%7B%0AValidators()%20%5B%5D*ethpb.Validator%0AValidatorAtIndex(idx%20types.ValidatorIndex)%20(*ethpb.Validator%2C%20error)%0AValidatorAtIndexReadOnly(idx%20types.ValidatorIndex)%20(ReadOnlyValidator%2C%20error)%0AValidatorIndexByPubkey(key%20%5Bfieldparams.BLSPubkeyLength%5Dbyte)%20(types.ValidatorIndex%2C%20bool)%0APubkeyAtIndex(idx%20types.ValidatorIndex)%20%5Bfieldparams.BLSPubkeyLength%5Dbyte%0ANumValidators()%20int%0AReadFromEveryValidator(f%20func(idx%20int%2C%20val%20ReadOnlyValidator)%20error)%20error%0A%7D%0A%0A%60%60%60%0A%0A%60%60%60%0A%0Atype%20ReadOnlyRandaoMixes%20interface%20%7B%0ARandaoMixes()%20%5B%5D%5B%5Dbyte%0ARandaoMixAtIndex(idx%20uint64)%20(%5B%5Dbyte%2C%20error)%0ARandaoMixesLength()%20int%0A%7D%0A%0A%60%60%60%0A%0A%60%60%60%0A%0Atype%20WriteOnlyBeaconState%20interface%20%7B%0AWriteOnlyBlockRoots%0AWriteOnlyStateRoots%0AWriteOnlyRandaoMixes%0AWriteOnlyEth1Data%0AWriteOnlyValidators%0AWriteOnlyBalances%0AWriteOnlyCheckpoint%0AWriteOnlyAttestations%0ASetGenesisTime(val%20uint64)%20error%0ASetGenesisValidatorsRoot(val%20%5B%5Dbyte)%20error%0ASetSlot(val%20types.Slot)%20error%0ASetFork(val%20*ethpb.Fork)%20error%0ASetLatestBlockHeader(val%20*ethpb.BeaconBlockHeader)%20error%0ASetHistoricalRoots(val%20%5B%5D%5B%5Dbyte)%20error%0ASetSlashings(val%20%5B%5Duint64)%20error%0AUpdateSlashingsAtIndex(idx%2C%20val%20uint64)%20error%0AAppendHistoricalRoots(root%20%5B32%5Dbyte)%20error%0ASetLatestExecutionPayloadHeader(payload%20interfaces.ExecutionData)%20error%0ASetWithdrawalQueue(val%20%5B%5D*enginev1.Withdrawal)%20error%0AAppendWithdrawal(val%20*enginev1.Withdrawal)%20error%0ASetNextWithdrawalIndex(i%20uint64)%20error%0ASetNextPartialWithdrawalValidatorIndex(i%20types.ValidatorIndex)%20error%0A%7D%0A%0A%60%60%60%0A%0A%60%60%60%0A%0Atype%20WriteOnlyValidators%20interface%20%7B%0ASetValidators(val%20%5B%5D*ethpb.Validator)%20error%0AApplyToEveryValidator(f%20func(idx%20int%2C%20val%20*ethpb.Validator)%20(bool%2C%20*ethpb.Validator%2C%20error))%20error%0AUpdateValidatorAtIndex(idx%20types.ValidatorIndex%2C%20val%20*ethpb.Validator)%20error%0AAppendValidator(val%20%5C*ethpb.Validator)%20error%0A%7D%0A%0A%60%60%60%0A%0A%60%60%60%0A%0Atype%20WriteOnlyRandaoMixes%20interface%20%7B%0ASetRandaoMixes(val%20%5B%5D%5B%5Dbyte)%20error%0AUpdateRandaoMixesAtIndex(idx%20uint64%2C%20val%20%5B%5Dbyte)%20error%0A%7D%0A%0A%60%60%60%0A%0A%5BValidator%5D(https%3A%2F%2Fpkg.go.dev%2Fgithub.com%2Fprysmaticlabs%2Fprysm%2Fv3%40v3.1.2%2Fproto%2Fprysm%2Fv1alpha1%23Validator)%20information%0A%0A%60%60%60%0A%0Atype%20Validator%20struct%20%7B%0APublicKey%20%5B%5Dbyte%20%60protobuf%3A%22bytes%2C1%2Copt%2Cname%3Dpublic_key%2Cjson%3DpublicKey%2Cproto3%22%20json%3A%22public_key%2Comitempty%22%20spec-name%3A%22pubkey%22%20ssz-size%3A%2248%22%60%0AWithdrawalCredentials%20%5B%5Dbyte%20%60%60%2F*%20138-byte%20string%20literal%20not%20displayed%20*%2F%0A%20EffectiveBalance%20%20%20%20%20%20%20%20%20%20%20uint64%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%60protobuf%3A%22varint%2C3%2Copt%2Cname%3Deffective_balance%2Cjson%3DeffectiveBalance%2Cproto3%22%20json%3A%22effective_balance%2Comitempty%22%60%0A%20Slashed%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20bool%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%60protobuf%3A%22varint%2C4%2Copt%2Cname%3Dslashed%2Cproto3%22%20json%3A%22slashed%2Comitempty%22%60%0A%20ActivationEligibilityEpoch%20github_com_prysmaticlabs_prysm_v3_consensus_types_primitives.Epoch%60%60%20%2F_%20221-byte%20string%20literal%20not%20displayed%20_%2F%0AActivationEpoch%20github*com_prysmaticlabs_prysm_v3_consensus_types_primitives.Epoch%20%60%2F*%20186-byte%20string%20literal%20not%20displayed%20_%2F%0AExitEpoch%20github_com_prysmaticlabs_prysm_v3_consensus_types_primitives.Epoch%60%20%2F_%20168-byte%20string%20literal%20not%20displayed%20_%2F%0AWithdrawableEpoch%20github_com_prysmaticlabs_prysm_v3_consensus_types_primitives.Epoch%20%60%60%20%2F_%20192-byte%20string%20literal%20not%20displayed%20%5C_%2F%0A%2F%2F%20contains%20filtered%20or%20unexported%20fields%0A%7D%0A%0A%60%60%60%0A%0A%23%23%23%23%20%5Bweb3signer_types%20from%20prysm%5D(https%3A%2F%2Fgithub.com%2Fprysmaticlabs%2Fprysm%2Fblob%2Fdevelop%2Fvalidator%2Fkeymanager%2Fremote-web3signer%2Fv1%2Fweb3signer_types.go%23L107)%0A%0A%60%60%60%0A%0A%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%0A%2F%2F%20sub%20properties%20of%20Sign%20Requests%20%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%0A%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%0A%0A%2F%2F%20ForkInfo%20a%20sub%20property%20object%20of%20the%20Sign%20request%0Atype%20ForkInfo%20struct%20%7B%0AFork%20%5C*Fork%20%60json%3A%22fork%22%60%0AGenesisValidatorsRoot%20hexutil.Bytes%20%60json%3A%22genesis_validators_root%22%60%0A%7D%0A%0A%2F%2F%20Fork%20a%20sub%20property%20of%20ForkInfo.%0Atype%20Fork%20struct%20%7B%0APreviousVersion%20hexutil.Bytes%20%60json%3A%22previous_version%22%60%0ACurrentVersion%20hexutil.Bytes%20%60json%3A%22current_version%22%60%0AEpoch%20string%20%60json%3A%22epoch%22%60%20%2F_uint64_%2F%0A%7D%0A%0A%2F%2F%20AggregationSlot%20a%20sub%20property%20of%20AggregationSlotSignRequest.%0Atype%20AggregationSlot%20struct%20%7B%0ASlot%20string%20%60json%3A%22slot%22%60%0A%7D%0A%0A%2F%2F%20AggregateAndProof%20a%20sub%20property%20of%20AggregateAndProofSignRequest.%0Atype%20AggregateAndProof%20struct%20%7B%0AAggregatorIndex%20string%20%60json%3A%22aggregator_index%22%60%20%2F_%20uint64%20_%2F%0AAggregate%20_Attestation%20%60json%3A%22aggregate%22%60%0ASelectionProof%20hexutil.Bytes%20%60json%3A%22selection_proof%22%60%20%2F_%2096%20bytes%20_%2F%0A%7D%0A%0A%2F%2F%20Attestation%20a%20sub%20property%20of%20AggregateAndProofSignRequest.%0Atype%20Attestation%20struct%20%7B%0AAggregationBits%20hexutil.Bytes%20%60json%3A%22aggregation_bits%22%60%20%2F_hex%20bitlist_%2F%0AData%20%5C*AttestationData%20%60json%3A%22data%22%60%0ASignature%20hexutil.Bytes%20%60json%3A%22signature%22%60%0A%7D%0A%0A%2F%2F%20AttestationData%20a%20sub%20property%20of%20Attestation.%0Atype%20AttestationData%20struct%20%7B%0ASlot%20string%20%60json%3A%22slot%22%60%20%2F_%20uint64%20_%2F%0AIndex%20string%20%60json%3A%22index%22%60%20%2F_%20uint64%20_%2F%20%2F%2F%20Prysm%20uses%20CommitteeIndex%20but%20web3signer%20uses%20index.%0ABeaconBlockRoot%20hexutil.Bytes%20%60json%3A%22beacon_block_root%22%60%0ASource%20*Checkpoint%20%60json%3A%22source%22%60%0ATarget%20*Checkpoint%20%60json%3A%22target%22%60%0A%7D%0A%0A%2F%2F%20Checkpoint%20a%20sub%20property%20of%20AttestationData.%0Atype%20Checkpoint%20struct%20%7B%0AEpoch%20string%20%60json%3A%22epoch%22%60%0ARoot%20string%20%60json%3A%22root%22%60%0A%7D%0A%0A%60%60%60%0A%0A%5Battestation.proto%20from%20prysm%20(Message%20Structure)%5D(https%3A%2F%2Fgithub.com%2Fprysmaticlabs%2Fprysm%2Fblob%2Fdevelop%2Fproto%2Fprysm%2Fv1alpha1%2Fattestation.proto)%0A%0A%60%60%60%0A%0Amessage%20AttestationData%20%7B%0A%2F%2F%20Attestation%20data%20includes%20information%20on%20Casper%20the%20Friendly%20Finality%20Gadget's%20votes%0A%2F%2F%20See%3A%20https%3A%2F%2Farxiv.org%2Fpdf%2F1710.09437.pdf%0A%0A%20%20%20%20%2F%2F%20Slot%20of%20the%20attestation%20attesting%20for.%0A%20%20%20%20uint64%20slot%20%3D%201%20%5B(ethereum.eth.ext.cast_type)%20%3D%20%22github.com%2Fprysmaticlabs%2Fprysm%2Fv3%2Fconsensus-types%2Fprimitives.Slot%22%5D%3B%0A%0A%20%20%20%20%2F%2F%20The%20committee%20index%20that%20submitted%20this%20attestation.%0A%20%20%20%20uint64%20committee_index%20%3D%202%20%20%5B(ethereum.eth.ext.cast_type)%20%3D%20%22github.com%2Fprysmaticlabs%2Fprysm%2Fv3%2Fconsensus-types%2Fprimitives.CommitteeIndex%22%5D%3B%0A%0A%20%20%20%20%2F%2F%2032%20byte%20root%20of%20the%20LMD%20GHOST%20block%20vote.%0A%20%20%20%20bytes%20beacon_block_root%20%3D%203%20%5B(ethereum.eth.ext.ssz_size)%20%3D%20%2232%22%5D%3B%0A%0A%20%20%20%20%2F%2F%20The%20most%20recent%20justified%20checkpoint%20in%20the%20beacon%20state%0A%20%20%20%20Checkpoint%20source%20%3D%204%3B%0A%0A%20%20%20%20%2F%2F%20The%20checkpoint%20attempting%20to%20be%20justified%20for%20the%20current%20epoch%20and%20its%20epoch%20boundary%20block%0A%20%20%20%20Checkpoint%20target%20%3D%205%3B%0A%0A%7D%0A%0A%60%60%60%0A%0A%23%23%23%20Appendix%20F%3A%20Sample%20Data%0A%0A%23%23%23%23%20Epoch%20Data%20for%20167040%0A%0AFollowing%20is%20the%20Epoch%20Data%20for%20167040%0AIt%20can%20be%20retrieved%20from%20%5Bhere%5D(https%3A%2F%2Fbeaconcha.in%2Fapi%2Fv1%2Fdocs%2Findex.html%23%2FEpoch%2Fget_api_v1_epoch__epoch_)%20or%20by%20using%20this%20curl%20command%0A%0A%60curl%20-X%20'GET'%20%5C%0A%20%20'https%3A%2F%2Fbeaconcha.in%2Fapi%2Fv1%2Fepoch%2F167040'%20%5C%0A%20%20-H%20'accept%3A%20application%2Fjson'%60%0A%0AResponse%0A%0A%60%60%60%0A%0A%7B%0A%22status%22%3A%20%22OK%22%2C%0A%22data%22%3A%20%7B%0A%22attestationscount%22%3A%203457%2C%0A%22attesterslashingscount%22%3A%200%2C%0A%22averagevalidatorbalance%22%3A%2033899775551%2C%0A%22blockscount%22%3A%2032%2C%0A%22depositscount%22%3A%200%2C%0A%22eligibleether%22%3A%2015596542000000000%2C%0A%22epoch%22%3A%20167040%2C%0A%22finalized%22%3A%20true%2C%0A%22globalparticipationrate%22%3A%200.9963188171386719%2C%0A%22missedblocks%22%3A%200%2C%0A%22orphanedblocks%22%3A%200%2C%0A%22proposedblocks%22%3A%2032%2C%0A%22proposerslashingscount%22%3A%200%2C%0A%22scheduledblocks%22%3A%200%2C%0A%22totalvalidatorbalance%22%3A%2016522615004645864%2C%0A%22validatorscount%22%3A%20487396%2C%0A%22voluntaryexitscount%22%3A%200%2C%0A%22votedether%22%3A%2015539128000000000%0A%7D%0A%7D%0A%0A%60%60%60%0A%0A%23%23%23%23%20Block%20Data%20for%20Slot%205%2C330%2C592%0A%0AFollowing%20is%20the%20Block%20Data%20for%20Slot%205%2C330%2C592%0AIt%20can%20be%20retrieved%20from%20%5Bhere%5D(https%3A%2F%2Fbeaconcha.in%2Fapi%2Fv1%2Fdocs%2Findex.html%23%2FBlock%2Fget_api_v1_block__slotOrHash_)%20or%20by%20using%20this%20curl%20command%0A%0A%60curl%20-X%20'GET'%20'https%3A%2F%2Fbeaconcha.in%2Fapi%2Fv1%2Fblock%2F5330592'%20-H%20'accept%3A%20application%2Fjson'%60%0A%0AResponse%0A%0A%60%60%60%0A%0A%7B%0A%22status%22%3A%20%22OK%22%2C%0A%22data%22%3A%20%7B%0A%22attestationscount%22%3A%20126%2C%0A%22attesterslashingscount%22%3A%200%2C%0A%22blockroot%22%3A%20%220xaebe891086c79ab79b325f474dc1150f1223e567337bff815cc318f14c64c233%22%2C%0A%22depositscount%22%3A%200%2C%0A%22epoch%22%3A%20166581%2C%0A%22eth1data_blockhash%22%3A%20%220xd346f84ffe7c600b7714d6411c8bea988d9d64dbdb432f26db58e72946337954%22%2C%0A%22eth1data_depositcount%22%3A%20498785%2C%0A%22eth1data_depositroot%22%3A%20%220x9a5603a34aa60f299384679bf4bfc267e99b68278a81f343bde8cb5650bf1d60%22%2C%0A%22exec_base_fee_per_gas%22%3A%2012376913565%2C%0A%22exec_block_hash%22%3A%20%220x26239efe09f51b24bdf7c518b1aa925a3b0b6453682408ec8a5c906d5038a6e7%22%2C%0A%22exec_block_number%22%3A%2016163905%2C%0A%22exec_extra_data%22%3A%20%220x496c6c756d696e61746520446d6f63726174697a6520447374726962757465%22%2C%0A%22exec_fee_recipient%22%3A%20%220xdafea492d9c6733ae3d56b7ed1adb60692c98bc5%22%2C%0A%22exec_gas_limit%22%3A%2030000000%2C%0A%22exec_gas_used%22%3A%209901267%2C%0A%22exec_logs_bloom%22%3A%20%220x8c21554815843b4084a999b2901917a52c58004a82a8440d94919a77f9241181388a0c404f000a8c0321ab024800bf899610e60ec801fb4b0352e34f147626192648619065381ded6b9d92bcd0861120adc1ec01064e7a016ea91c478d01b81316462d2d622a60010bc0139f6fb8ccf200499c0e211a85c042047d1601aa0c2ea2833902a2a3091528492dad09f6dc064529c455d328413b78c680c4699815ac9a91610f19e66542edca45a10518ee65b02cf02241a124232d5958b6004cd0a5846c5703d00b5e4d8353221015f7d38c1429074e34aaa11f3804f933082860c401152088251479918297a1a9237d9ac35539f6d069cca07a005819494a653913%22%2C%0A%22exec_parent_hash%22%3A%20%220x06746d5ff105e96a1b8961c2490c0261b474604fbcbf934e86295c0030e26ce2%22%2C%0A%22exec_random%22%3A%20%220xc2861c72cf4d34b37ec73519dbc20b690742b5cc119ed3738f1dd67d8ca52723%22%2C%0A%22exec_receipts_root%22%3A%20%220x33cdf5c6e03dd341f282d02d3c354c2361a6212692b2a3c06b520397045313f4%22%2C%0A%22exec_state_root%22%3A%20%220x517304bade8d83337c9a52f8ceeb13f924b64486b3b8033f7c348c176922104a%22%2C%0A%22exec_timestamp%22%3A%201670791127%2C%0A%22exec_transactions_count%22%3A%20139%2C%0A%22graffiti%22%3A%20%220x0000000000000000000000000000000000000000000000000000000000000000%22%2C%0A%22graffiti_text%22%3A%20%22%22%2C%0A%22parentroot%22%3A%20%220x0cab36616bbcbbc67c343ddce00241c27d0df2c367c5fa82fc7c0fdf0ed37405%22%2C%0A%22proposer%22%3A%204345%2C%0A%22proposerslashingscount%22%3A%200%2C%0A%22randaoreveal%22%3A%20%220x83950cb64781aff91f4bd14aa6abb0f5fdb7e08e4e81c264f0754c93d7672c4a9615de196491fdb53eafdeb8f49e9cf515f1bd3dc05bb5dc0e2dd8bff5a8d783b503e3385e80b61485f0ddac1caa9361132a863db84e7e234df5815e6908e4e7%22%2C%0A%22signature%22%3A%20%220x84865a9480ae6313b0e5fcadfa294b35f5963e06c66ad1c7613dc081e9700c07f82a2583ba4b62b2483b4a1b9d49aafe0690f22fcf4d0072f9f44a5ce3067ef4fda560d171001cc6bf5dc84e09d9055d92894b86b27695c297f25530cd8db7a0%22%2C%0A%22slot%22%3A%205330592%2C%0A%22stateroot%22%3A%20%220x9e7e40d844c3b229cd9497d662a6d94276d285945073849995aba93c7e73cfe7%22%2C%0A%22status%22%3A%20%221%22%2C%0A%22syncaggregate_bits%22%3A%20%220xdffffffffffffffffffffffffffffff7fffffffffffffffffffffffffffffffffffffffffffffffffffffffdfffffffffffffffdffffffffffffffffffffffff%22%2C%0A%22syncaggregate_participation%22%3A%200.9921875%2C%0A%22syncaggregate_signature%22%3A%20%220x95332c55790018eed3d17eada01cb4045348d09137505bc8697eeedaa3800a830ee2c138251850a9577f62a5488419ef0a722579156a177fb3a147017f1077af5d778f46a4cdf815fc450129d135fe5286e16df68333592e4aa45821bde780dd%22%2C%0A%22voluntaryexitscount%22%3A%200%2C%0A%22votes%22%3A%2019227%0A%7D%0A%7D%0A%0A%60%60%60%0A%0A%23%23%23%23%20Execution%20Block%20for%2016163905%0A%0AFollowing%20is%20the%20execution%20block%20data%20for%2016163905%0AIt%20can%20be%20retrieved%20from%20%5Bhere%5D(https%3A%2F%2Fbeaconcha.in%2Fapi%2Fv1%2Fdocs%2Findex.html%23%2FExecution%2Fget_api_v1_execution_block__blockNumber_)%20or%20by%20using%20this%20curl%20command%0A%0A%60curl%20-X%20'GET'%20'https%3A%2F%2Fbeaconcha.in%2Fapi%2Fv1%2Fexecution%2Fblock%2F16163905'%20%20-H%20'accept%3A%20application%2Fjson'%60%0A%0AResult%0A%0A%60%60%60%0A%0A%7B%0A%22status%22%3A%20%22OK%22%2C%0A%22data%22%3A%20%5B%0A%7B%0A%22blockHash%22%3A%20%220x26239efe09f51b24bdf7c518b1aa925a3b0b6453682408ec8a5c906d5038a6e7%22%2C%0A%22blockNumber%22%3A%2016163905%2C%0A%22timestamp%22%3A%201670791127%2C%0A%22blockReward%22%3A%2037343826945103810%2C%0A%22blockMevReward%22%3A%2037083911760238810%2C%0A%22producerReward%22%3A%2037083911760238810%2C%0A%22feeRecipient%22%3A%20%220xdafea492d9c6733ae3d56b7ed1adb60692c98bc5%22%2C%0A%22gasLimit%22%3A%2030000000%2C%0A%22gasUsed%22%3A%209901267%2C%0A%22baseFee%22%3A%2012376913565%2C%0A%22txCount%22%3A%20139%2C%0A%22internalTxCount%22%3A%2054%2C%0A%22uncleCount%22%3A%200%2C%0A%22parentHash%22%3A%20%220x06746d5ff105e96a1b8961c2490c0261b474604fbcbf934e86295c0030e26ce2%22%2C%0A%22uncleHash%22%3A%20%220x1dcc4de8dec75d7aab85b567b6ccd41ad312451b948a7413f0a142fd40d49347%22%2C%0A%22difficulty%22%3A%200%2C%0A%22posConsensus%22%3A%20%7B%0A%22executionBlockNumber%22%3A%2016163905%2C%0A%22proposerIndex%22%3A%204345%2C%0A%22slot%22%3A%205330592%2C%0A%22epoch%22%3A%20166581%2C%0A%22finalized%22%3A%20true%0A%7D%2C%0A%22relay%22%3A%20%7B%0A%22tag%22%3A%20%22flashbots-relay%22%2C%0A%22builderPubkey%22%3A%20%220x81beef03aafd3dd33ffd7deb337407142c80fea2690e5b3190cfc01bde5753f28982a7857c96172a75a234cb7bcb994f%22%2C%0A%22producerFeeRecipient%22%3A%20%220x60987e0d8b5e0095869ca6f0e642828e3f258bb5%22%0A%7D%2C%0A%22consensusAlgorithm%22%3A%20%22pos%22%0A%7D%0A%5D%0A%7D%0A%0A%60%60%60%0A%0A%23%23%23%23%20Sync%20Committee%20(latest)%0A%0AFollowing%20is%20a%20sample%20Sync%20Committee%0AIt%20can%20be%20retrieved%20from%20%5Bhere%5D(https%3A%2F%2Fbeaconcha.in%2Fapi%2Fv1%2Fdocs%2Findex.html%23%2FSyncCommittee%2Fget_api_v1_sync_committee__period_)%20or%20by%20using%20this%20curl%20command%0A%0A%60curl%20-X%20'GET'%20'https%3A%2F%2Fbeaconcha.in%2Fapi%2Fv1%2Fsync_committee%2Flatest'%20-H%20'accept%3A%20application%2Fjson'%60%0A%0AAbbrieviated%20Result%0A%0A%60%60%60%0A%0A%7B%0A%22status%22%3A%20%22OK%22%2C%0A%22data%22%3A%20%7B%0A%22end_epoch%22%3A%20167167%2C%0A%22period%22%3A%20652%2C%0A%22start_epoch%22%3A%20166912%2C%0A%22validators%22%3A%20%5B%0A328781%2C%0A184949%2C%0A...%0A%5D%0A%7D%0A%7D%0A%0A%60%60%60%0A%0A%3Cdetails%3E%0A%3Csummary%3EFull%20Result%3C%2Fsummary%3E%0A%0A%60%60%60%0A%0A%7B%0A%22status%22%3A%20%22OK%22%2C%0A%22data%22%3A%20%7B%0A%22end_epoch%22%3A%20167167%2C%0A%22period%22%3A%20652%2C%0A%22start_epoch%22%3A%20166912%2C%0A%22validatorsdetails%3E%0A%0A%23%23%23%20Appendix%20G%3A%20Storing%20minimal%20information%0A%0A%23%23%23%23%20Minimal%20footprint%0A%0A%23%23%23%23%20Header%20Checkpoints%0A%0A%23%23%23%23%23%20Inclusion%20Proof%0A%0A%23%23%23%23%23%20ZKP%20for%20Checkpoints%0A%0A%23%23%23%23%20Proving%0A%0A%23%23%23%23%20Verification%0A%0A%23%23%23%20Appendix%20H%3A%20Validating%20Header%0A%0A%23%23%23%23%20Tracking%20Validators%0A%0A%23%23%23%23%23%20ZKP%20for%20validator%20change%0A%0A%23%23%23%23%20Verifying%20Signatures%0A%0A%23%23%23%23%23%20ECDSA%0A%0A%23%23%23%23%23%20RSA%0A%0A%23%23%23%23%23%20EdDSA%0A%0A%23%23%23%23%20Pure%20on-chain%20implementation%20and%20costs%0A%0A%23%23%23%23%23%23%20ZKP%20for%20EdDSA%0A%0A%23%23%23%23%23%20BLS12-381%20and%20variants%0A%0A%23%23%23%23%23%23%20Pure%20on-chain%20implementation%20and%20costs%0A%0A%23%23%23%23%23%23%20ZKP%20for%20BLS12-381%0A%0A%23%23%23%20Appendix%20I%3A%20Cost%20analysis%20and%20benchmark%0A%0A%23%23%23%20Appendix%20J%3A%20Sync%20Committe%20Creation%20and%20Retrieval%0A%0A**Sync%20Committee%20Configuration**%0A%0A%60EPOCHS_PER_SYNC_COMMITTEE_PERIOD%60%20is%20set%20in%20%5Bconfig.go%5D(https%3A%2F%2Fgithub.com%2Fprysmaticlabs%2Fprysm%2Fblob%2Fdevelop%2Fconfig%2Fparams%2Fconfig.go%23L185)%20currently%20255%20epochs%20per%20synch%20comittee%20(approx%2027%20hrs)%20for%20Ethreum%20Mainnet.%0A%0A**Sync%20Committee%20Update%20Process**%0A%0A-%20%5Bbeacon-chain%2Fblockchain%5D(https%3A%2F%2Fgithub.com%2Fprysmaticlabs%2Fprysm%2Ftree%2Fdevelop%2Fbeacon-chain%2Fblockchain)%0A%20%20-%20%5Bprocess_block.go%5D(https%3A%2F%2Fgithub.com%2Fprysmaticlabs%2Fprysm%2Fblob%2Fdevelop%2Fbeacon-chain%2Fblockchain%2Fprocess_block.go)%3A%20has%20function%20%60onBlock%60%20which%20is%20called%20when%20a%20gossip%20block%20is%20received.%20It%20also%20has%20function%20%60handleEpochBoundary%60%20which%20calls%20%60ProcessSlots%60%20in%20%5Bbeacon-chain%2Fcore%2Ftransition%5D(https%3A%2F%2Fgithub.com%2Fprysmaticlabs%2Fprysm%2Ftree%2Fdevelop%2Fbeacon-chain%2Fcore%2Ftransition)%20and%20calls%20function%20%60UpdateCommitteeCache%60%20in%20%5Bbeacon-chain%2Fcore%2Fhelpers%5D(https%3A%2F%2Fgithub.com%2Fprysmaticlabs%2Fprysm%2Ftree%2Fdevelop%2Fbeacon-chain%2Fcore%2Fhelpers)%0A-%20%5Bbeacon-chain%2Fcore%2Ftransition%5D(https%3A%2F%2Fgithub.com%2Fprysmaticlabs%2Fprysm%2Ftree%2Fdevelop%2Fbeacon-chain%2Fcore%2Ftransition)%0A%20%20-%20%5Btransition.go%5D(https%3A%2F%2Fgithub.com%2Fprysmaticlabs%2Fprysm%2Fblob%2Fdevelop%2Fbeacon-chain%2Fcore%2Ftransition%2Ftransition.go)%3A%20implements%20the%20whole%20state%20transition%20function%20which%20consists%20of%20per%20slot%2C%20per-epoch%20transitions.%20function%20%60ProcessSlots%60%20calls%20%60ProcessEpoch%60%20in%20%5Bbeacon-chain%2Fcore%2Faltair%2Ftransition.go%5D(%3C(%253Chttps%3A%2F%2Fgithub.com%2Fprysmaticlabs%2Fprysm%2Fblob%2Fdevelop%2Fbeacon-chain%2Fcore%2Faltair%2Ftransition.go)%253E%3E)%0A-%20%5Bbeacon-chain%2Fcore%2Faltair%5D(https%3A%2F%2Fgithub.com%2Fprysmaticlabs%2Fprysm%2Ftree%2Fdevelop%2Fbeacon-chain%2Fcore%2Faltair)%0A%20%20-%20%5Btransition.go%5D(https%3A%2F%2Fgithub.com%2Fprysmaticlabs%2Fprysm%2Fblob%2Fdevelop%2Fbeacon-chain%2Fcore%2Faltair%2Ftransition.go)%3A%20includes%20function%20%60ProcessEpoch%60%20which%20calls%20%60ProcessSyncCommitteeUpdates%60%20in%20%5Bepoch_spec.go%5D(https%3A%2F%2Fgithub.com%2Fprysmaticlabs%2Fprysm%2Fblob%2Fdevelop%2Fbeacon-chain%2Fcore%2Faltair%2Fepoch_spec.go)%0A%20%20-%20%5Bepoch_spec.go%5D(https%3A%2F%2Fgithub.com%2Fprysmaticlabs%2Fprysm%2Fblob%2Fdevelop%2Fbeacon-chain%2Fcore%2Faltair%2Fepoch_spec.go)%3A%20includes%20function%20%60ProcessSyncCommitteeUpdates%60%20which%20calls%20%60NextSyncCommittee%60%20it%20also%20persists%20beacon%20state%20syncCommittee%20by%20calling%20%60beaconState.SetNextSyncCommittee(nextSyncCommittee)%60%20in%20%5Bsetters_sync_committee.go%5D(https%3A%2F%2Fgithub.com%2Fprysmaticlabs%2Fprysm%2Fblob%2Fdevelop%2Fbeacon-chain%2Fstate%2Fstate-native%2Fsetters_sync_committee.go)%0A%20%20-%20%5Bsync_committee.go%5D(https%3A%2F%2Fgithub.com%2Fprysmaticlabs%2Fprysm%2Fblob%2Fdevelop%2Fbeacon-chain%2Fcore%2Faltair%2Fsync_committee.go)%3A%20includes%20function%20%60NextSyncCommittee%60%20which%20calls%20%60NextSyncCommittee%60%20to%20return%20the%20sync%20committee%20indices%2C%20with%20possible%20duplicates%2C%20for%20the%20next%20sync%20committee.%0A%20%20-%20%5Bblock.go%5D(https%3A%2F%2Fgithub.com%2Fprysmaticlabs%2Fprysm%2Fblob%2Fdevelop%2Fbeacon-chain%2Fcore%2Faltair%2Fblock.go)%3A%20includes%20function%20%60VerifySyncCommitteeSig%60%0A-%20%5Bbeacon-chain%2Fcore%2Fhelpers%5D(https%3A%2F%2Fgithub.com%2Fprysmaticlabs%2Fprysm%2Ftree%2Fdevelop%2Fbeacon-chain%2Fcore%2Fhelpers)%0A%20%20-%20%5Bbeacon_committee.go%5D(https%3A%2F%2Fgithub.com%2Fprysmaticlabs%2Fprysm%2Fblob%2Fdevelop%2Fbeacon-chain%2Fcore%2Fhelpers%2Fbeacon_committee.go)%20has%20function%20%60UpdateCommitteeCache%60%20which%20gets%20called%20at%20the%20beginning%20of%20every%20epoch%20to%20cache%20the%20committee%20shuffled%20indices%20list%20with%20committee%20index%20and%20epoch%20number.%20It%20caches%20the%20shuffled%20indices%20for%20current%20epoch%20and%20next%20epoch.%20it%20calls%20%60UpdatePositionsInCommittee%60%20in%20%5Bsync_committee.go%5D(https%3A%2F%2Fgithub.com%2Fprysmaticlabs%2Fprysm%2Fblob%2Fdevelop%2Fbeacon-chain%2Fcache%2Fsync_committee.go)%0A-%20%5Bbeacon-chain%2Fcache%5D(https%3A%2F%2Fgithub.com%2Fprysmaticlabs%2Fprysm%2Ftree%2Fdevelop%2Fbeacon-chain%2Fcache)%0A%20%20-%20%5Bsync_committee.go%5D(https%3A%2F%2Fgithub.com%2Fprysmaticlabs%2Fprysm%2Fblob%2Fdevelop%2Fbeacon-chain%2Fcache%2Fsync_committee.go)%3A%20has%20function%20%60UpdatePositionsInCommittee%60%20which%20updates%20caching%20of%20validators%20position%20in%20sync%20committee%20in%20respect%20to%20current%20epoch%20and%20next%20epoch.%20This%20should%20be%20called%20when%20%60current_sync_committee%60%20and%20%60next_sync_committee%60%20change%20and%20that%20happens%20every%20%60EPOCHS_PER_SYNC_COMMITTEE_PERIOD%60.%0A%0A**Sync%20Committee%20Retrieval**%0AgRPC%20and%20API%20methods%0A%0A-%20%5Bbeacon-chain%2Frpc%5D(https%3A%2F%2Fgithub.com%2Fprysmaticlabs%2Fprysm%2Ftree%2Fdevelop%2Fbeacon-chain%2Frpc)%0A%20%20-%20%5Bprysm%2Fv1alpha1%5D(https%3A%2F%2Fgithub.com%2Fprysmaticlabs%2Fprysm%2Ftree%2Fdevelop%2Fbeacon-chain%2Frpc%2Fprysm%2Fv1alpha1)%0A%20%20%20%20-%20%5Bvalidator%5D(https%3A%2F%2Fgithub.com%2Fprysmaticlabs%2Fprysm%2Ftree%2Fdevelop%2Fbeacon-chain%2Frpc%2Fprysm%2Fv1alpha1%2Fvalidator)%0A%20%20%20%20%20%20-%20%5Bassignments.go%5D(https%3A%2F%2Fgithub.com%2Fprysmaticlabs%2Fprysm%2Fblob%2Fdevelop%2Fbeacon-chain%2Frpc%2Fprysm%2Fv1alpha1%2Fvalidator%2Fassignments.go)%3A%20has%20functions%20%60GetDuties%60%20and%20%60StreamDuties%60%20which%20calls%20function%20%60duties%60%20to%20compute%20the%20validator%20duties%20from%20the%20head%20state's%20corresponding%20epoch%20for%20validators%20public%20key%20%2F%20indices%20requested.%0A%0Awhich%20%5Bmanages%20sync%20committee%20duties%5D(https%3A%2F%2Fgithub.com%2Fprysmaticlabs%2Fprysm%2Fblob%2Fdevelop%2Fbeacon-chain%2Frpc%2Fprysm%2Fv1alpha1%2Fvalidator%2Fassignments.go%23L213)%20every%20%60EPOCHS_PER_SYNC_COMMITTEE_PERIOD%20-%201%60%20which%20is%20set%20in%20%5Bconfig.go%5D(https%3A%2F%2Fgithub.com%2Fprysmaticlabs%2Fprysm%2Fblob%2Fdevelop%2Fconfig%2Fparams%2Fconfig.go%23L185)%20currently%20255%20epochs%20per%20synch%20comittee%20(approx%2027%20hrs)%20for%20Ethreum%20Mainnet.%0A%0A%5BregisterSyncSubnetNextPeriod%5D(https%3A%2F%2Fgithub.com%2Fprysmaticlabs%2Fprysm%2Fblob%2Fdevelop%2Fbeacon-chain%2Frpc%2Fprysm%2Fv1alpha1%2Fvalidator%2Fassignments.go%23L281)%0A%0A%60%60%60%0A%0Afunc%20registerSyncSubnetNextPeriod(s%20beaconState.BeaconState%2C%20epoch%20types.Epoch%2C%20pubKey%20%5B%5Dbyte%2C%20status%20ethpb.ValidatorStatus)%20error%20%7B%0Acommittee%2C%20err%20%3A%3D%20s.NextSyncCommittee()%0Aif%20err%20!%3D%20nil%20%7B%0Areturn%20err%0A%7D%0AsyncCommPeriod%20%3A%3D%20slots.SyncCommitteePeriod(epoch)%0AregisterSyncSubnet(epoch%2C%20syncCommPeriod%2B1%2C%20pubKey%2C%20committee%2C%20status)%0Areturn%20nil%0A%7D%0A%0A%60%60%60%0A%0A**Sync%20Committee%20Storage**%0A%0APersistence%20Mechanism%0A%0A-%20%5Bproto%5D(https%3A%2F%2Fgithub.com%2Fprysmaticlabs%2Fprysm%2Ftree%2Fdevelop%2Fproto)%0A%20%20-%20%5Beth%2Fv2%5D(https%3A%2F%2Fgithub.com%2Fprysmaticlabs%2Fprysm%2Ftree%2Fdevelop%2Fproto%2Feth%2Fv2)%0A%20%20%20%20-%20%5Bvalidator.proto%5D(https%3A%2F%2Fgithub.com%2Fprysmaticlabs%2Fprysm%2Fblob%2Fdevelop%2Fproto%2Feth%2Fv2%2Fvalidator.proto)%3A%20messages%20for%20validators%20including%20%60SyncCommitteeDuty%60%0A%20%20%20%20-%20%5Bsync_committee.proto%5D(https%3A%2F%2Fgithub.com%2Fprysmaticlabs%2Fprysm%2Fblob%2Fdevelop%2Fproto%2Feth%2Fv2%2Fsync_committee.proto)%3A%20messages%20for%20SyncCommittee%20which%20serves%20as%20committees%20to%20facilitate%20light%20client%20syncing%20to%20beacon%20chain.%0A%0A%5Bbeacon_state_mainnet.go%5D(https%3A%2F%2Fgithub.com%2Fprysmaticlabs%2Fprysm%2Fblob%2Fv3.1.2%2Fbeacon-chain%2Fstate%2Fstate-native%2Fbeacon_state_mainnet.go)%0A%0A%60%60%60%0A%0A%2F%2F%20BeaconState%20defines%20a%20struct%20containing%20utilities%20for%20the%20Ethereum%20Beacon%20Chain%20state%2C%20defining%0A%2F%2F%20getters%20and%20setters%20for%20its%20respective%20values%20and%20helpful%20functions%20such%20as%20HashTreeRoot().%0Atype%20BeaconState%20struct%20%7B%0Aversion%20int%0AgenesisTime%20uint64%0AgenesisValidatorsRoot%20%5B32%5Dbyte%0Aslot%20eth2types.Slot%0Afork%20*ethpb.Fork%0AlatestBlockHeader%20*ethpb.BeaconBlockHeader%0AblockRoots%20*customtypes.BlockRoots%0AstateRoots%20*customtypes.StateRoots%0AhistoricalRoots%20customtypes.HistoricalRoots%0Aeth1Data%20*ethpb.Eth1Data%0Aeth1DataVotes%20%5B%5D*ethpb.Eth1Data%0Aeth1DepositIndex%20uint64%0Avalidators%20%5B%5D*ethpb.Validator%0Abalances%20%5B%5Duint64%0ArandaoMixes%20*customtypes.RandaoMixes%0Aslashings%20%5B%5Duint64%0ApreviousEpochAttestations%20%5B%5D*ethpb.PendingAttestation%0AcurrentEpochAttestations%20%5B%5D*ethpb.PendingAttestation%0ApreviousEpochParticipation%20%5B%5Dbyte%0AcurrentEpochParticipation%20%5B%5Dbyte%0AjustificationBits%20bitfield.Bitvector4%0ApreviousJustifiedCheckpoint%20*ethpb.Checkpoint%0AcurrentJustifiedCheckpoint%20*ethpb.Checkpoint%0AfinalizedCheckpoint%20*ethpb.Checkpoint%0AinactivityScores%20%5B%5Duint64%0AcurrentSyncCommittee%20*ethpb.SyncCommittee%0AnextSyncCommittee%20*ethpb.SyncCommittee%0AlatestExecutionPayloadHeader%20*enginev1.ExecutionPayloadHeader%0AlatestExecutionPayloadHeaderCapella%20%5C*enginev1.ExecutionPayloadHeaderCapella%0AnextWithdrawalIndex%20uint64%0AnextWithdrawalValidatorIndex%20eth2types.ValidatorIndex%0A%0Alock%20sync.RWMutex%0AdirtyFields%20map%5Bnativetypes.FieldIndex%5Dbool%0AdirtyIndices%20map%5Bnativetypes.FieldIndex%5D%5B%5Duint64%0AstateFieldLeaves%20map%5Bnativetypes.FieldIndex%5D*fieldtrie.FieldTrie%0ArebuildTrie%20map%5Bnativetypes.FieldIndex%5Dbool%0AvalMapHandler%20*stateutil.ValidatorMapHandler%0AmerkleLayers%20%5B%5D%5B%5D%5B%5Dbyte%0AsharedFieldReferences%20map%5Bnativetypes.FieldIndex%5D%5C*stateutil.Reference%0A%7D%0A%0A%60%60%60%0A%0A%5Bbeacon_state.pb.go%5D(https%3A%2F%2Fgithub.com%2Fprysmaticlabs%2Fprysm%2Fblob%2Fdevelop%2Fproto%2Fprysm%2Fv1alpha1%2Fbeacon_state.pb.go%23L962)%0A%0A%60%60%60%0A%0Atype%20SyncCommittee%20struct%20%7B%0Astate%20protoimpl.MessageState%0AsizeCache%20protoimpl.SizeCache%0AunknownFields%20protoimpl.UnknownFields%0A%0APubkeys%20%5B%5D%5B%5Dbyte%20%60protobuf%3A%22bytes%2C1%2Crep%2Cname%3Dpubkeys%2Cproto3%22%20json%3A%22pubkeys%2Comitempty%22%20ssz-size%3A%22512%2C48%22%60%0AAggregatePubkey%20%5B%5Dbyte%20%60protobuf%3A%22bytes%2C2%2Copt%2Cname%3Daggregate_pubkey%2Cjson%3DaggregatePubkey%2Cproto3%22%20json%3A%22aggregate_pubkey%2Comitempty%22%20ssz-size%3A%2248%22%60%0A%7D%0A%0A%60%60%60%0A%0A%5BInterfaces%5D(https%3A%2F%2Fgithub.com%2Fprysmaticlabs%2Fprysm%2Fblob%2Fv3.1.2%2Fbeacon-chain%2Fstate%2Finterfaces.go)%0A%0A%60%60%60%0A%0A%2F%2F%20BeaconState%20has%20read%20and%20write%20access%20to%20beacon%20state%20methods.%0Atype%20BeaconState%20interface%20%7B%0ASpecParametersProvider%0AReadOnlyBeaconState%0AReadOnlyWithdrawals%0AWriteOnlyBeaconState%0ACopy()%20BeaconState%0AHashTreeRoot(ctx%20context.Context)%20(%5B32%5Dbyte%2C%20error)%0AFutureForkStub%0AStateProver%0A%7D%0A%0A%60%60%60%0A%0A%60%60%60%0A%0A%2F%2F%20StateProver%20defines%20the%20ability%20to%20create%20Merkle%20proofs%20for%20beacon%20state%20fields.%0Atype%20StateProver%20interface%20%7B%0AFinalizedRootProof(ctx%20context.Context)%20(%5B%5D%5B%5Dbyte%2C%20error)%0ACurrentSyncCommitteeProof(ctx%20context.Context)%20(%5B%5D%5B%5Dbyte%2C%20error)%0ANextSyncCommitteeProof(ctx%20context.Context)%20(%5B%5D%5B%5Dbyte%2C%20error)%0A%7D%0A%0A%60%60%60%0A%0A%60%60%60%0A%0A%60%60%60%0A%0A%60%60%60%0A%0A%60%60%60%0A",lastUpdatedAt:1753129136e3},{lazy:()=>o2(()=>import("./intro-OCCHXmpp.js"),[]),path:"/research/code/intro",type:"mdx",filePath:"research/code/intro.mdx",content:"%23%20Code%20bases%20and%20reviews%0A%0A-%20date%3A%202023-02-04%0A-%20last%20updated%3A%202023-02-04%0A%0A%23%23%20Overview%0A%0A**Disclaimer%3A%20The%20content%20in%20this%20section%20are%20notes%20I%20took%20doing%20research%20and%20design%20work%2C%20primarily%20around%20bridging%20and%20consensus.%20Some%20are%20incomplete%20and%20they%20lack%20structure.%20I%20have%20included%20them%20here%20for%20completeness.**%0A%0A-%20%5BCode%20bases%20and%20reviews%5D(%23code-bases-and-reviews)%0A%20%20-%20%5BOverview%5D(%23overview)%0A%20%20-%20%5BFunctionality%5D(%23functionality)%0A%20%20-%20%5BReference%20Codebases%5D(%23reference-codebases)%0A%20%20%20%20-%20%5BBlockchains%5D(%23blockchains)%0A%20%20%20%20-%20%5BBridging%20and%20Light%20Clients%5D(%23bridging-and-light-clients)%0A%20%20%20%20-%20%5BZero%20Knowledge%5D(%23zero-knowledge)%0A%0A%23%23%20Functionality%0A%0AIn%20this%20section%20we%20list%20codebases%20that%20implement%20cryptographic%20functions.%20We%20organize%20by%20functional%20areas%20such%20as%20signing%2C%20hashing%2C%20primitives%20and%20consensus.%20Where%20possible%20we%20provide%20a%20link%20to%20the%20algorithms%2Fspecifications%20being%20implemented%20followed%20by%20reference%20codebases.%0A%0AWe%20have%20summarized%20the%20functionality%20in%20three%20areas%0A%0A-%20%5BSigning%5D(..%2Fprimitives%2Fsignatures.mdx)%0A-%20%5BCryptographic%20Primitives%5D(..%2Fprimitives%2Fprimitives.mdx)%0A-%20%5BConsensus%5D(..%2Fchains%2Fintro.mdx)%0A%0A%23%23%20Reference%20Codebases%0A%0A%23%23%23%20Blockchains%0A%0A-%20%5BBinance%5D(https%3A%2F%2Fgithub.com%2Fbnb-chain%2Fbsc)%20(go)%0A-%20%5BAvalanche%5D(https%3A%2F%2Fgithub.com%2Fava-labs%2Favalanchego)%20(go)%0A-%20%5BEthereum%5D(https%3A%2F%2Fclientdiversity.org%2F%23distribution)%20%5Broadmap%5D(https%3A%2F%2Fnotes.ethereum.org%2F%40domothy%2Froadmap)%20%5Bupgrading%20ethereum%5D(https%3A%2F%2Feth2book.info%2Fbellatrix%2Fcontents%2F)%20%5Bconsensus-specs%5D(https%3A%2F%2Fgithub.com%2Fethereum%2Fconsensus-specs)%0A%20%20-%20Consensus%20Clients%20(Beacon%20Chain)%0A%20%20%20%20-%20%5Bprysm%5D(https%3A%2F%2Fgithub.com%2Fprysmaticlabs%2Fprysm)%20(go)%0A%20%20%20%20-%20%5Blighthouse%5D(https%3A%2F%2Fgithub.com%2Fsigp%2Flighthouse%2F)%20(rust)%0A%20%20%20%20-%20%5Bteku%5D(https%3A%2F%2Fgithub.com%2FConsenSys%2Fteku)%20(java)%0A%20%20%20%20-%20%5Bnimbus%5D(https%3A%2F%2Fgithub.com%2Fstatus-im%2Fnimbus-eth2)%20(%5Bnim%5D(https%3A%2F%2Fnim-lang.org%2F))%0A%20%20%20%20-%20%5Blodestar%5D(https%3A%2F%2Fgithub.com%2FChainSafe%2Flodestar)%20(typescript)%0A%20%20%20%20-%20%5Bgrandine%5D(https%3A%2F%2Fgithub.com%2Fsifraitech%2Fgrandine)%20(rust)%20not%20open%20source%0A%20%20-%20Execution%20Clients%20(Execution%20Chain)%0A%20%20%20%20-%20%5Bgeth%5D(https%3A%2F%2Fgithub.com%2Fethereum%2Fgo-ethereum)%20(go)%0A%20%20%20%20-%20%5Bnethermind%5D(https%3A%2F%2Fgithub.com%2FNethermindEth%2Fnethermind)%20(c%23)%0A%20%20%20%20-%20%5BErigon%5D(https%3A%2F%2Fgithub.com%2Fledgerwatch%2Ferigon)%20(go)%0A%20%20%20%20-%20%5BBesu%5D(https%3A%2F%2Fgithub.com%2Fhyperledger%2Fbesu)%20(java)%0A%20%20-%20Light%20Client%0A%20%20%20%20-%20%5Bhelios%5D(https%3A%2F%2Fgithub.com%2Fa16z%2Fhelios)%20(rust)%3A%20%5Barticle%5D(https%3A%2F%2Fa16zcrypto.com%2Fbuilding-helios-ethereum-light-client%2F)%0A%20%20%20%20-%20%5Bnear%20rainbow%20bridge%20eth2-client%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Ftree%2Fmaster%2Fcontracts%2Fnear%2Feth2-client)%20(rust)%0A%20%20%20%20-%20%5Bsuccinctlabs%5D(https%3A%2F%2Fgithub.com%2Fsuccinctlabs%2Feth-proof-of-consensus%2Ftree%2Fmain%2Fcontracts%2Fsrc%2Flightclient)%20(solidity)%0A-%20%5BHarmony%5D(https%3A%2F%2Fgithub.com%2Fharmony-one%2Fharmony)%0A%20%20-%20%5BHarmony%20MMRHardFork%5D(https%3A%2F%2Fgithub.com%2Fpeekpi%2Fharmony%2Ftree%2FmmrHardfork)%0A-%20%5BNear%5D(https%3A%2F%2Fgithub.com%2Fnear%2Fnearcore)%0A-%20%5BPolkadot%5D(https%3A%2F%2Fgithub.com%2Forgs%2Fparitytech%2Frepositories)%0A%20%20-%20%5Bsubstrate%5D(https%3A%2F%2Fgithub.com%2Fparitytech%2Fsubstrate)%0A%20%20-%20%5Bcumulus%5D(https%3A%2F%2Fgithub.com%2Fparitytech%2Fcumulus)%0A%20%20-%20%5Bsmoldot%5D(https%3A%2F%2Fgithub.com%2Fsmol-dot%2Fsmoldot)%0A%20%20-%20%5Bopen-runtime-module-library%5D(https%3A%2F%2Fgithub.com%2Fopen-web3-stack%2Fopen-runtime-module-library)%0A-%20%5BPolygon%5D(https%3A%2F%2Fgithub.com%2Fmaticnetwork)%0A%20%20-%20%5Bpeppermint%5D(https%3A%2F%2Fgithub.com%2Fmaticnetwork%2Ftendermint%2Ftree%2Fpeppermint)%20(go)%20fork%20of%20tendermint%0A%20%20-%20%5Bheimdall%5D(https%3A%2F%2Fgithub.com%2Fmaticnetwork%2Fheimdall)%20(go)%0A-%20%5BTendermint%5D(https%3A%2F%2Fgithub.com%2Ftendermint%2Ftendermint)%0A%0A%23%23%23%20Bridging%20and%20Light%20Clients%0A%0A-%20Light%20Clients%0A%20%20-%20%5BHarmony%20MMRHardFork%5D(https%3A%2F%2Fgithub.com%2Fpeekpi%2Fharmony%2Ftree%2FmmrHardfork)%0A%0A-%20Bridging%0A%20%20-%20%5BHarmony%20Horizon%20Bridge%5D(.%2FHorizon.mdx)%3A%20Detailed%20code%20review%0A%20%20%20%20-%20%5BHorizon%5D(https%3A%2F%2Fgithub.com%2Fjohnwhitton%2Fhorizon%2Ftree%2FrefactorV2)%3A%20javascript%2C%20solidity%0A%20%20-%20%5BNear%20Rainbow%20Bridge%5D(.%2Fethereum-near.mdx)%3A%20Detailed%20code%20review%0A%20%20%20%20-%20%5BNear%20Rainbow%20Bridge%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge)%3A%20rust%2C%20go%2C%20solidity%2C%20javascript%0A%20%20%20%20-%20%5BNear%20Rainbow%20Token%20Connector%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-token-connector)%3A%20soldity%0A%20%20%20%20-%20SDK%0A%20%20%20%20%20%20-%20%5BNear%20Rainbow%20Bridge%20Client%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge-client%2Ftree%2Fmain%2Fpackages%2Fclient)%3A%20typescript%0A%20%20%20%20-%20Frontend%0A%20%20%20%20%20%20-%20%5BNEAR%20Rainbow%20Bridge%20Frontend%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge-frontend)%0A%20%20-%20%5BNomad%20monprepo%5D(https%3A%2F%2Fgithub.com%2Fnomad-xyz%2Fmonorepo)%3A%20Nomad%20is%20a%20cross-chain%20communication%20protocol.%20This%20repo%20contains%20the%20following%3A%20Smart%20contracts%20for%20the%20core%20Nomad%20protocol%2C%20Smart%20contracts%20for%20the%20Nomad%20token%20bridge%20SDKs%20for%20Nomad's%20core%20protocol%2C%20bridge%2C%20and%20governance%20systems%2C%20Tooling%20for%20local%20environment%20simulation%20and%20Smart%20contract%20deployment%20tooling.%0A%20%20%20%20-%20%5BNomad%20rust%5D(https%3A%2F%2Fgithub.com%2Fnomad-xyz%2Frust)%3A%20Nomad%20is%20a%20cross-chain%20communication%20standard%20that%20supports%20passing%20messages%20between%20blockchains%20easily%20and%20inexpensively.%20Like%20IBC%20light%20clients%20and%20similar%20systems%2C%20Nomad%20establishes%20message-passing%20channels%20between%20chains.%20Once%20a%20channel%20is%20established%2C%20any%20application%20on%20that%20chain%20can%20use%20it%20to%20send%20messages%20to%20others%20chains.%0A%20%20%20%20-%20%5BNomad%20gelato-sdk%5D(https%3A%2F%2Fgithub.com%2Fnomad-xyz%2Fgelato-sdk)%3A%20This%20crate%20reimplements%20Gelato's%20Relay%20SDK%20in%20Rust.%20It%20simply%20wraps%20Gelato%20Relay%20requests%20and%20responses%20to%2Ffrom%20Gelato%20endpoints%20with%20Rust%20types%20and%20methods.%0A%20%20-%20%5BSuccinct%20labs%5D(..%2Fbridge%2Fsuccinct.mdx)%3A%20Deep%20dive%20on%20Succinct%20labs%20Proof%20of%20Consensus%20for%20Ethreum.%0A%20%20%20%20-%20%5BProof%20of%20Consensus%20for%20Ethereum%5D(https%3A%2F%2Fgithub.com%2Fsuccinctlabs%2Feth-proof-of-consensus)%3A%20contains%20both%20the%20zkSNARK%20circuits%20as%20well%20as%20the%20smart%20contracts%20needed%20for%20our%20succinct%20light%20client%20implementation%2C%20as%20well%20as%20prototype%20message%20passing%20contracts%20and%20bridge%20contracts.%0A%20%20-%20%5BDatachain%20lcp%5D(https%3A%2F%2Fgithub.com%2Fdatachainlab%3A)A%20proxy%20for%20light%20client%20verification%20executed%20in%20TEE.%0A%20%20-%20%5BCosmos%20ibc-go%5D(https%3A%2F%2Fgithub.com%2Fcosmos%2Fibc-go)%3A%20allows%20blockchains%20to%20talk%20to%20each%20other.%20This%20end-to-end%2C%20connection-oriented%2C%20stateful%20protocol%20provides%20reliable%2C%20ordered%2C%20and%20authenticated%20communication%20between%20heterogeneous%20blockchains.%0A%20%20%20%20-%20%5BCosmos%20ibc%5D(https%3A%2F%2Fgithub.com%2Fcosmos%2Fibc)%3A%20ibc%20specification%0A%20%20-%20%5BCosmos%20gravity%20bridge%5D(https%3A%2F%2Fgithub.com%2Fcosmos%2Fgravity-bridge)%3A%20Cosmos%20and%20Ethereum%20bridge%20designed%20to%20run%20on%20the%20Cosmos%20Hub%20focused%20on%20maximum%20design%20simplicity%20and%20efficiency.%0A%20%20-%20%5BAxelar%5D(https%3A%2F%2Fgithub.com%2Faxelarnetwork%2Faxelar-core)%3A%20based%20on%20the%20Cosmos%20SDK%20is%20the%20main%20application%20of%20the%20axelar%20network.%20%5Bwhitepaper%5D(https%3A%2F%2Faxelar.network%2Faxelar_whitepaper.pdf)%20%5Bdocs%5D(https%3A%2F%2Fdocs.axelar.dev%2F)%0A%20%20-%20%5BCeler%20cBridge-node%5D(https%3A%2F%2Fgithub.com%2Fceler-network%2FcBridge-node)%3A%20Celer%20cBridge%20relay%20node%20implementation%20in%20Golang.%20(%5Bdocs%5D(https%3A%2F%2Fcbridge-docs.celer.network%2F))%0A%20%20%20%20-%20%5BCeler%20cBridge-contracts%5D(https%3A%2F%2Fgithub.com%2Fceler-network%2FcBridge-contracts)%3A%20Contracts%20for%20cBridge%2C%20cross-chain%20liquidity%20solution%20powered%20by%20Hashed-Timelock%20Transfers%0A%20%20%20%20-%20%5BCeler%20cBridge-cowa%5D(https%3A%2F%2Fgithub.com%2Fceler-network%2Fcbridge-cowa)%3A%20CosmWasm%20Rust%20smart%20contracts%20for%20cbridge%0A%20%20-%20%5BWormhole%5D(https%3A%2F%2Fgithub.com%2Fwormhole-foundation%2Fwormhole)%3A%20the%20reference%20implementation%20of%20the%20Wormhole%20protocol.%20(%5Bdocs%5D(https%3A%2F%2Fbook.wormhole.com%2Fintroduction%2Fintroduction.html))%0A%20%20-%20%5BLayerZero%20Labs%20LayerZero%5D(https%3A%2F%2Fgithub.com%2FLayerZero-Labs%2FLayerZero)%3A%20contains%20the%20smart%20contracts%20for%20LayerZero%20Endpoints.%20(%5Bdocs%5D(https%3A%2F%2Flayerzero.gitbook.io%2Fdocs%2F))%0A%20%20-%20%5BMultichain%20CrossChain-Bridge%5D(https%3A%2F%2Fgithub.com%2Fanyswap%2FCrossChain-Bridge)%3A%20Cross-Chain%20bridge%20based%20on%20Anyswap%20MPC%20network.%20(%5Bdocs%5D(https%3A%2F%2Fdocs.multichain.org%2Fgetting-started%2Fintroduction))%0A%20%20-%20%5BSynapse%20Protocol%5D(https%3A%2F%2Fgithub.com%2Fsynapsecns)%3A%20a%20universal%20interoperability%20protocol%20that%20enables%20secure%20cross-chain%20communication.(%20%5Bdocs%5D(https%3A%2F%2Fdocs.synapseprotocol.com%2F))%0A%20%20%20%20-%20%5Bsynapse-contracts%5D(https%3A%2F%2Fgithub.com%2Fsynapsecns%2Fsynapse-contracts)%3A%20smart%20contracts%20for%20Synapse%20Protocol.%0A%20%20-%20%5BHop%20Protocol%20contracts%5D(https%3A%2F%2Fgithub.com%2Fhop-protocol%2Fcontracts)%3A%20Hop%20is%20a%20scalable%20rollup-to-rollup%20general%20token%20bridge.%20Heare%20are%20the%20smart%20contracts%20that%20power%20the%20Hop%20Exchange.%20(%5Bwhitepaper%5D(https%3A%2F%2Fhop.exchange%2Fwhitepaper.pdf)%2C%20%5Bdocs%5D(https%3A%2F%2Fdocs.hop.exchange%2Fbasics%2Fa-short-explainer)).%0A%20%20-%20%5BRouter%20Protocol%5D(https%3A%2F%2Fgithub.com%2Forgs%2Frouter-protocol%2Frepositories)%3A%20(%5Bwhitepaper%5D(https%3A%2F%2Fdocs.routerprotocol.com%2Fwhitepaper%2Fintroducing-router-protocol)%2C%20%5Bdocs%5D(https%3A%2F%2Fdev.routerprotocol.com%2F))%0A%20%20-%20%5BParity%20Bridges%20Common%5D(https%3A%2F%2Fgithub.com%2Fparitytech%2Fparity-bridges-common)%3A%20a%20collection%20of%20components%20for%20building%20bridges.%0A%20%20-%20%5BSnowfork%20snowbridge%5D(https%3A%2F%2Fgithub.com%2FSnowfork%2Fsnowbridge)%3A%20A%20trustless%20bridge%20between%20Polkadot%20and%20Ethereum.%20(%5Bdocs%5D(https%3A%2F%2Fdocs.snowbridge.network%2F))%0A%0A%23%23%23%20Zero%20Knowledge%0A%0A-%20Foundational%0A%20%20-%20%5Bhalo2%5D(https%3A%2F%2Fgithub.com%2Fzcash%2Fhalo2)%20(rust)%0A%20%20%20%20-%20%5Bhalo2%20privacy-scaling-explorations%5D(https%3A%2F%2Fgithub.com%2Fprivacy-scaling-explorations%2Fhalo2%2Fcommits%2Fmain)%20(rust)%20fork%0A%20%20%20%20-%20%5Bjunyu0312%5D(https%3A%2F%2Fgithub.com%2Fjunyu0312%2Fhalo2)%20(rust)%20fork%0A%20%20-%20%5BCircom%5D(https%3A%2F%2Fgithub.com%2Fiden3%2Fcircom)%20a%20novel%20domain-specific%20language%20for%20defining%20arithmetic%20circuits%20that%20can%20be%20used%20to%20generate%20zero-knowledge%20proofs%0A%20%20-%20%5BArkworks%5D(https%3A%2F%2Fgithub.com%2Farkworks-rs)%20(rust)%0A%20%20-%20%5Bnoir%5D(https%3A%2F%2Fgithub.com%2Fnoir-lang%2Fnoir)%20(rust)%0A%20%20-%20%5BStarkWare's%20Poseidon%20Hash%5D(https%3A%2F%2Fgithub.com%2Fstarkware-industries%2Fposeidon)%0A-%20Applications%0A%20%20-%20%5Bhalo2ecc-s%5D(https%3A%2F%2Fgithub.com%2FDelphinusLab%2Fhalo2ecc-s)%20(rust)%3A%20ecc%20circuits%20with%20halo2%0A%20%20-%20%5BDarkForest%5D(https%3A%2F%2Fgithub.com%2Fdarkforest-eth)%20zkSNARK%20space%20warfare%0A%20%20-%20%5BAwesome%20List%5D(https%3A%2F%2Fgithub.com%2Fsnowtigersoft%2Fawesome-darkforest)%0A-%20Proof%20of%20Consensus%2FBridging%0A%20%20-%20%5Bsuccinctlabs%5D(https%3A%2F%2Fgithub.com%2Fsuccinctlabs%2Feth-proof-of-consensus)%20(circom)%0A",lastUpdatedAt:1753125084e3},{lazy:()=>o2(()=>import("./intro-OCCHXmpp.js"),[]),path:"/research/code/intro.html",type:"mdx",filePath:"research/code/intro.mdx",content:"%23%20Code%20bases%20and%20reviews%0A%0A-%20date%3A%202023-02-04%0A-%20last%20updated%3A%202023-02-04%0A%0A%23%23%20Overview%0A%0A**Disclaimer%3A%20The%20content%20in%20this%20section%20are%20notes%20I%20took%20doing%20research%20and%20design%20work%2C%20primarily%20around%20bridging%20and%20consensus.%20Some%20are%20incomplete%20and%20they%20lack%20structure.%20I%20have%20included%20them%20here%20for%20completeness.**%0A%0A-%20%5BCode%20bases%20and%20reviews%5D(%23code-bases-and-reviews)%0A%20%20-%20%5BOverview%5D(%23overview)%0A%20%20-%20%5BFunctionality%5D(%23functionality)%0A%20%20-%20%5BReference%20Codebases%5D(%23reference-codebases)%0A%20%20%20%20-%20%5BBlockchains%5D(%23blockchains)%0A%20%20%20%20-%20%5BBridging%20and%20Light%20Clients%5D(%23bridging-and-light-clients)%0A%20%20%20%20-%20%5BZero%20Knowledge%5D(%23zero-knowledge)%0A%0A%23%23%20Functionality%0A%0AIn%20this%20section%20we%20list%20codebases%20that%20implement%20cryptographic%20functions.%20We%20organize%20by%20functional%20areas%20such%20as%20signing%2C%20hashing%2C%20primitives%20and%20consensus.%20Where%20possible%20we%20provide%20a%20link%20to%20the%20algorithms%2Fspecifications%20being%20implemented%20followed%20by%20reference%20codebases.%0A%0AWe%20have%20summarized%20the%20functionality%20in%20three%20areas%0A%0A-%20%5BSigning%5D(..%2Fprimitives%2Fsignatures.mdx)%0A-%20%5BCryptographic%20Primitives%5D(..%2Fprimitives%2Fprimitives.mdx)%0A-%20%5BConsensus%5D(..%2Fchains%2Fintro.mdx)%0A%0A%23%23%20Reference%20Codebases%0A%0A%23%23%23%20Blockchains%0A%0A-%20%5BBinance%5D(https%3A%2F%2Fgithub.com%2Fbnb-chain%2Fbsc)%20(go)%0A-%20%5BAvalanche%5D(https%3A%2F%2Fgithub.com%2Fava-labs%2Favalanchego)%20(go)%0A-%20%5BEthereum%5D(https%3A%2F%2Fclientdiversity.org%2F%23distribution)%20%5Broadmap%5D(https%3A%2F%2Fnotes.ethereum.org%2F%40domothy%2Froadmap)%20%5Bupgrading%20ethereum%5D(https%3A%2F%2Feth2book.info%2Fbellatrix%2Fcontents%2F)%20%5Bconsensus-specs%5D(https%3A%2F%2Fgithub.com%2Fethereum%2Fconsensus-specs)%0A%20%20-%20Consensus%20Clients%20(Beacon%20Chain)%0A%20%20%20%20-%20%5Bprysm%5D(https%3A%2F%2Fgithub.com%2Fprysmaticlabs%2Fprysm)%20(go)%0A%20%20%20%20-%20%5Blighthouse%5D(https%3A%2F%2Fgithub.com%2Fsigp%2Flighthouse%2F)%20(rust)%0A%20%20%20%20-%20%5Bteku%5D(https%3A%2F%2Fgithub.com%2FConsenSys%2Fteku)%20(java)%0A%20%20%20%20-%20%5Bnimbus%5D(https%3A%2F%2Fgithub.com%2Fstatus-im%2Fnimbus-eth2)%20(%5Bnim%5D(https%3A%2F%2Fnim-lang.org%2F))%0A%20%20%20%20-%20%5Blodestar%5D(https%3A%2F%2Fgithub.com%2FChainSafe%2Flodestar)%20(typescript)%0A%20%20%20%20-%20%5Bgrandine%5D(https%3A%2F%2Fgithub.com%2Fsifraitech%2Fgrandine)%20(rust)%20not%20open%20source%0A%20%20-%20Execution%20Clients%20(Execution%20Chain)%0A%20%20%20%20-%20%5Bgeth%5D(https%3A%2F%2Fgithub.com%2Fethereum%2Fgo-ethereum)%20(go)%0A%20%20%20%20-%20%5Bnethermind%5D(https%3A%2F%2Fgithub.com%2FNethermindEth%2Fnethermind)%20(c%23)%0A%20%20%20%20-%20%5BErigon%5D(https%3A%2F%2Fgithub.com%2Fledgerwatch%2Ferigon)%20(go)%0A%20%20%20%20-%20%5BBesu%5D(https%3A%2F%2Fgithub.com%2Fhyperledger%2Fbesu)%20(java)%0A%20%20-%20Light%20Client%0A%20%20%20%20-%20%5Bhelios%5D(https%3A%2F%2Fgithub.com%2Fa16z%2Fhelios)%20(rust)%3A%20%5Barticle%5D(https%3A%2F%2Fa16zcrypto.com%2Fbuilding-helios-ethereum-light-client%2F)%0A%20%20%20%20-%20%5Bnear%20rainbow%20bridge%20eth2-client%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Ftree%2Fmaster%2Fcontracts%2Fnear%2Feth2-client)%20(rust)%0A%20%20%20%20-%20%5Bsuccinctlabs%5D(https%3A%2F%2Fgithub.com%2Fsuccinctlabs%2Feth-proof-of-consensus%2Ftree%2Fmain%2Fcontracts%2Fsrc%2Flightclient)%20(solidity)%0A-%20%5BHarmony%5D(https%3A%2F%2Fgithub.com%2Fharmony-one%2Fharmony)%0A%20%20-%20%5BHarmony%20MMRHardFork%5D(https%3A%2F%2Fgithub.com%2Fpeekpi%2Fharmony%2Ftree%2FmmrHardfork)%0A-%20%5BNear%5D(https%3A%2F%2Fgithub.com%2Fnear%2Fnearcore)%0A-%20%5BPolkadot%5D(https%3A%2F%2Fgithub.com%2Forgs%2Fparitytech%2Frepositories)%0A%20%20-%20%5Bsubstrate%5D(https%3A%2F%2Fgithub.com%2Fparitytech%2Fsubstrate)%0A%20%20-%20%5Bcumulus%5D(https%3A%2F%2Fgithub.com%2Fparitytech%2Fcumulus)%0A%20%20-%20%5Bsmoldot%5D(https%3A%2F%2Fgithub.com%2Fsmol-dot%2Fsmoldot)%0A%20%20-%20%5Bopen-runtime-module-library%5D(https%3A%2F%2Fgithub.com%2Fopen-web3-stack%2Fopen-runtime-module-library)%0A-%20%5BPolygon%5D(https%3A%2F%2Fgithub.com%2Fmaticnetwork)%0A%20%20-%20%5Bpeppermint%5D(https%3A%2F%2Fgithub.com%2Fmaticnetwork%2Ftendermint%2Ftree%2Fpeppermint)%20(go)%20fork%20of%20tendermint%0A%20%20-%20%5Bheimdall%5D(https%3A%2F%2Fgithub.com%2Fmaticnetwork%2Fheimdall)%20(go)%0A-%20%5BTendermint%5D(https%3A%2F%2Fgithub.com%2Ftendermint%2Ftendermint)%0A%0A%23%23%23%20Bridging%20and%20Light%20Clients%0A%0A-%20Light%20Clients%0A%20%20-%20%5BHarmony%20MMRHardFork%5D(https%3A%2F%2Fgithub.com%2Fpeekpi%2Fharmony%2Ftree%2FmmrHardfork)%0A%0A-%20Bridging%0A%20%20-%20%5BHarmony%20Horizon%20Bridge%5D(.%2FHorizon.mdx)%3A%20Detailed%20code%20review%0A%20%20%20%20-%20%5BHorizon%5D(https%3A%2F%2Fgithub.com%2Fjohnwhitton%2Fhorizon%2Ftree%2FrefactorV2)%3A%20javascript%2C%20solidity%0A%20%20-%20%5BNear%20Rainbow%20Bridge%5D(.%2Fethereum-near.mdx)%3A%20Detailed%20code%20review%0A%20%20%20%20-%20%5BNear%20Rainbow%20Bridge%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge)%3A%20rust%2C%20go%2C%20solidity%2C%20javascript%0A%20%20%20%20-%20%5BNear%20Rainbow%20Token%20Connector%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-token-connector)%3A%20soldity%0A%20%20%20%20-%20SDK%0A%20%20%20%20%20%20-%20%5BNear%20Rainbow%20Bridge%20Client%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge-client%2Ftree%2Fmain%2Fpackages%2Fclient)%3A%20typescript%0A%20%20%20%20-%20Frontend%0A%20%20%20%20%20%20-%20%5BNEAR%20Rainbow%20Bridge%20Frontend%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge-frontend)%0A%20%20-%20%5BNomad%20monprepo%5D(https%3A%2F%2Fgithub.com%2Fnomad-xyz%2Fmonorepo)%3A%20Nomad%20is%20a%20cross-chain%20communication%20protocol.%20This%20repo%20contains%20the%20following%3A%20Smart%20contracts%20for%20the%20core%20Nomad%20protocol%2C%20Smart%20contracts%20for%20the%20Nomad%20token%20bridge%20SDKs%20for%20Nomad's%20core%20protocol%2C%20bridge%2C%20and%20governance%20systems%2C%20Tooling%20for%20local%20environment%20simulation%20and%20Smart%20contract%20deployment%20tooling.%0A%20%20%20%20-%20%5BNomad%20rust%5D(https%3A%2F%2Fgithub.com%2Fnomad-xyz%2Frust)%3A%20Nomad%20is%20a%20cross-chain%20communication%20standard%20that%20supports%20passing%20messages%20between%20blockchains%20easily%20and%20inexpensively.%20Like%20IBC%20light%20clients%20and%20similar%20systems%2C%20Nomad%20establishes%20message-passing%20channels%20between%20chains.%20Once%20a%20channel%20is%20established%2C%20any%20application%20on%20that%20chain%20can%20use%20it%20to%20send%20messages%20to%20others%20chains.%0A%20%20%20%20-%20%5BNomad%20gelato-sdk%5D(https%3A%2F%2Fgithub.com%2Fnomad-xyz%2Fgelato-sdk)%3A%20This%20crate%20reimplements%20Gelato's%20Relay%20SDK%20in%20Rust.%20It%20simply%20wraps%20Gelato%20Relay%20requests%20and%20responses%20to%2Ffrom%20Gelato%20endpoints%20with%20Rust%20types%20and%20methods.%0A%20%20-%20%5BSuccinct%20labs%5D(..%2Fbridge%2Fsuccinct.mdx)%3A%20Deep%20dive%20on%20Succinct%20labs%20Proof%20of%20Consensus%20for%20Ethreum.%0A%20%20%20%20-%20%5BProof%20of%20Consensus%20for%20Ethereum%5D(https%3A%2F%2Fgithub.com%2Fsuccinctlabs%2Feth-proof-of-consensus)%3A%20contains%20both%20the%20zkSNARK%20circuits%20as%20well%20as%20the%20smart%20contracts%20needed%20for%20our%20succinct%20light%20client%20implementation%2C%20as%20well%20as%20prototype%20message%20passing%20contracts%20and%20bridge%20contracts.%0A%20%20-%20%5BDatachain%20lcp%5D(https%3A%2F%2Fgithub.com%2Fdatachainlab%3A)A%20proxy%20for%20light%20client%20verification%20executed%20in%20TEE.%0A%20%20-%20%5BCosmos%20ibc-go%5D(https%3A%2F%2Fgithub.com%2Fcosmos%2Fibc-go)%3A%20allows%20blockchains%20to%20talk%20to%20each%20other.%20This%20end-to-end%2C%20connection-oriented%2C%20stateful%20protocol%20provides%20reliable%2C%20ordered%2C%20and%20authenticated%20communication%20between%20heterogeneous%20blockchains.%0A%20%20%20%20-%20%5BCosmos%20ibc%5D(https%3A%2F%2Fgithub.com%2Fcosmos%2Fibc)%3A%20ibc%20specification%0A%20%20-%20%5BCosmos%20gravity%20bridge%5D(https%3A%2F%2Fgithub.com%2Fcosmos%2Fgravity-bridge)%3A%20Cosmos%20and%20Ethereum%20bridge%20designed%20to%20run%20on%20the%20Cosmos%20Hub%20focused%20on%20maximum%20design%20simplicity%20and%20efficiency.%0A%20%20-%20%5BAxelar%5D(https%3A%2F%2Fgithub.com%2Faxelarnetwork%2Faxelar-core)%3A%20based%20on%20the%20Cosmos%20SDK%20is%20the%20main%20application%20of%20the%20axelar%20network.%20%5Bwhitepaper%5D(https%3A%2F%2Faxelar.network%2Faxelar_whitepaper.pdf)%20%5Bdocs%5D(https%3A%2F%2Fdocs.axelar.dev%2F)%0A%20%20-%20%5BCeler%20cBridge-node%5D(https%3A%2F%2Fgithub.com%2Fceler-network%2FcBridge-node)%3A%20Celer%20cBridge%20relay%20node%20implementation%20in%20Golang.%20(%5Bdocs%5D(https%3A%2F%2Fcbridge-docs.celer.network%2F))%0A%20%20%20%20-%20%5BCeler%20cBridge-contracts%5D(https%3A%2F%2Fgithub.com%2Fceler-network%2FcBridge-contracts)%3A%20Contracts%20for%20cBridge%2C%20cross-chain%20liquidity%20solution%20powered%20by%20Hashed-Timelock%20Transfers%0A%20%20%20%20-%20%5BCeler%20cBridge-cowa%5D(https%3A%2F%2Fgithub.com%2Fceler-network%2Fcbridge-cowa)%3A%20CosmWasm%20Rust%20smart%20contracts%20for%20cbridge%0A%20%20-%20%5BWormhole%5D(https%3A%2F%2Fgithub.com%2Fwormhole-foundation%2Fwormhole)%3A%20the%20reference%20implementation%20of%20the%20Wormhole%20protocol.%20(%5Bdocs%5D(https%3A%2F%2Fbook.wormhole.com%2Fintroduction%2Fintroduction.html))%0A%20%20-%20%5BLayerZero%20Labs%20LayerZero%5D(https%3A%2F%2Fgithub.com%2FLayerZero-Labs%2FLayerZero)%3A%20contains%20the%20smart%20contracts%20for%20LayerZero%20Endpoints.%20(%5Bdocs%5D(https%3A%2F%2Flayerzero.gitbook.io%2Fdocs%2F))%0A%20%20-%20%5BMultichain%20CrossChain-Bridge%5D(https%3A%2F%2Fgithub.com%2Fanyswap%2FCrossChain-Bridge)%3A%20Cross-Chain%20bridge%20based%20on%20Anyswap%20MPC%20network.%20(%5Bdocs%5D(https%3A%2F%2Fdocs.multichain.org%2Fgetting-started%2Fintroduction))%0A%20%20-%20%5BSynapse%20Protocol%5D(https%3A%2F%2Fgithub.com%2Fsynapsecns)%3A%20a%20universal%20interoperability%20protocol%20that%20enables%20secure%20cross-chain%20communication.(%20%5Bdocs%5D(https%3A%2F%2Fdocs.synapseprotocol.com%2F))%0A%20%20%20%20-%20%5Bsynapse-contracts%5D(https%3A%2F%2Fgithub.com%2Fsynapsecns%2Fsynapse-contracts)%3A%20smart%20contracts%20for%20Synapse%20Protocol.%0A%20%20-%20%5BHop%20Protocol%20contracts%5D(https%3A%2F%2Fgithub.com%2Fhop-protocol%2Fcontracts)%3A%20Hop%20is%20a%20scalable%20rollup-to-rollup%20general%20token%20bridge.%20Heare%20are%20the%20smart%20contracts%20that%20power%20the%20Hop%20Exchange.%20(%5Bwhitepaper%5D(https%3A%2F%2Fhop.exchange%2Fwhitepaper.pdf)%2C%20%5Bdocs%5D(https%3A%2F%2Fdocs.hop.exchange%2Fbasics%2Fa-short-explainer)).%0A%20%20-%20%5BRouter%20Protocol%5D(https%3A%2F%2Fgithub.com%2Forgs%2Frouter-protocol%2Frepositories)%3A%20(%5Bwhitepaper%5D(https%3A%2F%2Fdocs.routerprotocol.com%2Fwhitepaper%2Fintroducing-router-protocol)%2C%20%5Bdocs%5D(https%3A%2F%2Fdev.routerprotocol.com%2F))%0A%20%20-%20%5BParity%20Bridges%20Common%5D(https%3A%2F%2Fgithub.com%2Fparitytech%2Fparity-bridges-common)%3A%20a%20collection%20of%20components%20for%20building%20bridges.%0A%20%20-%20%5BSnowfork%20snowbridge%5D(https%3A%2F%2Fgithub.com%2FSnowfork%2Fsnowbridge)%3A%20A%20trustless%20bridge%20between%20Polkadot%20and%20Ethereum.%20(%5Bdocs%5D(https%3A%2F%2Fdocs.snowbridge.network%2F))%0A%0A%23%23%23%20Zero%20Knowledge%0A%0A-%20Foundational%0A%20%20-%20%5Bhalo2%5D(https%3A%2F%2Fgithub.com%2Fzcash%2Fhalo2)%20(rust)%0A%20%20%20%20-%20%5Bhalo2%20privacy-scaling-explorations%5D(https%3A%2F%2Fgithub.com%2Fprivacy-scaling-explorations%2Fhalo2%2Fcommits%2Fmain)%20(rust)%20fork%0A%20%20%20%20-%20%5Bjunyu0312%5D(https%3A%2F%2Fgithub.com%2Fjunyu0312%2Fhalo2)%20(rust)%20fork%0A%20%20-%20%5BCircom%5D(https%3A%2F%2Fgithub.com%2Fiden3%2Fcircom)%20a%20novel%20domain-specific%20language%20for%20defining%20arithmetic%20circuits%20that%20can%20be%20used%20to%20generate%20zero-knowledge%20proofs%0A%20%20-%20%5BArkworks%5D(https%3A%2F%2Fgithub.com%2Farkworks-rs)%20(rust)%0A%20%20-%20%5Bnoir%5D(https%3A%2F%2Fgithub.com%2Fnoir-lang%2Fnoir)%20(rust)%0A%20%20-%20%5BStarkWare's%20Poseidon%20Hash%5D(https%3A%2F%2Fgithub.com%2Fstarkware-industries%2Fposeidon)%0A-%20Applications%0A%20%20-%20%5Bhalo2ecc-s%5D(https%3A%2F%2Fgithub.com%2FDelphinusLab%2Fhalo2ecc-s)%20(rust)%3A%20ecc%20circuits%20with%20halo2%0A%20%20-%20%5BDarkForest%5D(https%3A%2F%2Fgithub.com%2Fdarkforest-eth)%20zkSNARK%20space%20warfare%0A%20%20-%20%5BAwesome%20List%5D(https%3A%2F%2Fgithub.com%2Fsnowtigersoft%2Fawesome-darkforest)%0A-%20Proof%20of%20Consensus%2FBridging%0A%20%20-%20%5Bsuccinctlabs%5D(https%3A%2F%2Fgithub.com%2Fsuccinctlabs%2Feth-proof-of-consensus)%20(circom)%0A",lastUpdatedAt:1753125084e3},{lazy:()=>o2(()=>import("./fast-fourier-transforms-C3KLt119.js"),[]),path:"/research/primitives/fast-fourier-transforms",type:"mdx",filePath:"research/primitives/fast-fourier-transforms.mdx",content:"%23%20Fast%20Fourier%20Transforms%0A%0A-%20date%3A%202023-02-04%0A-%20last%20updated%3A%202023-02-04%0A%0A%23%23%20Overview%0A%0A%23%23%20References%0A%0A-%20%5BFast%20Fourier%20Transforms%5D(https%3A%2F%2Fvitalik.ca%2Fgeneral%2F2019%2F05%2F12%2Ffft.html)%0A",lastUpdatedAt:1753129136e3},{lazy:()=>o2(()=>import("./fast-fourier-transforms-C3KLt119.js"),[]),path:"/research/primitives/fast-fourier-transforms.html",type:"mdx",filePath:"research/primitives/fast-fourier-transforms.mdx",content:"%23%20Fast%20Fourier%20Transforms%0A%0A-%20date%3A%202023-02-04%0A-%20last%20updated%3A%202023-02-04%0A%0A%23%23%20Overview%0A%0A%23%23%20References%0A%0A-%20%5BFast%20Fourier%20Transforms%5D(https%3A%2F%2Fvitalik.ca%2Fgeneral%2F2019%2F05%2F12%2Ffft.html)%0A",lastUpdatedAt:1753129136e3},{lazy:()=>o2(()=>import("./fraud-proofs-BZDl_JyK.js"),[]),path:"/research/primitives/fraud-proofs",type:"mdx",filePath:"research/primitives/fraud-proofs.mdx",content:"%23%20Fraud%20Proofs%0A%0A-%20date%3A%202023-02-04%0A-%20last%20updated%3A%202023-02-04%0A%0A%23%23%20Overview%0A%0AFollowing%20is%20an%20excerpt%20from%20Fraud%20and%20Data%20Availability%20Proofs%3ADetecting%20Invalid%20Blocks%20in%20Light%20Clients%20%5B%5E1%5D.%0A%0A%3E%20Light%20clients%2C%20also%20known%20as%20Simple%20Payment%20Verification%20(SPV)%20clients%2C%20are%20nodes%20which%20only%20download%20a%20small%20portion%20of%20the%20data%20in%20a%20blockchain%2C%20and%20use%20indirect%20means%20to%20verify%20that%20a%20given%20chain%20is%20valid.%20Instead%20of%20validating%20blocks%2C%20they%20assume%20that%20the%20chain%20favoured%20by%20the%20blockchain%E2%80%99s%20consensus%20algorithm%20only%20contains%20valid%20blocks%2C%20and%20that%20the%20majority%20of%20block%20producers%20are%20honest.%20By%20allowing%20such%20clients%20to%20receive%20fraud%20proofs%20generated%20by%20fully%20validating%20nodes%20that%20show%20that%20a%20block%20violates%20the%20protocol%20rules%2C%20and%20combining%20this%20with%20probabilistic%20sampling%20techniques%20to%20verify%20that%20all%20of%20the%20data%20in%20a%20block%20actually%20is%20available%20to%20be%20downloaded%20so%20that%20fraud%20can%20be%20detected%2C%20we%20can%20eliminate%20the%20honest-majority%20assumption%20for%20block%20validity%2C%20and%20instead%20make%20much%20weaker%20assumptions%20about%20a%20minimum%20number%20of%20honest%20nodes%20that%20rebroadcast%20data.%20Fraud%20and%20data%20availability%20proofs%20are%20key%20to%20enabling%20on-chain%20scaling%20of%20blockchains%20while%20maintaining%20a%20strong%20assurance%20that%20on-chain%20data%20is%20available%20and%20valid.%20We%20present%2C%20implement%2C%20and%20evaluate%20a%20fraud%20and%20data%20availability%20proof%20system.%0A%0AHere%20is%20an%20overview%20of%20how%20NEAR%20bridge%20uses%20this%20in%20an%20optimistic%20approach%0A%0AThe%20leading%20NEAR%20Ethereum%20Bridge%20today%20Near%20Rainbow%20Bridge%20uses%20an%20optimistic%20approach.%20Following%20is%20an%20excerpt%20from%20NearOnEthClient%20%5B%5Enear-1%5D.%0A%0A%3E%20we%20adopt%20the%20optimistic%20%5B%5Enear-2%5D%20approach%20where%20NearOnEthClient%20verifies%20everything%20in%20the%20NEAR%20header%20except%20the%20signatures.%20Then%20anyone%20can%20challenge%20a%20signature%20in%20a%20submitted%20header%20within%20a%204-hour%20challenge%20window.%20The%20challenge%20requires%20verification%20of%20a%20single%20Ed25519%20signature%20which%20would%20cost%20about%20500k%20Ethereum%20gas%20(expensive%2C%20but%20possible).%0A%0A%23%23%20Footnotes%0A%0A%5B%5E1%5D%3A%20%5BFraud%20and%20Data%20Availability%20Proofs%3ADetecting%20Invalid%20Blocks%20in%20Light%20Clients%5D(http%3A%2F%2Fwww0.cs.ucl.ac.uk%2Fstaff%2FM.AlBassam%2Fpublications%2Ffraudproofs.pdf)%3A%20Fraud%20and%20data%20availability%20proofs%20are%20key%20to%20enabling%20on-chain%20scaling%20of%20blockchains%20while%20maintaining%20a%20strong%20assurance%20that%20on-chain%20data%20is%20available%20and%20valid.%0A%5B%5Enear-1%5D%3A%20%5BNEAR%3A%20ETH-NEAR%20Rainbow%20Bridge%5D(https%3A%2F%2Fnear.org%2Fblog%2Feth-near-rainbow-bridge%2F)%3A%20a%20bridge%2C%20called%20Rainbow%20Bridge%2C%20to%20connect%20the%20Ethereum%20and%20NEAR%20blockchains.%0A%5B%5Enear-2%5D%3A%20%5BOptimistic%20Contracts%5D(https%3A%2F%2Fmedium.com%2F%40deaneigenmann%2Foptimistic-contracts-fb75efa7ca84)%3A%20contracts%20that%20accept%20all%20information%20as%20fact%20until%20proven%20to%20be%20non-factual.%20This%20allows%20for%20a%20reduction%20in%20the%20cost%20of%20verifying%20data%2C%20as%20on-chain%20verification%20would%20only%20be%20necessary%20when%20one%20is%20sure%20that%20the%20data%20is%20false.%0A",lastUpdatedAt:1753110537e3},{lazy:()=>o2(()=>import("./fraud-proofs-BZDl_JyK.js"),[]),path:"/research/primitives/fraud-proofs.html",type:"mdx",filePath:"research/primitives/fraud-proofs.mdx",content:"%23%20Fraud%20Proofs%0A%0A-%20date%3A%202023-02-04%0A-%20last%20updated%3A%202023-02-04%0A%0A%23%23%20Overview%0A%0AFollowing%20is%20an%20excerpt%20from%20Fraud%20and%20Data%20Availability%20Proofs%3ADetecting%20Invalid%20Blocks%20in%20Light%20Clients%20%5B%5E1%5D.%0A%0A%3E%20Light%20clients%2C%20also%20known%20as%20Simple%20Payment%20Verification%20(SPV)%20clients%2C%20are%20nodes%20which%20only%20download%20a%20small%20portion%20of%20the%20data%20in%20a%20blockchain%2C%20and%20use%20indirect%20means%20to%20verify%20that%20a%20given%20chain%20is%20valid.%20Instead%20of%20validating%20blocks%2C%20they%20assume%20that%20the%20chain%20favoured%20by%20the%20blockchain%E2%80%99s%20consensus%20algorithm%20only%20contains%20valid%20blocks%2C%20and%20that%20the%20majority%20of%20block%20producers%20are%20honest.%20By%20allowing%20such%20clients%20to%20receive%20fraud%20proofs%20generated%20by%20fully%20validating%20nodes%20that%20show%20that%20a%20block%20violates%20the%20protocol%20rules%2C%20and%20combining%20this%20with%20probabilistic%20sampling%20techniques%20to%20verify%20that%20all%20of%20the%20data%20in%20a%20block%20actually%20is%20available%20to%20be%20downloaded%20so%20that%20fraud%20can%20be%20detected%2C%20we%20can%20eliminate%20the%20honest-majority%20assumption%20for%20block%20validity%2C%20and%20instead%20make%20much%20weaker%20assumptions%20about%20a%20minimum%20number%20of%20honest%20nodes%20that%20rebroadcast%20data.%20Fraud%20and%20data%20availability%20proofs%20are%20key%20to%20enabling%20on-chain%20scaling%20of%20blockchains%20while%20maintaining%20a%20strong%20assurance%20that%20on-chain%20data%20is%20available%20and%20valid.%20We%20present%2C%20implement%2C%20and%20evaluate%20a%20fraud%20and%20data%20availability%20proof%20system.%0A%0AHere%20is%20an%20overview%20of%20how%20NEAR%20bridge%20uses%20this%20in%20an%20optimistic%20approach%0A%0AThe%20leading%20NEAR%20Ethereum%20Bridge%20today%20Near%20Rainbow%20Bridge%20uses%20an%20optimistic%20approach.%20Following%20is%20an%20excerpt%20from%20NearOnEthClient%20%5B%5Enear-1%5D.%0A%0A%3E%20we%20adopt%20the%20optimistic%20%5B%5Enear-2%5D%20approach%20where%20NearOnEthClient%20verifies%20everything%20in%20the%20NEAR%20header%20except%20the%20signatures.%20Then%20anyone%20can%20challenge%20a%20signature%20in%20a%20submitted%20header%20within%20a%204-hour%20challenge%20window.%20The%20challenge%20requires%20verification%20of%20a%20single%20Ed25519%20signature%20which%20would%20cost%20about%20500k%20Ethereum%20gas%20(expensive%2C%20but%20possible).%0A%0A%23%23%20Footnotes%0A%0A%5B%5E1%5D%3A%20%5BFraud%20and%20Data%20Availability%20Proofs%3ADetecting%20Invalid%20Blocks%20in%20Light%20Clients%5D(http%3A%2F%2Fwww0.cs.ucl.ac.uk%2Fstaff%2FM.AlBassam%2Fpublications%2Ffraudproofs.pdf)%3A%20Fraud%20and%20data%20availability%20proofs%20are%20key%20to%20enabling%20on-chain%20scaling%20of%20blockchains%20while%20maintaining%20a%20strong%20assurance%20that%20on-chain%20data%20is%20available%20and%20valid.%0A%5B%5Enear-1%5D%3A%20%5BNEAR%3A%20ETH-NEAR%20Rainbow%20Bridge%5D(https%3A%2F%2Fnear.org%2Fblog%2Feth-near-rainbow-bridge%2F)%3A%20a%20bridge%2C%20called%20Rainbow%20Bridge%2C%20to%20connect%20the%20Ethereum%20and%20NEAR%20blockchains.%0A%5B%5Enear-2%5D%3A%20%5BOptimistic%20Contracts%5D(https%3A%2F%2Fmedium.com%2F%40deaneigenmann%2Foptimistic-contracts-fb75efa7ca84)%3A%20contracts%20that%20accept%20all%20information%20as%20fact%20until%20proven%20to%20be%20non-factual.%20This%20allows%20for%20a%20reduction%20in%20the%20cost%20of%20verifying%20data%2C%20as%20on-chain%20verification%20would%20only%20be%20necessary%20when%20one%20is%20sure%20that%20the%20data%20is%20false.%0A",lastUpdatedAt:1753110537e3},{lazy:()=>o2(()=>import("./intro-C0drBLXZ.js"),[]),path:"/research/primitives/intro",type:"mdx",filePath:"research/primitives/intro.mdx",content:"%23%20Cryptographic%20and%20Mathematic%20Primitives%0A%0A-%20date%3A%202023-02-04%0A-%20last%20updated%3A%202023-02-04%0A%0A%23%23%20Overview%0A%0AHere%20we%20review%20cryptographic%20and%20mathematic%20primitives%0A%0AFor%20each%20primitive%20we%20review%0A%0A-%20Cryptographic%20Primitive%0A-%20Applications%0A-%20Implementations%20(codebases)%0A-%20Zero%20Knowledge%20relationships%2Fimprovements%0A",lastUpdatedAt:1753110537e3},{lazy:()=>o2(()=>import("./intro-C0drBLXZ.js"),[]),path:"/research/primitives/intro.html",type:"mdx",filePath:"research/primitives/intro.mdx",content:"%23%20Cryptographic%20and%20Mathematic%20Primitives%0A%0A-%20date%3A%202023-02-04%0A-%20last%20updated%3A%202023-02-04%0A%0A%23%23%20Overview%0A%0AHere%20we%20review%20cryptographic%20and%20mathematic%20primitives%0A%0AFor%20each%20primitive%20we%20review%0A%0A-%20Cryptographic%20Primitive%0A-%20Applications%0A-%20Implementations%20(codebases)%0A-%20Zero%20Knowledge%20relationships%2Fimprovements%0A",lastUpdatedAt:1753110537e3},{lazy:()=>o2(()=>import("./light-clients-OHQgXm5D.js"),[]),path:"/research/primitives/light-clients",type:"mdx",filePath:"research/primitives/light-clients.mdx",content:"%23%20Light%20Clients%0A%0A-%20date%3A%202023-02-04%0A-%20last%20updated%3A%202023-02-04%0A%0A%23%23%20Overview%0A%0A%23%23%20References%0A%0A-%20%5BBuilding%20Helios%3A%20Fully%20trustless%20access%20to%20Ethereum%5D(https%3A%2F%2Fa16zcrypto.com%2Fbuilding-helios-ethereum-light-client%2F)%3A%20a%20Rust-based%20Ethereum%20light%20client%20we%20developed%20that%20provides%20fully%20trustless%20access%20to%20Ethereum.%0A-%20%5BAnnotated%20Ethereum%20Roadmap%5D(https%3A%2F%2Fnotes.ethereum.org%2F%40domothy%2Froadmap%23Annotated-Ethereum-Roadmap)%0A-%0A",lastUpdatedAt:1753110537e3},{lazy:()=>o2(()=>import("./light-clients-OHQgXm5D.js"),[]),path:"/research/primitives/light-clients.html",type:"mdx",filePath:"research/primitives/light-clients.mdx",content:"%23%20Light%20Clients%0A%0A-%20date%3A%202023-02-04%0A-%20last%20updated%3A%202023-02-04%0A%0A%23%23%20Overview%0A%0A%23%23%20References%0A%0A-%20%5BBuilding%20Helios%3A%20Fully%20trustless%20access%20to%20Ethereum%5D(https%3A%2F%2Fa16zcrypto.com%2Fbuilding-helios-ethereum-light-client%2F)%3A%20a%20Rust-based%20Ethereum%20light%20client%20we%20developed%20that%20provides%20fully%20trustless%20access%20to%20Ethereum.%0A-%20%5BAnnotated%20Ethereum%20Roadmap%5D(https%3A%2F%2Fnotes.ethereum.org%2F%40domothy%2Froadmap%23Annotated-Ethereum-Roadmap)%0A-%0A",lastUpdatedAt:1753110537e3},{lazy:()=>o2(()=>import("./primitives-BvkeSSbm.js"),[]),path:"/research/primitives/primitives",type:"mdx",filePath:"research/primitives/primitives.mdx",content:"%23%20Cryptographic%20Primitives%0A%0A-%20date%3A%202023-02-04%0A-%20last%20updated%3A%202023-02-04%0A%0A%23%23%20Overview%0A%0ACryptographic%20and%20Mathematic%20Primitives%0A%0A%23%23%20Reference%20Implementations%0A%0A**general%20primitives**%0A%0A-%20%5Bbloom%20filter%5D(https%3A%2F%2Fen.wikipedia.org%2Fwiki%2FBloom_filter)%0A%20%20-%20%5Bgeth%20bloombits%5D(https%3A%2F%2Fgithub.com%2Fethereum%2Fgo-ethereum%2Ftree%2Fmaster%2Fcore%2Fbloombits)%20(go)%3A%20Package%20bloombits%20implements%20bloom%20filtering%20on%20batches%20of%20data.%0A%0A-%20%5Bint_to_bytes%5D(https%3A%2F%2Fethereum.github.io%2Fexecution-specs%2Fautoapi%2Fethereum%2Fbase_types%2Findex.html)%0A%20%20-%20%5Blighthouse%20int_to_bytes%5D(https%3A%2F%2Fgithub.com%2Fsigp%2Flighthouse%2Ftree%2Fstable%2Fconsensus%2Fint_to_bytes)%20(rust)%3A%20The%20Eth%202.0%20specification%20uses%20%60int.to_bytes(2%2C%20'little')%60%2C%20which%20throws%20an%20error%20if%20%60int%60%20doesn't%20fit%20within%203%20bytes.%20The%20specification%20relies%20upon%20implicit%20asserts%20for%20some%20validity%20conditions%2C%20so%20we%20ensure%20the%20calling%20function%20is%20aware%20of%20the%20error%20condition%20as%20opposed%20to%20hiding%20it%20with%20a%20modulo.%0A-%20%5Bleaky%20bucket%5D(https%3A%2F%2Fen.wikipedia.org%2Fwiki%2FLeaky_bucket%23As_a_meter)%0A%20%20-%20%5Bprysm%5D(https%3A%2F%2Fgithub.com%2Fprysmaticlabs%2Fprysm%2Fblob%2Fdevelop%2Fcontainer%2Fleaky-bucket%2Fleakybucket.go)%3A%20leaky%20bucket%20as%20a%20meter%0A-%20linked%20list%0A%20%20-%20%5Bprysm%5D(https%3A%2F%2Fgithub.com%2Fprysmaticlabs%2Fprysm%2Ftree%2Fdevelop%2Fcontainer%2Fdoubly-linked-list)%20(go)%3A%20doubly%20linked%20list%0A-%20%5Bmerkle%20patrica%20tries%5D(https%3A%2F%2Fethereum.org%2Fen%2Fdevelopers%2Fdocs%2Fdata-structures-and-encoding%2Fpatricia-merkle-trie%2F)%0A%20%20-%20%5Bgeth%20trie%5D(https%3A%2F%2Fgithub.com%2Fethereum%2Fgo-ethereum%2Fblob%2Fmaster%2Ftrie%2Ftrie.go%23L17)%20(go)%3A%20Package%20trie%20implements%20Merkle%20Patricia%20Tries.%0A%20%20-%20%5Bgeth%20database%5D(https%3A%2F%2Fgithub.com%2Fethereum%2Fgo-ethereum%2Fblob%2Fmaster%2Fcore%2Fstate%2Fdatabase.go%23L63)%20(go)%3A%20Trie%20is%20a%20Ethereum%20Merkle%20Patricia%20trie.%0A-%20%5Bmerkle%20trees%5D(https%3A%2F%2Fen.wikipedia.org%2Fwiki%2FMerkle_tree)%0A%20%20-%20%5Bprysm%20sparse_merkle%5D(https%3A%2F%2Fgithub.com%2Fprysmaticlabs%2Fprysm%2Fblob%2Fdevelop%2Fcontainer%2Ftrie%2Fsparse_merkle.go)%20(go)%3A%20defines%20utilities%20for%20sparse%20merkle%20tries%20for%20Ethereum%20consensus.%0A%20%20-%20%5Blighthouse%20cached_tree_hash%5D(https%3A%2F%2Fgithub.com%2Fsigp%2Flighthouse%2Ftree%2Fstable%2Fconsensus%2Fcached_tree_hash)%20(rust)%3A%20Sparse%20Merkle%20tree%20suitable%20for%20tree%20hashing%20vectors%20and%20lists.%0A%20%20-%20%5Blighthouse%20tree_hash%5D(https%3A%2F%2Fgithub.com%2Fsigp%2Flighthouse%2Ftree%2Fstable%2Fconsensus%2Ftree_hash)%20(rust)%3A%20Convenience%20method%20for%20%60MerkleHasher%60%20which%20also%20provides%20some%20fast-paths%20for%20small%20trees.%60minimum_leaf_count%60%20will%20only%20be%20used%20if%20it%20is%20greater%20than%20or%20equal%20to%20the%20minimum%20number%20of%20leaves%20that%20can%20be%20created%20from%20%60bytes%60.%0A%20%20-%20%5Blighthouse%20tree_hash_derive%5D(https%3A%2F%2Fgithub.com%2Fsigp%2Flighthouse%2Ftree%2Fstable%2Fconsensus%2Ftree_hash_derive)%20(rust)%3A%0A%20%20-%20%5Btendermint%20go%5D(https%3A%2F%2Fgithub.com%2Ftendermint%2Ftendermint%2Ftree%2Fmain%2Fcrypto%2Fmerkle)%20(go)%3A%20Merkle%20Tree%20For%20smaller%20static%20data%20structures%20that%20don't%20require%20immutable%20snapshots%20or%20mutability%3B%20for%20instance%20the%20transactions%20and%20validation%20signatures%20of%20a%20block%20can%20be%20hashed%20using%20this%20simple%20merkle%20tree%20logic.%0A%20%20-%20%5Bparitytech%20binary-merkle-trie%5D(https%3A%2F%2Fgithub.com%2Fparitytech%2Fsubstrate%2Ftree%2Fmaster%2Futils%2Fbinary-merkle-tree)%20(rust)%3A%20implements%20a%20simple%20binary%20Merkle%20Tree%20utilities%20required%20for%20inter-op%20with%20Ethereum%20bridge%20%26%20Solidity%20contract.%0A%20%20-%20%5Bsnowbridge%20merkle.go%5D(https%3A%2F%2Fgithub.com%2FSnowfork%2Fsnowbridge%2Fblob%2Fmain%2Frelayer%2Fcrypto%2Fmerkle%2Fmerkle.go)%0A%20%20-%20%5Bsnowbridge%20merkleization.rs%5D(https%3A%2F%2Fgithub.com%2FSnowfork%2Fsnowbridge%2Fblob%2Fmain%2Fparachain%2Fpallets%2Fethereum-beacon-client%2Fsrc%2Fmerkleization.rs)%0A-%20%5Bmerkle_proof%5D(https%3A%2F%2Fgithub.com%2Fethereum%2Fconsensus-specs%2Fblob%2Fdev%2Fssz%2Fmerkle-proofs.mdx)%20%5Bexplainer%5D(https%3A%2F%2Fsoliditydeveloper.com%2Fmerkle-tree)%0A%20%20-%20%5Blighthouse%20merkle_proof%5D(https%3A%2F%2Fgithub.com%2Fsigp%2Flighthouse%2Ftree%2Fstable%2Fconsensus%2Fmerkle_proof)%20(rust)%3A%20efficiently%20represents%20a%20Merkle%20tree%20of%20fixed%20depth%20where%20only%20the%20first%20N%20indices%20are%20populated%20by%20non-zero%20leaves%20(perfect%20for%20the%20deposit%20contract%20tree).%0A%20%20-%20%5Bsnowbridge%20simplified_mmr_proof.go%5D(https%3A%2F%2Fgithub.com%2FSnowfork%2Fsnowbridge%2Fblob%2Fmain%2Frelayer%2Fcrypto%2Fmerkle%2Fsimplified_mmr_proof.go)%0A%20%20-%20%5Bsnowbridge%20merkle-proof%20rust%5D(https%3A%2F%2Fgithub.com%2FSnowfork%2Fsnowbridge%2Ftree%2Fmain%2Fparachain%2Fpallets%2Fbasic-channel%2Fmerkle-proof)%0A%20%20-%20%5Bsnowbridge%20MerkleProof.sol%5D(https%3A%2F%2Fgithub.com%2FSnowfork%2Fsnowbridge%2Fblob%2Fmain%2Fcore%2Fpackages%2Fcontracts%2Fcontracts%2Futils%2FMerkleProof.sol)%0A%20%20-%20%5Bnpm%20package%20eth-proof%5D(https%3A%2F%2Fwww.npmjs.com%2Fpackage%2Feth-proof)%0A-%20%5BMerkle%20Mountain%20Range%5D(https%3A%2F%2Fdocs.grin.mw%2Fwiki%2Fchain-state%2Fmerkle-mountain-range%2F)%0A%20%20-%20%5Bparitytech%20merkle-mountain-range%5D(https%3A%2F%2Fgithub.com%2Fparitytech%2Fsubstrate%2Ftree%2Fmaster%2Fprimitives%2Fmerkle-mountain-range)%20(rust)%0A%20%20-%20%5Bharmony%20mmr%20(go)%5D(https%3A%2F%2Fgithub.com%2Fpeekpi%2Fharmony%2Ftree%2FmmrHardfork%2Finternal%2Fmmr)%3A%20Adds%20a%20merkle%20mountain%20range%20to%20harmony's%20core%20protocol%20to%20support%20light%20clients%20(WIP)%20%5BPR4198%5D(https%3A%2F%2Fgithub.com%2Fharmony-one%2Fharmony%2Fpull%2F4198%2Ffiles)%0A-%20queues%0A%20%20-%20%5Bprysm%5D(https%3A%2F%2Fgithub.com%2Fprysmaticlabs%2Fprysm%2Ftree%2Fdevelop%2Fcontainer%2Fqueue)%20(go)%3A%20priority%20queue%0A%20%20-%20%5Bsnowbridge%20MMRProof.sol%5D(https%3A%2F%2Fgithub.com%2FSnowfork%2Fsnowbridge%2Fblob%2Fmain%2Fcore%2Fpackages%2Fcontracts%2Fcontracts%2Futils%2FMMRProof.sol)%0A%20%20-%20%5Bsnowfork%20merkle-mountain-range%5D(https%3A%2F%2Fgithub.com%2FSnowfork%2Fmerkle-mountain-range)%0A-%20safe-arithmetic%0A%20%20-%20%5Blighthouse%20safe_arith%5D(https%3A%2F%2Fgithub.com%2Fsigp%2Flighthouse%2Ftree%2Fstable%2Fconsensus%2Fsafe_arith)%20(rust)%3A%20Library%20for%20safe%20arithmetic%20on%20integers%2C%20avoiding%20overflow%20and%20division%20by%20zero.%0A-%20slice%0A%20%20-%20%5Bprysm%5D(https%3A%2F%2Fgithub.com%2Fprysmaticlabs%2Fprysm%2Ftree%2Fdevelop%2Fcontainer%2Fslice)%20(go)%0A-%20%5Btries%5D(https%3A%2F%2Fethereum.org%2Fen%2Fdevelopers%2Fdocs%2Fdata-structures-and-encoding%2Fpatricia-merkle-trie%2F)%0A%20%20-%20%5Bparitytech%20trie%5D(https%3A%2F%2Fgithub.com%2Fparitytech%2Fsubstrate%2Ftree%2Fmaster%2Fprimitives%2Ftrie)%3A%20Utility%20functions%20to%20interact%20with%20Substrate's%20Base-16%20Modified%20Merkle%20Patricia%20tree%20(%22trie%22).%0A-%20%5BVerifiable%20Delay%20Function%5D(https%3A%2F%2Feprint.iacr.org%2F2018%2F623.pdf)%0A%20%20-%20%5Bharmony%20vdf%5D(https%3A%2F%2Fgithub.com%2Fharmony-one%2Fharmony%2Ftree%2Fmain%2Fcrypto%2Fvdf)%20(go)%3A%20Package%20vdf%20is%20a%20proof-of-concept%20implementation%20of%20a%20delay%20function%20and%20the%20security%20properties%20are%20not%20guaranteed.%0A-%20%5BVerfiable%20Random%20Function%5D(https%3A%2F%2Fen.wikipedia.org%2Fwiki%2FVerifiable_random_function)%0A%20%20-%20%5Bharmony%20vrf%5D(https%3A%2F%2Fgithub.com%2Fharmony-one%2Fharmony%2Ftree%2Fmain%2Fcrypto%2Fvrf)%20(go)%3A%20A%20VRF%20is%20a%20pseudorandom%20function%20f_k%20from%20a%20secret%20key%20k%2C%20such%20that%20that%20knowledge%20of%20k%20not%20only%20enables%20one%20to%20evaluate%20f_k%20at%20for%20any%20message%20m%2C%20but%20also%20to%20provide%20an%20NP-proof%20that%20the%20value%20f_k(m)%20is%20indeed%20correct%20without%20compromising%20the%20unpredictability%20of%20f_k%20for%20any%20m'%20!%3D%20m.%20%5Bhttps%3A%2F%2Fieeexplore.ieee.org%2Fdocument%2F814584%5D(https%3A%2F%2Fieeexplore.ieee.org%2Fdocument%2F814584)%0A%20%20-%20%5Bparitytech%20vrf%5D(https%3A%2F%2Fgithub.com%2Fparitytech%2Fsubstrate%2Ftree%2Fmaster%2Fprimitives%2Fconsensus%2Fvrf)%3A%20Primitives%20for%20VRF-based%20consensus%20engines.%20Schnorrkel-based%20VRF.%0A-%20tree%0A%20%20-%20%5Bparitytech%20fork-tree%5D(https%3A%2F%2Fgithub.com%2Fparitytech%2Fsubstrate%2Ftree%2Fmaster%2Futils%2Ffork-tree)%20(rust)%3A%20Utility%20library%20for%20managing%20tree-like%20ordered%20data%20with%20logic%20for%20pruning%20the%20tree%20while%20finalizing%20nodes.%0A%0A**Hash%20functions**%0A%0A%5BSHA-2%5D(https%3A%2F%2Fen.wikipedia.org%2Fwiki%2FSHA-2)%0A%0A%5Bdifference%20between%20sha256%20and%20kecakk256%5D(https%3A%2F%2Fwww.geeksforgeeks.org%2Fdifference-between-sha-256-and-keccak-256%2F)%0A%0A-%20%5BArgon%202%5D(https%3A%2F%2Fen.wikipedia.org%2Fwiki%2FArgon2)%0A%20%20-%20%5BArgon2%5D(https%3A%2F%2Fgithub.com%2FP-H-C%2Fphc-winner-argon2)%3A%20eference%20C%20implementation%20of%20Argon2.%0A%20%20-%20%5Bx%2Fcrypto%20Argon2%5D(https%3A%2F%2Fcs.opensource.google%2Fgo%2Fx%2Fcrypto%2F%2B%2Fmaster%3Aargon2%2Fargon2.go)%20(go)%3A%20Package%20argon2%20implements%20the%20key%20derivation%20function%20Argon2.%0A%20%20-%20%5Brust-argon2%5D(https%3A%2F%2Fgithub.com%2Fsru-systems%2Frust-argon2)%20(rust)%3A%20Rust%20library%20for%20hashing%20passwords%20using%20Argon2.%0A%20%20-%20%5Bnode-argon2%5D(https%3A%2F%2Fwww.npmjs.com%2Fpackage%2Fargon2)%20(typescript)%3A%20Bindings%20to%20the%20reference%20Argon2%20implementation.%0A-%20%5Bblake%5D(%3Chttps%3A%2F%2Fen.wikipedia.org%2Fwiki%2FBLAKE_(hash_function)%3E)%0A%20%20-%20%5Bblake2%5D(https%3A%2F%2Fwww.blake2.net%2F)%20hash%20function%0A%20%20%20%20-%20%5Bethereum-go-ethereum%5D(https%3A%2F%2Fgithub.com%2Fethereum%2Fgo-ethereum%2Ftree%2Fmaster%2Fcrypto%2Fblake2b)%20(go)%3A%20Package%20blake2b%20implements%20the%20BLAKE2b%20hash%20algorithm%20defined%20by%20RFC%207693%20and%20the%20extendable%20output%20function%20(XOF)%20BLAKE2Xb.%0A%20%20%20%20-%20%5Bbsc%20blake2b%5D(https%3A%2F%2Fgithub.com%2Fbnb-chain%2Fbsc%2Ftree%2Fmaster%2Fcrypto%2Fblake2b)%20(go)%3A%20Package%20blake2b%20implements%20the%20BLAKE2b%20hash%20algorithm%20defined%20by%20RFC%207693%20and%20the%20extendable%20output%20function%20(XOF)%20BLAKE2Xb.%0A%20%20-%20%5Bblake3%5D(https%3A%2F%2Fgithub.com%2FBLAKE3-team%2FBLAKE3)%0A%20%20%20%20-%20%5Bblake3%20rust%20crate%5D(https%3A%2F%2Fcrates.io%2Fcrates%2Fblake3)%20(rust)%3A%20BLAKE3%20is%20based%20on%20an%20optimized%20instance%20of%20the%20established%20hash%20function%20BLAKE2%20and%20on%20the%20original%20Bao%20tree%20mode.%0A%20%20%20%20-%20%5Bzeebo%20blake3%5D(https%3A%2F%2Fgithub.com%2Fzeebo%2Fblake3)%20(go)%20%3A%20Pure%20Go%20implementation%20of%20BLAKE3%20with%20AVX2%20and%20SSE4.1%20acceleration.%0A-%20%5Bkeccak256%5D(https%3A%2F%2Fkeccak.team%2Fkeccak.html)%20hash%20function%0A%20%20-%20%5Bprysm%5D(https%3A%2F%2Fgithub.com%2Fprysmaticlabs%2Fprysm%2Fblob%2Fdevelop%2Fcrypto%2Fhash%2Fhash.go)%20(go)%0A%20%20-%20%5Blighthouse%5D(https%3A%2F%2Fgithub.com%2Fsigp%2Flighthouse%2Fblob%2Fstable%2Fcrypto%2Feth2_hashing%2Fsrc%2Flib.rs)%20(rust)%3A%20wrapper%20over%20two%20SHA256%20crates%3A%20%60sha2%60%20and%20%60ring%60%0A%20%20-%20%5Bbsc%20crypto%5D(https%3A%2F%2Fgithub.com%2Fbnb-chain%2Fbsc%2Fblob%2Fmaster%2Fcrypto%2Fcrypto.go%23L91)%20(go)%0A%20%20-%20%5Bharmony%20hash%5D(https%3A%2F%2Fgithub.com%2Fharmony-one%2Fharmony%2Fblob%2Fmain%2Fcrypto%2Fhash%2Fhash.go)%20(go)%0A%20%20-%20%5Bsnowbridge%20keccak%5D(https%3A%2F%2Fgithub.com%2FSnowfork%2Fsnowbridge%2Fblob%2Fmain%2Frelayer%2Fcrypto%2Fkeccak%2Fkeccak.go)%0A-%20%5Bsha256%5D(https%3A%2F%2Fpkg.go.dev%2Fcrypto%2Fsha256)%0A%20%20-%20%5Btendermint%20tmhash%5D(https%3A%2F%2Fgithub.com%2Ftendermint%2Ftendermint%2Ftree%2Fmain%2Fcrypto%2Ftmhash)%0A%0A**encryption**%0A%0A-%20%5BECIES%5D(https%3A%2F%2Fcryptobook.nakov.com%2Fasymmetric-key-ciphers%2Fecies-public-key-encryption)%20(go)%3A%20a%20hybrid%20encryption%20scheme%0A%20%20-%20%5Bethereum-go-ethereum%5D(https%3A%2F%2Fgithub.com%2Fethereum%2Fgo-ethereum%2Ftree%2Fmaster%2Fcrypto%2Fecies)%20(go)%0A%20%20-%20%5Bbsc%20ecies%5D(https%3A%2F%2Fgithub.com%2Fbnb-chain%2Fbsc%2Ftree%2Fmaster%2Fcrypto%2Fecies)%20(go)%0A-%20%5Bascii%20armored%20encryption%20uses%20ed25519%5D(https%3A%2F%2Fwww.rfc-editor.org%2Frfc%2Fpdfrfc%2Frfc4880.txt.pdf)%0A%20%20-%20%5Bethereum-go-ethereum%5D(https%3A%2F%2Fgithub.com%2Fethereum%2Fgo-ethereum%2Ftree%2Fmaster%2Fcrypto%2Fsignify)%20(go)%0A%20%20-%20%5Bbsc%20signify%5D(https%3A%2F%2Fgithub.com%2Fbnb-chain%2Fbsc%2Ftree%2Fmaster%2Fcrypto%2Fsignify)%20(go)%0A%20%20-%20%5Btenderming%20armor%5D(https%3A%2F%2Fgithub.com%2Ftendermint%2Ftendermint%2Fblob%2Fmain%2Fcrypto%2Farmor%2Farmor.go)%20(go)%0A-%20%5BChaCha20-Poly1305%5D(https%3A%2F%2Fen.wikipedia.org%2Fwiki%2FChaCha20-Poly1305)%3A%20an%20authenticated%20encryption%20with%20additional%20data%20(AEAD)%20algorithm%0A%20%20-%20%5Btendermint%20xchacha20poly1305%5D(https%3A%2F%2Fgithub.com%2Ftendermint%2Ftendermint%2Ftree%2Fmain%2Fcrypto%2Fxchacha20poly1305)%20(go)%0A-%20%5BXSalsa20%5D(https%3A%2F%2Flibsodium.gitbook.io%2Fdoc%2Fadvanced%2Fstream_ciphers%2Fxsalsa20)%20(go)%3A%20XSalsa20%20is%20a%20stream%20cipher%20based%20upon%20Salsa20%20but%20with%20a%20much%20longer%20nonce%3A%20192%20bits%20instead%20of%2064%20bits.%0A%20%20-%20%5Btendermint%20xsalsa20symmetric%5D(https%3A%2F%2Fgithub.com%2Ftendermint%2Ftendermint%2Ftree%2Fmain%2Fcrypto%2Fxsalsa20symmetric)%20(go)%3A%20secret%20must%20be%2032%20bytes%20long.%20Use%20something%20like%20Sha256(Bcrypt(passphrase)).%20The%20ciphertext%20is%20(secretbox.Overhead%20%2B%2024)%20bytes%20longer%20than%20the%20plaintext.%0A%0A**Random%20number%20generators**%0A%0A-%20%5Bprysm%5D(https%3A%2F%2Fgithub.com%2Fprysmaticlabs%2Fprysm%2Fblob%2Fdevelop%2Fcrypto%2Frand%2Frand.go)%20(go)%0A%0A**Serialization%2FDeSerialization**%0A%0A-%20%5BRECURSIVE-LENGTH%20PREFIX%20(RLP)%20SERIALIZATION%5D(https%3A%2F%2Fethereum.org%2Fen%2Fdevelopers%2Fdocs%2Fdata-structures-and-encoding%2Frlp%2F)%0A%20%20-%20%5Bethereum%20rlp%5D(https%3A%2F%2Fgithub.com%2Fethereum%2Fgo-ethereum%2Ftree%2Fmaster%2Frlp)%0A%20%20-%20%5Bharmony%20rlp%5D(https%3A%2F%2Fgithub.com%2Fharmony-one%2Fharmony%2Fblob%2Fmain%2Fcrypto%2Fhash%2Frlp.go)%0A-%20%5BSimple%20Serialize%5D(https%3A%2F%2Fethereum.org%2Fen%2Fdevelopers%2Fdocs%2Fdata-structures-and-encoding%2Fssz%2F)%0A%20%20-%20%5Bsnowbridge%20ssz.rs%5D(https%3A%2F%2Fgithub.com%2FSnowfork%2Fsnowbridge%2Fblob%2Fmain%2Fparachain%2Fpallets%2Fethereum-beacon-client%2Fsrc%2Fssz.rs)%0A%0A-%20%5BMerkle%20Patricia%20Trie%5D(https%3A%2F%2Fethereum.org%2Fen%2Fdevelopers%2Fdocs%2Fdata-structures-and-encoding%2Fpatricia-merkle-trie%2F)%0A%0A**Threading**%0A%0A-%20%5Bprysm%5D(https%3A%2F%2Fgithub.com%2Fprysmaticlabs%2Fprysm%2Fblob%2Fdevelop%2Fcontainer%2Fthread-safe%2Fmap.go)%3A%20contains%20generic%20containers%20that%20are%20protected%20either%20by%20Mutexes%20or%20atomics%20underneath%20the%20hood.%0A%0A**zero%20knowledge**%0A%0A-%20hash%20functions%0A%20%20-%20%5BPoseidon%5D(https%3A%2F%2Fwww.usenix.org%2Fsystem%2Ffiles%2Fsec21-grassi.pdf)%3A%20A%20New%20Hash%20Function%20for%0A%20%20%20%20Zero-Knowledge%20Proof%20Systems%20(%5Bvideo%5D(https%3A%2F%2Fyoutu.be%2FhUx3WpDV_l0))%0A%0A%23%23%20References%0A%0A-%20%5BBloom%20Filter%20Wikipedia%5D(https%3A%2F%2Fen.wikipedia.org%2Fwiki%2FBloom_filter)%3A%20A%20Bloom%20filter%20is%20a%20space-efficient%20probabilistic%20data%20structure%2C%20conceived%20by%20Burton%20Howard%20Bloom%20in%201970%2C%20that%20is%20used%20to%20test%20whether%20an%20element%20is%20a%20member%20of%20a%20set.%0A-%20%5BBloom%20Filters%20Explainer%5D(https%3A%2F%2Fwww.jasondavies.com%2Fbloomfilter%2F)%3A%20The%20bloom%20filter%20essentially%20consists%20of%20a%20bit%20vector%20of%20length%20m%2C%20represented%20by%20the%20central%20column.%0A-%20%5BBloomfilter%20Lesson%2011%20-%20Blockchain%20Academy%5D(https%3A%2F%2Fblockchain-academy.hs-mittweida.de%2Fcoursesblockchain-introduction-technical-beginner-to-intermediate%2Flessons%2Flesson-11-bloomfilter%2F)%3A%20Blockchain%20Introduction%20Technical%20%E2%80%93%20Beginner%20to%20Intermediate%20Lesson%2011%20%E2%80%93%20Bloomfilter.%0A-%20%5BCuckoo%20Hashing%5D(https%3A%2F%2Fciteseerx.ist.psu.edu%2Fviewdoc%2Fdownload%3Fdoi%3D10.1.1.25.4189%26rep%3Drep1%26type%3Dpdf)%3A%20a%20simple%20dictionary%20with%20worst%20case%20constant%20lookup%20time%2C%20equaling%20the%20theoretical%20performance%20of%20the%20classic%20dynamic%20perfect%20hashing%20scheme%0A%20%20of%20Dietzfelbinger%20et%20al.%0A-%20%5BCukoo%20Hashing%20Visualization%5D(http%3A%2F%2Fwww.lkozma.net%2Fcuckoo_hashing_visualization%2F)%3A%20Visualization%20of%20Cukoo%20Hashing%20an%20elegant%20method%20for%20resolving%20collisions%20in%20hash%20tables.%0A-%20%5BFast%20Fourier%20Transforms%5D(https%3A%2F%2Fvitalik.ca%2Fgeneral%2F2019%2F05%2F12%2Ffft.html)%3A%20Vitaliks%20explaniner%20on%20Fast%20Fourier%20Transforms.%20Trigger%20warning%3A%20specialized%20mathematical%20topic%2C%20with%0A%20%20special%20thanks%20to%20Karl%20Floersch%20for%20feedback.%0A-%20%5BMerkle%20Trees%2FMerkle%20Proofs%20Lesson%2010%20-%20Blockchain%20Academy%5D(https%3A%2F%2Fblockchain-academy.hs-mittweida.de%2Fcourses%2Fblockchain-introduction-technical-beginner-to-intermediate%2Flessons%2Flesson-10-merkle-trees-merkle-proofs%2F)%3A%20Blockchain%20Introduction%20Technical%20%E2%80%93%20Beginner%20to%20Intermediate%20Lesson%2010%20%E2%80%93%20Merkle%20Trees%2FMerkle%20Proofs.%0A",lastUpdatedAt:1753125084e3},{lazy:()=>o2(()=>import("./primitives-BvkeSSbm.js"),[]),path:"/research/primitives/primitives.html",type:"mdx",filePath:"research/primitives/primitives.mdx",content:"%23%20Cryptographic%20Primitives%0A%0A-%20date%3A%202023-02-04%0A-%20last%20updated%3A%202023-02-04%0A%0A%23%23%20Overview%0A%0ACryptographic%20and%20Mathematic%20Primitives%0A%0A%23%23%20Reference%20Implementations%0A%0A**general%20primitives**%0A%0A-%20%5Bbloom%20filter%5D(https%3A%2F%2Fen.wikipedia.org%2Fwiki%2FBloom_filter)%0A%20%20-%20%5Bgeth%20bloombits%5D(https%3A%2F%2Fgithub.com%2Fethereum%2Fgo-ethereum%2Ftree%2Fmaster%2Fcore%2Fbloombits)%20(go)%3A%20Package%20bloombits%20implements%20bloom%20filtering%20on%20batches%20of%20data.%0A%0A-%20%5Bint_to_bytes%5D(https%3A%2F%2Fethereum.github.io%2Fexecution-specs%2Fautoapi%2Fethereum%2Fbase_types%2Findex.html)%0A%20%20-%20%5Blighthouse%20int_to_bytes%5D(https%3A%2F%2Fgithub.com%2Fsigp%2Flighthouse%2Ftree%2Fstable%2Fconsensus%2Fint_to_bytes)%20(rust)%3A%20The%20Eth%202.0%20specification%20uses%20%60int.to_bytes(2%2C%20'little')%60%2C%20which%20throws%20an%20error%20if%20%60int%60%20doesn't%20fit%20within%203%20bytes.%20The%20specification%20relies%20upon%20implicit%20asserts%20for%20some%20validity%20conditions%2C%20so%20we%20ensure%20the%20calling%20function%20is%20aware%20of%20the%20error%20condition%20as%20opposed%20to%20hiding%20it%20with%20a%20modulo.%0A-%20%5Bleaky%20bucket%5D(https%3A%2F%2Fen.wikipedia.org%2Fwiki%2FLeaky_bucket%23As_a_meter)%0A%20%20-%20%5Bprysm%5D(https%3A%2F%2Fgithub.com%2Fprysmaticlabs%2Fprysm%2Fblob%2Fdevelop%2Fcontainer%2Fleaky-bucket%2Fleakybucket.go)%3A%20leaky%20bucket%20as%20a%20meter%0A-%20linked%20list%0A%20%20-%20%5Bprysm%5D(https%3A%2F%2Fgithub.com%2Fprysmaticlabs%2Fprysm%2Ftree%2Fdevelop%2Fcontainer%2Fdoubly-linked-list)%20(go)%3A%20doubly%20linked%20list%0A-%20%5Bmerkle%20patrica%20tries%5D(https%3A%2F%2Fethereum.org%2Fen%2Fdevelopers%2Fdocs%2Fdata-structures-and-encoding%2Fpatricia-merkle-trie%2F)%0A%20%20-%20%5Bgeth%20trie%5D(https%3A%2F%2Fgithub.com%2Fethereum%2Fgo-ethereum%2Fblob%2Fmaster%2Ftrie%2Ftrie.go%23L17)%20(go)%3A%20Package%20trie%20implements%20Merkle%20Patricia%20Tries.%0A%20%20-%20%5Bgeth%20database%5D(https%3A%2F%2Fgithub.com%2Fethereum%2Fgo-ethereum%2Fblob%2Fmaster%2Fcore%2Fstate%2Fdatabase.go%23L63)%20(go)%3A%20Trie%20is%20a%20Ethereum%20Merkle%20Patricia%20trie.%0A-%20%5Bmerkle%20trees%5D(https%3A%2F%2Fen.wikipedia.org%2Fwiki%2FMerkle_tree)%0A%20%20-%20%5Bprysm%20sparse_merkle%5D(https%3A%2F%2Fgithub.com%2Fprysmaticlabs%2Fprysm%2Fblob%2Fdevelop%2Fcontainer%2Ftrie%2Fsparse_merkle.go)%20(go)%3A%20defines%20utilities%20for%20sparse%20merkle%20tries%20for%20Ethereum%20consensus.%0A%20%20-%20%5Blighthouse%20cached_tree_hash%5D(https%3A%2F%2Fgithub.com%2Fsigp%2Flighthouse%2Ftree%2Fstable%2Fconsensus%2Fcached_tree_hash)%20(rust)%3A%20Sparse%20Merkle%20tree%20suitable%20for%20tree%20hashing%20vectors%20and%20lists.%0A%20%20-%20%5Blighthouse%20tree_hash%5D(https%3A%2F%2Fgithub.com%2Fsigp%2Flighthouse%2Ftree%2Fstable%2Fconsensus%2Ftree_hash)%20(rust)%3A%20Convenience%20method%20for%20%60MerkleHasher%60%20which%20also%20provides%20some%20fast-paths%20for%20small%20trees.%60minimum_leaf_count%60%20will%20only%20be%20used%20if%20it%20is%20greater%20than%20or%20equal%20to%20the%20minimum%20number%20of%20leaves%20that%20can%20be%20created%20from%20%60bytes%60.%0A%20%20-%20%5Blighthouse%20tree_hash_derive%5D(https%3A%2F%2Fgithub.com%2Fsigp%2Flighthouse%2Ftree%2Fstable%2Fconsensus%2Ftree_hash_derive)%20(rust)%3A%0A%20%20-%20%5Btendermint%20go%5D(https%3A%2F%2Fgithub.com%2Ftendermint%2Ftendermint%2Ftree%2Fmain%2Fcrypto%2Fmerkle)%20(go)%3A%20Merkle%20Tree%20For%20smaller%20static%20data%20structures%20that%20don't%20require%20immutable%20snapshots%20or%20mutability%3B%20for%20instance%20the%20transactions%20and%20validation%20signatures%20of%20a%20block%20can%20be%20hashed%20using%20this%20simple%20merkle%20tree%20logic.%0A%20%20-%20%5Bparitytech%20binary-merkle-trie%5D(https%3A%2F%2Fgithub.com%2Fparitytech%2Fsubstrate%2Ftree%2Fmaster%2Futils%2Fbinary-merkle-tree)%20(rust)%3A%20implements%20a%20simple%20binary%20Merkle%20Tree%20utilities%20required%20for%20inter-op%20with%20Ethereum%20bridge%20%26%20Solidity%20contract.%0A%20%20-%20%5Bsnowbridge%20merkle.go%5D(https%3A%2F%2Fgithub.com%2FSnowfork%2Fsnowbridge%2Fblob%2Fmain%2Frelayer%2Fcrypto%2Fmerkle%2Fmerkle.go)%0A%20%20-%20%5Bsnowbridge%20merkleization.rs%5D(https%3A%2F%2Fgithub.com%2FSnowfork%2Fsnowbridge%2Fblob%2Fmain%2Fparachain%2Fpallets%2Fethereum-beacon-client%2Fsrc%2Fmerkleization.rs)%0A-%20%5Bmerkle_proof%5D(https%3A%2F%2Fgithub.com%2Fethereum%2Fconsensus-specs%2Fblob%2Fdev%2Fssz%2Fmerkle-proofs.mdx)%20%5Bexplainer%5D(https%3A%2F%2Fsoliditydeveloper.com%2Fmerkle-tree)%0A%20%20-%20%5Blighthouse%20merkle_proof%5D(https%3A%2F%2Fgithub.com%2Fsigp%2Flighthouse%2Ftree%2Fstable%2Fconsensus%2Fmerkle_proof)%20(rust)%3A%20efficiently%20represents%20a%20Merkle%20tree%20of%20fixed%20depth%20where%20only%20the%20first%20N%20indices%20are%20populated%20by%20non-zero%20leaves%20(perfect%20for%20the%20deposit%20contract%20tree).%0A%20%20-%20%5Bsnowbridge%20simplified_mmr_proof.go%5D(https%3A%2F%2Fgithub.com%2FSnowfork%2Fsnowbridge%2Fblob%2Fmain%2Frelayer%2Fcrypto%2Fmerkle%2Fsimplified_mmr_proof.go)%0A%20%20-%20%5Bsnowbridge%20merkle-proof%20rust%5D(https%3A%2F%2Fgithub.com%2FSnowfork%2Fsnowbridge%2Ftree%2Fmain%2Fparachain%2Fpallets%2Fbasic-channel%2Fmerkle-proof)%0A%20%20-%20%5Bsnowbridge%20MerkleProof.sol%5D(https%3A%2F%2Fgithub.com%2FSnowfork%2Fsnowbridge%2Fblob%2Fmain%2Fcore%2Fpackages%2Fcontracts%2Fcontracts%2Futils%2FMerkleProof.sol)%0A%20%20-%20%5Bnpm%20package%20eth-proof%5D(https%3A%2F%2Fwww.npmjs.com%2Fpackage%2Feth-proof)%0A-%20%5BMerkle%20Mountain%20Range%5D(https%3A%2F%2Fdocs.grin.mw%2Fwiki%2Fchain-state%2Fmerkle-mountain-range%2F)%0A%20%20-%20%5Bparitytech%20merkle-mountain-range%5D(https%3A%2F%2Fgithub.com%2Fparitytech%2Fsubstrate%2Ftree%2Fmaster%2Fprimitives%2Fmerkle-mountain-range)%20(rust)%0A%20%20-%20%5Bharmony%20mmr%20(go)%5D(https%3A%2F%2Fgithub.com%2Fpeekpi%2Fharmony%2Ftree%2FmmrHardfork%2Finternal%2Fmmr)%3A%20Adds%20a%20merkle%20mountain%20range%20to%20harmony's%20core%20protocol%20to%20support%20light%20clients%20(WIP)%20%5BPR4198%5D(https%3A%2F%2Fgithub.com%2Fharmony-one%2Fharmony%2Fpull%2F4198%2Ffiles)%0A-%20queues%0A%20%20-%20%5Bprysm%5D(https%3A%2F%2Fgithub.com%2Fprysmaticlabs%2Fprysm%2Ftree%2Fdevelop%2Fcontainer%2Fqueue)%20(go)%3A%20priority%20queue%0A%20%20-%20%5Bsnowbridge%20MMRProof.sol%5D(https%3A%2F%2Fgithub.com%2FSnowfork%2Fsnowbridge%2Fblob%2Fmain%2Fcore%2Fpackages%2Fcontracts%2Fcontracts%2Futils%2FMMRProof.sol)%0A%20%20-%20%5Bsnowfork%20merkle-mountain-range%5D(https%3A%2F%2Fgithub.com%2FSnowfork%2Fmerkle-mountain-range)%0A-%20safe-arithmetic%0A%20%20-%20%5Blighthouse%20safe_arith%5D(https%3A%2F%2Fgithub.com%2Fsigp%2Flighthouse%2Ftree%2Fstable%2Fconsensus%2Fsafe_arith)%20(rust)%3A%20Library%20for%20safe%20arithmetic%20on%20integers%2C%20avoiding%20overflow%20and%20division%20by%20zero.%0A-%20slice%0A%20%20-%20%5Bprysm%5D(https%3A%2F%2Fgithub.com%2Fprysmaticlabs%2Fprysm%2Ftree%2Fdevelop%2Fcontainer%2Fslice)%20(go)%0A-%20%5Btries%5D(https%3A%2F%2Fethereum.org%2Fen%2Fdevelopers%2Fdocs%2Fdata-structures-and-encoding%2Fpatricia-merkle-trie%2F)%0A%20%20-%20%5Bparitytech%20trie%5D(https%3A%2F%2Fgithub.com%2Fparitytech%2Fsubstrate%2Ftree%2Fmaster%2Fprimitives%2Ftrie)%3A%20Utility%20functions%20to%20interact%20with%20Substrate's%20Base-16%20Modified%20Merkle%20Patricia%20tree%20(%22trie%22).%0A-%20%5BVerifiable%20Delay%20Function%5D(https%3A%2F%2Feprint.iacr.org%2F2018%2F623.pdf)%0A%20%20-%20%5Bharmony%20vdf%5D(https%3A%2F%2Fgithub.com%2Fharmony-one%2Fharmony%2Ftree%2Fmain%2Fcrypto%2Fvdf)%20(go)%3A%20Package%20vdf%20is%20a%20proof-of-concept%20implementation%20of%20a%20delay%20function%20and%20the%20security%20properties%20are%20not%20guaranteed.%0A-%20%5BVerfiable%20Random%20Function%5D(https%3A%2F%2Fen.wikipedia.org%2Fwiki%2FVerifiable_random_function)%0A%20%20-%20%5Bharmony%20vrf%5D(https%3A%2F%2Fgithub.com%2Fharmony-one%2Fharmony%2Ftree%2Fmain%2Fcrypto%2Fvrf)%20(go)%3A%20A%20VRF%20is%20a%20pseudorandom%20function%20f_k%20from%20a%20secret%20key%20k%2C%20such%20that%20that%20knowledge%20of%20k%20not%20only%20enables%20one%20to%20evaluate%20f_k%20at%20for%20any%20message%20m%2C%20but%20also%20to%20provide%20an%20NP-proof%20that%20the%20value%20f_k(m)%20is%20indeed%20correct%20without%20compromising%20the%20unpredictability%20of%20f_k%20for%20any%20m'%20!%3D%20m.%20%5Bhttps%3A%2F%2Fieeexplore.ieee.org%2Fdocument%2F814584%5D(https%3A%2F%2Fieeexplore.ieee.org%2Fdocument%2F814584)%0A%20%20-%20%5Bparitytech%20vrf%5D(https%3A%2F%2Fgithub.com%2Fparitytech%2Fsubstrate%2Ftree%2Fmaster%2Fprimitives%2Fconsensus%2Fvrf)%3A%20Primitives%20for%20VRF-based%20consensus%20engines.%20Schnorrkel-based%20VRF.%0A-%20tree%0A%20%20-%20%5Bparitytech%20fork-tree%5D(https%3A%2F%2Fgithub.com%2Fparitytech%2Fsubstrate%2Ftree%2Fmaster%2Futils%2Ffork-tree)%20(rust)%3A%20Utility%20library%20for%20managing%20tree-like%20ordered%20data%20with%20logic%20for%20pruning%20the%20tree%20while%20finalizing%20nodes.%0A%0A**Hash%20functions**%0A%0A%5BSHA-2%5D(https%3A%2F%2Fen.wikipedia.org%2Fwiki%2FSHA-2)%0A%0A%5Bdifference%20between%20sha256%20and%20kecakk256%5D(https%3A%2F%2Fwww.geeksforgeeks.org%2Fdifference-between-sha-256-and-keccak-256%2F)%0A%0A-%20%5BArgon%202%5D(https%3A%2F%2Fen.wikipedia.org%2Fwiki%2FArgon2)%0A%20%20-%20%5BArgon2%5D(https%3A%2F%2Fgithub.com%2FP-H-C%2Fphc-winner-argon2)%3A%20eference%20C%20implementation%20of%20Argon2.%0A%20%20-%20%5Bx%2Fcrypto%20Argon2%5D(https%3A%2F%2Fcs.opensource.google%2Fgo%2Fx%2Fcrypto%2F%2B%2Fmaster%3Aargon2%2Fargon2.go)%20(go)%3A%20Package%20argon2%20implements%20the%20key%20derivation%20function%20Argon2.%0A%20%20-%20%5Brust-argon2%5D(https%3A%2F%2Fgithub.com%2Fsru-systems%2Frust-argon2)%20(rust)%3A%20Rust%20library%20for%20hashing%20passwords%20using%20Argon2.%0A%20%20-%20%5Bnode-argon2%5D(https%3A%2F%2Fwww.npmjs.com%2Fpackage%2Fargon2)%20(typescript)%3A%20Bindings%20to%20the%20reference%20Argon2%20implementation.%0A-%20%5Bblake%5D(%3Chttps%3A%2F%2Fen.wikipedia.org%2Fwiki%2FBLAKE_(hash_function)%3E)%0A%20%20-%20%5Bblake2%5D(https%3A%2F%2Fwww.blake2.net%2F)%20hash%20function%0A%20%20%20%20-%20%5Bethereum-go-ethereum%5D(https%3A%2F%2Fgithub.com%2Fethereum%2Fgo-ethereum%2Ftree%2Fmaster%2Fcrypto%2Fblake2b)%20(go)%3A%20Package%20blake2b%20implements%20the%20BLAKE2b%20hash%20algorithm%20defined%20by%20RFC%207693%20and%20the%20extendable%20output%20function%20(XOF)%20BLAKE2Xb.%0A%20%20%20%20-%20%5Bbsc%20blake2b%5D(https%3A%2F%2Fgithub.com%2Fbnb-chain%2Fbsc%2Ftree%2Fmaster%2Fcrypto%2Fblake2b)%20(go)%3A%20Package%20blake2b%20implements%20the%20BLAKE2b%20hash%20algorithm%20defined%20by%20RFC%207693%20and%20the%20extendable%20output%20function%20(XOF)%20BLAKE2Xb.%0A%20%20-%20%5Bblake3%5D(https%3A%2F%2Fgithub.com%2FBLAKE3-team%2FBLAKE3)%0A%20%20%20%20-%20%5Bblake3%20rust%20crate%5D(https%3A%2F%2Fcrates.io%2Fcrates%2Fblake3)%20(rust)%3A%20BLAKE3%20is%20based%20on%20an%20optimized%20instance%20of%20the%20established%20hash%20function%20BLAKE2%20and%20on%20the%20original%20Bao%20tree%20mode.%0A%20%20%20%20-%20%5Bzeebo%20blake3%5D(https%3A%2F%2Fgithub.com%2Fzeebo%2Fblake3)%20(go)%20%3A%20Pure%20Go%20implementation%20of%20BLAKE3%20with%20AVX2%20and%20SSE4.1%20acceleration.%0A-%20%5Bkeccak256%5D(https%3A%2F%2Fkeccak.team%2Fkeccak.html)%20hash%20function%0A%20%20-%20%5Bprysm%5D(https%3A%2F%2Fgithub.com%2Fprysmaticlabs%2Fprysm%2Fblob%2Fdevelop%2Fcrypto%2Fhash%2Fhash.go)%20(go)%0A%20%20-%20%5Blighthouse%5D(https%3A%2F%2Fgithub.com%2Fsigp%2Flighthouse%2Fblob%2Fstable%2Fcrypto%2Feth2_hashing%2Fsrc%2Flib.rs)%20(rust)%3A%20wrapper%20over%20two%20SHA256%20crates%3A%20%60sha2%60%20and%20%60ring%60%0A%20%20-%20%5Bbsc%20crypto%5D(https%3A%2F%2Fgithub.com%2Fbnb-chain%2Fbsc%2Fblob%2Fmaster%2Fcrypto%2Fcrypto.go%23L91)%20(go)%0A%20%20-%20%5Bharmony%20hash%5D(https%3A%2F%2Fgithub.com%2Fharmony-one%2Fharmony%2Fblob%2Fmain%2Fcrypto%2Fhash%2Fhash.go)%20(go)%0A%20%20-%20%5Bsnowbridge%20keccak%5D(https%3A%2F%2Fgithub.com%2FSnowfork%2Fsnowbridge%2Fblob%2Fmain%2Frelayer%2Fcrypto%2Fkeccak%2Fkeccak.go)%0A-%20%5Bsha256%5D(https%3A%2F%2Fpkg.go.dev%2Fcrypto%2Fsha256)%0A%20%20-%20%5Btendermint%20tmhash%5D(https%3A%2F%2Fgithub.com%2Ftendermint%2Ftendermint%2Ftree%2Fmain%2Fcrypto%2Ftmhash)%0A%0A**encryption**%0A%0A-%20%5BECIES%5D(https%3A%2F%2Fcryptobook.nakov.com%2Fasymmetric-key-ciphers%2Fecies-public-key-encryption)%20(go)%3A%20a%20hybrid%20encryption%20scheme%0A%20%20-%20%5Bethereum-go-ethereum%5D(https%3A%2F%2Fgithub.com%2Fethereum%2Fgo-ethereum%2Ftree%2Fmaster%2Fcrypto%2Fecies)%20(go)%0A%20%20-%20%5Bbsc%20ecies%5D(https%3A%2F%2Fgithub.com%2Fbnb-chain%2Fbsc%2Ftree%2Fmaster%2Fcrypto%2Fecies)%20(go)%0A-%20%5Bascii%20armored%20encryption%20uses%20ed25519%5D(https%3A%2F%2Fwww.rfc-editor.org%2Frfc%2Fpdfrfc%2Frfc4880.txt.pdf)%0A%20%20-%20%5Bethereum-go-ethereum%5D(https%3A%2F%2Fgithub.com%2Fethereum%2Fgo-ethereum%2Ftree%2Fmaster%2Fcrypto%2Fsignify)%20(go)%0A%20%20-%20%5Bbsc%20signify%5D(https%3A%2F%2Fgithub.com%2Fbnb-chain%2Fbsc%2Ftree%2Fmaster%2Fcrypto%2Fsignify)%20(go)%0A%20%20-%20%5Btenderming%20armor%5D(https%3A%2F%2Fgithub.com%2Ftendermint%2Ftendermint%2Fblob%2Fmain%2Fcrypto%2Farmor%2Farmor.go)%20(go)%0A-%20%5BChaCha20-Poly1305%5D(https%3A%2F%2Fen.wikipedia.org%2Fwiki%2FChaCha20-Poly1305)%3A%20an%20authenticated%20encryption%20with%20additional%20data%20(AEAD)%20algorithm%0A%20%20-%20%5Btendermint%20xchacha20poly1305%5D(https%3A%2F%2Fgithub.com%2Ftendermint%2Ftendermint%2Ftree%2Fmain%2Fcrypto%2Fxchacha20poly1305)%20(go)%0A-%20%5BXSalsa20%5D(https%3A%2F%2Flibsodium.gitbook.io%2Fdoc%2Fadvanced%2Fstream_ciphers%2Fxsalsa20)%20(go)%3A%20XSalsa20%20is%20a%20stream%20cipher%20based%20upon%20Salsa20%20but%20with%20a%20much%20longer%20nonce%3A%20192%20bits%20instead%20of%2064%20bits.%0A%20%20-%20%5Btendermint%20xsalsa20symmetric%5D(https%3A%2F%2Fgithub.com%2Ftendermint%2Ftendermint%2Ftree%2Fmain%2Fcrypto%2Fxsalsa20symmetric)%20(go)%3A%20secret%20must%20be%2032%20bytes%20long.%20Use%20something%20like%20Sha256(Bcrypt(passphrase)).%20The%20ciphertext%20is%20(secretbox.Overhead%20%2B%2024)%20bytes%20longer%20than%20the%20plaintext.%0A%0A**Random%20number%20generators**%0A%0A-%20%5Bprysm%5D(https%3A%2F%2Fgithub.com%2Fprysmaticlabs%2Fprysm%2Fblob%2Fdevelop%2Fcrypto%2Frand%2Frand.go)%20(go)%0A%0A**Serialization%2FDeSerialization**%0A%0A-%20%5BRECURSIVE-LENGTH%20PREFIX%20(RLP)%20SERIALIZATION%5D(https%3A%2F%2Fethereum.org%2Fen%2Fdevelopers%2Fdocs%2Fdata-structures-and-encoding%2Frlp%2F)%0A%20%20-%20%5Bethereum%20rlp%5D(https%3A%2F%2Fgithub.com%2Fethereum%2Fgo-ethereum%2Ftree%2Fmaster%2Frlp)%0A%20%20-%20%5Bharmony%20rlp%5D(https%3A%2F%2Fgithub.com%2Fharmony-one%2Fharmony%2Fblob%2Fmain%2Fcrypto%2Fhash%2Frlp.go)%0A-%20%5BSimple%20Serialize%5D(https%3A%2F%2Fethereum.org%2Fen%2Fdevelopers%2Fdocs%2Fdata-structures-and-encoding%2Fssz%2F)%0A%20%20-%20%5Bsnowbridge%20ssz.rs%5D(https%3A%2F%2Fgithub.com%2FSnowfork%2Fsnowbridge%2Fblob%2Fmain%2Fparachain%2Fpallets%2Fethereum-beacon-client%2Fsrc%2Fssz.rs)%0A%0A-%20%5BMerkle%20Patricia%20Trie%5D(https%3A%2F%2Fethereum.org%2Fen%2Fdevelopers%2Fdocs%2Fdata-structures-and-encoding%2Fpatricia-merkle-trie%2F)%0A%0A**Threading**%0A%0A-%20%5Bprysm%5D(https%3A%2F%2Fgithub.com%2Fprysmaticlabs%2Fprysm%2Fblob%2Fdevelop%2Fcontainer%2Fthread-safe%2Fmap.go)%3A%20contains%20generic%20containers%20that%20are%20protected%20either%20by%20Mutexes%20or%20atomics%20underneath%20the%20hood.%0A%0A**zero%20knowledge**%0A%0A-%20hash%20functions%0A%20%20-%20%5BPoseidon%5D(https%3A%2F%2Fwww.usenix.org%2Fsystem%2Ffiles%2Fsec21-grassi.pdf)%3A%20A%20New%20Hash%20Function%20for%0A%20%20%20%20Zero-Knowledge%20Proof%20Systems%20(%5Bvideo%5D(https%3A%2F%2Fyoutu.be%2FhUx3WpDV_l0))%0A%0A%23%23%20References%0A%0A-%20%5BBloom%20Filter%20Wikipedia%5D(https%3A%2F%2Fen.wikipedia.org%2Fwiki%2FBloom_filter)%3A%20A%20Bloom%20filter%20is%20a%20space-efficient%20probabilistic%20data%20structure%2C%20conceived%20by%20Burton%20Howard%20Bloom%20in%201970%2C%20that%20is%20used%20to%20test%20whether%20an%20element%20is%20a%20member%20of%20a%20set.%0A-%20%5BBloom%20Filters%20Explainer%5D(https%3A%2F%2Fwww.jasondavies.com%2Fbloomfilter%2F)%3A%20The%20bloom%20filter%20essentially%20consists%20of%20a%20bit%20vector%20of%20length%20m%2C%20represented%20by%20the%20central%20column.%0A-%20%5BBloomfilter%20Lesson%2011%20-%20Blockchain%20Academy%5D(https%3A%2F%2Fblockchain-academy.hs-mittweida.de%2Fcoursesblockchain-introduction-technical-beginner-to-intermediate%2Flessons%2Flesson-11-bloomfilter%2F)%3A%20Blockchain%20Introduction%20Technical%20%E2%80%93%20Beginner%20to%20Intermediate%20Lesson%2011%20%E2%80%93%20Bloomfilter.%0A-%20%5BCuckoo%20Hashing%5D(https%3A%2F%2Fciteseerx.ist.psu.edu%2Fviewdoc%2Fdownload%3Fdoi%3D10.1.1.25.4189%26rep%3Drep1%26type%3Dpdf)%3A%20a%20simple%20dictionary%20with%20worst%20case%20constant%20lookup%20time%2C%20equaling%20the%20theoretical%20performance%20of%20the%20classic%20dynamic%20perfect%20hashing%20scheme%0A%20%20of%20Dietzfelbinger%20et%20al.%0A-%20%5BCukoo%20Hashing%20Visualization%5D(http%3A%2F%2Fwww.lkozma.net%2Fcuckoo_hashing_visualization%2F)%3A%20Visualization%20of%20Cukoo%20Hashing%20an%20elegant%20method%20for%20resolving%20collisions%20in%20hash%20tables.%0A-%20%5BFast%20Fourier%20Transforms%5D(https%3A%2F%2Fvitalik.ca%2Fgeneral%2F2019%2F05%2F12%2Ffft.html)%3A%20Vitaliks%20explaniner%20on%20Fast%20Fourier%20Transforms.%20Trigger%20warning%3A%20specialized%20mathematical%20topic%2C%20with%0A%20%20special%20thanks%20to%20Karl%20Floersch%20for%20feedback.%0A-%20%5BMerkle%20Trees%2FMerkle%20Proofs%20Lesson%2010%20-%20Blockchain%20Academy%5D(https%3A%2F%2Fblockchain-academy.hs-mittweida.de%2Fcourses%2Fblockchain-introduction-technical-beginner-to-intermediate%2Flessons%2Flesson-10-merkle-trees-merkle-proofs%2F)%3A%20Blockchain%20Introduction%20Technical%20%E2%80%93%20Beginner%20to%20Intermediate%20Lesson%2010%20%E2%80%93%20Merkle%20Trees%2FMerkle%20Proofs.%0A",lastUpdatedAt:1753125084e3},{lazy:()=>o2(()=>import("./signatures-D56ScIzx.js"),[]),path:"/research/primitives/signatures",type:"mdx",filePath:"research/primitives/signatures.mdx",content:"%23%20Signature%20Schemes%20in%20Consensus%20Protocols%0A%0A-%20date%3A%202023-02-05%0A-%20last%20updated%3A%202023-02-04%0A%0A%23%23%20Overview%0A%0ABoth%20sides%20of%20the%20bridge%20need%20to%20verify%20what%20happened%20on%20the%20other%20side.%20To%20do%20that%2C%20the%20verification%20logic%20is%20often%20encapsulated%20inside%20a%20light%20client%2C%20manifested%20as%20a%20smart%20contract%20on%20the%20chain%20which%20the%20verification%20needs%20to%20be%20executed.%20The%20light%20client%20needs%20to%20follow%20consensus%20and%20signature%20verification%20mechanisms%20based%20on%20the%20signing%20algorithm%20and%20the%20elliptical%20curve%20used%20on%20the%20other%20side.%20For%20example%2C%20if%20chain%20A%20has%2021%20validators%20signing%20each%20block%20using%20ECDSA%20algorithm%20on%20secp256k1%20curves%2C%20then%20chain%20A's%20light%20client%2C%20executed%20on%20chain%20B%2C%20must%20extract%20the%20signatures%20from%20the%20block%20headers%20presented%20to%20the%20light%20client%2C%20and%20follow%20the%20ECDSA%20signature%20verification%20algorithm%20to%20verify%20the%20content%20of%20the%20block%20header%20indeeds%20produces%20the%2021%20signatures%20contained%20in%20the%20block%20header%2C%20given%20the%20public%20keys%20of%20the%2021%20validators.%0A%0AHere%2C%20we%20present%20a%20reference%20table%20for%20these%20signature%20schemes%20and%20how%20they%20are%20used%20in%20the%20consensus%20protocols%20of%20different%20blockchains.%20We%20limit%20our%20initial%20scope%20to%20Ethereum%2C%20Polygon%2C%20Avalanche%2C%20BSC%2C%20Harmony%2C%20Cosmos%2C%20and%20Polkadot%20only%20(and%20their%20undelying%20technologies).%20Note%20that%20we%20are%20only%20looking%20at%20how%20signatures%20are%20used%20in%20consensus%2C%20not%20elsewhere%20in%20the%20blockchain%20stack%2C%20as%20all%20these%20protocols%20use%20ECDSA%20on%20secp256k1%20for%20accounts%20in%20EVM%20interactions.%0A%0A%7C%20Algorithm%20%7C%20Curve%20%20%20%20%20%20%7C%20Protocol%20%20%7C%20Codeote%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7C%0A%7C%20---------%20%7C%20----------%20%7C%20---------%20%7C%20----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------%20%7C%20---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------%20%7C%0A%7C%20ECDSA%20%20%20%20%20%7C%20secp256k1%20%20%7C%20Polygon%20%20%20%7C%20%5Blib%5D(https%3A%2F%2Fgithub.com%2Fmaticnetwork%2Ftendermint%2Ftree%2Fpeppermint%2Fcrypto%2Fsecp256kodified%5D(https%3A%2F%2Fwiki.polygon.technology%2Fdocs%2Fpos%2Fpeppermint)%20Tendermint%20validator%20signature%20schemelib%5D(https%3A%2F%2Fgithub.com%2Fbnb-chain%2Fbsc%2Ftree%2Fmaster%2Fcrypto%2Fsecp256k1)%20%5Busage%5D(https%3A%2F%2Fgithub.com%2Fbnb-chain%2Fbsc%2Fblob%2Fcb9e50bdf62c6b46a71724066d39f9851181a5af%2Fconsensus%2Fparlia%2Fparlia.go%23L546)%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7C%20Derived%20from%20%5BClique%5D(https%3A%2F%2Feips.ethereum.org%2FEIPS%2Feip-225)%2C%20then%20%5Bimproved%5D(https%3A%2F%2Fgithub.com%2Fbnb-chain%2FBEPs%2Fpull%2F131)%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7C%0A%7C%20BLS%20%20%20%20%20%20%20%7C%20BN254%20%20%20%20%20%20%7C%20Ethereum%20%20%7C%20%5BEVM%5D(https%3A%2F%2Fgithub.com%2Fethereum%2Fgo-ethereum%2Fblob%2Fb946b7a13b749c99979e312c83dce34cac8dd7b1%2Fcore%2Fvm%2Fcontracts.go%23L420)%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7C%20Added%20by%20%5BEIP-196%5D(https%3A%2F%2Feips.ethereum.org%2FEIPS%2Feip-196)%2C%5B197%5D(https%3A%2F%2Feips.ethereum.org%2FEIPS%2Feip-197)%3B%20Mainly%20for%20use%20in%20smart%20contracts%2C%20such%20as%20zk-snark%20verification.%20See%20%5Bexplainer%5D(https%3A%2F%2Fhackmd.io%2F%40liangcc%2Fbls-solidity%23BLS-Signatures-in-Solidity)%20%7C%0A%7C%20%20%20%20%20%20%20%20%20%20%20%7C%20BLS12-381%20%20%7C%20Ethereum%20%20%7C%20%5Bprysm%5D(https%3A%2F%2Fgithub.com%2Fprysmaticlabs%2Fprysm%2Ftree%2Fdevelop%2Fcrypto%2Fbls)%20%5Blighthouse%5D(https%3A%2F%2Fgithub.com%2Fsigp%2Flighthouse%2Ftree%2Fstable%2Fcrypto%2Fbls)%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7C%20See%20%5BPoS%20design%5D(https%3A%2F%2Fethereum.org%2Fen%2Fdevelopers%2Fdocs%2Fconsensus-mechanisms%2Fpos%2Fkeys%2F)%20and%20%5Bexplainer%5D(https%3A%2F%2Fhackmd.io%2F%40benjaminion%2Fbls12-381)%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7C%0A%7C%20%20%20%20%20%20%20%20%20%20%20%7C%20%20%20%20%20%20%20%20%20%20%20%20%7C%20Harmony%20%20%20%7C%20%5Blib%5D(https%3A%2F%2Fgithub.com%2Fharmony-one%2Fbls%2Ftree%2Fmaster%2Fffi%2Fgo%2Fbls)%20%5Busage%5D(https%3A%2F%2Fgithub.com%2Fharmony-one%2Fharmony%2Ftree%2Fmain%2Fcrypto%2Fbls)%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7C%20See%20%5Bdesign%5D(https%3A%2F%2Fdocs.harmony.one%2Fhome%2Fdevelopers%2Fharmony-specifics%2Fharmony-stack%23signatures-and-cryptography)%20and%20%5Bprotocol%20review%5D(https%3A%2F%2Fmedium.com%2Fharmony-one%2F2022-harmony-technical-review-88462efba368)%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7C%0A%7C%20RSA%20%20%20%20%20%20%20%7C%20N%2FA%20%20%20%20%20%20%20%20%7C%20Avalanche%20%7C%20%5Bverification%5D(https%3A%2F%2Fgithub.com%2Fava-labs%2Favalanchego%2Fblob%2F51c5edd85ccc7927443b945b427e64d91ff99f67%2Fvms%2Fproposervm%2Fblock%2Fblock.go%23L119)%20%5Bgeneration%5D(https%3A%2F%2Fgithub.com%2Fava-labs%2Favalanchego%2Fblob%2F51c5edd85ccc7927443b945b427e64d91ff99f67%2Fstaking%2Ftls.go%23L121)%20%7C%20Uses%20X.509%20certificate%20which%20potentially%20allows%20many%20algorithms%3B%20Moving%20towards%20BLS12-381%20and%20added%20implementations%20recently%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7C%0A%7C%20EdDSA%20%20%20%20%20%7C%20Curve25519%20%7C%20IBC%20%20%20%20%20%20%20%7C%20%5Blib%5D(https%3A%2F%2Fgithub.com%2Ftendermint%2Ftendermint%2Ftree%2Fmain%2Fcrypto%2Fed25519)%20%5Busage%5D(https%3A%2F%2Fgithub.com%2Ftendermint%2Ftendermint%2Fblob%2Fmain%2Fspec%2Fcore%2Fencoding.md%23public-key-cryptography)%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7C%20Used%20by%20all%20chains%20in%20Cosmos%20network%2C%20including%20%5BCosmos%20Hub%5D(https%3A%2F%2Fhub.cosmos.network%2Fmain%2Fvalidators%2Foverview.html)%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7C%0A%7C%20Schnorr%20%20%20%7C%20Curve25519%20%7C%20Substrate%20%7C%20%5Blib%5D(https%3A%2F%2Fgithub.com%2Fparitytech%2Fsubstrate%2Fblob%2Fmaster%2Fprimitives%2Fapplication-crypto%2Fsrc%2Fsr25519.rs)%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7C%20See%20also%20brief%20%5Bintro%5D(https%3A%2F%2Fwiki.polkadot.network%2Fdocs%2Flearn-cryptography%23what-is-sr25519-and-where-did-it-come-from)%20from%20Polkadot%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7C%0A%0A%23%23%20Resources%0A%0A%23%23%23%20Algorithms%0A%0A%23%23%23%23%20ECDSA%0A%0A-%20%5BWikipedia%5D(https%3A%2F%2Fwww.wikiwand.com%2Fen%2FElliptic_Curve_Digital_Signature_Algorithm)%0A-%20Standard%3A%20%5BSEC%202%3A%20Recommended%20Elliptic%20Curve%20Domain%20Parameters%5D(https%3A%2F%2Fwww.secg.org%2Fsec2-v2.pdf)%0A%0A%23%23%23%23%20BLS%0A%0A-%20%5BWikipedia%5D(https%3A%2F%2Fen.wikipedia.org%2Fwiki%2FBLS_digital_signature)%0A-%20Paper%3A%20%5BShort%20Signatures%20from%20the%20Weil%20Pairing%5D(https%3A%2F%2Fwww.iacr.org%2Farchive%2Fasiacrypt2001%2F22480516.pdf)%0A-%20Tutorial%3A%20%5BBLS%20signatures%3A%20better%20than%20Schnorr%5D(https%3A%2F%2Fmedium.com%2Fcryptoadvance%2Fbls-signatures-better-than-schnorr-5a7fe30ea716)%0A-%20Analysis%3A%20%5BSecret%20Sharing%20and%20Threshold%20Signatures%20with%20BLS%5D(https%3A%2F%2Fwww.dash.org%2Fblog%2Fsecret-sharing-and-threshold-signatures-with-bls%2F)%0A-%20Deep%20dive%3A%20%5BBLS%20Signatures%20in%20Solidity%5D(https%3A%2F%2Fhackmd.io%2F%40liangcc%2Fbls-solidity)%0A%0A%23%23%23%23%20EdDSA%0A%0A-%20%5BWikipedia%5D(https%3A%2F%2Fen.wikipedia.org%2Fwiki%2FEdDSA)%0A-%20%5BGoLang%5D(https%3A%2F%2Fpkg.go.dev%2Fgolang.org%2Fx%2Fcrypto%2Fed25519)%0A%0A%23%23%23%20Curves%0A%0A-%20%5BCurve%20database%5D(https%3A%2F%2Fneuromancer.sk%2Fstd%2F)%0A%0A%23%23%23%23%20secp256k1%0A%0A-%20%5BBitcoin%20Wiki%5D(https%3A%2F%2Fen.bitcoin.it%2Fwiki%2FSecp256k1)%0A-%20Tutorial%3A%20%5BA%20Bluffer%E2%80%99s%20Guide%20to%20secp256k1%5D(https%3A%2F%2Fmedium.com%2Fasecuritysite-when-bob-met-alice%2Fa-bluffers-guide-to-secp256k1-404e423e612)%0A%0A%23%23%23%23%20BLS12-381%0A%0A-%20Deep%20dive%3A%20%5BBLS12-381%20For%20The%20Rest%20Of%20Us%5D(https%3A%2F%2Fhackmd.io%2F%40benjaminion%2Fbls12-381)%0A-%20Intro%3A%20%5BBLS12-381%3A%20New%20zk-SNARK%20Elliptic%20Curve%20Construction%5D(https%3A%2F%2Felectriccoin.co%2Fblog%2Fnew-snark-curve%2F)%0A-%20Paper%3A%20%5BFast%20and%20simple%20constant-time%20hashing%20to%20the%20BLS12-381%20elliptic%20curve%5D(https%3A%2F%2Ftches.iacr.org%2Findex.php%2FTCHES%2Farticle%2Fview%2F8348%2F7697)%0A-%20Benchmark%3A%20%5BBLS%3A%20Is%20it%20really%20that%20slow%5D(https%3A%2F%2Fwww.dash.org%2Fblog%2Fbls-is-it-really-that-slow%2F)%0A-%20EIP%3A%20%5BEIP-2537%3A%20Precompile%20for%20BLS12-381%20curve%20operations%5D(https%3A%2F%2Feips.ethereum.org%2FEIPS%2Feip-2537)%0A-%20EVM%20launch%3A%20%5BTargeting%20Shanghai%20upgrade%20May%202023%5D(https%3A%2F%2Fethereum-magicians.org%2Ft%2Feip-2537-bls12-precompile-discussion-thread%2F4187%2F16)%0A%0A%23%23%23%23%20BN254%0A%0A-%20%5BDefinition%5D(https%3A%2F%2Fneuromancer.sk%2Fstd%2Fbn%2Fbn254)%0A-%20Paper%3A%20%5BPairing-Friendly%20Elliptic%20Curves%20of%20Prime%20Order%5D(https%3A%2F%2Feprint.iacr.org%2F2005%2F133.pdf)%0A-%20Deep%20Dive%3A%20%5BBLS%20Signatures%20in%20Solidity%5D(https%3A%2F%2Fhackmd.io%2F%40liangcc%2Fbls-solidity)%0A-%20Speed%20Optimization%3A%20%5BNew%20software%20speed%20records%20for%20cryptographic%20pairings%5D(https%3A%2F%2Fcryptojedi.org%2Fpapers%2Fdclxvi-20100714.pdf)%0A%0A%23%23%23%20Usage%20in%20ZKP%0A%0A-%20%5BA%20survey%20of%20elliptic%20curves%20for%20proof%20systems%5D(https%3A%2F%2Feprint.iacr.org%2F2022%2F586.pdf)%0A%0A%23%23%23%20Signing%20Implementations%0A%0AThe%20%5BStandard%20Curve%20Database%5D(https%3A%2F%2Fneuromancer.sk%2Fstd%2F)%20is%20a%20good%20starting%20point%20for%20existing%20signing%20algorithms.%20Base%20implementations%20such%20as%20%5Bgolang%20crypto%5D(https%3A%2F%2Fpkg.go.dev%2Fgolang.org%2Fx%2Fcrypto)%20and%20%5Brust%20crypto%5D(https%3A%2F%2Fdocs.rs%2Frust-crypto%2Flatest%2Fcrypto%2F)%20provide%20good%20reference%20codebases.%0A%0A-%20%5Bbcrypt%5D(https%3A%2F%2Fwww.usenix.org%2Flegacy%2Fevent%2Fusenix99%2Fprovos%2Fprovos.pdf)%0A%20%20-%20%5Bcosmos-sdk%20bcrypt%5D(https%3A%2F%2Fgithub.com%2Fcosmos%2Fcosmos-sdk%2Ftree%2Fmain%2Fcrypto%2Fkeys%2Fbcrypt)%0A-%20%5Bbip-0039%5D(https%3A%2F%2Fgithub.com%2Fbitcoin%2Fbips%2Fblob%2Fmaster%2Fbip-0039.mediawiki)%0A%20%20-%20%5Blighthouse%5D(https%3A%2F%2Fgithub.com%2Fsigp%2Flighthouse%2Ftree%2Fstable%2Fcrypto%2Feth2_wallet)%20(rust)%0A-%20%5Bbls%5D(https%3A%2F%2Fen.wikipedia.org%2Fwiki%2FBLS_digital_signature)%0A%20%20-%20%5Bethereum-prysm%5D(https%3A%2F%2Fgithub.com%2Fprysmaticlabs%2Fprysm%2Ftree%2Fdevelop%2Fcrypto%2Fbls)%0A-%20%5Bbls-12-381%5D(https%3A%2F%2Fhackmd.io%2F%40benjaminion%2Fbls12-381)%0A%20%20-%20%5Bethereum%20EIP-2537%3A%20Precompile%20for%20BLS12-381%20curve%20operations%5D(https%3A%2F%2Feips.ethereum.org%2FEIPS%2Feip-2537)%0A%20%20-%20%5Bethereum-go-ethereum%5D(https%3A%2F%2Fgithub.com%2Fethereum%2Fgo-ethereum%2Ftree%2Fmaster%2Fcrypto%2Fbls12381)%20(go)%0A%20%20-%20%5Bharmony%20bls%5D(https%3A%2F%2Fgithub.com%2Fharmony-one%2Fharmony%2Fblob%2Fmain%2Fcrypto%2Fbls%2Fbls.go)%20(go)%3A%20uses%20%5Bharmony%20bls%20repository%5D(https%3A%2F%2Fgithub.com%2Fharmony-one%2Fbls%2Fblob%2Fmaster%2Freadme.mdx)%0A%20%20%20%20-%20%5Bbls%20Harmony%5D(https%3A%2F%2Fgithub.com%2Fharmony-one%2Fbls)%20forked%20from%20%5Bherumi%2Fbls%5C_%5D(https%3A%2F%2Fgithub.com%2Fherumi%2Fbls_)%3A%20written%20in%20C%2B%2B%2C%20supports%20Go%2C%20Rust%2C%20WebAssembly%20(Node.js)%0A%20%20-%20%5Bprysm%5D(https%3A%2F%2Fgithub.com%2Fprysmaticlabs%2Fprysm%2Ftree%2Fdevelop%2Fcrypto%2Fbls)%20(go)%0A%20%20-%20%5Blighthouse%5D(https%3A%2F%2Fgithub.com%2Fsigp%2Flighthouse%2Ftree%2Fstable%2Fcrypto%2Fbls)%20(rust)%3A%20provides%20a%20wrapper%20around%20several%20BLS%20implementations%20to%20provide%20Lighthouse-specific%20functionality.%0A%20%20-%20%5Blighthouse%5D(https%3A%2F%2Fgithub.com%2Fsigp%2Flighthouse%2Ftree%2Fstable%2Fcrypto%2Feth2_key_derivation)%20(rust)%3A%20Provides%20path-based%20hierarchical%20BLS%20key%20derivation%2C%20as%20specified%20by%20%5BEIP-2333%5D(https%3A%2F%2Feips.ethereum.org%2FEIPS%2Feip-2333).%0A%20%20%20%20-%20%5BAurora%20Rainbow%20Bridge%20Implementation%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Flighthouse%2Ftree%2Fstable%2Fcrypto%2Fbls%2Fsrc%2Fimpls)%3A%20Implementations%0A%20%20%20%20%20%20-%20%5Bblst%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Flighthouse%2Fblob%2Fstable%2Fcrypto%2Fbls%2Fsrc%2Fimpls%2Fblst.rs)%0A%20%20%20%20%20%20-%20%5Bfake_crypto%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Flighthouse%2Fblob%2Fstable%2Fcrypto%2Fbls%2Fsrc%2Fimpls%2Ffake_crypto.rs)%0A%20%20%20%20%20%20-%20%5Bmilagro%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Flighthouse%2Fblob%2Fstable%2Fcrypto%2Fbls%2Fsrc%2Fimpls%2Fmilagro.rs)%3A%20support%20for%20%5BApache%20Milagro%5D(https%3A%2F%2Fmilagro.apache.org%2Fdocs%2Fmilagro-intro%2F)%0A%20%20-%20%5Blighthouse%5D(https%3A%2F%2Fgithub.com%2Fsigp%2Flighthouse%2Ftree%2Fstable%2Fcrypto%2Feth2_keystore)%20(rust)%3A%20Provides%20a%20JSON%20keystore%20for%20a%20BLS%20keypair%2C%20as%20specified%20by%20%5BEIP-2335%5D(https%3A%2F%2Feips.ethereum.org%2FEIPS%2Feip-2335).%0A%20%20-%20%5Bbsc%20bls12381%5D(https%3A%2F%2Fgithub.com%2Fbnb-chain%2Fbsc%2Ftree%2Fmaster%2Fcrypto%2Fbls12381)%20(go)%0A%20%20-%20%5Bblst%5D(https%3A%2F%2Fgithub.com%2Fsupranational%2Fblst)%3A%20blst%20(pronounced%20'blast')%20is%20a%20BLS12-381%20signature%20library%20focused%20on%20performance%20and%20security.%20It%20is%20written%20in%20C%20and%20assembly.%0A-%20%5Bbn256%5D(https%3A%2F%2Fcryptojedi.org%2Fpapers%2Fdclxvi-20100714.pdf)%0A%20%20-%20%5Bethereum-go-ethereum%5D(https%3A%2F%2Fgithub.com%2Fethereum%2Fgo-ethereum%2Ftree%2Fmaster%2Fcrypto%2Fbn256)%20(go)%0A%20%20-%20%5Bbsc%20bn256%5D(https%3A%2F%2Fgithub.com%2Fbnb-chain%2Fbsc%2Ftree%2Fmaster%2Fcrypto%2Fbn256)%20(go)%0A-%20%5Becdsa%5D(https%3A%2F%2Fen.wikipedia.org%2Fwiki%2FElliptic_Curve_Digital_Signature_Algorithm)%0A%20%20-%20%5Bbsc%20crypto%5D(https%3A%2F%2Fgithub.com%2Fbnb-chain%2Fbsc%2Fblob%2Fmaster%2Fcrypto%2Fcrypto.go%23L169)%20(go)%3A%20toECDSA%20creates%20a%20private%20key%20with%20the%20given%20D%20value.%20The%20strict%20parameter%20controls%20whether%20the%20key's%20length%20should%20be%20enforced%20at%20the%20curve%20size%20or%20it%20can%20also%20accept%20legacy%20encodings%20(0%20prefixes).%0A%20%20-%20%5Bparitytech%20ecdsa%5D(https%3A%2F%2Fgithub.com%2Fparitytech%2Fsubstrate%2Fblob%2Fmaster%2Fprimitives%2Fapplication-crypto%2Fsrc%2Fecdsa.rs)%20(rust)%0A%20%20-%20%5Bcosmos-sdk%20ecdsa%5D(https%3A%2F%2Fgithub.com%2Fcosmos%2Fcosmos-sdk%2Ftree%2Fmain%2Fcrypto%2Fkeys%2Finternal%2Fecdsa)%0A-%20%5Bed25519%5D(https%3A%2F%2Fed25519.cr.yp.to%2Fed25519-20110926.pdf)%20%5Bgolang%5D(https%3A%2F%2Fpkg.go.dev%2Fgolang.org%2Fx%2Fcrypto%2Fed25519)%0A%20%20-%20%5Btendermint%20ed25519%5D(https%3A%2F%2Fgithub.com%2Ftendermint%2Ftendermint%2Ftree%2Fmain%2Fcrypto%2Fed25519)%20(go)%3A%20GenPrivKey%20generates%20a%20new%20ed25519%20private%20key.%20It%20uses%20OS%20randomness%20in%20conjunction%20with%20the%20current%20global%20random%20seed%20in%20tendermint%2Flibs%2Fcommon%20to%20generate%20the%20private%20key.%0A%20%20-%20%5Bparitytech%20ed25519%5D(https%3A%2F%2Fgithub.com%2Fparitytech%2Fsubstrate%2Fblob%2Fmaster%2Fprimitives%2Fapplication-crypto%2Fsrc%2Fed25519.rs)%20(rust)%0A%20%20-%20%5BEd25519%5D(https%3A%2F%2Fen.wikipedia.org%2Fwiki%2FEdDSA)%3A%20%5BEd25519.sol%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Fblob%2Fmaster%2Fcontracts%2Feth%2Fnearbridge%2Fcontracts%2FEd25519.sol)%0A%20%20-%20%5Bcosmos-sdk%20ed25519%5D(https%3A%2F%2Fgithub.com%2Fcosmos%2Fcosmos-sdk%2Ftree%2Fmain%2Fcrypto%2Fkeys%2Fed25519)%0A-%20%5Bsecp256k1%5D(https%3A%2F%2Fwww.secg.org%2Fsec2-v2.pdf)%0A%20%20-%20%5Bethereum-go-ethereum%5D(https%3A%2F%2Fgithub.com%2Fethereum%2Fgo-ethereum%2Ftree%2Fmaster%2Fcrypto%2Fsecp256k1)%20(go)%0A%20%20-%20%5Bprysm%5D(https%3A%2F%2Fgithub.com%2Fprysmaticlabs%2Fprysm%2Ftree%2Fdevelop%2Fcrypto%2Fecdsa)%20(go)%0A%20%20-%20%5Bbsc%20secp256k1%5D(https%3A%2F%2Fgithub.com%2Fbnb-chain%2Fbsc%2Ftree%2Fmaster%2Fcrypto%2Fsecp256k1)%0A%20%20-%20%5Btendermint%20secp256k1%5D(https%3A%2F%2Fgithub.com%2Ftendermint%2Ftendermint%2Ftree%2Fmain%2Fcrypto%2Fsecp256k1)%20(go)%3A%20GenPrivKeySecp256k1%20hashes%20the%20secret%20with%20SHA2%2C%20and%20uses%20that%2032%20byte%20output%20to%20create%20the%20private%20key.%0A%20%20-%20%5Bcosmos-sdk%20secp256k1%5D(https%3A%2F%2Fgithub.com%2Fcosmos%2Fcosmos-sdk%2Ftree%2Fmain%2Fcrypto%2Fkeys%2Fsecp256k1)%0A%20%20-%20%5Bsnowbridge%20secp256k1%5D(https%3A%2F%2Fgithub.com%2FSnowfork%2Fsnowbridge%2Ftree%2Fmain%2Frelayer%2Fcrypto%2Fsecp256k1)%0A-%20%5Bsecp256r1%5D(https%3A%2F%2Fwww.secg.org%2Fsec2-v2.pdf)%0A%20%20-%20%5Bcosmos-sdk%20secp256r1%5D(https%3A%2F%2Fgithub.com%2Fcosmos%2Fcosmos-sdk%2Ftree%2Fmain%2Fcrypto%2Fkeys%2Fsecp256r1)%0A-%20%5Bsr25519%5D(https%3A%2F%2Fwiki.polkadot.network%2Fdocs%2Flearn-cryptography%23what-is-sr25519-and-where-did-it-come-from)%3A%20schnorr%20over%20ristretto25519%0A%20%20-%20%5Bchainsafe%20go-schnorrkel%5D(https%3A%2F%2Fgithub.com%2FChainSafe%2Fgo-schnorrkel)%20(go)%3A%20This%20repo%20contains%20the%20Go%20implementation%20of%20the%20sr25519%20signature%20algorithm%20(schnorr%20over%20ristretto25519).%20The%20existing%20Rust%20implementation%20is%20here.%0A%20%20-%20%5Bparitytech%20substrate-bip39%5D(https%3A%2F%2Fgithub.com%2Fparitytech%2Fsubstrate-bip39)%20(rust)%3A%20his%20is%20a%20crate%20for%20deriving%20secret%20keys%20for%20Ristretto%20compressed%20Ed25519%20(should%20be%20compatible%20with%20Ed25519%20at%20this%20time)%20from%20BIP39%20phrases.%0A%20%20-%20%5Bparitytech%20sr25519%5D(https%3A%2F%2Fgithub.com%2Fparitytech%2Fsubstrate%2Fblob%2Fmaster%2Fprimitives%2Fapplication-crypto%2Fsrc%2Fsr25519.rs)%20rust%0A%20%20-%20%5Btendermint%20sr25519%5D(https%3A%2F%2Fgithub.com%2Ftendermint%2Ftendermint%2Ftree%2Fmain%2Fcrypto%2Fsr25519)%20(go)%3A%20GenPrivKeyFromSecret%20hashes%20the%20secret%20with%20SHA2%2C%20and%20uses%20that%2032%20byte%20output%20to%20create%20the%20private%20key.%0A%20%20-%20%5Bsnowbridge%20sr25519%5D(https%3A%2F%2Fgithub.com%2FSnowfork%2Fsnowbridge%2Ftree%2Fmain%2Frelayer%2Fcrypto%2Fsecp256k1)%0A",lastUpdatedAt:1753129136e3},{lazy:()=>o2(()=>import("./signatures-D56ScIzx.js"),[]),path:"/research/primitives/signatures.html",type:"mdx",filePath:"research/primitives/signatures.mdx",content:"%23%20Signature%20Schemes%20in%20Consensus%20Protocols%0A%0A-%20date%3A%202023-02-05%0A-%20last%20updated%3A%202023-02-04%0A%0A%23%23%20Overview%0A%0ABoth%20sides%20of%20the%20bridge%20need%20to%20verify%20what%20happened%20on%20the%20other%20side.%20To%20do%20that%2C%20the%20verification%20logic%20is%20often%20encapsulated%20inside%20a%20light%20client%2C%20manifested%20as%20a%20smart%20contract%20on%20the%20chain%20which%20the%20verification%20needs%20to%20be%20executed.%20The%20light%20client%20needs%20to%20follow%20consensus%20and%20signature%20verification%20mechanisms%20based%20on%20the%20signing%20algorithm%20and%20the%20elliptical%20curve%20used%20on%20the%20other%20side.%20For%20example%2C%20if%20chain%20A%20has%2021%20validators%20signing%20each%20block%20using%20ECDSA%20algorithm%20on%20secp256k1%20curves%2C%20then%20chain%20A's%20light%20client%2C%20executed%20on%20chain%20B%2C%20must%20extract%20the%20signatures%20from%20the%20block%20headers%20presented%20to%20the%20light%20client%2C%20and%20follow%20the%20ECDSA%20signature%20verification%20algorithm%20to%20verify%20the%20content%20of%20the%20block%20header%20indeeds%20produces%20the%2021%20signatures%20contained%20in%20the%20block%20header%2C%20given%20the%20public%20keys%20of%20the%2021%20validators.%0A%0AHere%2C%20we%20present%20a%20reference%20table%20for%20these%20signature%20schemes%20and%20how%20they%20are%20used%20in%20the%20consensus%20protocols%20of%20different%20blockchains.%20We%20limit%20our%20initial%20scope%20to%20Ethereum%2C%20Polygon%2C%20Avalanche%2C%20BSC%2C%20Harmony%2C%20Cosmos%2C%20and%20Polkadot%20only%20(and%20their%20undelying%20technologies).%20Note%20that%20we%20are%20only%20looking%20at%20how%20signatures%20are%20used%20in%20consensus%2C%20not%20elsewhere%20in%20the%20blockchain%20stack%2C%20as%20all%20these%20protocols%20use%20ECDSA%20on%20secp256k1%20for%20accounts%20in%20EVM%20interactions.%0A%0A%7C%20Algorithm%20%7C%20Curve%20%20%20%20%20%20%7C%20Protocol%20%20%7C%20Codeotesecp256k1%20%20%7C%20Polygon%20%20%20%7C%20%5Blib%5D(https%3A%2F%2Fgithub.com%2Fmaticnetwork%2Ftendermint%2Ftree%2Fpeppermint%2Fcrypto%2Fsecp256kodified%5D(https%3A%2F%2Fwiki.polygon.technology%2Fdocs%2Fpos%2Fpeppermint)%20Tendermint%20validator%20signature%20schemelib%5D(https%3A%2F%2Fgithub.com%2Fbnb-chain%2Fbsc%2Ftree%2Fmaster%2Fcrypto%2Fsecp256k1)%20%5Busage%5D(https%3A%2F%2Fgithub.com%2Fbnb-chain%2Fbsc%2Fblob%2Fcb9e50bdf62c6b46a71724066d39f9851181a5af%2Fconsensus%2Fparlia%2Fparlia.go%23L546)%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7C%20Derived%20from%20%5BClique%5D(https%3A%2F%2Feips.ethereum.org%2FEIPS%2Feip-225)%2C%20then%20%5Bimproved%5D(https%3A%2F%2Fgithub.com%2Fbnb-chain%2FBEPs%2Fpull%2F131)%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7C%0A%7C%20BLS%20%20%20%20%20%20%20%7C%20BN254%20%20%20%20%20%20%7C%20Ethereum%20%20%7C%20%5BEVM%5D(https%3A%2F%2Fgithub.com%2Fethereum%2Fgo-ethereum%2Fblob%2Fb946b7a13b749c99979e312c83dce34cac8dd7b1%2Fcore%2Fvm%2Fcontracts.go%23L420)%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7C%20Added%20by%20%5BEIP-196%5D(https%3A%2F%2Feips.ethereum.org%2FEIPS%2Feip-196)%2C%5B197%5D(https%3A%2F%2Feips.ethereum.org%2FEIPS%2Feip-197)%3B%20Mainly%20for%20use%20in%20smart%20contracts%2C%20such%20as%20zk-snark%20verification.%20See%20%5Bexplainer%5D(https%3A%2F%2Fhackmd.io%2F%40liangcc%2Fbls-solidity%23BLS-Signatures-in-Solidity)%20%7C%0A%7C%20%20%20%20%20%20%20%20%20%20%20%7C%20BLS12-381%20%20%7C%20Ethereum%20%20%7C%20%5Bprysm%5D(https%3A%2F%2Fgithub.com%2Fprysmaticlabs%2Fprysm%2Ftree%2Fdevelop%2Fcrypto%2Fbls)%20%5Blighthouse%5D(https%3A%2F%2Fgithub.com%2Fsigp%2Flighthouse%2Ftree%2Fstable%2Fcrypto%2Fbls)%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7C%20See%20%5BPoS%20design%5D(https%3A%2F%2Fethereum.org%2Fen%2Fdevelopers%2Fdocs%2Fconsensus-mechanisms%2Fpos%2Fkeys%2F)%20and%20%5Bexplainer%5D(https%3A%2F%2Fhackmd.io%2F%40benjaminion%2Fbls12-381)%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7C%0A%7C%20%20%20%20%20%20%20%20%20%20%20%7C%20%20%20%20%20%20%20%20%20%20%20%20%7C%20Harmony%20%20%20%7C%20%5Blib%5D(https%3A%2F%2Fgithub.com%2Fharmony-one%2Fbls%2Ftree%2Fmaster%2Fffi%2Fgo%2Fbls)%20%5Busage%5D(https%3A%2F%2Fgithub.com%2Fharmony-one%2Fharmony%2Ftree%2Fmain%2Fcrypto%2Fbls)%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7C%20See%20%5Bdesign%5D(https%3A%2F%2Fdocs.harmony.one%2Fhome%2Fdevelopers%2Fharmony-specifics%2Fharmony-stack%23signatures-and-cryptography)%20and%20%5Bprotocol%20review%5D(https%3A%2F%2Fmedium.com%2Fharmony-one%2F2022-harmony-technical-review-88462efba368)%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7C%0A%7C%20RSA%20%20%20%20%20%20%20%7C%20N%2FA%20%20%20%20%20%20%20%20%7C%20Avalanche%20%7C%20%5Bverification%5D(https%3A%2F%2Fgithub.com%2Fava-labs%2Favalanchego%2Fblob%2F51c5edd85ccc7927443b945b427e64d91ff99f67%2Fvms%2Fproposervm%2Fblock%2Fblock.go%23L119)%20%5Bgeneration%5D(https%3A%2F%2Fgithub.com%2Fava-labs%2Favalanchego%2Fblob%2F51c5edd85ccc7927443b945b427e64d91ff99f67%2Fstaking%2Ftls.go%23L121)%20%7C%20Uses%20X.509%20certificate%20which%20potentially%20allows%20many%20algorithms%3B%20Moving%20towards%20BLS12-381%20and%20added%20implementations%20recently%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7C%0A%7C%20EdDSA%20%20%20%20%20%7C%20Curve25519%20%7C%20IBC%20%20%20%20%20%20%20%7C%20%5Blib%5D(https%3A%2F%2Fgithub.com%2Ftendermint%2Ftendermint%2Ftree%2Fmain%2Fcrypto%2Fed25519)%20%5Busage%5D(https%3A%2F%2Fgithub.com%2Ftendermint%2Ftendermint%2Fblob%2Fmain%2Fspec%2Fcore%2Fencoding.md%23public-key-cryptography)%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7C%20Used%20by%20all%20chains%20in%20Cosmos%20network%2C%20including%20%5BCosmos%20Hub%5D(https%3A%2F%2Fhub.cosmos.network%2Fmain%2Fvalidators%2Foverview.html)%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7C%0A%7C%20Schnorr%20%20%20%7C%20Curve25519%20%7C%20Substrate%20%7C%20%5Blib%5D(https%3A%2F%2Fgithub.com%2Fparitytech%2Fsubstrate%2Fblob%2Fmaster%2Fprimitives%2Fapplication-crypto%2Fsrc%2Fsr25519.rs)%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7C%20See%20also%20brief%20%5Bintro%5D(https%3A%2F%2Fwiki.polkadot.network%2Fdocs%2Flearn-cryptography%23what-is-sr25519-and-where-did-it-come-from)%20from%20Polkadot%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7C%0A%0A%23%23%20Resources%0A%0A%23%23%23%20Algorithms%0A%0A%23%23%23%23%20ECDSA%0A%0A-%20%5BWikipedia%5D(https%3A%2F%2Fwww.wikiwand.com%2Fen%2FElliptic_Curve_Digital_Signature_Algorithm)%0A-%20Standard%3A%20%5BSEC%202%3A%20Recommended%20Elliptic%20Curve%20Domain%20Parameters%5D(https%3A%2F%2Fwww.secg.org%2Fsec2-v2.pdf)%0A%0A%23%23%23%23%20BLS%0A%0A-%20%5BWikipedia%5D(https%3A%2F%2Fen.wikipedia.org%2Fwiki%2FBLS_digital_signature)%0A-%20Paper%3A%20%5BShort%20Signatures%20from%20the%20Weil%20Pairing%5D(https%3A%2F%2Fwww.iacr.org%2Farchive%2Fasiacrypt2001%2F22480516.pdf)%0A-%20Tutorial%3A%20%5BBLS%20signatures%3A%20better%20than%20Schnorr%5D(https%3A%2F%2Fmedium.com%2Fcryptoadvance%2Fbls-signatures-better-than-schnorr-5a7fe30ea716)%0A-%20Analysis%3A%20%5BSecret%20Sharing%20and%20Threshold%20Signatures%20with%20BLS%5D(https%3A%2F%2Fwww.dash.org%2Fblog%2Fsecret-sharing-and-threshold-signatures-with-bls%2F)%0A-%20Deep%20dive%3A%20%5BBLS%20Signatures%20in%20Solidity%5D(https%3A%2F%2Fhackmd.io%2F%40liangcc%2Fbls-solidity)%0A%0A%23%23%23%23%20EdDSA%0A%0A-%20%5BWikipedia%5D(https%3A%2F%2Fen.wikipedia.org%2Fwiki%2FEdDSA)%0A-%20%5BGoLang%5D(https%3A%2F%2Fpkg.go.dev%2Fgolang.org%2Fx%2Fcrypto%2Fed25519)%0A%0A%23%23%23%20Curves%0A%0A-%20%5BCurve%20database%5D(https%3A%2F%2Fneuromancer.sk%2Fstd%2F)%0A%0A%23%23%23%23%20secp256k1%0A%0A-%20%5BBitcoin%20Wiki%5D(https%3A%2F%2Fen.bitcoin.it%2Fwiki%2FSecp256k1)%0A-%20Tutorial%3A%20%5BA%20Bluffer%E2%80%99s%20Guide%20to%20secp256k1%5D(https%3A%2F%2Fmedium.com%2Fasecuritysite-when-bob-met-alice%2Fa-bluffers-guide-to-secp256k1-404e423e612)%0A%0A%23%23%23%23%20BLS12-381%0A%0A-%20Deep%20dive%3A%20%5BBLS12-381%20For%20The%20Rest%20Of%20Us%5D(https%3A%2F%2Fhackmd.io%2F%40benjaminion%2Fbls12-381)%0A-%20Intro%3A%20%5BBLS12-381%3A%20New%20zk-SNARK%20Elliptic%20Curve%20Construction%5D(https%3A%2F%2Felectriccoin.co%2Fblog%2Fnew-snark-curve%2F)%0A-%20Paper%3A%20%5BFast%20and%20simple%20constant-time%20hashing%20to%20the%20BLS12-381%20elliptic%20curve%5D(https%3A%2F%2Ftches.iacr.org%2Findex.php%2FTCHES%2Farticle%2Fview%2F8348%2F7697)%0A-%20Benchmark%3A%20%5BBLS%3A%20Is%20it%20really%20that%20slow%5D(https%3A%2F%2Fwww.dash.org%2Fblog%2Fbls-is-it-really-that-slow%2F)%0A-%20EIP%3A%20%5BEIP-2537%3A%20Precompile%20for%20BLS12-381%20curve%20operations%5D(https%3A%2F%2Feips.ethereum.org%2FEIPS%2Feip-2537)%0A-%20EVM%20launch%3A%20%5BTargeting%20Shanghai%20upgrade%20May%202023%5D(https%3A%2F%2Fethereum-magicians.org%2Ft%2Feip-2537-bls12-precompile-discussion-thread%2F4187%2F16)%0A%0A%23%23%23%23%20BN254%0A%0A-%20%5BDefinition%5D(https%3A%2F%2Fneuromancer.sk%2Fstd%2Fbn%2Fbn254)%0A-%20Paper%3A%20%5BPairing-Friendly%20Elliptic%20Curves%20of%20Prime%20Order%5D(https%3A%2F%2Feprint.iacr.org%2F2005%2F133.pdf)%0A-%20Deep%20Dive%3A%20%5BBLS%20Signatures%20in%20Solidity%5D(https%3A%2F%2Fhackmd.io%2F%40liangcc%2Fbls-solidity)%0A-%20Speed%20Optimization%3A%20%5BNew%20software%20speed%20records%20for%20cryptographic%20pairings%5D(https%3A%2F%2Fcryptojedi.org%2Fpapers%2Fdclxvi-20100714.pdf)%0A%0A%23%23%23%20Usage%20in%20ZKP%0A%0A-%20%5BA%20survey%20of%20elliptic%20curves%20for%20proof%20systems%5D(https%3A%2F%2Feprint.iacr.org%2F2022%2F586.pdf)%0A%0A%23%23%23%20Signing%20Implementations%0A%0AThe%20%5BStandard%20Curve%20Database%5D(https%3A%2F%2Fneuromancer.sk%2Fstd%2F)%20is%20a%20good%20starting%20point%20for%20existing%20signing%20algorithms.%20Base%20implementations%20such%20as%20%5Bgolang%20crypto%5D(https%3A%2F%2Fpkg.go.dev%2Fgolang.org%2Fx%2Fcrypto)%20and%20%5Brust%20crypto%5D(https%3A%2F%2Fdocs.rs%2Frust-crypto%2Flatest%2Fcrypto%2F)%20provide%20good%20reference%20codebases.%0A%0A-%20%5Bbcrypt%5D(https%3A%2F%2Fwww.usenix.org%2Flegacy%2Fevent%2Fusenix99%2Fprovos%2Fprovos.pdf)%0A%20%20-%20%5Bcosmos-sdk%20bcrypt%5D(https%3A%2F%2Fgithub.com%2Fcosmos%2Fcosmos-sdk%2Ftree%2Fmain%2Fcrypto%2Fkeys%2Fbcrypt)%0A-%20%5Bbip-0039%5D(https%3A%2F%2Fgithub.com%2Fbitcoin%2Fbips%2Fblob%2Fmaster%2Fbip-0039.mediawiki)%0A%20%20-%20%5Blighthouse%5D(https%3A%2F%2Fgithub.com%2Fsigp%2Flighthouse%2Ftree%2Fstable%2Fcrypto%2Feth2_wallet)%20(rust)%0A-%20%5Bbls%5D(https%3A%2F%2Fen.wikipedia.org%2Fwiki%2FBLS_digital_signature)%0A%20%20-%20%5Bethereum-prysm%5D(https%3A%2F%2Fgithub.com%2Fprysmaticlabs%2Fprysm%2Ftree%2Fdevelop%2Fcrypto%2Fbls)%0A-%20%5Bbls-12-381%5D(https%3A%2F%2Fhackmd.io%2F%40benjaminion%2Fbls12-381)%0A%20%20-%20%5Bethereum%20EIP-2537%3A%20Precompile%20for%20BLS12-381%20curve%20operations%5D(https%3A%2F%2Feips.ethereum.org%2FEIPS%2Feip-2537)%0A%20%20-%20%5Bethereum-go-ethereum%5D(https%3A%2F%2Fgithub.com%2Fethereum%2Fgo-ethereum%2Ftree%2Fmaster%2Fcrypto%2Fbls12381)%20(go)%0A%20%20-%20%5Bharmony%20bls%5D(https%3A%2F%2Fgithub.com%2Fharmony-one%2Fharmony%2Fblob%2Fmain%2Fcrypto%2Fbls%2Fbls.go)%20(go)%3A%20uses%20%5Bharmony%20bls%20repository%5D(https%3A%2F%2Fgithub.com%2Fharmony-one%2Fbls%2Fblob%2Fmaster%2Freadme.mdx)%0A%20%20%20%20-%20%5Bbls%20Harmony%5D(https%3A%2F%2Fgithub.com%2Fharmony-one%2Fbls)%20forked%20from%20%5Bherumi%2Fbls%5C_%5D(https%3A%2F%2Fgithub.com%2Fherumi%2Fbls_)%3A%20written%20in%20C%2B%2B%2C%20supports%20Go%2C%20Rust%2C%20WebAssembly%20(Node.js)%0A%20%20-%20%5Bprysm%5D(https%3A%2F%2Fgithub.com%2Fprysmaticlabs%2Fprysm%2Ftree%2Fdevelop%2Fcrypto%2Fbls)%20(go)%0A%20%20-%20%5Blighthouse%5D(https%3A%2F%2Fgithub.com%2Fsigp%2Flighthouse%2Ftree%2Fstable%2Fcrypto%2Fbls)%20(rust)%3A%20provides%20a%20wrapper%20around%20several%20BLS%20implementations%20to%20provide%20Lighthouse-specific%20functionality.%0A%20%20-%20%5Blighthouse%5D(https%3A%2F%2Fgithub.com%2Fsigp%2Flighthouse%2Ftree%2Fstable%2Fcrypto%2Feth2_key_derivation)%20(rust)%3A%20Provides%20path-based%20hierarchical%20BLS%20key%20derivation%2C%20as%20specified%20by%20%5BEIP-2333%5D(https%3A%2F%2Feips.ethereum.org%2FEIPS%2Feip-2333).%0A%20%20%20%20-%20%5BAurora%20Rainbow%20Bridge%20Implementation%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Flighthouse%2Ftree%2Fstable%2Fcrypto%2Fbls%2Fsrc%2Fimpls)%3A%20Implementations%0A%20%20%20%20%20%20-%20%5Bblst%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Flighthouse%2Fblob%2Fstable%2Fcrypto%2Fbls%2Fsrc%2Fimpls%2Fblst.rs)%0A%20%20%20%20%20%20-%20%5Bfake_crypto%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Flighthouse%2Fblob%2Fstable%2Fcrypto%2Fbls%2Fsrc%2Fimpls%2Ffake_crypto.rs)%0A%20%20%20%20%20%20-%20%5Bmilagro%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Flighthouse%2Fblob%2Fstable%2Fcrypto%2Fbls%2Fsrc%2Fimpls%2Fmilagro.rs)%3A%20support%20for%20%5BApache%20Milagro%5D(https%3A%2F%2Fmilagro.apache.org%2Fdocs%2Fmilagro-intro%2F)%0A%20%20-%20%5Blighthouse%5D(https%3A%2F%2Fgithub.com%2Fsigp%2Flighthouse%2Ftree%2Fstable%2Fcrypto%2Feth2_keystore)%20(rust)%3A%20Provides%20a%20JSON%20keystore%20for%20a%20BLS%20keypair%2C%20as%20specified%20by%20%5BEIP-2335%5D(https%3A%2F%2Feips.ethereum.org%2FEIPS%2Feip-2335).%0A%20%20-%20%5Bbsc%20bls12381%5D(https%3A%2F%2Fgithub.com%2Fbnb-chain%2Fbsc%2Ftree%2Fmaster%2Fcrypto%2Fbls12381)%20(go)%0A%20%20-%20%5Bblst%5D(https%3A%2F%2Fgithub.com%2Fsupranational%2Fblst)%3A%20blst%20(pronounced%20'blast')%20is%20a%20BLS12-381%20signature%20library%20focused%20on%20performance%20and%20security.%20It%20is%20written%20in%20C%20and%20assembly.%0A-%20%5Bbn256%5D(https%3A%2F%2Fcryptojedi.org%2Fpapers%2Fdclxvi-20100714.pdf)%0A%20%20-%20%5Bethereum-go-ethereum%5D(https%3A%2F%2Fgithub.com%2Fethereum%2Fgo-ethereum%2Ftree%2Fmaster%2Fcrypto%2Fbn256)%20(go)%0A%20%20-%20%5Bbsc%20bn256%5D(https%3A%2F%2Fgithub.com%2Fbnb-chain%2Fbsc%2Ftree%2Fmaster%2Fcrypto%2Fbn256)%20(go)%0A-%20%5Becdsa%5D(https%3A%2F%2Fen.wikipedia.org%2Fwiki%2FElliptic_Curve_Digital_Signature_Algorithm)%0A%20%20-%20%5Bbsc%20crypto%5D(https%3A%2F%2Fgithub.com%2Fbnb-chain%2Fbsc%2Fblob%2Fmaster%2Fcrypto%2Fcrypto.go%23L169)%20(go)%3A%20toECDSA%20creates%20a%20private%20key%20with%20the%20given%20D%20value.%20The%20strict%20parameter%20controls%20whether%20the%20key's%20length%20should%20be%20enforced%20at%20the%20curve%20size%20or%20it%20can%20also%20accept%20legacy%20encodings%20(0%20prefixes).%0A%20%20-%20%5Bparitytech%20ecdsa%5D(https%3A%2F%2Fgithub.com%2Fparitytech%2Fsubstrate%2Fblob%2Fmaster%2Fprimitives%2Fapplication-crypto%2Fsrc%2Fecdsa.rs)%20(rust)%0A%20%20-%20%5Bcosmos-sdk%20ecdsa%5D(https%3A%2F%2Fgithub.com%2Fcosmos%2Fcosmos-sdk%2Ftree%2Fmain%2Fcrypto%2Fkeys%2Finternal%2Fecdsa)%0A-%20%5Bed25519%5D(https%3A%2F%2Fed25519.cr.yp.to%2Fed25519-20110926.pdf)%20%5Bgolang%5D(https%3A%2F%2Fpkg.go.dev%2Fgolang.org%2Fx%2Fcrypto%2Fed25519)%0A%20%20-%20%5Btendermint%20ed25519%5D(https%3A%2F%2Fgithub.com%2Ftendermint%2Ftendermint%2Ftree%2Fmain%2Fcrypto%2Fed25519)%20(go)%3A%20GenPrivKey%20generates%20a%20new%20ed25519%20private%20key.%20It%20uses%20OS%20randomness%20in%20conjunction%20with%20the%20current%20global%20random%20seed%20in%20tendermint%2Flibs%2Fcommon%20to%20generate%20the%20private%20key.%0A%20%20-%20%5Bparitytech%20ed25519%5D(https%3A%2F%2Fgithub.com%2Fparitytech%2Fsubstrate%2Fblob%2Fmaster%2Fprimitives%2Fapplication-crypto%2Fsrc%2Fed25519.rs)%20(rust)%0A%20%20-%20%5BEd25519%5D(https%3A%2F%2Fen.wikipedia.org%2Fwiki%2FEdDSA)%3A%20%5BEd25519.sol%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Fblob%2Fmaster%2Fcontracts%2Feth%2Fnearbridge%2Fcontracts%2FEd25519.sol)%0A%20%20-%20%5Bcosmos-sdk%20ed25519%5D(https%3A%2F%2Fgithub.com%2Fcosmos%2Fcosmos-sdk%2Ftree%2Fmain%2Fcrypto%2Fkeys%2Fed25519)%0A-%20%5Bsecp256k1%5D(https%3A%2F%2Fwww.secg.org%2Fsec2-v2.pdf)%0A%20%20-%20%5Bethereum-go-ethereum%5D(https%3A%2F%2Fgithub.com%2Fethereum%2Fgo-ethereum%2Ftree%2Fmaster%2Fcrypto%2Fsecp256k1)%20(go)%0A%20%20-%20%5Bprysm%5D(https%3A%2F%2Fgithub.com%2Fprysmaticlabs%2Fprysm%2Ftree%2Fdevelop%2Fcrypto%2Fecdsa)%20(go)%0A%20%20-%20%5Bbsc%20secp256k1%5D(https%3A%2F%2Fgithub.com%2Fbnb-chain%2Fbsc%2Ftree%2Fmaster%2Fcrypto%2Fsecp256k1)%0A%20%20-%20%5Btendermint%20secp256k1%5D(https%3A%2F%2Fgithub.com%2Ftendermint%2Ftendermint%2Ftree%2Fmain%2Fcrypto%2Fsecp256k1)%20(go)%3A%20GenPrivKeySecp256k1%20hashes%20the%20secret%20with%20SHA2%2C%20and%20uses%20that%2032%20byte%20output%20to%20create%20the%20private%20key.%0A%20%20-%20%5Bcosmos-sdk%20secp256k1%5D(https%3A%2F%2Fgithub.com%2Fcosmos%2Fcosmos-sdk%2Ftree%2Fmain%2Fcrypto%2Fkeys%2Fsecp256k1)%0A%20%20-%20%5Bsnowbridge%20secp256k1%5D(https%3A%2F%2Fgithub.com%2FSnowfork%2Fsnowbridge%2Ftree%2Fmain%2Frelayer%2Fcrypto%2Fsecp256k1)%0A-%20%5Bsecp256r1%5D(https%3A%2F%2Fwww.secg.org%2Fsec2-v2.pdf)%0A%20%20-%20%5Bcosmos-sdk%20secp256r1%5D(https%3A%2F%2Fgithub.com%2Fcosmos%2Fcosmos-sdk%2Ftree%2Fmain%2Fcrypto%2Fkeys%2Fsecp256r1)%0A-%20%5Bsr25519%5D(https%3A%2F%2Fwiki.polkadot.network%2Fdocs%2Flearn-cryptography%23what-is-sr25519-and-where-did-it-come-from)%3A%20schnorr%20over%20ristretto25519%0A%20%20-%20%5Bchainsafe%20go-schnorrkel%5D(https%3A%2F%2Fgithub.com%2FChainSafe%2Fgo-schnorrkel)%20(go)%3A%20This%20repo%20contains%20the%20Go%20implementation%20of%20the%20sr25519%20signature%20algorithm%20(schnorr%20over%20ristretto25519).%20The%20existing%20Rust%20implementation%20is%20here.%0A%20%20-%20%5Bparitytech%20substrate-bip39%5D(https%3A%2F%2Fgithub.com%2Fparitytech%2Fsubstrate-bip39)%20(rust)%3A%20his%20is%20a%20crate%20for%20deriving%20secret%20keys%20for%20Ristretto%20compressed%20Ed25519%20(should%20be%20compatible%20with%20Ed25519%20at%20this%20time)%20from%20BIP39%20phrases.%0A%20%20-%20%5Bparitytech%20sr25519%5D(https%3A%2F%2Fgithub.com%2Fparitytech%2Fsubstrate%2Fblob%2Fmaster%2Fprimitives%2Fapplication-crypto%2Fsrc%2Fsr25519.rs)%20rust%0A%20%20-%20%5Btendermint%20sr25519%5D(https%3A%2F%2Fgithub.com%2Ftendermint%2Ftendermint%2Ftree%2Fmain%2Fcrypto%2Fsr25519)%20(go)%3A%20GenPrivKeyFromSecret%20hashes%20the%20secret%20with%20SHA2%2C%20and%20uses%20that%2032%20byte%20output%20to%20create%20the%20private%20key.%0A%20%20-%20%5Bsnowbridge%20sr25519%5D(https%3A%2F%2Fgithub.com%2FSnowfork%2Fsnowbridge%2Ftree%2Fmain%2Frelayer%2Fcrypto%2Fsecp256k1)%0A",lastUpdatedAt:1753129136e3},{lazy:()=>o2(()=>import("./weak-subjectivity-D8Zez2y6.js"),[]),path:"/research/primitives/weak-subjectivity",type:"mdx",filePath:"research/primitives/weak-subjectivity.mdx",content:"%23%20Weak%20Subjectivity%0A%0A-%20date%3A%202023-02-04%0A-%20last%20updated%3A%202023-02-04%0A%0A%23%23%20Overview%0A%0AFollowing%20is%20an%20excerpt%20from%20_Analysis%20on%20Weak%20Subjectivity%20in%20Ethereum%202.0_%20%5B%5E1%5D%20.%0A%0A%3E%20Weak%20subjectivity%20%5B%5E2%5D%20is%20a%20social-consensus-driven%20approach%20for%20solving%20the%20fun-%20damental%20%E2%80%9Cnothing-at-stake%E2%80%9D%20problem%20of%20proof-of-stake%20protocols.%20In%20particular%2C%20it%20addresses%20the%20problem%20in%20the%20presence%20of%20long-range%20forks%2C%20while%20the%20slash-%20ing%20mechanism%20handles%20the%20case%20of%20short-range%20forks.%20Specifically%2C%20the%20current%20weak%20subjectivity%20mechanism%20deals%20with%20the%20following%20two%20types%20of%20long-range%20attacks%20%5B%5E3%5D%0A%3E%0A%3E%20%E2%80%93%20_Exploiting%20retired%20validators%3A_%20Adversaries%20can%20create%20and%20reveal%20a%20new%20chain%20branching%20from%20a%20certain%20block%20on%20the%20canonical%20chain%2C%20after%202%2F3%20of%20validators%20who%20were%20active%20for%20the%20block%20have%20exited.%20Note%20that%20such%20validators%20can%20still%20justify%20and%20finalize%20conflicting%20blocks%20at%20earlier%20slots%20without%20being%20slashed%20after%20they%20have%20exited.%0A%3E%0A%3E%20%E2%80%93%20_Exploiting%20diverging%20validator%20sets%3A_%20Adversaries%20can%20build%20a%20new%20chain%20until%20the%20validator%20set%20for%20the%20new%20chain%20is%20sufficiently%20different%20from%20that%20of%20the%20canonical%20chain.%20The%20larger%20the%20difference%20between%20the%20two%20validator%20sets%2C%20the%20lower%20the%20accountable%20safety%20tolerance.%20For%20example%2C%20if%20the%20intersection%20of%20the%20two%20sets%20is%20smaller%20than%202%2F3%20of%20each%20set%2C%20then%20it%20is%20possible%20to%20have%20conflicting%20blocks%20to%20be%20finalized%20without%20any%20validators%20violating%20the%20slashing%20conditions.%0A%3E%0A%3E%20_It%20is%20unknown%20whether%20this%20mechanism%20can%20deal%20with%20other%20types%20of%20long-range%20attacks%2C%20if%20any%2C%20in%20general._%0A%3E%0A%3E%20The%20current%20weak%20subjectivity%20mechanism%20employs%20a%20social%20consensus%20layer%20in%20parallel%20to%20maintain%20sufficiently%20many%20checkpoints%20(called%20weak%20subjectivity%20check-%20points)%20so%20that%20there%20exist%20no%20conflicting%20finalized%20blocks%20that%20are%20descendants%20of%20the%20latest%20weak%20subjectivity%20checkpoint.%20In%20other%20words%2C%20the%20purpose%20of%20the%20latest%20weak%20subjectivity%20checkpoints%20is%20to%20deterministically%20identify%20the%20unique%20canonical%20chain%20even%20in%20the%20presence%20of%20conflicting%20finalized%20blocks%20caused%20by%20the%20long-range%20attacks.%0A%0A%23%23%20References%0A%0AArticles%20and%20guides%0A%0A-%20%5BWeak%20Subjectivity%20in%20Eth2.0%5D(https%3A%2F%2Fnotes.ethereum.org%2F%40adiasg%2Fweak-subjectvity-eth2)%3A%20This%20document%20is%20aimed%20for%20Eth2.0%20client%20teams%20to%20understand%20weak%20subjectivity%20periods%20and%20their%20implication.%0A%0A-%20%5BPhase%200%20--%20Weak%20Subjectivity%20Guide%5D(https%3A%2F%2Fgithub.com%2Fethereum%2Fconsensus-specs%2Fblob%2Fmaster%2Fspecs%2Fphase0%2Fweak-subjectivity.mdx)%3A%20This%20document%20is%20a%20guide%20for%20implementing%20the%20Weak%20Subjectivity%20protections%20in%20Phase%200.%0A%0ADocumentation%0A%0A-%20%5BEthereum%20Docs%3A%20WEAK%20SUBJECTIVITY%5D(https%3A%2F%2Fethereum.org%2Fen%2Fdevelopers%2Fdocs%2Fconsensus-mechanisms%2Fpos%2Fweak-subjectivity%2F)%3A%20This%20refers%20to%20a%20chain%20that%20can%20progress%20objectively%20after%20some%20initial%20seed%20of%20information%20is%20retrieved%20socially.%0A%0A-%20%5BTeku%20Docs%3A%20Weak%20Subjectivity%5D(https%3A%2F%2Fdocs.teku.consensys.net%2FConcepts%2FWeak-Subjectivity%2F)%3A%20The%20weak%20subjectivity%20period%20refers%20to%20how%20far%20behind%20the%20chain%20head%20a%20node%20can%20be%20before%201%2F3%20of%20validators%20may%20have%20exited%20since%20the%20node%20was%20last%20in%20sync.%0A%0AImplementations%0A%0A-%20%5BPrysm%3A%20weak_subjectivity_checks.go%5D(https%3A%2F%2Fgithub.com%2Fprysmaticlabs%2Fprysm%2Fblob%2Fdevelop%2Fbeacon-chain%2Fblockchain%2Fweak_subjectivity_checks.go)%0A%20%20-%20%5BNewWeakSubjectivityVerifier%5D(https%3A%2F%2Fgithub.com%2Fprysmaticlabs%2Fprysm%2Fblob%2Fdevelop%2Fbeacon-chain%2Fblockchain%2Fweak_subjectivity_checks.go%23L31)%20validates%20a%20checkpoint%2C%20and%20if%20valid%2C%20uses%20it%20to%20initialize%20a%20weak%20subjectivity%20verifier.%0A%20%20-%20%5BVerifyWeakSubjectivity%5D(https%3A%2F%2Fgithub.com%2Fprysmaticlabs%2Fprysm%2Fblob%2Fdevelop%2Fbeacon-chain%2Fblockchain%2Fweak_subjectivity_checks.go%23L52)%20verifies%20the%20weak%20subjectivity%20root%20in%20the%20service%20struct.%0A%0AFootnotes%0A%5B%5E1%5D%3A%20%5BAnalysis%20on%20Weak%20Subjectivity%20in%20Ethereum%202.0%5D(https%3A%2F%2Fgithub.com%2Fruntimeverification%2Fbeacon-chain-verification%2Fblob%2Fmaster%2Fweak-subjectivity%2Fweak-subjectivity-analysis.pdf)%3A%0A%0A%5B%5E2%5D%3A%20%5BProof%20of%20Stake%3A%20How%20I%20Learned%20to%20Love%20Weak%20Subjectivity%5D(https%3A%2F%2Fblog.ethereum.org%2F2014%2F11%2F25%2Fproof-stake-learned-love-weak-subjectivity)%3A%0A%0A%5B%5E3%5D%3A%20It%20is%20unknown%20whether%20this%20mechanism%20can%20deal%20with%20other%20types%20of%20long-range%20attacks%2C%20if%20any%2C%20in%20general%0A",lastUpdatedAt:1753129136e3},{lazy:()=>o2(()=>import("./weak-subjectivity-D8Zez2y6.js"),[]),path:"/research/primitives/weak-subjectivity.html",type:"mdx",filePath:"research/primitives/weak-subjectivity.mdx",content:"%23%20Weak%20Subjectivity%0A%0A-%20date%3A%202023-02-04%0A-%20last%20updated%3A%202023-02-04%0A%0A%23%23%20Overview%0A%0AFollowing%20is%20an%20excerpt%20from%20_Analysis%20on%20Weak%20Subjectivity%20in%20Ethereum%202.0_%20%5B%5E1%5D%20.%0A%0A%3E%20Weak%20subjectivity%20%5B%5E2%5D%20is%20a%20social-consensus-driven%20approach%20for%20solving%20the%20fun-%20damental%20%E2%80%9Cnothing-at-stake%E2%80%9D%20problem%20of%20proof-of-stake%20protocols.%20In%20particular%2C%20it%20addresses%20the%20problem%20in%20the%20presence%20of%20long-range%20forks%2C%20while%20the%20slash-%20ing%20mechanism%20handles%20the%20case%20of%20short-range%20forks.%20Specifically%2C%20the%20current%20weak%20subjectivity%20mechanism%20deals%20with%20the%20following%20two%20types%20of%20long-range%20attacks%20%5B%5E3%5D%0A%3E%0A%3E%20%E2%80%93%20_Exploiting%20retired%20validators%3A_%20Adversaries%20can%20create%20and%20reveal%20a%20new%20chain%20branching%20from%20a%20certain%20block%20on%20the%20canonical%20chain%2C%20after%202%2F3%20of%20validators%20who%20were%20active%20for%20the%20block%20have%20exited.%20Note%20that%20such%20validators%20can%20still%20justify%20and%20finalize%20conflicting%20blocks%20at%20earlier%20slots%20without%20being%20slashed%20after%20they%20have%20exited.%0A%3E%0A%3E%20%E2%80%93%20_Exploiting%20diverging%20validator%20sets%3A_%20Adversaries%20can%20build%20a%20new%20chain%20until%20the%20validator%20set%20for%20the%20new%20chain%20is%20sufficiently%20different%20from%20that%20of%20the%20canonical%20chain.%20The%20larger%20the%20difference%20between%20the%20two%20validator%20sets%2C%20the%20lower%20the%20accountable%20safety%20tolerance.%20For%20example%2C%20if%20the%20intersection%20of%20the%20two%20sets%20is%20smaller%20than%202%2F3%20of%20each%20set%2C%20then%20it%20is%20possible%20to%20have%20conflicting%20blocks%20to%20be%20finalized%20without%20any%20validators%20violating%20the%20slashing%20conditions.%0A%3E%0A%3E%20_It%20is%20unknown%20whether%20this%20mechanism%20can%20deal%20with%20other%20types%20of%20long-range%20attacks%2C%20if%20any%2C%20in%20general._%0A%3E%0A%3E%20The%20current%20weak%20subjectivity%20mechanism%20employs%20a%20social%20consensus%20layer%20in%20parallel%20to%20maintain%20sufficiently%20many%20checkpoints%20(called%20weak%20subjectivity%20check-%20points)%20so%20that%20there%20exist%20no%20conflicting%20finalized%20blocks%20that%20are%20descendants%20of%20the%20latest%20weak%20subjectivity%20checkpoint.%20In%20other%20words%2C%20the%20purpose%20of%20the%20latest%20weak%20subjectivity%20checkpoints%20is%20to%20deterministically%20identify%20the%20unique%20canonical%20chain%20even%20in%20the%20presence%20of%20conflicting%20finalized%20blocks%20caused%20by%20the%20long-range%20attacks.%0A%0A%23%23%20References%0A%0AArticles%20and%20guides%0A%0A-%20%5BWeak%20Subjectivity%20in%20Eth2.0%5D(https%3A%2F%2Fnotes.ethereum.org%2F%40adiasg%2Fweak-subjectvity-eth2)%3A%20This%20document%20is%20aimed%20for%20Eth2.0%20client%20teams%20to%20understand%20weak%20subjectivity%20periods%20and%20their%20implication.%0A%0A-%20%5BPhase%200%20--%20Weak%20Subjectivity%20Guide%5D(https%3A%2F%2Fgithub.com%2Fethereum%2Fconsensus-specs%2Fblob%2Fmaster%2Fspecs%2Fphase0%2Fweak-subjectivity.mdx)%3A%20This%20document%20is%20a%20guide%20for%20implementing%20the%20Weak%20Subjectivity%20protections%20in%20Phase%200.%0A%0ADocumentation%0A%0A-%20%5BEthereum%20Docs%3A%20WEAK%20SUBJECTIVITY%5D(https%3A%2F%2Fethereum.org%2Fen%2Fdevelopers%2Fdocs%2Fconsensus-mechanisms%2Fpos%2Fweak-subjectivity%2F)%3A%20This%20refers%20to%20a%20chain%20that%20can%20progress%20objectively%20after%20some%20initial%20seed%20of%20information%20is%20retrieved%20socially.%0A%0A-%20%5BTeku%20Docs%3A%20Weak%20Subjectivity%5D(https%3A%2F%2Fdocs.teku.consensys.net%2FConcepts%2FWeak-Subjectivity%2F)%3A%20The%20weak%20subjectivity%20period%20refers%20to%20how%20far%20behind%20the%20chain%20head%20a%20node%20can%20be%20before%201%2F3%20of%20validators%20may%20have%20exited%20since%20the%20node%20was%20last%20in%20sync.%0A%0AImplementations%0A%0A-%20%5BPrysm%3A%20weak_subjectivity_checks.go%5D(https%3A%2F%2Fgithub.com%2Fprysmaticlabs%2Fprysm%2Fblob%2Fdevelop%2Fbeacon-chain%2Fblockchain%2Fweak_subjectivity_checks.go)%0A%20%20-%20%5BNewWeakSubjectivityVerifier%5D(https%3A%2F%2Fgithub.com%2Fprysmaticlabs%2Fprysm%2Fblob%2Fdevelop%2Fbeacon-chain%2Fblockchain%2Fweak_subjectivity_checks.go%23L31)%20validates%20a%20checkpoint%2C%20and%20if%20valid%2C%20uses%20it%20to%20initialize%20a%20weak%20subjectivity%20verifier.%0A%20%20-%20%5BVerifyWeakSubjectivity%5D(https%3A%2F%2Fgithub.com%2Fprysmaticlabs%2Fprysm%2Fblob%2Fdevelop%2Fbeacon-chain%2Fblockchain%2Fweak_subjectivity_checks.go%23L52)%20verifies%20the%20weak%20subjectivity%20root%20in%20the%20service%20struct.%0A%0AFootnotes%0A%5B%5E1%5D%3A%20%5BAnalysis%20on%20Weak%20Subjectivity%20in%20Ethereum%202.0%5D(https%3A%2F%2Fgithub.com%2Fruntimeverification%2Fbeacon-chain-verification%2Fblob%2Fmaster%2Fweak-subjectivity%2Fweak-subjectivity-analysis.pdf)%3A%0A%0A%5B%5E2%5D%3A%20%5BProof%20of%20Stake%3A%20How%20I%20Learned%20to%20Love%20Weak%20Subjectivity%5D(https%3A%2F%2Fblog.ethereum.org%2F2014%2F11%2F25%2Fproof-stake-learned-love-weak-subjectivity)%3A%0A%0A%5B%5E3%5D%3A%20It%20is%20unknown%20whether%20this%20mechanism%20can%20deal%20with%20other%20types%20of%20long-range%20attacks%2C%20if%20any%2C%20in%20general%0A",lastUpdatedAt:1753129136e3},{lazy:()=>o2(()=>import("./axiom-5GdkIw7Y.js"),[]),path:"/research/zk/axiom",type:"mdx",filePath:"research/zk/axiom.mdx",content:"%23%20Axiom%0A%0A-%20date%3A%202023-06-28%0A-%20last%20updated%3A%202023-02-04%0A%0A%23%23%20Overview%0A%0AAxiom%5B%5Eov-1%5D%20is%20a%20ZK%20coprocessor%20for%20Ethereum%20which%20provides%20smart%20contracts%20trustless%20access%20to%20all%20on-chain%20data%20and%20arbitrary%20expressive%20compute%20over%20it.%0A%0A%23%23%20References%0A%0A-%20%5BWebsite%5D(https%3A%2F%2Fwww.axiom.xyz%2F)%0A-%20%5BDocumentation%5D(https%3A%2F%2Fdocs.axiom.xyz%2F)%0A-%20%5BCompany%20Profile%20LinkedIn%5D(https%3A%2F%2Fwww.linkedin.com%2Fcompany%2Faxiom-xyz%2Fabout%2F)%0A-%20%5BUniswap%20Grant%5D(https%3A%2F%2Fhackmd.io%2F%40yisun%2FH1e6U42Ps)%20%5Btweet%5D(https%3A%2F%2Ftwitter.com%2FUniswapFND%2Fstatus%2F1617895640415207424%3Flang%3Den)%0A-%20%5BIntrinsic%20technologies%20builder%5D(https%3A%2F%2Fgen.xyz%2Fblog%2Faxiomxyz)%0A-%20%5BGithub%20Repos%5D(https%3A%2F%2Fgithub.com%2Faxiom-crypto)%0A%20%20-%20https%3A%2F%2Fgithub.com%2Faxiom-crypto%2Faxiom-v1-contracts%20(uses%20%5Bfoundry%5D(https%3A%2F%2Fbook.getfoundry.sh%2F)%2C%20solidity%20and%20%5Byul%5D(https%3A%2F%2Fmedium.com%2F%40jtriley15%2Fyul-vs-solidity-contract-comparison-2b6d9e9dc833))%0A%20%20-%20https%3A%2F%2Fgithub.com%2Faxiom-crypto%2Faxiom-eth%20(written%20in%20rust)%0A%20%20-%20https%3A%2F%2Fgithub.com%2Faxiom-crypto%2Faxiom-apps%20(uniswap)%0A%20%20-%20https%3A%2F%2Fgithub.com%2Faxiom-crypto%2Fhalo2-lib%20(rust%20zk)%0A-%20%5B%40axiomhq%20npm%20packages%5D(https%3A%2F%2Fwww.npmjs.com%2Fsearch%3Fq%3D%2540axiomhq)%0A-%20Yi%20is%20part%20of%20the%20Delendum%20Telegram%20Group%20%40yisun%20and%20Presented%20at%20%5BEth%20Denver%5D(https%3A%2F%2Ftwitter.com%2Faxiom_xyz%2Fstatus%2F1630960864479027200)%0A-%20%5BYi%20Sun%2C%20Reflection%20and%20Introspection%20in%20Blockchains%5D(https%3A%2F%2Fwww.youtube.com%2Fwatch%3Fv%3D05uv3hsH6oA)%0A-%20%5BDelendum%20Research%20Workshop%20Slides%5D(https%3A%2F%2Fdrive.google.com%2Fdrive%2Ffolders%2F15Ih1B4Pjr-oorAa33qlAgVH5klCHwSG3)%0A%0A%23%23%20Footnotes%0A%0AOverview%0A%5B%5Eov-1%5D%3A%20%5BAxiom%5D(https%3A%2F%2Fwww.axiom.xyz%2F)%3A%20The%20ZK%20Coprocessor%20for%20Ethereum%0A",lastUpdatedAt:1753129136e3},{lazy:()=>o2(()=>import("./axiom-5GdkIw7Y.js"),[]),path:"/research/zk/axiom.html",type:"mdx",filePath:"research/zk/axiom.mdx",content:"%23%20Axiom%0A%0A-%20date%3A%202023-06-28%0A-%20last%20updated%3A%202023-02-04%0A%0A%23%23%20Overview%0A%0AAxiom%5B%5Eov-1%5D%20is%20a%20ZK%20coprocessor%20for%20Ethereum%20which%20provides%20smart%20contracts%20trustless%20access%20to%20all%20on-chain%20data%20and%20arbitrary%20expressive%20compute%20over%20it.%0A%0A%23%23%20References%0A%0A-%20%5BWebsite%5D(https%3A%2F%2Fwww.axiom.xyz%2F)%0A-%20%5BDocumentation%5D(https%3A%2F%2Fdocs.axiom.xyz%2F)%0A-%20%5BCompany%20Profile%20LinkedIn%5D(https%3A%2F%2Fwww.linkedin.com%2Fcompany%2Faxiom-xyz%2Fabout%2F)%0A-%20%5BUniswap%20Grant%5D(https%3A%2F%2Fhackmd.io%2F%40yisun%2FH1e6U42Ps)%20%5Btweet%5D(https%3A%2F%2Ftwitter.com%2FUniswapFND%2Fstatus%2F1617895640415207424%3Flang%3Den)%0A-%20%5BIntrinsic%20technologies%20builder%5D(https%3A%2F%2Fgen.xyz%2Fblog%2Faxiomxyz)%0A-%20%5BGithub%20Repos%5D(https%3A%2F%2Fgithub.com%2Faxiom-crypto)%0A%20%20-%20https%3A%2F%2Fgithub.com%2Faxiom-crypto%2Faxiom-v1-contracts%20(uses%20%5Bfoundry%5D(https%3A%2F%2Fbook.getfoundry.sh%2F)%2C%20solidity%20and%20%5Byul%5D(https%3A%2F%2Fmedium.com%2F%40jtriley15%2Fyul-vs-solidity-contract-comparison-2b6d9e9dc833))%0A%20%20-%20https%3A%2F%2Fgithub.com%2Faxiom-crypto%2Faxiom-eth%20(written%20in%20rust)%0A%20%20-%20https%3A%2F%2Fgithub.com%2Faxiom-crypto%2Faxiom-apps%20(uniswap)%0A%20%20-%20https%3A%2F%2Fgithub.com%2Faxiom-crypto%2Fhalo2-lib%20(rust%20zk)%0A-%20%5B%40axiomhq%20npm%20packages%5D(https%3A%2F%2Fwww.npmjs.com%2Fsearch%3Fq%3D%2540axiomhq)%0A-%20Yi%20is%20part%20of%20the%20Delendum%20Telegram%20Group%20%40yisun%20and%20Presented%20at%20%5BEth%20Denver%5D(https%3A%2F%2Ftwitter.com%2Faxiom_xyz%2Fstatus%2F1630960864479027200)%0A-%20%5BYi%20Sun%2C%20Reflection%20and%20Introspection%20in%20Blockchains%5D(https%3A%2F%2Fwww.youtube.com%2Fwatch%3Fv%3D05uv3hsH6oA)%0A-%20%5BDelendum%20Research%20Workshop%20Slides%5D(https%3A%2F%2Fdrive.google.com%2Fdrive%2Ffolders%2F15Ih1B4Pjr-oorAa33qlAgVH5klCHwSG3)%0A%0A%23%23%20Footnotes%0A%0AOverview%0A%5B%5Eov-1%5D%3A%20%5BAxiom%5D(https%3A%2F%2Fwww.axiom.xyz%2F)%3A%20The%20ZK%20Coprocessor%20for%20Ethereum%0A",lastUpdatedAt:1753129136e3},{lazy:()=>o2(()=>import("./intro-DoLRgsEp.js"),[]),path:"/research/zk/intro",type:"mdx",filePath:"research/zk/intro.mdx",content:"%23%20Zero%20Knowledge%20Research%0A%0A-%20date%3A%202023-02-04%0A-%20last%20updated%3A%202023-02-04%0A%0A%23%23%20Overview%0A%0AHere%20we%20do%20a%20deep%20dive%20on%20Zero%20Knowledge%0A%0A-%20Approach%0A-%20Emerging%20Use%20Cases%0A-%20Proof%20Systems%0A-%20Efficient%20Signatures%0A-%20Proof%20Aggregation%0A-%20Tokenomics%0A%0A%23%23%20Learning%20Material%0A%0A%23%23%23%20Foundational%0A%0A-%20%5BAn%20Introduction%20to%20Mathematical%20Cryptography%5D(https%3A%2F%2Fwww.amazon.com%2FIntroduction-Mathematical-Cryptography-Undergraduate-Mathematics%2Fdp%2F1493917102)%0A-%20%5BIntroduction%20to%20Applied%20Linear%20Algebra%5D(https%3A%2F%2Fwww.amazon.com%2FIntroduction-Applied-Linear-Algebra-Matrices%2Fdp%2F1316518965)%0A-%20%5BCalculus%20I%20-%20Differentiation%20and%20Integration%5D(https%3A%2F%2Fwww.amazon.com%2FCalculus-Differentiation-Integration-Hamilton-Education-ebook%2Fdp%2FB07BPHW4VL)%0A-%20%5BAn%20Introduction%20to%20Mathematical%20Cryptography%5D(https%3A%2F%2Fwww.amazon.com%2FIntroduction-Mathematical-Cryptography-Undergraduate-Mathematics-ebook%2Fdp%2FB00PULZOCI%2F)%3A%20the%20mathematics%20behind%20the%20theory%20of%20public%20key%20cryptosystems%20and%20digital%20signature%20schemes.%0A-%20%5BCryptography%20Algorithms%5D(https%3A%2F%2Fwww.amazon.com%2FNext-generation-Cryptography-Algorithms-Explained-implementation%2Fdp%2F1789617138)%0A-%20%5BNumber%20Theory%5D(https%3A%2F%2Fcrypto.stanford.edu%2Fpbc%2Fnotes%2Fnumbertheory%2F)%0A-%20%5BzkSNARKs%20in%20a%20nutshell%5D(https%3A%2F%2Fblog.ethereum.org%2F2016%2F12%2F05%2Fzksnarks-in-a-nutshell)%0A-%20%5BQuadratic%20Arithmetic%20Programs%3A%20from%20Zero%20to%20Hero%5D(https%3A%2F%2Fmedium.com%2F%40VitalikButerin%2Fquadratic-arithmetic-programs-from-zero-to-hero-f6d558cea649)%0A-%20%5BExploring%20Elliptic%20Curve%20Pairings%5D(https%3A%2F%2Fmedium.com%2F%40VitalikButerin%2Fexploring-elliptic-curve-pairings-c73c1864e627)%0A-%20%5BZk-SNARKs%3A%20Under%20the%20Hood%5D(https%3A%2F%2Fmedium.com%2F%40VitalikButerin%2Fzk-snarks-under-the-hood-b33151a013f6)%0A-%20%5BThe%20MoonMath%20Manual%20to%20zk-SNARKs%5D(https%3A%2F%2Fleastauthority.com%2Fstatic%2Fpublications%2FMoonMath080822.pdf)%0A-%20%5BElliptic%20Curve%20Cryptography%3A%20a%20gentle%20introduction%5D(https%3A%2F%2Fandrea.corbellini.name%2F2015%2F05%2F17%2Felliptic-curve-cryptography-a-gentle-introduction%2F)%0A-%20%5BExploring%20Elliptic%20Curve%20Pairings%5D(https%3A%2F%2Fvitalik.ca%2Fgeneral%2F2017%2F01%2F14%2Fexploring_ecp.html)%0A-%20%5BKZG%20polynomial%20commitments%5D(https%3A%2F%2Fdankradfeist.de%2Fethereum%2F2020%2F06%2F16%2Fkate-polynomial-commitments.html)%0A-%20%5Bplookup%5D(https%3A%2F%2Feprint.iacr.org%2F2020%2F315.pdf)%3A%20A%20simplified%20polynomial%20protocol%20for%0A%20%20lookup%20tables.%0A-%20%5BCasting%20out%20Primes%5D(https%3A%2F%2Fblog.polygon.technology%2Fwp-content%2Fuploads%2F2022%2F10%2Fcasting-3.pdf)%3A%20a%20nondeterministic%20method%20for%20bignum%20arithmetic.%20It%20is%20inspired%20by%20the%20%E2%80%9Ccasting%20out%20nines%E2%80%9D%20technique%2C%20where%20some%20identity%20is%20checked%20modulo%209%2C%20providing%20a%20probabilistic%20result.%0A%0A%23%23%23%20Zero%20Knowledge%0A%0AResearch%20Articles%0A%0A-%20%5BFraud%20and%20Data%20Availability%20Proofs%5D(https%3A%2F%2Farxiv.org%2Fpdf%2F1809.09044.pdf)%3A%20Maximising%20Light%20Client%20Security%20and%20Scaling%20Blockchains%20with%20Dishonest%20Majorities.%20_Light%20clients%2C%20also%20known%20as%20Simple%20Payment%20Verification%20(SPV)%20clients%2C%20are%20nodes%20which%20only%20download%20a%20small%20portion%20of%20the%20data%20in%20a%20blockchain%2C%20and%20use%20indirect%20means%20to%20verify%20that%20a%20given%20chain%20is%20valid._%20%5C*%20Research%20Papers%20(Zero%20Knowledge%20Related)%0A-%20%5BzkBridge%3A%20Trustless%20Cross-chain%20Bridges%20Made%20Practical%5D(https%3A%2F%2Frdi.berkeley.edu%2Fzkp%2FzkBridge%2Fuploads%2Fpaper.pdf)%0A-%20%5BCaulk%3A%20Lookup%20Arguments%20in%20Sublinear%20Time%5D(https%3A%2F%2Feprint.iacr.org%2F2022%2F621.pdf)%3A%20position-hiding%20linkability%20for%20vector%20commitment%20schemes%3A%20one%20can%20prove%20in%20zero%20knowledge%20that%20one%20or%20m%20values%20that%20comprise%20commitment%20cm%20all%20belong%20to%20the%20vector%20of%20size%20N%20committed%20to%20in%20C.%0A-%20%5BHyperPlonk%3A%20Plonk%20with%20Linear-Time%20Prover%20and%20High-Degree%20Custom%20Gates%5D(https%3A%2F%2Feprint.iacr.org%2F2022%2F1355.pdf)%0A-%20%5BSLONK%E2%80%94a%20simple%20universal%20SNARK%5D(https%3A%2F%2Fethresear.ch%2Ft%2Fslonk-a-simple-universal-snark%2F6420)%3A%20a%20simplification%20to%20PLONK%20called%20SLONK.%20We%20replace%20the%20permutation%20argument%20(the%20%E2%80%9CP%E2%80%9D%20in%20PLONK)%20in%20favour%20of%20a%20shift%20argument%20(the%20%E2%80%9CS%E2%80%9D%20in%20SLONK).%20We%20get%20a%20universal%20SNARK%20with%20the%20smallest%20known%20proof%20size%20and%20verification%20time.%0A-%20%5BKate%20commitments%20from%20the%20Lagrange%20basis%20without%20FFTs%5D(https%3A%2F%2Fnotes.ethereum.org%2FT0ZVaaywQAqP4jegqO3asg%3Fview)%3A%20how%20to%20commit%2C%20evaluate%20and%20open%20polynomials%20in%20the%20Lagrange%20basis%20without%20FFTs.%20This%20is%20the%20first%20part%20in%20a%20series%20(see%20part%201%2C%20part%202%2C%20part%203)%20showing%20how%20to%20do%20PLONK-style%20universal%20SNARKs%20without%20FFTs%0A-%20%5BHadamard%20checks%20from%20the%20Lagrange%20basis%20without%20FFTs%5D(https%3A%2F%2Fnotes.ethereum.org%2FIl4z42lmQtaUYFigsjsk2Q%3Fview)%3A%20how%20to%20prove%20Hadamard%20relations%20between%20polynomials%20in%20the%20Lagrange%20basis%20without%20FFTs.%20This%20is%20the%20second%20part%20(see%20part%201%2C%20part%202%2C%20part%203)%20in%20a%20series%20showing%20how%20to%20do%20PLONK-style%20universal%20SNARKs%20without%20FFTs.%0A-%20%5BPLONK-style%20SNARKs%20without%20FFTs%5D(https%3A%2F%2Fnotes.ethereum.org%2FDLRqK9V7RIOsTZkab8Hm_Q%3Fview)%3A%20how%20to%20do%20PLONK-style%20universal%20SNARKs%20without%20FFTs.%20This%20is%20part%203%20in%20a%20series%20(part%201%2C%20part%202%2C%20part%203).%0A-%20%5BAn%20efficient%20verifiable%20state%20for%20zk-EVM%20and%20beyondfrom%20the%20Anemoi%20hash%20function%5D(https%3A%2F%2Feprint.iacr.org%2F2022%2F1487.pdf)%0A-%20%5BPlonky2%3A%20Fast%20Recursive%20Arguments%20with%20PLONK%20and%20FRI%5D(https%3A%2F%2Fgithub.com%2Fmir-protocol%2Fplonky2%2Fblob%2Fmain%2Fplonky2%2Fplonky2.pdf)%0A%0Aarticles%20and%20learning%20resources%0A%0A-%20%5BBridging%20the%20Multichain%20Universe%20with%20Zero%20Knowledge%20Proofs%5D(https%3A%2F%2Fmedium.com%2F%40ingonyama%2Fbridging-the-multichain-universe-with-zero-knowledge-proofs-6157464fbc86)%0A-%20%5Bawesome-zkml%5D(https%3A%2F%2Fgithub.com%2Fworldcoin%2Fawesome-zkml)%0A-%20%5Bhttps%3A%2F%2Flearn.0xparc.org%2F%5D(https%3A%2F%2Flearn.0xparc.org%2F)%3A%20ZK%20Learning%20Resources%0A-%20%5BDelendum%20ZKP%20Knowledge%20base%5D(https%3A%2F%2Fkb.delendum.xyz%2F)%0A-%20%5Bhttps%3A%2F%2Fappliedzkp.org%5D(https%3A%2F%2Fappliedzkp.org%2F)%3A%20Privacy%20and%20Scaling%20Exploration%0A-%20%5Bhttps%3A%2F%2Fzkp.science%2F%5D(https%3A%2F%2Fzkp.science%2F)%3A%20Zero-Knowledge%20Proofs%0A-%20%5Bhttps%3A%2F%2Fstarkware.co%2Fstark-101%2F%5D(https%3A%2F%2Fstarkware.co%2Fstark-101%2F)%3A%20Stark%20101%3A%20write%20a%20STARK%20prover%20from%20scratch%0A-%20%5Bhttps%3A%2F%2Fdocs.starkware.co%2Fstarkex%2Findex.html%5D(https%3A%2F%2Fdocs.starkware.co%2Fstarkex%2Findex.html)%3A%20-%20Starkware%20StarkeEx%0A-%20%5BNoir%5D(https%3A%2F%2Fdocs.aztec.network%2Fdevelopers%2Fnoir)%20Noir%20is%20a%20Domain%20Specific%20Language%20for%20developing%20ZK-provable%20programs.%20(Rust%20based)%0A%20%20-%20%5Barticle%5D(https%3A%2F%2Fmedium.com%2Faztec-protocol%2Fintroducing-noir-the-universal-language-of-zero-knowledge-ff43f38d86d9)%0A%20%20-%20%5Btweet%5D(https%3A%2F%2Ftwitter.com%2Faztecnetwork%2Fstatus%2F1578082456212643840)%0A%20%20-%20%5BGrants%5D(https%3A%2F%2Faztec.network%2Fgrants%2F)%0A-%20%5BArkworks%5D(https%3A%2F%2Fgithub.com%2Farkworks-rs)%0A-%20%5Bzkrepl.dev%5D(https%3A%2F%2Fzkrepl.dev%2F)%0A-%20%5Bsuccinct%5D(https%3A%2F%2Fblog.succinct.xyz%2F)%0A-%20%5BZK%20BATCH%20ECDSA%5D(https%3A%2F%2Fblog.succinct.xyz%2Fpost%2F2022%2F10%2F03%2Fbatch-ecdsa%2F)%0A-%20%5BBatch%20ECDSA%20Verification%5D(https%3A%2F%2Fgithub.com%2Fpuma314%2Fbatch-ecdsa)%0A-%20%5BBringing%20IBC%20to%20Ethereum%20using%20ZK-Snarks%5D(https%3A%2F%2Fethresear.ch%2Ft%2Fbringing-ibc-to-ethereum-using-zk-snarks%2F13634)%0A-%20%5BMINA%20docs%5D(https%3A%2F%2Fdocs.minaprotocol.com%2F)%0A%0Aimplementation%20articles%0A%0A-%20%5BzkPoS%3A%20End-to-End%20Trustless%5D(https%3A%2F%2Fhyperoracle.medium.com%2Fzkpos-end-to-end-trustless-65edccd87c5a)%3A%20HyperOracle%20article%20on%20how%20zkPoS%20provides%20the%20ability%20of%20proving%20the%20consensus%20with%20ZK.%0A-%20%5BSuccinct%20Towards%20the%20endgame%20of%20blockchain%20interoperability%20with%20proof%20of%20consensus%5D(https%3A%2F%2Fblog.succinct.xyz%2Fpost%2F2022%2F09%2F20%2Fproof-of-consensus)%0A%0A%23%23%23%20Codebases%0A%0A-%20%5BCircom%5D(https%3A%2F%2Fgithub.com%2Fiden3%2Fcircom)%20a%20novel%20domain-specific%20language%20for%20defining%20arithmetic%20circuits%20that%20can%20be%20used%20to%20generate%20zero-knowledge%20proofs%0A-%20%5BDarkForest%5D(https%3A%2F%2Fgithub.com%2Fdarkforest-eth)%20zkSNARK%20space%20warfare%0A%20%20-%20%5BAwesome%20List%5D(https%3A%2F%2Fgithub.com%2Fsnowtigersoft%2Fawesome-darkforest)%0A%20%20-%20%5BOur%20front%20end%20code%20(the%20game%20is%20open%20source!)%5D(https%3A%2F%2Fgithub.com%2Fdarkforest-eth%2Fclient%2Ftree%2Fmaster%2Fsrc%2FFrontend)%0A%20%20-%20%5BTwitter%5D(https%3A%2F%2Ftwitter.com%2Fdarkforest_eth)%0A-%20%5BDiscord%5D(https%3A%2F%2Fdiscord.gg%2F2u2TN6v8r6)%0A%20%20-%20%5BTeam%20Blog%5D(http%3A%2F%2Fblog.zkga.me%2F)%0A%20%20%20%20-%20%5BDark%20Forest%20v0.6%5D(https%3A%2F%2Fblog.zkga.me%2Fannouncing-v6)%0A%20%20%20%20-%20%5BExploiting%20DF%20v0.5%20Artifact%20Minting%5D(https%3A%2F%2Fblog.zkga.me%2Fartifact-minting-exploit)%0A%20%20%20%20-%20%5Bv0.5%20Plugins%20Contest%20Winners%5D(https%3A%2F%2Fblog.zkga.me%2Fv5-plugins-contest-winners)%0A%20%20%20%20-%20%5BZero-Knowledge%20Proofs%20for%20Engineers%5D(https%3A%2F%2Fblog.zkga.me%2Fintro-to-zksnarks)%0A%20%20%20%20-%20%5BAnnouncing%20Dark%20Forest%5D(https%3A%2F%2Fblog.zkga.me%2Fannouncing-darkforest)%0A%20%20%20%20-%20%5BThe%20Strongest%20Crypto%20Gaming%20Thesis%3A%20Why%20we're%20building%20Dark%20Forest%5D(https%3A%2F%2Fgubsheep.mirror.xyz%2FnsteOfjATPSKH0J8lRD0j2iynmvv_C8i8eb483UzcTM)%0A%20%20-%20%5BCommunity%20plugins%5D(http%3A%2F%2Fplugins.zkga.me%2F)%0A%20%20-%20%5BCommunity-run%20wiki%5D(http%3A%2F%2Fdfwiki.net%2F)%0A%20%20-%20Player-made%20content%0A%20%20%20%20-%20%5BDark%20Forest%20GPU%20universe%20explorer%5D(https%3A%2F%2Fwww.longrocklabs.com%2Farticles%2Fthe-exploration-era-begins%2F)%0A%20%20%20%20-%20%5BGetting%20started%20with%20Dark%20Forest%5D(https%3A%2F%2Fwww.youtube.com%2Fwatch%3Fv%3DkeY4a9cKmgg)%0A%20%20%20%20-%20%5BSetting%20up%20a%20remote%20miner%5D(https%3A%2F%2Fwww.youtube.com%2Fwatch%3Fv%3DKus4fWNg3zo)%0A%20%20%20%20-%20%5BDark%20Forest%20battle%20timelapse%5D(https%3A%2F%2Fwww.youtube.com%2Fwatch%3Fv%3Do9A-cfDanTY)%0A%0A-%20%5Bhalo2ecc-s%5D(https%3A%2F%2Fgithub.com%2FDelphinusLab%2Fhalo2ecc-s)%3A%20Re-implement%20an%20ecc%20circuits%20with%20halo2%0A%0A-%20%5Bplonky2%5D(https%3A%2F%2Fgithub.com%2Fmir-protocol%2Fplonky2)%3A%20a%20SNARK%20implementation%20based%20on%20techniques%20from%20PLONK%20and%20FRI.%20It%20has%20since%20expanded%20to%20include%20tools%20such%20as%20Starky%2C%20a%20highly%20performant%20STARK%20implementation.%0A%20%20-%20%5Bplonky2-solidity-verifier%5D(https%3A%2F%2Fgithub.com%2Fpolymerdao%2Fplonky2-solidity-verifier)%0A%20%20-%20%5Bplonky2-circom%5D(https%3A%2F%2Fgithub.com%2Fpolymerdao%2Fplonky2-circom)%3A%20Plonky2%20verifier%20in%20Circom%0A%20%20-%20%5Bplonky2-ed25519%5D(https%3A%2F%2Fgithub.com%2Fpolymerdao%2Fplonky2-ed25519)%3A%20SNARK%20verification%20circuits%20of%20a%20digital%20signature%20scheme%20Ed25519%20implemented%20with%20Plonky2.%0A%20%20-%20%5Bplonky2-sha256%5D(https%3A%2F%2Fgithub.com%2Fpolymerdao%2Fplonky2-sha256)%3A%20SNARK%20circuits%20of%20a%20cryptographic%20hash%20function%20SHA-256%20implemented%20with%20Plonky2.%0A%20%20-%20%5Bplonky2-sha512%5D(https%3A%2F%2Fgithub.com%2Fpolymerdao%2Fplonky2-sha512)%3A%20SNARK%20circuits%20of%20a%20cryptographic%20hash%20function%20SHA-512%20implemented%20with%20Plonky2.%0A%20%20-%20%5Bplonky2-pairing%5D(https%3A%2F%2Fgithub.com%2Fpolymerdao%2Fplonky2-pairing)%0A%0A%23%23%23%20Presentations%0A%0A-%20%5BDevcon%20VI%5D(https%3A%2F%2Farchive.devcon.org%2Farchive%2Fplaylists%2Fdevcon-6%2F)%0A-%20%5BLight%20Client%20After%20the%20Merge%5D(https%3A%2F%2Farchive.devcon.org%2Farchive%2Fwatch%2F6%2Flight-clients-after-the-merge%2F%3Fplaylist%3DDevcon%25206%26tab%3DYouTube)%20%5Bvideo%5D(https%3A%2F%2Fwww.youtube.com%2Fwatch%3Fv%3DZHNrAXf3RDE)%0A-%20%5BWhat%20to%20Know%20about%20Zero%20Knowledge%5D(https%3A%2F%2Farchive.devcon.org%2Farchive%2Fwatch%2F6%2Fwhat-to-know-about-zero-knowledge%2F%3Fplaylist%3DDevcon%25206%26tab%3DYouTube)%0A-%20%5BZK%20Application%20ShowCase%5D(https%3A%2F%2Farchive.devcon.org%2Farchive%2Fwatch%2F6%2Fzk-application-showcase%2F%3Fplaylist%3DDevcon%25206%26tab%3DYouTube)%0A-%20%5BZK%20Badges%3A%20How%20to%20prove%20that%20you%20donated%20to%20Gitcoin%20grants%5D(https%3A%2F%2Farchive.devcon.org%2Farchive%2Fwatch%2F6%2Fzk-badges%2F%3Fplaylist%3DDevcon%25206%26tab%3DYouTube)%0A-%20%5BZK%20Security%20Self%20Led%20Session%5D(https%3A%2F%2Farchive.devcon.org%2Farchive%2Fwatch%2F6%2Fzk-security-self-led-session%2F%3Fplaylist%3DDevcon%25206%26tab%3DYouTube)%0A-%20%5BzkEVM%20Vs%20EVM%3A%20Full%20Equivalence%3F%5D(https%3A%2F%2Farchive.devcon.org%2Farchive%2Fwatch%2F6%2Fzkevm-vs-evm-full-equivalence%2F%3Fplaylist%3DDevcon%25206%26tab%3DYouTube)%0A-%20%5BZK%20Application%20Design%20Patterns%5D(https%3A%2F%2Farchive.devcon.org%2Farchive%2Fwatch%2F6%2Fzk-application-design-patterns%2F%3Fplaylist%3DDevcon%25206%26tab%3DYouTube)%20%5Bvideo%5D(https%3A%2F%2Fwww.youtube.com%2Fwatch%3Fv%3D-PUKinjbLR8)%0A-%20%5BApplied%20ZK%20SLS%20presentations%5D(https%3A%2F%2Fwww.notion.so%2F360fcd3f2a824759b1373ddeef5bf564)%0A%0A%23%23%23%20Additional%20Information%0A%0A-%20Review%20%5BENS%20Bridging%20Strategy%5D(https%3A%2F%2Fmedium.com%2Fthe-ethereum-name-service%2Fmvp-of-ens-on-l2-with-optimism-demo-video-how-to-try-it-yourself-b44c390cbd67)%20and%20%5Brepo%5D(https%3A%2F%2Fgithub.com%2Fensdomains%2Fl2gateway-demo%2F)%0A-%20%5BSuccinct%5D(https%3A%2F%2Fblog.succinct.xyz%2Fpost%2F2022%2F09%2F20%2Fproof-of-consensus)%20%5B%24600K%5D(https%3A%2F%2Fforum.gnosis.io%2Ft%2Fgip-57-should-gnosis-dao-support-research-of-a-zksnark-enabled-light-client-and-bridge%2F5421)%20%5Btweet%5D(https%3A%2F%2Ftwitter.com%2Fsuccinctlabs%2Fstatus%2F1572299292177481729)%20%5BDemo%5D(https%3A%2F%2Fwww.zkbridge.wtf%2F)%20%5Bgithub%5D(https%3A%2F%2Fgithub.com%2Fsuccinctlabs)%20%5Bvideo%5D(https%3A%2F%2Fyoutu.be%2FCt6H5GcnA0A%3Ft%3D15554)%20built%20using%20%5Bcircom%5D(https%3A%2F%2Fdocs.circom.io%2F)%0A-%20%5Bcircom%5D(https%3A%2F%2Fdocs.circom.io%2F)%0A-%20%5BArkworks%5D(https%3A%2F%2Fgithub.com%2Farkworks-rs%2F)%2C%20%5Btutorial%5D(https%3A%2F%2Fgithub.com%2Farkworks-rs%2Fr1cs-tutorial%2F)%2C%20%5Btwitter%5D(https%3A%2F%2Ftwitter.com%2Farkworks_rs)%2C%20%5Bvideo%5D(https%3A%2F%2Fyoutu.be%2FCt6H5GcnA0A%3Ft%3D7429)%0A-%20%5BAztec.network%5D(http%3A%2F%2FAztec.network)%20%5BNoir%5D(https%3A%2F%2Faztec.network%2Fnoir)%20%5Bintro%5D(https%3A%2F%2Fmedium.com%2Faztec-protocol%2Fintroducing-noir-the-universal-language-of-zero-knowledge-ff43f38d86d9)%2C%20%5Bgithub%5D(https%3A%2F%2Fgithub.com%2Fnoir-lang%2Fnoir)%2C%20%5Btwitter%5D(https%3A%2F%2Ftwitter.com%2Faztecnetwork)%2C%20%5Bdocs%5D(https%3A%2F%2Fnoir-lang.github.io%2Fbook%2Findex.html)%0A-%20%5BGNark%5D(https%3A%2F%2Fgithub.com%2FConsenSys%2Fgnark)%0A-%20%5BElectronLabs%5D(https%3A%2F%2Felectronlabs.org%2F)%0A-%20%5BZKU%5D(https%3A%2F%2Fzku.one%2F)%20%5BLearning%5D(https%3A%2F%2Fwww.notion.so%2FLearning-50b5a6ecc45b46248323f0e552b6885f)%0A-%20Review%20%5Bmatter-labs%20knowledge%20base%5D(https%3A%2F%2Fgithub.com%2Fmatter-labs%2Fawesome-zero-knowledge-proofs%23learn)%0A%0A-%20%5BzkSNARKS%20explained%20like%20you're%20someone%20who%20knows%20some%20math%20and%20some%20coding%5D(https%3A%2F%2Fwww.reddit.com%2Fr%2FzkTech%2Fcomments%2Ftfjvrj%2Fzksnarks_explained_like_youre_someone_who_knows%2F)%0A-%20%5BThe%20Halo2%20Book%5D(https%3A%2F%2Fzcash.github.io%2Fhalo2%2Fconcepts%2Fproofs.html)%0A-%20%5BA%20survey%20of%20elliptic%20curves%20for%20proof%20systems%5D(https%3A%2F%2Feprint.iacr.org%2F2022%2F586.pdf)%0A-%20zkEVM%0A%20%20-%20%5BzkSync%20Era%5D(https%3A%2F%2Fera.zksync.io%2Fdocs%2Fdev%2F)%0A%20%20-%20%5BPolygon%20zkEVM%5D(https%3A%2F%2Fwiki.polygon.technology%2Fdocs%2FzkEVM%2Fdevelop%2F)%0A%20%20-%20%5BzkSync%20zkEVM%5D(https%3A%2F%2Fdocs.zksync.io%2Fzkevm%2F)%0A%20%20-%20%5BConsenSys%20zkEVM%5D(https%3A%2F%2Fdocs.zkevm.consensys.net%2Foverview)%0A",lastUpdatedAt:1753129136e3},{lazy:()=>o2(()=>import("./intro-DoLRgsEp.js"),[]),path:"/research/zk/intro.html",type:"mdx",filePath:"research/zk/intro.mdx",content:"%23%20Zero%20Knowledge%20Research%0A%0A-%20date%3A%202023-02-04%0A-%20last%20updated%3A%202023-02-04%0A%0A%23%23%20Overview%0A%0AHere%20we%20do%20a%20deep%20dive%20on%20Zero%20Knowledge%0A%0A-%20Approach%0A-%20Emerging%20Use%20Cases%0A-%20Proof%20Systems%0A-%20Efficient%20Signatures%0A-%20Proof%20Aggregation%0A-%20Tokenomics%0A%0A%23%23%20Learning%20Material%0A%0A%23%23%23%20Foundational%0A%0A-%20%5BAn%20Introduction%20to%20Mathematical%20Cryptography%5D(https%3A%2F%2Fwww.amazon.com%2FIntroduction-Mathematical-Cryptography-Undergraduate-Mathematics%2Fdp%2F1493917102)%0A-%20%5BIntroduction%20to%20Applied%20Linear%20Algebra%5D(https%3A%2F%2Fwww.amazon.com%2FIntroduction-Applied-Linear-Algebra-Matrices%2Fdp%2F1316518965)%0A-%20%5BCalculus%20I%20-%20Differentiation%20and%20Integration%5D(https%3A%2F%2Fwww.amazon.com%2FCalculus-Differentiation-Integration-Hamilton-Education-ebook%2Fdp%2FB07BPHW4VL)%0A-%20%5BAn%20Introduction%20to%20Mathematical%20Cryptography%5D(https%3A%2F%2Fwww.amazon.com%2FIntroduction-Mathematical-Cryptography-Undergraduate-Mathematics-ebook%2Fdp%2FB00PULZOCI%2F)%3A%20the%20mathematics%20behind%20the%20theory%20of%20public%20key%20cryptosystems%20and%20digital%20signature%20schemes.%0A-%20%5BCryptography%20Algorithms%5D(https%3A%2F%2Fwww.amazon.com%2FNext-generation-Cryptography-Algorithms-Explained-implementation%2Fdp%2F1789617138)%0A-%20%5BNumber%20Theory%5D(https%3A%2F%2Fcrypto.stanford.edu%2Fpbc%2Fnotes%2Fnumbertheory%2F)%0A-%20%5BzkSNARKs%20in%20a%20nutshell%5D(https%3A%2F%2Fblog.ethereum.org%2F2016%2F12%2F05%2Fzksnarks-in-a-nutshell)%0A-%20%5BQuadratic%20Arithmetic%20Programs%3A%20from%20Zero%20to%20Hero%5D(https%3A%2F%2Fmedium.com%2F%40VitalikButerin%2Fquadratic-arithmetic-programs-from-zero-to-hero-f6d558cea649)%0A-%20%5BExploring%20Elliptic%20Curve%20Pairings%5D(https%3A%2F%2Fmedium.com%2F%40VitalikButerin%2Fexploring-elliptic-curve-pairings-c73c1864e627)%0A-%20%5BZk-SNARKs%3A%20Under%20the%20Hood%5D(https%3A%2F%2Fmedium.com%2F%40VitalikButerin%2Fzk-snarks-under-the-hood-b33151a013f6)%0A-%20%5BThe%20MoonMath%20Manual%20to%20zk-SNARKs%5D(https%3A%2F%2Fleastauthority.com%2Fstatic%2Fpublications%2FMoonMath080822.pdf)%0A-%20%5BElliptic%20Curve%20Cryptography%3A%20a%20gentle%20introduction%5D(https%3A%2F%2Fandrea.corbellini.name%2F2015%2F05%2F17%2Felliptic-curve-cryptography-a-gentle-introduction%2F)%0A-%20%5BExploring%20Elliptic%20Curve%20Pairings%5D(https%3A%2F%2Fvitalik.ca%2Fgeneral%2F2017%2F01%2F14%2Fexploring_ecp.html)%0A-%20%5BKZG%20polynomial%20commitments%5D(https%3A%2F%2Fdankradfeist.de%2Fethereum%2F2020%2F06%2F16%2Fkate-polynomial-commitments.html)%0A-%20%5Bplookup%5D(https%3A%2F%2Feprint.iacr.org%2F2020%2F315.pdf)%3A%20A%20simplified%20polynomial%20protocol%20for%0A%20%20lookup%20tables.%0A-%20%5BCasting%20out%20Primes%5D(https%3A%2F%2Fblog.polygon.technology%2Fwp-content%2Fuploads%2F2022%2F10%2Fcasting-3.pdf)%3A%20a%20nondeterministic%20method%20for%20bignum%20arithmetic.%20It%20is%20inspired%20by%20the%20%E2%80%9Ccasting%20out%20nines%E2%80%9D%20technique%2C%20where%20some%20identity%20is%20checked%20modulo%209%2C%20providing%20a%20probabilistic%20result.%0A%0A%23%23%23%20Zero%20Knowledge%0A%0AResearch%20Articles%0A%0A-%20%5BFraud%20and%20Data%20Availability%20Proofs%5D(https%3A%2F%2Farxiv.org%2Fpdf%2F1809.09044.pdf)%3A%20Maximising%20Light%20Client%20Security%20and%20Scaling%20Blockchains%20with%20Dishonest%20Majorities.%20_Light%20clients%2C%20also%20known%20as%20Simple%20Payment%20Verification%20(SPV)%20clients%2C%20are%20nodes%20which%20only%20download%20a%20small%20portion%20of%20the%20data%20in%20a%20blockchain%2C%20and%20use%20indirect%20means%20to%20verify%20that%20a%20given%20chain%20is%20valid._%20%5C*%20Research%20Papers%20(Zero%20Knowledge%20Related)%0A-%20%5BzkBridge%3A%20Trustless%20Cross-chain%20Bridges%20Made%20Practical%5D(https%3A%2F%2Frdi.berkeley.edu%2Fzkp%2FzkBridge%2Fuploads%2Fpaper.pdf)%0A-%20%5BCaulk%3A%20Lookup%20Arguments%20in%20Sublinear%20Time%5D(https%3A%2F%2Feprint.iacr.org%2F2022%2F621.pdf)%3A%20position-hiding%20linkability%20for%20vector%20commitment%20schemes%3A%20one%20can%20prove%20in%20zero%20knowledge%20that%20one%20or%20m%20values%20that%20comprise%20commitment%20cm%20all%20belong%20to%20the%20vector%20of%20size%20N%20committed%20to%20in%20C.%0A-%20%5BHyperPlonk%3A%20Plonk%20with%20Linear-Time%20Prover%20and%20High-Degree%20Custom%20Gates%5D(https%3A%2F%2Feprint.iacr.org%2F2022%2F1355.pdf)%0A-%20%5BSLONK%E2%80%94a%20simple%20universal%20SNARK%5D(https%3A%2F%2Fethresear.ch%2Ft%2Fslonk-a-simple-universal-snark%2F6420)%3A%20a%20simplification%20to%20PLONK%20called%20SLONK.%20We%20replace%20the%20permutation%20argument%20(the%20%E2%80%9CP%E2%80%9D%20in%20PLONK)%20in%20favour%20of%20a%20shift%20argument%20(the%20%E2%80%9CS%E2%80%9D%20in%20SLONK).%20We%20get%20a%20universal%20SNARK%20with%20the%20smallest%20known%20proof%20size%20and%20verification%20time.%0A-%20%5BKate%20commitments%20from%20the%20Lagrange%20basis%20without%20FFTs%5D(https%3A%2F%2Fnotes.ethereum.org%2FT0ZVaaywQAqP4jegqO3asg%3Fview)%3A%20how%20to%20commit%2C%20evaluate%20and%20open%20polynomials%20in%20the%20Lagrange%20basis%20without%20FFTs.%20This%20is%20the%20first%20part%20in%20a%20series%20(see%20part%201%2C%20part%202%2C%20part%203)%20showing%20how%20to%20do%20PLONK-style%20universal%20SNARKs%20without%20FFTs%0A-%20%5BHadamard%20checks%20from%20the%20Lagrange%20basis%20without%20FFTs%5D(https%3A%2F%2Fnotes.ethereum.org%2FIl4z42lmQtaUYFigsjsk2Q%3Fview)%3A%20how%20to%20prove%20Hadamard%20relations%20between%20polynomials%20in%20the%20Lagrange%20basis%20without%20FFTs.%20This%20is%20the%20second%20part%20(see%20part%201%2C%20part%202%2C%20part%203)%20in%20a%20series%20showing%20how%20to%20do%20PLONK-style%20universal%20SNARKs%20without%20FFTs.%0A-%20%5BPLONK-style%20SNARKs%20without%20FFTs%5D(https%3A%2F%2Fnotes.ethereum.org%2FDLRqK9V7RIOsTZkab8Hm_Q%3Fview)%3A%20how%20to%20do%20PLONK-style%20universal%20SNARKs%20without%20FFTs.%20This%20is%20part%203%20in%20a%20series%20(part%201%2C%20part%202%2C%20part%203).%0A-%20%5BAn%20efficient%20verifiable%20state%20for%20zk-EVM%20and%20beyondfrom%20the%20Anemoi%20hash%20function%5D(https%3A%2F%2Feprint.iacr.org%2F2022%2F1487.pdf)%0A-%20%5BPlonky2%3A%20Fast%20Recursive%20Arguments%20with%20PLONK%20and%20FRI%5D(https%3A%2F%2Fgithub.com%2Fmir-protocol%2Fplonky2%2Fblob%2Fmain%2Fplonky2%2Fplonky2.pdf)%0A%0Aarticles%20and%20learning%20resources%0A%0A-%20%5BBridging%20the%20Multichain%20Universe%20with%20Zero%20Knowledge%20Proofs%5D(https%3A%2F%2Fmedium.com%2F%40ingonyama%2Fbridging-the-multichain-universe-with-zero-knowledge-proofs-6157464fbc86)%0A-%20%5Bawesome-zkml%5D(https%3A%2F%2Fgithub.com%2Fworldcoin%2Fawesome-zkml)%0A-%20%5Bhttps%3A%2F%2Flearn.0xparc.org%2F%5D(https%3A%2F%2Flearn.0xparc.org%2F)%3A%20ZK%20Learning%20Resources%0A-%20%5BDelendum%20ZKP%20Knowledge%20base%5D(https%3A%2F%2Fkb.delendum.xyz%2F)%0A-%20%5Bhttps%3A%2F%2Fappliedzkp.org%5D(https%3A%2F%2Fappliedzkp.org%2F)%3A%20Privacy%20and%20Scaling%20Exploration%0A-%20%5Bhttps%3A%2F%2Fzkp.science%2F%5D(https%3A%2F%2Fzkp.science%2F)%3A%20Zero-Knowledge%20Proofs%0A-%20%5Bhttps%3A%2F%2Fstarkware.co%2Fstark-101%2F%5D(https%3A%2F%2Fstarkware.co%2Fstark-101%2F)%3A%20Stark%20101%3A%20write%20a%20STARK%20prover%20from%20scratch%0A-%20%5Bhttps%3A%2F%2Fdocs.starkware.co%2Fstarkex%2Findex.html%5D(https%3A%2F%2Fdocs.starkware.co%2Fstarkex%2Findex.html)%3A%20-%20Starkware%20StarkeEx%0A-%20%5BNoir%5D(https%3A%2F%2Fdocs.aztec.network%2Fdevelopers%2Fnoir)%20Noir%20is%20a%20Domain%20Specific%20Language%20for%20developing%20ZK-provable%20programs.%20(Rust%20based)%0A%20%20-%20%5Barticle%5D(https%3A%2F%2Fmedium.com%2Faztec-protocol%2Fintroducing-noir-the-universal-language-of-zero-knowledge-ff43f38d86d9)%0A%20%20-%20%5Btweet%5D(https%3A%2F%2Ftwitter.com%2Faztecnetwork%2Fstatus%2F1578082456212643840)%0A%20%20-%20%5BGrants%5D(https%3A%2F%2Faztec.network%2Fgrants%2F)%0A-%20%5BArkworks%5D(https%3A%2F%2Fgithub.com%2Farkworks-rs)%0A-%20%5Bzkrepl.dev%5D(https%3A%2F%2Fzkrepl.dev%2F)%0A-%20%5Bsuccinct%5D(https%3A%2F%2Fblog.succinct.xyz%2F)%0A-%20%5BZK%20BATCH%20ECDSA%5D(https%3A%2F%2Fblog.succinct.xyz%2Fpost%2F2022%2F10%2F03%2Fbatch-ecdsa%2F)%0A-%20%5BBatch%20ECDSA%20Verification%5D(https%3A%2F%2Fgithub.com%2Fpuma314%2Fbatch-ecdsa)%0A-%20%5BBringing%20IBC%20to%20Ethereum%20using%20ZK-Snarks%5D(https%3A%2F%2Fethresear.ch%2Ft%2Fbringing-ibc-to-ethereum-using-zk-snarks%2F13634)%0A-%20%5BMINA%20docs%5D(https%3A%2F%2Fdocs.minaprotocol.com%2F)%0A%0Aimplementation%20articles%0A%0A-%20%5BzkPoS%3A%20End-to-End%20Trustless%5D(https%3A%2F%2Fhyperoracle.medium.com%2Fzkpos-end-to-end-trustless-65edccd87c5a)%3A%20HyperOracle%20article%20on%20how%20zkPoS%20provides%20the%20ability%20of%20proving%20the%20consensus%20with%20ZK.%0A-%20%5BSuccinct%20Towards%20the%20endgame%20of%20blockchain%20interoperability%20with%20proof%20of%20consensus%5D(https%3A%2F%2Fblog.succinct.xyz%2Fpost%2F2022%2F09%2F20%2Fproof-of-consensus)%0A%0A%23%23%23%20Codebases%0A%0A-%20%5BCircom%5D(https%3A%2F%2Fgithub.com%2Fiden3%2Fcircom)%20a%20novel%20domain-specific%20language%20for%20defining%20arithmetic%20circuits%20that%20can%20be%20used%20to%20generate%20zero-knowledge%20proofs%0A-%20%5BDarkForest%5D(https%3A%2F%2Fgithub.com%2Fdarkforest-eth)%20zkSNARK%20space%20warfare%0A%20%20-%20%5BAwesome%20List%5D(https%3A%2F%2Fgithub.com%2Fsnowtigersoft%2Fawesome-darkforest)%0A%20%20-%20%5BOur%20front%20end%20code%20(the%20game%20is%20open%20source!)%5D(https%3A%2F%2Fgithub.com%2Fdarkforest-eth%2Fclient%2Ftree%2Fmaster%2Fsrc%2FFrontend)%0A%20%20-%20%5BTwitter%5D(https%3A%2F%2Ftwitter.com%2Fdarkforest_eth)%0A-%20%5BDiscord%5D(https%3A%2F%2Fdiscord.gg%2F2u2TN6v8r6)%0A%20%20-%20%5BTeam%20Blog%5D(http%3A%2F%2Fblog.zkga.me%2F)%0A%20%20%20%20-%20%5BDark%20Forest%20v0.6%5D(https%3A%2F%2Fblog.zkga.me%2Fannouncing-v6)%0A%20%20%20%20-%20%5BExploiting%20DF%20v0.5%20Artifact%20Minting%5D(https%3A%2F%2Fblog.zkga.me%2Fartifact-minting-exploit)%0A%20%20%20%20-%20%5Bv0.5%20Plugins%20Contest%20Winners%5D(https%3A%2F%2Fblog.zkga.me%2Fv5-plugins-contest-winners)%0A%20%20%20%20-%20%5BZero-Knowledge%20Proofs%20for%20Engineers%5D(https%3A%2F%2Fblog.zkga.me%2Fintro-to-zksnarks)%0A%20%20%20%20-%20%5BAnnouncing%20Dark%20Forest%5D(https%3A%2F%2Fblog.zkga.me%2Fannouncing-darkforest)%0A%20%20%20%20-%20%5BThe%20Strongest%20Crypto%20Gaming%20Thesis%3A%20Why%20we're%20building%20Dark%20Forest%5D(https%3A%2F%2Fgubsheep.mirror.xyz%2FnsteOfjATPSKH0J8lRD0j2iynmvv_C8i8eb483UzcTM)%0A%20%20-%20%5BCommunity%20plugins%5D(http%3A%2F%2Fplugins.zkga.me%2F)%0A%20%20-%20%5BCommunity-run%20wiki%5D(http%3A%2F%2Fdfwiki.net%2F)%0A%20%20-%20Player-made%20content%0A%20%20%20%20-%20%5BDark%20Forest%20GPU%20universe%20explorer%5D(https%3A%2F%2Fwww.longrocklabs.com%2Farticles%2Fthe-exploration-era-begins%2F)%0A%20%20%20%20-%20%5BGetting%20started%20with%20Dark%20Forest%5D(https%3A%2F%2Fwww.youtube.com%2Fwatch%3Fv%3DkeY4a9cKmgg)%0A%20%20%20%20-%20%5BSetting%20up%20a%20remote%20miner%5D(https%3A%2F%2Fwww.youtube.com%2Fwatch%3Fv%3DKus4fWNg3zo)%0A%20%20%20%20-%20%5BDark%20Forest%20battle%20timelapse%5D(https%3A%2F%2Fwww.youtube.com%2Fwatch%3Fv%3Do9A-cfDanTY)%0A%0A-%20%5Bhalo2ecc-s%5D(https%3A%2F%2Fgithub.com%2FDelphinusLab%2Fhalo2ecc-s)%3A%20Re-implement%20an%20ecc%20circuits%20with%20halo2%0A%0A-%20%5Bplonky2%5D(https%3A%2F%2Fgithub.com%2Fmir-protocol%2Fplonky2)%3A%20a%20SNARK%20implementation%20based%20on%20techniques%20from%20PLONK%20and%20FRI.%20It%20has%20since%20expanded%20to%20include%20tools%20such%20as%20Starky%2C%20a%20highly%20performant%20STARK%20implementation.%0A%20%20-%20%5Bplonky2-solidity-verifier%5D(https%3A%2F%2Fgithub.com%2Fpolymerdao%2Fplonky2-solidity-verifier)%0A%20%20-%20%5Bplonky2-circom%5D(https%3A%2F%2Fgithub.com%2Fpolymerdao%2Fplonky2-circom)%3A%20Plonky2%20verifier%20in%20Circom%0A%20%20-%20%5Bplonky2-ed25519%5D(https%3A%2F%2Fgithub.com%2Fpolymerdao%2Fplonky2-ed25519)%3A%20SNARK%20verification%20circuits%20of%20a%20digital%20signature%20scheme%20Ed25519%20implemented%20with%20Plonky2.%0A%20%20-%20%5Bplonky2-sha256%5D(https%3A%2F%2Fgithub.com%2Fpolymerdao%2Fplonky2-sha256)%3A%20SNARK%20circuits%20of%20a%20cryptographic%20hash%20function%20SHA-256%20implemented%20with%20Plonky2.%0A%20%20-%20%5Bplonky2-sha512%5D(https%3A%2F%2Fgithub.com%2Fpolymerdao%2Fplonky2-sha512)%3A%20SNARK%20circuits%20of%20a%20cryptographic%20hash%20function%20SHA-512%20implemented%20with%20Plonky2.%0A%20%20-%20%5Bplonky2-pairing%5D(https%3A%2F%2Fgithub.com%2Fpolymerdao%2Fplonky2-pairing)%0A%0A%23%23%23%20Presentations%0A%0A-%20%5BDevcon%20VI%5D(https%3A%2F%2Farchive.devcon.org%2Farchive%2Fplaylists%2Fdevcon-6%2F)%0A-%20%5BLight%20Client%20After%20the%20Merge%5D(https%3A%2F%2Farchive.devcon.org%2Farchive%2Fwatch%2F6%2Flight-clients-after-the-merge%2F%3Fplaylist%3DDevcon%25206%26tab%3DYouTube)%20%5Bvideo%5D(https%3A%2F%2Fwww.youtube.com%2Fwatch%3Fv%3DZHNrAXf3RDE)%0A-%20%5BWhat%20to%20Know%20about%20Zero%20Knowledge%5D(https%3A%2F%2Farchive.devcon.org%2Farchive%2Fwatch%2F6%2Fwhat-to-know-about-zero-knowledge%2F%3Fplaylist%3DDevcon%25206%26tab%3DYouTube)%0A-%20%5BZK%20Application%20ShowCase%5D(https%3A%2F%2Farchive.devcon.org%2Farchive%2Fwatch%2F6%2Fzk-application-showcase%2F%3Fplaylist%3DDevcon%25206%26tab%3DYouTube)%0A-%20%5BZK%20Badges%3A%20How%20to%20prove%20that%20you%20donated%20to%20Gitcoin%20grants%5D(https%3A%2F%2Farchive.devcon.org%2Farchive%2Fwatch%2F6%2Fzk-badges%2F%3Fplaylist%3DDevcon%25206%26tab%3DYouTube)%0A-%20%5BZK%20Security%20Self%20Led%20Session%5D(https%3A%2F%2Farchive.devcon.org%2Farchive%2Fwatch%2F6%2Fzk-security-self-led-session%2F%3Fplaylist%3DDevcon%25206%26tab%3DYouTube)%0A-%20%5BzkEVM%20Vs%20EVM%3A%20Full%20Equivalence%3F%5D(https%3A%2F%2Farchive.devcon.org%2Farchive%2Fwatch%2F6%2Fzkevm-vs-evm-full-equivalence%2F%3Fplaylist%3DDevcon%25206%26tab%3DYouTube)%0A-%20%5BZK%20Application%20Design%20Patterns%5D(https%3A%2F%2Farchive.devcon.org%2Farchive%2Fwatch%2F6%2Fzk-application-design-patterns%2F%3Fplaylist%3DDevcon%25206%26tab%3DYouTube)%20%5Bvideo%5D(https%3A%2F%2Fwww.youtube.com%2Fwatch%3Fv%3D-PUKinjbLR8)%0A-%20%5BApplied%20ZK%20SLS%20presentations%5D(https%3A%2F%2Fwww.notion.so%2F360fcd3f2a824759b1373ddeef5bf564)%0A%0A%23%23%23%20Additional%20Information%0A%0A-%20Review%20%5BENS%20Bridging%20Strategy%5D(https%3A%2F%2Fmedium.com%2Fthe-ethereum-name-service%2Fmvp-of-ens-on-l2-with-optimism-demo-video-how-to-try-it-yourself-b44c390cbd67)%20and%20%5Brepo%5D(https%3A%2F%2Fgithub.com%2Fensdomains%2Fl2gateway-demo%2F)%0A-%20%5BSuccinct%5D(https%3A%2F%2Fblog.succinct.xyz%2Fpost%2F2022%2F09%2F20%2Fproof-of-consensus)%20%5B%24600K%5D(https%3A%2F%2Fforum.gnosis.io%2Ft%2Fgip-57-should-gnosis-dao-support-research-of-a-zksnark-enabled-light-client-and-bridge%2F5421)%20%5Btweet%5D(https%3A%2F%2Ftwitter.com%2Fsuccinctlabs%2Fstatus%2F1572299292177481729)%20%5BDemo%5D(https%3A%2F%2Fwww.zkbridge.wtf%2F)%20%5Bgithub%5D(https%3A%2F%2Fgithub.com%2Fsuccinctlabs)%20%5Bvideo%5D(https%3A%2F%2Fyoutu.be%2FCt6H5GcnA0A%3Ft%3D15554)%20built%20using%20%5Bcircom%5D(https%3A%2F%2Fdocs.circom.io%2F)%0A-%20%5Bcircom%5D(https%3A%2F%2Fdocs.circom.io%2F)%0A-%20%5BArkworks%5D(https%3A%2F%2Fgithub.com%2Farkworks-rs%2F)%2C%20%5Btutorial%5D(https%3A%2F%2Fgithub.com%2Farkworks-rs%2Fr1cs-tutorial%2F)%2C%20%5Btwitter%5D(https%3A%2F%2Ftwitter.com%2Farkworks_rs)%2C%20%5Bvideo%5D(https%3A%2F%2Fyoutu.be%2FCt6H5GcnA0A%3Ft%3D7429)%0A-%20%5BAztec.network%5D(http%3A%2F%2FAztec.network)%20%5BNoir%5D(https%3A%2F%2Faztec.network%2Fnoir)%20%5Bintro%5D(https%3A%2F%2Fmedium.com%2Faztec-protocol%2Fintroducing-noir-the-universal-language-of-zero-knowledge-ff43f38d86d9)%2C%20%5Bgithub%5D(https%3A%2F%2Fgithub.com%2Fnoir-lang%2Fnoir)%2C%20%5Btwitter%5D(https%3A%2F%2Ftwitter.com%2Faztecnetwork)%2C%20%5Bdocs%5D(https%3A%2F%2Fnoir-lang.github.io%2Fbook%2Findex.html)%0A-%20%5BGNark%5D(https%3A%2F%2Fgithub.com%2FConsenSys%2Fgnark)%0A-%20%5BElectronLabs%5D(https%3A%2F%2Felectronlabs.org%2F)%0A-%20%5BZKU%5D(https%3A%2F%2Fzku.one%2F)%20%5BLearning%5D(https%3A%2F%2Fwww.notion.so%2FLearning-50b5a6ecc45b46248323f0e552b6885f)%0A-%20Review%20%5Bmatter-labs%20knowledge%20base%5D(https%3A%2F%2Fgithub.com%2Fmatter-labs%2Fawesome-zero-knowledge-proofs%23learn)%0A%0A-%20%5BzkSNARKS%20explained%20like%20you're%20someone%20who%20knows%20some%20math%20and%20some%20coding%5D(https%3A%2F%2Fwww.reddit.com%2Fr%2FzkTech%2Fcomments%2Ftfjvrj%2Fzksnarks_explained_like_youre_someone_who_knows%2F)%0A-%20%5BThe%20Halo2%20Book%5D(https%3A%2F%2Fzcash.github.io%2Fhalo2%2Fconcepts%2Fproofs.html)%0A-%20%5BA%20survey%20of%20elliptic%20curves%20for%20proof%20systems%5D(https%3A%2F%2Feprint.iacr.org%2F2022%2F586.pdf)%0A-%20zkEVM%0A%20%20-%20%5BzkSync%20Era%5D(https%3A%2F%2Fera.zksync.io%2Fdocs%2Fdev%2F)%0A%20%20-%20%5BPolygon%20zkEVM%5D(https%3A%2F%2Fwiki.polygon.technology%2Fdocs%2FzkEVM%2Fdevelop%2F)%0A%20%20-%20%5BzkSync%20zkEVM%5D(https%3A%2F%2Fdocs.zksync.io%2Fzkevm%2F)%0A%20%20-%20%5BConsenSys%20zkEVM%5D(https%3A%2F%2Fdocs.zkevm.consensys.net%2Foverview)%0A",lastUpdatedAt:1753129136e3},{lazy:()=>o2(()=>import("./zkpos-De5Wdzkl.js"),[]),path:"/research/zk/zkpos",type:"mdx",filePath:"research/zk/zkpos.mdx",content:"%23%20ZK%20Proof%20of%20Stake%0A%0A-%20date%3A%202023-02-04%0A-%20last%20updated%3A%202023-02-04%0A%0A%23%23%20Overview%0A%0AHere%20we%20review%20how%20zero%20knowledge%20primitives%20can%20be%20applied%20to%20confirm%20Proof%20of%20Stake%20Consensus.%0A%0A%23%23%20References%0A%0A-%20%5BPaths%20toward%20single-slot%20finality%5D(https%3A%2F%2Fnotes.ethereum.org%2F%40vbuterin%2Fsingle_slot_finality)%3A%20A%20look%20at%20how%20to%20improve%20Ethereum%E2%80%99s%20LMD%20GHOST%20%2B%20Casper%20FFG%20consensus.%0A-%20%5BzkPoS%3A%20End-to-End%20Trustless%5D(https%3A%2F%2Fhyperoracle.medium.com%2Fzkpos-end-to-end-trustless-65edccd87c5a)%3A%20HyperOracle%20article%20on%20how%20zkPoS%20provides%20the%20ability%20of%20proving%20the%20consensus%20with%20ZK.%0A-%20%5Bhalo2ecc-s%5D(https%3A%2F%2Fgithub.com%2FDelphinusLab%2Fhalo2ecc-s%2Ftree%2Fpairing)%3A%20Re-implement%20an%20ecc%20circuits%20with%20halo2%0A-%20%5BAn%20efficient%20verifiable%20state%20for%20zk-EVM%20and%20beyondfrom%20the%20Anemoi%20hash%20function%5D(https%3A%2F%2Feprint.iacr.org%2F2022%2F1487.pdf)%0A",lastUpdatedAt:1753110537e3},{lazy:()=>o2(()=>import("./zkpos-De5Wdzkl.js"),[]),path:"/research/zk/zkpos.html",type:"mdx",filePath:"research/zk/zkpos.mdx",content:"%23%20ZK%20Proof%20of%20Stake%0A%0A-%20date%3A%202023-02-04%0A-%20last%20updated%3A%202023-02-04%0A%0A%23%23%20Overview%0A%0AHere%20we%20review%20how%20zero%20knowledge%20primitives%20can%20be%20applied%20to%20confirm%20Proof%20of%20Stake%20Consensus.%0A%0A%23%23%20References%0A%0A-%20%5BPaths%20toward%20single-slot%20finality%5D(https%3A%2F%2Fnotes.ethereum.org%2F%40vbuterin%2Fsingle_slot_finality)%3A%20A%20look%20at%20how%20to%20improve%20Ethereum%E2%80%99s%20LMD%20GHOST%20%2B%20Casper%20FFG%20consensus.%0A-%20%5BzkPoS%3A%20End-to-End%20Trustless%5D(https%3A%2F%2Fhyperoracle.medium.com%2Fzkpos-end-to-end-trustless-65edccd87c5a)%3A%20HyperOracle%20article%20on%20how%20zkPoS%20provides%20the%20ability%20of%20proving%20the%20consensus%20with%20ZK.%0A-%20%5Bhalo2ecc-s%5D(https%3A%2F%2Fgithub.com%2FDelphinusLab%2Fhalo2ecc-s%2Ftree%2Fpairing)%3A%20Re-implement%20an%20ecc%20circuits%20with%20halo2%0A-%20%5BAn%20efficient%20verifiable%20state%20for%20zk-EVM%20and%20beyondfrom%20the%20Anemoi%20hash%20function%5D(https%3A%2F%2Feprint.iacr.org%2F2022%2F1487.pdf)%0A",lastUpdatedAt:1753110537e3},{lazy:()=>o2(()=>import("./zksnarks-CkHbzRnP.js"),[]),path:"/research/zk/zksnarks",type:"mdx",filePath:"research/zk/zksnarks.mdx",content:"%23%20zk-SNARKs%0A%0A-%20date%3A%202023-02-04%0A-%20last%20updated%3A%202023-02-04%0A%0A%23%23%20Overview%0A%0AZero-Knowledge%20Succinct%20Non-Interactive%20Argument%20of%20Knowledge%0A%0AA%20proof%20construction%20where%20one%20can%20prove%20possession%20of%20certain%20information%2C%20e.g.%20a%20secret%20key%2C%20without%20revealing%20that%20information%2C%20and%20without%20any%20interaction%20between%20the%20prover%20and%20verifier.%0A%0A%23%23%20References%0A%0A-%20%5BZk-SNARKs%3A%20Under%20the%20Hood%5D(https%3A%2F%2Fmedium.com%2F%40VitalikButerin%2Fzk-snarks-under-the-hood-b33151a013f6)%0A-%20%5BWhat%20are%20zk-SNARKs%5D(https%3A%2F%2Fz.cash%2Ftechnology%2Fzksnarks%2F)%0A-%20%5BIntroduction%20to%20zk-SNARKs%5D(https%3A%2F%2Fconsensys.net%2Fblog%2Fdevelopers%2Fintroduction-to-zk-snarks%2F)%0A-%20%5Bzk-STARKs%20vs.%20zk-SNARKs%20explained%5D(https%3A%2F%2Fcointelegraph.com%2Fexplained%2Fzk-starks-vs-zk-snarks-explained)%0A",lastUpdatedAt:1753110537e3},{lazy:()=>o2(()=>import("./zksnarks-CkHbzRnP.js"),[]),path:"/research/zk/zksnarks.html",type:"mdx",filePath:"research/zk/zksnarks.mdx",content:"%23%20zk-SNARKs%0A%0A-%20date%3A%202023-02-04%0A-%20last%20updated%3A%202023-02-04%0A%0A%23%23%20Overview%0A%0AZero-Knowledge%20Succinct%20Non-Interactive%20Argument%20of%20Knowledge%0A%0AA%20proof%20construction%20where%20one%20can%20prove%20possession%20of%20certain%20information%2C%20e.g.%20a%20secret%20key%2C%20without%20revealing%20that%20information%2C%20and%20without%20any%20interaction%20between%20the%20prover%20and%20verifier.%0A%0A%23%23%20References%0A%0A-%20%5BZk-SNARKs%3A%20Under%20the%20Hood%5D(https%3A%2F%2Fmedium.com%2F%40VitalikButerin%2Fzk-snarks-under-the-hood-b33151a013f6)%0A-%20%5BWhat%20are%20zk-SNARKs%5D(https%3A%2F%2Fz.cash%2Ftechnology%2Fzksnarks%2F)%0A-%20%5BIntroduction%20to%20zk-SNARKs%5D(https%3A%2F%2Fconsensys.net%2Fblog%2Fdevelopers%2Fintroduction-to-zk-snarks%2F)%0A-%20%5Bzk-STARKs%20vs.%20zk-SNARKs%20explained%5D(https%3A%2F%2Fcointelegraph.com%2Fexplained%2Fzk-starks-vs-zk-snarks-explained)%0A",lastUpdatedAt:1753110537e3},{lazy:()=>o2(()=>import("./architecture-Cc2tabLN.js"),[]),path:"/research/solving/architecture",type:"mdx",filePath:"research/solving/architecture.mdx",content:"%23%20Overview%0A%0AThis%20is%20an%20opinionated%20architecture%20for%20an%20intent%20based%20solving%20protocol%20which%20facilitates%20single%20and%20mult-chain%20solving%20of%20intents.%20Intents%20can%20be%20solved%20on%20a%20single%20chain%20without%20provisioning%20up%20front%20capital%20as%20we%20arbiters%20can%20confirm%20mandates%20have%20been%20met%20by%20solvers%20at%20execution%20time%2C%20thus%20solvers%20may%20used%20the%20swappers%20locked%20funds%20for%20execution.%0A%0A%23%23%20Opinionated%20Sample%20Architecture%20from%20%5Bjincubator%5D(https%3A%2F%2Fgithub.com%2Fjincubator)%0A%0AI'm%20currently%20designing%20and%20building%20solutions%20around%20Solving%2C%20Arbitrage%20and%20Indexing.%20This%20work%20is%20being%20done%20in%20a%20combination%20of%20public%20and%20private%20repositories%20on%20%5Bjincubator%5D(https%3A%2F%2Fgithub.com%2Fjincubator).%20The%20project%20is%20drawing%20inspiration%20from%20and%20leveraging%20the%20following%20codebases%20for%20key%20components%0A%0A-%20Solving%20built%20in%20RUST%20leveraging%20%5BTycho%5D(https%3A%2F%2Fdocs.propellerheads.xyz%2Ftycho%2Foverview)%20from%20%5BPropellor%20Heads%5D(https%3A%2F%2Fwww.propellerheads.xyz%2F)%20including%0A%20%20-%20%5Btycho-sdk%5D(https%3A%2F%2Fgithub.com%2Fpropeller-heads%2Ftycho-protocol-sdk)%3A%20For%20integrate%20DEXs%20and%20other%20onchain%20liquidity%20protocols%0A%20%20-%20%5Btycho-indexer%5D(https%3A%2F%2Fgithub.com%2Fpropeller-heads%2Ftycho-indexer)%3A%20a%20low-latency%2C%20reorg-aware%20stream%20of%20all%20attributes%20you%20need%20to%20simulate%20swaps%20over%20DEX%20and%20other%20on-chain%20liquidity%20built%20on%20%5Bsubstreams%5D(https%3A%2F%2Fgithub.com%2Fstreamingfast%2Fsubstreams)%0A%20%20-%20%5Btycho-simulation%5D(https%3A%2F%2Fgithub.com%2Fpropeller-heads%2Ftycho-simulation)%3A%20a%20Rust%20crate%20which%20allows%20simulating%20a%20set%20of%20supported%20protocols%20off-chain%0A%20%20-%20%5Btycho-execution%5D(https%3A%2F%2Fgithub.com%2Fpropeller-heads%2Ftycho-execution)%3A%20a%20simple%2C%20ready-to-use%20tool%20that%20generates%20the%20necessary%20data%20to%20execute%20trades%20on%20multiple%20chains%20and%20DEX's%0A-%20Intent%20Management%20platform%20allowing%20optimized%20trading%20routes%20optimized%20by%20solvers%20who%20do%20not%20need%20to%20provide%20liquidity%20up%20front%0A%20%20-%20%5Bthe-compact%5D(https%3A%2F%2Fgithub.com%2FUniswap%2Fthe-compact)%3A%20an%20ownerless%20ERC6909%20contract%20that%20facilitates%20the%20voluntary%20formation%20(and%2C%20if%20necessary%2C%20eventual%20dissolution)%20of%20reusable%20resource%20locks.%0A%20%20-%20%5Barbiters%5D(https%3A%2F%2Fgithub.com%2FUniswap%2Farbiters)%3A%20selects%20a%20claim%20method%20based%20on%20the%20type%20of%20Compact%20message%20signed%20by%20the%20sponsor%20and%20allocator%20and%20on%20the%20desired%20settlement%20behavior.%20To%20finalize%20a%20claim%2C%20some%20actor%20must%20call%20into%20the%20arbiter%2C%20which%20will%20act%20on%20the%20input%20and%20translate%20it%20into%20their%20preferred%20claim%20method.%20The%20arbiter%20then%20must%20call%20the%20derived%20claim%20method%20on%20The%20Compact%20to%20finalize%20the%20claim%20process.%0A%20%20-%20%5BTribunal%5D(https%3A%2F%2Fgithub.com%2Funiswap%2Ftribunal)%3A%20a%20framework%20for%20processing%20cross-chain%20swap%20settlements%20against%20PGA%20(priority%20gas%20auction)%20blockchains.%20It%20ensures%20that%20tokens%20are%20transferred%20according%20to%20the%20mandate%20specified%20by%20the%20originating%20sponsor%20and%20enforces%20that%20a%20single%20party%20is%20able%20to%20perform%20the%20settlement%20in%20the%20event%20of%20a%20dispute.%20_Note%3A%20currently%20working%20on%20enhancing%20the%20%5BEIP712%20Signing%5D(https%3A%2F%2Feips.ethereum.org%2FEIPS%2Feip-712)%20of%20the%20%5Bmandates%5D(https%3A%2F%2Fgithub.com%2Funiswap%2Ftribunal%3Ftab%3Dreadme-ov-file%23mandate-structure)%20so%20that%20the%20protocol%20can%20be%20used%20for%20solving%20on%20a%20single%20chain%20and%20multichain%20settlement._%0A%20%20-%20Services%20that%20enable%20Solving%20and%20Arbitrage%20are%20drawn%20primarily%20from%20uniswap%20prototypes%20for%20%5BcompactX%5D(https%3A%2F%2Fgithub.com%2Funiswap%2Fcompactx).%20_Note%3A%20it%20would%20be%20good%20to%20develop%20the%20majority%20of%20these%20in%20Rust%20and%20leverage%20Tycho's%20indexing%20and%20execution%20services_%0A%20%20%20%20-%20%5Bcallibrator%5D(https%3A%2F%2Fgithub.com%2FUniswap%2FCalibrator)%3A%20An%20intent%20parameterization%20service%2C%20demo%20is%20%5Bhere%5D(https%3A%2F%2Fcalibrat0r.com%2F).%20_Note%3A%20This%20will%20need%20to%20incorprate%2Fintegrate%20%5Bmandates%5D(https%3A%2F%2Fgithub.com%2Funiswap%2Ftribunal%3Ftab%3Dreadme-ov-file%23mandate-structure)%20as%20we%20build%20a%20solution%20for%20solving._%0A%20%20%20%20-%20%5Bv4-router%5D(https%3A%2F%2Fgithub.com%2Fjincubator%2Fv4-router)%3A%20a%20simple%20and%20optimized%20router%20for%20swapping%20on%20Uniswap%20V4.%20_Note%3A%20Currently%20working%20on%20integrating%20intents%20into%20this%20management%20into%20this%20codebase%20and%20integrating%20this%20with%20an%20optimized%20smart%20order%20router._%0A%20%20%20%20-%20%5Bautocator%5D(https%3A%2F%2Fgithub.com%2Funiswap%2Fautocator)%3A%20A%20server-based%20allocator%20for%20The%20Compact%20that%20leverages%20protocol%20signatures%20and%20transactions%20for%20authentication%2C%20API%20reference%20is%20%5Bhere%5D(https%3A%2F%2Fautocator.org%2F).%0A%20%20%20%20-%20%5Bsmallocator%5D(https%3A%2F%2Fgithub.com%2FUniswap%2FSmallocator)%3A%20Similar%20to%20autocator%20with%20smart%20contract%20support%20via%20EIP-4361%20session%20authentication%20and%20signing%20EIP-712%20Compact%20messages.%0A%20%20%20%20-%20%5BFillanthropist%5D(https%3A%2F%2Fgithub.com%2FUniswap%2FFillanthropist)%3A%20receiving%20and%20filling%20broadcasted%20cross-chain%20swap%20intents%2C%20demo%20is%20%5Bhere%5D(https%3A%2F%2Ffillanthropist.org%2F).%20_Note%3A%20This%20infrastructure%20can%20be%20replaced%20by%20solver%20technology%20built%20on%20tycho%20as%20well%20as%20an%20update%20dissemination%20approach%20(see%20repo%20below)%20which%20can%20leverage%20tycho%20indexing._%0A%20%20%20%20-%20%5Bdisseminator%5D(https%3A%2F%2Fgithub.com%2FUniswap%2Fdisseminator)%3A%20A%20TypeScript%20WebSocket%20server%20implementation%20that%20broadcasts%20messages%20to%20both%20HTTP%20endpoints%20and%20WebSocket%20clients.%20The%20server%20validates%20incoming%20messages%20using%20Zod%20schemas%20and%20ensures%20proper%20message%20delivery%20to%20all%20connected%20clients.%20_Note%3A%20Design%20work%20still%20needs%20to%20be%20done%20as%20to%20the%20most%20efficient%20way%20to%20store%20and%20transmit%20detailed%20intent%20and%20mandate%20information_%0A%20%20-%20Frontend%20would%20include%20swapping%20and%20also%20liquidity%20provisioning%20and%20optimized%20Yield%20strategies%20for%20Liquidity%20Providers%20two%20inspirational%20repositories%20are%0A%20%20%20%20-%20%5BcompactX%5D(https%3A%2F%2Fgithub.com%2Funiswap%2Fcompactx)%3A%20a%20proof-of-concept%2C%20React-based%20web%20interface%20for%20performing%20cross-chain%20swaps.%0A%20%20%20%20-%20%5BYOLO%20Protocol%5D(https%3A%2F%2Fyolo-demo-ui-hackathon-chainlink-ch.vercel.app%2F)%3A%20A%20Demo%20app%20developed%20for%20a%20hackathon%20by%20%5BYOLO%20Protocol%5D(https%3A%2F%2Flinktr.ee%2Fyolo.protocol)%20which%20includes%20a%20dashboard%20for%20Liquidity%20Providers%20to%20manage%20their%20positions.%0A",lastUpdatedAt:1753234955e3},{lazy:()=>o2(()=>import("./architecture-Cc2tabLN.js"),[]),path:"/research/solving/architecture.html",type:"mdx",filePath:"research/solving/architecture.mdx",content:"%23%20Overview%0A%0AThis%20is%20an%20opinionated%20architecture%20for%20an%20intent%20based%20solving%20protocol%20which%20facilitates%20single%20and%20mult-chain%20solving%20of%20intents.%20Intents%20can%20be%20solved%20on%20a%20single%20chain%20without%20provisioning%20up%20front%20capital%20as%20we%20arbiters%20can%20confirm%20mandates%20have%20been%20met%20by%20solvers%20at%20execution%20time%2C%20thus%20solvers%20may%20used%20the%20swappers%20locked%20funds%20for%20execution.%0A%0A%23%23%20Opinionated%20Sample%20Architecture%20from%20%5Bjincubator%5D(https%3A%2F%2Fgithub.com%2Fjincubator)%0A%0AI'm%20currently%20designing%20and%20building%20solutions%20around%20Solving%2C%20Arbitrage%20and%20Indexing.%20This%20work%20is%20being%20done%20in%20a%20combination%20of%20public%20and%20private%20repositories%20on%20%5Bjincubator%5D(https%3A%2F%2Fgithub.com%2Fjincubator).%20The%20project%20is%20drawing%20inspiration%20from%20and%20leveraging%20the%20following%20codebases%20for%20key%20components%0A%0A-%20Solving%20built%20in%20RUST%20leveraging%20%5BTycho%5D(https%3A%2F%2Fdocs.propellerheads.xyz%2Ftycho%2Foverview)%20from%20%5BPropellor%20Heads%5D(https%3A%2F%2Fwww.propellerheads.xyz%2F)%20including%0A%20%20-%20%5Btycho-sdk%5D(https%3A%2F%2Fgithub.com%2Fpropeller-heads%2Ftycho-protocol-sdk)%3A%20For%20integrate%20DEXs%20and%20other%20onchain%20liquidity%20protocols%0A%20%20-%20%5Btycho-indexer%5D(https%3A%2F%2Fgithub.com%2Fpropeller-heads%2Ftycho-indexer)%3A%20a%20low-latency%2C%20reorg-aware%20stream%20of%20all%20attributes%20you%20need%20to%20simulate%20swaps%20over%20DEX%20and%20other%20on-chain%20liquidity%20built%20on%20%5Bsubstreams%5D(https%3A%2F%2Fgithub.com%2Fstreamingfast%2Fsubstreams)%0A%20%20-%20%5Btycho-simulation%5D(https%3A%2F%2Fgithub.com%2Fpropeller-heads%2Ftycho-simulation)%3A%20a%20Rust%20crate%20which%20allows%20simulating%20a%20set%20of%20supported%20protocols%20off-chain%0A%20%20-%20%5Btycho-execution%5D(https%3A%2F%2Fgithub.com%2Fpropeller-heads%2Ftycho-execution)%3A%20a%20simple%2C%20ready-to-use%20tool%20that%20generates%20the%20necessary%20data%20to%20execute%20trades%20on%20multiple%20chains%20and%20DEX's%0A-%20Intent%20Management%20platform%20allowing%20optimized%20trading%20routes%20optimized%20by%20solvers%20who%20do%20not%20need%20to%20provide%20liquidity%20up%20front%0A%20%20-%20%5Bthe-compact%5D(https%3A%2F%2Fgithub.com%2FUniswap%2Fthe-compact)%3A%20an%20ownerless%20ERC6909%20contract%20that%20facilitates%20the%20voluntary%20formation%20(and%2C%20if%20necessary%2C%20eventual%20dissolution)%20of%20reusable%20resource%20locks.%0A%20%20-%20%5Barbiters%5D(https%3A%2F%2Fgithub.com%2FUniswap%2Farbiters)%3A%20selects%20a%20claim%20method%20based%20on%20the%20type%20of%20Compact%20message%20signed%20by%20the%20sponsor%20and%20allocator%20and%20on%20the%20desired%20settlement%20behavior.%20To%20finalize%20a%20claim%2C%20some%20actor%20must%20call%20into%20the%20arbiter%2C%20which%20will%20act%20on%20the%20input%20and%20translate%20it%20into%20their%20preferred%20claim%20method.%20The%20arbiter%20then%20must%20call%20the%20derived%20claim%20method%20on%20The%20Compact%20to%20finalize%20the%20claim%20process.%0A%20%20-%20%5BTribunal%5D(https%3A%2F%2Fgithub.com%2Funiswap%2Ftribunal)%3A%20a%20framework%20for%20processing%20cross-chain%20swap%20settlements%20against%20PGA%20(priority%20gas%20auction)%20blockchains.%20It%20ensures%20that%20tokens%20are%20transferred%20according%20to%20the%20mandate%20specified%20by%20the%20originating%20sponsor%20and%20enforces%20that%20a%20single%20party%20is%20able%20to%20perform%20the%20settlement%20in%20the%20event%20of%20a%20dispute.%20_Note%3A%20currently%20working%20on%20enhancing%20the%20%5BEIP712%20Signing%5D(https%3A%2F%2Feips.ethereum.org%2FEIPS%2Feip-712)%20of%20the%20%5Bmandates%5D(https%3A%2F%2Fgithub.com%2Funiswap%2Ftribunal%3Ftab%3Dreadme-ov-file%23mandate-structure)%20so%20that%20the%20protocol%20can%20be%20used%20for%20solving%20on%20a%20single%20chain%20and%20multichain%20settlement._%0A%20%20-%20Services%20that%20enable%20Solving%20and%20Arbitrage%20are%20drawn%20primarily%20from%20uniswap%20prototypes%20for%20%5BcompactX%5D(https%3A%2F%2Fgithub.com%2Funiswap%2Fcompactx).%20_Note%3A%20it%20would%20be%20good%20to%20develop%20the%20majority%20of%20these%20in%20Rust%20and%20leverage%20Tycho's%20indexing%20and%20execution%20services_%0A%20%20%20%20-%20%5Bcallibrator%5D(https%3A%2F%2Fgithub.com%2FUniswap%2FCalibrator)%3A%20An%20intent%20parameterization%20service%2C%20demo%20is%20%5Bhere%5D(https%3A%2F%2Fcalibrat0r.com%2F).%20_Note%3A%20This%20will%20need%20to%20incorprate%2Fintegrate%20%5Bmandates%5D(https%3A%2F%2Fgithub.com%2Funiswap%2Ftribunal%3Ftab%3Dreadme-ov-file%23mandate-structure)%20as%20we%20build%20a%20solution%20for%20solving._%0A%20%20%20%20-%20%5Bv4-router%5D(https%3A%2F%2Fgithub.com%2Fjincubator%2Fv4-router)%3A%20a%20simple%20and%20optimized%20router%20for%20swapping%20on%20Uniswap%20V4.%20_Note%3A%20Currently%20working%20on%20integrating%20intents%20into%20this%20management%20into%20this%20codebase%20and%20integrating%20this%20with%20an%20optimized%20smart%20order%20router._%0A%20%20%20%20-%20%5Bautocator%5D(https%3A%2F%2Fgithub.com%2Funiswap%2Fautocator)%3A%20A%20server-based%20allocator%20for%20The%20Compact%20that%20leverages%20protocol%20signatures%20and%20transactions%20for%20authentication%2C%20API%20reference%20is%20%5Bhere%5D(https%3A%2F%2Fautocator.org%2F).%0A%20%20%20%20-%20%5Bsmallocator%5D(https%3A%2F%2Fgithub.com%2FUniswap%2FSmallocator)%3A%20Similar%20to%20autocator%20with%20smart%20contract%20support%20via%20EIP-4361%20session%20authentication%20and%20signing%20EIP-712%20Compact%20messages.%0A%20%20%20%20-%20%5BFillanthropist%5D(https%3A%2F%2Fgithub.com%2FUniswap%2FFillanthropist)%3A%20receiving%20and%20filling%20broadcasted%20cross-chain%20swap%20intents%2C%20demo%20is%20%5Bhere%5D(https%3A%2F%2Ffillanthropist.org%2F).%20_Note%3A%20This%20infrastructure%20can%20be%20replaced%20by%20solver%20technology%20built%20on%20tycho%20as%20well%20as%20an%20update%20dissemination%20approach%20(see%20repo%20below)%20which%20can%20leverage%20tycho%20indexing._%0A%20%20%20%20-%20%5Bdisseminator%5D(https%3A%2F%2Fgithub.com%2FUniswap%2Fdisseminator)%3A%20A%20TypeScript%20WebSocket%20server%20implementation%20that%20broadcasts%20messages%20to%20both%20HTTP%20endpoints%20and%20WebSocket%20clients.%20The%20server%20validates%20incoming%20messages%20using%20Zod%20schemas%20and%20ensures%20proper%20message%20delivery%20to%20all%20connected%20clients.%20_Note%3A%20Design%20work%20still%20needs%20to%20be%20done%20as%20to%20the%20most%20efficient%20way%20to%20store%20and%20transmit%20detailed%20intent%20and%20mandate%20information_%0A%20%20-%20Frontend%20would%20include%20swapping%20and%20also%20liquidity%20provisioning%20and%20optimized%20Yield%20strategies%20for%20Liquidity%20Providers%20two%20inspirational%20repositories%20are%0A%20%20%20%20-%20%5BcompactX%5D(https%3A%2F%2Fgithub.com%2Funiswap%2Fcompactx)%3A%20a%20proof-of-concept%2C%20React-based%20web%20interface%20for%20performing%20cross-chain%20swaps.%0A%20%20%20%20-%20%5BYOLO%20Protocol%5D(https%3A%2F%2Fyolo-demo-ui-hackathon-chainlink-ch.vercel.app%2F)%3A%20A%20Demo%20app%20developed%20for%20a%20hackathon%20by%20%5BYOLO%20Protocol%5D(https%3A%2F%2Flinktr.ee%2Fyolo.protocol)%20which%20includes%20a%20dashboard%20for%20Liquidity%20Providers%20to%20manage%20their%20positions.%0A",lastUpdatedAt:1753234955e3},{lazy:()=>o2(()=>import("./hooks-D8gwwGg9.js"),[]),path:"/research/solving/hooks",type:"mdx",filePath:"research/solving/hooks.mdx",content:"%23%20Uniswap%20V4%20Hook%20Development%20-%20WIP%0A%0A-%20date%3A%202025-06-22%0A-%20last%20updated%3A%202024-06-22%0A%0A%23%23%20Overview%0A%0AThis%20section%20documents%20design%20work%20to%20be%20done%20for%20enhancing%20Uniswap%20V4%20through%20the%20use%20of%20hooks%20for%20better%20price%20discovery%2C%20swapping%20and%20solver%20execution.%0A%0AIt%20leverages%20%5BTycho%5D(https%3A%2F%2Fdocs.propellerheads.xyz%2Ftycho%2Foverview)%2C%20Intents%20using%20%5BERC-7683%5D(https%3A%2F%2Fwww.erc7683.org%2Fspec)%2C%20%5BEIP-712%5D(https%3A%2F%2Feips.ethereum.org%2FEIPS%2Feip-712)%2C%20%5BCompactx%5D(https%3A%2F%2Fgithub.com%2Funiswap%2Fcompactx)%20and%20%5BUniswap%20V4%20Hooks%5D(https%3A%2F%2Fdocs.uniswap.org%2Fcontracts%2Fv4%2Foverview).%20As%20of%20July%202025%20I%20use%20%5Bjincubator%5D(https%3A%2F%2Fgithub.com%2Fjincubator)%20for%20research%20and%20development%20of%20prototypes.%0A%0A%23%23%23%20Hook%20Mods%0A%0A1.%20Booster%20Pools%0A2.%20BackRunning%0A3.%20ReHypothecation%0A4.%20Paymaster%0A5.%20Settlement%20Pools%20-%20CrossChain%0A6.%20Router%20change%20to%20Slippage%20Failure%20to%20create%20an%20Intent.%0A7.%20HOOK%0A%0A%23%23%23%20Deliverables%0A%0A1.%20%20No%20Liquidity%20Pool%0A%20%20%20%201.%20Swap%20via%20preferred%20LP%20at%20fixed%20price%20from%20Oracle%0A2.%20%20IntentSwap%0A%20%20%20%201.%20CreateIntentSwap%20(includes%20output%20amount%20in%20each%20call)%0A%20%20%20%202.%20ExecuteIntentSwap%20(uses%20funds%20from%20compact)%0A%20%20%20%203.%20SweepIntentSwap%20(passed%20a%20compact)%0A3.%20%20BoosterPool%0A%20%20%20%201.%20Adds%20IntentManagement%20to%20Any%20Pool%0A%20%20%20%202.%20Adds%20Dynamic%20fees%20to%20Any%20Pool%0A%20%20%20%203.%20Adds%20BackRunning%20via%20Solver%0A%20%20%20%204.%20Adds%20ReHypothecation%20to%20any%20pool%20USDCY%0A%20%20%20%205.%20Adds%20Oracle%20Pricing%20to%20any%20pool%20EULER-ORACLES%0A%20%20%20%206.%20Adds%20Gas%20Sponsorship%0A",lastUpdatedAt:1753234955e3},{lazy:()=>o2(()=>import("./hooks-D8gwwGg9.js"),[]),path:"/research/solving/hooks.html",type:"mdx",filePath:"research/solving/hooks.mdx",content:"%23%20Uniswap%20V4%20Hook%20Development%20-%20WIP%0A%0A-%20date%3A%202025-06-22%0A-%20last%20updated%3A%202024-06-22%0A%0A%23%23%20Overview%0A%0AThis%20section%20documents%20design%20work%20to%20be%20done%20for%20enhancing%20Uniswap%20V4%20through%20the%20use%20of%20hooks%20for%20better%20price%20discovery%2C%20swapping%20and%20solver%20execution.%0A%0AIt%20leverages%20%5BTycho%5D(https%3A%2F%2Fdocs.propellerheads.xyz%2Ftycho%2Foverview)%2C%20Intents%20using%20%5BERC-7683%5D(https%3A%2F%2Fwww.erc7683.org%2Fspec)%2C%20%5BEIP-712%5D(https%3A%2F%2Feips.ethereum.org%2FEIPS%2Feip-712)%2C%20%5BCompactx%5D(https%3A%2F%2Fgithub.com%2Funiswap%2Fcompactx)%20and%20%5BUniswap%20V4%20Hooks%5D(https%3A%2F%2Fdocs.uniswap.org%2Fcontracts%2Fv4%2Foverview).%20As%20of%20July%202025%20I%20use%20%5Bjincubator%5D(https%3A%2F%2Fgithub.com%2Fjincubator)%20for%20research%20and%20development%20of%20prototypes.%0A%0A%23%23%23%20Hook%20Mods%0A%0A1.%20Booster%20Pools%0A2.%20BackRunning%0A3.%20ReHypothecation%0A4.%20Paymaster%0A5.%20Settlement%20Pools%20-%20CrossChain%0A6.%20Router%20change%20to%20Slippage%20Failure%20to%20create%20an%20Intent.%0A7.%20HOOK%0A%0A%23%23%23%20Deliverables%0A%0A1.%20%20No%20Liquidity%20Pool%0A%20%20%20%201.%20Swap%20via%20preferred%20LP%20at%20fixed%20price%20from%20Oracle%0A2.%20%20IntentSwap%0A%20%20%20%201.%20CreateIntentSwap%20(includes%20output%20amount%20in%20each%20call)%0A%20%20%20%202.%20ExecuteIntentSwap%20(uses%20funds%20from%20compact)%0A%20%20%20%203.%20SweepIntentSwap%20(passed%20a%20compact)%0A3.%20%20BoosterPool%0A%20%20%20%201.%20Adds%20IntentManagement%20to%20Any%20Pool%0A%20%20%20%202.%20Adds%20Dynamic%20fees%20to%20Any%20Pool%0A%20%20%20%203.%20Adds%20BackRunning%20via%20Solver%0A%20%20%20%204.%20Adds%20ReHypothecation%20to%20any%20pool%20USDCY%0A%20%20%20%205.%20Adds%20Oracle%20Pricing%20to%20any%20pool%20EULER-ORACLES%0A%20%20%20%206.%20Adds%20Gas%20Sponsorship%0A",lastUpdatedAt:1753234955e3},{lazy:()=>o2(()=>import("./intro-29vUojmm.js"),[]),path:"/research/solving/intro",type:"mdx",filePath:"research/solving/intro.mdx",content:"%23%20Solving%20and%20Arbitrage%20Research%0A%0A-%20date%3A%202025-06-22%0A-%20last%20updated%3A%202024-06-22%0A%0A%23%23%20Overview%0A%0AHere%20you'll%20find%20my%20work%20in%202025%20on%20Solving%2C%20Arbitrage%20and%20Indexing%20using%20%5BTycho%5D(https%3A%2F%2Fdocs.propellerheads.xyz%2Ftycho%2Foverview)%2C%20Intents%20using%20%5BERC-7683%5D(https%3A%2F%2Fwww.erc7683.org%2Fspec)%2C%20%5BEIP-712%5D(https%3A%2F%2Feips.ethereum.org%2FEIPS%2Feip-712)%2C%20%5BCompactx%5D(https%3A%2F%2Fgithub.com%2Funiswap%2Fcompactx)%20and%20%5BUniswap%20V4%20Hooks%5D(https%3A%2F%2Fdocs.uniswap.org%2Fcontracts%2Fv4%2Foverview).%20As%20of%20July%202025%20I%20use%20%5Bjincubator%5D(https%3A%2F%2Fgithub.com%2Fjincubator)%20for%20research%20and%20development%20of%20prototypes.%0A%0A%23%23%20Abstract%0A%0ALiquidity%20Fragmentation%20and%20Capital%20Efficiency%20are%20areas%20that%20can%20be%20optimized%20in%20Blockchain%20protocols%2C%20with%20the%20emergence%20of%20Multiple%20L2%20Chains%20and%20a%20shift%20towards%20intent-based%20architectures.%20There%20is%20a%20greater%20need%20than%20ever%20for%20a%20settlement%20layer%20to%20balance%20provided%20liquidity.%0A%0AProject%20Description%3A%20Jincubator%20(Working%20Name)%20provides%20infrastructure%20and%20services%20for%20multi-chain%2C%20intent-based%20protocols%2C%20leveraging%20hooks%20built%20on%20Uniswap%20V4.%0A%0AIt%20aims%20to%20provide%20the%20following%0A%0A**Features%20of%20the%20Solution**%0A%0A-%20Pool%20Functionality%0A%20%20-%20JIT%20Liquidity%20Provisioning%2C%0A%20%20-%20Dynamic%20Fees%20to%20reduce%20arbitrage%2C%0A%20%20-%20Gas%20Manager%20allows%20users%20to%20pay%20for%20gas%20using%20their%20swap%20token%20instead%20of%20the%20native%20token%2C%0A%20%20-%20Incentivization%20Tools%20for%20Pools%20to%20incentivize%20Liquidity%20Providers%2C%0A-%20Order%20Flow%0A%20%20-%20Intent%20Solving%20infrastructure%20providing%20traders%20with%20the%20best%20value%20for%20their%20swap%2C%0A%20%20-%20SlowTrack%20and%20Fastrak%20-%20Settlement%20Options%2C%0A-%20Capital%20Efficiency%0A%20%20-%20Settlement%20Layer%20with%20Dynamic%20Rebalancing%20of%20Capital%20Across%20Chains%2C%0A%20%20-%20JIT%20provisioning%20of%20liquidity%20to%20pools%20as%20needed%20which%20integrates%20with%20Yield%20Earning%20Protocols.%2C%0A%20%20-%20Arbitraging%20Liquidity%20across%20Pools%2C%20Protocols%2C%20and%20Chains%0A%0A**Solution%20we%20are%20implementing**%0A%0A-%20Intent%20Based%20-%20Cross%20Chain%20Solving%0A-%20Dynamic%20Cross-Chain%20Capital%20Allocation%20for%20Liquidity%20Providers%0A-%20JIT%20Liquidity%20Provisioning%20for%20Pools%0A-%20Yield%20Earning%20Capabilities%20for%20unitilized%20liquidity%0A-%20Centralized%20Liquidity%20Pool%20which%20is%20dynamically%20allocated%0A-%20Settlement%20Layer%20used%20by%20Solvers%20and%20Liquidity%20Providers%20used%20to%20rebalance%20funds%20across%20chains.%0A-%20Advanced%20Indexing%20and%20Simulation%20capabilities%20to%20enable%20a%20global%20view%20of%20liquidity%2C%20swap%20prices%20and%20arbitrage%20opportunities%0A",lastUpdatedAt:1753234955e3},{lazy:()=>o2(()=>import("./intro-29vUojmm.js"),[]),path:"/research/solving/intro.html",type:"mdx",filePath:"research/solving/intro.mdx",content:"%23%20Solving%20and%20Arbitrage%20Research%0A%0A-%20date%3A%202025-06-22%0A-%20last%20updated%3A%202024-06-22%0A%0A%23%23%20Overview%0A%0AHere%20you'll%20find%20my%20work%20in%202025%20on%20Solving%2C%20Arbitrage%20and%20Indexing%20using%20%5BTycho%5D(https%3A%2F%2Fdocs.propellerheads.xyz%2Ftycho%2Foverview)%2C%20Intents%20using%20%5BERC-7683%5D(https%3A%2F%2Fwww.erc7683.org%2Fspec)%2C%20%5BEIP-712%5D(https%3A%2F%2Feips.ethereum.org%2FEIPS%2Feip-712)%2C%20%5BCompactx%5D(https%3A%2F%2Fgithub.com%2Funiswap%2Fcompactx)%20and%20%5BUniswap%20V4%20Hooks%5D(https%3A%2F%2Fdocs.uniswap.org%2Fcontracts%2Fv4%2Foverview).%20As%20of%20July%202025%20I%20use%20%5Bjincubator%5D(https%3A%2F%2Fgithub.com%2Fjincubator)%20for%20research%20and%20development%20of%20prototypes.%0A%0A%23%23%20Abstract%0A%0ALiquidity%20Fragmentation%20and%20Capital%20Efficiency%20are%20areas%20that%20can%20be%20optimized%20in%20Blockchain%20protocols%2C%20with%20the%20emergence%20of%20Multiple%20L2%20Chains%20and%20a%20shift%20towards%20intent-based%20architectures.%20There%20is%20a%20greater%20need%20than%20ever%20for%20a%20settlement%20layer%20to%20balance%20provided%20liquidity.%0A%0AProject%20Description%3A%20Jincubator%20(Working%20Name)%20provides%20infrastructure%20and%20services%20for%20multi-chain%2C%20intent-based%20protocols%2C%20leveraging%20hooks%20built%20on%20Uniswap%20V4.%0A%0AIt%20aims%20to%20provide%20the%20following%0A%0A**Features%20of%20the%20Solution**%0A%0A-%20Pool%20Functionality%0A%20%20-%20JIT%20Liquidity%20Provisioning%2C%0A%20%20-%20Dynamic%20Fees%20to%20reduce%20arbitrage%2C%0A%20%20-%20Gas%20Manager%20allows%20users%20to%20pay%20for%20gas%20using%20their%20swap%20token%20instead%20of%20the%20native%20token%2C%0A%20%20-%20Incentivization%20Tools%20for%20Pools%20to%20incentivize%20Liquidity%20Providers%2C%0A-%20Order%20Flow%0A%20%20-%20Intent%20Solving%20infrastructure%20providing%20traders%20with%20the%20best%20value%20for%20their%20swap%2C%0A%20%20-%20SlowTrack%20and%20Fastrak%20-%20Settlement%20Options%2C%0A-%20Capital%20Efficiency%0A%20%20-%20Settlement%20Layer%20with%20Dynamic%20Rebalancing%20of%20Capital%20Across%20Chains%2C%0A%20%20-%20JIT%20provisioning%20of%20liquidity%20to%20pools%20as%20needed%20which%20integrates%20with%20Yield%20Earning%20Protocols.%2C%0A%20%20-%20Arbitraging%20Liquidity%20across%20Pools%2C%20Protocols%2C%20and%20Chains%0A%0A**Solution%20we%20are%20implementing**%0A%0A-%20Intent%20Based%20-%20Cross%20Chain%20Solving%0A-%20Dynamic%20Cross-Chain%20Capital%20Allocation%20for%20Liquidity%20Providers%0A-%20JIT%20Liquidity%20Provisioning%20for%20Pools%0A-%20Yield%20Earning%20Capabilities%20for%20unitilized%20liquidity%0A-%20Centralized%20Liquidity%20Pool%20which%20is%20dynamically%20allocated%0A-%20Settlement%20Layer%20used%20by%20Solvers%20and%20Liquidity%20Providers%20used%20to%20rebalance%20funds%20across%20chains.%0A-%20Advanced%20Indexing%20and%20Simulation%20capabilities%20to%20enable%20a%20global%20view%20of%20liquidity%2C%20swap%20prices%20and%20arbitrage%20opportunities%0A",lastUpdatedAt:1753234955e3}];var zh={background5:"var(--vocs-color_background5)",border:"var(--vocs-color_border)",border2:"var(--vocs-color_border2)"},km={default:"system-ui, -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif",mono:'ui-monospace, SFMono-Regular, Menlo, Monaco, Consolas, "Liberation Mono", "Courier New", monospace'},Dm={default:"var(--vocs-fontFamily_default)",mono:"var(--vocs-fontFamily_mono)"},$n={4:"var(--vocs-space_4)",8:"var(--vocs-space_8)",24:"var(--vocs-space_24)"},nh={horizontalPadding:"var(--vocs-content_horizontalPadding)",verticalPadding:"var(--vocs-content_verticalPadding)",width:"var(--vocs-content_width)"};function pg(t){var a,i,r="";if(typeof t=="string"||typeof t=="number")r+=t;else if(typeof t=="object")if(Array.isArray(t)){var c=t.length;for(a=0;a<c;a++)t[a]&&(i=pg(t[a]))&&(r&&(r+=" "),r+=i)}else for(i in t)t[i]&&(r&&(r+=" "),r+=i);return r}function l2(){for(var t,a,i=0,r="",c=arguments.length;i<c;i++)(t=arguments[i])&&(a=pg(t))&&(r&&(r+=" "),r+=a);return r}function E1(t){var a=t.match(/^var\((.*)\)$/);return a?a[1]:t}function Me(t,a){var i={};{var r=t;for(var c in r){var l=r[c];l!=null&&(i[E1(c)]=l)}}return Object.defineProperty(i,"toString",{value:function(){return Object.keys(this).map(F=>"".concat(F,":").concat(this[F])).join(";")},writable:!1}),i}var x1="var(--vocs_ExternalLink_iconUrl)",S1="vocs_ExternalLink";const R1=f.forwardRef(({className:t,children:a,hideExternalIcon:i,href:r,...c},l)=>{const{basePath:u}=m0(),F=u;return g.jsx("a",{ref:l,className:l2(t,i||typeof a!="string"?void 0:S1),href:r,target:"_blank",rel:"noopener noreferrer",style:Me({[x1]:`url(${F}/.vocs/icons/arrow-diagonal.svg)`}),...c,children:a})});var wm="vocs_Link",_m="vocs_Link_accent",Em="vocs_Link_styleless",Oh=new Map,Nr=new WeakMap,xm=0,T1=void 0;function P1(t){return t?(Nr.has(t)||(xm+=1,Nr.set(t,xm.toString())),Nr.get(t)):"0"}function L1(t){return Object.keys(t).sort().filter(a=>t[a]!==void 0).map(a=>`${a}_${a==="root"?P1(t.root):t[a]}`).toString()}function M1(t){const a=L1(t);let i=Oh.get(a);if(!i){const r=new Map;let c;const l=new IntersectionObserver(u=>{u.forEach(F=>{var p;const A=F.isIntersecting&&c.some(b=>F.intersectionRatio>=b);t.trackVisibility&&typeof F.isVisible>"u"&&(F.isVisible=A),(p=r.get(F.target))==null||p.forEach(b=>{b(A,F)})})},t);c=l.thresholds||(Array.isArray(t.threshold)?t.threshold:[t.threshold||0]),i={id:a,observer:l,elements:r},Oh.set(a,i)}return i}function N1(t,a,i={},r=T1){if(typeof window.IntersectionObserver>"u"&&r!==void 0){const p=t.getBoundingClientRect();return a(r,{isIntersecting:r,target:t,intersectionRatio:typeof i.threshold=="number"?i.threshold:0,time:0,boundingClientRect:p,intersectionRect:p,rootBounds:p}),()=>{}}const{id:c,observer:l,elements:u}=M1(i),F=u.get(t)||[];return u.has(t)||u.set(t,F),F.push(a),l.observe(t),function(){F.splice(F.indexOf(a),1),F.length===0&&(u.delete(t),l.unobserve(t)),u.size===0&&(l.disconnect(),Oh.delete(c))}}function mg({threshold:t,delay:a,trackVisibility:i,rootMargin:r,root:c,triggerOnce:l,skip:u,initialInView:F,fallbackInView:p,onChange:A}={}){var b;const[m,y]=f.useState(null),C=f.useRef(A),[B,v]=f.useState({inView:!!F,entry:void 0});C.current=A,f.useEffect(()=>{if(u||!m)return;let _;return _=N1(m,(R,P)=>{v({inView:R,entry:P}),C.current&&C.current(R,P),P.isIntersecting&&l&&_&&(_(),_=void 0)},{root:c,rootMargin:r,threshold:t,trackVisibility:i,delay:a},p),()=>{_&&_()}},[Array.isArray(t)?t.toString():t,m,c,r,l,u,i,p,a]);const D=(b=B.entry)==null?void 0:b.target,w=f.useRef(void 0);!m&&D&&!l&&!u&&w.current!==D&&(w.current=D,v({inView:!!F,entry:void 0}));const x=[y,B.inView,B.entry];return x.ref=x[0],x.inView=x[1],x.entry=x[2],x}function I1(...t){return a=>{H1(a,...t)}}function H1(t,...a){a.forEach(i=>{typeof i=="function"?i(t):i!=null&&(i.current=t)})}const Ta=f.forwardRef((t,a)=>{const i=()=>{var l;return(l=ku.find(u=>u.path===t.to))==null?void 0:l.lazy()},{ref:r,inView:c}=mg();return f.useEffect(()=>{c&&i()},[c]),g.jsx(za,{ref:I1(a,r),...t})}),ke=f.forwardRef((t,a)=>{const{hideExternalIcon:i,href:r,variant:c="accent"}=t,{pathname:l}=i0();if(r!=null&&r.match(/^(www|https?)/))return g.jsx(R1,{...t,ref:a,className:l2(t.className,wm,c==="accent"&&_m,c==="styleless"&&Em),hideExternalIcon:i});const[u,F]=(r||"").split("#"),p=`${u||l}${F?`#${F}`:""}`;return g.jsx(Ta,{...t,ref:a,className:l2(t.className,wm,c==="accent"&&_m,c==="styleless"&&Em),to:p})});var z1="vocs_NotFound",O1="vocs_NotFound_divider",j1="vocs_H1",gg="vocs_Heading",bg="vocs_Heading_slugTarget";function Oa({level:t,...a}){const i=`h${t}`;return g.jsxs(i,{...a,id:void 0,className:l2(a.className,gg),children:[g.jsx("div",{id:a.id,className:bg}),a.children]})}function fg(t){return g.jsx(Oa,{...t,className:l2(t.className,j1),level:1})}var V1="vocs_Paragraph";function yg(t){return g.jsx("p",{...t,className:l2(t.className,V1)})}function U1(){return g.jsxs("div",{className:z1,children:[g.jsx(fg,{children:"Page Not Found"}),g.jsx("div",{style:{height:$n[24]}}),g.jsx("hr",{className:O1}),g.jsx("div",{style:{height:$n[24]}}),g.jsx(yg,{children:"The page you were looking for could not be found."}),g.jsx("div",{style:{height:$n[8]}}),g.jsx(ke,{href:"/",children:"Go to Home Page"})]})}var G1="var(--vocs_Banner_bannerBackgroundColor)",q1="var(--vocs_Banner_bannerHeight)",W1="var(--vocs_Banner_bannerTextColor)",K1="vocs_Banner",Z1="vocs_Banner_content",Y1="vocs_Banner_inner",X1="vocs_Banner_closeButton";const J1=Object.getPrototypeOf($1).constructor;async function $1(t,a){return new J1(String(t))(a)}function Q1(t,a){return new Function(String(t))(a)}function No(t,a){if(t==null)return{};var i={},r=Object.keys(t),c,l;for(l=0;l<r.length;l++)c=r[l],!(a.indexOf(c)>=0)&&(i[c]=t[c]);return i}var eB=["color"],tB=f.forwardRef(function(t,a){var i=t.color,r=i===void 0?"currentColor":i,c=No(t,eB);return f.createElement("svg",Object.assign({width:"15",height:"15",viewBox:"0 0 15 15",fill:"none",xmlns:"http://www.w3.org/2000/svg"},c,{ref:a}),f.createElement("path",{d:"M6.85355 3.14645C7.04882 3.34171 7.04882 3.65829 6.85355 3.85355L3.70711 7H12.5C12.7761 7 13 7.22386 13 7.5C13 7.77614 12.7761 8 12.5 8H3.70711L6.85355 11.1464C7.04882 11.3417 7.04882 11.6583 6.85355 11.8536C6.65829 12.0488 6.34171 12.0488 6.14645 11.8536L2.14645 7.85355C1.95118 7.65829 1.95118 7.34171 2.14645 7.14645L6.14645 3.14645C6.34171 2.95118 6.65829 2.95118 6.85355 3.14645Z",fill:r,fillRule:"evenodd",clipRule:"evenodd"}))}),oB=["color"],aB=f.forwardRef(function(t,a){var i=t.color,r=i===void 0?"currentColor":i,c=No(t,oB);return f.createElement("svg",Object.assign({width:"15",height:"15",viewBox:"0 0 15 15",fill:"none",xmlns:"http://www.w3.org/2000/svg"},c,{ref:a}),f.createElement("path",{d:"M6.1584 3.13508C6.35985 2.94621 6.67627 2.95642 6.86514 3.15788L10.6151 7.15788C10.7954 7.3502 10.7954 7.64949 10.6151 7.84182L6.86514 11.8418C6.67627 12.0433 6.35985 12.0535 6.1584 11.8646C5.95694 11.6757 5.94673 11.3593 6.1356 11.1579L9.565 7.49985L6.1356 3.84182C5.94673 3.64036 5.95694 3.32394 6.1584 3.13508Z",fill:r,fillRule:"evenodd",clipRule:"evenodd"}))}),nB=["color"],iB=f.forwardRef(function(t,a){var i=t.color,r=i===void 0?"currentColor":i,c=No(t,nB);return f.createElement("svg",Object.assign({width:"15",height:"15",viewBox:"0 0 15 15",fill:"none",xmlns:"http://www.w3.org/2000/svg"},c,{ref:a}),f.createElement("path",{d:"M12.8536 2.85355C13.0488 2.65829 13.0488 2.34171 12.8536 2.14645C12.6583 1.95118 12.3417 1.95118 12.1464 2.14645L7.5 6.79289L2.85355 2.14645C2.65829 1.95118 2.34171 1.95118 2.14645 2.14645C1.95118 2.34171 1.95118 2.65829 2.14645 2.85355L6.79289 7.5L2.14645 12.1464C1.95118 12.3417 1.95118 12.6583 2.14645 12.8536C2.34171 13.0488 2.65829 13.0488 2.85355 12.8536L7.5 8.20711L12.1464 12.8536C12.3417 13.0488 12.6583 13.0488 12.8536 12.8536C13.0488 12.6583 13.0488 12.3417 12.8536 12.1464L8.20711 7.5L12.8536 2.85355Z",fill:r,fillRule:"evenodd",clipRule:"evenodd"}))}),rB=["color"],sB=f.forwardRef(function(t,a){var i=t.color,r=i===void 0?"currentColor":i,c=No(t,rB);return f.createElement("svg",Object.assign({width:"15",height:"15",viewBox:"0 0 15 15",fill:"none",xmlns:"http://www.w3.org/2000/svg"},c,{ref:a}),f.createElement("path",{d:"M3.5 2C3.22386 2 3 2.22386 3 2.5V12.5C3 12.7761 3.22386 13 3.5 13H11.5C11.7761 13 12 12.7761 12 12.5V6H8.5C8.22386 6 8 5.77614 8 5.5V2H3.5ZM9 2.70711L11.2929 5H9V2.70711ZM2 2.5C2 1.67157 2.67157 1 3.5 1H8.5C8.63261 1 8.75979 1.05268 8.85355 1.14645L12.8536 5.14645C12.9473 5.24021 13 5.36739 13 5.5V12.5C13 13.3284 12.3284 14 11.5 14H3.5C2.67157 14 2 13.3284 2 12.5V2.5Z",fill:r,fillRule:"evenodd",clipRule:"evenodd"}))}),cB=["color"],lB=f.forwardRef(function(t,a){var i=t.color,r=i===void 0?"currentColor":i,c=No(t,cB);return f.createElement("svg",Object.assign({width:"15",height:"15",viewBox:"0 0 15 15",fill:"none",xmlns:"http://www.w3.org/2000/svg"},c,{ref:a}),f.createElement("path",{d:"M1.5 5.25C1.91421 5.25 2.25 4.91421 2.25 4.5C2.25 4.08579 1.91421 3.75 1.5 3.75C1.08579 3.75 0.75 4.08579 0.75 4.5C0.75 4.91421 1.08579 5.25 1.5 5.25ZM4 4.5C4 4.22386 4.22386 4 4.5 4H13.5C13.7761 4 14 4.22386 14 4.5C14 4.77614 13.7761 5 13.5 5H4.5C4.22386 5 4 4.77614 4 4.5ZM4.5 7C4.22386 7 4 7.22386 4 7.5C4 7.77614 4.22386 8 4.5 8H13.5C13.7761 8 14 7.77614 14 7.5C14 7.22386 13.7761 7 13.5 7H4.5ZM4.5 10C4.22386 10 4 10.2239 4 10.5C4 10.7761 4.22386 11 4.5 11H13.5C13.7761 11 14 10.7761 14 10.5C14 10.2239 13.7761 10 13.5 10H4.5ZM2.25 7.5C2.25 7.91421 1.91421 8.25 1.5 8.25C1.08579 8.25 0.75 7.91421 0.75 7.5C0.75 7.08579 1.08579 6.75 1.5 6.75C1.91421 6.75 2.25 7.08579 2.25 7.5ZM1.5 11.25C1.91421 11.25 2.25 10.9142 2.25 10.5C2.25 10.0858 1.91421 9.75 1.5 9.75C1.08579 9.75 0.75 10.0858 0.75 10.5C0.75 10.9142 1.08579 11.25 1.5 11.25Z",fill:r,fillRule:"evenodd",clipRule:"evenodd"}))}),hB=["color"],Du=f.forwardRef(function(t,a){var i=t.color,r=i===void 0?"currentColor":i,c=No(t,hB);return f.createElement("svg",Object.assign({width:"15",height:"15",viewBox:"0 0 15 15",fill:"none",xmlns:"http://www.w3.org/2000/svg"},c,{ref:a}),f.createElement("path",{d:"M10 6.5C10 8.433 8.433 10 6.5 10C4.567 10 3 8.433 3 6.5C3 4.567 4.567 3 6.5 3C8.433 3 10 4.567 10 6.5ZM9.30884 10.0159C8.53901 10.6318 7.56251 11 6.5 11C4.01472 11 2 8.98528 2 6.5C2 4.01472 4.01472 2 6.5 2C8.98528 2 11 4.01472 11 6.5C11 7.56251 10.6318 8.53901 10.0159 9.30884L12.8536 12.1464C13.0488 12.3417 13.0488 12.6583 12.8536 12.8536C12.6583 13.0488 12.3417 13.0488 12.1464 12.8536L9.30884 10.0159Z",fill:r,fillRule:"evenodd",clipRule:"evenodd"}))}),uB=["color"],FB=f.forwardRef(function(t,a){var i=t.color,r=i===void 0?"currentColor":i,c=No(t,uB);return f.createElement("svg",Object.assign({width:"15",height:"15",viewBox:"0 0 15 15",fill:"none",xmlns:"http://www.w3.org/2000/svg"},c,{ref:a}),f.createElement("path",{d:"M12.1464 1.14645C12.3417 0.951184 12.6583 0.951184 12.8535 1.14645L14.8535 3.14645C15.0488 3.34171 15.0488 3.65829 14.8535 3.85355L10.9109 7.79618C10.8349 7.87218 10.7471 7.93543 10.651 7.9835L6.72359 9.94721C6.53109 10.0435 6.29861 10.0057 6.14643 9.85355C5.99425 9.70137 5.95652 9.46889 6.05277 9.27639L8.01648 5.34897C8.06455 5.25283 8.1278 5.16507 8.2038 5.08907L12.1464 1.14645ZM12.5 2.20711L8.91091 5.79618L7.87266 7.87267L8.12731 8.12732L10.2038 7.08907L13.7929 3.5L12.5 2.20711ZM9.99998 2L8.99998 3H4.9C4.47171 3 4.18056 3.00039 3.95552 3.01877C3.73631 3.03668 3.62421 3.06915 3.54601 3.10899C3.35785 3.20487 3.20487 3.35785 3.10899 3.54601C3.06915 3.62421 3.03669 3.73631 3.01878 3.95552C3.00039 4.18056 3 4.47171 3 4.9V11.1C3 11.5283 3.00039 11.8194 3.01878 12.0445C3.03669 12.2637 3.06915 12.3758 3.10899 12.454C3.20487 12.6422 3.35785 12.7951 3.54601 12.891C3.62421 12.9309 3.73631 12.9633 3.95552 12.9812C4.18056 12.9996 4.47171 13 4.9 13H11.1C11.5283 13 11.8194 12.9996 12.0445 12.9812C12.2637 12.9633 12.3758 12.9309 12.454 12.891C12.6422 12.7951 12.7951 12.6422 12.891 12.454C12.9309 12.3758 12.9633 12.2637 12.9812 12.0445C12.9996 11.8194 13 11.5283 13 11.1V6.99998L14 5.99998V11.1V11.1207C14 11.5231 14 11.8553 13.9779 12.1259C13.9549 12.407 13.9057 12.6653 13.782 12.908C13.5903 13.2843 13.2843 13.5903 12.908 13.782C12.6653 13.9057 12.407 13.9549 12.1259 13.9779C11.8553 14 11.5231 14 11.1207 14H11.1H4.9H4.87934C4.47686 14 4.14468 14 3.87409 13.9779C3.59304 13.9549 3.33469 13.9057 3.09202 13.782C2.7157 13.5903 2.40973 13.2843 2.21799 12.908C2.09434 12.6653 2.04506 12.407 2.0221 12.1259C1.99999 11.8553 1.99999 11.5231 2 11.1207V11.1206V11.1V4.9V4.87935V4.87932V4.87931C1.99999 4.47685 1.99999 4.14468 2.0221 3.87409C2.04506 3.59304 2.09434 3.33469 2.21799 3.09202C2.40973 2.71569 2.7157 2.40973 3.09202 2.21799C3.33469 2.09434 3.59304 2.04506 3.87409 2.0221C4.14468 1.99999 4.47685 1.99999 4.87932 2H4.87935H4.9H9.99998Z",fill:r,fillRule:"evenodd",clipRule:"evenodd"}))});function Ro(t,a){if(typeof t!="object"||t===null)return t;if(Array.isArray(t))return t.map((r,c)=>Ro(r,c));const i=t.props.children?{...t.props,children:Ro(t.props.children)}:t.props;return a0.createElement(t.type,{...i,key:a})}function dB({hide:t}){const{banner:a}=m0(),i=f.useMemo(()=>{const r=(a==null?void 0:a.content)??"";if(!r)return null;if(typeof r!="string")return()=>Ro(r);const{default:c}=Q1(r,{...FC,Fragment:f.Fragment});return c},[a]);return i?g.jsx("div",{className:l2(K1),style:Me({[G1]:a==null?void 0:a.backgroundColor,[W1]:a==null?void 0:a.textColor}),children:g.jsxs("div",{className:l2(Y1),children:[g.jsx("div",{className:l2(Z1),children:g.jsx(i,{})}),(a==null?void 0:a.dismissable)!=="false"&&g.jsx("button",{className:l2(X1),onClick:t,type:"button",children:g.jsx(iB,{width:14,height:14})})]})}):null}var AB="vocs_Content";function Cg({children:t,className:a}){return g.jsx("article",{className:l2(a,AB),children:t})}function pB(){return g.jsx("div",{children:g.jsxs("center",{children:[g.jsx("p",{children:g.jsx("a",{href:"https://meet.johnwhitton.com",children:"Meet with John"})}),g.jsxs("p",{className:"copyright",children:["John Whitton."," ",g.jsx("a",{href:"mailto:john@johnwhitton.com",children:"john@johnwhitton.com"})]}),g.jsxs("p",{className:"copyright",children:["© John Whitton. Design:"," ",g.jsx("a",{href:"https://html5up.net",children:"HTML5 UP"}),"."]})]})})}const mB=({children:t})=>t,wu=({children:t})=>t;function vg({items:t,pathname:a}){const i=a.replace(/\.html$/,""),r=[];for(const c of t)(c.link&&i.startsWith(c.match||c.link)||c.items&&vg({items:c.items,pathname:a}).length>0)&&r.push(c.id);return r}function si({items:t,pathname:a}){return f.useMemo(()=>vg({items:t,pathname:a}),[t,a])}function to(){const t=f.useContext(Bg);if(!t)throw new Error("`usePageData` must be used within `PageDataContext.Provider`.");return t}const Bg=f.createContext(void 0);function Bs(){const{pathname:t}=i0(),a=m0(),{sidebar:i}=a;if(!i)return{items:[]};if(Array.isArray(i))return{items:i};const r=f.useMemo(()=>{const c=Object.keys(i).filter(l=>t.startsWith(l));return c[c.length-1]},[i,t]);return r?Array.isArray(i[r])?{key:r,items:i[r]}:{...i[r],key:r}:{items:[]}}function oo(){const{aiCta:t}=m0(),a=Bs(),{frontmatter:i}=to(),{layout:r,showLogo:c,showAiCta:l,showOutline:u,showSidebar:F,showTopNav:p}=i||{},A=r??"docs";return{layout:A,get showLogo(){return typeof c<"u"?c:!0},get showAiCta(){return typeof l<"u"?l:t===!1?!1:A==="docs"},get showOutline(){return typeof u<"u"?u:A==="docs"},get showSidebar(){return a.items.length===0?!1:typeof F<"u"?F:!(A==="minimal"||A==="landing")},get showTopNav(){return typeof p<"u"?p:!0}}}function p2(t,a,{checkForDefaultPrevented:i=!0}={}){return function(c){if(t==null||t(c),i===!1||!c.defaultPrevented)return a==null?void 0:a(c)}}function Sm(t,a){if(typeof t=="function")return t(a);t!=null&&(t.current=a)}function ci(...t){return a=>{let i=!1;const r=t.map(c=>{const l=Sm(c,a);return!i&&typeof l=="function"&&(i=!0),l});if(i)return()=>{for(let c=0;c<r.length;c++){const l=r[c];typeof l=="function"?l():Sm(t[c],null)}}}}function n0(...t){return f.useCallback(ci(...t),t)}function gB(t,a){const i=f.createContext(a),r=l=>{const{children:u,...F}=l,p=f.useMemo(()=>F,Object.values(F));return g.jsx(i.Provider,{value:p,children:u})};r.displayName=t+"Provider";function c(l){const u=f.useContext(i);if(u)return u;if(a!==void 0)return a;throw new Error(`\`${l}\` must be used within \`${t}\``)}return[r,c]}function Ne(t,a=[]){let i=[];function r(l,u){const F=f.createContext(u),p=i.length;i=[...i,u];const A=m=>{var w;const{scope:y,children:C,...B}=m,v=((w=y==null?void 0:y[t])==null?void 0:w[p])||F,D=f.useMemo(()=>B,Object.values(B));return g.jsx(v.Provider,{value:D,children:C})};A.displayName=l+"Provider";function b(m,y){var v;const C=((v=y==null?void 0:y[t])==null?void 0:v[p])||F,B=f.useContext(C);if(B)return B;if(u!==void 0)return u;throw new Error(`\`${m}\` must be used within \`${l}\``)}return[A,b]}const c=()=>{const l=i.map(u=>f.createContext(u));return function(F){const p=(F==null?void 0:F[t])||l;return f.useMemo(()=>({[`__scope${t}`]:{...F,[t]:p}}),[F,p])}};return c.scopeName=t,[r,bB(c,...a)]}function bB(...t){const a=t[0];if(t.length===1)return a;const i=()=>{const r=t.map(c=>({useScope:c(),scopeName:c.scopeName}));return function(l){const u=r.reduce((F,{useScope:p,scopeName:A})=>{const m=p(l)[`__scope${A}`];return{...F,...m}},{});return f.useMemo(()=>({[`__scope${a.scopeName}`]:u}),[u])}};return i.scopeName=a.scopeName,i}var De=globalThis!=null&&globalThis.document?f.useLayoutEffect:()=>{},fB=fs[" useId ".trim().toString()]||(()=>{}),yB=0;function ve(t){const[a,i]=f.useState(fB());return De(()=>{i(r=>r??String(yB++))},[t]),t||(a?`radix-${a}`:"")}var CB=fs[" useInsertionEffect ".trim().toString()]||De;function $e({prop:t,defaultProp:a,onChange:i=()=>{},caller:r}){const[c,l,u]=vB({defaultProp:a,onChange:i}),F=t!==void 0,p=F?t:c;{const b=f.useRef(t!==void 0);f.useEffect(()=>{const m=b.current;m!==F&&console.warn(`${r} is changing from ${m?"controlled":"uncontrolled"} to ${F?"controlled":"uncontrolled"}. Components should not switch from controlled to uncontrolled (or vice versa). Decide between using a controlled or uncontrolled value for the lifetime of the component.`),b.current=F},[F,r])}const A=f.useCallback(b=>{var m;if(F){const y=BB(b)?b(t):b;y!==t&&((m=u.current)==null||m.call(u,y))}else l(b)},[F,t,l,u]);return[p,A]}function vB({defaultProp:t,onChange:a}){const[i,r]=f.useState(t),c=f.useRef(i),l=f.useRef(a);return CB(()=>{l.current=a},[a]),f.useEffect(()=>{var u;c.current!==i&&((u=l.current)==null||u.call(l,i),c.current=i)},[i,c]),[i,r,l]}function BB(t){return typeof t=="function"}function Pa(t){const a=kB(t),i=f.forwardRef((r,c)=>{const{children:l,...u}=r,F=f.Children.toArray(l),p=F.find(wB);if(p){const A=p.props.children,b=F.map(m=>m===p?f.Children.count(A)>1?f.Children.only(null):f.isValidElement(A)?A.props.children:null:m);return g.jsx(a,{...u,ref:c,children:f.isValidElement(A)?f.cloneElement(A,void 0,b):null})}return g.jsx(a,{...u,ref:c,children:l})});return i.displayName=`${t}.Slot`,i}function kB(t){const a=f.forwardRef((i,r)=>{const{children:c,...l}=i;if(f.isValidElement(c)){const u=EB(c),F=_B(l,c.props);return c.type!==f.Fragment&&(F.ref=r?ci(r,u):u),f.cloneElement(c,F)}return f.Children.count(c)>1?f.Children.only(null):null});return a.displayName=`${t}.SlotClone`,a}var DB=Symbol("radix.slottable");function wB(t){return f.isValidElement(t)&&typeof t.type=="function"&&"__radixId"in t.type&&t.type.__radixId===DB}function _B(t,a){const i={...a};for(const r in a){const c=t[r],l=a[r];/^on[A-Z]/.test(r)?c&&l?i[r]=(...F)=>{const p=l(...F);return c(...F),p}:c&&(i[r]=c):r==="style"?i[r]={...c,...l}:r==="className"&&(i[r]=[c,l].filter(Boolean).join(" "))}return{...t,...i}}function EB(t){var r,c;let a=(r=Object.getOwnPropertyDescriptor(t.props,"ref"))==null?void 0:r.get,i=a&&"isReactWarning"in a&&a.isReactWarning;return i?t.ref:(a=(c=Object.getOwnPropertyDescriptor(t,"ref"))==null?void 0:c.get,i=a&&"isReactWarning"in a&&a.isReactWarning,i?t.props.ref:t.props.ref||t.ref)}var xB=["a","button","div","form","h2","h3","img","input","label","li","nav","ol","p","select","span","svg","ul"],R2=xB.reduce((t,a)=>{const i=Pa(`Primitive.${a}`),r=f.forwardRef((c,l)=>{const{asChild:u,...F}=c,p=u?i:a;return typeof window<"u"&&(window[Symbol.for("radix-ui")]=!0),g.jsx(p,{...F,ref:l})});return r.displayName=`Primitive.${a}`,{...t,[a]:r}},{});function rs(t,a){t&&Bu.flushSync(()=>t.dispatchEvent(a))}function I0(t){const a=f.useRef(t);return f.useEffect(()=>{a.current=t}),f.useMemo(()=>(...i)=>{var r;return(r=a.current)==null?void 0:r.call(a,...i)},[])}function SB(t,a=globalThis==null?void 0:globalThis.document){const i=I0(t);f.useEffect(()=>{const r=c=>{c.key==="Escape"&&i(c)};return a.addEventListener("keydown",r,{capture:!0}),()=>a.removeEventListener("keydown",r,{capture:!0})},[i,a])}var RB="DismissableLayer",jh="dismissableLayer.update",TB="dismissableLayer.pointerDownOutside",PB="dismissableLayer.focusOutside",Rm,kg=f.createContext({layers:new Set,layersWithOutsidePointerEventsDisabled:new Set,branches:new Set}),li=f.forwardRef((t,a)=>{const{disableOutsidePointerEvents:i=!1,onEscapeKeyDown:r,onPointerDownOutside:c,onFocusOutside:l,onInteractOutside:u,onDismiss:F,...p}=t,A=f.useContext(kg),[b,m]=f.useState(null),y=(b==null?void 0:b.ownerDocument)??(globalThis==null?void 0:globalThis.document),[,C]=f.useState({}),B=n0(a,N=>m(N)),v=Array.from(A.layers),[D]=[...A.layersWithOutsidePointerEventsDisabled].slice(-1),w=v.indexOf(D),x=b?v.indexOf(b):-1,_=A.layersWithOutsidePointerEventsDisabled.size>0,R=x>=w,P=NB(N=>{const O=N.target,U=[...A.branches].some(n2=>n2.contains(O));!R||U||(c==null||c(N),u==null||u(N),N.defaultPrevented||F==null||F())},y),S=IB(N=>{const O=N.target;[...A.branches].some(n2=>n2.contains(O))||(l==null||l(N),u==null||u(N),N.defaultPrevented||F==null||F())},y);return SB(N=>{x===A.layers.size-1&&(r==null||r(N),!N.defaultPrevented&&F&&(N.preventDefault(),F()))},y),f.useEffect(()=>{if(b)return i&&(A.layersWithOutsidePointerEventsDisabled.size===0&&(Rm=y.body.style.pointerEvents,y.body.style.pointerEvents="none"),A.layersWithOutsidePointerEventsDisabled.add(b)),A.layers.add(b),Tm(),()=>{i&&A.layersWithOutsidePointerEventsDisabled.size===1&&(y.body.style.pointerEvents=Rm)}},[b,y,i,A]),f.useEffect(()=>()=>{b&&(A.layers.delete(b),A.layersWithOutsidePointerEventsDisabled.delete(b),Tm())},[b,A]),f.useEffect(()=>{const N=()=>C({});return document.addEventListener(jh,N),()=>document.removeEventListener(jh,N)},[]),g.jsx(R2.div,{...p,ref:B,style:{pointerEvents:_?R?"auto":"none":void 0,...t.style},onFocusCapture:p2(t.onFocusCapture,S.onFocusCapture),onBlurCapture:p2(t.onBlurCapture,S.onBlurCapture),onPointerDownCapture:p2(t.onPointerDownCapture,P.onPointerDownCapture)})});li.displayName=RB;var LB="DismissableLayerBranch",MB=f.forwardRef((t,a)=>{const i=f.useContext(kg),r=f.useRef(null),c=n0(a,r);return f.useEffect(()=>{const l=r.current;if(l)return i.branches.add(l),()=>{i.branches.delete(l)}},[i.branches]),g.jsx(R2.div,{...t,ref:c})});MB.displayName=LB;function NB(t,a=globalThis==null?void 0:globalThis.document){const i=I0(t),r=f.useRef(!1),c=f.useRef(()=>{});return f.useEffect(()=>{const l=F=>{if(F.target&&!r.current){let p=function(){Dg(TB,i,A,{discrete:!0})};const A={originalEvent:F};F.pointerType==="touch"?(a.removeEventListener("click",c.current),c.current=p,a.addEventListener("click",c.current,{once:!0})):p()}else a.removeEventListener("click",c.current);r.current=!1},u=window.setTimeout(()=>{a.addEventListener("pointerdown",l)},0);return()=>{window.clearTimeout(u),a.removeEventListener("pointerdown",l),a.removeEventListener("click",c.current)}},[a,i]),{onPointerDownCapture:()=>r.current=!0}}function IB(t,a=globalThis==null?void 0:globalThis.document){const i=I0(t),r=f.useRef(!1);return f.useEffect(()=>{const c=l=>{l.target&&!r.current&&Dg(PB,i,{originalEvent:l},{discrete:!1})};return a.addEventListener("focusin",c),()=>a.removeEventListener("focusin",c)},[a,i]),{onFocusCapture:()=>r.current=!0,onBlurCapture:()=>r.current=!1}}function Tm(){const t=new CustomEvent(jh);document.dispatchEvent(t)}function Dg(t,a,i,{discrete:r}){const c=i.originalEvent.target,l=new CustomEvent(t,{bubbles:!1,cancelable:!0,detail:i});a&&c.addEventListener(t,a,{once:!0}),r?rs(c,l):c.dispatchEvent(l)}var ih="focusScope.autoFocusOnMount",rh="focusScope.autoFocusOnUnmount",Pm={bubbles:!1,cancelable:!0},HB="FocusScope",ks=f.forwardRef((t,a)=>{const{loop:i=!1,trapped:r=!1,onMountAutoFocus:c,onUnmountAutoFocus:l,...u}=t,[F,p]=f.useState(null),A=I0(c),b=I0(l),m=f.useRef(null),y=n0(a,v=>p(v)),C=f.useRef({paused:!1,pause(){this.paused=!0},resume(){this.paused=!1}}).current;f.useEffect(()=>{if(r){let v=function(_){if(C.paused||!F)return;const R=_.target;F.contains(R)?m.current=R:Xt(m.current,{select:!0})},D=function(_){if(C.paused||!F)return;const R=_.relatedTarget;R!==null&&(F.contains(R)||Xt(m.current,{select:!0}))},w=function(_){if(document.activeElement===document.body)for(const P of _)P.removedNodes.length>0&&Xt(F)};document.addEventListener("focusin",v),document.addEventListener("focusout",D);const x=new MutationObserver(w);return F&&x.observe(F,{childList:!0,subtree:!0}),()=>{document.removeEventListener("focusin",v),document.removeEventListener("focusout",D),x.disconnect()}}},[r,F,C.paused]),f.useEffect(()=>{if(F){Mm.add(C);const v=document.activeElement;if(!F.contains(v)){const w=new CustomEvent(ih,Pm);F.addEventListener(ih,A),F.dispatchEvent(w),w.defaultPrevented||(zB(GB(wg(F)),{select:!0}),document.activeElement===v&&Xt(F))}return()=>{F.removeEventListener(ih,A),setTimeout(()=>{const w=new CustomEvent(rh,Pm);F.addEventListener(rh,b),F.dispatchEvent(w),w.defaultPrevented||Xt(v??document.body,{select:!0}),F.removeEventListener(rh,b),Mm.remove(C)},0)}}},[F,A,b,C]);const B=f.useCallback(v=>{if(!i&&!r||C.paused)return;const D=v.key==="Tab"&&!v.altKey&&!v.ctrlKey&&!v.metaKey,w=document.activeElement;if(D&&w){const x=v.currentTarget,[_,R]=OB(x);_&&R?!v.shiftKey&&w===R?(v.preventDefault(),i&&Xt(_,{select:!0})):v.shiftKey&&w===_&&(v.preventDefault(),i&&Xt(R,{select:!0})):w===x&&v.preventDefault()}},[i,r,C.paused]);return g.jsx(R2.div,{tabIndex:-1,...u,ref:y,onKeyDown:B})});ks.displayName=HB;function zB(t,{select:a=!1}={}){const i=document.activeElement;for(const r of t)if(Xt(r,{select:a}),document.activeElement!==i)return}function OB(t){const a=wg(t),i=Lm(a,t),r=Lm(a.reverse(),t);return[i,r]}function wg(t){const a=[],i=document.createTreeWalker(t,NodeFilter.SHOW_ELEMENT,{acceptNode:r=>{const c=r.tagName==="INPUT"&&r.type==="hidden";return r.disabled||r.hidden||c?NodeFilter.FILTER_SKIP:r.tabIndex>=0?NodeFilter.FILTER_ACCEPT:NodeFilter.FILTER_SKIP}});for(;i.nextNode();)a.push(i.currentNode);return a}function Lm(t,a){for(const i of t)if(!jB(i,{upTo:a}))return i}function jB(t,{upTo:a}){if(getComputedStyle(t).visibility==="hidden")return!0;for(;t;){if(a!==void 0&&t===a)return!1;if(getComputedStyle(t).display==="none")return!0;t=t.parentElement}return!1}function VB(t){return t instanceof HTMLInputElement&&"select"in t}function Xt(t,{select:a=!1}={}){if(t&&t.focus){const i=document.activeElement;t.focus({preventScroll:!0}),t!==i&&VB(t)&&a&&t.select()}}var Mm=UB();function UB(){let t=[];return{add(a){const i=t[0];a!==i&&(i==null||i.pause()),t=Nm(t,a),t.unshift(a)},remove(a){var i;t=Nm(t,a),(i=t[0])==null||i.resume()}}}function Nm(t,a){const i=[...t],r=i.indexOf(a);return r!==-1&&i.splice(r,1),i}function GB(t){return t.filter(a=>a.tagName!=="A")}var qB="Portal",Ds=f.forwardRef((t,a)=>{var F;const{container:i,...r}=t,[c,l]=f.useState(!1);De(()=>l(!0),[]);const u=i||c&&((F=globalThis==null?void 0:globalThis.document)==null?void 0:F.body);return u?ug.createPortal(g.jsx(R2.div,{...r,ref:a}),u):null});Ds.displayName=qB;function WB(t,a){return f.useReducer((i,r)=>a[i][r]??i,t)}var H0=t=>{const{present:a,children:i}=t,r=KB(a),c=typeof i=="function"?i({present:r.isPresent}):f.Children.only(i),l=n0(r.ref,ZB(c));return typeof i=="function"||r.isPresent?f.cloneElement(c,{ref:l}):null};H0.displayName="Presence";function KB(t){const[a,i]=f.useState(),r=f.useRef(null),c=f.useRef(t),l=f.useRef("none"),u=t?"mounted":"unmounted",[F,p]=WB(u,{mounted:{UNMOUNT:"unmounted",ANIMATION_OUT:"unmountSuspended"},unmountSuspended:{MOUNT:"mounted",ANIMATION_END:"unmounted"},unmounted:{MOUNT:"mounted"}});return f.useEffect(()=>{const A=Ir(r.current);l.current=F==="mounted"?A:"none"},[F]),De(()=>{const A=r.current,b=c.current;if(b!==t){const y=l.current,C=Ir(A);t?p("MOUNT"):C==="none"||(A==null?void 0:A.display)==="none"?p("UNMOUNT"):p(b&&y!==C?"ANIMATION_OUT":"UNMOUNT"),c.current=t}},[t,p]),De(()=>{if(a){let A;const b=a.ownerDocument.defaultView??window,m=C=>{const v=Ir(r.current).includes(C.animationName);if(C.target===a&&v&&(p("ANIMATION_END"),!c.current)){const D=a.style.animationFillMode;a.style.animationFillMode="forwards",A=b.setTimeout(()=>{a.style.animationFillMode==="forwards"&&(a.style.animationFillMode=D)})}},y=C=>{C.target===a&&(l.current=Ir(r.current))};return a.addEventListener("animationstart",y),a.addEventListener("animationcancel",m),a.addEventListener("animationend",m),()=>{b.clearTimeout(A),a.removeEventListener("animationstart",y),a.removeEventListener("animationcancel",m),a.removeEventListener("animationend",m)}}else p("ANIMATION_END")},[a,p]),{isPresent:["mounted","unmountSuspended"].includes(F),ref:f.useCallback(A=>{r.current=A?getComputedStyle(A):null,i(A)},[])}}function Ir(t){return(t==null?void 0:t.animationName)||"none"}function ZB(t){var r,c;let a=(r=Object.getOwnPropertyDescriptor(t.props,"ref"))==null?void 0:r.get,i=a&&"isReactWarning"in a&&a.isReactWarning;return i?t.ref:(a=(c=Object.getOwnPropertyDescriptor(t,"ref"))==null?void 0:c.get,i=a&&"isReactWarning"in a&&a.isReactWarning,i?t.props.ref:t.props.ref||t.ref)}var sh=0;function _u(){f.useEffect(()=>{const t=document.querySelectorAll("[data-radix-focus-guard]");return document.body.insertAdjacentElement("afterbegin",t[0]??Im()),document.body.insertAdjacentElement("beforeend",t[1]??Im()),sh++,()=>{sh===1&&document.querySelectorAll("[data-radix-focus-guard]").forEach(a=>a.remove()),sh--}},[])}function Im(){const t=document.createElement("span");return t.setAttribute("data-radix-focus-guard",""),t.tabIndex=0,t.style.outline="none",t.style.opacity="0",t.style.position="fixed",t.style.pointerEvents="none",t}var Ke=function(){return Ke=Object.assign||function(a){for(var i,r=1,c=arguments.length;r<c;r++){i=arguments[r];for(var l in i)Object.prototype.hasOwnProperty.call(i,l)&&(a[l]=i[l])}return a},Ke.apply(this,arguments)};function _g(t,a){var i={};for(var r in t)Object.prototype.hasOwnProperty.call(t,r)&&a.indexOf(r)<0&&(i[r]=t[r]);if(t!=null&&typeof Object.getOwnPropertySymbols=="function")for(var c=0,r=Object.getOwnPropertySymbols(t);c<r.length;c++)a.indexOf(r[c])<0&&Object.prototype.propertyIsEnumerable.call(t,r[c])&&(i[r[c]]=t[r[c]]);return i}function YB(t,a,i){if(i||arguments.length===2)for(var r=0,c=a.length,l;r<c;r++)(l||!(r in a))&&(l||(l=Array.prototype.slice.call(a,0,r)),l[r]=a[r]);return t.concat(l||Array.prototype.slice.call(a))}var Qr="right-scroll-bar-position",es="width-before-scroll-bar",XB="with-scroll-bars-hidden",JB="--removed-body-scroll-bar-size";function ch(t,a){return typeof t=="function"?t(a):t&&(t.current=a),t}function $B(t,a){var i=f.useState(function(){return{value:t,callback:a,facade:{get current(){return i.value},set current(r){var c=i.value;c!==r&&(i.value=r,i.callback(r,c))}}}})[0];return i.callback=a,i.facade}var QB=typeof window<"u"?f.useLayoutEffect:f.useEffect,Hm=new WeakMap;function ek(t,a){var i=$B(null,function(r){return t.forEach(function(c){return ch(c,r)})});return QB(function(){var r=Hm.get(i);if(r){var c=new Set(r),l=new Set(t),u=i.current;c.forEach(function(F){l.has(F)||ch(F,null)}),l.forEach(function(F){c.has(F)||ch(F,u)})}Hm.set(i,t)},[t]),i}function tk(t){return t}function ok(t,a){a===void 0&&(a=tk);var i=[],r=!1,c={read:function(){if(r)throw new Error("Sidecar: could not `read` from an `assigned` medium. `read` could be used only with `useMedium`.");return i.length?i[i.length-1]:t},useMedium:function(l){var u=a(l,r);return i.push(u),function(){i=i.filter(function(F){return F!==u})}},assignSyncMedium:function(l){for(r=!0;i.length;){var u=i;i=[],u.forEach(l)}i={push:function(F){return l(F)},filter:function(){return i}}},assignMedium:function(l){r=!0;var u=[];if(i.length){var F=i;i=[],F.forEach(l),u=i}var p=function(){var b=u;u=[],b.forEach(l)},A=function(){return Promise.resolve().then(p)};A(),i={push:function(b){u.push(b),A()},filter:function(b){return u=u.filter(b),i}}}};return c}function ak(t){t===void 0&&(t={});var a=ok(null);return a.options=Ke({async:!0,ssr:!1},t),a}var Eg=function(t){var a=t.sideCar,i=_g(t,["sideCar"]);if(!a)throw new Error("Sidecar: please provide `sideCar` property to import the right car");var r=a.read();if(!r)throw new Error("Sidecar medium not found");return f.createElement(r,Ke({},i))};Eg.isSideCarExport=!0;function nk(t,a){return t.useMedium(a),Eg}var xg=ak(),lh=function(){},ws=f.forwardRef(function(t,a){var i=f.useRef(null),r=f.useState({onScrollCapture:lh,onWheelCapture:lh,onTouchMoveCapture:lh}),c=r[0],l=r[1],u=t.forwardProps,F=t.children,p=t.className,A=t.removeScrollBar,b=t.enabled,m=t.shards,y=t.sideCar,C=t.noRelative,B=t.noIsolation,v=t.inert,D=t.allowPinchZoom,w=t.as,x=w===void 0?"div":w,_=t.gapMode,R=_g(t,["forwardProps","children","className","removeScrollBar","enabled","shards","sideCar","noRelative","noIsolation","inert","allowPinchZoom","as","gapMode"]),P=y,S=ek([i,a]),N=Ke(Ke({},R),c);return f.createElement(f.Fragment,null,b&&f.createElement(P,{sideCar:xg,removeScrollBar:A,shards:m,noRelative:C,noIsolation:B,inert:v,setCallbacks:l,allowPinchZoom:!!D,lockRef:i,gapMode:_}),u?f.cloneElement(f.Children.only(F),Ke(Ke({},N),{ref:S})):f.createElement(x,Ke({},N,{className:p,ref:S}),F))});ws.defaultProps={enabled:!0,removeScrollBar:!0,inert:!1};ws.classNames={fullWidth:es,zeroRight:Qr};var ik=function(){if(typeof __webpack_nonce__<"u")return __webpack_nonce__};function rk(){if(!document)return null;var t=document.createElement("style");t.type="text/css";var a=ik();return a&&t.setAttribute("nonce",a),t}function sk(t,a){t.styleSheet?t.styleSheet.cssText=a:t.appendChild(document.createTextNode(a))}function ck(t){var a=document.head||document.getElementsByTagName("head")[0];a.appendChild(t)}var lk=function(){var t=0,a=null;return{add:function(i){t==0&&(a=rk())&&(sk(a,i),ck(a)),t++},remove:function(){t--,!t&&a&&(a.parentNode&&a.parentNode.removeChild(a),a=null)}}},hk=function(){var t=lk();return function(a,i){f.useEffect(function(){return t.add(a),function(){t.remove()}},[a&&i])}},Sg=function(){var t=hk(),a=function(i){var r=i.styles,c=i.dynamic;return t(r,c),null};return a},uk={left:0,top:0,right:0,gap:0},hh=function(t){return parseInt(t||"",10)||0},Fk=function(t){var a=window.getComputedStyle(document.body),i=a[t==="padding"?"paddingLeft":"marginLeft"],r=a[t==="padding"?"paddingTop":"marginTop"],c=a[t==="padding"?"paddingRight":"marginRight"];return[hh(i),hh(r),hh(c)]},dk=function(t){if(t===void 0&&(t="margin"),typeof window>"u")return uk;var a=Fk(t),i=document.documentElement.clientWidth,r=window.innerWidth;return{left:a[0],top:a[1],right:a[2],gap:Math.max(0,r-i+a[2]-a[0])}},Ak=Sg(),Sa="data-scroll-locked",pk=function(t,a,i,r){var c=t.left,l=t.top,u=t.right,F=t.gap;return i===void 0&&(i="margin"),`
  .`.concat(XB,` {
   overflow: hidden `).concat(r,`;
   padding-right: `).concat(F,"px ").concat(r,`;
  }
  body[`).concat(Sa,`] {
    overflow: hidden `).concat(r,`;
    overscroll-behavior: contain;
    `).concat([a&&"position: relative ".concat(r,";"),i==="margin"&&`
    padding-left: `.concat(c,`px;
    padding-top: `).concat(l,`px;
    padding-right: `).concat(u,`px;
    margin-left:0;
    margin-top:0;
    margin-right: `).concat(F,"px ").concat(r,`;
    `),i==="padding"&&"padding-right: ".concat(F,"px ").concat(r,";")].filter(Boolean).join(""),`
  }
  
  .`).concat(Qr,` {
    right: `).concat(F,"px ").concat(r,`;
  }
  
  .`).concat(es,` {
    margin-right: `).concat(F,"px ").concat(r,`;
  }
  
  .`).concat(Qr," .").concat(Qr,` {
    right: 0 `).concat(r,`;
  }
  
  .`).concat(es," .").concat(es,` {
    margin-right: 0 `).concat(r,`;
  }
  
  body[`).concat(Sa,`] {
    `).concat(JB,": ").concat(F,`px;
  }
`)},zm=function(){var t=parseInt(document.body.getAttribute(Sa)||"0",10);return isFinite(t)?t:0},mk=function(){f.useEffect(function(){return document.body.setAttribute(Sa,(zm()+1).toString()),function(){var t=zm()-1;t<=0?document.body.removeAttribute(Sa):document.body.setAttribute(Sa,t.toString())}},[])},gk=function(t){var a=t.noRelative,i=t.noImportant,r=t.gapMode,c=r===void 0?"margin":r;mk();var l=f.useMemo(function(){return dk(c)},[c]);return f.createElement(Ak,{styles:pk(l,!a,c,i?"":"!important")})},Vh=!1;if(typeof window<"u")try{var Hr=Object.defineProperty({},"passive",{get:function(){return Vh=!0,!0}});window.addEventListener("test",Hr,Hr),window.removeEventListener("test",Hr,Hr)}catch{Vh=!1}var Ba=Vh?{passive:!1}:!1,bk=function(t){return t.tagName==="TEXTAREA"},Rg=function(t,a){if(!(t instanceof Element))return!1;var i=window.getComputedStyle(t);return i[a]!=="hidden"&&!(i.overflowY===i.overflowX&&!bk(t)&&i[a]==="visible")},fk=function(t){return Rg(t,"overflowY")},yk=function(t){return Rg(t,"overflowX")},Om=function(t,a){var i=a.ownerDocument,r=a;do{typeof ShadowRoot<"u"&&r instanceof ShadowRoot&&(r=r.host);var c=Tg(t,r);if(c){var l=Pg(t,r),u=l[1],F=l[2];if(u>F)return!0}r=r.parentNode}while(r&&r!==i.body);return!1},Ck=function(t){var a=t.scrollTop,i=t.scrollHeight,r=t.clientHeight;return[a,i,r]},vk=function(t){var a=t.scrollLeft,i=t.scrollWidth,r=t.clientWidth;return[a,i,r]},Tg=function(t,a){return t==="v"?fk(a):yk(a)},Pg=function(t,a){return t==="v"?Ck(a):vk(a)},Bk=function(t,a){return t==="h"&&a==="rtl"?-1:1},kk=function(t,a,i,r,c){var l=Bk(t,window.getComputedStyle(a).direction),u=l*r,F=i.target,p=a.contains(F),A=!1,b=u>0,m=0,y=0;do{if(!F)break;var C=Pg(t,F),B=C[0],v=C[1],D=C[2],w=v-D-l*B;(B||w)&&Tg(t,F)&&(m+=w,y+=B);var x=F.parentNode;F=x&&x.nodeType===Node.DOCUMENT_FRAGMENT_NODE?x.host:x}while(!p&&F!==document.body||p&&(a.contains(F)||a===F));return(b&&Math.abs(m)<1||!b&&Math.abs(y)<1)&&(A=!0),A},zr=function(t){return"changedTouches"in t?[t.changedTouches[0].clientX,t.changedTouches[0].clientY]:[0,0]},jm=function(t){return[t.deltaX,t.deltaY]},Vm=function(t){return t&&"current"in t?t.current:t},Dk=function(t,a){return t[0]===a[0]&&t[1]===a[1]},wk=function(t){return`
  .block-interactivity-`.concat(t,` {pointer-events: none;}
  .allow-interactivity-`).concat(t,` {pointer-events: all;}
`)},_k=0,ka=[];function Ek(t){var a=f.useRef([]),i=f.useRef([0,0]),r=f.useRef(),c=f.useState(_k++)[0],l=f.useState(Sg)[0],u=f.useRef(t);f.useEffect(function(){u.current=t},[t]),f.useEffect(function(){if(t.inert){document.body.classList.add("block-interactivity-".concat(c));var v=YB([t.lockRef.current],(t.shards||[]).map(Vm),!0).filter(Boolean);return v.forEach(function(D){return D.classList.add("allow-interactivity-".concat(c))}),function(){document.body.classList.remove("block-interactivity-".concat(c)),v.forEach(function(D){return D.classList.remove("allow-interactivity-".concat(c))})}}},[t.inert,t.lockRef.current,t.shards]);var F=f.useCallback(function(v,D){if("touches"in v&&v.touches.length===2||v.type==="wheel"&&v.ctrlKey)return!u.current.allowPinchZoom;var w=zr(v),x=i.current,_="deltaX"in v?v.deltaX:x[0]-w[0],R="deltaY"in v?v.deltaY:x[1]-w[1],P,S=v.target,N=Math.abs(_)>Math.abs(R)?"h":"v";if("touches"in v&&N==="h"&&S.type==="range")return!1;var O=Om(N,S);if(!O)return!0;if(O?P=N:(P=N==="v"?"h":"v",O=Om(N,S)),!O)return!1;if(!r.current&&"changedTouches"in v&&(_||R)&&(r.current=P),!P)return!0;var U=r.current||P;return kk(U,D,v,U==="h"?_:R)},[]),p=f.useCallback(function(v){var D=v;if(!(!ka.length||ka[ka.length-1]!==l)){var w="deltaY"in D?jm(D):zr(D),x=a.current.filter(function(P){return P.name===D.type&&(P.target===D.target||D.target===P.shadowParent)&&Dk(P.delta,w)})[0];if(x&&x.should){D.cancelable&&D.preventDefault();return}if(!x){var _=(u.current.shards||[]).map(Vm).filter(Boolean).filter(function(P){return P.contains(D.target)}),R=_.length>0?F(D,_[0]):!u.current.noIsolation;R&&D.cancelable&&D.preventDefault()}}},[]),A=f.useCallback(function(v,D,w,x){var _={name:v,delta:D,target:w,should:x,shadowParent:xk(w)};a.current.push(_),setTimeout(function(){a.current=a.current.filter(function(R){return R!==_})},1)},[]),b=f.useCallback(function(v){i.current=zr(v),r.current=void 0},[]),m=f.useCallback(function(v){A(v.type,jm(v),v.target,F(v,t.lockRef.current))},[]),y=f.useCallback(function(v){A(v.type,zr(v),v.target,F(v,t.lockRef.current))},[]);f.useEffect(function(){return ka.push(l),t.setCallbacks({onScrollCapture:m,onWheelCapture:m,onTouchMoveCapture:y}),document.addEventListener("wheel",p,Ba),document.addEventListener("touchmove",p,Ba),document.addEventListener("touchstart",b,Ba),function(){ka=ka.filter(function(v){return v!==l}),document.removeEventListener("wheel",p,Ba),document.removeEventListener("touchmove",p,Ba),document.removeEventListener("touchstart",b,Ba)}},[]);var C=t.removeScrollBar,B=t.inert;return f.createElement(f.Fragment,null,B?f.createElement(l,{styles:wk(c)}):null,C?f.createElement(gk,{noRelative:t.noRelative,gapMode:t.gapMode}):null)}function xk(t){for(var a=null;t!==null;)t instanceof ShadowRoot&&(a=t.host,t=t.host),t=t.parentNode;return a}const Sk=nk(xg,Ek);var _s=f.forwardRef(function(t,a){return f.createElement(ws,Ke({},t,{ref:a,sideCar:Sk}))});_s.classNames=ws.classNames;var Rk=function(t){if(typeof document>"u")return null;var a=Array.isArray(t)?t[0]:t;return a.ownerDocument.body},Da=new WeakMap,Or=new WeakMap,jr={},uh=0,Lg=function(t){return t&&(t.host||Lg(t.parentNode))},Tk=function(t,a){return a.map(function(i){if(t.contains(i))return i;var r=Lg(i);return r&&t.contains(r)?r:(console.error("aria-hidden",i,"in not contained inside",t,". Doing nothing"),null)}).filter(function(i){return!!i})},Pk=function(t,a,i,r){var c=Tk(a,Array.isArray(t)?t:[t]);jr[i]||(jr[i]=new WeakMap);var l=jr[i],u=[],F=new Set,p=new Set(c),A=function(m){!m||F.has(m)||(F.add(m),A(m.parentNode))};c.forEach(A);var b=function(m){!m||p.has(m)||Array.prototype.forEach.call(m.children,function(y){if(F.has(y))b(y);else try{var C=y.getAttribute(r),B=C!==null&&C!=="false",v=(Da.get(y)||0)+1,D=(l.get(y)||0)+1;Da.set(y,v),l.set(y,D),u.push(y),v===1&&B&&Or.set(y,!0),D===1&&y.setAttribute(i,"true"),B||y.setAttribute(r,"true")}catch(w){console.error("aria-hidden: cannot operate on ",y,w)}})};return b(a),F.clear(),uh++,function(){u.forEach(function(m){var y=Da.get(m)-1,C=l.get(m)-1;Da.set(m,y),l.set(m,C),y||(Or.has(m)||m.removeAttribute(r),Or.delete(m)),C||m.removeAttribute(i)}),uh--,uh||(Da=new WeakMap,Da=new WeakMap,Or=new WeakMap,jr={})}},Eu=function(t,a,i){i===void 0&&(i="data-aria-hidden");var r=Array.from(Array.isArray(t)?t:[t]),c=Rk(t);return c?(r.push.apply(r,Array.from(c.querySelectorAll("[aria-live], script"))),Pk(r,c,i,"aria-hidden")):function(){return null}},Es="Dialog",[Mg,V8]=Ne(Es),[Lk,Ie]=Mg(Es),Ng=t=>{const{__scopeDialog:a,children:i,open:r,defaultOpen:c,onOpenChange:l,modal:u=!0}=t,F=f.useRef(null),p=f.useRef(null),[A,b]=$e({prop:r,defaultProp:c??!1,onChange:l,caller:Es});return g.jsx(Lk,{scope:a,triggerRef:F,contentRef:p,contentId:ve(),titleId:ve(),descriptionId:ve(),open:A,onOpenChange:b,onOpenToggle:f.useCallback(()=>b(m=>!m),[b]),modal:u,children:i})};Ng.displayName=Es;var Ig="DialogTrigger",Hg=f.forwardRef((t,a)=>{const{__scopeDialog:i,...r}=t,c=Ie(Ig,i),l=n0(a,c.triggerRef);return g.jsx(R2.button,{type:"button","aria-haspopup":"dialog","aria-expanded":c.open,"aria-controls":c.contentId,"data-state":Ru(c.open),...r,ref:l,onClick:p2(t.onClick,c.onOpenToggle)})});Hg.displayName=Ig;var xu="DialogPortal",[Mk,zg]=Mg(xu,{forceMount:void 0}),Og=t=>{const{__scopeDialog:a,forceMount:i,children:r,container:c}=t,l=Ie(xu,a);return g.jsx(Mk,{scope:a,forceMount:i,children:f.Children.map(r,u=>g.jsx(H0,{present:i||l.open,children:g.jsx(Ds,{asChild:!0,container:c,children:u})}))})};Og.displayName=xu;var ss="DialogOverlay",jg=f.forwardRef((t,a)=>{const i=zg(ss,t.__scopeDialog),{forceMount:r=i.forceMount,...c}=t,l=Ie(ss,t.__scopeDialog);return l.modal?g.jsx(H0,{present:r||l.open,children:g.jsx(Ik,{...c,ref:a})}):null});jg.displayName=ss;var Nk=Pa("DialogOverlay.RemoveScroll"),Ik=f.forwardRef((t,a)=>{const{__scopeDialog:i,...r}=t,c=Ie(ss,i);return g.jsx(_s,{as:Nk,allowPinchZoom:!0,shards:[c.contentRef],children:g.jsx(R2.div,{"data-state":Ru(c.open),...r,ref:a,style:{pointerEvents:"auto",...r.style}})})}),To="DialogContent",Vg=f.forwardRef((t,a)=>{const i=zg(To,t.__scopeDialog),{forceMount:r=i.forceMount,...c}=t,l=Ie(To,t.__scopeDialog);return g.jsx(H0,{present:r||l.open,children:l.modal?g.jsx(Hk,{...c,ref:a}):g.jsx(zk,{...c,ref:a})})});Vg.displayName=To;var Hk=f.forwardRef((t,a)=>{const i=Ie(To,t.__scopeDialog),r=f.useRef(null),c=n0(a,i.contentRef,r);return f.useEffect(()=>{const l=r.current;if(l)return Eu(l)},[]),g.jsx(Ug,{...t,ref:c,trapFocus:i.open,disableOutsidePointerEvents:!0,onCloseAutoFocus:p2(t.onCloseAutoFocus,l=>{var u;l.preventDefault(),(u=i.triggerRef.current)==null||u.focus()}),onPointerDownOutside:p2(t.onPointerDownOutside,l=>{const u=l.detail.originalEvent,F=u.button===0&&u.ctrlKey===!0;(u.button===2||F)&&l.preventDefault()}),onFocusOutside:p2(t.onFocusOutside,l=>l.preventDefault())})}),zk=f.forwardRef((t,a)=>{const i=Ie(To,t.__scopeDialog),r=f.useRef(!1),c=f.useRef(!1);return g.jsx(Ug,{...t,ref:a,trapFocus:!1,disableOutsidePointerEvents:!1,onCloseAutoFocus:l=>{var u,F;(u=t.onCloseAutoFocus)==null||u.call(t,l),l.defaultPrevented||(r.current||(F=i.triggerRef.current)==null||F.focus(),l.preventDefault()),r.current=!1,c.current=!1},onInteractOutside:l=>{var p,A;(p=t.onInteractOutside)==null||p.call(t,l),l.defaultPrevented||(r.current=!0,l.detail.originalEvent.type==="pointerdown"&&(c.current=!0));const u=l.target;((A=i.triggerRef.current)==null?void 0:A.contains(u))&&l.preventDefault(),l.detail.originalEvent.type==="focusin"&&c.current&&l.preventDefault()}})}),Ug=f.forwardRef((t,a)=>{const{__scopeDialog:i,trapFocus:r,onOpenAutoFocus:c,onCloseAutoFocus:l,...u}=t,F=Ie(To,i),p=f.useRef(null),A=n0(a,p);return _u(),g.jsxs(g.Fragment,{children:[g.jsx(ks,{asChild:!0,loop:!0,trapped:r,onMountAutoFocus:c,onUnmountAutoFocus:l,children:g.jsx(li,{role:"dialog",id:F.contentId,"aria-describedby":F.descriptionId,"aria-labelledby":F.titleId,"data-state":Ru(F.open),...u,ref:A,onDismiss:()=>F.onOpenChange(!1)})}),g.jsxs(g.Fragment,{children:[g.jsx(Vk,{titleId:F.titleId}),g.jsx(Gk,{contentRef:p,descriptionId:F.descriptionId})]})]})}),Su="DialogTitle",Gg=f.forwardRef((t,a)=>{const{__scopeDialog:i,...r}=t,c=Ie(Su,i);return g.jsx(R2.h2,{id:c.titleId,...r,ref:a})});Gg.displayName=Su;var qg="DialogDescription",Ok=f.forwardRef((t,a)=>{const{__scopeDialog:i,...r}=t,c=Ie(qg,i);return g.jsx(R2.p,{id:c.descriptionId,...r,ref:a})});Ok.displayName=qg;var Wg="DialogClose",jk=f.forwardRef((t,a)=>{const{__scopeDialog:i,...r}=t,c=Ie(Wg,i);return g.jsx(R2.button,{type:"button",...r,ref:a,onClick:p2(t.onClick,()=>c.onOpenChange(!1))})});jk.displayName=Wg;function Ru(t){return t?"open":"closed"}var Kg="DialogTitleWarning",[U8,Zg]=gB(Kg,{contentName:To,titleName:Su,docsSlug:"dialog"}),Vk=({titleId:t})=>{const a=Zg(Kg),i=`\`${a.contentName}\` requires a \`${a.titleName}\` for the component to be accessible for screen reader users.

If you want to hide the \`${a.titleName}\`, you can wrap it with our VisuallyHidden component.

For more information, see https://radix-ui.com/primitives/docs/components/${a.docsSlug}`;return f.useEffect(()=>{t&&(document.getElementById(t)||console.error(i))},[i,t]),null},Uk="DialogDescriptionWarning",Gk=({contentRef:t,descriptionId:a})=>{const r=`Warning: Missing \`Description\` or \`aria-describedby={undefined}\` for {${Zg(Uk).contentName}}.`;return f.useEffect(()=>{var l;const c=(l=t.current)==null?void 0:l.getAttribute("aria-describedby");a&&c&&(document.getElementById(a)||console.warn(r))},[r,t,a]),null},Yg=Ng,Xg=Hg,qk=Og,Wk=jg,Kk=Vg,Zk=Gg;const Yk=async()=>JSON.stringify(await(await fetch("/.vocs/search-index-bc6cc7d4.json")).json());var o0=function(){return o0=Object.assign||function(a){for(var i,r=1,c=arguments.length;r<c;r++){i=arguments[r];for(var l in i)Object.prototype.hasOwnProperty.call(i,l)&&(a[l]=i[l])}return a},o0.apply(this,arguments)};function Xk(t,a,i,r){function c(l){return l instanceof i?l:new i(function(u){u(l)})}return new(i||(i=Promise))(function(l,u){function F(b){try{A(r.next(b))}catch(m){u(m)}}function p(b){try{A(r.throw(b))}catch(m){u(m)}}function A(b){b.done?l(b.value):c(b.value).then(F,p)}A((r=r.apply(t,[])).next())})}function Jk(t,a){var i={label:0,sent:function(){if(l[0]&1)throw l[1];return l[1]},trys:[],ops:[]},r,c,l,u;return u={next:F(0),throw:F(1),return:F(2)},typeof Symbol=="function"&&(u[Symbol.iterator]=function(){return this}),u;function F(A){return function(b){return p([A,b])}}function p(A){if(r)throw new TypeError("Generator is already executing.");for(;u&&(u=0,A[0]&&(i=0)),i;)try{if(r=1,c&&(l=A[0]&2?c.return:A[0]?c.throw||((l=c.return)&&l.call(c),0):c.next)&&!(l=l.call(c,A[1])).done)return l;switch(c=0,l&&(A=[A[0]&2,l.value]),A[0]){case 0:case 1:l=A;break;case 4:return i.label++,{value:A[1],done:!1};case 5:i.label++,c=A[1],A=[0];continue;case 7:A=i.ops.pop(),i.trys.pop();continue;default:if(l=i.trys,!(l=l.length>0&&l[l.length-1])&&(A[0]===6||A[0]===2)){i=0;continue}if(A[0]===3&&(!l||A[1]>l[0]&&A[1]<l[3])){i.label=A[1];break}if(A[0]===6&&i.label<l[1]){i.label=l[1],l=A;break}if(l&&i.label<l[2]){i.label=l[2],i.ops.push(A);break}l[2]&&i.ops.pop(),i.trys.pop();continue}A=a.call(t,i)}catch(b){A=[6,b],c=0}finally{r=l=0}if(A[0]&5)throw A[1];return{value:A[0]?A[1]:void 0,done:!0}}}function N2(t){var a=typeof Symbol=="function"&&Symbol.iterator,i=a&&t[a],r=0;if(i)return i.call(t);if(t&&typeof t.length=="number")return{next:function(){return t&&r>=t.length&&(t=void 0),{value:t&&t[r++],done:!t}}};throw new TypeError(a?"Object is not iterable.":"Symbol.iterator is not defined.")}function f0(t,a){var i=typeof Symbol=="function"&&t[Symbol.iterator];if(!i)return t;var r=i.call(t),c,l=[],u;try{for(;(a===void 0||a-- >0)&&!(c=r.next()).done;)l.push(c.value)}catch(F){u={error:F}}finally{try{c&&!c.done&&(i=r.return)&&i.call(r)}finally{if(u)throw u.error}}return l}var $k="ENTRIES",Jg="KEYS",$g="VALUES",P0="",Fh=function(){function t(a,i){var r=a._tree,c=Array.from(r.keys());this.set=a,this._type=i,this._path=c.length>0?[{node:r,keys:c}]:[]}return t.prototype.next=function(){var a=this.dive();return this.backtrack(),a},t.prototype.dive=function(){if(this._path.length===0)return{done:!0,value:void 0};var a=wa(this._path),i=a.node,r=a.keys;if(wa(r)===P0)return{done:!1,value:this.result()};var c=i.get(wa(r));return this._path.push({node:c,keys:Array.from(c.keys())}),this.dive()},t.prototype.backtrack=function(){if(this._path.length!==0){var a=wa(this._path).keys;a.pop(),!(a.length>0)&&(this._path.pop(),this.backtrack())}},t.prototype.key=function(){return this.set._prefix+this._path.map(function(a){var i=a.keys;return wa(i)}).filter(function(a){return a!==P0}).join("")},t.prototype.value=function(){return wa(this._path).node.get(P0)},t.prototype.result=function(){switch(this._type){case $g:return this.value();case Jg:return this.key();default:return[this.key(),this.value()]}},t.prototype[Symbol.iterator]=function(){return this},t}(),wa=function(t){return t[t.length-1]},Qk=function(t,a,i){var r=new Map;if(a===void 0)return r;for(var c=a.length+1,l=c+i,u=new Uint8Array(l*c).fill(i+1),F=0;F<c;++F)u[F]=F;for(var p=1;p<l;++p)u[p*c]=p;return Qg(t,a,i,r,u,1,c,""),r},Qg=function(t,a,i,r,c,l,u,F){var p,A,b=l*u;try{e:for(var m=N2(t.keys()),y=m.next();!y.done;y=m.next()){var C=y.value;if(C===P0){var B=c[b-1];B<=i&&r.set(F,[t.get(C),B])}else{for(var v=l,D=0;D<C.length;++D,++v){for(var w=C[D],x=u*v,_=x-u,R=c[x],P=Math.max(0,v-i-1),S=Math.min(u-1,v+i),N=P;N<S;++N){var O=w!==a[N],U=c[_+N]+ +O,n2=c[_+N+1]+1,u2=c[x+N]+1,s2=c[x+N+1]=Math.min(U,n2,u2);s2<R&&(R=s2)}if(R>i)continue e}Qg(t.get(C),a,i,r,c,v,u,F+C)}}}catch(c2){p={error:c2}}finally{try{y&&!y.done&&(A=m.return)&&A.call(m)}finally{if(p)throw p.error}}},dh=function(){function t(a,i){a===void 0&&(a=new Map),i===void 0&&(i=""),this._size=void 0,this._tree=a,this._prefix=i}return t.prototype.atPrefix=function(a){var i,r;if(!a.startsWith(this._prefix))throw new Error("Mismatched prefix");var c=f0(cs(this._tree,a.slice(this._prefix.length)),2),l=c[0],u=c[1];if(l===void 0){var F=f0(Tu(u),2),p=F[0],A=F[1];try{for(var b=N2(p.keys()),m=b.next();!m.done;m=b.next()){var y=m.value;if(y!==P0&&y.startsWith(A)){var C=new Map;return C.set(y.slice(A.length),p.get(y)),new t(C,a)}}}catch(B){i={error:B}}finally{try{m&&!m.done&&(r=b.return)&&r.call(b)}finally{if(i)throw i.error}}}return new t(l,a)},t.prototype.clear=function(){this._size=void 0,this._tree.clear()},t.prototype.delete=function(a){return this._size=void 0,eD(this._tree,a)},t.prototype.entries=function(){return new Fh(this,$k)},t.prototype.forEach=function(a){var i,r;try{for(var c=N2(this),l=c.next();!l.done;l=c.next()){var u=f0(l.value,2),F=u[0],p=u[1];a(F,p,this)}}catch(A){i={error:A}}finally{try{l&&!l.done&&(r=c.return)&&r.call(c)}finally{if(i)throw i.error}}},t.prototype.fuzzyGet=function(a,i){return Qk(this._tree,a,i)},t.prototype.get=function(a){var i=Uh(this._tree,a);return i!==void 0?i.get(P0):void 0},t.prototype.has=function(a){var i=Uh(this._tree,a);return i!==void 0&&i.has(P0)},t.prototype.keys=function(){return new Fh(this,Jg)},t.prototype.set=function(a,i){if(typeof a!="string")throw new Error("key must be a string");this._size=void 0;var r=Ah(this._tree,a);return r.set(P0,i),this},Object.defineProperty(t.prototype,"size",{get:function(){if(this._size)return this._size;this._size=0;for(var a=this.entries();!a.next().done;)this._size+=1;return this._size},enumerable:!1,configurable:!0}),t.prototype.update=function(a,i){if(typeof a!="string")throw new Error("key must be a string");this._size=void 0;var r=Ah(this._tree,a);return r.set(P0,i(r.get(P0))),this},t.prototype.fetch=function(a,i){if(typeof a!="string")throw new Error("key must be a string");this._size=void 0;var r=Ah(this._tree,a),c=r.get(P0);return c===void 0&&r.set(P0,c=i()),c},t.prototype.values=function(){return new Fh(this,$g)},t.prototype[Symbol.iterator]=function(){return this.entries()},t.from=function(a){var i,r,c=new t;try{for(var l=N2(a),u=l.next();!u.done;u=l.next()){var F=f0(u.value,2),p=F[0],A=F[1];c.set(p,A)}}catch(b){i={error:b}}finally{try{u&&!u.done&&(r=l.return)&&r.call(l)}finally{if(i)throw i.error}}return c},t.fromObject=function(a){return t.from(Object.entries(a))},t}(),cs=function(t,a,i){var r,c;if(i===void 0&&(i=[]),a.length===0||t==null)return[t,i];try{for(var l=N2(t.keys()),u=l.next();!u.done;u=l.next()){var F=u.value;if(F!==P0&&a.startsWith(F))return i.push([t,F]),cs(t.get(F),a.slice(F.length),i)}}catch(p){r={error:p}}finally{try{u&&!u.done&&(c=l.return)&&c.call(l)}finally{if(r)throw r.error}}return i.push([t,a]),cs(void 0,"",i)},Uh=function(t,a){var i,r;if(a.length===0||t==null)return t;try{for(var c=N2(t.keys()),l=c.next();!l.done;l=c.next()){var u=l.value;if(u!==P0&&a.startsWith(u))return Uh(t.get(u),a.slice(u.length))}}catch(F){i={error:F}}finally{try{l&&!l.done&&(r=c.return)&&r.call(c)}finally{if(i)throw i.error}}},Ah=function(t,a){var i,r,c=a.length;e:for(var l=0;t&&l<c;){try{for(var u=(i=void 0,N2(t.keys())),F=u.next();!F.done;F=u.next()){var p=F.value;if(p!==P0&&a[l]===p[0]){for(var A=Math.min(c-l,p.length),b=1;b<A&&a[l+b]===p[b];)++b;var m=t.get(p);if(b===p.length)t=m;else{var y=new Map;y.set(p.slice(b),m),t.set(a.slice(l,l+b),y),t.delete(p),t=y}l+=b;continue e}}}catch(B){i={error:B}}finally{try{F&&!F.done&&(r=u.return)&&r.call(u)}finally{if(i)throw i.error}}var C=new Map;return t.set(a.slice(l),C),C}return t},eD=function(t,a){var i=f0(cs(t,a),2),r=i[0],c=i[1];if(r!==void 0){if(r.delete(P0),r.size===0)eb(c);else if(r.size===1){var l=f0(r.entries().next().value,2),u=l[0],F=l[1];tb(c,u,F)}}},eb=function(t){if(t.length!==0){var a=f0(Tu(t),2),i=a[0],r=a[1];if(i.delete(r),i.size===0)eb(t.slice(0,-1));else if(i.size===1){var c=f0(i.entries().next().value,2),l=c[0],u=c[1];l!==P0&&tb(t.slice(0,-1),l,u)}}},tb=function(t,a,i){if(t.length!==0){var r=f0(Tu(t),2),c=r[0],l=r[1];c.set(l+a,i),c.delete(l)}},Tu=function(t){return t[t.length-1]},Kn,Pu="or",ob="and",tD="and_not",oD=function(){function t(a){if((a==null?void 0:a.fields)==null)throw new Error('MiniSearch: option "fields" must be provided');var i=a.autoVacuum==null||a.autoVacuum===!0?gh:a.autoVacuum;this._options=o0(o0(o0({},mh),a),{autoVacuum:i,searchOptions:o0(o0({},Um),a.searchOptions||{}),autoSuggestOptions:o0(o0({},sD),a.autoSuggestOptions||{})}),this._index=new dh,this._documentCount=0,this._documentIds=new Map,this._idToShortId=new Map,this._fieldIds={},this._fieldLength=new Map,this._avgFieldLength=[],this._nextId=0,this._storedFields=new Map,this._dirtCount=0,this._currentVacuum=null,this._enqueuedVacuum=null,this._enqueuedVacuumConditions=qh,this.addFields(this._options.fields)}return t.prototype.add=function(a){var i,r,c,l,u,F,p=this._options,A=p.extractField,b=p.tokenize,m=p.processTerm,y=p.fields,C=p.idField,B=A(a,C);if(B==null)throw new Error('MiniSearch: document does not have ID field "'.concat(C,'"'));if(this._idToShortId.has(B))throw new Error("MiniSearch: duplicate ID ".concat(B));var v=this.addDocumentId(B);this.saveStoredFields(v,a);try{for(var D=N2(y),w=D.next();!w.done;w=D.next()){var x=w.value,_=A(a,x);if(_!=null){var R=b(_.toString(),x),P=this._fieldIds[x],S=new Set(R).size;this.addFieldLength(v,P,this._documentCount-1,S);try{for(var N=(c=void 0,N2(R)),O=N.next();!O.done;O=N.next()){var U=O.value,n2=m(U,x);if(Array.isArray(n2))try{for(var u2=(u=void 0,N2(n2)),s2=u2.next();!s2.done;s2=u2.next()){var c2=s2.value;this.addTerm(P,v,c2)}}catch(W){u={error:W}}finally{try{s2&&!s2.done&&(F=u2.return)&&F.call(u2)}finally{if(u)throw u.error}}else n2&&this.addTerm(P,v,n2)}}catch(W){c={error:W}}finally{try{O&&!O.done&&(l=N.return)&&l.call(N)}finally{if(c)throw c.error}}}}}catch(W){i={error:W}}finally{try{w&&!w.done&&(r=D.return)&&r.call(D)}finally{if(i)throw i.error}}},t.prototype.addAll=function(a){var i,r;try{for(var c=N2(a),l=c.next();!l.done;l=c.next()){var u=l.value;this.add(u)}}catch(F){i={error:F}}finally{try{l&&!l.done&&(r=c.return)&&r.call(c)}finally{if(i)throw i.error}}},t.prototype.addAllAsync=function(a,i){var r=this;i===void 0&&(i={});var c=i.chunkSize,l=c===void 0?10:c,u={chunk:[],promise:Promise.resolve()},F=a.reduce(function(b,m,y){var C=b.chunk,B=b.promise;return C.push(m),(y+1)%l===0?{chunk:[],promise:B.then(function(){return new Promise(function(v){return setTimeout(v,0)})}).then(function(){return r.addAll(C)})}:{chunk:C,promise:B}},u),p=F.chunk,A=F.promise;return A.then(function(){return r.addAll(p)})},t.prototype.remove=function(a){var i,r,c,l,u,F,p=this._options,A=p.tokenize,b=p.processTerm,m=p.extractField,y=p.fields,C=p.idField,B=m(a,C);if(B==null)throw new Error('MiniSearch: document does not have ID field "'.concat(C,'"'));var v=this._idToShortId.get(B);if(v==null)throw new Error("MiniSearch: cannot remove document with ID ".concat(B,": it is not in the index"));try{for(var D=N2(y),w=D.next();!w.done;w=D.next()){var x=w.value,_=m(a,x);if(_!=null){var R=A(_.toString(),x),P=this._fieldIds[x],S=new Set(R).size;this.removeFieldLength(v,P,this._documentCount,S);try{for(var N=(c=void 0,N2(R)),O=N.next();!O.done;O=N.next()){var U=O.value,n2=b(U,x);if(Array.isArray(n2))try{for(var u2=(u=void 0,N2(n2)),s2=u2.next();!s2.done;s2=u2.next()){var c2=s2.value;this.removeTerm(P,v,c2)}}catch(W){u={error:W}}finally{try{s2&&!s2.done&&(F=u2.return)&&F.call(u2)}finally{if(u)throw u.error}}else n2&&this.removeTerm(P,v,n2)}}catch(W){c={error:W}}finally{try{O&&!O.done&&(l=N.return)&&l.call(N)}finally{if(c)throw c.error}}}}}catch(W){i={error:W}}finally{try{w&&!w.done&&(r=D.return)&&r.call(D)}finally{if(i)throw i.error}}this._storedFields.delete(v),this._documentIds.delete(v),this._idToShortId.delete(B),this._fieldLength.delete(v),this._documentCount-=1},t.prototype.removeAll=function(a){var i,r;if(a)try{for(var c=N2(a),l=c.next();!l.done;l=c.next()){var u=l.value;this.remove(u)}}catch(F){i={error:F}}finally{try{l&&!l.done&&(r=c.return)&&r.call(c)}finally{if(i)throw i.error}}else{if(arguments.length>0)throw new Error("Expected documents to be present. Omit the argument to remove all documents.");this._index=new dh,this._documentCount=0,this._documentIds=new Map,this._idToShortId=new Map,this._fieldLength=new Map,this._avgFieldLength=[],this._storedFields=new Map,this._nextId=0}},t.prototype.discard=function(a){var i=this,r=this._idToShortId.get(a);if(r==null)throw new Error("MiniSearch: cannot discard document with ID ".concat(a,": it is not in the index"));this._idToShortId.delete(a),this._documentIds.delete(r),this._storedFields.delete(r),(this._fieldLength.get(r)||[]).forEach(function(c,l){i.removeFieldLength(r,l,i._documentCount,c)}),this._fieldLength.delete(r),this._documentCount-=1,this._dirtCount+=1,this.maybeAutoVacuum()},t.prototype.maybeAutoVacuum=function(){if(this._options.autoVacuum!==!1){var a=this._options.autoVacuum,i=a.minDirtFactor,r=a.minDirtCount,c=a.batchSize,l=a.batchWait;this.conditionalVacuum({batchSize:c,batchWait:l},{minDirtCount:r,minDirtFactor:i})}},t.prototype.discardAll=function(a){var i,r,c=this._options.autoVacuum;try{this._options.autoVacuum=!1;try{for(var l=N2(a),u=l.next();!u.done;u=l.next()){var F=u.value;this.discard(F)}}catch(p){i={error:p}}finally{try{u&&!u.done&&(r=l.return)&&r.call(l)}finally{if(i)throw i.error}}}finally{this._options.autoVacuum=c}this.maybeAutoVacuum()},t.prototype.replace=function(a){var i=this._options,r=i.idField,c=i.extractField,l=c(a,r);this.discard(l),this.add(a)},t.prototype.vacuum=function(a){return a===void 0&&(a={}),this.conditionalVacuum(a)},t.prototype.conditionalVacuum=function(a,i){var r=this;return this._currentVacuum?(this._enqueuedVacuumConditions=this._enqueuedVacuumConditions&&i,this._enqueuedVacuum!=null?this._enqueuedVacuum:(this._enqueuedVacuum=this._currentVacuum.then(function(){var c=r._enqueuedVacuumConditions;return r._enqueuedVacuumConditions=qh,r.performVacuuming(a,c)}),this._enqueuedVacuum)):this.vacuumConditionsMet(i)===!1?Promise.resolve():(this._currentVacuum=this.performVacuuming(a),this._currentVacuum)},t.prototype.performVacuuming=function(a,i){return Xk(this,void 0,void 0,function(){var r,c,l,u,F,p,A,b,m,y,C,B,v,D,w,x,_,R,P,S,N,O,U,n2,u2;return Jk(this,function(s2){switch(s2.label){case 0:if(r=this._dirtCount,!this.vacuumConditionsMet(i))return[3,10];c=a.batchSize||Gh.batchSize,l=a.batchWait||Gh.batchWait,u=1,s2.label=1;case 1:s2.trys.push([1,7,8,9]),F=N2(this._index),p=F.next(),s2.label=2;case 2:if(p.done)return[3,6];A=f0(p.value,2),b=A[0],m=A[1];try{for(y=(O=void 0,N2(m)),C=y.next();!C.done;C=y.next()){B=f0(C.value,2),v=B[0],D=B[1];try{for(w=(n2=void 0,N2(D)),x=w.next();!x.done;x=w.next())_=f0(x.value,1),R=_[0],!this._documentIds.has(R)&&(D.size<=1?m.delete(v):D.delete(R))}catch(c2){n2={error:c2}}finally{try{x&&!x.done&&(u2=w.return)&&u2.call(w)}finally{if(n2)throw n2.error}}}}catch(c2){O={error:c2}}finally{try{C&&!C.done&&(U=y.return)&&U.call(y)}finally{if(O)throw O.error}}return this._index.get(b).size===0&&this._index.delete(b),u%c!==0?[3,4]:[4,new Promise(function(c2){return setTimeout(c2,l)})];case 3:s2.sent(),s2.label=4;case 4:u+=1,s2.label=5;case 5:return p=F.next(),[3,2];case 6:return[3,9];case 7:return P=s2.sent(),S={error:P},[3,9];case 8:try{p&&!p.done&&(N=F.return)&&N.call(F)}finally{if(S)throw S.error}return[7];case 9:this._dirtCount-=r,s2.label=10;case 10:return[4,null];case 11:return s2.sent(),this._currentVacuum=this._enqueuedVacuum,this._enqueuedVacuum=null,[2]}})})},t.prototype.vacuumConditionsMet=function(a){if(a==null)return!0;var i=a.minDirtCount,r=a.minDirtFactor;return i=i||gh.minDirtCount,r=r||gh.minDirtFactor,this.dirtCount>=i&&this.dirtFactor>=r},Object.defineProperty(t.prototype,"isVacuuming",{get:function(){return this._currentVacuum!=null},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"dirtCount",{get:function(){return this._dirtCount},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"dirtFactor",{get:function(){return this._dirtCount/(1+this._documentCount+this._dirtCount)},enumerable:!1,configurable:!0}),t.prototype.has=function(a){return this._idToShortId.has(a)},t.prototype.getStoredFields=function(a){var i=this._idToShortId.get(a);if(i!=null)return this._storedFields.get(i)},t.prototype.search=function(a,i){var r,c;i===void 0&&(i={});var l=this.executeQuery(a,i),u=[];try{for(var F=N2(l),p=F.next();!p.done;p=F.next()){var A=f0(p.value,2),b=A[0],m=A[1],y=m.score,C=m.terms,B=m.match,v=C.length||1,D={id:this._documentIds.get(b),score:y*v,terms:Object.keys(B),queryTerms:C,match:B};Object.assign(D,this._storedFields.get(b)),(i.filter==null||i.filter(D))&&u.push(D)}}catch(w){r={error:w}}finally{try{p&&!p.done&&(c=F.return)&&c.call(F)}finally{if(r)throw r.error}}return a===t.wildcard&&i.boostDocument==null&&this._options.searchOptions.boostDocument==null||u.sort(qm),u},t.prototype.autoSuggest=function(a,i){var r,c,l,u;i===void 0&&(i={}),i=o0(o0({},this._options.autoSuggestOptions),i);var F=new Map;try{for(var p=N2(this.search(a,i)),A=p.next();!A.done;A=p.next()){var b=A.value,m=b.score,y=b.terms,C=y.join(" "),B=F.get(C);B!=null?(B.score+=m,B.count+=1):F.set(C,{score:m,terms:y,count:1})}}catch(P){r={error:P}}finally{try{A&&!A.done&&(c=p.return)&&c.call(p)}finally{if(r)throw r.error}}var v=[];try{for(var D=N2(F),w=D.next();!w.done;w=D.next()){var x=f0(w.value,2),B=x[0],_=x[1],m=_.score,y=_.terms,R=_.count;v.push({suggestion:B,terms:y,score:m/R})}}catch(P){l={error:P}}finally{try{w&&!w.done&&(u=D.return)&&u.call(D)}finally{if(l)throw l.error}}return v.sort(qm),v},Object.defineProperty(t.prototype,"documentCount",{get:function(){return this._documentCount},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"termCount",{get:function(){return this._index.size},enumerable:!1,configurable:!0}),t.loadJSON=function(a,i){if(i==null)throw new Error("MiniSearch: loadJSON should be given the same options used when serializing the index");return this.loadJS(JSON.parse(a),i)},t.getDefault=function(a){if(mh.hasOwnProperty(a))return ph(mh,a);throw new Error('MiniSearch: unknown option "'.concat(a,'"'))},t.loadJS=function(a,i){var r,c,l,u,F,p,A=a.index,b=a.documentCount,m=a.nextId,y=a.documentIds,C=a.fieldIds,B=a.fieldLength,v=a.averageFieldLength,D=a.storedFields,w=a.dirtCount,x=a.serializationVersion;if(x!==1&&x!==2)throw new Error("MiniSearch: cannot deserialize an index created with an incompatible version");var _=new t(i);_._documentCount=b,_._nextId=m,_._documentIds=Vr(y),_._idToShortId=new Map,_._fieldIds=C,_._fieldLength=Vr(B),_._avgFieldLength=v,_._storedFields=Vr(D),_._dirtCount=w||0,_._index=new dh;try{for(var R=N2(_._documentIds),P=R.next();!P.done;P=R.next()){var S=f0(P.value,2),N=S[0],O=S[1];_._idToShortId.set(O,N)}}catch(Y){r={error:Y}}finally{try{P&&!P.done&&(c=R.return)&&c.call(R)}finally{if(r)throw r.error}}try{for(var U=N2(A),n2=U.next();!n2.done;n2=U.next()){var u2=f0(n2.value,2),s2=u2[0],c2=u2[1],W=new Map;try{for(var F2=(F=void 0,N2(Object.keys(c2))),I=F2.next();!I.done;I=F2.next()){var q=I.value,J=c2[q];x===1&&(J=J.ds),W.set(parseInt(q,10),Vr(J))}}catch(Y){F={error:Y}}finally{try{I&&!I.done&&(p=F2.return)&&p.call(F2)}finally{if(F)throw F.error}}_._index.set(s2,W)}}catch(Y){l={error:Y}}finally{try{n2&&!n2.done&&(u=U.return)&&u.call(U)}finally{if(l)throw l.error}}return _},t.prototype.executeQuery=function(a,i){var r=this;if(i===void 0&&(i={}),a===t.wildcard)return this.executeWildcardQuery(i);if(typeof a!="string"){var c=o0(o0(o0({},i),a),{queries:void 0}),l=a.queries.map(function(D){return r.executeQuery(D,c)});return this.combineResults(l,c.combineWith)}var u=this._options,F=u.tokenize,p=u.processTerm,A=u.searchOptions,b=o0(o0({tokenize:F,processTerm:p},A),i),m=b.tokenize,y=b.processTerm,C=m(a).flatMap(function(D){return y(D)}).filter(function(D){return!!D}),B=C.map(rD(b)),v=B.map(function(D){return r.executeQuerySpec(D,b)});return this.combineResults(v,b.combineWith)},t.prototype.executeQuerySpec=function(a,i){var r,c,l,u,F=o0(o0({},this._options.searchOptions),i),p=(F.fields||this._options.fields).reduce(function(q,J){var Y;return o0(o0({},q),(Y={},Y[J]=ph(F.boost,J)||1,Y))},{}),A=F.boostDocument,b=F.weights,m=F.maxFuzzy,y=F.bm25,C=o0(o0({},Um.weights),b),B=C.fuzzy,v=C.prefix,D=this._index.get(a.term),w=this.termResults(a.term,a.term,1,D,p,A,y),x,_;if(a.prefix&&(x=this._index.atPrefix(a.term)),a.fuzzy){var R=a.fuzzy===!0?.2:a.fuzzy,P=R<1?Math.min(m,Math.round(a.term.length*R)):R;P&&(_=this._index.fuzzyGet(a.term,P))}if(x)try{for(var S=N2(x),N=S.next();!N.done;N=S.next()){var O=f0(N.value,2),U=O[0],n2=O[1],u2=U.length-a.term.length;if(u2){_==null||_.delete(U);var s2=v*U.length/(U.length+.3*u2);this.termResults(a.term,U,s2,n2,p,A,y,w)}}}catch(q){r={error:q}}finally{try{N&&!N.done&&(c=S.return)&&c.call(S)}finally{if(r)throw r.error}}if(_)try{for(var c2=N2(_.keys()),W=c2.next();!W.done;W=c2.next()){var U=W.value,F2=f0(_.get(U),2),I=F2[0],u2=F2[1];if(u2){var s2=B*U.length/(U.length+u2);this.termResults(a.term,U,s2,I,p,A,y,w)}}}catch(q){l={error:q}}finally{try{W&&!W.done&&(u=c2.return)&&u.call(c2)}finally{if(l)throw l.error}}return w},t.prototype.executeWildcardQuery=function(a){var i,r,c=new Map,l=o0(o0({},this._options.searchOptions),a);try{for(var u=N2(this._documentIds),F=u.next();!F.done;F=u.next()){var p=f0(F.value,2),A=p[0],b=p[1],m=l.boostDocument?l.boostDocument(b,"",this._storedFields.get(A)):1;c.set(A,{score:m,terms:[],match:{}})}}catch(y){i={error:y}}finally{try{F&&!F.done&&(r=u.return)&&r.call(u)}finally{if(i)throw i.error}}return c},t.prototype.combineResults=function(a,i){if(i===void 0&&(i=Pu),a.length===0)return new Map;var r=i.toLowerCase();return a.reduce(aD[r])||new Map},t.prototype.toJSON=function(){var a,i,r,c,l=[];try{for(var u=N2(this._index),F=u.next();!F.done;F=u.next()){var p=f0(F.value,2),A=p[0],b=p[1],m={};try{for(var y=(r=void 0,N2(b)),C=y.next();!C.done;C=y.next()){var B=f0(C.value,2),v=B[0],D=B[1];m[v]=Object.fromEntries(D)}}catch(w){r={error:w}}finally{try{C&&!C.done&&(c=y.return)&&c.call(y)}finally{if(r)throw r.error}}l.push([A,m])}}catch(w){a={error:w}}finally{try{F&&!F.done&&(i=u.return)&&i.call(u)}finally{if(a)throw a.error}}return{documentCount:this._documentCount,nextId:this._nextId,documentIds:Object.fromEntries(this._documentIds),fieldIds:this._fieldIds,fieldLength:Object.fromEntries(this._fieldLength),averageFieldLength:this._avgFieldLength,storedFields:Object.fromEntries(this._storedFields),dirtCount:this._dirtCount,index:l,serializationVersion:2}},t.prototype.termResults=function(a,i,r,c,l,u,F,p){var A,b,m,y,C;if(p===void 0&&(p=new Map),c==null)return p;try{for(var B=N2(Object.keys(l)),v=B.next();!v.done;v=B.next()){var D=v.value,w=l[D],x=this._fieldIds[D],_=c.get(x);if(_!=null){var R=_.size,P=this._avgFieldLength[x];try{for(var S=(m=void 0,N2(_.keys())),N=S.next();!N.done;N=S.next()){var O=N.value;if(!this._documentIds.has(O)){this.removeTerm(x,O,i),R-=1;continue}var U=u?u(this._documentIds.get(O),i,this._storedFields.get(O)):1;if(U){var n2=_.get(O),u2=this._fieldLength.get(O)[x],s2=iD(n2,R,this._documentCount,u2,P,F),c2=r*w*U*s2,W=p.get(O);if(W){W.score+=c2,cD(W.terms,a);var F2=ph(W.match,i);F2?F2.push(D):W.match[i]=[D]}else p.set(O,{score:c2,terms:[a],match:(C={},C[i]=[D],C)})}}}catch(I){m={error:I}}finally{try{N&&!N.done&&(y=S.return)&&y.call(S)}finally{if(m)throw m.error}}}}}catch(I){A={error:I}}finally{try{v&&!v.done&&(b=B.return)&&b.call(B)}finally{if(A)throw A.error}}return p},t.prototype.addTerm=function(a,i,r){var c=this._index.fetch(r,Wm),l=c.get(a);if(l==null)l=new Map,l.set(i,1),c.set(a,l);else{var u=l.get(i);l.set(i,(u||0)+1)}},t.prototype.removeTerm=function(a,i,r){if(!this._index.has(r)){this.warnDocumentChanged(i,a,r);return}var c=this._index.fetch(r,Wm),l=c.get(a);l==null||l.get(i)==null?this.warnDocumentChanged(i,a,r):l.get(i)<=1?l.size<=1?c.delete(a):l.delete(i):l.set(i,l.get(i)-1),this._index.get(r).size===0&&this._index.delete(r)},t.prototype.warnDocumentChanged=function(a,i,r){var c,l;try{for(var u=N2(Object.keys(this._fieldIds)),F=u.next();!F.done;F=u.next()){var p=F.value;if(this._fieldIds[p]===i){this._options.logger("warn","MiniSearch: document with ID ".concat(this._documentIds.get(a),' has changed before removal: term "').concat(r,'" was not present in field "').concat(p,'". Removing a document after it has changed can corrupt the index!'),"version_conflict");return}}}catch(A){c={error:A}}finally{try{F&&!F.done&&(l=u.return)&&l.call(u)}finally{if(c)throw c.error}}},t.prototype.addDocumentId=function(a){var i=this._nextId;return this._idToShortId.set(a,i),this._documentIds.set(i,a),this._documentCount+=1,this._nextId+=1,i},t.prototype.addFields=function(a){for(var i=0;i<a.length;i++)this._fieldIds[a[i]]=i},t.prototype.addFieldLength=function(a,i,r,c){var l=this._fieldLength.get(a);l==null&&this._fieldLength.set(a,l=[]),l[i]=c;var u=this._avgFieldLength[i]||0,F=u*r+c;this._avgFieldLength[i]=F/(r+1)},t.prototype.removeFieldLength=function(a,i,r,c){if(r===1){this._avgFieldLength[i]=0;return}var l=this._avgFieldLength[i]*r-c;this._avgFieldLength[i]=l/(r-1)},t.prototype.saveStoredFields=function(a,i){var r,c,l=this._options,u=l.storeFields,F=l.extractField;if(!(u==null||u.length===0)){var p=this._storedFields.get(a);p==null&&this._storedFields.set(a,p={});try{for(var A=N2(u),b=A.next();!b.done;b=A.next()){var m=b.value,y=F(i,m);y!==void 0&&(p[m]=y)}}catch(C){r={error:C}}finally{try{b&&!b.done&&(c=A.return)&&c.call(A)}finally{if(r)throw r.error}}}},t.wildcard=Symbol("*"),t}(),ph=function(t,a){return Object.prototype.hasOwnProperty.call(t,a)?t[a]:void 0},aD=(Kn={},Kn[Pu]=function(t,a){var i,r;try{for(var c=N2(a.keys()),l=c.next();!l.done;l=c.next()){var u=l.value,F=t.get(u);if(F==null)t.set(u,a.get(u));else{var p=a.get(u),A=p.score,b=p.terms,m=p.match;F.score=F.score+A,F.match=Object.assign(F.match,m),Gm(F.terms,b)}}}catch(y){i={error:y}}finally{try{l&&!l.done&&(r=c.return)&&r.call(c)}finally{if(i)throw i.error}}return t},Kn[ob]=function(t,a){var i,r,c=new Map;try{for(var l=N2(a.keys()),u=l.next();!u.done;u=l.next()){var F=u.value,p=t.get(F);if(p!=null){var A=a.get(F),b=A.score,m=A.terms,y=A.match;Gm(p.terms,m),c.set(F,{score:p.score+b,terms:p.terms,match:Object.assign(p.match,y)})}}}catch(C){i={error:C}}finally{try{u&&!u.done&&(r=l.return)&&r.call(l)}finally{if(i)throw i.error}}return c},Kn[tD]=function(t,a){var i,r;try{for(var c=N2(a.keys()),l=c.next();!l.done;l=c.next()){var u=l.value;t.delete(u)}}catch(F){i={error:F}}finally{try{l&&!l.done&&(r=c.return)&&r.call(c)}finally{if(i)throw i.error}}return t},Kn),nD={k:1.2,b:.7,d:.5},iD=function(t,a,i,r,c,l){var u=l.k,F=l.b,p=l.d,A=Math.log(1+(i-a+.5)/(a+.5));return A*(p+t*(u+1)/(t+u*(1-F+F*r/c)))},rD=function(t){return function(a,i,r){var c=typeof t.fuzzy=="function"?t.fuzzy(a,i,r):t.fuzzy||!1,l=typeof t.prefix=="function"?t.prefix(a,i,r):t.prefix===!0;return{term:a,fuzzy:c,prefix:l}}},mh={idField:"id",extractField:function(t,a){return t[a]},tokenize:function(t){return t.split(lD)},processTerm:function(t){return t.toLowerCase()},fields:void 0,searchOptions:void 0,storeFields:[],logger:function(t,a){typeof(console==null?void 0:console[t])=="function"&&console[t](a)},autoVacuum:!0},Um={combineWith:Pu,prefix:!1,fuzzy:!1,maxFuzzy:6,boost:{},weights:{fuzzy:.45,prefix:.375},bm25:nD},sD={combineWith:ob,prefix:function(t,a,i){return a===i.length-1}},Gh={batchSize:1e3,batchWait:10},qh={minDirtFactor:.1,minDirtCount:20},gh=o0(o0({},Gh),qh),cD=function(t,a){t.includes(a)||t.push(a)},Gm=function(t,a){var i,r;try{for(var c=N2(a),l=c.next();!l.done;l=c.next()){var u=l.value;t.includes(u)||t.push(u)}}catch(F){i={error:F}}finally{try{l&&!l.done&&(r=c.return)&&r.call(c)}finally{if(i)throw i.error}}},qm=function(t,a){var i=t.score,r=a.score;return r-i},Wm=function(){return new Map},Vr=function(t){var a,i,r=new Map;try{for(var c=N2(Object.keys(t)),l=c.next();!l.done;l=c.next()){var u=l.value;r.set(parseInt(u,10),t[u])}}catch(F){a={error:F}}finally{try{l&&!l.done&&(i=c.return)&&i.call(c)}finally{if(a)throw a.error}}return r},lD=/[\n\r -#%-*,-/:;?@[-\]_{}\u00A0\u00A1\u00A7\u00AB\u00B6\u00B7\u00BB\u00BF\u037E\u0387\u055A-\u055F\u0589\u058A\u05BE\u05C0\u05C3\u05C6\u05F3\u05F4\u0609\u060A\u060C\u060D\u061B\u061E\u061F\u066A-\u066D\u06D4\u0700-\u070D\u07F7-\u07F9\u0830-\u083E\u085E\u0964\u0965\u0970\u09FD\u0A76\u0AF0\u0C77\u0C84\u0DF4\u0E4F\u0E5A\u0E5B\u0F04-\u0F12\u0F14\u0F3A-\u0F3D\u0F85\u0FD0-\u0FD4\u0FD9\u0FDA\u104A-\u104F\u10FB\u1360-\u1368\u1400\u166E\u1680\u169B\u169C\u16EB-\u16ED\u1735\u1736\u17D4-\u17D6\u17D8-\u17DA\u1800-\u180A\u1944\u1945\u1A1E\u1A1F\u1AA0-\u1AA6\u1AA8-\u1AAD\u1B5A-\u1B60\u1BFC-\u1BFF\u1C3B-\u1C3F\u1C7E\u1C7F\u1CC0-\u1CC7\u1CD3\u2000-\u200A\u2010-\u2029\u202F-\u2043\u2045-\u2051\u2053-\u205F\u207D\u207E\u208D\u208E\u2308-\u230B\u2329\u232A\u2768-\u2775\u27C5\u27C6\u27E6-\u27EF\u2983-\u2998\u29D8-\u29DB\u29FC\u29FD\u2CF9-\u2CFC\u2CFE\u2CFF\u2D70\u2E00-\u2E2E\u2E30-\u2E4F\u3000-\u3003\u3008-\u3011\u3014-\u301F\u3030\u303D\u30A0\u30FB\uA4FE\uA4FF\uA60D-\uA60F\uA673\uA67E\uA6F2-\uA6F7\uA874-\uA877\uA8CE\uA8CF\uA8F8-\uA8FA\uA8FC\uA92E\uA92F\uA95F\uA9C1-\uA9CD\uA9DE\uA9DF\uAA5C-\uAA5F\uAADE\uAADF\uAAF0\uAAF1\uABEB\uFD3E\uFD3F\uFE10-\uFE19\uFE30-\uFE52\uFE54-\uFE61\uFE63\uFE68\uFE6A\uFE6B\uFF01-\uFF03\uFF05-\uFF0A\uFF0C-\uFF0F\uFF1A\uFF1B\uFF1F\uFF20\uFF3B-\uFF3D\uFF3F\uFF5B\uFF5D\uFF5F-\uFF65]+/u;let bh;function ab(){const[t,a]=f.useState();return f.useEffect(()=>{(async()=>{bh||(bh=Yk());const i=await bh,r=oD.loadJSON(i,{fields:["title","titles","text"],searchOptions:{boost:{title:4,text:2,titles:1},fuzzy:.2,prefix:!0},storeFields:["href","html","isPage","text","title","titles"]});a(r)})()},[]),f.useEffect(()=>{},[]),t}var hD="vocs_DesktopSearch_search",uD="vocs_DesktopSearch_searchCommand",FD="Label",nb=f.forwardRef((t,a)=>g.jsx(R2.label,{...t,ref:a,onMouseDown:i=>{var c;i.target.closest("button, input, select, textarea")||((c=t.onMouseDown)==null||c.call(t,i),!i.defaultPrevented&&i.detail>1&&i.preventDefault())}}));nb.displayName=FD;var dD=nb,ts={exports:{}};/*!***************************************************
* mark.js v8.11.1
* https://markjs.io/
* Copyright (c) 2014–2018, Julian Kühnel
* Released under the MIT license https://git.io/vwTVl
*****************************************************/var AD=ts.exports,Km;function pD(){return Km||(Km=1,function(t,a){(function(i,r){t.exports=r()})(AD,function(){var i=typeof Symbol=="function"&&typeof Symbol.iterator=="symbol"?function(A){return typeof A}:function(A){return A&&typeof Symbol=="function"&&A.constructor===Symbol&&A!==Symbol.prototype?"symbol":typeof A},r=function(A,b){if(!(A instanceof b))throw new TypeError("Cannot call a class as a function")},c=function(){function A(b,m){for(var y=0;y<m.length;y++){var C=m[y];C.enumerable=C.enumerable||!1,C.configurable=!0,"value"in C&&(C.writable=!0),Object.defineProperty(b,C.key,C)}}return function(b,m,y){return m&&A(b.prototype,m),y&&A(b,y),b}}(),l=Object.assign||function(A){for(var b=1;b<arguments.length;b++){var m=arguments[b];for(var y in m)Object.prototype.hasOwnProperty.call(m,y)&&(A[y]=m[y])}return A},u=function(){function A(b){var m=arguments.length>1&&arguments[1]!==void 0?arguments[1]:!0,y=arguments.length>2&&arguments[2]!==void 0?arguments[2]:[],C=arguments.length>3&&arguments[3]!==void 0?arguments[3]:5e3;r(this,A),this.ctx=b,this.iframes=m,this.exclude=y,this.iframesTimeout=C}return c(A,[{key:"getContexts",value:function(){var m=void 0,y=[];return typeof this.ctx>"u"||!this.ctx?m=[]:NodeList.prototype.isPrototypeOf(this.ctx)?m=Array.prototype.slice.call(this.ctx):Array.isArray(this.ctx)?m=this.ctx:typeof this.ctx=="string"?m=Array.prototype.slice.call(document.querySelectorAll(this.ctx)):m=[this.ctx],m.forEach(function(C){var B=y.filter(function(v){return v.contains(C)}).length>0;y.indexOf(C)===-1&&!B&&y.push(C)}),y}},{key:"getIframeContents",value:function(m,y){var C=arguments.length>2&&arguments[2]!==void 0?arguments[2]:function(){},B=void 0;try{var v=m.contentWindow;if(B=v.document,!v||!B)throw new Error("iframe inaccessible")}catch{C()}B&&y(B)}},{key:"isIframeBlank",value:function(m){var y="about:blank",C=m.getAttribute("src").trim(),B=m.contentWindow.location.href;return B===y&&C!==y&&C}},{key:"observeIframeLoad",value:function(m,y,C){var B=this,v=!1,D=null,w=function x(){if(!v){v=!0,clearTimeout(D);try{B.isIframeBlank(m)||(m.removeEventListener("load",x),B.getIframeContents(m,y,C))}catch{C()}}};m.addEventListener("load",w),D=setTimeout(w,this.iframesTimeout)}},{key:"onIframeReady",value:function(m,y,C){try{m.contentWindow.document.readyState==="complete"?this.isIframeBlank(m)?this.observeIframeLoad(m,y,C):this.getIframeContents(m,y,C):this.observeIframeLoad(m,y,C)}catch{C()}}},{key:"waitForIframes",value:function(m,y){var C=this,B=0;this.forEachIframe(m,function(){return!0},function(v){B++,C.waitForIframes(v.querySelector("html"),function(){--B||y()})},function(v){v||y()})}},{key:"forEachIframe",value:function(m,y,C){var B=this,v=arguments.length>3&&arguments[3]!==void 0?arguments[3]:function(){},D=m.querySelectorAll("iframe"),w=D.length,x=0;D=Array.prototype.slice.call(D);var _=function(){--w<=0&&v(x)};w||_(),D.forEach(function(R){A.matches(R,B.exclude)?_():B.onIframeReady(R,function(P){y(R)&&(x++,C(P)),_()},_)})}},{key:"createIterator",value:function(m,y,C){return document.createNodeIterator(m,y,C,!1)}},{key:"createInstanceOnIframe",value:function(m){return new A(m.querySelector("html"),this.iframes)}},{key:"compareNodeIframe",value:function(m,y,C){var B=m.compareDocumentPosition(C),v=Node.DOCUMENT_POSITION_PRECEDING;if(B&v)if(y!==null){var D=y.compareDocumentPosition(C),w=Node.DOCUMENT_POSITION_FOLLOWING;if(D&w)return!0}else return!0;return!1}},{key:"getIteratorNode",value:function(m){var y=m.previousNode(),C=void 0;return y===null?C=m.nextNode():C=m.nextNode()&&m.nextNode(),{prevNode:y,node:C}}},{key:"checkIframeFilter",value:function(m,y,C,B){var v=!1,D=!1;return B.forEach(function(w,x){w.val===C&&(v=x,D=w.handled)}),this.compareNodeIframe(m,y,C)?(v===!1&&!D?B.push({val:C,handled:!0}):v!==!1&&!D&&(B[v].handled=!0),!0):(v===!1&&B.push({val:C,handled:!1}),!1)}},{key:"handleOpenIframes",value:function(m,y,C,B){var v=this;m.forEach(function(D){D.handled||v.getIframeContents(D.val,function(w){v.createInstanceOnIframe(w).forEachNode(y,C,B)})})}},{key:"iterateThroughNodes",value:function(m,y,C,B,v){for(var D=this,w=this.createIterator(y,m,B),x=[],_=[],R=void 0,P=void 0,S=function(){var O=D.getIteratorNode(w);return P=O.prevNode,R=O.node,R};S();)this.iframes&&this.forEachIframe(y,function(N){return D.checkIframeFilter(R,P,N,x)},function(N){D.createInstanceOnIframe(N).forEachNode(m,function(O){return _.push(O)},B)}),_.push(R);_.forEach(function(N){C(N)}),this.iframes&&this.handleOpenIframes(x,m,C,B),v()}},{key:"forEachNode",value:function(m,y,C){var B=this,v=arguments.length>3&&arguments[3]!==void 0?arguments[3]:function(){},D=this.getContexts(),w=D.length;w||v(),D.forEach(function(x){var _=function(){B.iterateThroughNodes(m,x,y,C,function(){--w<=0&&v()})};B.iframes?B.waitForIframes(x,_):_()})}}],[{key:"matches",value:function(m,y){var C=typeof y=="string"?[y]:y,B=m.matches||m.matchesSelector||m.msMatchesSelector||m.mozMatchesSelector||m.oMatchesSelector||m.webkitMatchesSelector;if(B){var v=!1;return C.every(function(D){return B.call(m,D)?(v=!0,!1):!0}),v}else return!1}}]),A}(),F=function(){function A(b){r(this,A),this.ctx=b,this.ie=!1;var m=window.navigator.userAgent;(m.indexOf("MSIE")>-1||m.indexOf("Trident")>-1)&&(this.ie=!0)}return c(A,[{key:"log",value:function(m){var y=arguments.length>1&&arguments[1]!==void 0?arguments[1]:"debug",C=this.opt.log;this.opt.debug&&(typeof C>"u"?"undefined":i(C))==="object"&&typeof C[y]=="function"&&C[y]("mark.js: "+m)}},{key:"escapeStr",value:function(m){return m.replace(/[\-\[\]\/\{\}\(\)\*\+\?\.\\\^\$\|]/g,"\\$&")}},{key:"createRegExp",value:function(m){return this.opt.wildcards!=="disabled"&&(m=this.setupWildcardsRegExp(m)),m=this.escapeStr(m),Object.keys(this.opt.synonyms).length&&(m=this.createSynonymsRegExp(m)),(this.opt.ignoreJoiners||this.opt.ignorePunctuation.length)&&(m=this.setupIgnoreJoinersRegExp(m)),this.opt.diacritics&&(m=this.createDiacriticsRegExp(m)),m=this.createMergedBlanksRegExp(m),(this.opt.ignoreJoiners||this.opt.ignorePunctuation.length)&&(m=this.createJoinersRegExp(m)),this.opt.wildcards!=="disabled"&&(m=this.createWildcardsRegExp(m)),m=this.createAccuracyRegExp(m),m}},{key:"createSynonymsRegExp",value:function(m){var y=this.opt.synonyms,C=this.opt.caseSensitive?"":"i",B=this.opt.ignoreJoiners||this.opt.ignorePunctuation.length?"\0":"";for(var v in y)if(y.hasOwnProperty(v)){var D=y[v],w=this.opt.wildcards!=="disabled"?this.setupWildcardsRegExp(v):this.escapeStr(v),x=this.opt.wildcards!=="disabled"?this.setupWildcardsRegExp(D):this.escapeStr(D);w!==""&&x!==""&&(m=m.replace(new RegExp("("+this.escapeStr(w)+"|"+this.escapeStr(x)+")","gm"+C),B+("("+this.processSynomyms(w)+"|")+(this.processSynomyms(x)+")")+B))}return m}},{key:"processSynomyms",value:function(m){return(this.opt.ignoreJoiners||this.opt.ignorePunctuation.length)&&(m=this.setupIgnoreJoinersRegExp(m)),m}},{key:"setupWildcardsRegExp",value:function(m){return m=m.replace(/(?:\\)*\?/g,function(y){return y.charAt(0)==="\\"?"?":""}),m.replace(/(?:\\)*\*/g,function(y){return y.charAt(0)==="\\"?"*":""})}},{key:"createWildcardsRegExp",value:function(m){var y=this.opt.wildcards==="withSpaces";return m.replace(/\u0001/g,y?"[\\S\\s]?":"\\S?").replace(/\u0002/g,y?"[\\S\\s]*?":"\\S*")}},{key:"setupIgnoreJoinersRegExp",value:function(m){return m.replace(/[^(|)\\]/g,function(y,C,B){var v=B.charAt(C+1);return/[(|)\\]/.test(v)||v===""?y:y+"\0"})}},{key:"createJoinersRegExp",value:function(m){var y=[],C=this.opt.ignorePunctuation;return Array.isArray(C)&&C.length&&y.push(this.escapeStr(C.join(""))),this.opt.ignoreJoiners&&y.push("\\u00ad\\u200b\\u200c\\u200d"),y.length?m.split(/\u0000+/).join("["+y.join("")+"]*"):m}},{key:"createDiacriticsRegExp",value:function(m){var y=this.opt.caseSensitive?"":"i",C=this.opt.caseSensitive?["aàáảãạăằắẳẵặâầấẩẫậäåāą","AÀÁẢÃẠĂẰẮẲẴẶÂẦẤẨẪẬÄÅĀĄ","cçćč","CÇĆČ","dđď","DĐĎ","eèéẻẽẹêềếểễệëěēę","EÈÉẺẼẸÊỀẾỂỄỆËĚĒĘ","iìíỉĩịîïī","IÌÍỈĨỊÎÏĪ","lł","LŁ","nñňń","NÑŇŃ","oòóỏõọôồốổỗộơởỡớờợöøō","OÒÓỎÕỌÔỒỐỔỖỘƠỞỠỚỜỢÖØŌ","rř","RŘ","sšśșş","SŠŚȘŞ","tťțţ","TŤȚŢ","uùúủũụưừứửữựûüůū","UÙÚỦŨỤƯỪỨỬỮỰÛÜŮŪ","yýỳỷỹỵÿ","YÝỲỶỸỴŸ","zžżź","ZŽŻŹ"]:["aàáảãạăằắẳẵặâầấẩẫậäåāąAÀÁẢÃẠĂẰẮẲẴẶÂẦẤẨẪẬÄÅĀĄ","cçćčCÇĆČ","dđďDĐĎ","eèéẻẽẹêềếểễệëěēęEÈÉẺẼẸÊỀẾỂỄỆËĚĒĘ","iìíỉĩịîïīIÌÍỈĨỊÎÏĪ","lłLŁ","nñňńNÑŇŃ","oòóỏõọôồốổỗộơởỡớờợöøōOÒÓỎÕỌÔỒỐỔỖỘƠỞỠỚỜỢÖØŌ","rřRŘ","sšśșşSŠŚȘŞ","tťțţTŤȚŢ","uùúủũụưừứửữựûüůūUÙÚỦŨỤƯỪỨỬỮỰÛÜŮŪ","yýỳỷỹỵÿYÝỲỶỸỴŸ","zžżźZŽŻŹ"],B=[];return m.split("").forEach(function(v){C.every(function(D){if(D.indexOf(v)!==-1){if(B.indexOf(D)>-1)return!1;m=m.replace(new RegExp("["+D+"]","gm"+y),"["+D+"]"),B.push(D)}return!0})}),m}},{key:"createMergedBlanksRegExp",value:function(m){return m.replace(/[\s]+/gmi,"[\\s]+")}},{key:"createAccuracyRegExp",value:function(m){var y=this,C="!\"#$%&'()*+,-./:;<=>?@[\\]^_`{|}~¡¿",B=this.opt.accuracy,v=typeof B=="string"?B:B.value,D=typeof B=="string"?[]:B.limiters,w="";switch(D.forEach(function(x){w+="|"+y.escapeStr(x)}),v){case"partially":default:return"()("+m+")";case"complementary":return w="\\s"+(w||this.escapeStr(C)),"()([^"+w+"]*"+m+"[^"+w+"]*)";case"exactly":return"(^|\\s"+w+")("+m+")(?=$|\\s"+w+")"}}},{key:"getSeparatedKeywords",value:function(m){var y=this,C=[];return m.forEach(function(B){y.opt.separateWordSearch?B.split(" ").forEach(function(v){v.trim()&&C.indexOf(v)===-1&&C.push(v)}):B.trim()&&C.indexOf(B)===-1&&C.push(B)}),{keywords:C.sort(function(B,v){return v.length-B.length}),length:C.length}}},{key:"isNumeric",value:function(m){return Number(parseFloat(m))==m}},{key:"checkRanges",value:function(m){var y=this;if(!Array.isArray(m)||Object.prototype.toString.call(m[0])!=="[object Object]")return this.log("markRanges() will only accept an array of objects"),this.opt.noMatch(m),[];var C=[],B=0;return m.sort(function(v,D){return v.start-D.start}).forEach(function(v){var D=y.callNoMatchOnInvalidRanges(v,B),w=D.start,x=D.end,_=D.valid;_&&(v.start=w,v.length=x-w,C.push(v),B=x)}),C}},{key:"callNoMatchOnInvalidRanges",value:function(m,y){var C=void 0,B=void 0,v=!1;return m&&typeof m.start<"u"?(C=parseInt(m.start,10),B=C+parseInt(m.length,10),this.isNumeric(m.start)&&this.isNumeric(m.length)&&B-y>0&&B-C>0?v=!0:(this.log("Ignoring invalid or overlapping range: "+(""+JSON.stringify(m))),this.opt.noMatch(m))):(this.log("Ignoring invalid range: "+JSON.stringify(m)),this.opt.noMatch(m)),{start:C,end:B,valid:v}}},{key:"checkWhitespaceRanges",value:function(m,y,C){var B=void 0,v=!0,D=C.length,w=y-D,x=parseInt(m.start,10)-w;return x=x>D?D:x,B=x+parseInt(m.length,10),B>D&&(B=D,this.log("End range automatically set to the max value of "+D)),x<0||B-x<0||x>D||B>D?(v=!1,this.log("Invalid range: "+JSON.stringify(m)),this.opt.noMatch(m)):C.substring(x,B).replace(/\s+/g,"")===""&&(v=!1,this.log("Skipping whitespace only range: "+JSON.stringify(m)),this.opt.noMatch(m)),{start:x,end:B,valid:v}}},{key:"getTextNodes",value:function(m){var y=this,C="",B=[];this.iterator.forEachNode(NodeFilter.SHOW_TEXT,function(v){B.push({start:C.length,end:(C+=v.textContent).length,node:v})},function(v){return y.matchesExclude(v.parentNode)?NodeFilter.FILTER_REJECT:NodeFilter.FILTER_ACCEPT},function(){m({value:C,nodes:B})})}},{key:"matchesExclude",value:function(m){return u.matches(m,this.opt.exclude.concat(["script","style","title","head","html"]))}},{key:"wrapRangeInTextNode",value:function(m,y,C){var B=this.opt.element?this.opt.element:"mark",v=m.splitText(y),D=v.splitText(C-y),w=document.createElement(B);return w.setAttribute("data-markjs","true"),this.opt.className&&w.setAttribute("class",this.opt.className),w.textContent=v.textContent,v.parentNode.replaceChild(w,v),D}},{key:"wrapRangeInMappedTextNode",value:function(m,y,C,B,v){var D=this;m.nodes.every(function(w,x){var _=m.nodes[x+1];if(typeof _>"u"||_.start>y){if(!B(w.node))return!1;var R=y-w.start,P=(C>w.end?w.end:C)-w.start,S=m.value.substr(0,w.start),N=m.value.substr(P+w.start);if(w.node=D.wrapRangeInTextNode(w.node,R,P),m.value=S+N,m.nodes.forEach(function(O,U){U>=x&&(m.nodes[U].start>0&&U!==x&&(m.nodes[U].start-=P),m.nodes[U].end-=P)}),C-=P,v(w.node.previousSibling,w.start),C>w.end)y=w.end;else return!1}return!0})}},{key:"wrapMatches",value:function(m,y,C,B,v){var D=this,w=y===0?0:y+1;this.getTextNodes(function(x){x.nodes.forEach(function(_){_=_.node;for(var R=void 0;(R=m.exec(_.textContent))!==null&&R[w]!=="";)if(C(R[w],_)){var P=R.index;if(w!==0)for(var S=1;S<w;S++)P+=R[S].length;_=D.wrapRangeInTextNode(_,P,P+R[w].length),B(_.previousSibling),m.lastIndex=0}}),v()})}},{key:"wrapMatchesAcrossElements",value:function(m,y,C,B,v){var D=this,w=y===0?0:y+1;this.getTextNodes(function(x){for(var _=void 0;(_=m.exec(x.value))!==null&&_[w]!=="";){var R=_.index;if(w!==0)for(var P=1;P<w;P++)R+=_[P].length;var S=R+_[w].length;D.wrapRangeInMappedTextNode(x,R,S,function(N){return C(_[w],N)},function(N,O){m.lastIndex=O,B(N)})}v()})}},{key:"wrapRangeFromIndex",value:function(m,y,C,B){var v=this;this.getTextNodes(function(D){var w=D.value.length;m.forEach(function(x,_){var R=v.checkWhitespaceRanges(x,w,D.value),P=R.start,S=R.end,N=R.valid;N&&v.wrapRangeInMappedTextNode(D,P,S,function(O){return y(O,x,D.value.substring(P,S),_)},function(O){C(O,x)})}),B()})}},{key:"unwrapMatches",value:function(m){for(var y=m.parentNode,C=document.createDocumentFragment();m.firstChild;)C.appendChild(m.removeChild(m.firstChild));y.replaceChild(C,m),this.ie?this.normalizeTextNode(y):y.normalize()}},{key:"normalizeTextNode",value:function(m){if(m){if(m.nodeType===3)for(;m.nextSibling&&m.nextSibling.nodeType===3;)m.nodeValue+=m.nextSibling.nodeValue,m.parentNode.removeChild(m.nextSibling);else this.normalizeTextNode(m.firstChild);this.normalizeTextNode(m.nextSibling)}}},{key:"markRegExp",value:function(m,y){var C=this;this.opt=y,this.log('Searching with expression "'+m+'"');var B=0,v="wrapMatches",D=function(x){B++,C.opt.each(x)};this.opt.acrossElements&&(v="wrapMatchesAcrossElements"),this[v](m,this.opt.ignoreGroups,function(w,x){return C.opt.filter(x,w,B)},D,function(){B===0&&C.opt.noMatch(m),C.opt.done(B)})}},{key:"mark",value:function(m,y){var C=this;this.opt=y;var B=0,v="wrapMatches",D=this.getSeparatedKeywords(typeof m=="string"?[m]:m),w=D.keywords,x=D.length,_=this.opt.caseSensitive?"":"i",R=function P(S){var N=new RegExp(C.createRegExp(S),"gm"+_),O=0;C.log('Searching with expression "'+N+'"'),C[v](N,1,function(U,n2){return C.opt.filter(n2,S,B,O)},function(U){O++,B++,C.opt.each(U)},function(){O===0&&C.opt.noMatch(S),w[x-1]===S?C.opt.done(B):P(w[w.indexOf(S)+1])})};this.opt.acrossElements&&(v="wrapMatchesAcrossElements"),x===0?this.opt.done(B):R(w[0])}},{key:"markRanges",value:function(m,y){var C=this;this.opt=y;var B=0,v=this.checkRanges(m);v&&v.length?(this.log("Starting to mark with the following ranges: "+JSON.stringify(v)),this.wrapRangeFromIndex(v,function(D,w,x,_){return C.opt.filter(D,w,x,_)},function(D,w){B++,C.opt.each(D,w)},function(){C.opt.done(B)})):this.opt.done(B)}},{key:"unmark",value:function(m){var y=this;this.opt=m;var C=this.opt.element?this.opt.element:"*";C+="[data-markjs]",this.opt.className&&(C+="."+this.opt.className),this.log('Removal selector "'+C+'"'),this.iterator.forEachNode(NodeFilter.SHOW_ELEMENT,function(B){y.unwrapMatches(B)},function(B){var v=u.matches(B,C),D=y.matchesExclude(B);return!v||D?NodeFilter.FILTER_REJECT:NodeFilter.FILTER_ACCEPT},this.opt.done)}},{key:"opt",set:function(m){this._opt=l({},{element:"",className:"",exclude:[],iframes:!1,iframesTimeout:5e3,separateWordSearch:!0,diacritics:!0,synonyms:{},accuracy:"partially",acrossElements:!1,caseSensitive:!1,ignoreJoiners:!1,ignoreGroups:0,ignorePunctuation:[],wildcards:"disabled",each:function(){},noMatch:function(){},filter:function(){return!0},done:function(){},debug:!1,log:window.console},m)},get:function(){return this._opt}},{key:"iterator",get:function(){return new u(this.ctx,this.opt.iframes,this.opt.exclude,this.opt.iframesTimeout)}}]),A}();function p(A){var b=this,m=new F(A);return this.mark=function(y,C){return m.mark(y,C),b},this.markRegExp=function(y,C){return m.markRegExp(y,C),b},this.markRanges=function(y,C){return m.markRanges(y,C),b},this.unmark=function(y){return m.unmark(y),b},this}return p})}(ts)),ts.exports}var mD=pD();const gD=bs(mD);function bD(t,a){const[i,r]=f.useState(t);return f.useEffect(()=>{const c=setTimeout(()=>r(t),a);return()=>{clearTimeout(c)}},[t,a]),i}function ib(t,a){const[i,r]=f.useState();f.useEffect(()=>{const l=fD(t);r(typeof l>"u"||l===null?a:l)},[a,t]);const c=f.useCallback(l=>{r(u=>{let F;typeof l=="function"?F=l(u):F=l;try{localStorage.setItem(t,JSON.stringify(F))}catch{}return F})},[t]);return[i,c]}function fD(t){try{const a=localStorage.getItem(t);return typeof a=="string"?JSON.parse(a):void 0}catch{return}}function yD(t,a){const[i,r]=f.useState();f.useEffect(()=>{const l=CD(t);r(typeof l>"u"||l===null?a:l)},[a,t]);const c=f.useCallback(l=>{r(u=>{let F;typeof l=="function"?F=l(u):F=l;try{sessionStorage.setItem(t,JSON.stringify(F))}catch{}return F})},[t]);return[i,c]}function CD(t){try{const a=sessionStorage.getItem(t);return typeof a=="string"?JSON.parse(a):void 0}catch{return}}var rb="vocs_utils_visuallyHidden",vD="vocs_Kbd";function sb(t){return g.jsx("kbd",{...t,className:l2(t.className,vD)})}var BD="vocs_KeyboardShortcut",kD="vocs_KeyboardShortcut_kbdGroup";function Ea(t){const{description:a,keys:i}=t;return g.jsxs("span",{className:BD,children:[a,g.jsx("span",{className:kD,children:i.map(r=>g.jsx(sb,{children:r},r))})]})}var DD="vocs_SearchDialog",wD="vocs_SearchDialog_overlay",_D="vocs_SearchDialog_searchBox",ED="vocs_SearchDialog_searchInput",Ur="vocs_SearchDialog_searchInputIcon",xD="vocs_SearchDialog_searchInputIconDesktop",SD="vocs_SearchDialog_searchInputIconMobile",RD="vocs_SearchDialog_results",TD="vocs_SearchDialog_result",PD="vocs_SearchDialog_resultSelected",Zm="vocs_SearchDialog_resultIcon",LD="vocs_SearchDialog_titles",Ym="vocs_SearchDialog_title",MD="vocs_SearchDialog_titleIcon",ND="vocs_SearchDialog_content",Xm="vocs_SearchDialog_excerpt",ID="vocs_SearchDialog_searchShortcuts";function cb(t){const{search:a}=m0(),i=gu(),r=f.useRef(null),c=f.useRef(null),[l,u]=yD("filterText",""),F=bD(l,200),p=ab(),[A,b]=f.useState(-1),[m,y]=f.useState(!1),[C,B]=ib("showDetailView",!0),v=f.useMemo(()=>p?F?(b(0),p.search(F,a).slice(0,16)):(b(-1),[]):[],[p,a,F]),D=v.length,w=v[A],x=f.useCallback(()=>{var S,N,O;if(!c.current)return;const _=new Set;for(const U of v)for(const n2 in U.match)_.add(n2);const R=new gD(c.current);R.unmark({done(){R==null||R.markRegExp(HD(_))}});const P=c.current.querySelectorAll(`.${Xm}`);for(const U of P)(S=U.querySelector('mark[data-markjs="true"]'))==null||S.scrollIntoView({block:"center"});(O=(N=c.current)==null?void 0:N.firstElementChild)==null||O.scrollIntoView({block:"start"})},[v]);return f.useEffect(()=>{if(!t.open)return;function _(R){var P;switch(R.key){case"ArrowDown":{R.preventDefault(),b(S=>{var U;let N=S+1;N>=D&&(N=0);const O=(U=c.current)==null?void 0:U.children[N];return O==null||O.scrollIntoView({block:"nearest"}),N}),y(!0);break}case"ArrowUp":{R.preventDefault(),b(S=>{var U;let N=S-1;N<0&&(N=D-1);const O=(U=c.current)==null?void 0:U.children[N];return O==null||O.scrollIntoView({block:"nearest"}),N}),y(!0);break}case"Backspace":{if(!R.metaKey)return;R.preventDefault(),u(""),(P=r.current)==null||P.focus();break}case"Enter":{if(R.target instanceof HTMLButtonElement&&R.target.type!=="submit"||!w)return;R.preventDefault(),i(w.href),t.onClose();break}}}return window.addEventListener("keydown",_),()=>{window.removeEventListener("keydown",_)}},[i,D,u,w,t.open,t.onClose]),f.useEffect(()=>{F!==""&&c.current&&x()},[x,F]),g.jsxs(qk,{children:[g.jsx(Wk,{className:wD}),g.jsxs(Kk,{onOpenAutoFocus:_=>{r.current&&(_.preventDefault(),r.current.focus()),x()},onCloseAutoFocus:()=>{b(0)},className:DD,"aria-describedby":void 0,children:[g.jsx(Zk,{className:rb,children:"Search"}),g.jsxs("form",{className:_D,children:[g.jsx("button",{"aria-label":"Close search dialog",type:"button",onClick:()=>t.onClose(),className:SD,children:g.jsx(tB,{className:Ur,height:20,width:20})}),g.jsx(dD,{htmlFor:"search-input",children:g.jsx(Du,{"aria-label":"Search",className:l2(Ur,xD),height:20,width:20})}),g.jsx("input",{ref:r,tabIndex:0,className:ED,id:"search-input",onChange:_=>u(_.target.value),placeholder:"Search",type:"search",value:l}),g.jsx("button",{"aria-label":"Toggle detail view",type:"button",onClick:()=>B(_=>!_),children:g.jsx(lB,{className:Ur,height:20,width:20})}),g.jsx("button",{"aria-label":"Reset search",type:"button",className:Ur,onClick:()=>{var _;u(""),(_=r.current)==null||_.focus()},children:"⌫"})]}),g.jsxs("ul",{className:RD,role:v.length?"listbox":void 0,onMouseMove:()=>y(!1),ref:c,children:[F&&v.length===0&&g.jsxs("li",{children:['No results for "',g.jsx("span",{children:F}),'"']}),v.map((_,R)=>{var P;return g.jsx("li",{role:"option",className:l2(TD,R===A&&PD),"aria-selected":R===A,"aria-label":[..._.titles.filter(S=>!!S),_.title].join(" > "),children:g.jsxs(za,{to:_.href,onClick:S=>{S.metaKey||t.onClose()},onMouseEnter:()=>!m&&b(R),onFocus:()=>b(R),children:[g.jsxs("div",{className:LD,children:[_.isPage?g.jsx(sB,{className:Zm}):g.jsx("span",{className:Zm,children:"#"}),_.titles.filter(S=>!!S).map(S=>g.jsxs("span",{className:Ym,children:[g.jsx("span",{dangerouslySetInnerHTML:{__html:S}}),g.jsx(aB,{className:MD})]},S)),g.jsx("span",{className:Ym,children:g.jsx("span",{dangerouslySetInnerHTML:{__html:_.title}})})]}),C&&((P=_.text)==null?void 0:P.trim())&&g.jsx("div",{className:Xm,children:g.jsx(Cg,{className:ND,children:g.jsx("div",{dangerouslySetInnerHTML:{__html:_.html}})})})]})},_.id)})]}),g.jsxs("div",{className:ID,children:[g.jsx(Ea,{description:"Navigate",keys:["↑","↓"]}),g.jsx(Ea,{description:"Select",keys:["enter"]}),g.jsx(Ea,{description:"Close",keys:["esc"]}),g.jsx(Ea,{description:"Reset",keys:["⌘","⌫"]})]})]})]})}function HD(t){return new RegExp([...t].sort((a,i)=>i.length-a.length).map(a=>`(${a.replace(/[|\\{}()[\]^$+*?.]/g,"\\$&").replace(/-/g,"\\x2d")})`).join("|"),"gi")}function zD(){ab();const[t,a]=f.useState(!1);return f.useEffect(()=>{function i(r){const c=document.activeElement instanceof HTMLElement&&(["input","select","textarea"].includes(document.activeElement.tagName.toLowerCase())||document.activeElement.isContentEditable);r.key==="/"&&!t&&!c?(r.preventDefault(),a(!0)):r.metaKey===!0&&r.key==="k"&&(r.preventDefault(),a(l=>!l))}return window.addEventListener("keydown",i),()=>{window.removeEventListener("keydown",i)}},[t]),g.jsxs(Yg,{open:t,onOpenChange:a,children:[g.jsx(Xg,{asChild:!0,children:g.jsxs("button",{className:hD,type:"button",children:[g.jsx(Du,{style:{marginTop:2}}),"Search...",g.jsx("div",{className:uD,children:g.jsx("div",{style:{background:"currentColor",transform:"rotate(45deg)",width:1.5,borderRadius:2,height:"100%"}})})]})}),g.jsx(cb,{open:t,onClose:()=>a(!1)})]})}var OD="vocs_DesktopTopNav",jD="vocs_DesktopTopNav_withLogo",VD="vocs_DesktopTopNav_content",UD="vocs_DesktopTopNav_curtain",GD="vocs_DesktopTopNav_group",Jm="vocs_DesktopTopNav_item",qD="vocs_DesktopTopNav_logo",WD="vocs_DesktopTopNav_logoWrapper",$m="vocs_DesktopTopNav_section",fh="vocs_Logo",KD="vocs_Logo_logoDark",ZD="vocs_Logo_logoLight";function YD({className:t}){const{logoUrl:a}=m0();return a?g.jsx(g.Fragment,{children:typeof a=="string"?g.jsx("img",{alt:"Logo",className:l2(t,fh),src:a}):g.jsxs(g.Fragment,{children:[g.jsx("img",{alt:"Logo",className:l2(t,fh,KD),src:a.dark}),g.jsx("img",{alt:"Logo",className:l2(t,fh,ZD),src:a.light})]})}):null}var XD="vocs_NavLogo_logoImage",JD="vocs_NavLogo_title";function Lu(){const t=m0();return t.logoUrl?g.jsx(YD,{className:XD}):g.jsx("div",{className:JD,children:t.title})}var $D=f.createContext(void 0);function hi(t){const a=f.useContext($D);return t||a||"ltr"}function ui(t){const a=t+"CollectionProvider",[i,r]=Ne(a),[c,l]=i(a,{collectionRef:{current:null},itemMap:new Map}),u=v=>{const{scope:D,children:w}=v,x=a0.useRef(null),_=a0.useRef(new Map).current;return g.jsx(c,{scope:D,itemMap:_,collectionRef:x,children:w})};u.displayName=a;const F=t+"CollectionSlot",p=Pa(F),A=a0.forwardRef((v,D)=>{const{scope:w,children:x}=v,_=l(F,w),R=n0(D,_.collectionRef);return g.jsx(p,{ref:R,children:x})});A.displayName=F;const b=t+"CollectionItemSlot",m="data-radix-collection-item",y=Pa(b),C=a0.forwardRef((v,D)=>{const{scope:w,children:x,..._}=v,R=a0.useRef(null),P=n0(D,R),S=l(b,w);return a0.useEffect(()=>(S.itemMap.set(R,{ref:R,..._}),()=>void S.itemMap.delete(R))),g.jsx(y,{[m]:"",ref:P,children:x})});C.displayName=b;function B(v){const D=l(t+"CollectionConsumer",v);return a0.useCallback(()=>{const x=D.collectionRef.current;if(!x)return[];const _=Array.from(x.querySelectorAll(`[${m}]`));return Array.from(D.itemMap.values()).sort((S,N)=>_.indexOf(S.ref.current)-_.indexOf(N.ref.current))},[D.collectionRef,D.itemMap])}return[{Provider:u,Slot:A,ItemSlot:C},B,r]}function QD(t){const a=f.useRef({value:t,previous:t});return f.useMemo(()=>(a.current.value!==t&&(a.current.previous=a.current.value,a.current.value=t),a.current.previous),[t])}var ew=Object.freeze({position:"absolute",border:0,width:1,height:1,padding:0,margin:-1,overflow:"hidden",clip:"rect(0, 0, 0, 0)",whiteSpace:"nowrap",wordWrap:"normal"}),tw="VisuallyHidden",lb=f.forwardRef((t,a)=>g.jsx(R2.span,{...t,ref:a,style:{...ew,...t.style}}));lb.displayName=tw;var ow=lb,Io="NavigationMenu",[Mu,hb,aw]=ui(Io),[Wh,nw,iw]=ui(Io),[Nu,G8]=Ne(Io,[aw,iw]),[rw,Ee]=Nu(Io),[sw,cw]=Nu(Io),ub=f.forwardRef((t,a)=>{const{__scopeNavigationMenu:i,value:r,onValueChange:c,defaultValue:l,delayDuration:u=200,skipDelayDuration:F=300,orientation:p="horizontal",dir:A,...b}=t,[m,y]=f.useState(null),C=n0(a,U=>y(U)),B=hi(A),v=f.useRef(0),D=f.useRef(0),w=f.useRef(0),[x,_]=f.useState(!0),[R,P]=$e({prop:r,onChange:U=>{const n2=U!=="",u2=F>0;n2?(window.clearTimeout(w.current),u2&&_(!1)):(window.clearTimeout(w.current),w.current=window.setTimeout(()=>_(!0),F)),c==null||c(U)},defaultProp:l??"",caller:Io}),S=f.useCallback(()=>{window.clearTimeout(D.current),D.current=window.setTimeout(()=>P(""),150)},[P]),N=f.useCallback(U=>{window.clearTimeout(D.current),P(U)},[P]),O=f.useCallback(U=>{R===U?window.clearTimeout(D.current):v.current=window.setTimeout(()=>{window.clearTimeout(D.current),P(U)},u)},[R,P,u]);return f.useEffect(()=>()=>{window.clearTimeout(v.current),window.clearTimeout(D.current),window.clearTimeout(w.current)},[]),g.jsx(Fb,{scope:i,isRootMenu:!0,value:R,dir:B,orientation:p,rootNavigationMenu:m,onTriggerEnter:U=>{window.clearTimeout(v.current),x?O(U):N(U)},onTriggerLeave:()=>{window.clearTimeout(v.current),S()},onContentEnter:()=>window.clearTimeout(D.current),onContentLeave:S,onItemSelect:U=>{P(n2=>n2===U?"":U)},onItemDismiss:()=>P(""),children:g.jsx(R2.nav,{"aria-label":"Main","data-orientation":p,dir:B,...b,ref:C})})});ub.displayName=Io;var Kh="NavigationMenuSub",lw=f.forwardRef((t,a)=>{const{__scopeNavigationMenu:i,value:r,onValueChange:c,defaultValue:l,orientation:u="horizontal",...F}=t,p=Ee(Kh,i),[A,b]=$e({prop:r,onChange:c,defaultProp:l??"",caller:Kh});return g.jsx(Fb,{scope:i,isRootMenu:!1,value:A,dir:p.dir,orientation:u,rootNavigationMenu:p.rootNavigationMenu,onTriggerEnter:m=>b(m),onItemSelect:m=>b(m),onItemDismiss:()=>b(""),children:g.jsx(R2.div,{"data-orientation":u,...F,ref:a})})});lw.displayName=Kh;var Fb=t=>{const{scope:a,isRootMenu:i,rootNavigationMenu:r,dir:c,orientation:l,children:u,value:F,onItemSelect:p,onItemDismiss:A,onTriggerEnter:b,onTriggerLeave:m,onContentEnter:y,onContentLeave:C}=t,[B,v]=f.useState(null),[D,w]=f.useState(new Map),[x,_]=f.useState(null);return g.jsx(rw,{scope:a,isRootMenu:i,rootNavigationMenu:r,value:F,previousValue:QD(F),baseId:ve(),dir:c,orientation:l,viewport:B,onViewportChange:v,indicatorTrack:x,onIndicatorTrackChange:_,onTriggerEnter:I0(b),onTriggerLeave:I0(m),onContentEnter:I0(y),onContentLeave:I0(C),onItemSelect:I0(p),onItemDismiss:I0(A),onViewportContentChange:f.useCallback((R,P)=>{w(S=>(S.set(R,P),new Map(S)))},[]),onViewportContentRemove:f.useCallback(R=>{w(P=>P.has(R)?(P.delete(R),new Map(P)):P)},[]),children:g.jsx(Mu.Provider,{scope:a,children:g.jsx(sw,{scope:a,items:D,children:u})})})},db="NavigationMenuList",Ab=f.forwardRef((t,a)=>{const{__scopeNavigationMenu:i,...r}=t,c=Ee(db,i),l=g.jsx(R2.ul,{"data-orientation":c.orientation,...r,ref:a});return g.jsx(R2.div,{style:{position:"relative"},ref:c.onIndicatorTrackChange,children:g.jsx(Mu.Slot,{scope:i,children:c.isRootMenu?g.jsx(vb,{asChild:!0,children:l}):l})})});Ab.displayName=db;var pb="NavigationMenuItem",[hw,mb]=Nu(pb),gb=f.forwardRef((t,a)=>{const{__scopeNavigationMenu:i,value:r,...c}=t,l=ve(),u=r||l||"LEGACY_REACT_AUTO_VALUE",F=f.useRef(null),p=f.useRef(null),A=f.useRef(null),b=f.useRef(()=>{}),m=f.useRef(!1),y=f.useCallback((B="start")=>{if(F.current){b.current();const v=Yh(F.current);v.length&&zu(B==="start"?v:v.reverse())}},[]),C=f.useCallback(()=>{if(F.current){const B=Yh(F.current);B.length&&(b.current=fw(B))}},[]);return g.jsx(hw,{scope:i,value:u,triggerRef:p,contentRef:F,focusProxyRef:A,wasEscapeCloseRef:m,onEntryKeyDown:y,onFocusProxyEnter:y,onRootContentClose:C,onContentFocusOutside:C,children:g.jsx(R2.li,{...c,ref:a})})});gb.displayName=pb;var Zh="NavigationMenuTrigger",bb=f.forwardRef((t,a)=>{const{__scopeNavigationMenu:i,disabled:r,...c}=t,l=Ee(Zh,t.__scopeNavigationMenu),u=mb(Zh,t.__scopeNavigationMenu),F=f.useRef(null),p=n0(F,u.triggerRef,a),A=kb(l.baseId,u.value),b=Db(l.baseId,u.value),m=f.useRef(!1),y=f.useRef(!1),C=u.value===l.value;return g.jsxs(g.Fragment,{children:[g.jsx(Mu.ItemSlot,{scope:i,value:u.value,children:g.jsx(Bb,{asChild:!0,children:g.jsx(R2.button,{id:A,disabled:r,"data-disabled":r?"":void 0,"data-state":Ou(C),"aria-expanded":C,"aria-controls":b,...c,ref:p,onPointerEnter:p2(t.onPointerEnter,()=>{y.current=!1,u.wasEscapeCloseRef.current=!1}),onPointerMove:p2(t.onPointerMove,ls(()=>{r||y.current||u.wasEscapeCloseRef.current||m.current||(l.onTriggerEnter(u.value),m.current=!0)})),onPointerLeave:p2(t.onPointerLeave,ls(()=>{r||(l.onTriggerLeave(),m.current=!1)})),onClick:p2(t.onClick,()=>{l.onItemSelect(u.value),y.current=C}),onKeyDown:p2(t.onKeyDown,B=>{const D={horizontal:"ArrowDown",vertical:l.dir==="rtl"?"ArrowLeft":"ArrowRight"}[l.orientation];C&&B.key===D&&(u.onEntryKeyDown(),B.preventDefault())})})})}),C&&g.jsxs(g.Fragment,{children:[g.jsx(ow,{"aria-hidden":!0,tabIndex:0,ref:u.focusProxyRef,onFocus:B=>{const v=u.contentRef.current,D=B.relatedTarget,w=D===F.current,x=v==null?void 0:v.contains(D);(w||!x)&&u.onFocusProxyEnter(w?"start":"end")}}),l.viewport&&g.jsx("span",{"aria-owns":b})]})]})});bb.displayName=Zh;var uw="NavigationMenuLink",Qm="navigationMenu.linkSelect",fb=f.forwardRef((t,a)=>{const{__scopeNavigationMenu:i,active:r,onSelect:c,...l}=t;return g.jsx(Bb,{asChild:!0,children:g.jsx(R2.a,{"data-active":r?"":void 0,"aria-current":r?"page":void 0,...l,ref:a,onClick:p2(t.onClick,u=>{const F=u.target,p=new CustomEvent(Qm,{bubbles:!0,cancelable:!0});if(F.addEventListener(Qm,A=>c==null?void 0:c(A),{once:!0}),rs(F,p),!p.defaultPrevented&&!u.metaKey){const A=new CustomEvent(os,{bubbles:!0,cancelable:!0});rs(F,A)}},{checkForDefaultPrevented:!1})})})});fb.displayName=uw;var Iu="NavigationMenuIndicator",Fw=f.forwardRef((t,a)=>{const{forceMount:i,...r}=t,c=Ee(Iu,t.__scopeNavigationMenu),l=!!c.value;return c.indicatorTrack?ug.createPortal(g.jsx(H0,{present:i||l,children:g.jsx(dw,{...r,ref:a})}),c.indicatorTrack):null});Fw.displayName=Iu;var dw=f.forwardRef((t,a)=>{const{__scopeNavigationMenu:i,...r}=t,c=Ee(Iu,i),l=hb(i),[u,F]=f.useState(null),[p,A]=f.useState(null),b=c.orientation==="horizontal",m=!!c.value;f.useEffect(()=>{var v;const B=(v=l().find(D=>D.value===c.value))==null?void 0:v.ref.current;B&&F(B)},[l,c.value]);const y=()=>{u&&A({size:b?u.offsetWidth:u.offsetHeight,offset:b?u.offsetLeft:u.offsetTop})};return Xh(u,y),Xh(c.indicatorTrack,y),p?g.jsx(R2.div,{"aria-hidden":!0,"data-state":m?"visible":"hidden","data-orientation":c.orientation,...r,ref:a,style:{position:"absolute",...b?{left:0,width:p.size+"px",transform:`translateX(${p.offset}px)`}:{top:0,height:p.size+"px",transform:`translateY(${p.offset}px)`},...r.style}}):null}),La="NavigationMenuContent",yb=f.forwardRef((t,a)=>{const{forceMount:i,...r}=t,c=Ee(La,t.__scopeNavigationMenu),l=mb(La,t.__scopeNavigationMenu),u=n0(l.contentRef,a),F=l.value===c.value,p={value:l.value,triggerRef:l.triggerRef,focusProxyRef:l.focusProxyRef,wasEscapeCloseRef:l.wasEscapeCloseRef,onContentFocusOutside:l.onContentFocusOutside,onRootContentClose:l.onRootContentClose,...r};return c.viewport?g.jsx(Aw,{forceMount:i,...p,ref:u}):g.jsx(H0,{present:i||F,children:g.jsx(Cb,{"data-state":Ou(F),...p,ref:u,onPointerEnter:p2(t.onPointerEnter,c.onContentEnter),onPointerLeave:p2(t.onPointerLeave,ls(c.onContentLeave)),style:{pointerEvents:!F&&c.isRootMenu?"none":void 0,...p.style}})})});yb.displayName=La;var Aw=f.forwardRef((t,a)=>{const i=Ee(La,t.__scopeNavigationMenu),{onViewportContentChange:r,onViewportContentRemove:c}=i;return De(()=>{r(t.value,{ref:a,...t})},[t,a,r]),De(()=>()=>c(t.value),[t.value,c]),null}),os="navigationMenu.rootContentDismiss",Cb=f.forwardRef((t,a)=>{const{__scopeNavigationMenu:i,value:r,triggerRef:c,focusProxyRef:l,wasEscapeCloseRef:u,onRootContentClose:F,onContentFocusOutside:p,...A}=t,b=Ee(La,i),m=f.useRef(null),y=n0(m,a),C=kb(b.baseId,r),B=Db(b.baseId,r),v=hb(i),D=f.useRef(null),{onItemDismiss:w}=b;f.useEffect(()=>{const _=m.current;if(b.isRootMenu&&_){const R=()=>{var P;w(),F(),_.contains(document.activeElement)&&((P=c.current)==null||P.focus())};return _.addEventListener(os,R),()=>_.removeEventListener(os,R)}},[b.isRootMenu,t.value,c,w,F]);const x=f.useMemo(()=>{const R=v().map(n2=>n2.value);b.dir==="rtl"&&R.reverse();const P=R.indexOf(b.value),S=R.indexOf(b.previousValue),N=r===b.value,O=S===R.indexOf(r);if(!N&&!O)return D.current;const U=(()=>{if(P!==S){if(N&&S!==-1)return P>S?"from-end":"from-start";if(O&&P!==-1)return P>S?"to-start":"to-end"}return null})();return D.current=U,U},[b.previousValue,b.value,b.dir,v,r]);return g.jsx(vb,{asChild:!0,children:g.jsx(li,{id:B,"aria-labelledby":C,"data-motion":x,"data-orientation":b.orientation,...A,ref:y,disableOutsidePointerEvents:!1,onDismiss:()=>{var R;const _=new Event(os,{bubbles:!0,cancelable:!0});(R=m.current)==null||R.dispatchEvent(_)},onFocusOutside:p2(t.onFocusOutside,_=>{var P;p();const R=_.target;(P=b.rootNavigationMenu)!=null&&P.contains(R)&&_.preventDefault()}),onPointerDownOutside:p2(t.onPointerDownOutside,_=>{var N;const R=_.target,P=v().some(O=>{var U;return(U=O.ref.current)==null?void 0:U.contains(R)}),S=b.isRootMenu&&((N=b.viewport)==null?void 0:N.contains(R));(P||S||!b.isRootMenu)&&_.preventDefault()}),onKeyDown:p2(t.onKeyDown,_=>{var S;const R=_.altKey||_.ctrlKey||_.metaKey;if(_.key==="Tab"&&!R){const N=Yh(_.currentTarget),O=document.activeElement,U=N.findIndex(s2=>s2===O),u2=_.shiftKey?N.slice(0,U).reverse():N.slice(U+1,N.length);zu(u2)?_.preventDefault():(S=l.current)==null||S.focus()}}),onEscapeKeyDown:p2(t.onEscapeKeyDown,_=>{u.current=!0})})})}),Hu="NavigationMenuViewport",pw=f.forwardRef((t,a)=>{const{forceMount:i,...r}=t,l=!!Ee(Hu,t.__scopeNavigationMenu).value;return g.jsx(H0,{present:i||l,children:g.jsx(mw,{...r,ref:a})})});pw.displayName=Hu;var mw=f.forwardRef((t,a)=>{const{__scopeNavigationMenu:i,children:r,...c}=t,l=Ee(Hu,i),u=n0(a,l.onViewportChange),F=cw(La,t.__scopeNavigationMenu),[p,A]=f.useState(null),[b,m]=f.useState(null),y=p?(p==null?void 0:p.width)+"px":void 0,C=p?(p==null?void 0:p.height)+"px":void 0,B=!!l.value,v=B?l.value:l.previousValue;return Xh(b,()=>{b&&A({width:b.offsetWidth,height:b.offsetHeight})}),g.jsx(R2.div,{"data-state":Ou(B),"data-orientation":l.orientation,...c,ref:u,style:{pointerEvents:!B&&l.isRootMenu?"none":void 0,"--radix-navigation-menu-viewport-width":y,"--radix-navigation-menu-viewport-height":C,...c.style},onPointerEnter:p2(t.onPointerEnter,l.onContentEnter),onPointerLeave:p2(t.onPointerLeave,ls(l.onContentLeave)),children:Array.from(F.items).map(([w,{ref:x,forceMount:_,...R}])=>{const P=v===w;return g.jsx(H0,{present:_||P,children:g.jsx(Cb,{...R,ref:ci(x,S=>{P&&S&&m(S)})})},w)})})}),gw="FocusGroup",vb=f.forwardRef((t,a)=>{const{__scopeNavigationMenu:i,...r}=t,c=Ee(gw,i);return g.jsx(Wh.Provider,{scope:i,children:g.jsx(Wh.Slot,{scope:i,children:g.jsx(R2.div,{dir:c.dir,...r,ref:a})})})}),e3=["ArrowRight","ArrowLeft","ArrowUp","ArrowDown"],bw="FocusGroupItem",Bb=f.forwardRef((t,a)=>{const{__scopeNavigationMenu:i,...r}=t,c=nw(i),l=Ee(bw,i);return g.jsx(Wh.ItemSlot,{scope:i,children:g.jsx(R2.button,{...r,ref:a,onKeyDown:p2(t.onKeyDown,u=>{if(["Home","End",...e3].includes(u.key)){let p=c().map(m=>m.ref.current);if([l.dir==="rtl"?"ArrowRight":"ArrowLeft","ArrowUp","End"].includes(u.key)&&p.reverse(),e3.includes(u.key)){const m=p.indexOf(u.currentTarget);p=p.slice(m+1)}setTimeout(()=>zu(p)),u.preventDefault()}})})})});function Yh(t){const a=[],i=document.createTreeWalker(t,NodeFilter.SHOW_ELEMENT,{acceptNode:r=>{const c=r.tagName==="INPUT"&&r.type==="hidden";return r.disabled||r.hidden||c?NodeFilter.FILTER_SKIP:r.tabIndex>=0?NodeFilter.FILTER_ACCEPT:NodeFilter.FILTER_SKIP}});for(;i.nextNode();)a.push(i.currentNode);return a}function zu(t){const a=document.activeElement;return t.some(i=>i===a?!0:(i.focus(),document.activeElement!==a))}function fw(t){return t.forEach(a=>{a.dataset.tabindex=a.getAttribute("tabindex")||"",a.setAttribute("tabindex","-1")}),()=>{t.forEach(a=>{const i=a.dataset.tabindex;a.setAttribute("tabindex",i)})}}function Xh(t,a){const i=I0(a);De(()=>{let r=0;if(t){const c=new ResizeObserver(()=>{cancelAnimationFrame(r),r=window.requestAnimationFrame(i)});return c.observe(t),()=>{window.cancelAnimationFrame(r),c.unobserve(t)}}},[t,i])}function Ou(t){return t?"open":"closed"}function kb(t,a){return`${t}-trigger-${a}`}function Db(t,a){return`${t}-content-${a}`}function ls(t){return a=>a.pointerType==="mouse"?t(a):void 0}var yw=ub,Cw=Ab,vw=gb,Bw=bb,kw=fb,Dw=yb,ww="vocs_NavigationMenu",_w="vocs_NavigationMenu_list",Ew="vocs_NavigationMenu_link",xw="vocs_NavigationMenu_item",Sw="var(--vocs_NavigationMenu_chevronDownIcon)",Rw="vocs_NavigationMenu_trigger vocs_NavigationMenu_link",Tw="vocs_NavigationMenu_content";const wb=t=>g.jsx(yw,{...t,className:l2(t.className,ww)}),_b=t=>g.jsx(Cw,{...t,className:l2(t.className,_w)}),xs=({active:t,children:a,className:i,href:r})=>g.jsx(kw,{asChild:!0,children:g.jsx(ke,{"data-active":t,className:l2(i,Ew),href:r,variant:"styleless",children:a})}),Eb=t=>g.jsx(vw,{...t,className:l2(t.className,xw)}),xb=({active:t,className:a,...i})=>{const{basePath:r}=m0(),c=r;return g.jsx(Bw,{...i,"data-active":t,className:l2(a,Rw),style:Me({[Sw]:`url(${c}/.vocs/icons/chevron-down.svg)`})})},Sb=t=>g.jsx(Dw,{...t,className:l2(t.className,Tw)});Jh.Curtain=Pw;function Jh(){var r;const t=m0(),{showLogo:a,showSidebar:i}=oo();return g.jsxs("div",{className:l2(OD,a&&!i&&jD),children:[g.jsx(zD,{}),a&&g.jsx("div",{className:WD,children:g.jsx("div",{className:qD,children:g.jsx(Ta,{to:"/",style:{alignItems:"center",display:"flex",height:"56px",marginTop:"4px"},children:g.jsx(Lu,{})})})}),g.jsx("div",{className:$m}),g.jsx("div",{className:$m,children:(((r=t.topNav)==null?void 0:r.length)||0)>0&&g.jsx("div",{className:GD,children:g.jsx(Lw,{})})})]})}function Pw(){return g.jsx("div",{className:UD})}function Lw(){const{topNav:t}=m0();if(!t)return null;const{pathname:a}=i0(),i=si({pathname:a,items:t});return g.jsx(wb,{delayDuration:0,children:g.jsxs(_b,{children:[t.map((r,c)=>r.element?Ro(r.element):r.link?g.jsx(xs,{active:i.includes(r.id),className:Jm,href:r.link,children:r.text},c):r.items?g.jsxs(Eb,{className:Jm,children:[g.jsx(xb,{active:i.includes(r.id),children:r.text}),g.jsx(Sb,{className:VD,children:g.jsx(Mw,{items:r.items})})]},c):null),g.jsx(wu,{})]})})}function Mw({items:t}){const{pathname:a}=i0(),i=si({pathname:a,items:t});return g.jsx("ul",{children:t==null?void 0:t.map((r,c)=>g.jsx(xs,{active:i.includes(r.id),href:r.link,children:r.text},c))})}function Nw(){const t=to(),a=m0();return f.useMemo(()=>{const{pattern:i="",text:r="Edit page"}=a.editLink??{};let c="";return typeof i=="function"?c="":t.filePath&&(c=i.replace(/:path/g,t.filePath)),{url:c,text:r}},[a.editLink,t.filePath])}function ju(){const[t,a]=f.useState(!1);return f.useEffect(()=>{a(!0)},[]),t}var Iw="vocs_Footer",Hw="vocs_Footer_container",zw="vocs_Footer_editLink",Ow="vocs_Footer_lastUpdated",jw="vocs_Footer_navigation",t3="vocs_Footer_navigationIcon",Vw="vocs_Footer_navigationIcon_left",Uw="vocs_Footer_navigationIcon_right",o3="vocs_Footer_navigationItem",Gw="vocs_Footer_navigationItem_left",qw="vocs_Footer_navigationItem_right",a3="vocs_Footer_navigationText",n3="vocs_Footer_navigationTextInner",$h="var(--vocs_Icon_size)",Ww="vocs_Icon";function V0({className:t,label:a,icon:i,size:r,style:c}){return g.jsx("div",{"aria-label":a,className:l2(Ww,t),role:"img",style:{...c,...Me({[$h]:r})},children:g.jsx(i,{height:r,width:r})})}var Kw="vocs_Socials",Zw="vocs_Socials_button",Yw="vocs_Socials_icon";function Xw(){return g.jsxs("svg",{width:"100%",height:"100%",xmlns:"http://www.w3.org/2000/svg",viewBox:"0 0 127.14 96.36",children:[g.jsx("title",{children:"Discord"}),g.jsx("g",{id:"图层_2","data-name":"图层 2",children:g.jsx("g",{id:"Discord_Logos","data-name":"Discord Logos",children:g.jsx("g",{id:"Discord_Logo_-_Large_-_White","data-name":"Discord Logo - Large - White",children:g.jsx("path",{d:"M107.7,8.07A105.15,105.15,0,0,0,81.47,0a72.06,72.06,0,0,0-3.36,6.83A97.68,97.68,0,0,0,49,6.83,72.37,72.37,0,0,0,45.64,0,105.89,105.89,0,0,0,19.39,8.09C2.79,32.65-1.71,56.6.54,80.21h0A105.73,105.73,0,0,0,32.71,96.36,77.7,77.7,0,0,0,39.6,85.25a68.42,68.42,0,0,1-10.85-5.18c.91-.66,1.8-1.34,2.66-2a75.57,75.57,0,0,0,64.32,0c.87.71,1.76,1.39,2.66,2a68.68,68.68,0,0,1-10.87,5.19,77,77,0,0,0,6.89,11.1A105.25,105.25,0,0,0,126.6,80.22h0C129.24,52.84,122.09,29.11,107.7,8.07ZM42.45,65.69C36.18,65.69,31,60,31,53s5-12.74,11.43-12.74S54,46,53.89,53,48.84,65.69,42.45,65.69Zm42.24,0C78.41,65.69,73.25,60,73.25,53s5-12.74,11.44-12.74S96.23,46,96.12,53,91.08,65.69,84.69,65.69Z",fill:"currentColor"})})})})]})}function Jw(){return g.jsxs("svg",{width:"100%",height:"100%",viewBox:"0 0 98 96",xmlns:"http://www.w3.org/2000/svg",children:[g.jsx("title",{children:"GitHub"}),g.jsx("path",{fillRule:"evenodd",clipRule:"evenodd",d:"M48.854 0C21.839 0 0 22 0 49.217c0 21.756 13.993 40.172 33.405 46.69 2.427.49 3.316-1.059 3.316-2.362 0-1.141-.08-5.052-.08-9.127-13.59 2.934-16.42-5.867-16.42-5.867-2.184-5.704-5.42-7.17-5.42-7.17-4.448-3.015.324-3.015.324-3.015 4.934.326 7.523 5.052 7.523 5.052 4.367 7.496 11.404 5.378 14.235 4.074.404-3.178 1.699-5.378 3.074-6.6-10.839-1.141-22.243-5.378-22.243-24.283 0-5.378 1.94-9.778 5.014-13.2-.485-1.222-2.184-6.275.486-13.038 0 0 4.125-1.304 13.426 5.052a46.97 46.97 0 0 1 12.214-1.63c4.125 0 8.33.571 12.213 1.63 9.302-6.356 13.427-5.052 13.427-5.052 2.67 6.763.97 11.816.485 13.038 3.155 3.422 5.015 7.822 5.015 13.2 0 18.905-11.404 23.06-22.324 24.283 1.78 1.548 3.316 4.481 3.316 9.126 0 6.6-.08 11.897-.08 13.526 0 1.304.89 2.853 3.316 2.364 19.412-6.52 33.405-24.935 33.405-46.691C97.707 22 75.788 0 48.854 0z",fill:"currentColor"})]})}function $w(){return g.jsxs("svg",{xmlns:"http://www.w3.org/2000/svg",width:"100%",height:"100%",viewBox:"0 0 50 50",children:[g.jsx("title",{children:"Telegram"}),g.jsx("path",{d:"M25 2c12.703 0 23 10.297 23 23S37.703 48 25 48 2 37.703 2 25 12.297 2 25 2zm7.934 32.375c.423-1.298 2.405-14.234 2.65-16.783.074-.772-.17-1.285-.648-1.514-.578-.278-1.434-.139-2.427.219-1.362.491-18.774 7.884-19.78 8.312-.954.405-1.856.847-1.856 1.487 0 .45.267.703 1.003.966.766.273 2.695.858 3.834 1.172 1.097.303 2.346.04 3.046-.395.742-.461 9.305-6.191 9.92-6.693.614-.502 1.104.141.602.644-.502.502-6.38 6.207-7.155 6.997-.941.959-.273 1.953.358 2.351.721.454 5.906 3.932 6.687 4.49.781.558 1.573.811 2.298.811.725 0 1.107-.955 1.468-2.064z",fill:"currentColor"})]})}function Qw(){return g.jsxs("svg",{width:"32",height:"32",viewBox:"0 0 32 32",fill:"none",xmlns:"http://www.w3.org/2000/svg",children:[g.jsx("title",{children:"Warpcast"}),g.jsx("path",{fillRule:"evenodd",clipRule:"evenodd",d:"M7.92028 31.9901H24.0698C28.4371 31.9901 31.9901 28.4373 31.9901 24.0699V7.92053C31.9901 3.55319 28.4371 0.000137329 24.0698 0.000137329H7.92028C3.55304 0.000137329 0 3.55319 0 7.92053V24.0699C0 28.4373 3.55304 31.9901 7.92028 31.9901ZM19.4134 16.048L20.9908 10.124H25.1383L21.2924 23.2218H17.7062L15.9951 17.1397L14.284 23.2218H10.7055L6.85115 10.124H10.999L12.5915 16.0916L14.1891 10.124H17.8309L19.4134 16.048Z",fill:"currentColor"})]})}function e_(){return g.jsxs("svg",{width:"100%",height:"100%",viewBox:"0 0 1200 1227",fill:"none",xmlns:"http://www.w3.org/2000/svg",children:[g.jsx("title",{children:"X"}),g.jsx("path",{d:"M714.163 519.284L1160.89 0H1055.03L667.137 450.887L357.328 0H0L468.492 681.821L0 1226.37H105.866L515.491 750.218L842.672 1226.37H1200L714.137 519.284H714.163ZM569.165 687.828L521.697 619.934L144.011 79.6944H306.615L611.412 515.685L658.88 583.579L1055.08 1150.3H892.476L569.165 687.854V687.828Z",fill:"currentColor"})]})}const t_={discord:Xw,github:Jw,telegram:$w,warpcast:Qw,x:e_},o_={discord:"18px",github:"17px",telegram:"17px",warpcast:"17px",x:"16px"};function Vu(){const t=m0();return!t.socials||t.socials.length===0?null:g.jsx("div",{className:Kw,children:t.socials.map((a,i)=>g.jsxs(f.Fragment,{children:[i!==0&&g.jsx("div",{style:{width:"1px",marginTop:$n[4],marginBottom:$n[4],backgroundColor:zh.border}}),g.jsx("a",{className:Zw,href:a.link,target:"_blank",rel:"noopener noreferrer",children:g.jsx(V0,{className:Yw,label:a.label,icon:t_[a.icon],size:o_[a.icon]||"20px"})})]},i))})}function a_(){return g.jsxs("svg",{width:"100%",height:"100%",viewBox:"0 0 72 60",fill:"none",xmlns:"http://www.w3.org/2000/svg",children:[g.jsx("title",{children:"Arrow Left"}),g.jsx("path",{d:"M0.325684 29.7461C0.325684 30.8203 0.813963 31.8457 1.69286 32.6758L26.8882 57.8223C27.7671 58.6524 28.7437 59.043 29.7691 59.043C31.9175 59.043 33.5777 57.4317 33.5777 55.2344C33.5777 54.209 33.2359 53.1836 32.5035 52.5L25.7652 45.5176L9.26126 30.6738L8.38236 32.7734L21.3706 33.7012H67.4644C69.7593 33.7012 71.3706 32.041 71.3706 29.7461C71.3706 27.4512 69.7593 25.791 67.4644 25.791H21.3706L8.38236 26.7188L9.26126 28.8672L25.7652 13.9746L32.5035 6.99221C33.2359 6.30861 33.5777 5.28322 33.5777 4.25782C33.5777 2.06052 31.9175 0.449219 29.7691 0.449219C28.7437 0.449219 27.7671 0.839814 26.8882 1.66991L1.69286 26.8164C0.813963 27.6465 0.325684 28.6719 0.325684 29.7461Z",fill:"currentColor"})]})}function n_(){return g.jsxs("svg",{width:"100%",height:"100%",viewBox:"0 0 72 60",fill:"none",xmlns:"http://www.w3.org/2000/svg",children:[g.jsx("title",{children:"Arrow Right"}),g.jsx("path",{d:"M71.3706 29.7461C71.3706 28.6719 70.8824 27.6465 70.0035 26.8164L44.8081 1.66991C43.9292 0.839814 42.9527 0.449219 41.9273 0.449219C39.7789 0.449219 38.1187 2.06052 38.1187 4.25782C38.1187 5.28322 38.4605 6.30861 39.1929 6.99221L45.9312 13.9746L62.4351 28.8672L63.314 26.7188L50.3257 25.791H4.23196C1.93706 25.791 0.325684 27.4512 0.325684 29.7461C0.325684 32.041 1.93706 33.7012 4.23196 33.7012H50.3257L63.314 32.7734L62.4351 30.6738L45.9312 45.5176L39.1929 52.5C38.4605 53.1836 38.1187 54.209 38.1187 55.2344C38.1187 57.4317 39.7789 59.043 41.9273 59.043C42.9527 59.043 43.9292 58.6524 44.8081 57.8223L70.0035 32.6758C70.8824 31.8457 71.3706 30.8203 71.3706 29.7461Z",fill:"currentColor"})]})}function i_(){const{layout:t}=oo(),a=ju(),i=to(),r=f.useMemo(()=>i.lastUpdatedAt?new Date(i.lastUpdatedAt):void 0,[i.lastUpdatedAt]),c=f.useMemo(()=>r==null?void 0:r.toISOString(),[r]);return g.jsxs("footer",{className:Iw,"data-layout":t,children:[t==="docs"&&g.jsxs(g.Fragment,{children:[g.jsxs("div",{className:Hw,children:[g.jsx(r_,{}),a&&i.lastUpdatedAt&&g.jsxs("div",{className:Ow,children:["Last updated:"," ",g.jsx("time",{dateTime:c,children:new Intl.DateTimeFormat(void 0,{dateStyle:"short",timeStyle:"short"}).format(r)})]})]}),g.jsx(s_,{})]}),t!=="docs"&&g.jsx(Vu,{}),g.jsx(pB,{})]})}function r_(){const t=Nw();return t.url?g.jsx("div",{children:g.jsxs(ke,{className:zw,href:t.url,children:[g.jsx(FB,{})," ",t.text]})}):null}function s_(){const t=ju(),a=Bs(),{pathname:i}=i0(),r=f.useMemo(()=>Rb(a.items||[]).filter(p=>p.link),[a]),c=f.useMemo(()=>r.findIndex(p=>p.link===i),[r,i]),[l,u]=f.useMemo(()=>c<0?[]:c===0?[null,r[c+1]]:c===r.length-1?[r[c-1],null]:[r[c-1],r[c+1]],[c,r]),F=gu();return f.useEffect(()=>{let p=c,A=!1;const b=y=>{if(y.code==="ShiftLeft"&&(A=!0),A){const C=r[p+1],B=r[p-1];y.code==="ArrowRight"&&(C!=null&&C.link)&&(!C.link.match(/^(\.*\/|#)/)?window.open(C.link,"noopener,noreferrer"):F(C.link),p++),y.code==="ArrowLeft"&&(B!=null&&B.link)&&(!B.link.match(/^(\.*\/|#)/)?window.open(B.link,"noopener,noreferrer"):F(B.link),p--)}},m=y=>{y.code==="ShiftLeft"&&(A=!1)};return window.addEventListener("keydown",b),window.addEventListener("keyup",m),()=>{window.removeEventListener("keydown",b),window.removeEventListener("keyup",m)}},[]),t?g.jsxs("div",{className:jw,children:[l?g.jsxs(ke,{className:l2(o3,Gw),href:l.link,variant:"styleless",children:[g.jsxs("div",{className:a3,children:[g.jsx("div",{className:l2(t3,Vw),style:Me({[$h]:"0.75em"}),children:g.jsx(V0,{label:"Previous",icon:a_})}),g.jsx("div",{className:n3,children:l.text})]}),g.jsx(Ea,{description:"Previous",keys:["shift","←"]})]}):g.jsx("div",{}),u?g.jsxs(ke,{className:l2(o3,qw),href:u.link,variant:"styleless",children:[g.jsxs("div",{className:a3,children:[g.jsx("div",{className:n3,style:{textAlign:"right"},children:u.text}),g.jsx("div",{className:l2(t3,Uw),style:Me({[$h]:"0.75em"}),children:g.jsx(V0,{label:"Next",icon:n_})})]}),g.jsx(Ea,{description:"Next",keys:["shift","→"]})]}):g.jsx("div",{})]}):null}function Rb(t){const a=[];for(const i of t)i.link&&a.push(i),i.items&&a.push(...Rb(i.items));return a}var Ss="Collapsible",[c_,Tb]=Ne(Ss),[l_,Uu]=c_(Ss),Pb=f.forwardRef((t,a)=>{const{__scopeCollapsible:i,open:r,defaultOpen:c,disabled:l,onOpenChange:u,...F}=t,[p,A]=$e({prop:r,defaultProp:c??!1,onChange:u,caller:Ss});return g.jsx(l_,{scope:i,disabled:l,contentId:ve(),open:p,onOpenToggle:f.useCallback(()=>A(b=>!b),[A]),children:g.jsx(R2.div,{"data-state":qu(p),"data-disabled":l?"":void 0,...F,ref:a})})});Pb.displayName=Ss;var Lb="CollapsibleTrigger",Mb=f.forwardRef((t,a)=>{const{__scopeCollapsible:i,...r}=t,c=Uu(Lb,i);return g.jsx(R2.button,{type:"button","aria-controls":c.contentId,"aria-expanded":c.open||!1,"data-state":qu(c.open),"data-disabled":c.disabled?"":void 0,disabled:c.disabled,...r,ref:a,onClick:p2(t.onClick,c.onOpenToggle)})});Mb.displayName=Lb;var Gu="CollapsibleContent",Nb=f.forwardRef((t,a)=>{const{forceMount:i,...r}=t,c=Uu(Gu,t.__scopeCollapsible);return g.jsx(H0,{present:i||c.open,children:({present:l})=>g.jsx(h_,{...r,ref:a,present:l})})});Nb.displayName=Gu;var h_=f.forwardRef((t,a)=>{const{__scopeCollapsible:i,present:r,children:c,...l}=t,u=Uu(Gu,i),[F,p]=f.useState(r),A=f.useRef(null),b=n0(a,A),m=f.useRef(0),y=m.current,C=f.useRef(0),B=C.current,v=u.open||F,D=f.useRef(v),w=f.useRef(void 0);return f.useEffect(()=>{const x=requestAnimationFrame(()=>D.current=!1);return()=>cancelAnimationFrame(x)},[]),De(()=>{const x=A.current;if(x){w.current=w.current||{transitionDuration:x.style.transitionDuration,animationName:x.style.animationName},x.style.transitionDuration="0s",x.style.animationName="none";const _=x.getBoundingClientRect();m.current=_.height,C.current=_.width,D.current||(x.style.transitionDuration=w.current.transitionDuration,x.style.animationName=w.current.animationName),p(r)}},[u.open,r]),g.jsx(R2.div,{"data-state":qu(u.open),"data-disabled":u.disabled?"":void 0,id:u.contentId,hidden:!v,...l,ref:b,style:{"--radix-collapsible-content-height":y?`${y}px`:void 0,"--radix-collapsible-content-width":B?`${B}px`:void 0,...t.style},children:v&&c})});function qu(t){return t?"open":"closed"}var u_=Pb,F_=Mb,d_=Nb,He="Accordion",A_=["Home","End","ArrowDown","ArrowUp","ArrowLeft","ArrowRight"],[Wu,p_,m_]=ui(He),[Rs,q8]=Ne(He,[m_,Tb]),Ku=Tb(),Ib=a0.forwardRef((t,a)=>{const{type:i,...r}=t,c=r,l=r;return g.jsx(Wu.Provider,{scope:t.__scopeAccordion,children:i==="multiple"?g.jsx(y_,{...l,ref:a}):g.jsx(f_,{...c,ref:a})})});Ib.displayName=He;var[Hb,g_]=Rs(He),[zb,b_]=Rs(He,{collapsible:!1}),f_=a0.forwardRef((t,a)=>{const{value:i,defaultValue:r,onValueChange:c=()=>{},collapsible:l=!1,...u}=t,[F,p]=$e({prop:i,defaultProp:r??"",onChange:c,caller:He});return g.jsx(Hb,{scope:t.__scopeAccordion,value:a0.useMemo(()=>F?[F]:[],[F]),onItemOpen:p,onItemClose:a0.useCallback(()=>l&&p(""),[l,p]),children:g.jsx(zb,{scope:t.__scopeAccordion,collapsible:l,children:g.jsx(Ob,{...u,ref:a})})})}),y_=a0.forwardRef((t,a)=>{const{value:i,defaultValue:r,onValueChange:c=()=>{},...l}=t,[u,F]=$e({prop:i,defaultProp:r??[],onChange:c,caller:He}),p=a0.useCallback(b=>F((m=[])=>[...m,b]),[F]),A=a0.useCallback(b=>F((m=[])=>m.filter(y=>y!==b)),[F]);return g.jsx(Hb,{scope:t.__scopeAccordion,value:u,onItemOpen:p,onItemClose:A,children:g.jsx(zb,{scope:t.__scopeAccordion,collapsible:!0,children:g.jsx(Ob,{...l,ref:a})})})}),[C_,Ts]=Rs(He),Ob=a0.forwardRef((t,a)=>{const{__scopeAccordion:i,disabled:r,dir:c,orientation:l="vertical",...u}=t,F=a0.useRef(null),p=n0(F,a),A=p_(i),m=hi(c)==="ltr",y=p2(t.onKeyDown,C=>{var O;if(!A_.includes(C.key))return;const B=C.target,v=A().filter(U=>{var n2;return!((n2=U.ref.current)!=null&&n2.disabled)}),D=v.findIndex(U=>U.ref.current===B),w=v.length;if(D===-1)return;C.preventDefault();let x=D;const _=0,R=w-1,P=()=>{x=D+1,x>R&&(x=_)},S=()=>{x=D-1,x<_&&(x=R)};switch(C.key){case"Home":x=_;break;case"End":x=R;break;case"ArrowRight":l==="horizontal"&&(m?P():S());break;case"ArrowDown":l==="vertical"&&P();break;case"ArrowLeft":l==="horizontal"&&(m?S():P());break;case"ArrowUp":l==="vertical"&&S();break}const N=x%w;(O=v[N].ref.current)==null||O.focus()});return g.jsx(C_,{scope:i,disabled:r,direction:c,orientation:l,children:g.jsx(Wu.Slot,{scope:i,children:g.jsx(R2.div,{...u,"data-orientation":l,ref:p,onKeyDown:r?void 0:y})})})}),hs="AccordionItem",[v_,Zu]=Rs(hs),jb=a0.forwardRef((t,a)=>{const{__scopeAccordion:i,value:r,...c}=t,l=Ts(hs,i),u=g_(hs,i),F=Ku(i),p=ve(),A=r&&u.value.includes(r)||!1,b=l.disabled||t.disabled;return g.jsx(v_,{scope:i,open:A,disabled:b,triggerId:p,children:g.jsx(u_,{"data-orientation":l.orientation,"data-state":Wb(A),...F,...c,ref:a,disabled:b,open:A,onOpenChange:m=>{m?u.onItemOpen(r):u.onItemClose(r)}})})});jb.displayName=hs;var Vb="AccordionHeader",B_=a0.forwardRef((t,a)=>{const{__scopeAccordion:i,...r}=t,c=Ts(He,i),l=Zu(Vb,i);return g.jsx(R2.h3,{"data-orientation":c.orientation,"data-state":Wb(l.open),"data-disabled":l.disabled?"":void 0,...r,ref:a})});B_.displayName=Vb;var Qh="AccordionTrigger",Ub=a0.forwardRef((t,a)=>{const{__scopeAccordion:i,...r}=t,c=Ts(He,i),l=Zu(Qh,i),u=b_(Qh,i),F=Ku(i);return g.jsx(Wu.ItemSlot,{scope:i,children:g.jsx(F_,{"aria-disabled":l.open&&!u.collapsible||void 0,"data-orientation":c.orientation,id:l.triggerId,...F,...r,ref:a})})});Ub.displayName=Qh;var Gb="AccordionContent",qb=a0.forwardRef((t,a)=>{const{__scopeAccordion:i,...r}=t,c=Ts(He,i),l=Zu(Gb,i),u=Ku(i);return g.jsx(d_,{role:"region","aria-labelledby":l.triggerId,"data-orientation":c.orientation,...u,...r,ref:a,style:{"--radix-accordion-content-height":"var(--radix-collapsible-content-height)","--radix-accordion-content-width":"var(--radix-collapsible-content-width)",...t.style}})});qb.displayName=Gb;function Wb(t){return t?"open":"closed"}var k_=Ib,D_=jb,w_=Ub,__=qb,E_="vocs_MobileSearch_searchButton";function x_(){const[t,a]=f.useState(!1);return g.jsxs(Yg,{open:t,onOpenChange:a,children:[g.jsx(Xg,{asChild:!0,children:g.jsx("button",{className:E_,type:"button","aria-label":"Search",children:g.jsx(Du,{height:21,width:21})})}),g.jsx(cb,{open:t,onClose:()=>a(!1)})]})}var S_="vocs_MobileTopNav",R_="vocs_MobileTopNav_content",T_="vocs_MobileTopNav_curtain",i3="vocs_MobileTopNav_curtainGroup",yh="vocs_MobileTopNav_curtainItem",Ch="vocs_MobileTopNav_group",P_="vocs_MobileTopNav_item",L_="vocs_MobileTopNav_logo",Kb="vocs_MobileTopNav_menuTrigger",M_="vocs_MobileTopNav_menuTitle",N_="vocs_MobileTopNav_navigation_compact",Zb="vocs_MobileTopNav_navigation",I_="vocs_MobileTopNav_navigationContent",Gr="vocs_MobileTopNav_navigationItem",H_="var(--vocs_MobileTopNav_chevronDownIcon)",z_="var(--vocs_MobileTopNav_chevronUpIcon)",O_="vocs_MobileTopNav_trigger",r3="vocs_MobileTopNav_outlineTrigger",j_="vocs_MobileTopNav_outlinePopover",s3="vocs_MobileTopNav_section",V_="vocs_MobileTopNav_separator",U_="vocs_MobileTopNav_sidebarPopover",G_="vocs_MobileTopNav_topNavPopover",q_="vocs_MobileTopNav_topNavPopoverFooter";function W_(t,a){let i=!1;return()=>{i=!0,setTimeout(()=>{i&&t(),i=!1},a)}}function K_(t){const[a,i]=f.useState(void 0);return De(()=>{if(t){i({width:t.offsetWidth,height:t.offsetHeight});const r=new ResizeObserver(c=>{if(!Array.isArray(c)||!c.length)return;const l=c[0];let u,F;if("borderBoxSize"in l){const p=l.borderBoxSize,A=Array.isArray(p)?p[0]:p;u=A.inlineSize,F=A.blockSize}else u=t.offsetWidth,F=t.offsetHeight;i({width:u,height:F})});return r.observe(t,{box:"border-box"}),()=>r.unobserve(t)}else i(void 0)},[t]),a}const Z_=["top","right","bottom","left"],$t=Math.min,se=Math.max,us=Math.round,qr=Math.floor,Xe=t=>({x:t,y:t}),Y_={left:"right",right:"left",bottom:"top",top:"bottom"},X_={start:"end",end:"start"};function eu(t,a,i){return se(t,$t(a,i))}function Ct(t,a){return typeof t=="function"?t(a):t}function vt(t){return t.split("-")[0]}function ja(t){return t.split("-")[1]}function Yu(t){return t==="x"?"y":"x"}function Xu(t){return t==="y"?"height":"width"}const J_=new Set(["top","bottom"]);function Ze(t){return J_.has(vt(t))?"y":"x"}function Ju(t){return Yu(Ze(t))}function $_(t,a,i){i===void 0&&(i=!1);const r=ja(t),c=Ju(t),l=Xu(c);let u=c==="x"?r===(i?"end":"start")?"right":"left":r==="start"?"bottom":"top";return a.reference[l]>a.floating[l]&&(u=Fs(u)),[u,Fs(u)]}function Q_(t){const a=Fs(t);return[tu(t),a,tu(a)]}function tu(t){return t.replace(/start|end/g,a=>X_[a])}const c3=["left","right"],l3=["right","left"],eE=["top","bottom"],tE=["bottom","top"];function oE(t,a,i){switch(t){case"top":case"bottom":return i?a?l3:c3:a?c3:l3;case"left":case"right":return a?eE:tE;default:return[]}}function aE(t,a,i,r){const c=ja(t);let l=oE(vt(t),i==="start",r);return c&&(l=l.map(u=>u+"-"+c),a&&(l=l.concat(l.map(tu)))),l}function Fs(t){return t.replace(/left|right|bottom|top/g,a=>Y_[a])}function nE(t){return{top:0,right:0,bottom:0,left:0,...t}}function Yb(t){return typeof t!="number"?nE(t):{top:t,right:t,bottom:t,left:t}}function ds(t){const{x:a,y:i,width:r,height:c}=t;return{width:r,height:c,top:i,left:a,right:a+r,bottom:i+c,x:a,y:i}}function h3(t,a,i){let{reference:r,floating:c}=t;const l=Ze(a),u=Ju(a),F=Xu(u),p=vt(a),A=l==="y",b=r.x+r.width/2-c.width/2,m=r.y+r.height/2-c.height/2,y=r[F]/2-c[F]/2;let C;switch(p){case"top":C={x:b,y:r.y-c.height};break;case"bottom":C={x:b,y:r.y+r.height};break;case"right":C={x:r.x+r.width,y:m};break;case"left":C={x:r.x-c.width,y:m};break;default:C={x:r.x,y:r.y}}switch(ja(a)){case"start":C[u]-=y*(i&&A?-1:1);break;case"end":C[u]+=y*(i&&A?-1:1);break}return C}const iE=async(t,a,i)=>{const{placement:r="bottom",strategy:c="absolute",middleware:l=[],platform:u}=i,F=l.filter(Boolean),p=await(u.isRTL==null?void 0:u.isRTL(a));let A=await u.getElementRects({reference:t,floating:a,strategy:c}),{x:b,y:m}=h3(A,r,p),y=r,C={},B=0;for(let v=0;v<F.length;v++){const{name:D,fn:w}=F[v],{x,y:_,data:R,reset:P}=await w({x:b,y:m,initialPlacement:r,placement:y,strategy:c,middlewareData:C,rects:A,platform:u,elements:{reference:t,floating:a}});b=x??b,m=_??m,C={...C,[D]:{...C[D],...R}},P&&B<=50&&(B++,typeof P=="object"&&(P.placement&&(y=P.placement),P.rects&&(A=P.rects===!0?await u.getElementRects({reference:t,floating:a,strategy:c}):P.rects),{x:b,y:m}=h3(A,y,p)),v=-1)}return{x:b,y:m,placement:y,strategy:c,middlewareData:C}};async function oi(t,a){var i;a===void 0&&(a={});const{x:r,y:c,platform:l,rects:u,elements:F,strategy:p}=t,{boundary:A="clippingAncestors",rootBoundary:b="viewport",elementContext:m="floating",altBoundary:y=!1,padding:C=0}=Ct(a,t),B=Yb(C),D=F[y?m==="floating"?"reference":"floating":m],w=ds(await l.getClippingRect({element:(i=await(l.isElement==null?void 0:l.isElement(D)))==null||i?D:D.contextElement||await(l.getDocumentElement==null?void 0:l.getDocumentElement(F.floating)),boundary:A,rootBoundary:b,strategy:p})),x=m==="floating"?{x:r,y:c,width:u.floating.width,height:u.floating.height}:u.reference,_=await(l.getOffsetParent==null?void 0:l.getOffsetParent(F.floating)),R=await(l.isElement==null?void 0:l.isElement(_))?await(l.getScale==null?void 0:l.getScale(_))||{x:1,y:1}:{x:1,y:1},P=ds(l.convertOffsetParentRelativeRectToViewportRelativeRect?await l.convertOffsetParentRelativeRectToViewportRelativeRect({elements:F,rect:x,offsetParent:_,strategy:p}):x);return{top:(w.top-P.top+B.top)/R.y,bottom:(P.bottom-w.bottom+B.bottom)/R.y,left:(w.left-P.left+B.left)/R.x,right:(P.right-w.right+B.right)/R.x}}const rE=t=>({name:"arrow",options:t,async fn(a){const{x:i,y:r,placement:c,rects:l,platform:u,elements:F,middlewareData:p}=a,{element:A,padding:b=0}=Ct(t,a)||{};if(A==null)return{};const m=Yb(b),y={x:i,y:r},C=Ju(c),B=Xu(C),v=await u.getDimensions(A),D=C==="y",w=D?"top":"left",x=D?"bottom":"right",_=D?"clientHeight":"clientWidth",R=l.reference[B]+l.reference[C]-y[C]-l.floating[B],P=y[C]-l.reference[C],S=await(u.getOffsetParent==null?void 0:u.getOffsetParent(A));let N=S?S[_]:0;(!N||!await(u.isElement==null?void 0:u.isElement(S)))&&(N=F.floating[_]||l.floating[B]);const O=R/2-P/2,U=N/2-v[B]/2-1,n2=$t(m[w],U),u2=$t(m[x],U),s2=n2,c2=N-v[B]-u2,W=N/2-v[B]/2+O,F2=eu(s2,W,c2),I=!p.arrow&&ja(c)!=null&&W!==F2&&l.reference[B]/2-(W<s2?n2:u2)-v[B]/2<0,q=I?W<s2?W-s2:W-c2:0;return{[C]:y[C]+q,data:{[C]:F2,centerOffset:W-F2-q,...I&&{alignmentOffset:q}},reset:I}}}),sE=function(t){return t===void 0&&(t={}),{name:"flip",options:t,async fn(a){var i,r;const{placement:c,middlewareData:l,rects:u,initialPlacement:F,platform:p,elements:A}=a,{mainAxis:b=!0,crossAxis:m=!0,fallbackPlacements:y,fallbackStrategy:C="bestFit",fallbackAxisSideDirection:B="none",flipAlignment:v=!0,...D}=Ct(t,a);if((i=l.arrow)!=null&&i.alignmentOffset)return{};const w=vt(c),x=Ze(F),_=vt(F)===F,R=await(p.isRTL==null?void 0:p.isRTL(A.floating)),P=y||(_||!v?[Fs(F)]:Q_(F)),S=B!=="none";!y&&S&&P.push(...aE(F,v,B,R));const N=[F,...P],O=await oi(a,D),U=[];let n2=((r=l.flip)==null?void 0:r.overflows)||[];if(b&&U.push(O[w]),m){const W=$_(c,u,R);U.push(O[W[0]],O[W[1]])}if(n2=[...n2,{placement:c,overflows:U}],!U.every(W=>W<=0)){var u2,s2;const W=(((u2=l.flip)==null?void 0:u2.index)||0)+1,F2=N[W];if(F2&&(!(m==="alignment"?x!==Ze(F2):!1)||n2.every(J=>J.overflows[0]>0&&Ze(J.placement)===x)))return{data:{index:W,overflows:n2},reset:{placement:F2}};let I=(s2=n2.filter(q=>q.overflows[0]<=0).sort((q,J)=>q.overflows[1]-J.overflows[1])[0])==null?void 0:s2.placement;if(!I)switch(C){case"bestFit":{var c2;const q=(c2=n2.filter(J=>{if(S){const Y=Ze(J.placement);return Y===x||Y==="y"}return!0}).map(J=>[J.placement,J.overflows.filter(Y=>Y>0).reduce((Y,T)=>Y+T,0)]).sort((J,Y)=>J[1]-Y[1])[0])==null?void 0:c2[0];q&&(I=q);break}case"initialPlacement":I=F;break}if(c!==I)return{reset:{placement:I}}}return{}}}};function u3(t,a){return{top:t.top-a.height,right:t.right-a.width,bottom:t.bottom-a.height,left:t.left-a.width}}function F3(t){return Z_.some(a=>t[a]>=0)}const cE=function(t){return t===void 0&&(t={}),{name:"hide",options:t,async fn(a){const{rects:i}=a,{strategy:r="referenceHidden",...c}=Ct(t,a);switch(r){case"referenceHidden":{const l=await oi(a,{...c,elementContext:"reference"}),u=u3(l,i.reference);return{data:{referenceHiddenOffsets:u,referenceHidden:F3(u)}}}case"escaped":{const l=await oi(a,{...c,altBoundary:!0}),u=u3(l,i.floating);return{data:{escapedOffsets:u,escaped:F3(u)}}}default:return{}}}}},Xb=new Set(["left","top"]);async function lE(t,a){const{placement:i,platform:r,elements:c}=t,l=await(r.isRTL==null?void 0:r.isRTL(c.floating)),u=vt(i),F=ja(i),p=Ze(i)==="y",A=Xb.has(u)?-1:1,b=l&&p?-1:1,m=Ct(a,t);let{mainAxis:y,crossAxis:C,alignmentAxis:B}=typeof m=="number"?{mainAxis:m,crossAxis:0,alignmentAxis:null}:{mainAxis:m.mainAxis||0,crossAxis:m.crossAxis||0,alignmentAxis:m.alignmentAxis};return F&&typeof B=="number"&&(C=F==="end"?B*-1:B),p?{x:C*b,y:y*A}:{x:y*A,y:C*b}}const hE=function(t){return t===void 0&&(t=0),{name:"offset",options:t,async fn(a){var i,r;const{x:c,y:l,placement:u,middlewareData:F}=a,p=await lE(a,t);return u===((i=F.offset)==null?void 0:i.placement)&&(r=F.arrow)!=null&&r.alignmentOffset?{}:{x:c+p.x,y:l+p.y,data:{...p,placement:u}}}}},uE=function(t){return t===void 0&&(t={}),{name:"shift",options:t,async fn(a){const{x:i,y:r,placement:c}=a,{mainAxis:l=!0,crossAxis:u=!1,limiter:F={fn:D=>{let{x:w,y:x}=D;return{x:w,y:x}}},...p}=Ct(t,a),A={x:i,y:r},b=await oi(a,p),m=Ze(vt(c)),y=Yu(m);let C=A[y],B=A[m];if(l){const D=y==="y"?"top":"left",w=y==="y"?"bottom":"right",x=C+b[D],_=C-b[w];C=eu(x,C,_)}if(u){const D=m==="y"?"top":"left",w=m==="y"?"bottom":"right",x=B+b[D],_=B-b[w];B=eu(x,B,_)}const v=F.fn({...a,[y]:C,[m]:B});return{...v,data:{x:v.x-i,y:v.y-r,enabled:{[y]:l,[m]:u}}}}}},FE=function(t){return t===void 0&&(t={}),{options:t,fn(a){const{x:i,y:r,placement:c,rects:l,middlewareData:u}=a,{offset:F=0,mainAxis:p=!0,crossAxis:A=!0}=Ct(t,a),b={x:i,y:r},m=Ze(c),y=Yu(m);let C=b[y],B=b[m];const v=Ct(F,a),D=typeof v=="number"?{mainAxis:v,crossAxis:0}:{mainAxis:0,crossAxis:0,...v};if(p){const _=y==="y"?"height":"width",R=l.reference[y]-l.floating[_]+D.mainAxis,P=l.reference[y]+l.reference[_]-D.mainAxis;C<R?C=R:C>P&&(C=P)}if(A){var w,x;const _=y==="y"?"width":"height",R=Xb.has(vt(c)),P=l.reference[m]-l.floating[_]+(R&&((w=u.offset)==null?void 0:w[m])||0)+(R?0:D.crossAxis),S=l.reference[m]+l.reference[_]+(R?0:((x=u.offset)==null?void 0:x[m])||0)-(R?D.crossAxis:0);B<P?B=P:B>S&&(B=S)}return{[y]:C,[m]:B}}}},dE=function(t){return t===void 0&&(t={}),{name:"size",options:t,async fn(a){var i,r;const{placement:c,rects:l,platform:u,elements:F}=a,{apply:p=()=>{},...A}=Ct(t,a),b=await oi(a,A),m=vt(c),y=ja(c),C=Ze(c)==="y",{width:B,height:v}=l.floating;let D,w;m==="top"||m==="bottom"?(D=m,w=y===(await(u.isRTL==null?void 0:u.isRTL(F.floating))?"start":"end")?"left":"right"):(w=m,D=y==="end"?"top":"bottom");const x=v-b.top-b.bottom,_=B-b.left-b.right,R=$t(v-b[D],x),P=$t(B-b[w],_),S=!a.middlewareData.shift;let N=R,O=P;if((i=a.middlewareData.shift)!=null&&i.enabled.x&&(O=_),(r=a.middlewareData.shift)!=null&&r.enabled.y&&(N=x),S&&!y){const n2=se(b.left,0),u2=se(b.right,0),s2=se(b.top,0),c2=se(b.bottom,0);C?O=B-2*(n2!==0||u2!==0?n2+u2:se(b.left,b.right)):N=v-2*(s2!==0||c2!==0?s2+c2:se(b.top,b.bottom))}await p({...a,availableWidth:O,availableHeight:N});const U=await u.getDimensions(F.floating);return B!==U.width||v!==U.height?{reset:{rects:!0}}:{}}}};function Ps(){return typeof window<"u"}function Va(t){return Jb(t)?(t.nodeName||"").toLowerCase():"#document"}function ce(t){var a;return(t==null||(a=t.ownerDocument)==null?void 0:a.defaultView)||window}function Qe(t){var a;return(a=(Jb(t)?t.ownerDocument:t.document)||window.document)==null?void 0:a.documentElement}function Jb(t){return Ps()?t instanceof Node||t instanceof ce(t).Node:!1}function E0(t){return Ps()?t instanceof Element||t instanceof ce(t).Element:!1}function Je(t){return Ps()?t instanceof HTMLElement||t instanceof ce(t).HTMLElement:!1}function As(t){return!Ps()||typeof ShadowRoot>"u"?!1:t instanceof ShadowRoot||t instanceof ce(t).ShadowRoot}const AE=new Set(["inline","contents"]);function Fi(t){const{overflow:a,overflowX:i,overflowY:r,display:c}=we(t);return/auto|scroll|overlay|hidden|clip/.test(a+r+i)&&!AE.has(c)}const pE=new Set(["table","td","th"]);function mE(t){return pE.has(Va(t))}const gE=[":popover-open",":modal"];function Ls(t){return gE.some(a=>{try{return t.matches(a)}catch{return!1}})}const bE=["transform","translate","scale","rotate","perspective"],fE=["transform","translate","scale","rotate","perspective","filter"],yE=["paint","layout","strict","content"];function $u(t){const a=Qu(),i=E0(t)?we(t):t;return bE.some(r=>i[r]?i[r]!=="none":!1)||(i.containerType?i.containerType!=="normal":!1)||!a&&(i.backdropFilter?i.backdropFilter!=="none":!1)||!a&&(i.filter?i.filter!=="none":!1)||fE.some(r=>(i.willChange||"").includes(r))||yE.some(r=>(i.contain||"").includes(r))}function CE(t){let a=Qt(t);for(;Je(a)&&!Ma(a);){if($u(a))return a;if(Ls(a))return null;a=Qt(a)}return null}function Qu(){return typeof CSS>"u"||!CSS.supports?!1:CSS.supports("-webkit-backdrop-filter","none")}const vE=new Set(["html","body","#document"]);function Ma(t){return vE.has(Va(t))}function we(t){return ce(t).getComputedStyle(t)}function Ms(t){return E0(t)?{scrollLeft:t.scrollLeft,scrollTop:t.scrollTop}:{scrollLeft:t.scrollX,scrollTop:t.scrollY}}function Qt(t){if(Va(t)==="html")return t;const a=t.assignedSlot||t.parentNode||As(t)&&t.host||Qe(t);return As(a)?a.host:a}function $b(t){const a=Qt(t);return Ma(a)?t.ownerDocument?t.ownerDocument.body:t.body:Je(a)&&Fi(a)?a:$b(a)}function ai(t,a,i){var r;a===void 0&&(a=[]),i===void 0&&(i=!0);const c=$b(t),l=c===((r=t.ownerDocument)==null?void 0:r.body),u=ce(c);if(l){const F=ou(u);return a.concat(u,u.visualViewport||[],Fi(c)?c:[],F&&i?ai(F):[])}return a.concat(c,ai(c,[],i))}function ou(t){return t.parent&&Object.getPrototypeOf(t.parent)?t.frameElement:null}function Qb(t){const a=we(t);let i=parseFloat(a.width)||0,r=parseFloat(a.height)||0;const c=Je(t),l=c?t.offsetWidth:i,u=c?t.offsetHeight:r,F=us(i)!==l||us(r)!==u;return F&&(i=l,r=u),{width:i,height:r,$:F}}function eF(t){return E0(t)?t:t.contextElement}function Ra(t){const a=eF(t);if(!Je(a))return Xe(1);const i=a.getBoundingClientRect(),{width:r,height:c,$:l}=Qb(a);let u=(l?us(i.width):i.width)/r,F=(l?us(i.height):i.height)/c;return(!u||!Number.isFinite(u))&&(u=1),(!F||!Number.isFinite(F))&&(F=1),{x:u,y:F}}const BE=Xe(0);function ef(t){const a=ce(t);return!Qu()||!a.visualViewport?BE:{x:a.visualViewport.offsetLeft,y:a.visualViewport.offsetTop}}function kE(t,a,i){return a===void 0&&(a=!1),!i||a&&i!==ce(t)?!1:a}function Po(t,a,i,r){a===void 0&&(a=!1),i===void 0&&(i=!1);const c=t.getBoundingClientRect(),l=eF(t);let u=Xe(1);a&&(r?E0(r)&&(u=Ra(r)):u=Ra(t));const F=kE(l,i,r)?ef(l):Xe(0);let p=(c.left+F.x)/u.x,A=(c.top+F.y)/u.y,b=c.width/u.x,m=c.height/u.y;if(l){const y=ce(l),C=r&&E0(r)?ce(r):r;let B=y,v=ou(B);for(;v&&r&&C!==B;){const D=Ra(v),w=v.getBoundingClientRect(),x=we(v),_=w.left+(v.clientLeft+parseFloat(x.paddingLeft))*D.x,R=w.top+(v.clientTop+parseFloat(x.paddingTop))*D.y;p*=D.x,A*=D.y,b*=D.x,m*=D.y,p+=_,A+=R,B=ce(v),v=ou(B)}}return ds({width:b,height:m,x:p,y:A})}function tF(t,a){const i=Ms(t).scrollLeft;return a?a.left+i:Po(Qe(t)).left+i}function tf(t,a,i){i===void 0&&(i=!1);const r=t.getBoundingClientRect(),c=r.left+a.scrollLeft-(i?0:tF(t,r)),l=r.top+a.scrollTop;return{x:c,y:l}}function DE(t){let{elements:a,rect:i,offsetParent:r,strategy:c}=t;const l=c==="fixed",u=Qe(r),F=a?Ls(a.floating):!1;if(r===u||F&&l)return i;let p={scrollLeft:0,scrollTop:0},A=Xe(1);const b=Xe(0),m=Je(r);if((m||!m&&!l)&&((Va(r)!=="body"||Fi(u))&&(p=Ms(r)),Je(r))){const C=Po(r);A=Ra(r),b.x=C.x+r.clientLeft,b.y=C.y+r.clientTop}const y=u&&!m&&!l?tf(u,p,!0):Xe(0);return{width:i.width*A.x,height:i.height*A.y,x:i.x*A.x-p.scrollLeft*A.x+b.x+y.x,y:i.y*A.y-p.scrollTop*A.y+b.y+y.y}}function wE(t){return Array.from(t.getClientRects())}function _E(t){const a=Qe(t),i=Ms(t),r=t.ownerDocument.body,c=se(a.scrollWidth,a.clientWidth,r.scrollWidth,r.clientWidth),l=se(a.scrollHeight,a.clientHeight,r.scrollHeight,r.clientHeight);let u=-i.scrollLeft+tF(t);const F=-i.scrollTop;return we(r).direction==="rtl"&&(u+=se(a.clientWidth,r.clientWidth)-c),{width:c,height:l,x:u,y:F}}function EE(t,a){const i=ce(t),r=Qe(t),c=i.visualViewport;let l=r.clientWidth,u=r.clientHeight,F=0,p=0;if(c){l=c.width,u=c.height;const A=Qu();(!A||A&&a==="fixed")&&(F=c.offsetLeft,p=c.offsetTop)}return{width:l,height:u,x:F,y:p}}const xE=new Set(["absolute","fixed"]);function SE(t,a){const i=Po(t,!0,a==="fixed"),r=i.top+t.clientTop,c=i.left+t.clientLeft,l=Je(t)?Ra(t):Xe(1),u=t.clientWidth*l.x,F=t.clientHeight*l.y,p=c*l.x,A=r*l.y;return{width:u,height:F,x:p,y:A}}function d3(t,a,i){let r;if(a==="viewport")r=EE(t,i);else if(a==="document")r=_E(Qe(t));else if(E0(a))r=SE(a,i);else{const c=ef(t);r={x:a.x-c.x,y:a.y-c.y,width:a.width,height:a.height}}return ds(r)}function of(t,a){const i=Qt(t);return i===a||!E0(i)||Ma(i)?!1:we(i).position==="fixed"||of(i,a)}function RE(t,a){const i=a.get(t);if(i)return i;let r=ai(t,[],!1).filter(F=>E0(F)&&Va(F)!=="body"),c=null;const l=we(t).position==="fixed";let u=l?Qt(t):t;for(;E0(u)&&!Ma(u);){const F=we(u),p=$u(u);!p&&F.position==="fixed"&&(c=null),(l?!p&&!c:!p&&F.position==="static"&&!!c&&xE.has(c.position)||Fi(u)&&!p&&of(t,u))?r=r.filter(b=>b!==u):c=F,u=Qt(u)}return a.set(t,r),r}function TE(t){let{element:a,boundary:i,rootBoundary:r,strategy:c}=t;const u=[...i==="clippingAncestors"?Ls(a)?[]:RE(a,this._c):[].concat(i),r],F=u[0],p=u.reduce((A,b)=>{const m=d3(a,b,c);return A.top=se(m.top,A.top),A.right=$t(m.right,A.right),A.bottom=$t(m.bottom,A.bottom),A.left=se(m.left,A.left),A},d3(a,F,c));return{width:p.right-p.left,height:p.bottom-p.top,x:p.left,y:p.top}}function PE(t){const{width:a,height:i}=Qb(t);return{width:a,height:i}}function LE(t,a,i){const r=Je(a),c=Qe(a),l=i==="fixed",u=Po(t,!0,l,a);let F={scrollLeft:0,scrollTop:0};const p=Xe(0);function A(){p.x=tF(c)}if(r||!r&&!l)if((Va(a)!=="body"||Fi(c))&&(F=Ms(a)),r){const C=Po(a,!0,l,a);p.x=C.x+a.clientLeft,p.y=C.y+a.clientTop}else c&&A();l&&!r&&c&&A();const b=c&&!r&&!l?tf(c,F):Xe(0),m=u.left+F.scrollLeft-p.x-b.x,y=u.top+F.scrollTop-p.y-b.y;return{x:m,y,width:u.width,height:u.height}}function vh(t){return we(t).position==="static"}function A3(t,a){if(!Je(t)||we(t).position==="fixed")return null;if(a)return a(t);let i=t.offsetParent;return Qe(t)===i&&(i=i.ownerDocument.body),i}function af(t,a){const i=ce(t);if(Ls(t))return i;if(!Je(t)){let c=Qt(t);for(;c&&!Ma(c);){if(E0(c)&&!vh(c))return c;c=Qt(c)}return i}let r=A3(t,a);for(;r&&mE(r)&&vh(r);)r=A3(r,a);return r&&Ma(r)&&vh(r)&&!$u(r)?i:r||CE(t)||i}const ME=async function(t){const a=this.getOffsetParent||af,i=this.getDimensions,r=await i(t.floating);return{reference:LE(t.reference,await a(t.floating),t.strategy),floating:{x:0,y:0,width:r.width,height:r.height}}};function NE(t){return we(t).direction==="rtl"}const IE={convertOffsetParentRelativeRectToViewportRelativeRect:DE,getDocumentElement:Qe,getClippingRect:TE,getOffsetParent:af,getElementRects:ME,getClientRects:wE,getDimensions:PE,getScale:Ra,isElement:E0,isRTL:NE};function nf(t,a){return t.x===a.x&&t.y===a.y&&t.width===a.width&&t.height===a.height}function HE(t,a){let i=null,r;const c=Qe(t);function l(){var F;clearTimeout(r),(F=i)==null||F.disconnect(),i=null}function u(F,p){F===void 0&&(F=!1),p===void 0&&(p=1),l();const A=t.getBoundingClientRect(),{left:b,top:m,width:y,height:C}=A;if(F||a(),!y||!C)return;const B=qr(m),v=qr(c.clientWidth-(b+y)),D=qr(c.clientHeight-(m+C)),w=qr(b),_={rootMargin:-B+"px "+-v+"px "+-D+"px "+-w+"px",threshold:se(0,$t(1,p))||1};let R=!0;function P(S){const N=S[0].intersectionRatio;if(N!==p){if(!R)return u();N?u(!1,N):r=setTimeout(()=>{u(!1,1e-7)},1e3)}N===1&&!nf(A,t.getBoundingClientRect())&&u(),R=!1}try{i=new IntersectionObserver(P,{..._,root:c.ownerDocument})}catch{i=new IntersectionObserver(P,_)}i.observe(t)}return u(!0),l}function zE(t,a,i,r){r===void 0&&(r={});const{ancestorScroll:c=!0,ancestorResize:l=!0,elementResize:u=typeof ResizeObserver=="function",layoutShift:F=typeof IntersectionObserver=="function",animationFrame:p=!1}=r,A=eF(t),b=c||l?[...A?ai(A):[],...ai(a)]:[];b.forEach(w=>{c&&w.addEventListener("scroll",i,{passive:!0}),l&&w.addEventListener("resize",i)});const m=A&&F?HE(A,i):null;let y=-1,C=null;u&&(C=new ResizeObserver(w=>{let[x]=w;x&&x.target===A&&C&&(C.unobserve(a),cancelAnimationFrame(y),y=requestAnimationFrame(()=>{var _;(_=C)==null||_.observe(a)})),i()}),A&&!p&&C.observe(A),C.observe(a));let B,v=p?Po(t):null;p&&D();function D(){const w=Po(t);v&&!nf(v,w)&&i(),v=w,B=requestAnimationFrame(D)}return i(),()=>{var w;b.forEach(x=>{c&&x.removeEventListener("scroll",i),l&&x.removeEventListener("resize",i)}),m==null||m(),(w=C)==null||w.disconnect(),C=null,p&&cancelAnimationFrame(B)}}const OE=hE,jE=uE,VE=sE,UE=dE,GE=cE,p3=rE,qE=FE,WE=(t,a,i)=>{const r=new Map,c={platform:IE,...i},l={...c.platform,_c:r};return iE(t,a,{...c,platform:l})};var KE=typeof document<"u",ZE=function(){},as=KE?f.useLayoutEffect:ZE;function ps(t,a){if(t===a)return!0;if(typeof t!=typeof a)return!1;if(typeof t=="function"&&t.toString()===a.toString())return!0;let i,r,c;if(t&&a&&typeof t=="object"){if(Array.isArray(t)){if(i=t.length,i!==a.length)return!1;for(r=i;r--!==0;)if(!ps(t[r],a[r]))return!1;return!0}if(c=Object.keys(t),i=c.length,i!==Object.keys(a).length)return!1;for(r=i;r--!==0;)if(!{}.hasOwnProperty.call(a,c[r]))return!1;for(r=i;r--!==0;){const l=c[r];if(!(l==="_owner"&&t.$$typeof)&&!ps(t[l],a[l]))return!1}return!0}return t!==t&&a!==a}function rf(t){return typeof window>"u"?1:(t.ownerDocument.defaultView||window).devicePixelRatio||1}function m3(t,a){const i=rf(t);return Math.round(a*i)/i}function Bh(t){const a=f.useRef(t);return as(()=>{a.current=t}),a}function sf(t){t===void 0&&(t={});const{placement:a="bottom",strategy:i="absolute",middleware:r=[],platform:c,elements:{reference:l,floating:u}={},transform:F=!0,whileElementsMounted:p,open:A}=t,[b,m]=f.useState({x:0,y:0,strategy:i,placement:a,middlewareData:{},isPositioned:!1}),[y,C]=f.useState(r);ps(y,r)||C(r);const[B,v]=f.useState(null),[D,w]=f.useState(null),x=f.useCallback(J=>{J!==S.current&&(S.current=J,v(J))},[]),_=f.useCallback(J=>{J!==N.current&&(N.current=J,w(J))},[]),R=l||B,P=u||D,S=f.useRef(null),N=f.useRef(null),O=f.useRef(b),U=p!=null,n2=Bh(p),u2=Bh(c),s2=Bh(A),c2=f.useCallback(()=>{if(!S.current||!N.current)return;const J={placement:a,strategy:i,middleware:y};u2.current&&(J.platform=u2.current),WE(S.current,N.current,J).then(Y=>{const T={...Y,isPositioned:s2.current!==!1};W.current&&!ps(O.current,T)&&(O.current=T,Bu.flushSync(()=>{m(T)}))})},[y,a,i,u2,s2]);as(()=>{A===!1&&O.current.isPositioned&&(O.current.isPositioned=!1,m(J=>({...J,isPositioned:!1})))},[A]);const W=f.useRef(!1);as(()=>(W.current=!0,()=>{W.current=!1}),[]),as(()=>{if(R&&(S.current=R),P&&(N.current=P),R&&P){if(n2.current)return n2.current(R,P,c2);c2()}},[R,P,c2,n2,U]);const F2=f.useMemo(()=>({reference:S,floating:N,setReference:x,setFloating:_}),[x,_]),I=f.useMemo(()=>({reference:R,floating:P}),[R,P]),q=f.useMemo(()=>{const J={position:i,left:0,top:0};if(!I.floating)return J;const Y=m3(I.floating,b.x),T=m3(I.floating,b.y);return F?{...J,transform:"translate("+Y+"px, "+T+"px)",...rf(I.floating)>=1.5&&{willChange:"transform"}}:{position:i,left:Y,top:T}},[i,F,I.floating,b.x,b.y]);return f.useMemo(()=>({...b,update:c2,refs:F2,elements:I,floatingStyles:q}),[b,c2,F2,I,q])}const YE=t=>{function a(i){return{}.hasOwnProperty.call(i,"current")}return{name:"arrow",options:t,fn(i){const{element:r,padding:c}=typeof t=="function"?t(i):t;return r&&a(r)?r.current!=null?p3({element:r.current,padding:c}).fn(i):{}:r?p3({element:r,padding:c}).fn(i):{}}}},cf=(t,a)=>({...OE(t),options:[t,a]}),lf=(t,a)=>({...jE(t),options:[t,a]}),XE=(t,a)=>({...qE(t),options:[t,a]}),JE=(t,a)=>({...VE(t),options:[t,a]}),$E=(t,a)=>({...UE(t),options:[t,a]}),QE=(t,a)=>({...GE(t),options:[t,a]}),hf=(t,a)=>({...YE(t),options:[t,a]});var e4="Arrow",uf=f.forwardRef((t,a)=>{const{children:i,width:r=10,height:c=5,...l}=t;return g.jsx(R2.svg,{...l,ref:a,width:r,height:c,viewBox:"0 0 30 10",preserveAspectRatio:"none",children:t.asChild?i:g.jsx("polygon",{points:"0,0 30,0 15,10"})})});uf.displayName=e4;var t4=uf,oF="Popper",[Ff,Ns]=Ne(oF),[o4,df]=Ff(oF),Af=t=>{const{__scopePopper:a,children:i}=t,[r,c]=f.useState(null);return g.jsx(o4,{scope:a,anchor:r,onAnchorChange:c,children:i})};Af.displayName=oF;var pf="PopperAnchor",mf=f.forwardRef((t,a)=>{const{__scopePopper:i,virtualRef:r,...c}=t,l=df(pf,i),u=f.useRef(null),F=n0(a,u);return f.useEffect(()=>{l.onAnchorChange((r==null?void 0:r.current)||u.current)}),r?null:g.jsx(R2.div,{...c,ref:F})});mf.displayName=pf;var aF="PopperContent",[a4,n4]=Ff(aF),gf=f.forwardRef((t,a)=>{var K2,_2,L2,V2,h0,L0;const{__scopePopper:i,side:r="bottom",sideOffset:c=0,align:l="center",alignOffset:u=0,arrowPadding:F=0,avoidCollisions:p=!0,collisionBoundary:A=[],collisionPadding:b=0,sticky:m="partial",hideWhenDetached:y=!1,updatePositionStrategy:C="optimized",onPlaced:B,...v}=t,D=df(aF,i),[w,x]=f.useState(null),_=n0(a,xe=>x(xe)),[R,P]=f.useState(null),S=K_(R),N=(S==null?void 0:S.width)??0,O=(S==null?void 0:S.height)??0,U=r+(l!=="center"?"-"+l:""),n2=typeof b=="number"?b:{top:0,right:0,bottom:0,left:0,...b},u2=Array.isArray(A)?A:[A],s2=u2.length>0,c2={padding:n2,boundary:u2.filter(r4),altBoundary:s2},{refs:W,floatingStyles:F2,placement:I,isPositioned:q,middlewareData:J}=sf({strategy:"fixed",placement:U,whileElementsMounted:(...xe)=>zE(...xe,{animationFrame:C==="always"}),elements:{reference:D.anchor},middleware:[cf({mainAxis:c+O,alignmentAxis:u}),p&&lf({mainAxis:!0,crossAxis:!1,limiter:m==="partial"?XE():void 0,...c2}),p&&JE({...c2}),$E({...c2,apply:({elements:xe,rects:G0,availableWidth:Ua,availableHeight:Ga})=>{const{width:z0,height:qa}=G0.reference,et=xe.floating.style;et.setProperty("--radix-popper-available-width",`${Ua}px`),et.setProperty("--radix-popper-available-height",`${Ga}px`),et.setProperty("--radix-popper-anchor-width",`${z0}px`),et.setProperty("--radix-popper-anchor-height",`${qa}px`)}}),R&&hf({element:R,padding:F}),s4({arrowWidth:N,arrowHeight:O}),y&&QE({strategy:"referenceHidden",...c2})]}),[Y,T]=yf(I),$=I0(B);De(()=>{q&&($==null||$())},[q,$]);const Q=(K2=J.arrow)==null?void 0:K2.x,a2=(_2=J.arrow)==null?void 0:_2.y,d2=((L2=J.arrow)==null?void 0:L2.centerOffset)!==0,[k2,g2]=f.useState();return De(()=>{w&&g2(window.getComputedStyle(w).zIndex)},[w]),g.jsx("div",{ref:W.setFloating,"data-radix-popper-content-wrapper":"",style:{...F2,transform:q?F2.transform:"translate(0, -200%)",minWidth:"max-content",zIndex:k2,"--radix-popper-transform-origin":[(V2=J.transformOrigin)==null?void 0:V2.x,(h0=J.transformOrigin)==null?void 0:h0.y].join(" "),...((L0=J.hide)==null?void 0:L0.referenceHidden)&&{visibility:"hidden",pointerEvents:"none"}},dir:t.dir,children:g.jsx(a4,{scope:i,placedSide:Y,onArrowChange:P,arrowX:Q,arrowY:a2,shouldHideArrow:d2,children:g.jsx(R2.div,{"data-side":Y,"data-align":T,...v,ref:_,style:{...v.style,animation:q?void 0:"none"}})})})});gf.displayName=aF;var bf="PopperArrow",i4={top:"bottom",right:"left",bottom:"top",left:"right"},ff=f.forwardRef(function(a,i){const{__scopePopper:r,...c}=a,l=n4(bf,r),u=i4[l.placedSide];return g.jsx("span",{ref:l.onArrowChange,style:{position:"absolute",left:l.arrowX,top:l.arrowY,[u]:0,transformOrigin:{top:"",right:"0 0",bottom:"center 0",left:"100% 0"}[l.placedSide],transform:{top:"translateY(100%)",right:"translateY(50%) rotate(90deg) translateX(-50%)",bottom:"rotate(180deg)",left:"translateY(50%) rotate(-90deg) translateX(50%)"}[l.placedSide],visibility:l.shouldHideArrow?"hidden":void 0},children:g.jsx(t4,{...c,ref:i,style:{...c.style,display:"block"}})})});ff.displayName=bf;function r4(t){return t!==null}var s4=t=>({name:"transformOrigin",options:t,fn(a){var D,w,x;const{placement:i,rects:r,middlewareData:c}=a,u=((D=c.arrow)==null?void 0:D.centerOffset)!==0,F=u?0:t.arrowWidth,p=u?0:t.arrowHeight,[A,b]=yf(i),m={start:"0%",center:"50%",end:"100%"}[b],y=(((w=c.arrow)==null?void 0:w.x)??0)+F/2,C=(((x=c.arrow)==null?void 0:x.y)??0)+p/2;let B="",v="";return A==="bottom"?(B=u?m:`${y}px`,v=`${-p}px`):A==="top"?(B=u?m:`${y}px`,v=`${r.floating.height+p}px`):A==="right"?(B=`${-p}px`,v=u?m:`${C}px`):A==="left"&&(B=`${r.floating.width+p}px`,v=u?m:`${C}px`),{data:{x:B,y:v}}}});function yf(t){const[a,i="center"]=t.split("-");return[a,i]}var Cf=Af,nF=mf,vf=gf,Bf=ff,kh="rovingFocusGroup.onEntryFocus",c4={bubbles:!1,cancelable:!0},di="RovingFocusGroup",[au,kf,l4]=ui(di),[h4,Is]=Ne(di,[l4]),[u4,F4]=h4(di),Df=f.forwardRef((t,a)=>g.jsx(au.Provider,{scope:t.__scopeRovingFocusGroup,children:g.jsx(au.Slot,{scope:t.__scopeRovingFocusGroup,children:g.jsx(d4,{...t,ref:a})})}));Df.displayName=di;var d4=f.forwardRef((t,a)=>{const{__scopeRovingFocusGroup:i,orientation:r,loop:c=!1,dir:l,currentTabStopId:u,defaultCurrentTabStopId:F,onCurrentTabStopIdChange:p,onEntryFocus:A,preventScrollOnEntryFocus:b=!1,...m}=t,y=f.useRef(null),C=n0(a,y),B=hi(l),[v,D]=$e({prop:u,defaultProp:F??null,onChange:p,caller:di}),[w,x]=f.useState(!1),_=I0(A),R=kf(i),P=f.useRef(!1),[S,N]=f.useState(0);return f.useEffect(()=>{const O=y.current;if(O)return O.addEventListener(kh,_),()=>O.removeEventListener(kh,_)},[_]),g.jsx(u4,{scope:i,orientation:r,dir:B,loop:c,currentTabStopId:v,onItemFocus:f.useCallback(O=>D(O),[D]),onItemShiftTab:f.useCallback(()=>x(!0),[]),onFocusableItemAdd:f.useCallback(()=>N(O=>O+1),[]),onFocusableItemRemove:f.useCallback(()=>N(O=>O-1),[]),children:g.jsx(R2.div,{tabIndex:w||S===0?-1:0,"data-orientation":r,...m,ref:C,style:{outline:"none",...t.style},onMouseDown:p2(t.onMouseDown,()=>{P.current=!0}),onFocus:p2(t.onFocus,O=>{const U=!P.current;if(O.target===O.currentTarget&&U&&!w){const n2=new CustomEvent(kh,c4);if(O.currentTarget.dispatchEvent(n2),!n2.defaultPrevented){const u2=R().filter(I=>I.focusable),s2=u2.find(I=>I.active),c2=u2.find(I=>I.id===v),F2=[s2,c2,...u2].filter(Boolean).map(I=>I.ref.current);Ef(F2,b)}}P.current=!1}),onBlur:p2(t.onBlur,()=>x(!1))})})}),wf="RovingFocusGroupItem",_f=f.forwardRef((t,a)=>{const{__scopeRovingFocusGroup:i,focusable:r=!0,active:c=!1,tabStopId:l,children:u,...F}=t,p=ve(),A=l||p,b=F4(wf,i),m=b.currentTabStopId===A,y=kf(i),{onFocusableItemAdd:C,onFocusableItemRemove:B,currentTabStopId:v}=b;return f.useEffect(()=>{if(r)return C(),()=>B()},[r,C,B]),g.jsx(au.ItemSlot,{scope:i,id:A,focusable:r,active:c,children:g.jsx(R2.span,{tabIndex:m?0:-1,"data-orientation":b.orientation,...F,ref:a,onMouseDown:p2(t.onMouseDown,D=>{r?b.onItemFocus(A):D.preventDefault()}),onFocus:p2(t.onFocus,()=>b.onItemFocus(A)),onKeyDown:p2(t.onKeyDown,D=>{if(D.key==="Tab"&&D.shiftKey){b.onItemShiftTab();return}if(D.target!==D.currentTarget)return;const w=m4(D,b.orientation,b.dir);if(w!==void 0){if(D.metaKey||D.ctrlKey||D.altKey||D.shiftKey)return;D.preventDefault();let _=y().filter(R=>R.focusable).map(R=>R.ref.current);if(w==="last")_.reverse();else if(w==="prev"||w==="next"){w==="prev"&&_.reverse();const R=_.indexOf(D.currentTarget);_=b.loop?g4(_,R+1):_.slice(R+1)}setTimeout(()=>Ef(_))}}),children:typeof u=="function"?u({isCurrentTabStop:m,hasTabStop:v!=null}):u})})});_f.displayName=wf;var A4={ArrowLeft:"prev",ArrowUp:"prev",ArrowRight:"next",ArrowDown:"next",PageUp:"first",Home:"first",PageDown:"last",End:"last"};function p4(t,a){return a!=="rtl"?t:t==="ArrowLeft"?"ArrowRight":t==="ArrowRight"?"ArrowLeft":t}function m4(t,a,i){const r=p4(t.key,i);if(!(a==="vertical"&&["ArrowLeft","ArrowRight"].includes(r))&&!(a==="horizontal"&&["ArrowUp","ArrowDown"].includes(r)))return A4[r]}function Ef(t,a=!1){const i=document.activeElement;for(const r of t)if(r===i||(r.focus({preventScroll:a}),document.activeElement!==i))return}function g4(t,a){return t.map((i,r)=>t[(a+r)%t.length])}var xf=Df,Sf=_f,nu=["Enter"," "],b4=["ArrowDown","PageUp","Home"],Rf=["ArrowUp","PageDown","End"],f4=[...b4,...Rf],y4={ltr:[...nu,"ArrowRight"],rtl:[...nu,"ArrowLeft"]},C4={ltr:["ArrowLeft"],rtl:["ArrowRight"]},Ai="Menu",[ni,v4,B4]=ui(Ai),[Ho,Tf]=Ne(Ai,[B4,Ns,Is]),Hs=Ns(),Pf=Is(),[k4,zo]=Ho(Ai),[D4,pi]=Ho(Ai),Lf=t=>{const{__scopeMenu:a,open:i=!1,children:r,dir:c,onOpenChange:l,modal:u=!0}=t,F=Hs(a),[p,A]=f.useState(null),b=f.useRef(!1),m=I0(l),y=hi(c);return f.useEffect(()=>{const C=()=>{b.current=!0,document.addEventListener("pointerdown",B,{capture:!0,once:!0}),document.addEventListener("pointermove",B,{capture:!0,once:!0})},B=()=>b.current=!1;return document.addEventListener("keydown",C,{capture:!0}),()=>{document.removeEventListener("keydown",C,{capture:!0}),document.removeEventListener("pointerdown",B,{capture:!0}),document.removeEventListener("pointermove",B,{capture:!0})}},[]),g.jsx(Cf,{...F,children:g.jsx(k4,{scope:a,open:i,onOpenChange:m,content:p,onContentChange:A,children:g.jsx(D4,{scope:a,onClose:f.useCallback(()=>m(!1),[m]),isUsingKeyboardRef:b,dir:y,modal:u,children:r})})})};Lf.displayName=Ai;var w4="MenuAnchor",iF=f.forwardRef((t,a)=>{const{__scopeMenu:i,...r}=t,c=Hs(i);return g.jsx(nF,{...c,...r,ref:a})});iF.displayName=w4;var rF="MenuPortal",[_4,Mf]=Ho(rF,{forceMount:void 0}),Nf=t=>{const{__scopeMenu:a,forceMount:i,children:r,container:c}=t,l=zo(rF,a);return g.jsx(_4,{scope:a,forceMount:i,children:g.jsx(H0,{present:i||l.open,children:g.jsx(Ds,{asChild:!0,container:c,children:r})})})};Nf.displayName=rF;var Be="MenuContent",[E4,sF]=Ho(Be),If=f.forwardRef((t,a)=>{const i=Mf(Be,t.__scopeMenu),{forceMount:r=i.forceMount,...c}=t,l=zo(Be,t.__scopeMenu),u=pi(Be,t.__scopeMenu);return g.jsx(ni.Provider,{scope:t.__scopeMenu,children:g.jsx(H0,{present:r||l.open,children:g.jsx(ni.Slot,{scope:t.__scopeMenu,children:u.modal?g.jsx(x4,{...c,ref:a}):g.jsx(S4,{...c,ref:a})})})})}),x4=f.forwardRef((t,a)=>{const i=zo(Be,t.__scopeMenu),r=f.useRef(null),c=n0(a,r);return f.useEffect(()=>{const l=r.current;if(l)return Eu(l)},[]),g.jsx(cF,{...t,ref:c,trapFocus:i.open,disableOutsidePointerEvents:i.open,disableOutsideScroll:!0,onFocusOutside:p2(t.onFocusOutside,l=>l.preventDefault(),{checkForDefaultPrevented:!1}),onDismiss:()=>i.onOpenChange(!1)})}),S4=f.forwardRef((t,a)=>{const i=zo(Be,t.__scopeMenu);return g.jsx(cF,{...t,ref:a,trapFocus:!1,disableOutsidePointerEvents:!1,disableOutsideScroll:!1,onDismiss:()=>i.onOpenChange(!1)})}),R4=Pa("MenuContent.ScrollLock"),cF=f.forwardRef((t,a)=>{const{__scopeMenu:i,loop:r=!1,trapFocus:c,onOpenAutoFocus:l,onCloseAutoFocus:u,disableOutsidePointerEvents:F,onEntryFocus:p,onEscapeKeyDown:A,onPointerDownOutside:b,onFocusOutside:m,onInteractOutside:y,onDismiss:C,disableOutsideScroll:B,...v}=t,D=zo(Be,i),w=pi(Be,i),x=Hs(i),_=Pf(i),R=v4(i),[P,S]=f.useState(null),N=f.useRef(null),O=n0(a,N,D.onContentChange),U=f.useRef(0),n2=f.useRef(""),u2=f.useRef(0),s2=f.useRef(null),c2=f.useRef("right"),W=f.useRef(0),F2=B?_s:f.Fragment,I=B?{as:R4,allowPinchZoom:!0}:void 0,q=Y=>{var K2,_2;const T=n2.current+Y,$=R().filter(L2=>!L2.disabled),Q=document.activeElement,a2=(K2=$.find(L2=>L2.ref.current===Q))==null?void 0:K2.textValue,d2=$.map(L2=>L2.textValue),k2=U4(d2,T,a2),g2=(_2=$.find(L2=>L2.textValue===k2))==null?void 0:_2.ref.current;(function L2(V2){n2.current=V2,window.clearTimeout(U.current),V2!==""&&(U.current=window.setTimeout(()=>L2(""),1e3))})(T),g2&&setTimeout(()=>g2.focus())};f.useEffect(()=>()=>window.clearTimeout(U.current),[]),_u();const J=f.useCallback(Y=>{var $,Q;return c2.current===(($=s2.current)==null?void 0:$.side)&&q4(Y,(Q=s2.current)==null?void 0:Q.area)},[]);return g.jsx(E4,{scope:i,searchRef:n2,onItemEnter:f.useCallback(Y=>{J(Y)&&Y.preventDefault()},[J]),onItemLeave:f.useCallback(Y=>{var T;J(Y)||((T=N.current)==null||T.focus(),S(null))},[J]),onTriggerLeave:f.useCallback(Y=>{J(Y)&&Y.preventDefault()},[J]),pointerGraceTimerRef:u2,onPointerGraceIntentChange:f.useCallback(Y=>{s2.current=Y},[]),children:g.jsx(F2,{...I,children:g.jsx(ks,{asChild:!0,trapped:c,onMountAutoFocus:p2(l,Y=>{var T;Y.preventDefault(),(T=N.current)==null||T.focus({preventScroll:!0})}),onUnmountAutoFocus:u,children:g.jsx(li,{asChild:!0,disableOutsidePointerEvents:F,onEscapeKeyDown:A,onPointerDownOutside:b,onFocusOutside:m,onInteractOutside:y,onDismiss:C,children:g.jsx(xf,{asChild:!0,..._,dir:w.dir,orientation:"vertical",loop:r,currentTabStopId:P,onCurrentTabStopIdChange:S,onEntryFocus:p2(p,Y=>{w.isUsingKeyboardRef.current||Y.preventDefault()}),preventScrollOnEntryFocus:!0,children:g.jsx(vf,{role:"menu","aria-orientation":"vertical","data-state":Qf(D.open),"data-radix-menu-content":"",dir:w.dir,...x,...v,ref:O,style:{outline:"none",...v.style},onKeyDown:p2(v.onKeyDown,Y=>{const $=Y.target.closest("[data-radix-menu-content]")===Y.currentTarget,Q=Y.ctrlKey||Y.altKey||Y.metaKey,a2=Y.key.length===1;$&&(Y.key==="Tab"&&Y.preventDefault(),!Q&&a2&&q(Y.key));const d2=N.current;if(Y.target!==d2||!f4.includes(Y.key))return;Y.preventDefault();const g2=R().filter(K2=>!K2.disabled).map(K2=>K2.ref.current);Rf.includes(Y.key)&&g2.reverse(),j4(g2)}),onBlur:p2(t.onBlur,Y=>{Y.currentTarget.contains(Y.target)||(window.clearTimeout(U.current),n2.current="")}),onPointerMove:p2(t.onPointerMove,ii(Y=>{const T=Y.target,$=W.current!==Y.clientX;if(Y.currentTarget.contains(T)&&$){const Q=Y.clientX>W.current?"right":"left";c2.current=Q,W.current=Y.clientX}}))})})})})})})});If.displayName=Be;var T4="MenuGroup",lF=f.forwardRef((t,a)=>{const{__scopeMenu:i,...r}=t;return g.jsx(R2.div,{role:"group",...r,ref:a})});lF.displayName=T4;var P4="MenuLabel",Hf=f.forwardRef((t,a)=>{const{__scopeMenu:i,...r}=t;return g.jsx(R2.div,{...r,ref:a})});Hf.displayName=P4;var ms="MenuItem",g3="menu.itemSelect",zs=f.forwardRef((t,a)=>{const{disabled:i=!1,onSelect:r,...c}=t,l=f.useRef(null),u=pi(ms,t.__scopeMenu),F=sF(ms,t.__scopeMenu),p=n0(a,l),A=f.useRef(!1),b=()=>{const m=l.current;if(!i&&m){const y=new CustomEvent(g3,{bubbles:!0,cancelable:!0});m.addEventListener(g3,C=>r==null?void 0:r(C),{once:!0}),rs(m,y),y.defaultPrevented?A.current=!1:u.onClose()}};return g.jsx(zf,{...c,ref:p,disabled:i,onClick:p2(t.onClick,b),onPointerDown:m=>{var y;(y=t.onPointerDown)==null||y.call(t,m),A.current=!0},onPointerUp:p2(t.onPointerUp,m=>{var y;A.current||(y=m.currentTarget)==null||y.click()}),onKeyDown:p2(t.onKeyDown,m=>{const y=F.searchRef.current!=="";i||y&&m.key===" "||nu.includes(m.key)&&(m.currentTarget.click(),m.preventDefault())})})});zs.displayName=ms;var zf=f.forwardRef((t,a)=>{const{__scopeMenu:i,disabled:r=!1,textValue:c,...l}=t,u=sF(ms,i),F=Pf(i),p=f.useRef(null),A=n0(a,p),[b,m]=f.useState(!1),[y,C]=f.useState("");return f.useEffect(()=>{const B=p.current;B&&C((B.textContent??"").trim())},[l.children]),g.jsx(ni.ItemSlot,{scope:i,disabled:r,textValue:c??y,children:g.jsx(Sf,{asChild:!0,...F,focusable:!r,children:g.jsx(R2.div,{role:"menuitem","data-highlighted":b?"":void 0,"aria-disabled":r||void 0,"data-disabled":r?"":void 0,...l,ref:A,onPointerMove:p2(t.onPointerMove,ii(B=>{r?u.onItemLeave(B):(u.onItemEnter(B),B.defaultPrevented||B.currentTarget.focus({preventScroll:!0}))})),onPointerLeave:p2(t.onPointerLeave,ii(B=>u.onItemLeave(B))),onFocus:p2(t.onFocus,()=>m(!0)),onBlur:p2(t.onBlur,()=>m(!1))})})})}),L4="MenuCheckboxItem",Of=f.forwardRef((t,a)=>{const{checked:i=!1,onCheckedChange:r,...c}=t;return g.jsx(qf,{scope:t.__scopeMenu,checked:i,children:g.jsx(zs,{role:"menuitemcheckbox","aria-checked":gs(i)?"mixed":i,...c,ref:a,"data-state":uF(i),onSelect:p2(c.onSelect,()=>r==null?void 0:r(gs(i)?!0:!i),{checkForDefaultPrevented:!1})})})});Of.displayName=L4;var jf="MenuRadioGroup",[M4,N4]=Ho(jf,{value:void 0,onValueChange:()=>{}}),Vf=f.forwardRef((t,a)=>{const{value:i,onValueChange:r,...c}=t,l=I0(r);return g.jsx(M4,{scope:t.__scopeMenu,value:i,onValueChange:l,children:g.jsx(lF,{...c,ref:a})})});Vf.displayName=jf;var Uf="MenuRadioItem",Gf=f.forwardRef((t,a)=>{const{value:i,...r}=t,c=N4(Uf,t.__scopeMenu),l=i===c.value;return g.jsx(qf,{scope:t.__scopeMenu,checked:l,children:g.jsx(zs,{role:"menuitemradio","aria-checked":l,...r,ref:a,"data-state":uF(l),onSelect:p2(r.onSelect,()=>{var u;return(u=c.onValueChange)==null?void 0:u.call(c,i)},{checkForDefaultPrevented:!1})})})});Gf.displayName=Uf;var hF="MenuItemIndicator",[qf,I4]=Ho(hF,{checked:!1}),Wf=f.forwardRef((t,a)=>{const{__scopeMenu:i,forceMount:r,...c}=t,l=I4(hF,i);return g.jsx(H0,{present:r||gs(l.checked)||l.checked===!0,children:g.jsx(R2.span,{...c,ref:a,"data-state":uF(l.checked)})})});Wf.displayName=hF;var H4="MenuSeparator",Kf=f.forwardRef((t,a)=>{const{__scopeMenu:i,...r}=t;return g.jsx(R2.div,{role:"separator","aria-orientation":"horizontal",...r,ref:a})});Kf.displayName=H4;var z4="MenuArrow",Zf=f.forwardRef((t,a)=>{const{__scopeMenu:i,...r}=t,c=Hs(i);return g.jsx(Bf,{...c,...r,ref:a})});Zf.displayName=z4;var O4="MenuSub",[W8,Yf]=Ho(O4),Yn="MenuSubTrigger",Xf=f.forwardRef((t,a)=>{const i=zo(Yn,t.__scopeMenu),r=pi(Yn,t.__scopeMenu),c=Yf(Yn,t.__scopeMenu),l=sF(Yn,t.__scopeMenu),u=f.useRef(null),{pointerGraceTimerRef:F,onPointerGraceIntentChange:p}=l,A={__scopeMenu:t.__scopeMenu},b=f.useCallback(()=>{u.current&&window.clearTimeout(u.current),u.current=null},[]);return f.useEffect(()=>b,[b]),f.useEffect(()=>{const m=F.current;return()=>{window.clearTimeout(m),p(null)}},[F,p]),g.jsx(iF,{asChild:!0,...A,children:g.jsx(zf,{id:c.triggerId,"aria-haspopup":"menu","aria-expanded":i.open,"aria-controls":c.contentId,"data-state":Qf(i.open),...t,ref:ci(a,c.onTriggerChange),onClick:m=>{var y;(y=t.onClick)==null||y.call(t,m),!(t.disabled||m.defaultPrevented)&&(m.currentTarget.focus(),i.open||i.onOpenChange(!0))},onPointerMove:p2(t.onPointerMove,ii(m=>{l.onItemEnter(m),!m.defaultPrevented&&!t.disabled&&!i.open&&!u.current&&(l.onPointerGraceIntentChange(null),u.current=window.setTimeout(()=>{i.onOpenChange(!0),b()},100))})),onPointerLeave:p2(t.onPointerLeave,ii(m=>{var C,B;b();const y=(C=i.content)==null?void 0:C.getBoundingClientRect();if(y){const v=(B=i.content)==null?void 0:B.dataset.side,D=v==="right",w=D?-5:5,x=y[D?"left":"right"],_=y[D?"right":"left"];l.onPointerGraceIntentChange({area:[{x:m.clientX+w,y:m.clientY},{x,y:y.top},{x:_,y:y.top},{x:_,y:y.bottom},{x,y:y.bottom}],side:v}),window.clearTimeout(F.current),F.current=window.setTimeout(()=>l.onPointerGraceIntentChange(null),300)}else{if(l.onTriggerLeave(m),m.defaultPrevented)return;l.onPointerGraceIntentChange(null)}})),onKeyDown:p2(t.onKeyDown,m=>{var C;const y=l.searchRef.current!=="";t.disabled||y&&m.key===" "||y4[r.dir].includes(m.key)&&(i.onOpenChange(!0),(C=i.content)==null||C.focus(),m.preventDefault())})})})});Xf.displayName=Yn;var Jf="MenuSubContent",$f=f.forwardRef((t,a)=>{const i=Mf(Be,t.__scopeMenu),{forceMount:r=i.forceMount,...c}=t,l=zo(Be,t.__scopeMenu),u=pi(Be,t.__scopeMenu),F=Yf(Jf,t.__scopeMenu),p=f.useRef(null),A=n0(a,p);return g.jsx(ni.Provider,{scope:t.__scopeMenu,children:g.jsx(H0,{present:r||l.open,children:g.jsx(ni.Slot,{scope:t.__scopeMenu,children:g.jsx(cF,{id:F.contentId,"aria-labelledby":F.triggerId,...c,ref:A,align:"start",side:u.dir==="rtl"?"left":"right",disableOutsidePointerEvents:!1,disableOutsideScroll:!1,trapFocus:!1,onOpenAutoFocus:b=>{var m;u.isUsingKeyboardRef.current&&((m=p.current)==null||m.focus()),b.preventDefault()},onCloseAutoFocus:b=>b.preventDefault(),onFocusOutside:p2(t.onFocusOutside,b=>{b.target!==F.trigger&&l.onOpenChange(!1)}),onEscapeKeyDown:p2(t.onEscapeKeyDown,b=>{u.onClose(),b.preventDefault()}),onKeyDown:p2(t.onKeyDown,b=>{var C;const m=b.currentTarget.contains(b.target),y=C4[u.dir].includes(b.key);m&&y&&(l.onOpenChange(!1),(C=F.trigger)==null||C.focus(),b.preventDefault())})})})})})});$f.displayName=Jf;function Qf(t){return t?"open":"closed"}function gs(t){return t==="indeterminate"}function uF(t){return gs(t)?"indeterminate":t?"checked":"unchecked"}function j4(t){const a=document.activeElement;for(const i of t)if(i===a||(i.focus(),document.activeElement!==a))return}function V4(t,a){return t.map((i,r)=>t[(a+r)%t.length])}function U4(t,a,i){const c=a.length>1&&Array.from(a).every(A=>A===a[0])?a[0]:a,l=i?t.indexOf(i):-1;let u=V4(t,Math.max(l,0));c.length===1&&(u=u.filter(A=>A!==i));const p=u.find(A=>A.toLowerCase().startsWith(c.toLowerCase()));return p!==i?p:void 0}function G4(t,a){const{x:i,y:r}=t;let c=!1;for(let l=0,u=a.length-1;l<a.length;u=l++){const F=a[l],p=a[u],A=F.x,b=F.y,m=p.x,y=p.y;b>r!=y>r&&i<(m-A)*(r-b)/(y-b)+A&&(c=!c)}return c}function q4(t,a){if(!a)return!1;const i={x:t.clientX,y:t.clientY};return G4(i,a)}function ii(t){return a=>a.pointerType==="mouse"?t(a):void 0}var W4=Lf,K4=iF,Z4=Nf,Y4=If,X4=lF,J4=Hf,$4=zs,Q4=Of,e7=Vf,t7=Gf,o7=Wf,a7=Kf,n7=Zf,i7=Xf,r7=$f,Os="DropdownMenu",[s7,K8]=Ne(Os,[Tf]),U0=Tf(),[c7,e5]=s7(Os),t5=t=>{const{__scopeDropdownMenu:a,children:i,dir:r,open:c,defaultOpen:l,onOpenChange:u,modal:F=!0}=t,p=U0(a),A=f.useRef(null),[b,m]=$e({prop:c,defaultProp:l??!1,onChange:u,caller:Os});return g.jsx(c7,{scope:a,triggerId:ve(),triggerRef:A,contentId:ve(),open:b,onOpenChange:m,onOpenToggle:f.useCallback(()=>m(y=>!y),[m]),modal:F,children:g.jsx(W4,{...p,open:b,onOpenChange:m,dir:r,modal:F,children:i})})};t5.displayName=Os;var o5="DropdownMenuTrigger",a5=f.forwardRef((t,a)=>{const{__scopeDropdownMenu:i,disabled:r=!1,...c}=t,l=e5(o5,i),u=U0(i);return g.jsx(K4,{asChild:!0,...u,children:g.jsx(R2.button,{type:"button",id:l.triggerId,"aria-haspopup":"menu","aria-expanded":l.open,"aria-controls":l.open?l.contentId:void 0,"data-state":l.open?"open":"closed","data-disabled":r?"":void 0,disabled:r,...c,ref:ci(a,l.triggerRef),onPointerDown:p2(t.onPointerDown,F=>{!r&&F.button===0&&F.ctrlKey===!1&&(l.onOpenToggle(),l.open||F.preventDefault())}),onKeyDown:p2(t.onKeyDown,F=>{r||(["Enter"," "].includes(F.key)&&l.onOpenToggle(),F.key==="ArrowDown"&&l.onOpenChange(!0),["Enter"," ","ArrowDown"].includes(F.key)&&F.preventDefault())})})})});a5.displayName=o5;var l7="DropdownMenuPortal",n5=t=>{const{__scopeDropdownMenu:a,...i}=t,r=U0(a);return g.jsx(Z4,{...r,...i})};n5.displayName=l7;var i5="DropdownMenuContent",r5=f.forwardRef((t,a)=>{const{__scopeDropdownMenu:i,...r}=t,c=e5(i5,i),l=U0(i),u=f.useRef(!1);return g.jsx(Y4,{id:c.contentId,"aria-labelledby":c.triggerId,...l,...r,ref:a,onCloseAutoFocus:p2(t.onCloseAutoFocus,F=>{var p;u.current||(p=c.triggerRef.current)==null||p.focus(),u.current=!1,F.preventDefault()}),onInteractOutside:p2(t.onInteractOutside,F=>{const p=F.detail.originalEvent,A=p.button===0&&p.ctrlKey===!0,b=p.button===2||A;(!c.modal||b)&&(u.current=!0)}),style:{...t.style,"--radix-dropdown-menu-content-transform-origin":"var(--radix-popper-transform-origin)","--radix-dropdown-menu-content-available-width":"var(--radix-popper-available-width)","--radix-dropdown-menu-content-available-height":"var(--radix-popper-available-height)","--radix-dropdown-menu-trigger-width":"var(--radix-popper-anchor-width)","--radix-dropdown-menu-trigger-height":"var(--radix-popper-anchor-height)"}})});r5.displayName=i5;var h7="DropdownMenuGroup",u7=f.forwardRef((t,a)=>{const{__scopeDropdownMenu:i,...r}=t,c=U0(i);return g.jsx(X4,{...c,...r,ref:a})});u7.displayName=h7;var F7="DropdownMenuLabel",d7=f.forwardRef((t,a)=>{const{__scopeDropdownMenu:i,...r}=t,c=U0(i);return g.jsx(J4,{...c,...r,ref:a})});d7.displayName=F7;var A7="DropdownMenuItem",s5=f.forwardRef((t,a)=>{const{__scopeDropdownMenu:i,...r}=t,c=U0(i);return g.jsx($4,{...c,...r,ref:a})});s5.displayName=A7;var p7="DropdownMenuCheckboxItem",m7=f.forwardRef((t,a)=>{const{__scopeDropdownMenu:i,...r}=t,c=U0(i);return g.jsx(Q4,{...c,...r,ref:a})});m7.displayName=p7;var g7="DropdownMenuRadioGroup",b7=f.forwardRef((t,a)=>{const{__scopeDropdownMenu:i,...r}=t,c=U0(i);return g.jsx(e7,{...c,...r,ref:a})});b7.displayName=g7;var f7="DropdownMenuRadioItem",y7=f.forwardRef((t,a)=>{const{__scopeDropdownMenu:i,...r}=t,c=U0(i);return g.jsx(t7,{...c,...r,ref:a})});y7.displayName=f7;var C7="DropdownMenuItemIndicator",v7=f.forwardRef((t,a)=>{const{__scopeDropdownMenu:i,...r}=t,c=U0(i);return g.jsx(o7,{...c,...r,ref:a})});v7.displayName=C7;var B7="DropdownMenuSeparator",k7=f.forwardRef((t,a)=>{const{__scopeDropdownMenu:i,...r}=t,c=U0(i);return g.jsx(a7,{...c,...r,ref:a})});k7.displayName=B7;var D7="DropdownMenuArrow",w7=f.forwardRef((t,a)=>{const{__scopeDropdownMenu:i,...r}=t,c=U0(i);return g.jsx(n7,{...c,...r,ref:a})});w7.displayName=D7;var _7="DropdownMenuSubTrigger",E7=f.forwardRef((t,a)=>{const{__scopeDropdownMenu:i,...r}=t,c=U0(i);return g.jsx(i7,{...c,...r,ref:a})});E7.displayName=_7;var x7="DropdownMenuSubContent",S7=f.forwardRef((t,a)=>{const{__scopeDropdownMenu:i,...r}=t,c=U0(i);return g.jsx(r7,{...c,...r,ref:a,style:{...t.style,"--radix-dropdown-menu-content-transform-origin":"var(--radix-popper-transform-origin)","--radix-dropdown-menu-content-available-width":"var(--radix-popper-available-width)","--radix-dropdown-menu-content-available-height":"var(--radix-popper-available-height)","--radix-dropdown-menu-trigger-width":"var(--radix-popper-anchor-width)","--radix-dropdown-menu-trigger-height":"var(--radix-popper-anchor-height)"}})});S7.displayName=x7;var R7=t5,T7=a5,P7=n5,L7=r5,M7=s5,js="Popover",[c5,Z8]=Ne(js,[Ns]),mi=Ns(),[N7,ao]=c5(js),l5=t=>{const{__scopePopover:a,children:i,open:r,defaultOpen:c,onOpenChange:l,modal:u=!1}=t,F=mi(a),p=f.useRef(null),[A,b]=f.useState(!1),[m,y]=$e({prop:r,defaultProp:c??!1,onChange:l,caller:js});return g.jsx(Cf,{...F,children:g.jsx(N7,{scope:a,contentId:ve(),triggerRef:p,open:m,onOpenChange:y,onOpenToggle:f.useCallback(()=>y(C=>!C),[y]),hasCustomAnchor:A,onCustomAnchorAdd:f.useCallback(()=>b(!0),[]),onCustomAnchorRemove:f.useCallback(()=>b(!1),[]),modal:u,children:i})})};l5.displayName=js;var h5="PopoverAnchor",I7=f.forwardRef((t,a)=>{const{__scopePopover:i,...r}=t,c=ao(h5,i),l=mi(i),{onCustomAnchorAdd:u,onCustomAnchorRemove:F}=c;return f.useEffect(()=>(u(),()=>F()),[u,F]),g.jsx(nF,{...l,...r,ref:a})});I7.displayName=h5;var u5="PopoverTrigger",F5=f.forwardRef((t,a)=>{const{__scopePopover:i,...r}=t,c=ao(u5,i),l=mi(i),u=n0(a,c.triggerRef),F=g.jsx(R2.button,{type:"button","aria-haspopup":"dialog","aria-expanded":c.open,"aria-controls":c.contentId,"data-state":g5(c.open),...r,ref:u,onClick:p2(t.onClick,c.onOpenToggle)});return c.hasCustomAnchor?F:g.jsx(nF,{asChild:!0,...l,children:F})});F5.displayName=u5;var FF="PopoverPortal",[H7,z7]=c5(FF,{forceMount:void 0}),d5=t=>{const{__scopePopover:a,forceMount:i,children:r,container:c}=t,l=ao(FF,a);return g.jsx(H7,{scope:a,forceMount:i,children:g.jsx(H0,{present:i||l.open,children:g.jsx(Ds,{asChild:!0,container:c,children:r})})})};d5.displayName=FF;var Na="PopoverContent",A5=f.forwardRef((t,a)=>{const i=z7(Na,t.__scopePopover),{forceMount:r=i.forceMount,...c}=t,l=ao(Na,t.__scopePopover);return g.jsx(H0,{present:r||l.open,children:l.modal?g.jsx(j7,{...c,ref:a}):g.jsx(V7,{...c,ref:a})})});A5.displayName=Na;var O7=Pa("PopoverContent.RemoveScroll"),j7=f.forwardRef((t,a)=>{const i=ao(Na,t.__scopePopover),r=f.useRef(null),c=n0(a,r),l=f.useRef(!1);return f.useEffect(()=>{const u=r.current;if(u)return Eu(u)},[]),g.jsx(_s,{as:O7,allowPinchZoom:!0,children:g.jsx(p5,{...t,ref:c,trapFocus:i.open,disableOutsidePointerEvents:!0,onCloseAutoFocus:p2(t.onCloseAutoFocus,u=>{var F;u.preventDefault(),l.current||(F=i.triggerRef.current)==null||F.focus()}),onPointerDownOutside:p2(t.onPointerDownOutside,u=>{const F=u.detail.originalEvent,p=F.button===0&&F.ctrlKey===!0,A=F.button===2||p;l.current=A},{checkForDefaultPrevented:!1}),onFocusOutside:p2(t.onFocusOutside,u=>u.preventDefault(),{checkForDefaultPrevented:!1})})})}),V7=f.forwardRef((t,a)=>{const i=ao(Na,t.__scopePopover),r=f.useRef(!1),c=f.useRef(!1);return g.jsx(p5,{...t,ref:a,trapFocus:!1,disableOutsidePointerEvents:!1,onCloseAutoFocus:l=>{var u,F;(u=t.onCloseAutoFocus)==null||u.call(t,l),l.defaultPrevented||(r.current||(F=i.triggerRef.current)==null||F.focus(),l.preventDefault()),r.current=!1,c.current=!1},onInteractOutside:l=>{var p,A;(p=t.onInteractOutside)==null||p.call(t,l),l.defaultPrevented||(r.current=!0,l.detail.originalEvent.type==="pointerdown"&&(c.current=!0));const u=l.target;((A=i.triggerRef.current)==null?void 0:A.contains(u))&&l.preventDefault(),l.detail.originalEvent.type==="focusin"&&c.current&&l.preventDefault()}})}),p5=f.forwardRef((t,a)=>{const{__scopePopover:i,trapFocus:r,onOpenAutoFocus:c,onCloseAutoFocus:l,disableOutsidePointerEvents:u,onEscapeKeyDown:F,onPointerDownOutside:p,onFocusOutside:A,onInteractOutside:b,...m}=t,y=ao(Na,i),C=mi(i);return _u(),g.jsx(ks,{asChild:!0,loop:!0,trapped:r,onMountAutoFocus:c,onUnmountAutoFocus:l,children:g.jsx(li,{asChild:!0,disableOutsidePointerEvents:u,onInteractOutside:b,onEscapeKeyDown:F,onPointerDownOutside:p,onFocusOutside:A,onDismiss:()=>y.onOpenChange(!1),children:g.jsx(vf,{"data-state":g5(y.open),role:"dialog",id:y.contentId,...C,...m,ref:a,style:{...m.style,"--radix-popover-content-transform-origin":"var(--radix-popper-transform-origin)","--radix-popover-content-available-width":"var(--radix-popper-available-width)","--radix-popover-content-available-height":"var(--radix-popper-available-height)","--radix-popover-trigger-width":"var(--radix-popper-anchor-width)","--radix-popover-trigger-height":"var(--radix-popper-anchor-height)"}})})})}),m5="PopoverClose",U7=f.forwardRef((t,a)=>{const{__scopePopover:i,...r}=t,c=ao(m5,i);return g.jsx(R2.button,{type:"button",...r,ref:a,onClick:p2(t.onClick,()=>c.onOpenChange(!1))})});U7.displayName=m5;var G7="PopoverArrow",q7=f.forwardRef((t,a)=>{const{__scopePopover:i,...r}=t,c=mi(i);return g.jsx(Bf,{...c,...r,ref:a})});q7.displayName=G7;function g5(t){return t?"open":"closed"}var W7=l5,K7=F5,Z7=d5,Y7=A5,Vs="Tabs",[X7,Y8]=Ne(Vs,[Is]),b5=Is(),[J7,dF]=X7(Vs),f5=f.forwardRef((t,a)=>{const{__scopeTabs:i,value:r,onValueChange:c,defaultValue:l,orientation:u="horizontal",dir:F,activationMode:p="automatic",...A}=t,b=hi(F),[m,y]=$e({prop:r,onChange:c,defaultProp:l??"",caller:Vs});return g.jsx(J7,{scope:i,baseId:ve(),value:m,onValueChange:y,orientation:u,dir:b,activationMode:p,children:g.jsx(R2.div,{dir:b,"data-orientation":u,...A,ref:a})})});f5.displayName=Vs;var y5="TabsList",C5=f.forwardRef((t,a)=>{const{__scopeTabs:i,loop:r=!0,...c}=t,l=dF(y5,i),u=b5(i);return g.jsx(xf,{asChild:!0,...u,orientation:l.orientation,dir:l.dir,loop:r,children:g.jsx(R2.div,{role:"tablist","aria-orientation":l.orientation,...c,ref:a})})});C5.displayName=y5;var v5="TabsTrigger",B5=f.forwardRef((t,a)=>{const{__scopeTabs:i,value:r,disabled:c=!1,...l}=t,u=dF(v5,i),F=b5(i),p=w5(u.baseId,r),A=_5(u.baseId,r),b=r===u.value;return g.jsx(Sf,{asChild:!0,...F,focusable:!c,active:b,children:g.jsx(R2.button,{type:"button",role:"tab","aria-selected":b,"aria-controls":A,"data-state":b?"active":"inactive","data-disabled":c?"":void 0,disabled:c,id:p,...l,ref:a,onMouseDown:p2(t.onMouseDown,m=>{!c&&m.button===0&&m.ctrlKey===!1?u.onValueChange(r):m.preventDefault()}),onKeyDown:p2(t.onKeyDown,m=>{[" ","Enter"].includes(m.key)&&u.onValueChange(r)}),onFocus:p2(t.onFocus,()=>{const m=u.activationMode!=="manual";!b&&!c&&m&&u.onValueChange(r)})})})});B5.displayName=v5;var k5="TabsContent",D5=f.forwardRef((t,a)=>{const{__scopeTabs:i,value:r,forceMount:c,children:l,...u}=t,F=dF(k5,i),p=w5(F.baseId,r),A=_5(F.baseId,r),b=r===F.value,m=f.useRef(b);return f.useEffect(()=>{const y=requestAnimationFrame(()=>m.current=!1);return()=>cancelAnimationFrame(y)},[]),g.jsx(H0,{present:c||b,children:({present:y})=>g.jsx(R2.div,{"data-state":b?"active":"inactive","data-orientation":F.orientation,role:"tabpanel","aria-labelledby":p,hidden:!y,id:A,tabIndex:0,...u,ref:a,style:{...t.style,animationDuration:m.current?"0s":void 0},children:y&&l})})});D5.displayName=k5;function w5(t,a){return`${t}-trigger-${a}`}function _5(t,a){return`${t}-content-${a}`}var $7=f5,Q7=C5,e9=B5,t9=D5,o9="vocs_AiCtaDropdown",b3="vocs_AiCtaDropdown_buttonLeft vocs_AiCtaDropdown_button vocs_Button_button",a9="vocs_AiCtaDropdown_buttonRight vocs_AiCtaDropdown_button vocs_Button_button",n9="vocs_AiCtaDropdown_dropdownMenuContent",i9="vocs_AiCtaDropdown_dropdownMenuItem",Dh="vocs_Button_button",X8="vocs_Button_button_accent";function E5(){return g.jsxs("svg",{width:"100%",height:"100%",viewBox:"0 0 15 15",fill:"none",xmlns:"http://www.w3.org/2000/svg",children:[g.jsx("title",{children:"Check"}),g.jsx("path",{d:"M7.49991 0.877045C3.84222 0.877045 0.877075 3.84219 0.877075 7.49988C0.877075 11.1575 3.84222 14.1227 7.49991 14.1227C11.1576 14.1227 14.1227 11.1575 14.1227 7.49988C14.1227 3.84219 11.1576 0.877045 7.49991 0.877045ZM1.82708 7.49988C1.82708 4.36686 4.36689 1.82704 7.49991 1.82704C10.6329 1.82704 13.1727 4.36686 13.1727 7.49988C13.1727 10.6329 10.6329 13.1727 7.49991 13.1727C4.36689 13.1727 1.82708 10.6329 1.82708 7.49988ZM10.1589 5.53774C10.3178 5.31191 10.2636 5.00001 10.0378 4.84109C9.81194 4.68217 9.50004 4.73642 9.34112 4.96225L6.51977 8.97154L5.35681 7.78706C5.16334 7.59002 4.84677 7.58711 4.64973 7.78058C4.45268 7.97404 4.44978 8.29061 4.64325 8.48765L6.22658 10.1003C6.33054 10.2062 6.47617 10.2604 6.62407 10.2483C6.77197 10.2363 6.90686 10.1591 6.99226 10.0377L10.1589 5.53774Z",fill:"currentColor",fillRule:"evenodd",clipRule:"evenodd"})]})}function x5(){return g.jsxs("svg",{width:"100%",height:"100%",viewBox:"0 0 15 15",fill:"none",xmlns:"http://www.w3.org/2000/svg",children:[g.jsx("title",{children:"Chevron Down"}),g.jsx("path",{d:"M3.13523 6.15803C3.3241 5.95657 3.64052 5.94637 3.84197 6.13523L7.5 9.56464L11.158 6.13523C11.3595 5.94637 11.6759 5.95657 11.8648 6.15803C12.0536 6.35949 12.0434 6.67591 11.842 6.86477L7.84197 10.6148C7.64964 10.7951 7.35036 10.7951 7.15803 10.6148L3.15803 6.86477C2.95657 6.67591 2.94637 6.35949 3.13523 6.15803Z",fill:"currentColor",fillRule:"evenodd",clipRule:"evenodd"})]})}function S5(){return g.jsxs("svg",{width:"100%",height:"100%",viewBox:"0 0 15 15",fill:"none",xmlns:"http://www.w3.org/2000/svg",children:[g.jsx("title",{children:"Copy"}),g.jsx("path",{d:"M5 2V1H10V2H5ZM4.75 0C4.33579 0 4 0.335786 4 0.75V1H3.5C2.67157 1 2 1.67157 2 2.5V12.5C2 13.3284 2.67157 14 3.5 14H7V13H3.5C3.22386 13 3 12.7761 3 12.5V2.5C3 2.22386 3.22386 2 3.5 2H4V2.25C4 2.66421 4.33579 3 4.75 3H10.25C10.6642 3 11 2.66421 11 2.25V2H11.5C11.7761 2 12 2.22386 12 2.5V7H13V2.5C13 1.67157 12.3284 1 11.5 1H11V0.75C11 0.335786 10.6642 0 10.25 0H4.75ZM9 8.5C9 8.77614 8.77614 9 8.5 9C8.22386 9 8 8.77614 8 8.5C8 8.22386 8.22386 8 8.5 8C8.77614 8 9 8.22386 9 8.5ZM10.5 9C10.7761 9 11 8.77614 11 8.5C11 8.22386 10.7761 8 10.5 8C10.2239 8 10 8.22386 10 8.5C10 8.77614 10.2239 9 10.5 9ZM13 8.5C13 8.77614 12.7761 9 12.5 9C12.2239 9 12 8.77614 12 8.5C12 8.22386 12.2239 8 12.5 8C12.7761 8 13 8.22386 13 8.5ZM14.5 9C14.7761 9 15 8.77614 15 8.5C15 8.22386 14.7761 8 14.5 8C14.2239 8 14 8.22386 14 8.5C14 8.77614 14.2239 9 14.5 9ZM15 10.5C15 10.7761 14.7761 11 14.5 11C14.2239 11 14 10.7761 14 10.5C14 10.2239 14.2239 10 14.5 10C14.7761 10 15 10.2239 15 10.5ZM14.5 13C14.7761 13 15 12.7761 15 12.5C15 12.2239 14.7761 12 14.5 12C14.2239 12 14 12.2239 14 12.5C14 12.7761 14.2239 13 14.5 13ZM14.5 15C14.7761 15 15 14.7761 15 14.5C15 14.2239 14.7761 14 14.5 14C14.2239 14 14 14.2239 14 14.5C14 14.7761 14.2239 15 14.5 15ZM8.5 11C8.77614 11 9 10.7761 9 10.5C9 10.2239 8.77614 10 8.5 10C8.22386 10 8 10.2239 8 10.5C8 10.7761 8.22386 11 8.5 11ZM9 12.5C9 12.7761 8.77614 13 8.5 13C8.22386 13 8 12.7761 8 12.5C8 12.2239 8.22386 12 8.5 12C8.77614 12 9 12.2239 9 12.5ZM8.5 15C8.77614 15 9 14.7761 9 14.5C9 14.2239 8.77614 14 8.5 14C8.22386 14 8 14.2239 8 14.5C8 14.7761 8.22386 15 8.5 15ZM11 14.5C11 14.7761 10.7761 15 10.5 15C10.2239 15 10 14.7761 10 14.5C10 14.2239 10.2239 14 10.5 14C10.7761 14 11 14.2239 11 14.5ZM12.5 15C12.7761 15 13 14.7761 13 14.5C13 14.2239 12.7761 14 12.5 14C12.2239 14 12 14.2239 12 14.5C12 14.7761 12.2239 15 12.5 15Z",fill:"currentColor",fillRule:"evenodd",clipRule:"evenodd"})]})}function r9(){return g.jsxs("svg",{xmlns:"http://www.w3.org/2000/svg",width:"100%",height:"100%",viewBox:"0 0 24 24",children:[g.jsx("title",{children:"OpenAI"}),g.jsx("path",{fill:"currentColor",d:"M22.282 9.821a6 6 0 0 0-.516-4.91a6.05 6.05 0 0 0-6.51-2.9A6.065 6.065 0 0 0 4.981 4.18a6 6 0 0 0-3.998 2.9a6.05 6.05 0 0 0 .743 7.097a5.98 5.98 0 0 0 .51 4.911a6.05 6.05 0 0 0 6.515 2.9A6 6 0 0 0 13.26 24a6.06 6.06 0 0 0 5.772-4.206a6 6 0 0 0 3.997-2.9a6.06 6.06 0 0 0-.747-7.073M13.26 22.43a4.48 4.48 0 0 1-2.876-1.04l.141-.081l4.779-2.758a.8.8 0 0 0 .392-.681v-6.737l2.02 1.168a.07.07 0 0 1 .038.052v5.583a4.504 4.504 0 0 1-4.494 4.494M3.6 18.304a4.47 4.47 0 0 1-.535-3.014l.142.085l4.783 2.759a.77.77 0 0 0 .78 0l5.843-3.369v2.332a.08.08 0 0 1-.033.062L9.74 19.95a4.5 4.5 0 0 1-6.14-1.646M2.34 7.896a4.5 4.5 0 0 1 2.366-1.973V11.6a.77.77 0 0 0 .388.677l5.815 3.354l-2.02 1.168a.08.08 0 0 1-.071 0l-4.83-2.786A4.504 4.504 0 0 1 2.34 7.872zm16.597 3.855l-5.833-3.387L15.119 7.2a.08.08 0 0 1 .071 0l4.83 2.791a4.494 4.494 0 0 1-.676 8.105v-5.678a.79.79 0 0 0-.407-.667m2.01-3.023l-.141-.085l-4.774-2.782a.78.78 0 0 0-.785 0L9.409 9.23V6.897a.07.07 0 0 1 .028-.061l4.83-2.787a4.5 4.5 0 0 1 6.68 4.66zm-12.64 4.135l-2.02-1.164a.08.08 0 0 1-.038-.057V6.075a4.5 4.5 0 0 1 7.375-3.453l-.142.08L8.704 5.46a.8.8 0 0 0-.393.681zm1.097-2.365l2.602-1.5l2.607 1.5v2.999l-2.597 1.5l-2.607-1.5Z"})]})}function s9(){const{content:t}=to(),{aiCta:a}=m0(),i=i0(),[r,c]=f.useState(!1);f.useEffect(()=>{if(!r)return;const F=setTimeout(()=>c(!1),1e3);return()=>clearTimeout(F)},[r]);const l=f.useCallback(()=>{c(!0),navigator.clipboard.writeText(t??"")},[t]),u=f.useMemo(()=>{const F=window.location.origin+i.pathname;return typeof a=="object"?a.query({location:F}):`Please research and analyze this page: ${F} so I can ask you questions about it. Once you have read it, prompt me with any questions I have. Do not post content from the page in your response. Any of my follow up questions must reference the site I gave you.`},[a,i.pathname]);return g.jsxs("div",{className:o9,children:[r?g.jsxs("div",{className:l2(Dh,b3),children:[g.jsx("div",{style:{width:"14px",height:"14px"},children:g.jsx(E5,{})}),"Copied"]}):g.jsxs(ke,{className:l2(Dh,b3),href:`https://chatgpt.com?hints=search&q=${encodeURIComponent(u)}`,variant:"styleless",children:[g.jsx("div",{style:{width:"14px",height:"14px"},children:g.jsx(r9,{})}),"Ask in ChatGPT"]}),g.jsxs(R7,{children:[g.jsx(T7,{asChild:!0,children:g.jsx("button",{className:l2(Dh,a9),type:"button",children:g.jsx("div",{style:{width:"14px",height:"14px"},children:g.jsx(x5,{})})})}),g.jsx(P7,{children:g.jsx(L7,{align:"end",className:n9,sideOffset:4,children:g.jsxs(M7,{className:i9,onClick:l,children:[g.jsx("div",{style:{width:"14px",height:"14px"},children:g.jsx(S5,{})}),"Copy page for LLMs"]})})})]})]})}var c9="vocs_Outline",l9="vocs_Outline_nav",h9="vocs_Outline_heading",u9="vocs_Outline_items",F9="vocs_Outline_item",d9="vocs_Outline_link";function R5({minLevel:t=2,maxLevel:a=3,highlightActive:i=!0,onClickItem:r,showTitle:c=!0}={}){const{outlineFooter:l}=m0(),{showOutline:u,showAiCta:F}=oo(),p=typeof u=="number"?t+u-1:a,A=f.useRef(!0),{pathname:b,hash:m}=i0(),[y,C]=f.useState([]);f.useEffect(()=>{if(typeof window>"u")return;const x=Array.from(document.querySelectorAll(`.${gg}`));C(x)},[b]);const B=f.useMemo(()=>y?y.map(x=>{const _=x.querySelector(`.${bg}`);if(!_)return null;const R=_.getBoundingClientRect(),P=_.id,S=Number(x.tagName[1]),N=x.textContent,O=window.scrollY+R.top;return S<t||S>p?null:{id:P,level:S,slugTargetElement:_,text:N,topOffset:O}}).filter(Boolean):[],[y,p,t]),[v,D]=f.useState(m.replace("#",""));if(f.useEffect(()=>{if(typeof window>"u")return;const x=new IntersectionObserver(([_])=>{var P;if(!A.current)return;const R=_.target.id;if(_.isIntersecting)D(R);else{if(!(_.target.getBoundingClientRect().top>0))return;const O=B.findIndex(n2=>n2.id===v),U=(P=B[O-1])==null?void 0:P.id;D(U)}},{rootMargin:"0px 0px -95% 0px"});for(const _ of B)x.observe(_.slugTargetElement);return()=>x.disconnect()},[v,B]),f.useEffect(()=>{if(typeof window>"u")return;const x=new IntersectionObserver(([_])=>{var P;if(!A.current)return;const R=(P=B[B.length-1])==null?void 0:P.id;_.isIntersecting?D(R):v===R&&D(B[B.length-2].id)});return x.observe(document.querySelector("[data-bottom-observer]")),()=>x.disconnect()},[v,B]),f.useEffect(()=>{if(typeof window>"u")return;const x=W_(()=>{var _,R,P;if(A.current){if(window.scrollY===0){D((_=B[0])==null?void 0:_.id);return}if(window.scrollY+document.documentElement.clientHeight>=document.documentElement.scrollHeight){D((R=B[B.length-1])==null?void 0:R.id);return}for(let S=0;S<B.length;S++){const N=B[S];if(window.scrollY<N.topOffset){D((P=B[S-1])==null?void 0:P.id);break}}}},100);return window.addEventListener("scroll",x),()=>window.removeEventListener("scroll",x)},[B]),B.length===0)return null;const w=B.filter(x=>x.level===t);return g.jsxs("aside",{className:c9,children:[F&&g.jsx(s9,{}),g.jsxs("nav",{className:l9,children:[c&&g.jsx("h2",{className:h9,children:"On this page"}),g.jsx(T5,{activeId:i?v:null,items:B,onClickItem:()=>{r==null||r(),A.current=!1,setTimeout(()=>{A.current=!0},500)},levelItems:w,setActiveId:D})]}),Ro(l)]})}function T5({activeId:t,items:a,levelItems:i,onClickItem:r,setActiveId:c}){return g.jsx("ul",{className:u9,children:i.map(({id:l,level:u,text:F})=>{const p=`#${l}`,A=t===l,b=(()=>{var v;const y=a.findIndex(D=>D.id===l)+1,C=(v=a[y])==null?void 0:v.level;if(C<=u)return null;const B=[];for(let D=y;D<a.length;D++){const w=a[D];if(w.level!==C)break;B.push(w)}return B})();return g.jsxs(f.Fragment,{children:[g.jsx("li",{className:F9,children:g.jsx(za,{"data-active":A,to:p,onClick:()=>{r==null||r(),c(l)},className:d9,children:F})}),b&&g.jsx(T5,{activeId:t,levelItems:b,items:a,onClickItem:r,setActiveId:c})]},l)})})}var A9="vocs_Popover";Le.Root=W7;Le.Trigger=K7;function Le({children:t,className:a}){return g.jsx(Z7,{children:g.jsx(Y7,{className:l2(A9,a),sideOffset:12,children:t})})}var p9="vocs_Sidebar",m9="vocs_Sidebar_backLink",g9="vocs_Sidebar_divider",b9="vocs_Sidebar_navigation",f9="vocs_Sidebar_group",y9="vocs_Sidebar_logo",C9="vocs_Sidebar_logoWrapper",P5="vocs_Sidebar_section",v9="vocs_Sidebar_level",B9="vocs_Sidebar_levelCollapsed",k9="vocs_Sidebar_levelInset",D9="vocs_Sidebar_footer",w9="vocs_Sidebar_footerContent",_9="vocs_Sidebar_footerCurtain",L5="vocs_Sidebar_items",Xn="vocs_Sidebar_item",Wr="vocs_Sidebar_disabledItem",E9="vocs_Sidebar_sectionHeader",x9="vocs_Sidebar_sectionHeaderActive",f3="vocs_Sidebar_sectionTitle",S9="vocs_Sidebar_sectionTitleLink",R9="vocs_Sidebar_sectionCollapse",T9="vocs_Sidebar_sectionCollapseActive";function P9(){const[t,a]=f.useState(()=>{if(!(typeof window>"u")){if(localStorage.getItem("vocs.theme")){const i=localStorage.getItem("vocs.theme");if(i)return i}return window.matchMedia("(prefers-color-scheme: dark)").matches?"dark":"light"}});return f.useEffect(()=>{t&&localStorage.setItem("vocs.theme",t),t==="dark"?document.documentElement.classList.add("dark"):document.documentElement.classList.remove("dark")},[t]),{setTheme:a,theme:t,toggle(){a(i=>i==="light"?"dark":"light")}}}var L9="vocs_ThemeToggle",y3="vocs_ThemeToggle_themeToggleButton";function M9(){return g.jsxs("svg",{width:"100%",height:"100%",viewBox:"0 0 15 15",fill:"none",xmlns:"http://www.w3.org/2000/svg",children:[g.jsx("title",{children:"Moon"}),g.jsx("path",{d:"M2.89998 0.499976C2.89998 0.279062 2.72089 0.0999756 2.49998 0.0999756C2.27906 0.0999756 2.09998 0.279062 2.09998 0.499976V1.09998H1.49998C1.27906 1.09998 1.09998 1.27906 1.09998 1.49998C1.09998 1.72089 1.27906 1.89998 1.49998 1.89998H2.09998V2.49998C2.09998 2.72089 2.27906 2.89998 2.49998 2.89998C2.72089 2.89998 2.89998 2.72089 2.89998 2.49998V1.89998H3.49998C3.72089 1.89998 3.89998 1.72089 3.89998 1.49998C3.89998 1.27906 3.72089 1.09998 3.49998 1.09998H2.89998V0.499976ZM5.89998 3.49998C5.89998 3.27906 5.72089 3.09998 5.49998 3.09998C5.27906 3.09998 5.09998 3.27906 5.09998 3.49998V4.09998H4.49998C4.27906 4.09998 4.09998 4.27906 4.09998 4.49998C4.09998 4.72089 4.27906 4.89998 4.49998 4.89998H5.09998V5.49998C5.09998 5.72089 5.27906 5.89998 5.49998 5.89998C5.72089 5.89998 5.89998 5.72089 5.89998 5.49998V4.89998H6.49998C6.72089 4.89998 6.89998 4.72089 6.89998 4.49998C6.89998 4.27906 6.72089 4.09998 6.49998 4.09998H5.89998V3.49998ZM1.89998 6.49998C1.89998 6.27906 1.72089 6.09998 1.49998 6.09998C1.27906 6.09998 1.09998 6.27906 1.09998 6.49998V7.09998H0.499976C0.279062 7.09998 0.0999756 7.27906 0.0999756 7.49998C0.0999756 7.72089 0.279062 7.89998 0.499976 7.89998H1.09998V8.49998C1.09998 8.72089 1.27906 8.89997 1.49998 8.89997C1.72089 8.89997 1.89998 8.72089 1.89998 8.49998V7.89998H2.49998C2.72089 7.89998 2.89998 7.72089 2.89998 7.49998C2.89998 7.27906 2.72089 7.09998 2.49998 7.09998H1.89998V6.49998ZM8.54406 0.98184L8.24618 0.941586C8.03275 0.917676 7.90692 1.1655 8.02936 1.34194C8.17013 1.54479 8.29981 1.75592 8.41754 1.97445C8.91878 2.90485 9.20322 3.96932 9.20322 5.10022C9.20322 8.37201 6.82247 11.0878 3.69887 11.6097C3.45736 11.65 3.20988 11.6772 2.96008 11.6906C2.74563 11.702 2.62729 11.9535 2.77721 12.1072C2.84551 12.1773 2.91535 12.2458 2.98667 12.3128L3.05883 12.3795L3.31883 12.6045L3.50684 12.7532L3.62796 12.8433L3.81491 12.9742L3.99079 13.089C4.11175 13.1651 4.23536 13.2375 4.36157 13.3059L4.62496 13.4412L4.88553 13.5607L5.18837 13.6828L5.43169 13.7686C5.56564 13.8128 5.70149 13.8529 5.83857 13.8885C5.94262 13.9155 6.04767 13.9401 6.15405 13.9622C6.27993 13.9883 6.40713 14.0109 6.53544 14.0298L6.85241 14.0685L7.11934 14.0892C7.24637 14.0965 7.37436 14.1002 7.50322 14.1002C11.1483 14.1002 14.1032 11.1453 14.1032 7.50023C14.1032 7.25044 14.0893 7.00389 14.0623 6.76131L14.0255 6.48407C13.991 6.26083 13.9453 6.04129 13.8891 5.82642C13.8213 5.56709 13.7382 5.31398 13.6409 5.06881L13.5279 4.80132L13.4507 4.63542L13.3766 4.48666C13.2178 4.17773 13.0353 3.88295 12.8312 3.60423L12.6782 3.40352L12.4793 3.16432L12.3157 2.98361L12.1961 2.85951L12.0355 2.70246L11.8134 2.50184L11.4925 2.24191L11.2483 2.06498L10.9562 1.87446L10.6346 1.68894L10.3073 1.52378L10.1938 1.47176L9.95488 1.3706L9.67791 1.2669L9.42566 1.1846L9.10075 1.09489L8.83599 1.03486L8.54406 0.98184ZM10.4032 5.30023C10.4032 4.27588 10.2002 3.29829 9.83244 2.40604C11.7623 3.28995 13.1032 5.23862 13.1032 7.50023C13.1032 10.593 10.596 13.1002 7.50322 13.1002C6.63646 13.1002 5.81597 12.9036 5.08355 12.5522C6.5419 12.0941 7.81081 11.2082 8.74322 10.0416C8.87963 10.2284 9.10028 10.3497 9.34928 10.3497C9.76349 10.3497 10.0993 10.0139 10.0993 9.59971C10.0993 9.24256 9.84965 8.94373 9.51535 8.86816C9.57741 8.75165 9.63653 8.63334 9.6926 8.51332C9.88358 8.63163 10.1088 8.69993 10.35 8.69993C11.0403 8.69993 11.6 8.14028 11.6 7.44993C11.6 6.75976 11.0406 6.20024 10.3505 6.19993C10.3853 5.90487 10.4032 5.60464 10.4032 5.30023Z",fill:"currentColor",fillRule:"evenodd",clipRule:"evenodd"})]})}function N9(){return g.jsxs("svg",{width:"100%",height:"100%",viewBox:"0 0 15 15",fill:"none",children:[g.jsx("title",{children:"Sun"}),g.jsx("path",{d:"M7.5 0C7.77614 0 8 0.223858 8 0.5V2.5C8 2.77614 7.77614 3 7.5 3C7.22386 3 7 2.77614 7 2.5V0.5C7 0.223858 7.22386 0 7.5 0ZM2.1967 2.1967C2.39196 2.00144 2.70854 2.00144 2.90381 2.1967L4.31802 3.61091C4.51328 3.80617 4.51328 4.12276 4.31802 4.31802C4.12276 4.51328 3.80617 4.51328 3.61091 4.31802L2.1967 2.90381C2.00144 2.70854 2.00144 2.39196 2.1967 2.1967ZM0.5 7C0.223858 7 0 7.22386 0 7.5C0 7.77614 0.223858 8 0.5 8H2.5C2.77614 8 3 7.77614 3 7.5C3 7.22386 2.77614 7 2.5 7H0.5ZM2.1967 12.8033C2.00144 12.608 2.00144 12.2915 2.1967 12.0962L3.61091 10.682C3.80617 10.4867 4.12276 10.4867 4.31802 10.682C4.51328 10.8772 4.51328 11.1938 4.31802 11.3891L2.90381 12.8033C2.70854 12.9986 2.39196 12.9986 2.1967 12.8033ZM12.5 7C12.2239 7 12 7.22386 12 7.5C12 7.77614 12.2239 8 12.5 8H14.5C14.7761 8 15 7.77614 15 7.5C15 7.22386 14.7761 7 14.5 7H12.5ZM10.682 4.31802C10.4867 4.12276 10.4867 3.80617 10.682 3.61091L12.0962 2.1967C12.2915 2.00144 12.608 2.00144 12.8033 2.1967C12.9986 2.39196 12.9986 2.70854 12.8033 2.90381L11.3891 4.31802C11.1938 4.51328 10.8772 4.51328 10.682 4.31802ZM8 12.5C8 12.2239 7.77614 12 7.5 12C7.22386 12 7 12.2239 7 12.5V14.5C7 14.7761 7.22386 15 7.5 15C7.77614 15 8 14.7761 8 14.5V12.5ZM10.682 10.682C10.8772 10.4867 11.1938 10.4867 11.3891 10.682L12.8033 12.0962C12.9986 12.2915 12.9986 12.608 12.8033 12.8033C12.608 12.9986 12.2915 12.9986 12.0962 12.8033L10.682 11.3891C10.4867 11.1938 10.4867 10.8772 10.682 10.682ZM5.5 7.5C5.5 6.39543 6.39543 5.5 7.5 5.5C8.60457 5.5 9.5 6.39543 9.5 7.5C9.5 8.60457 8.60457 9.5 7.5 9.5C6.39543 9.5 5.5 8.60457 5.5 7.5ZM7.5 4.5C5.84315 4.5 4.5 5.84315 4.5 7.5C4.5 9.15685 5.84315 10.5 7.5 10.5C9.15685 10.5 10.5 9.15685 10.5 7.5C10.5 5.84315 9.15685 4.5 7.5 4.5Z",fill:"currentColor",fillRule:"evenodd",clipRule:"evenodd"})]})}function M5(){const{theme:t,setTheme:a}=P9();return!ju()||!t?null:g.jsxs("div",{className:L9,children:[g.jsx("button",{"data-active":t==="light",type:"button",className:y3,onClick:()=>a("light"),children:g.jsx(V0,{label:"Light Mode",icon:N9,size:"16px"})}),g.jsx("button",{"data-active":t==="dark",type:"button",className:y3,onClick:()=>a("dark"),children:g.jsx(V0,{label:"Dark Mode",icon:M9,size:"16px"})})]})}function N5(){return g.jsxs("svg",{width:"100%",height:"100%",viewBox:"0 0 15 15",fill:"none",xmlns:"http://www.w3.org/2000/svg",children:[g.jsx("title",{children:"Chevron Right"}),g.jsx("path",{d:"M6.1584 3.13508C6.35985 2.94621 6.67627 2.95642 6.86514 3.15788L10.6151 7.15788C10.7954 7.3502 10.7954 7.64949 10.6151 7.84182L6.86514 11.8418C6.67627 12.0433 6.35985 12.0535 6.1584 11.8646C5.95694 11.6757 5.94673 11.3593 6.1356 11.1579L9.565 7.49985L6.1356 3.84182C5.94673 3.64036 5.95694 3.32394 6.1584 3.13508Z",fill:"currentColor",fillRule:"evenodd",clipRule:"evenodd"})]})}function I5(t){var b;const{className:a,onClickItem:i}=t,{theme:r}=m0(),{previousPath:c}=to(),l=f.useRef(null),u=Bs(),[F,p]=f.useState("/");if(f.useEffect(()=>{typeof window>"u"||c&&p(c)},[u.key,u.backLink]),!u)return null;const A=I9(u.items);return g.jsxs("aside",{ref:l,className:l2(p9,a),children:[g.jsxs("div",{children:[g.jsxs("div",{className:C9,children:[g.jsx("div",{className:y9,children:g.jsx(Ta,{to:"/",style:{alignItems:"center",display:"flex",height:"100%"},children:g.jsx(Lu,{})})}),g.jsx("div",{className:g9})]}),g.jsx("nav",{className:b9,children:g.jsxs("div",{className:f9,children:[u.backLink&&g.jsx("section",{className:P5,children:g.jsx("div",{className:L5,children:g.jsxs(Ta,{className:l2(Xn,m9),to:F,children:["←"," ",typeof history<"u"&&((b=history.state)!=null&&b.key)&&F!=="/"?"Back":"Home"]})})}),A.map((m,y)=>g.jsx(z5,{depth:0,item:m,onClick:i,sidebarRef:l},`${m.text}${y}`))]})})]}),g.jsxs("div",{className:D9,children:[g.jsx("div",{className:_9}),g.jsxs("div",{className:w9,children:[g.jsx(Vu,{}),r!=null&&r.colorScheme?null:g.jsx(M5,{})]})]})]},u.key)}function I9(t){const a=[];let i=0;for(const r of t){if(r.items){i=a.push(r);continue}a[i]?a[i].items.push(r):a.push({text:"",items:[r]})}return a}function H5(t,a){return t.find(i=>So(a,i.link??"")||i.link===a?!0:i.items?H5(i.items,a):!1)}function z5(t){const{depth:a,item:i,onClick:r,sidebarRef:c}=t,l=f.useRef(null),{pathname:u}=i0(),F=vv(i.link||""),p=f.useMemo(()=>i.items?!!H5(i.items,u):!1,[i.items,u]),[A,b]=f.useState(()=>i.link&&F||!i.items||p?!1:!!i.collapsed),m=i.collapsed!==void 0&&i.items!==void 0,y=f.useCallback(v=>{"key"in v&&v.key!=="Enter"||b(D=>!D)},[]),C=f.useCallback(v=>{"key"in v&&v.key!=="Enter"||b(D=>!D)},[]),B=f.useRef(!0);return f.useEffect(()=>{!B.current||(B.current=!1,!So(u,i.link??""))||requestAnimationFrame(()=>{var x,_,R;const D=((x=l.current)==null?void 0:x.offsetTop)??0,w=((_=c==null?void 0:c.current)==null?void 0:_.clientHeight)??0;D<w||(R=c==null?void 0:c.current)==null||R.scrollTo({top:D-100})})},[i,u,c]),i.items?g.jsxs("section",{ref:l,className:l2(P5,a===0&&i.text&&v9,a===0&&i.text&&A&&B9),children:[i.text&&g.jsxs("div",{className:E9,...m&&!i.link?{role:"button",tabIndex:0,onClick:y,onKeyDown:y}:{},children:[i.text&&(i.link?g.jsx(ke,{"data-active":!!F,onClick:v=>{r==null||r(v),y(v)},className:l2(a===0?[f3,S9]:Xn,p&&x9,i.disabled&&Wr),href:i.link,variant:"styleless",children:i.text}):g.jsx("div",{className:l2(a===0?f3:Xn,i.disabled&&Wr),children:i.text})),m&&g.jsx("div",{role:"button",tabIndex:0,onClick:C,onKeyDown:C,children:g.jsx(V0,{className:l2(R9,A&&T9),label:"toggle section",icon:N5,size:"16px"})})]}),!A&&g.jsx("div",{className:l2(L5,a!==0&&k9),children:i.items&&i.items.length>0&&a<5&&i.items.map((v,D)=>g.jsx(z5,{depth:a+1,item:v,onClick:r,sidebarRef:c},`${v.text}${D}`))})]}):g.jsx(g.Fragment,{children:i.link?g.jsx(ke,{ref:l,"data-active":!!F,onClick:r,className:l2(Xn,i.disabled&&Wr),href:i.link,variant:"styleless",children:i.text}):g.jsx("div",{className:l2(Xn,i.disabled&&Wr),children:i.text})})}function H9(){return g.jsxs("svg",{width:"100%",height:"100%",viewBox:"0 0 15 15",fill:"none",xmlns:"http://www.w3.org/2000/svg",children:[g.jsx("title",{children:"Chevron Up"}),g.jsx("path",{d:"M3.13523 8.84197C3.3241 9.04343 3.64052 9.05363 3.84197 8.86477L7.5 5.43536L11.158 8.86477C11.3595 9.05363 11.6759 9.04343 11.8648 8.84197C12.0536 8.64051 12.0434 8.32409 11.842 8.13523L7.84197 4.38523C7.64964 4.20492 7.35036 4.20492 7.15803 4.38523L3.15803 8.13523C2.95657 8.32409 2.94637 8.64051 3.13523 8.84197Z",fill:"currentColor",fillRule:"evenodd",clipRule:"evenodd"})]})}function O5(){return g.jsxs("svg",{width:"100%",height:"100%",xmlns:"http://www.w3.org/2000/svg",viewBox:"0 0 79 48",fill:"none",children:[g.jsx("title",{children:"Menu"}),g.jsx("path",{fill:"currentColor",d:"M19.528 47.232h40.87c1.952 0 3.515-1.562 3.515-3.564a3.5 3.5 0 0 0-3.516-3.516H19.528a3.501 3.501 0 0 0-3.515 3.516c0 2.002 1.562 3.564 3.515 3.564ZM12.057 27.262h55.81a3.501 3.501 0 0 0 3.516-3.516 3.501 3.501 0 0 0-3.515-3.515h-55.81a3.501 3.501 0 0 0-3.516 3.515 3.501 3.501 0 0 0 3.515 3.516ZM4.391 7.34H75.29c2.002 0 3.515-1.563 3.515-3.516 0-2.002-1.513-3.564-3.515-3.564H4.39C2.438.26.876 1.822.876 3.824A3.501 3.501 0 0 0 4.39 7.34Z"})]})}iu.Curtain=V9;function iu(){const t=m0(),{showLogo:a}=oo();return g.jsxs("div",{className:S_,children:[g.jsxs("div",{className:s3,children:[a&&g.jsx("div",{className:Ch,children:g.jsx("div",{className:L_,children:g.jsx(Ta,{to:"/",style:{alignItems:"center",display:"flex",height:"100%"},children:g.jsx(Lu,{})})})}),t.topNav&&g.jsxs("div",{className:Ch,children:[g.jsx(z9,{items:t.topNav}),g.jsx(j9,{items:t.topNav})]})]}),g.jsx("div",{className:s3,children:g.jsx("div",{className:Ch,style:{marginRight:"-8px"},children:g.jsx(x_,{})})})]})}function z9({items:t}){const{pathname:a}=i0(),i=si({pathname:a,items:t});return g.jsx(wb,{className:Zb,children:g.jsxs(_b,{children:[t.map((r,c)=>r.element?Ro(r.element):r.link?g.jsx(xs,{active:i==null?void 0:i.includes(r.id),href:r.link,children:r.text},c):g.jsxs(Eb,{className:P_,children:[g.jsx(xb,{active:i==null?void 0:i.includes(r.id),children:r.text}),g.jsx(Sb,{className:R_,children:g.jsx(O9,{items:r.items||[]})})]},c)),g.jsx(wu,{})]})})}function O9({items:t}){const{pathname:a}=i0(),i=si({pathname:a,items:t});return g.jsx("ul",{children:t==null?void 0:t.map((r,c)=>g.jsx(xs,{active:i.includes(r.id),href:r.link,children:r.text},c))})}function j9({items:t}){const[a,i]=f.useState(!1),{showSidebar:r}=oo(),{pathname:c}=i0(),l=si({pathname:c,items:t}),u=t.filter(b=>b.id===l[0])[0],{basePath:F,theme:p}=m0(),A=F;return g.jsx("div",{className:l2(Zb,N_),children:g.jsxs(Le.Root,{modal:!0,open:a,onOpenChange:i,children:[g.jsx(Le.Trigger,{className:l2(Kb,Gr),children:r||u?g.jsxs(g.Fragment,{children:[(u==null?void 0:u.text)??"Menu",g.jsx(V0,{label:"Menu",icon:x5,size:"16px"})]}):g.jsx(V0,{label:"Menu",icon:O5,size:"16px"})}),g.jsxs(Le,{className:G_,children:[g.jsxs(k_,{type:"single",collapsible:!0,style:{display:"flex",flexDirection:"column"},children:[t.map((b,m)=>{var y;return b.element?Ro(b.element):b.link?g.jsx(ke,{"data-active":l.includes(b.id),className:Gr,href:b.link,onClick:()=>i(!1),variant:"styleless",children:b.text},m):g.jsxs(D_,{value:m.toString(),children:[g.jsx(w_,{className:l2(Gr,O_),"data-active":l.includes(b.id),style:Me({[H_]:`url(${A}/.vocs/icons/chevron-down.svg)`,[z_]:`url(${A}/.vocs/icons/chevron-up.svg)`}),children:b.text}),g.jsx(__,{className:I_,children:(y=b.items)==null?void 0:y.map((C,B)=>g.jsx(ke,{className:Gr,href:C.link,onClick:()=>i(!1),variant:"styleless",children:C.text},B))})]},m)}),g.jsx(wu,{})]}),g.jsxs("div",{className:q_,children:[g.jsx(Vu,{}),p!=null&&p.colorScheme?null:g.jsx(M5,{})]})]})]})})}function V9({enableScrollToTop:t}){const{pathname:a}=i0(),{layout:i,showSidebar:r}=oo(),{frontmatter:c={}}=to(),l=Bs(),[u,F]=f.useState(!1),[p,A]=f.useState(!1),b=f.useMemo(()=>{if(!l||i==="minimal")return;const C=j5({sidebarItems:l.items,pathname:a});return C==null?void 0:C.text},[i,a,l]),m=f.useMemo(()=>{var C;if(!(typeof window>"u"))return(C=document.querySelector(".vocs_Content h1"))==null?void 0:C.textContent},[]),y=b||c.title||m;return g.jsxs("div",{className:T_,children:[g.jsx("div",{className:i3,children:g.jsx("div",{className:yh,children:r?g.jsxs(Le.Root,{modal:!0,open:p,onOpenChange:A,children:[g.jsxs(Le.Trigger,{className:Kb,children:[g.jsx(V0,{label:"Menu",icon:O5,size:"13px"}),g.jsx("div",{className:M_,children:y})]}),g.jsx(Le,{className:U_,children:g.jsx(I5,{onClickItem:()=>A(!1)})})]}):y})}),g.jsxs("div",{className:i3,children:[t&&g.jsxs(g.Fragment,{children:[g.jsx("div",{className:yh,children:g.jsxs("button",{className:r3,onClick:()=>window.scrollTo({behavior:"smooth",top:0}),type:"button",children:["Top",g.jsx(V0,{label:"Scroll to top",icon:H9,size:"16px"})]})}),g.jsx("div",{className:V_})]}),i==="docs"&&g.jsx("div",{className:yh,children:g.jsxs(Le.Root,{modal:!0,open:u,onOpenChange:F,children:[g.jsxs(Le.Trigger,{className:r3,children:["On this page",g.jsx(V0,{label:"On this page",icon:N5,size:"16px"})]}),g.jsx(Le,{className:j_,children:g.jsx(R5,{onClickItem:()=>F(!1),showTitle:!1})})]})})]})]})}function j5({sidebarItems:t,pathname:a}){const i=a.replace(/(.+)\/$/,"$1");for(const r of t){if((r==null?void 0:r.link)===i)return r;if(r.items){const c=j5({sidebarItems:r.items,pathname:i});if(c)return c}}}var U9="vocs_SkipLink";const V5="vocs-content";function G9(){const{pathname:t}=i0();return g.jsx("a",{className:l2(U9,rb),href:`${t}#${V5}`,children:"Skip to content"})}var q9="vocs_DocsLayout",W9="vocs_DocsLayout_content",K9="vocs_DocsLayout_content_withTopNav",Z9="vocs_DocsLayout_content_withSidebar",Y9="vocs_DocsLayout_gutterLeft",X9="vocs_DocsLayout_gutterTop",J9="vocs_DocsLayout_gutterTop_offsetLeftGutter",$9="vocs_DocsLayout_gutterTop_sticky",Q9="vocs_DocsLayout_gutterTopCurtain",ex="vocs_DocsLayout_gutterTopCurtain_hidden",tx="vocs_DocsLayout_gutterTopCurtain_withSidebar",ox="vocs_DocsLayout_gutterRight",ax="vocs_DocsLayout_gutterRight_withSidebar",nx="vocs_DocsLayout_sidebar";function ru({children:t}){var C,B;const{banner:a,font:i}=m0(),{frontmatter:r={}}=to(),{content:c}=r,{layout:l,showOutline:u,showSidebar:F,showTopNav:p}=oo(),{ref:A,inView:b}=mg({initialInView:!0,rootMargin:"100px 0px 0px 0px"}),[m,y]=ib("banner",!0);return g.jsxs("div",{className:q9,"data-layout":l,style:Me({[q1]:m?a==null?void 0:a.height:void 0,[Dm.default]:(C=i==null?void 0:i.default)!=null&&C.google?`${i.default.google}, ${km.default}`:void 0,[Dm.mono]:(B=i==null?void 0:i.mono)!=null&&B.google?`${i.mono.google}, ${km.mono}`:void 0}),children:[g.jsx(G9,{}),m&&g.jsx(dB,{hide:()=>y(!1)}),F&&g.jsx("div",{className:Y9,children:g.jsx(I5,{className:nx})}),p&&g.jsxs(g.Fragment,{children:[g.jsxs("div",{ref:A,className:l2(X9,F&&J9,(l==="minimal"||l==="landing")&&$9),children:[g.jsx(Jh,{}),g.jsx(iu,{})]}),g.jsxs("div",{className:l2(Q9,F&&tx,(l==="minimal"||l==="landing")&&ex),children:[g.jsx(Jh.Curtain,{}),g.jsx(iu.Curtain,{enableScrollToTop:!b})]})]}),u&&g.jsx("div",{className:l2(ox,F&&ax),children:g.jsx(R5,{})}),g.jsxs("div",{id:V5,className:l2(W9,F&&Z9,p&&K9),style:Me({[nh.horizontalPadding]:c==null?void 0:c.horizontalPadding,[nh.width]:c==null?void 0:c.width,[nh.verticalPadding]:c==null?void 0:c.verticalPadding}),children:[g.jsx(Cg,{children:t}),g.jsx(i_,{})]}),g.jsx("div",{"data-bottom-observer":!0})]})}const su={},U5=a0.createContext(su);function ix(t){const a=a0.useContext(U5);return a0.useMemo(function(){return typeof t=="function"?t(a):{...a,...t}},[a,t])}function rx(t){let a;return t.disableParentContext?a=typeof t.components=="function"?t.components(su):t.components||su:a=ix(t.components),a0.createElement(U5.Provider,{value:a},t.children)}var wh="vocs_Anchor",sx="vocs_Autolink";function cx(t){return t.href?g.jsx(za,{...t,className:l2(t.className,sx),to:t.href}):null}function lx(t){const{children:a,href:i}=t,{pathname:r}=i0();return a&&typeof a=="object"&&"props"in a&&a.props["data-autolink-icon"]?g.jsx(cx,{className:l2(t.className,wh),...t}):i!=null&&i.match(/^#/)?g.jsx("a",{className:l2(t.className,wh),...t,href:`${r}${i}`}):g.jsx(ke,{className:l2(t.className,wh),...t,hideExternalIcon:!0})}var G5="vocs_Callout",q5="vocs_Callout_content",W5="vocs_Callout_icon",hx="vocs_Callout_note",ux="vocs_Callout_info",Fx="vocs_Callout_warning",dx="vocs_Callout_danger",Ax="vocs_Callout_tip",px="vocs_Callout_success";const mx=Object.freeze(Object.defineProperty({__proto__:null,content:q5,danger:dx,icon:W5,info:ux,note:hx,root:G5,success:px,tip:Ax,warning:Fx},Symbol.toStringTag,{value:"Module"}));function C3(){return g.jsxs("svg",{width:"100%",height:"100%",viewBox:"0 0 15 15",fill:"none",xmlns:"http://www.w3.org/2000/svg",children:[g.jsx("title",{children:"Exclamation"}),g.jsx("path",{d:"M8.4449 0.608765C8.0183 -0.107015 6.9817 -0.107015 6.55509 0.608766L0.161178 11.3368C-0.275824 12.07 0.252503 13 1.10608 13H13.8939C14.7475 13 15.2758 12.07 14.8388 11.3368L8.4449 0.608765ZM7.4141 1.12073C7.45288 1.05566 7.54712 1.05566 7.5859 1.12073L13.9798 11.8488C14.0196 11.9154 13.9715 12 13.8939 12H1.10608C1.02849 12 0.980454 11.9154 1.02018 11.8488L7.4141 1.12073ZM6.8269 4.48611C6.81221 4.10423 7.11783 3.78663 7.5 3.78663C7.88217 3.78663 8.18778 4.10423 8.1731 4.48612L8.01921 8.48701C8.00848 8.766 7.7792 8.98664 7.5 8.98664C7.2208 8.98664 6.99151 8.766 6.98078 8.48701L6.8269 4.48611ZM8.24989 10.476C8.24989 10.8902 7.9141 11.226 7.49989 11.226C7.08567 11.226 6.74989 10.8902 6.74989 10.476C6.74989 10.0618 7.08567 9.72599 7.49989 9.72599C7.9141 9.72599 8.24989 10.0618 8.24989 10.476Z",fill:"currentColor",fillRule:"evenodd",clipRule:"evenodd"})]})}function v3(){return g.jsxs("svg",{width:"100%",height:"100%",viewBox:"0 0 15 15",fill:"none",xmlns:"http://www.w3.org/2000/svg",children:[g.jsx("title",{children:"Info"}),g.jsx("path",{d:"M7.49991 0.876892C3.84222 0.876892 0.877075 3.84204 0.877075 7.49972C0.877075 11.1574 3.84222 14.1226 7.49991 14.1226C11.1576 14.1226 14.1227 11.1574 14.1227 7.49972C14.1227 3.84204 11.1576 0.876892 7.49991 0.876892ZM1.82707 7.49972C1.82707 4.36671 4.36689 1.82689 7.49991 1.82689C10.6329 1.82689 13.1727 4.36671 13.1727 7.49972C13.1727 10.6327 10.6329 13.1726 7.49991 13.1726C4.36689 13.1726 1.82707 10.6327 1.82707 7.49972ZM8.24992 4.49999C8.24992 4.9142 7.91413 5.24999 7.49992 5.24999C7.08571 5.24999 6.74992 4.9142 6.74992 4.49999C6.74992 4.08577 7.08571 3.74999 7.49992 3.74999C7.91413 3.74999 8.24992 4.08577 8.24992 4.49999ZM6.00003 5.99999H6.50003H7.50003C7.77618 5.99999 8.00003 6.22384 8.00003 6.49999V9.99999H8.50003H9.00003V11H8.50003H7.50003H6.50003H6.00003V9.99999H6.50003H7.00003V6.99999H6.50003H6.00003V5.99999Z",fill:"currentColor",fillRule:"evenodd",clipRule:"evenodd"})]})}function gx(){return g.jsxs("svg",{width:"100%",height:"100%",viewBox:"0 0 15 15",fill:"none",xmlns:"http://www.w3.org/2000/svg",children:[g.jsx("title",{children:"Lightning Bolt"}),g.jsx("path",{d:"M8.69667 0.0403541C8.90859 0.131038 9.03106 0.354857 8.99316 0.582235L8.0902 6.00001H12.5C12.6893 6.00001 12.8625 6.10701 12.9472 6.27641C13.0319 6.4458 13.0136 6.6485 12.8999 6.80001L6.89997 14.8C6.76167 14.9844 6.51521 15.0503 6.30328 14.9597C6.09135 14.869 5.96888 14.6452 6.00678 14.4178L6.90974 9H2.49999C2.31061 9 2.13748 8.893 2.05278 8.72361C1.96809 8.55422 1.98636 8.35151 2.09999 8.2L8.09997 0.200038C8.23828 0.0156255 8.48474 -0.0503301 8.69667 0.0403541ZM3.49999 8.00001H7.49997C7.64695 8.00001 7.78648 8.06467 7.88148 8.17682C7.97648 8.28896 8.01733 8.43723 7.99317 8.5822L7.33027 12.5596L11.5 7.00001H7.49997C7.353 7.00001 7.21347 6.93534 7.11846 6.8232C7.02346 6.71105 6.98261 6.56279 7.00678 6.41781L7.66968 2.44042L3.49999 8.00001Z",fill:"currentColor",fillRule:"evenodd",clipRule:"evenodd"})]})}function bx({className:t,children:a,type:i}){return g.jsxs("aside",{className:l2(t,G5,mx[i]),children:[g.jsxs("div",{className:W5,children:[i==="note"&&g.jsx(v3,{}),i==="info"&&g.jsx(v3,{}),i==="warning"&&g.jsx(C3,{}),i==="danger"&&g.jsx(C3,{}),i==="tip"&&g.jsx(gx,{}),i==="success"&&g.jsx(E5,{})]}),g.jsx("div",{className:q5,children:a})]})}var fx="vocs_Aside";function yx(t){const a=l2(t.className,fx);return"data-callout"in t?g.jsx(bx,{className:a,type:t["data-callout"],children:t.children}):g.jsx("aside",{...t,className:a})}var Cx="vocs_Blockquote";function vx(t){return g.jsx("blockquote",{...t,className:l2(t.className,Cx)})}var Bx="vocs_Code";function kx(t){const a=Dx(t.children);return g.jsx("code",{...t,className:l2(t.className,Bx),children:a})}function Dx(t){return Array.isArray(t)?t.map((a,i)=>{var r,c,l;return a.props&&"data-line"in a.props&&typeof a.props.children=="string"&&a.props.children.trim()===""&&((l=(c=(r=t[i+1])==null?void 0:r.props)==null?void 0:c.className)!=null&&l.includes("twoslash-tag-line"))?null:a}).filter(Boolean):t}var wx="vocs_Details";function _x(t){return g.jsx("details",{...t,className:l2(t.className,wx)})}var Ex="vocs_Authors",xx="vocs_Authors_authors",Sx="vocs_Authors_link",B3="vocs_Authors_separator";function K5(t){const{frontmatter:a}=to(),{authors:i=a==null?void 0:a.authors,date:r=a==null?void 0:a.date}=t,c=f.useMemo(()=>{if(i)return Array.isArray(i)?i:i.split(",").map(u=>u.trim())},[i]),l=f.useMemo(()=>r?new Date(r).toLocaleDateString("en-US",{year:"numeric",month:"long",day:"numeric"}):null,[r]);return g.jsxs("div",{className:Ex,children:[l,c&&(l?" by ":"By "),g.jsx("span",{className:xx,children:c==null?void 0:c.map((u,F)=>{const{text:p,url:A}=Rx(u);return g.jsxs(f.Fragment,{children:[A?g.jsx("a",{className:Sx,href:A,target:"_blank",rel:"noopener noreferrer",children:p}):p,F<c.length-2&&g.jsx("span",{className:B3,children:", "}),F<c.length-1&&g.jsx("span",{className:B3,children:" & "})]},F)})})]})}function Rx(t){const a=t.match(/\[(.+)\]\((.+)\)/);return a?{text:a[1],url:a[2]}:{text:t,url:void 0}}const k3=[];var Tx="vocs_BlogPosts",Px="vocs_BlogPosts_description",Lx="vocs_BlogPosts_divider",Mx="vocs_BlogPosts_post",Nx="vocs_BlogPosts_readMore",Ix="vocs_BlogPosts_title";function Hx(){return g.jsx("div",{className:Tx,children:k3.map((t,a)=>g.jsxs(f.Fragment,{children:[g.jsx("div",{className:Mx,children:g.jsxs(Ta,{to:t.path,children:[g.jsx("h2",{className:Ix,children:t.title}),g.jsx(K5,{authors:t.authors,date:t.date}),g.jsxs("p",{className:Px,children:[t.description," ",g.jsx("span",{className:Nx,children:"[→]"})]})]})}),a<k3.length-1&&g.jsx("hr",{className:Lx})]},a))})}var zx="var(--vocs_Sponsors_columns)",Ox="var(--vocs_Sponsors_height)",jx="vocs_Sponsors",Vx="vocs_Sponsors_title",Ux="vocs_Sponsors_row",Gx="vocs_Sponsors_column",qx="vocs_Sponsors_sponsor",Wx="vocs_Sponsors_image";function Kx(){const{sponsors:t}=m0();return g.jsx("div",{className:jx,children:t==null?void 0:t.map((a,i)=>g.jsxs(f.Fragment,{children:[g.jsx("div",{className:Vx,children:a.name}),a.items.map((r,c)=>{var l;return g.jsx("div",{className:Ux,style:Me({[zx]:r.length.toString(),[Ox]:`${((l=a.height)==null?void 0:l.toString())??"40"}px`}),children:r.map((u,F)=>g.jsx(ke,{className:l2(Gx,u?qx:void 0),href:u==null?void 0:u.link,hideExternalIcon:!0,variant:"styleless",children:(u==null?void 0:u.image)&&g.jsx("img",{className:Wx,src:u==null?void 0:u.image,alt:u==null?void 0:u.name})},F))},c)})]},i))})}var Zx="var(--vocs_AutolinkIcon_iconUrl)",Yx="vocs_AutolinkIcon";function Xx(t){const{basePath:a}=m0(),i=a;return g.jsx("div",{...t,className:l2(t.className,Yx),style:Me({[Zx]:`url(${i}/.vocs/icons/link.svg)`})})}var Jx="vocs_Tabs",$x="vocs_Tabs_list",Qx="vocs_Tabs_trigger",eS="vocs_Tabs_content";function tS(t){return g.jsx($7,{...t,className:l2(t.className,Jx)})}function oS(t){return g.jsx(Q7,{...t,className:l2(t.className,$x)})}function aS(t){return g.jsx(e9,{...t,className:l2(t.className,Qx)})}function nS(t){return g.jsx(t9,{...t,className:l2(t.className,eS)})}var iS="vocs_CodeGroup";function rS({children:t}){if(!Array.isArray(t))return null;const a=t.map(i=>{const r=i.props["data-title"]?i:i.props.children,{props:c}=r,l=c["data-title"],u=c.children;return{title:l,content:u}});return g.jsxs(tS,{className:iS,defaultValue:a[0].title,children:[g.jsx(oS,{"aria-label":"Code group",children:a.map(({title:i},r)=>g.jsx(aS,{value:i||r.toString(),children:i},i||r.toString()))}),a.map(({title:i,content:r},c)=>{var u,F,p,A;const l=(A=(p=(F=(u=r.props)==null?void 0:u.children)==null?void 0:F.props)==null?void 0:p.className)==null?void 0:A.includes("shiki");return g.jsx(nS,{"data-shiki":l,value:i||c.toString(),children:r},i||c.toString())})]})}var sS="vocs_Div",cS="vocs_Step",Z5="vocs_Step_title",lS="vocs_Step_content",hS="vocs_H2";function Y5(t){return g.jsx(Oa,{...t,className:l2(t.className,hS),level:2})}var uS="vocs_H3";function X5(t){return g.jsx(Oa,{...t,className:l2(t.className,uS),level:3})}var FS="vocs_H4";function J5(t){return g.jsx(Oa,{...t,className:l2(t.className,FS),level:4})}var dS="vocs_H5";function $5(t){return g.jsx(Oa,{...t,className:l2(t.className,dS),level:5})}var AS="vocs_H6";function Q5(t){return g.jsx(Oa,{...t,className:l2(t.className,AS),level:6})}function pS({children:t,className:a,title:i,titleLevel:r=2}){const c=(()=>{if(r===2)return Y5;if(r===3)return X5;if(r===4)return J5;if(r===5)return $5;if(r===6)return Q5;throw new Error("Invalid.")})();return g.jsxs("div",{className:l2(a,cS),children:[typeof i=="string"?g.jsx(c,{className:Z5,children:i}):i,g.jsx("div",{className:lS,children:t})]})}var mS="vocs_Steps";function gS({children:t,className:a}){return g.jsx("div",{className:l2(a,mS),children:t})}function bS({children:t}){return Array.isArray(t)?g.jsx(gS,{children:t.map(({props:a},i)=>{const[r,...c]=Array.isArray(a.children)?a.children:[a.children];return g.jsx(pS,{title:f.cloneElement(r,{className:Z5}),children:c},i)})}):null}var fS="vocs_Subtitle";function yS({children:t}){return g.jsx("div",{className:fS,children:t})}function CS(t){const{layout:a}=oo(),i=l2(t.className,sS);return t.className==="code-group"?g.jsx(rS,{...t,className:i}):"data-authors"in t?g.jsx(K5,{}):"data-blog-posts"in t?g.jsx(Hx,{}):"data-sponsors"in t?g.jsx(Kx,{}):"data-autolink-icon"in t&&a==="docs"?g.jsx(Xx,{...t,className:i}):"data-vocs-steps"in t?g.jsx(bS,{...t,className:i}):t.role==="doc-subtitle"?g.jsx(yS,{...t}):g.jsx("div",{...t,className:i})}var vS="vocs_Figcaption";function BS(t){const a=l2(t.className,vS);return g.jsx("figcaption",{...t,className:a})}var kS="vocs_Figure";function DS(t){const a=l2(t.className,kS);return g.jsx("figure",{...t,className:a})}var wS="vocs_Header";function _S(t){return g.jsx("header",{...t,className:l2(t.className,wS)})}var ES="vocs_HorizontalRule";function xS(t){return g.jsx("hr",{...t,className:l2(t.className,ES)})}var SS="vocs_List",RS="vocs_List_ordered",TS="vocs_List_unordered";function D3({ordered:t,...a}){const i=t?"ol":"ul";return g.jsx(i,{...a,className:l2(a.className,SS,t?RS:TS)})}var PS="vocs_ListItem";function LS(t){return g.jsx("li",{...t,className:l2(t.className,PS)})}function MS(){const t=f.useRef(null),[a,i]=f.useState(!1);f.useEffect(()=>{if(!a)return;const c=setTimeout(()=>i(!1),1e3);return()=>clearTimeout(c)},[a]);function r(){var u;i(!0);const c=(u=t.current)==null?void 0:u.cloneNode(!0),l=c==null?void 0:c.querySelectorAll("button,.line.diff.remove,.twoslash-popup-info-hover,.twoslash-popup-info,.twoslash-meta-line,.twoslash-tag-line");for(const F of l??[])F.remove();navigator.clipboard.writeText(c==null?void 0:c.textContent)}return{copied:a,copy:r,ref:t}}var NS="vocs_CopyButton",IS="vocs_CopyButton_copied";function HS(){return g.jsxs("svg",{width:"100%",height:"100%",xmlns:"http://www.w3.org/2000/svg",fill:"none",viewBox:"0 0 68 67",children:[g.jsx("title",{children:"Checkmark"}),g.jsx("path",{fill:"currentColor",d:"M26.175 66.121c1.904 0 3.418-.83 4.492-2.49L66.263 7.332c.83-1.27 1.123-2.295 1.123-3.32 0-2.393-1.563-4.004-4.004-4.004-1.758 0-2.734.586-3.809 2.295L25.98 56.209 8.304 32.381c-1.123-1.514-2.198-2.149-3.809-2.149-2.441 0-4.2 1.71-4.2 4.15 0 1.026.44 2.15 1.27 3.224l19.971 25.927c1.367 1.758 2.734 2.588 4.639 2.588Z"})]})}function zS({copy:t,copied:a}){return g.jsx("button",{className:NS,"data-copied":a,onClick:t,type:"button",children:a?g.jsx(V0,{label:"Copied",size:"14px",className:IS,icon:HS}):g.jsx(V0,{label:"Copy",size:"18px",icon:S5})})}var OS="vocs_CodeBlock";function jS(t){return g.jsx("div",{...t,className:l2(t.className,OS)})}function VS(){return g.jsxs("svg",{width:"100%",height:"100%",viewBox:"0 0 15 15",fill:"none",xmlns:"http://www.w3.org/2000/svg",children:[g.jsx("title",{children:"File"}),g.jsx("path",{d:"M4.2 1H4.17741H4.1774C3.86936 0.999988 3.60368 0.999978 3.38609 1.02067C3.15576 1.04257 2.92825 1.09113 2.71625 1.22104C2.51442 1.34472 2.34473 1.51442 2.22104 1.71625C2.09113 1.92825 2.04257 2.15576 2.02067 2.38609C1.99998 2.60367 1.99999 2.86935 2 3.17738V3.1774V3.2V11.8V11.8226V11.8226C1.99999 12.1307 1.99998 12.3963 2.02067 12.6139C2.04257 12.8442 2.09113 13.0717 2.22104 13.2837C2.34473 13.4856 2.51442 13.6553 2.71625 13.779C2.92825 13.9089 3.15576 13.9574 3.38609 13.9793C3.60368 14 3.86937 14 4.17741 14H4.2H10.8H10.8226C11.1306 14 11.3963 14 11.6139 13.9793C11.8442 13.9574 12.0717 13.9089 12.2837 13.779C12.4856 13.6553 12.6553 13.4856 12.779 13.2837C12.9089 13.0717 12.9574 12.8442 12.9793 12.6139C13 12.3963 13 12.1306 13 11.8226V11.8V3.2V3.17741C13 2.86936 13 2.60368 12.9793 2.38609C12.9574 2.15576 12.9089 1.92825 12.779 1.71625C12.6553 1.51442 12.4856 1.34472 12.2837 1.22104C12.0717 1.09113 11.8442 1.04257 11.6139 1.02067C11.3963 0.999978 11.1306 0.999988 10.8226 1H10.8H4.2ZM3.23875 2.07368C3.26722 2.05623 3.32362 2.03112 3.48075 2.01618C3.64532 2.00053 3.86298 2 4.2 2H10.8C11.137 2 11.3547 2.00053 11.5193 2.01618C11.6764 2.03112 11.7328 2.05623 11.7613 2.07368C11.8285 2.11491 11.8851 2.17147 11.9263 2.23875C11.9438 2.26722 11.9689 2.32362 11.9838 2.48075C11.9995 2.64532 12 2.86298 12 3.2V11.8C12 12.137 11.9995 12.3547 11.9838 12.5193C11.9689 12.6764 11.9438 12.7328 11.9263 12.7613C11.8851 12.8285 11.8285 12.8851 11.7613 12.9263C11.7328 12.9438 11.6764 12.9689 11.5193 12.9838C11.3547 12.9995 11.137 13 10.8 13H4.2C3.86298 13 3.64532 12.9995 3.48075 12.9838C3.32362 12.9689 3.26722 12.9438 3.23875 12.9263C3.17147 12.8851 3.11491 12.8285 3.07368 12.7613C3.05624 12.7328 3.03112 12.6764 3.01618 12.5193C3.00053 12.3547 3 12.137 3 11.8V3.2C3 2.86298 3.00053 2.64532 3.01618 2.48075C3.03112 2.32362 3.05624 2.26722 3.07368 2.23875C3.11491 2.17147 3.17147 2.11491 3.23875 2.07368ZM5 10C4.72386 10 4.5 10.2239 4.5 10.5C4.5 10.7761 4.72386 11 5 11H8C8.27614 11 8.5 10.7761 8.5 10.5C8.5 10.2239 8.27614 10 8 10H5ZM4.5 7.5C4.5 7.22386 4.72386 7 5 7H10C10.2761 7 10.5 7.22386 10.5 7.5C10.5 7.77614 10.2761 8 10 8H5C4.72386 8 4.5 7.77614 4.5 7.5ZM5 4C4.72386 4 4.5 4.22386 4.5 4.5C4.5 4.77614 4.72386 5 5 5H10C10.2761 5 10.5 4.77614 10.5 4.5C10.5 4.22386 10.2761 4 10 4H5Z",fill:"currentColor",fillRule:"evenodd",clipRule:"evenodd"})]})}function US(){return g.jsxs("svg",{width:"100%",height:"100%",xmlns:"http://www.w3.org/2000/svg",viewBox:"0 0 79 95",fill:"none",children:[g.jsx("title",{children:"Terminal"}),g.jsx("path",{fill:"currentColor",d:"M38.281 34.033c0-1.074-.39-2.05-1.22-2.88L6.885 1.171C6.152.39 5.175 0 4.053 0 1.758 0 0 1.709 0 4.004c0 1.074.488 2.1 1.172 2.88l27.295 27.15L1.172 61.181C.488 61.962 0 62.939 0 64.062c0 2.295 1.758 4.004 4.053 4.004 1.123 0 2.1-.39 2.832-1.172l30.176-29.98c.83-.83 1.22-1.807 1.22-2.88Z"}),g.jsx("path",{stroke:"currentColor",strokeLinecap:"round",strokeWidth:"8px",d:"M36 75h55"})]})}var GS="vocs_CodeTitle";function qS({children:t,className:a,language:i,...r}){return g.jsxs("div",{...r,className:l2(a,GS),children:[i==="bash"?g.jsx(V0,{label:"Terminal",size:"14px",icon:US,style:{marginTop:3}}):t.match(/\.(.*)$/)?g.jsx(V0,{label:"File",size:"14px",icon:VS,style:{marginTop:1}}):null,t]})}var WS="vocs_Pre",KS="vocs_Pre_wrapper";function ZS({children:t,className:a,...i}){const{copied:r,copy:c,ref:l}=MS();function u(A){return!A||typeof A!="object"?A:"props"in A?{...A,props:{...A.props,children:Array.isArray(A.props.children)?A.props.children.map(u):u(A.props.children)}}:A}const F=f.useMemo(()=>u(t),[t]);return(A=>a!=null&&a.includes("shiki")?g.jsxs(jS,{children:[i["data-title"]&&g.jsx(qS,{language:i["data-lang"],children:i["data-title"]}),A]}):A)(g.jsx("div",{className:l2(KS),children:g.jsxs("pre",{ref:l,...i,className:l2(a,WS),children:[g.jsx(zS,{copied:r,copy:c}),F]})}))}var YS="vocs_Footnotes";function XS(t){return g.jsx("section",{...t,className:l2(t.className,YS)})}var w3="vocs_Section";function JS(t){return"data-footnotes"in t?g.jsx(XS,{...t,className:l2(t.className,w3)}):g.jsx("section",{...t,className:l2(t.className,w3)})}var _3="vocs_Span";function $S(t,a){if(!t||!a)return!1;const i=a.getRootNode==null?void 0:a.getRootNode();if(t.contains(a))return!0;if(i&&As(i)){let r=a;for(;r;){if(t===r)return!0;r=r.parentNode||r.host}}return!1}function Kr(t){return(t==null?void 0:t.ownerDocument)||document}function cu(t,a){const i=["mouse","pen"];return i.push("",void 0),i.includes(t)}var QS=typeof document<"u",e8=function(){},Lo=QS?f.useLayoutEffect:e8;const t8={...fs};function Zr(t){const a=f.useRef(t);return Lo(()=>{a.current=t}),a}const o8=t8.useInsertionEffect,a8=o8||(t=>t());function Jn(t){const a=f.useRef(()=>{});return a8(()=>{a.current=t}),f.useCallback(function(){for(var i=arguments.length,r=new Array(i),c=0;c<i;c++)r[c]=arguments[c];return a.current==null?void 0:a.current(...r)},[])}const n8="data-floating-ui-focusable",E3="active",x3="selected",i8={...fs};let S3=!1,r8=0;const R3=()=>"floating-ui-"+Math.random().toString(36).slice(2,6)+r8++;function s8(){const[t,a]=f.useState(()=>S3?R3():void 0);return Lo(()=>{t==null&&a(R3())},[]),f.useEffect(()=>{S3=!0},[]),t}const c8=i8.useId,e6=c8||s8,l8=f.forwardRef(function(a,i){const{context:{placement:r,elements:{floating:c},middlewareData:{arrow:l,shift:u}},width:F=14,height:p=7,tipRadius:A=0,strokeWidth:b=0,staticOffset:m,stroke:y,d:C,style:{transform:B,...v}={},...D}=a,w=e6(),[x,_]=f.useState(!1);if(Lo(()=>{if(!c)return;we(c).direction==="rtl"&&_(!0)},[c]),!c)return null;const[R,P]=r.split("-"),S=R==="top"||R==="bottom";let N=m;(S&&u!=null&&u.x||!S&&u!=null&&u.y)&&(N=null);const O=b*2,U=O/2,n2=F/2*(A/-8+1),u2=p/2*A/4,s2=!!C,c2=N&&P==="end"?"bottom":"top";let W=N&&P==="end"?"right":"left";N&&x&&(W=P==="end"?"left":"right");const F2=(l==null?void 0:l.x)!=null?N||l.x:"",I=(l==null?void 0:l.y)!=null?N||l.y:"",q=C||"M0,0"+(" H"+F)+(" L"+(F-n2)+","+(p-u2))+(" Q"+F/2+","+p+" "+n2+","+(p-u2))+" Z",J={top:s2?"rotate(180deg)":"",left:s2?"rotate(90deg)":"rotate(-90deg)",bottom:s2?"":"rotate(180deg)",right:s2?"rotate(-90deg)":"rotate(90deg)"}[R];return g.jsxs("svg",{...D,"aria-hidden":!0,ref:i,width:s2?F:F+O,height:F,viewBox:"0 0 "+F+" "+(p>F?p:F),style:{position:"absolute",pointerEvents:"none",[W]:F2,[c2]:I,[R]:S||s2?"100%":"calc(100% - "+O/2+"px)",transform:[J,B].filter(Y=>!!Y).join(" "),...v},children:[O>0&&g.jsx("path",{clipPath:"url(#"+w+")",fill:"none",stroke:y,strokeWidth:O+(C?0:1),d:q}),g.jsx("path",{stroke:O&&!C?D.fill:"none",d:q}),g.jsx("clipPath",{id:w,children:g.jsx("rect",{x:-U,y:U*(s2?-1:1),width:F+O,height:F})})]})});function h8(){const t=new Map;return{emit(a,i){var r;(r=t.get(a))==null||r.forEach(c=>c(i))},on(a,i){t.has(a)||t.set(a,new Set),t.get(a).add(i)},off(a,i){var r;(r=t.get(a))==null||r.delete(i)}}}const u8=f.createContext(null),F8=f.createContext(null),t6=()=>{var t;return((t=f.useContext(u8))==null?void 0:t.id)||null},o6=()=>f.useContext(F8);function d8(t){return"data-floating-ui-"+t}function ie(t){t.current!==-1&&(clearTimeout(t.current),t.current=-1)}const T3=d8("safe-polygon");function _h(t,a,i){if(i&&!cu(i))return 0;if(typeof t=="number")return t;if(typeof t=="function"){const r=t();return typeof r=="number"?r:r==null?void 0:r[a]}return t==null?void 0:t[a]}function Eh(t){return typeof t=="function"?t():t}function A8(t,a){a===void 0&&(a={});const{open:i,onOpenChange:r,dataRef:c,events:l,elements:u}=t,{enabled:F=!0,delay:p=0,handleClose:A=null,mouseOnly:b=!1,restMs:m=0,move:y=!0}=a,C=o6(),B=t6(),v=Zr(A),D=Zr(p),w=Zr(i),x=Zr(m),_=f.useRef(),R=f.useRef(-1),P=f.useRef(),S=f.useRef(-1),N=f.useRef(!0),O=f.useRef(!1),U=f.useRef(()=>{}),n2=f.useRef(!1),u2=Jn(()=>{var q;const J=(q=c.current.openEvent)==null?void 0:q.type;return(J==null?void 0:J.includes("mouse"))&&J!=="mousedown"});f.useEffect(()=>{if(!F)return;function q(J){let{open:Y}=J;Y||(ie(R),ie(S),N.current=!0,n2.current=!1)}return l.on("openchange",q),()=>{l.off("openchange",q)}},[F,l]),f.useEffect(()=>{if(!F||!v.current||!i)return;function q(Y){u2()&&r(!1,Y,"hover")}const J=Kr(u.floating).documentElement;return J.addEventListener("mouseleave",q),()=>{J.removeEventListener("mouseleave",q)}},[u.floating,i,r,F,v,u2]);const s2=f.useCallback(function(q,J,Y){J===void 0&&(J=!0),Y===void 0&&(Y="hover");const T=_h(D.current,"close",_.current);T&&!P.current?(ie(R),R.current=window.setTimeout(()=>r(!1,q,Y),T)):J&&(ie(R),r(!1,q,Y))},[D,r]),c2=Jn(()=>{U.current(),P.current=void 0}),W=Jn(()=>{if(O.current){const q=Kr(u.floating).body;q.style.pointerEvents="",q.removeAttribute(T3),O.current=!1}}),F2=Jn(()=>c.current.openEvent?["click","mousedown"].includes(c.current.openEvent.type):!1);f.useEffect(()=>{if(!F)return;function q(Q){if(ie(R),N.current=!1,b&&!cu(_.current)||Eh(x.current)>0&&!_h(D.current,"open"))return;const a2=_h(D.current,"open",_.current);a2?R.current=window.setTimeout(()=>{w.current||r(!0,Q,"hover")},a2):i||r(!0,Q,"hover")}function J(Q){if(F2()){W();return}U.current();const a2=Kr(u.floating);if(ie(S),n2.current=!1,v.current&&c.current.floatingContext){i||ie(R),P.current=v.current({...c.current.floatingContext,tree:C,x:Q.clientX,y:Q.clientY,onClose(){W(),c2(),F2()||s2(Q,!0,"safe-polygon")}});const k2=P.current;a2.addEventListener("mousemove",k2),U.current=()=>{a2.removeEventListener("mousemove",k2)};return}(_.current==="touch"?!$S(u.floating,Q.relatedTarget):!0)&&s2(Q)}function Y(Q){F2()||c.current.floatingContext&&(v.current==null||v.current({...c.current.floatingContext,tree:C,x:Q.clientX,y:Q.clientY,onClose(){W(),c2(),F2()||s2(Q)}})(Q))}function T(){ie(R)}function $(Q){F2()||s2(Q,!1)}if(E0(u.domReference)){const Q=u.domReference,a2=u.floating;return i&&Q.addEventListener("mouseleave",Y),y&&Q.addEventListener("mousemove",q,{once:!0}),Q.addEventListener("mouseenter",q),Q.addEventListener("mouseleave",J),a2&&(a2.addEventListener("mouseleave",Y),a2.addEventListener("mouseenter",T),a2.addEventListener("mouseleave",$)),()=>{i&&Q.removeEventListener("mouseleave",Y),y&&Q.removeEventListener("mousemove",q),Q.removeEventListener("mouseenter",q),Q.removeEventListener("mouseleave",J),a2&&(a2.removeEventListener("mouseleave",Y),a2.removeEventListener("mouseenter",T),a2.removeEventListener("mouseleave",$))}}},[u,F,t,b,y,s2,c2,W,r,i,w,C,D,v,c,F2,x]),Lo(()=>{var q;if(F&&i&&(q=v.current)!=null&&(q=q.__options)!=null&&q.blockPointerEvents&&u2()){O.current=!0;const Y=u.floating;if(E0(u.domReference)&&Y){var J;const T=Kr(u.floating).body;T.setAttribute(T3,"");const $=u.domReference,Q=C==null||(J=C.nodesRef.current.find(a2=>a2.id===B))==null||(J=J.context)==null?void 0:J.elements.floating;return Q&&(Q.style.pointerEvents=""),T.style.pointerEvents="none",$.style.pointerEvents="auto",Y.style.pointerEvents="auto",()=>{T.style.pointerEvents="",$.style.pointerEvents="",Y.style.pointerEvents=""}}}},[F,i,B,u,C,v,u2]),Lo(()=>{i||(_.current=void 0,n2.current=!1,c2(),W())},[i,c2,W]),f.useEffect(()=>()=>{c2(),ie(R),ie(S),W()},[F,u.domReference,c2,W]);const I=f.useMemo(()=>{function q(J){_.current=J.pointerType}return{onPointerDown:q,onPointerEnter:q,onMouseMove(J){const{nativeEvent:Y}=J;function T(){!N.current&&!w.current&&r(!0,Y,"hover")}b&&!cu(_.current)||i||Eh(x.current)===0||n2.current&&J.movementX**2+J.movementY**2<2||(ie(S),_.current==="touch"?T():(n2.current=!0,S.current=window.setTimeout(T,Eh(x.current))))}}},[b,r,i,w,x]);return f.useMemo(()=>F?{reference:I}:{},[F,I])}function xh(t,a){if(!t||!a)return!1;const i=a.getRootNode==null?void 0:a.getRootNode();if(t.contains(a))return!0;if(i&&As(i)){let r=a;for(;r;){if(t===r)return!0;r=r.parentNode||r.host}}return!1}function p8(t){return"composedPath"in t?t.composedPath()[0]:t.target}function m8(t){const{open:a=!1,onOpenChange:i,elements:r}=t,c=e6(),l=f.useRef({}),[u]=f.useState(()=>h8()),F=t6()!=null,[p,A]=f.useState(r.reference),b=Jn((C,B,v)=>{l.current.openEvent=C?B:void 0,u.emit("openchange",{open:C,event:B,reason:v,nested:F}),i==null||i(C,B,v)}),m=f.useMemo(()=>({setPositionReference:A}),[]),y=f.useMemo(()=>({reference:p||r.reference||null,floating:r.floating||null,domReference:r.reference}),[p,r.reference,r.floating]);return f.useMemo(()=>({dataRef:l,open:a,onOpenChange:b,elements:y,events:u,floatingId:c,refs:m}),[a,b,y,u,c,m])}function g8(t){t===void 0&&(t={});const{nodeId:a}=t,i=m8({...t,elements:{reference:null,floating:null,...t.elements}}),r=t.rootContext||i,c=r.elements,[l,u]=f.useState(null),[F,p]=f.useState(null),b=(c==null?void 0:c.domReference)||l,m=f.useRef(null),y=o6();Lo(()=>{b&&(m.current=b)},[b]);const C=sf({...t,elements:{...c,...F&&{reference:F}}}),B=f.useCallback(_=>{const R=E0(_)?{getBoundingClientRect:()=>_.getBoundingClientRect(),getClientRects:()=>_.getClientRects(),contextElement:_}:_;p(R),C.refs.setReference(R)},[C.refs]),v=f.useCallback(_=>{(E0(_)||_===null)&&(m.current=_,u(_)),(E0(C.refs.reference.current)||C.refs.reference.current===null||_!==null&&!E0(_))&&C.refs.setReference(_)},[C.refs]),D=f.useMemo(()=>({...C.refs,setReference:v,setPositionReference:B,domReference:m}),[C.refs,v,B]),w=f.useMemo(()=>({...C.elements,domReference:b}),[C.elements,b]),x=f.useMemo(()=>({...C,...r,refs:D,elements:w,nodeId:a}),[C,D,w,a,r]);return Lo(()=>{r.dataRef.current.floatingContext=x;const _=y==null?void 0:y.nodesRef.current.find(R=>R.id===a);_&&(_.context=x)}),f.useMemo(()=>({...C,context:x,refs:D,elements:w}),[C,D,w,x])}function Sh(t,a,i){const r=new Map,c=i==="item";let l=t;if(c&&t){const{[E3]:u,[x3]:F,...p}=t;l=p}return{...i==="floating"&&{tabIndex:-1,[n8]:""},...l,...a.map(u=>{const F=u?u[i]:null;return typeof F=="function"?t?F(t):null:F}).concat(t).reduce((u,F)=>(F&&Object.entries(F).forEach(p=>{let[A,b]=p;if(!(c&&[E3,x3].includes(A)))if(A.indexOf("on")===0){if(r.has(A)||r.set(A,[]),typeof b=="function"){var m;(m=r.get(A))==null||m.push(b),u[A]=function(){for(var y,C=arguments.length,B=new Array(C),v=0;v<C;v++)B[v]=arguments[v];return(y=r.get(A))==null?void 0:y.map(D=>D(...B)).find(D=>D!==void 0)}}}else u[A]=b}),u),{})}}function b8(t){t===void 0&&(t=[]);const a=t.map(F=>F==null?void 0:F.reference),i=t.map(F=>F==null?void 0:F.floating),r=t.map(F=>F==null?void 0:F.item),c=f.useCallback(F=>Sh(F,t,"reference"),a),l=f.useCallback(F=>Sh(F,t,"floating"),i),u=f.useCallback(F=>Sh(F,t,"item"),r);return f.useMemo(()=>({getReferenceProps:c,getFloatingProps:l,getItemProps:u}),[c,l,u])}function a6(t,a,i){return i===void 0&&(i=!0),t.filter(c=>{var l;return c.parentId===a&&(!i||((l=c.context)==null?void 0:l.open))}).flatMap(c=>[c,...a6(t,c.id,i)])}function P3(t,a){const[i,r]=t;let c=!1;const l=a.length;for(let u=0,F=l-1;u<l;F=u++){const[p,A]=a[u]||[0,0],[b,m]=a[F]||[0,0];A>=r!=m>=r&&i<=(b-p)*(r-A)/(m-A)+p&&(c=!c)}return c}function f8(t,a){return t[0]>=a.x&&t[0]<=a.x+a.width&&t[1]>=a.y&&t[1]<=a.y+a.height}function y8(t){t===void 0&&(t={});const{buffer:a=.5,blockPointerEvents:i=!1,requireIntent:r=!0}=t,c={current:-1};let l=!1,u=null,F=null,p=performance.now();function A(m,y){const C=performance.now(),B=C-p;if(u===null||F===null||B===0)return u=m,F=y,p=C,null;const v=m-u,D=y-F,x=Math.sqrt(v*v+D*D)/B;return u=m,F=y,p=C,x}const b=m=>{let{x:y,y:C,placement:B,elements:v,onClose:D,nodeId:w,tree:x}=m;return function(R){function P(){ie(c),D()}if(ie(c),!v.domReference||!v.floating||B==null||y==null||C==null)return;const{clientX:S,clientY:N}=R,O=[S,N],U=p8(R),n2=R.type==="mouseleave",u2=xh(v.floating,U),s2=xh(v.domReference,U),c2=v.domReference.getBoundingClientRect(),W=v.floating.getBoundingClientRect(),F2=B.split("-")[0],I=y>W.right-W.width/2,q=C>W.bottom-W.height/2,J=f8(O,c2),Y=W.width>c2.width,T=W.height>c2.height,$=(Y?c2:W).left,Q=(Y?c2:W).right,a2=(T?c2:W).top,d2=(T?c2:W).bottom;if(u2&&(l=!0,!n2))return;if(s2&&(l=!1),s2&&!n2){l=!0;return}if(n2&&E0(R.relatedTarget)&&xh(v.floating,R.relatedTarget)||x&&a6(x.nodesRef.current,w).length)return;if(F2==="top"&&C>=c2.bottom-1||F2==="bottom"&&C<=c2.top+1||F2==="left"&&y>=c2.right-1||F2==="right"&&y<=c2.left+1)return P();let k2=[];switch(F2){case"top":k2=[[$,c2.top+1],[$,W.bottom-1],[Q,W.bottom-1],[Q,c2.top+1]];break;case"bottom":k2=[[$,W.top+1],[$,c2.bottom-1],[Q,c2.bottom-1],[Q,W.top+1]];break;case"left":k2=[[W.right-1,d2],[W.right-1,a2],[c2.left+1,a2],[c2.left+1,d2]];break;case"right":k2=[[c2.right-1,d2],[c2.right-1,a2],[W.left+1,a2],[W.left+1,d2]];break}function g2(K2){let[_2,L2]=K2;switch(F2){case"top":{const V2=[Y?_2+a/2:I?_2+a*4:_2-a*4,L2+a+1],h0=[Y?_2-a/2:I?_2+a*4:_2-a*4,L2+a+1],L0=[[W.left,I||Y?W.bottom-a:W.top],[W.right,I?Y?W.bottom-a:W.top:W.bottom-a]];return[V2,h0,...L0]}case"bottom":{const V2=[Y?_2+a/2:I?_2+a*4:_2-a*4,L2-a],h0=[Y?_2-a/2:I?_2+a*4:_2-a*4,L2-a],L0=[[W.left,I||Y?W.top+a:W.bottom],[W.right,I?Y?W.top+a:W.bottom:W.top+a]];return[V2,h0,...L0]}case"left":{const V2=[_2+a+1,T?L2+a/2:q?L2+a*4:L2-a*4],h0=[_2+a+1,T?L2-a/2:q?L2+a*4:L2-a*4];return[...[[q||T?W.right-a:W.left,W.top],[q?T?W.right-a:W.left:W.right-a,W.bottom]],V2,h0]}case"right":{const V2=[_2-a,T?L2+a/2:q?L2+a*4:L2-a*4],h0=[_2-a,T?L2-a/2:q?L2+a*4:L2-a*4],L0=[[q||T?W.left+a:W.right,W.top],[q?T?W.left+a:W.right:W.left+a,W.bottom]];return[V2,h0,...L0]}}}if(!P3([S,N],k2)){if(l&&!J)return P();if(!n2&&r){const K2=A(R.clientX,R.clientY);if(K2!==null&&K2<.1)return P()}P3([S,N],g2([y,C]))?!l&&r&&(c.current=window.setTimeout(P,40)):P()}}};return b.__options={blockPointerEvents:i},b}function C8({children:t,...a}){const[i,r]=t,c=f.useRef(null),[l,u]=f.useState(!1),{context:F,refs:p,floatingStyles:A}=g8({middleware:[hf({element:c}),cf(8),lf()],open:l,onOpenChange:u,placement:"bottom-start"}),b=A8(F,{handleClose:y8()}),{getReferenceProps:m,getFloatingProps:y}=b8([b]),C=r.props.children,B=i.props.children;return g.jsxs("span",{...a,children:[g.jsx("span",{className:"twoslash-target",ref:p.setReference,...m(),children:C}),l&&g.jsxs("div",{className:"twoslash-popup-info-hover",ref:p.setFloating,style:A,...y(),children:[g.jsx(l8,{ref:c,context:F,fill:zh.background5,height:3,stroke:zh.border2,strokeWidth:1,width:7}),g.jsx("div",{className:"twoslash-popup-scroll-container",children:B})]})]})}function v8(t){var i;const a=l2(t.className,_3);return(i=t.className)!=null&&i.includes("twoslash-hover")?g.jsx(C8,{...t,className:a}):g.jsx("span",{...t,className:l2(t.className,_3)})}var B8="vocs_Strong";function k8(t){return g.jsx("strong",{...t,className:l2(t.className,B8)})}var D8="vocs_Summary";function w8(t){return g.jsx("summary",{...t,className:l2(t.className,D8)})}var _8="vocs_Table";function E8(t){return g.jsx("table",{...t,className:l2(t.className,_8)})}var x8="vocs_TableCell";function S8(t){return g.jsx("td",{...t,className:l2(t.className,x8)})}var R8="vocs_TableHeader";function T8(t){return g.jsx("th",{...t,className:l2(t.className,R8)})}var P8="vocs_TableRow";function L8(t){return g.jsx("tr",{...t,className:l2(t.className,P8)})}const M8={a:lx,aside:yx,blockquote:vx,code:kx,details:_x,div:CS,pre:ZS,header:_S,figcaption:BS,figure:DS,h1:fg,h2:Y5,h3:X5,h4:J5,h5:$5,h6:Q5,hr:xS,kd:sb,li:LS,ol:t=>g.jsx(D3,{ordered:!0,...t}),p:yg,section:JS,span:v8,strong:k8,summary:w8,table:E8,td:S8,th:T8,tr:L8,ul:t=>g.jsx(D3,{ordered:!1,...t})};function N8(){const{pathname:t}=i0(),a=m0(),{ogImageUrl:i}=a;if(!i)return;if(typeof i=="string")return i;const r=f.useMemo(()=>{const c=Object.keys(i).filter(l=>t.startsWith(l));return c[c.length-1]},[i,t]);if(r)return i[r]}function lu(t){const{children:a,content:i,filePath:r,frontmatter:c,lastUpdatedAt:l,path:u}=t,{pathname:F}=i0(),p=f.useRef(void 0);return f.useEffect(()=>{p.current=F}),g.jsxs(g.Fragment,{children:[g.jsx(I8,{frontmatter:c}),typeof window<"u"&&g.jsx(lg,{}),g.jsx(rx,{components:M8,children:g.jsx(mB,{frontmatter:c,path:u,children:g.jsx(Bg.Provider,{value:{content:i,filePath:r,frontmatter:c,lastUpdatedAt:l,previousPath:p.current},children:a})})})]})}function I8({frontmatter:t}){var y,C,B,v,D,w;const a=m0(),i=N8(),{baseUrl:r,font:c,iconUrl:l,logoUrl:u}=a,F=(t==null?void 0:t.description)??a.description,p=(t==null?void 0:t.title)??a.title,A=(()=>{if(a.title&&!p.includes(a.title))return a.titleTemplate})(),b=typeof window<"u"&&window.location.hostname==="localhost",m=A?A.replace("%s",p):p;return g.jsxs(g.Fragment,{children:[m&&g.jsx("title",{children:m}),r&&!0&&!b&&g.jsx("base",{href:r}),F!=="undefined"&&g.jsx("meta",{name:"description",content:F}),l&&typeof l=="string"&&g.jsx("link",{rel:"icon",href:l,type:Rh(l)}),l&&typeof l!="string"&&g.jsx("link",{rel:"icon",href:l.light,type:Rh(l.light)}),l&&typeof l!="string"&&g.jsx("link",{rel:"icon",href:l.dark,type:Rh(l.dark),media:"(prefers-color-scheme: dark)"}),g.jsx("meta",{property:"og:type",content:"website"}),g.jsx("meta",{property:"og:title",content:p||a.title}),r&&g.jsx("meta",{property:"og:url",content:r}),F!=="undefined"&&g.jsx("meta",{property:"og:description",content:F}),i&&g.jsx("meta",{property:"og:image",content:i.replace("%logo",`${r||""}${typeof u=="string"?u:(u==null?void 0:u.dark)||""}`).replace("%title",p||"").replace("%description",(F!=="undefined"?F:"")||"")}),(((y=c==null?void 0:c.default)==null?void 0:y.google)||((C=c==null?void 0:c.mono)==null?void 0:C.google))&&g.jsx("link",{rel:"preconnect",href:"https://fonts.googleapis.com"}),(((B=c==null?void 0:c.default)==null?void 0:B.google)||((v=c==null?void 0:c.mono)==null?void 0:v.google))&&g.jsx("link",{rel:"preconnect",href:"https://fonts.gstatic.com",crossOrigin:""}),((D=c==null?void 0:c.default)==null?void 0:D.google)&&g.jsx("link",{href:`https://fonts.googleapis.com/css2?family=${c.default.google}:wght@300;400;500&display=swap`,rel:"stylesheet"}),((w=c==null?void 0:c.mono)==null?void 0:w.google)&&g.jsx("link",{href:`https://fonts.googleapis.com/css2?family=${c.mono.google}:wght@300;400;500&display=swap`,rel:"stylesheet"}),g.jsx("meta",{name:"twitter:card",content:"summary_large_image"}),i&&g.jsx("meta",{property:"twitter:image",content:i.replace("%logo",`${r||""}${typeof u=="string"?u:(u==null?void 0:u.dark)||""}`).replace("%title",p?encodeURIComponent(p):"").replace("%description",F?encodeURIComponent(F):"")})]})}function Rh(t){if(t.endsWith(".svg"))return"image/svg+xml";if(t.endsWith(".png"))return"image/png";if(t.endsWith(".jpg"))return"image/jpeg";if(t.endsWith(".ico"))return"image/x-icon";if(t.endsWith(".webp"))return"image/webp"}const H8=(()=>{const t=ku.find(({path:a})=>a==="*");return t?{path:t.path,lazy:async()=>{const{frontmatter:a,...i}=await t.lazy();return{...i,element:g.jsx(lu,{frontmatter:a,path:t.path,children:g.jsx(ru,{children:g.jsx(i.default,{})})})}}}:{path:"*",lazy:void 0,element:g.jsx(lu,{frontmatter:{layout:"minimal"},path:"*",children:g.jsx(ru,{children:g.jsx(U1,{})})})}})(),L3=[...ku.filter(({path:t})=>t!=="*").map(t=>({path:t.path,lazy:async()=>{const{frontmatter:a,...i}=await t.lazy();return{...i,element:g.jsx(lu,{content:decodeURIComponent(t.content??""),filePath:t.filePath,frontmatter:a,lastUpdatedAt:t.lastUpdatedAt,path:t.path,children:g.jsx(ru,{children:g.jsx(i.default,{})})})}}})),H8];async function z8(t,a){var r;const i=(r=yt(t,window.location,a))==null?void 0:r.filter(c=>c.route.lazy);i&&(i==null?void 0:i.length)>0&&await Promise.all(i.map(async c=>{const l=await c.route.lazy();Object.assign(c.route,{...l,lazy:void 0})}))}function O8(){const t=document.querySelectorAll('style[data-vocs-temp-style="true"]');for(const a of t)a.remove()}j8();async function j8(){const t=Ag().basePath;await z8(L3,t),O8();const a=u1(L3,{basename:t});fC.hydrateRoot(document.getElementById("app"),g.jsx(_1,{children:g.jsx(zv,{router:a})}))}export{nS as C,ke as L,tS as R,aS as T,X8 as a,Dh as b,l2 as c,m0 as d,YD as e,oS as f,g as j,ix as u};
